1
00:00:07,174 --> 00:00:08,809 line:0
大家好
我是Jonathan Davis


2
00:00:08,876 --> 00:00:12,312 line:0
Safari和WebKit团队的
网页技术传播员


3
00:00:12,613 --> 00:00:15,549 line:0
欢迎收看
使用网页查看器审查网页内容


4
00:00:16,049 --> 00:00:18,051 line:0
在创建网页内容的过程中


5
00:00:18,118 --> 00:00:20,220 line:-1
开发者需要检查许多细节


6
00:00:21,021 --> 00:00:23,724 line:-1
比如CSS类名的命名规则


7
00:00:23,790 --> 00:00:26,026 line:-1
还要保证网页可以正常访问


8
00:00:26,493 --> 00:00:27,861 line:-1
细节太多


9
00:00:27,928 --> 00:00:31,031 line:-1
很容易忘记 找起来也很乏味


10
00:00:31,331 --> 00:00:33,400 line:-1
内置清单是最理想的办法


11
00:00:33,867 --> 00:00:37,571 line:-2
部分团队会给持续集成系统
设置自动测试


12
00:00:37,638 --> 00:00:40,340 line:-2
就像Safari的
WebDriver


13
00:00:40,407 --> 00:00:43,343 line:-2
macOS可用
现在iOS也能用了


14
00:00:43,710 --> 00:00:46,113 line:-2
WebDriver
有益于查找代码变化


15
00:00:46,180 --> 00:00:48,749 line:-1
找到用户功能失败的原因


16
00:00:49,216 --> 00:00:50,417 line:-1
但对于网页开发者


17
00:00:50,484 --> 00:00:53,854 line:-1
他们要检查进程是否符合代码结果


18
00:00:54,121 --> 00:00:57,057 line:-1
网页查看器现在有个新的审查系统


19
00:00:57,124 --> 00:00:59,660 line:-2
可用于macOS的
Safari 13


20
00:00:59,726 --> 00:01:01,295 line:-1
它提供了快速 简单


21
00:01:01,361 --> 00:01:03,764 line:-1
更方便的方法 检查网页内容


22
00:01:05,599 --> 00:01:09,069 line:-2
本视频中 我会演示
如何使用网页查看器的审查


23
00:01:09,469 --> 00:01:12,206 line:-1
如何实现测试并分析测试结果


24
00:01:12,472 --> 00:01:13,307 line:-1
以及最后


25
00:01:13,373 --> 00:01:16,543 line:-1
如何为项目 创建自定义审查


26
00:01:17,411 --> 00:01:18,245 line:-1
首先


27
00:01:18,312 --> 00:01:21,315 line:-2
访问网页查看器
需要开启开发菜单


28
00:01:22,482 --> 00:01:24,384 line:-1
只要打开Safari偏好设置


29
00:01:24,751 --> 00:01:26,086 line:-1
点击“高级”


30
00:01:26,553 --> 00:01:30,390 line:-1
然后勾选“在菜单栏显示开发菜单”


31
00:01:32,192 --> 00:01:33,727 line:-1
然后加载一个网页


32
00:01:34,127 --> 00:01:36,430 line:-1
在开发菜单打开网页查看器


33
00:01:36,830 --> 00:01:39,466 line:-2
或使用快捷键
Command-Option-I


34
00:01:40,934 --> 00:01:43,804 line:-1
以WebKit.org为例


35
00:01:44,071 --> 00:01:45,672 line:-1
点击“审查”标签


36
00:01:48,308 --> 00:01:51,111 line:-1
左边栏列出了审查项


37
00:01:51,645 --> 00:01:54,581 line:-1
点击左侧的箭头 展开审查项


38
00:01:55,215 --> 00:01:58,452 line:-1
审查项是多个测试组或测试的集合


39
00:01:59,119 --> 00:02:00,854 line:-1
测试组没有任何功能


40
00:02:00,921 --> 00:02:05,325 line:-1
只是单个测试集合的组织容器


41
00:02:06,260 --> 00:02:07,694 line:-1
运行审查很简单


42
00:02:07,761 --> 00:02:10,564 line:-2
点击“开始”按钮
运行所有可用的审查项


43
00:02:11,265 --> 00:02:15,202 line:-2
或右击一个审查项
在上下文菜单中查看更多选项


44
00:02:15,903 --> 00:02:17,204 line:-1
如果只运行一个审查项


45
00:02:17,271 --> 00:02:19,473 line:-1
右击审查项 选择“开始”


46
00:02:19,940 --> 00:02:22,409 line:-1
或者将鼠标悬停在左边栏的右侧


47
00:02:22,476 --> 00:02:24,044 line:-1
会出现一个播放键


48
00:02:24,478 --> 00:02:26,947 line:-1
也可以点亮后 按下空格


49
00:02:27,347 --> 00:02:30,617 line:-2
审查十分迅速
并在测试完成后即时更新


50
00:02:32,286 --> 00:02:34,521 line:-1
选择审查项的另一个方法


51
00:02:34,888 --> 00:02:36,590 line:-1
是点击“编辑”按钮


52
00:02:36,657 --> 00:02:38,892 line:-1
在导航边栏的底部


53
00:02:41,195 --> 00:02:45,499 line:-1
这里可以勾选或取消单个测试


54
00:02:45,966 --> 00:02:47,167 line:-1
测试组


55
00:02:48,035 --> 00:02:51,572 line:-2
或整个审查项
来选择是否启用它们


56
00:02:54,308 --> 00:02:57,211 line:-1
完成后点击底部的“完成”按钮


57
00:02:59,112 --> 00:03:02,282 line:-1
测试的结果列表显示在审查项下方


58
00:03:02,349 --> 00:03:03,784 line:-1
在结果文件夹里


59
00:03:03,851 --> 00:03:06,820 line:-1
每个结果被存入“运行”文件夹


60
00:03:08,522 --> 00:03:12,459 line:-2
展开“运行”文件夹
可以查看运行审查的结果


61
00:03:13,160 --> 00:03:16,730 line:-1
结果运行在页面重新加载后也可用


62
00:03:16,797 --> 00:03:18,565 line:-1
因此你可以修改网页


63
00:03:18,632 --> 00:03:21,001 line:-1
然后重新审核更新后的结果


64
00:03:21,368 --> 00:03:23,937 line:-1
比如 你可以对比通过率


65
00:03:24,304 --> 00:03:27,207 line:-1
结果会在关闭网页查看器后清空


66
00:03:30,177 --> 00:03:32,646 line:-1
点击审查运行演示的结果


67
00:03:32,713 --> 00:03:36,483 line:-2
会出现一个报告
展现示例结果的级别和数据


68
00:03:38,619 --> 00:03:39,820 line:-1
前三个级别


69
00:03:39,887 --> 00:03:42,222 line:-2
应该很眼熟
如果你用过Xcode


70
00:03:42,623 --> 00:03:44,825 line:-1
“通过”代表测试通过


71
00:03:44,892 --> 00:03:47,227 line:-1
指代码符合测试要求


72
00:03:47,728 --> 00:03:49,229 line:-1
“警告”是基本通过


73
00:03:49,296 --> 00:03:51,298 line:-1
指虽然代码通过了测试


74
00:03:51,365 --> 00:03:53,133 line:-1
但还有需要修改的地方


75
00:03:53,433 --> 00:03:55,869 line:-1
“失败”指代码没能通过测试


76
00:03:57,905 --> 00:04:01,608 line:-2
另外这两个级别
是网页查看器特有的


77
00:04:01,975 --> 00:04:05,012 line:-2
“错误”是在使用
JavaScript运行测试时


78
00:04:05,078 --> 00:04:06,246 line:-1
出现的报错


79
00:04:06,747 --> 00:04:09,483 line:-1
“不支持”是个特殊情况 说明


80
00:04:09,550 --> 00:04:12,753 line:-1
当前页面不支持被测试的数据


81
00:04:12,819 --> 00:04:14,821 line:-1
比如API缺失


82
00:04:15,923 --> 00:04:18,559 line:-1
测试结果还可以包括测试数据


83
00:04:18,625 --> 00:04:21,295 line:-1
形式为DOM节点或报错消息


84
00:04:23,697 --> 00:04:26,300 line:-1
网页查看器自带部分默认的审查项


85
00:04:26,366 --> 00:04:28,602 line:-1
可以禁用 但不能删除


86
00:04:29,102 --> 00:04:30,370 line:-1
其中一个默认项


87
00:04:30,437 --> 00:04:33,006 line:-1
测试网页的标记


88
00:04:33,073 --> 00:04:36,276 line:-1
是否符合访问性的一般准则


89
00:04:37,744 --> 00:04:40,514 line:-1
然后是访问性审查的运行结果


90
00:04:40,581 --> 00:04:41,849 line:-1
在WebKit.org


91
00:04:43,150 --> 00:04:46,286 line:-1
整体评分说明WebKit运行不错


92
00:04:46,720 --> 00:04:48,288 line:-1
但还有提升空间


93
00:04:49,690 --> 00:04:51,892 line:-1
结果中显示“失败”的地方


94
00:04:51,959 --> 00:04:54,194 line:-1
是检测到失败的DOM节点


95
00:04:54,261 --> 00:04:56,663 line:-1
显示为可互动的DOM树


96
00:04:57,264 --> 00:04:58,732 line:-1
展开该节点的DOM树


97
00:04:58,799 --> 00:05:01,001 line:-1
就可以访问子节点


98
00:05:01,068 --> 00:05:04,838 line:-1
悬停鼠标会显示对应的页面元素


99
00:05:04,905 --> 00:05:06,840 line:-1
就像在使用元素标签


100
00:05:11,378 --> 00:05:13,547 line:-1
这就很容易理解


101
00:05:13,614 --> 00:05:16,350 line:-1
网页内容的哪个代码需要完善


102
00:05:17,417 --> 00:05:18,519 line:-1
要修复它


103
00:05:18,585 --> 00:05:20,120 line:-1
只要点击这个箭头


104
00:05:20,187 --> 00:05:22,155 line:-1
直接到元素标签里的节点


105
00:05:23,123 --> 00:05:25,492 line:-1
问题是作为菜单的元素


106
00:05:25,559 --> 00:05:28,695 line:-1
需要子元素才能形成菜单项


107
00:05:29,730 --> 00:05:32,533 line:-1
因此我只要添加一个新的角色属性


108
00:05:32,599 --> 00:05:34,334 line:-1
用菜单项的值


109
00:05:34,401 --> 00:05:36,870 line:-1
给菜单的每个子元素


110
00:05:37,871 --> 00:05:39,773 line:-1
我现在就补上缺失的属性


111
00:05:39,840 --> 00:05:41,308 line:-1
给每个元素


112
00:05:44,745 --> 00:05:46,180 line:-1
还有几个


113
00:05:50,717 --> 00:05:51,552 line:-1
好了


114
00:05:51,919 --> 00:05:53,654 line:-1
现在切换回审查标签


115
00:05:53,720 --> 00:05:55,289 line:-1
重新运行审查


116
00:05:55,355 --> 00:05:58,158 line:-1
看看DOM修改后的新结果


117
00:06:01,428 --> 00:06:04,498 line:-2
很好
这个页面现在通过了所有测试


118
00:06:04,765 --> 00:06:08,936 line:-1
我只需将这些修改并入实际代码中


119
00:06:11,471 --> 00:06:13,740 line:-1
你看 检查问题就这么简单


120
00:06:13,807 --> 00:06:16,810 line:-2
修改它们也很方便
在网页查看器中


121
00:06:17,544 --> 00:06:21,548 line:-1
审查和审查结果可以导出 再导入


122
00:06:21,615 --> 00:06:25,385 line:-2
点击“导出”按钮
将结果保存到JSON文件


123
00:06:26,153 --> 00:06:28,222 line:-1
它们可以通过查看器再次导入


124
00:06:28,288 --> 00:06:29,923 line:-1
仍然可以访问完整结果


125
00:06:29,990 --> 00:06:31,892 line:-1
包括可互动的DOM节点


126
00:06:31,959 --> 00:06:35,229 line:-1
只要页面元素匹配报表节点


127
00:06:36,897 --> 00:06:38,799 line:-1
你也可以导出内置的审查项


128
00:06:38,866 --> 00:06:41,668 line:-1
作为你编写审查项的示例


129
00:06:41,735 --> 00:06:44,872 line:-1
由于许多团队都有独特的目标代码


130
00:06:44,938 --> 00:06:48,375 line:-2
编写自定义的审查项
是最大的用处之一


131
00:06:48,442 --> 00:06:51,011 line:-1
在使用网页查看器的审查框架时


132
00:06:52,312 --> 00:06:54,815 line:-1
使用JSON格式实现便携


133
00:06:55,082 --> 00:06:58,452 line:-2
每个测试都是字符串化的
JavaScript函数


134
00:06:58,519 --> 00:06:59,953 line:-1
提供简单的框架


135
00:07:00,020 --> 00:07:02,689 line:-2
和特殊的通道
访问更多的数据


136
00:07:02,756 --> 00:07:03,724 line:-1
在JavaScript


137
00:07:04,424 --> 00:07:05,592 line:-1
简单的JSON格式


138
00:07:05,659 --> 00:07:09,129 line:-1
方便分享测试给组员或其他开发者


139
00:07:10,330 --> 00:07:12,032 line:-1
这个例子是ESLint审查


140
00:07:12,099 --> 00:07:13,800 line:-1
WebKit博客上有


141
00:07:13,867 --> 00:07:15,936 line:-1
关于创建网页查看器审核


142
00:07:16,503 --> 00:07:19,740 line:-2
这篇博客深入讲解了
如何编写自定义审查


143
00:07:19,806 --> 00:07:23,243 line:-1
以及使用审查框架的其他好处


144
00:07:23,677 --> 00:07:26,446 line:-2
只要下载
ESLint JSON文档


145
00:07:27,247 --> 00:07:30,717 line:-1
就能拖拽到网页查看器中


146
00:07:30,784 --> 00:07:31,919 line:-1
导入它


147
00:07:34,154 --> 00:07:36,790 line:-1
网页查看器的审查又快又方便


148
00:07:36,857 --> 00:07:38,292 line:-1
希望你们可以尝试一下


149
00:07:38,358 --> 00:07:41,628 line:-2
使用内置访问性审查
检查你的网页


150
00:07:42,796 --> 00:07:45,465 line:-2
使用便携的审查格式
创建自定义审查项


151
00:07:45,532 --> 00:07:49,336 line:-1
保证进程中的代码符合项目标准


152
00:07:49,937 --> 00:07:51,371 line:-1
我们期待您的反馈


153
00:07:51,438 --> 00:07:53,774 line:-2
如果发现任何问题
请反馈错误报告


154
00:07:53,841 --> 00:07:55,576 line:-1
也可提出特殊要求


155
00:07:56,243 --> 00:07:57,211 line:-1
更多信息


156
00:07:57,277 --> 00:07:59,513 line:-1
和其他相关资料


157
00:07:59,580 --> 00:08:03,517 line:-1
请查看本视频相关讲演中的链接

