1
00:00:06,406 --> 00:00:10,110 line:-2
（MAC OS的
APPKIT新功能）


2
00:00:16,550 --> 00:00:18,118 line:-1
大家下午好


3
00:00:19,119 --> 00:00:19,987 line:-1
我是Chris Dreessen


4
00:00:20,254 --> 00:00:21,655 line:-1
我从事的工作是Cocoa框架


5
00:00:22,189 --> 00:00:24,958 line:-2
今天我们来谈谈
今年AppKit的新功能


6
00:00:26,126 --> 00:00:27,694 line:-1
我们开始吧


7
00:00:28,262 --> 00:00:30,797 line:-1
我们有很多功能


8
00:00:30,864 --> 00:00:32,900 line:-2
我们对NSColor
进行了一些补充


9
00:00:33,433 --> 00:00:34,568 line:-1
对NSScreen也进行了补充


10
00:00:35,102 --> 00:00:36,403 line:-1
我们还有一整套


11
00:00:36,703 --> 00:00:39,606 line:-1
帮助您处理文字和字体的功能


12
00:00:40,374 --> 00:00:43,610 line:-1
我们在此次演讲都会略微提到


13
00:00:43,977 --> 00:00:46,380 line:-1
我们也会讲到工具栏和触控栏


14
00:00:46,446 --> 00:00:47,414 line:-1
还有边栏


15
00:00:47,481 --> 00:00:48,949 line:-2
（色彩 显示屏 文本 工具栏
控件 活动 几何 格式化 扩展）


16
00:00:49,016 --> 00:00:50,450 line:-1
我们也会讲到


17
00:00:50,817 --> 00:00:54,154 line:-2
AppKit macOS 10.15
的一些新控制功能


18
00:00:54,855 --> 00:00:57,858 line:-2
我们会通过NSEvent的介绍
来结束今天AppKit的讲解


19
00:00:58,992 --> 00:01:00,227 line:-1
我们稍微跳一下


20
00:01:00,661 --> 00:01:02,129 line:-1
讲解一些基础功能


21
00:01:02,462 --> 00:01:05,165 line:-2
包括一些几何增强功能
和新格式化程序


22
00:01:05,232 --> 00:01:07,034 line:-1
这些功能能够使本地化更加简单


23
00:01:07,668 --> 00:01:08,802 line:-1
最后再对macOS 10.15的


24
00:01:09,203 --> 00:01:12,105 line:-1
系统扩展注释进行总结


25
00:01:13,173 --> 00:01:14,107 line:-1
（新框架）


26
00:01:14,174 --> 00:01:16,043 line:-1
在我们开始之前


27
00:01:16,777 --> 00:01:19,012 line:-1
我们先来讲讲重头戏


28
00:01:19,780 --> 00:01:21,315 line:-1
在macOS 10.15


29
00:01:21,648 --> 00:01:24,451 line:-2
AppKit并不是
系统唯一的UI框架


30
00:01:25,018 --> 00:01:27,254 line:-1
我们还有其他两个UI框架


31
00:01:28,355 --> 00:01:30,958 line:0
你们可能听说过其中一个


32
00:01:31,024 --> 00:01:31,859 line:0
那就是UIKit


33
00:01:33,293 --> 00:01:34,628 line:-1
在macOS 10.15中


34
00:01:34,928 --> 00:01:38,532 line:0
你可以重新编译你的app
并在Mac上运行iPad app


35
00:01:39,233 --> 00:01:42,135 line:0
如果你的AppKit app
运行良好


36
00:01:42,202 --> 00:01:45,172 line:0
那你对这个可能就不那么感兴趣


37
00:01:46,073 --> 00:01:49,676 line:0
但如果你的iPad app
从来都没有在Mac上运行过


38
00:01:49,743 --> 00:01:52,813 line:0
或者过去你在这个
iPad app上花了很多心血


39
00:01:52,880 --> 00:01:53,981 line:0
但没有怎么研究过Mac


40
00:01:54,047 --> 00:01:55,449 line:0
那就很有用了


41
00:01:56,350 --> 00:01:59,119 line:0
你可以仍旧用AppKit为你的


42
00:01:59,186 --> 00:02:01,955 line:0
UIKit app进行润色
比如工具栏和触控栏支持


43
00:02:04,191 --> 00:02:05,759 line:0
我们认为会很有用


44
00:02:06,660 --> 00:02:07,861 line:0
另一个新的框架


45
00:02:07,928 --> 00:02:09,496 line:0
我们都非常激动


46
00:02:09,562 --> 00:02:10,531 line:-1
就是SwiftUI


47
00:02:11,231 --> 00:02:14,401 line:0
SwiftUI用简洁的方式


48
00:02:14,468 --> 00:02:16,270 line:0
来描述你的用户界面


49
00:02:16,336 --> 00:02:17,671 line:0
和它们之间的过渡


50
00:02:18,071 --> 00:02:19,940 line:0
也是将它们整合到数据模型的方法


51
00:02:21,175 --> 00:02:23,544 line:0
我认为这是制作UI的好方法


52
00:02:23,610 --> 00:02:26,446 line:-2
它是原装Swift
并支持各种Swift语言功能


53
00:02:26,513 --> 00:02:27,548 line:-1
我们很喜欢这一点


54
00:02:28,215 --> 00:02:30,617 line:-2
再次强调 这要与AppKit
一起使用


55
00:02:30,684 --> 00:02:34,054 line:-2
你要把它嵌入视图层次结构中
到处都要


56
00:02:34,121 --> 00:02:36,657 line:-1
一整个星期都有关于


57
00:02:36,723 --> 00:02:37,724 line:-1
这些框架的演讲


58
00:02:37,791 --> 00:02:39,026 line:-1
你们都可以参加


59
00:02:39,593 --> 00:02:40,794 line:-1
（色彩）


60
00:02:40,861 --> 00:02:41,828 line:-1
回到AppKit


61
00:02:42,362 --> 00:02:44,765 line:-1
在macOS 10.15中


62
00:02:45,465 --> 00:02:47,568 line:-2
我们在NSColor中
加入了一些新的系统颜色


63
00:02:47,634 --> 00:02:49,469 line:-1
有青色和靛蓝


64
00:02:50,671 --> 00:02:53,106 line:-2
这些是系统颜色
也就说明它们是动态的


65
00:02:53,173 --> 00:02:55,075 line:-1
根据你使用的外观


66
00:02:55,542 --> 00:02:56,577 line:-1
它们也会进行相应的变化


67
00:02:59,012 --> 00:03:00,147 line:-1
我觉得这都是很好看的颜色


68
00:03:00,214 --> 00:03:01,682 line:-1
在你的app中都可以用到


69
00:03:03,050 --> 00:03:05,485 line:-1
NSColor也有根本性的变化


70
00:03:05,552 --> 00:03:06,486 line:-1
我们稍后会讲到


71
00:03:06,787 --> 00:03:10,424 line:-2
在NSColor中 我们用的是
tagged pointer系统


72
00:03:10,691 --> 00:03:13,760 line:-2
NSNumber和
NSString用的也是这个


73
00:03:14,394 --> 00:03:15,462 line:-2
什么是
tagged pointer呢


74
00:03:16,029 --> 00:03:17,564 line:-1
一般来说 在NSColor


75
00:03:18,098 --> 00:03:20,033 line:-1
我们将各种组件值或其他信息


76
00:03:20,100 --> 00:03:23,036 line:-1
作为iBar存储在已配置的对象中


77
00:03:23,971 --> 00:03:25,038 line:-1
而在tagged pointer


78
00:03:25,105 --> 00:03:28,175 line:-1
我们将该信息压缩到较小的位数


79
00:03:28,542 --> 00:03:29,910 line:-1
并将它们储存在pointer中


80
00:03:30,410 --> 00:03:32,079 line:-1
所以不需要单独配置


81
00:03:32,946 --> 00:03:36,917 line:-2
如果你的代码大量配置
或解除配置NSColors


82
00:03:36,984 --> 00:03:38,819 line:-1
你就能够注意到这一点


83
00:03:38,886 --> 00:03:39,753 line:-1
我们对此也很兴奋


84
00:03:41,522 --> 00:03:44,491 line:-1
一般情况下这种变化是不可见的


85
00:03:44,958 --> 00:03:46,460 line:-1
但我想强调一点


86
00:03:47,494 --> 00:03:49,696 line:-1
如果你要访问颜色的派生属性


87
00:03:49,763 --> 00:03:51,265 line:-1
例如CGColor


88
00:03:52,332 --> 00:03:53,867 line:-1
而这是未标记的版本


89
00:03:53,934 --> 00:03:56,003 line:-1
它可以在色彩中缓存为iBar


90
00:03:56,069 --> 00:03:59,439 line:-2
而CGColor也可以和
NSColor一样


91
00:04:00,574 --> 00:04:02,276 line:-2
在显示屏上的这段代码
我们可以看到


92
00:04:02,609 --> 00:04:05,112 line:-1
我们将CGColor传递至


93
00:04:05,179 --> 00:04:07,447 line:-1
以色彩填充context设置调用


94
00:04:08,015 --> 00:04:09,650 line:-1
这在以前是没有问题的


95
00:04:10,217 --> 00:04:11,451 line:-1
但在tagged pointer


96
00:04:11,518 --> 00:04:14,254 line:-2
在自动释放池外使用
还是有一定危险的


97
00:04:14,321 --> 00:04:16,557 line:-1
所以最好还是不这样用


98
00:04:16,857 --> 00:04:18,492 line:-1
有些事情我们还是要注意 以防万一


99
00:04:22,429 --> 00:04:25,132 line:-1
很多人都会使用面板取色


100
00:04:25,999 --> 00:04:29,036 line:-1
还有我们心爱的吸管工具


101
00:04:29,336 --> 00:04:33,207 line:-2
在面板取色中
点击后会出现这样的放大镜


102
00:04:33,273 --> 00:04:36,910 line:-2
再在显示屏上拾取特定颜色
以读取其RGB值


103
00:04:38,412 --> 00:04:39,613 line:-1
在macOS 10.15中


104
00:04:39,980 --> 00:04:42,182 line:-1
我们也会向你展示这项功能


105
00:04:42,482 --> 00:04:44,685 line:-2
我们有一项新类
叫NSColorSampler


106
00:04:45,385 --> 00:04:47,621 line:-2
NSColorSampler
其实很简单


107
00:04:47,688 --> 00:04:50,190 line:-1
它有一个单类方法叫Show


108
00:04:50,791 --> 00:04:53,060 line:-2
你可以向Show传递一个色块
而如果用户取消了选项


109
00:04:53,126 --> 00:04:56,463 line:-1
它就会返回所选颜色或是零


110
00:04:57,631 --> 00:05:00,200 line:-1
我们也很高兴向你们介绍我们的实施


111
00:05:01,068 --> 00:05:02,369 line:-1
如果你有自己的实施


112
00:05:02,436 --> 00:05:04,638 line:-2
那么在macOS 10.15中
你需要注意几点


113
00:05:05,372 --> 00:05:08,842 line:-2
在显示屏录制的时候
会弹出用户权限许可


114
00:05:10,010 --> 00:05:13,614 line:-2
如果你用的是
NSColorSampler就不会


115
00:05:16,884 --> 00:05:19,786 line:-2
接下来是另一个
很好用的NSColor API


116
00:05:19,853 --> 00:05:21,922 line:-1
我们叫它动态色彩提供程序


117
00:05:22,389 --> 00:05:25,192 line:-2
它其实只是NSColor
一项新的初始化程序


118
00:05:26,093 --> 00:05:27,227 line:-1
它包括两项内容


119
00:05:27,694 --> 00:05:29,196 line:-1
第一是色块


120
00:05:29,763 --> 00:05:31,665 line:-2
且该色块可访问
NSAppearance


121
00:05:32,833 --> 00:05:34,268 line:-1
如果我们要用到色彩


122
00:05:34,535 --> 00:05:36,603 line:-2
要不然就是我们要在
位图的上下文中进行绘制


123
00:05:36,670 --> 00:05:39,439 line:-2
要不然就是要写进文件
或是用作背景颜色


124
00:05:40,274 --> 00:05:41,542 line:-1
我们将该色块命名为


125
00:05:41,608 --> 00:05:43,744 line:-1
适合当时外观的名字


126
00:05:44,444 --> 00:05:45,646 line:-1
在显示屏上


127
00:05:46,013 --> 00:05:48,182 line:-2
我们使用的是NSAppearance
的最佳匹配方法


128
00:05:48,248 --> 00:05:50,284 line:-1
来告诉我们 我们要求的外观


129
00:05:50,350 --> 00:05:52,719 line:-1
是浅绿色更好还是深一点的绿色更好


130
00:05:53,687 --> 00:05:55,989 line:-1
我们为每种情况也准备了硬编码颜色


131
00:05:57,157 --> 00:06:00,160 line:-2
这在你要做出一些
编程决策的时候就很有用


132
00:06:00,227 --> 00:06:03,330 line:-2
对你在NSColor中
使用动态色彩也十分有用


133
00:06:03,797 --> 00:06:05,899 line:-1
这比在更改外观时对视图层次结构


134
00:06:05,966 --> 00:06:09,203 line:-1
硬编码文字颜色进行更改要简单得多


135
00:06:11,205 --> 00:06:12,739 line:-1
我刚刚也说到了该程序包含两项内容


136
00:06:13,073 --> 00:06:14,575 line:-1
另一项就是名称


137
00:06:15,242 --> 00:06:18,312 line:-1
而在编码时 名称也是非常重要的


138
00:06:18,779 --> 00:06:21,114 line:-2
如果你想通过
NSConnection发送颜色


139
00:06:21,381 --> 00:06:22,416 line:-2
也就是
NSXPCConnection


140
00:06:22,916 --> 00:06:24,718 line:-2
当你要解码的时候
你就要按名称查找


141
00:06:25,419 --> 00:06:27,454 line:-1
所以在连接的两段


142
00:06:27,521 --> 00:06:28,856 line:-1
都要给该颜色颜色命名 这很重要


143
00:06:31,992 --> 00:06:34,094 line:-2
这些色彩都很棒
NSColor也很棒


144
00:06:34,161 --> 00:06:36,129 line:-1
他们在好显示屏上看起来就更棒了


145
00:06:36,196 --> 00:06:37,030 line:-1
（显示屏）


146
00:06:37,097 --> 00:06:38,932 line:-2
现在我们来讲讲
NSScreen的改进


147
00:06:40,000 --> 00:06:42,536 line:-1
如果你以前要实现显示屏选择器控件


148
00:06:42,603 --> 00:06:45,205 line:-1
你就要一串面对用户的字符串


149
00:06:45,272 --> 00:06:46,940 line:-1
来识别NSScreen


150
00:06:47,708 --> 00:06:49,943 line:-1
如果你使用的是NSObject的


151
00:06:50,010 --> 00:06:51,245 line:-1
继承描述方法


152
00:06:51,311 --> 00:06:53,046 line:-1
那么你的用户可能就会对


153
00:06:53,280 --> 00:06:57,351 line:-2
NSScreen 0x60000261e460
不满意


154
00:06:58,952 --> 00:07:00,888 line:-1
而在macOS 10.15中


155
00:07:01,154 --> 00:07:02,823 line:-1
NSScreen.localizedName


156
00:07:02,890 --> 00:07:06,660 line:-1
会给显示屏一个更好更可读的描述


157
00:07:10,097 --> 00:07:11,999 line:-1
好了 我们再来谈谈显示屏


158
00:07:12,633 --> 00:07:13,567 line:-1
在过去多年间


159
00:07:13,934 --> 00:07:16,803 line:-1
显示屏变得越来越亮


160
00:07:17,304 --> 00:07:18,906 line:-1
也没有什么人


161
00:07:19,339 --> 00:07:21,742 line:-1
会把他们的显示屏调到最亮


162
00:07:23,844 --> 00:07:25,546 line:-1
如果我们放一张图片


163
00:07:25,846 --> 00:07:28,849 line:-1
我们可以把黑色想象成0分量值


164
00:07:29,149 --> 00:07:31,051 line:-1
白色是1


165
00:07:31,585 --> 00:07:33,153 line:-1
如果我们把显示屏调暗


166
00:07:33,453 --> 00:07:36,156 line:-2
我们就有点像压缩了
这些值的绝对含义


167
00:07:36,223 --> 00:07:39,426 line:-1
软件中每单位值发出的光子更少了


168
00:07:40,794 --> 00:07:44,031 line:-1
但是显示器依旧可以显示鲜艳的色彩


169
00:07:44,731 --> 00:07:47,901 line:-1
我们可以允许扩展动态范围内容显示


170
00:07:48,435 --> 00:07:50,537 line:-2
而该内容并不止是限制在
0到1的范围内


171
00:07:50,904 --> 00:07:53,640 line:-2
这样我们依旧可以使用
显示器的最大亮度


172
00:07:54,208 --> 00:07:55,042 line:-1
这样对于一些图片


173
00:07:55,342 --> 00:07:58,111 line:-2
它们的色彩相对于
其他白色部分来说会更亮


174
00:07:59,413 --> 00:08:01,081 line:-1
这其实不是什么新功能


175
00:08:01,148 --> 00:08:03,550 line:-1
在Mac的许多版本中就有这一功能


176
00:08:03,851 --> 00:08:05,252 line:-2
从macOS 10.11开始
都可以


177
00:08:06,119 --> 00:08:07,988 line:-1
有两个API可以帮助你做到这一点


178
00:08:09,156 --> 00:08:10,157 line:-1
其中一个


179
00:08:10,224 --> 00:08:14,428 line:-2
是NSScreen
最大扩展动态范围颜色分量值


180
00:08:15,662 --> 00:08:16,563 line:-1
它实际上很有用


181
00:08:16,630 --> 00:08:19,666 line:-2
它不仅是你见过的最长
Objective-C属性名称


182
00:08:21,535 --> 00:08:23,170 line:-1
而且它能在你的系统


183
00:08:23,237 --> 00:08:25,172 line:-1
处于扩展动态范围模式时


184
00:08:25,239 --> 00:08:27,708 line:-1
它会告诉你剪裁前


185
00:08:27,774 --> 00:08:29,476 line:-1
你可以使用的组件最大值


186
00:08:29,543 --> 00:08:31,745 line:-1
比如说1.3


187
00:08:33,280 --> 00:08:34,847 line:-1
如果系统不在该模式下


188
00:08:34,914 --> 00:08:36,416 line:-1
它就会返回1.0


189
00:08:37,351 --> 00:08:40,020 line:-2
所以我们将该模式应用于系统
使用不同的API


190
00:08:40,419 --> 00:08:42,289 line:-2
也就是CAMetalLayer
需要扩展


191
00:08:42,356 --> 00:08:43,557 line:-1
动态范围内容


192
00:08:44,191 --> 00:08:46,660 line:-2
这也是NSOpenGLView
中的一个API


193
00:08:46,727 --> 00:08:49,062 line:-2
叫需要动态范围
打开GL曲面


194
00:08:49,530 --> 00:08:50,931 line:-1
当你把其中一项设为真


195
00:08:50,998 --> 00:08:53,066 line:-2
你就能通过此API
获得额外动态余量


196
00:08:55,135 --> 00:08:57,371 line:-2
所以我们对macOS 10.15
进行的添加


197
00:08:57,437 --> 00:08:59,640 line:-2
是一项更长的
NObjective-C属性名称


198
00:09:01,041 --> 00:09:02,843 line:-1
但重要的部分其实更短了


199
00:09:02,910 --> 00:09:04,811 line:-1
叫最大潜力


200
00:09:05,445 --> 00:09:08,348 line:-1
它会告诉你动态余量 告诉你最大值


201
00:09:08,415 --> 00:09:11,552 line:-1
即使系统未处于扩展动态范围模式


202
00:09:12,419 --> 00:09:13,587 line:-1
这很有用


203
00:09:14,087 --> 00:09:16,390 line:-1
如果你在处理扩展动态范围内容


204
00:09:16,456 --> 00:09:18,458 line:-1
你可能会有多条


205
00:09:18,525 --> 00:09:20,027 line:-1
发送图像数据的通道


206
00:09:20,561 --> 00:09:23,030 line:-1
比如用于扩展内容的浮点通道


207
00:09:23,096 --> 00:09:26,533 line:-1
就要比BJRA通道更贵


208
00:09:26,967 --> 00:09:29,636 line:-2
所以提前知道你有足够的
动态余量可供操作


209
00:09:30,003 --> 00:09:31,705 line:-1
可以为你的支持提供条件


210
00:09:34,208 --> 00:09:35,876 line:-1
我还想谈谈另一个API


211
00:09:36,276 --> 00:09:39,146 line:-2
具体来说是用于
昨天我们看到的新Apple显示器


212
00:09:39,847 --> 00:09:41,949 line:-1
这台新的显示器很了不起


213
00:09:42,416 --> 00:09:43,817 line:-1
因为它真的很亮


214
00:09:43,884 --> 00:09:45,886 line:-1
它可以一直保持1000尼特


215
00:09:46,620 --> 00:09:48,355 line:-1
因此


216
00:09:48,422 --> 00:09:50,557 line:-1
我们可以将它看做参考质量


217
00:09:50,624 --> 00:09:53,560 line:-1
对于特定的组件值可以这样认为


218
00:09:53,627 --> 00:09:56,230 line:-1
该像素有一个绝对亮度


219
00:09:58,232 --> 00:10:00,767 line:-1
它很亮 但也不是无限亮


220
00:10:01,168 --> 00:10:04,204 line:-1
如果你继续生成足够量的像素值


221
00:10:04,271 --> 00:10:05,973 line:-1
它实际上是无法表示的


222
00:10:06,039 --> 00:10:08,308 line:-1
我们刚刚所说的参考质量


223
00:10:08,609 --> 00:10:09,610 line:-1
就会有所下降


224
00:10:09,676 --> 00:10:11,712 line:-1
我们必须缩小图像内容


225
00:10:11,979 --> 00:10:13,680 line:-1
以适应可用的亮度范围


226
00:10:14,114 --> 00:10:16,917 line:-2
这也是NSScreen
最大参考会告诉你的


227
00:10:17,217 --> 00:10:18,385 line:-1
如果超过该值


228
00:10:18,685 --> 00:10:21,121 line:-1
就无法再使用绝对尼特了


229
00:10:21,588 --> 00:10:23,023 line:-1
（扩展动态范围）


230
00:10:24,358 --> 00:10:27,561 line:-2
好 我刚刚提到了
CAMetalLayer


231
00:10:27,628 --> 00:10:29,963 line:-1
这也是获取扩展动态内容的方式之一


232
00:10:30,464 --> 00:10:32,299 line:-1
我要强调几点


233
00:10:32,366 --> 00:10:34,668 line:-2
现在如果你要在Mac上
使用MetalLayer


234
00:10:35,002 --> 00:10:36,036 line:-1
你要做的事情


235
00:10:36,503 --> 00:10:38,005 line:-1
你要注意


236
00:10:38,071 --> 00:10:40,140 line:-1
你的CAMetalLayer要在


237
00:10:40,741 --> 00:10:42,609 line:-2
哪个屏幕和
哪个Metal设备上显示


238
00:10:43,644 --> 00:10:44,711 line:-1
这有点费解


239
00:10:44,778 --> 00:10:47,414 line:-1
你要先获取窗口和窗口显示屏


240
00:10:47,481 --> 00:10:48,882 line:-1
还有显示屏的设备描述


241
00:10:49,349 --> 00:10:52,052 line:-1
你还要请求你在文件中


242
00:10:52,119 --> 00:10:53,387 line:-1
找到的硬编码字符串


243
00:10:53,453 --> 00:10:55,389 line:-1
但我们不从标题中导出


244
00:10:56,523 --> 00:10:58,625 line:-2
最后 你还要传递
CDDirectDisplay


245
00:10:59,026 --> 00:11:00,294 line:-1
来确定使用的设备


246
00:11:00,994 --> 00:11:03,330 line:-2
这些功夫是值得的
因为它可以让你避免


247
00:11:03,397 --> 00:11:06,433 line:-1
通过系统总线在GPU之间移动数据


248
00:11:07,768 --> 00:11:09,469 line:-2
我们在macOS 10.15中
做了提升


249
00:11:10,304 --> 00:11:12,139 line:-2
CAMetalLayer
和MetalView


250
00:11:12,206 --> 00:11:15,242 line:-2
有一个新的首选设备属性
可以解答这个问题


251
00:11:16,577 --> 00:11:18,178 line:-1
它精简了你的代码


252
00:11:18,846 --> 00:11:21,014 line:-1
我们很高兴你今年就能使用这项功能


253
00:11:23,383 --> 00:11:25,118 line:-2
这也就涵盖了
关于屏幕我们想说的东西


254
00:11:25,185 --> 00:11:26,320 line:-1
（文本）


255
00:11:26,620 --> 00:11:29,423 line:0
现在我们来介绍各种各样的文本功能


256
00:11:30,190 --> 00:11:31,291 line:0
首先


257
00:11:31,358 --> 00:11:32,492 line:0
我想说的是


258
00:11:32,926 --> 00:11:36,430 line:0
NSTextView对较暗外观
会使用自适应颜色


259
00:11:37,097 --> 00:11:39,700 line:0
你可以在文本编辑中
打开或关闭该功能


260
00:11:39,766 --> 00:11:43,003 line:0
这里浅色和深色都有快照


261
00:11:43,403 --> 00:11:45,706 line:0
都是系统蜡笔选择器中的颜色


262
00:11:46,206 --> 00:11:48,208 line:0
你可以看到 当此功能激活时


263
00:11:48,675 --> 00:11:51,011 line:0
黑色和白色都几乎颠倒过来了


264
00:11:51,612 --> 00:11:55,082 line:0
同时更为饱和鲜艳的颜色


265
00:11:55,449 --> 00:11:58,085 line:0
还是同样的颜色 但是亮度不同了


266
00:11:58,619 --> 00:12:00,153 line:0
这使它们能够更好地与背景外观匹配


267
00:12:01,355 --> 00:12:04,157 line:0
所以这在你制作文本内容


268
00:12:04,224 --> 00:12:06,393 line:0
而想要它们的颜色
和背景外观更匹配时十分有用


269
00:12:06,693 --> 00:12:08,729 line:0
这对富文本文件尤其有用


270
00:12:09,062 --> 00:12:10,898 line:0
比如让它们的颜色更适合页面


271
00:12:10,964 --> 00:12:12,866 line:0
比单纯让它们在打印页面上


272
00:12:13,467 --> 00:12:15,702 line:-1
显示固定颜色要重要得多


273
00:12:16,770 --> 00:12:18,605 line:-1
一般来说这是我们想要的


274
00:12:18,939 --> 00:12:19,973 line:-1
但如果你有一款app


275
00:12:20,040 --> 00:12:22,176 line:-1
是用于创作富文本内容的


276
00:12:22,876 --> 00:12:24,811 line:-1
你可能就要关闭该功能


277
00:12:24,878 --> 00:12:26,980 line:-1
或是让用户能选择关闭该功能


278
00:12:27,247 --> 00:12:30,984 line:-2
这样他们就能自己决定
是否需要匹配打印内容的表达


279
00:12:31,585 --> 00:12:32,553 line:-1
而不是屏幕显示


280
00:12:34,021 --> 00:12:37,324 line:-2
在场的各位应该都很熟悉
NSSpellChecker


281
00:12:37,591 --> 00:12:39,593 line:-2
如果你作为开发者不熟悉的话
作为用户也肯定熟悉


282
00:12:40,460 --> 00:12:42,129 line:-1
在macOS 10.15中


283
00:12:42,196 --> 00:12:44,898 line:-2
很高兴地宣布
NSSpellChecker后继有人了


284
00:12:45,766 --> 00:12:48,468 line:-2
后继者就是
NSTextCheckingController


285
00:12:49,670 --> 00:12:52,773 line:-2
NSSpellChecker
在文本视图中工作


286
00:12:53,273 --> 00:12:56,276 line:-2
而NSTextCheckingController
适用于多种系统


287
00:12:56,343 --> 00:12:59,179 line:-2
可在UIKit WebKit
或是AppKit中使用


288
00:12:59,513 --> 00:13:01,081 line:-2
你也可以通过使用
NSTextCheckingClient协议


289
00:13:01,148 --> 00:13:02,749 line:-1
来自己使用它


290
00:13:03,984 --> 00:13:06,253 line:-1
除了检查拼写 它还有其他功能


291
00:13:06,320 --> 00:13:07,321 line:-1
还可以检查语法


292
00:13:07,588 --> 00:13:11,258 line:-2
它可以进行数据检测
以查找URL或是电话号码和日期


293
00:13:11,959 --> 00:13:14,094 line:-1
你可以控制它们


294
00:13:14,795 --> 00:13:17,698 line:-1
可以设置是让错误拼写高亮显示


295
00:13:17,764 --> 00:13:18,999 line:-1
还是自动纠正


296
00:13:19,566 --> 00:13:21,235 line:-2
所以我认为这是一项
非常灵活的API


297
00:13:21,301 --> 00:13:22,503 line:-1
如果你要进行大量文本输入


298
00:13:23,136 --> 00:13:24,471 line:-1
那么这绝对值得一试


299
00:13:26,139 --> 00:13:28,242 line:-1
我们对文本还进行了一些小小的添加


300
00:13:28,542 --> 00:13:32,212 line:-2
几乎所有与NSText相关的类
现在都支持安全编码


301
00:13:32,946 --> 00:13:35,983 line:-2
所以如果你想将这些作为
NSXPC连接


302
00:13:36,049 --> 00:13:37,584 line:-1
词汇表的一部分


303
00:13:38,619 --> 00:13:39,820 line:-1
它们也能良好运行


304
00:13:40,721 --> 00:13:41,955 line:-1
（安全编码支持）


305
00:13:42,656 --> 00:13:43,924 line:-2
（NSFONTDESCRIPTOR
系统设计）


306
00:13:44,324 --> 00:13:46,260 line:-1
大家可能很熟悉NSFont


307
00:13:46,326 --> 00:13:49,329 line:-2
有些朋友可能对
NSFontDescriptor也比较熟悉


308
00:13:50,697 --> 00:13:54,501 line:-2
NSFontDescriptor
是简洁的一个类


309
00:13:54,568 --> 00:13:57,671 line:-2
它允许我们使用它们的
一些语义属性来查找和转换字体


310
00:13:58,372 --> 00:13:59,940 line:-1
我在这里做了一些样本


311
00:14:00,974 --> 00:14:04,378 line:-2
顶行是我在Interface Builder
中的硬编码字体


312
00:14:04,845 --> 00:14:06,046 line:-1
但是下面几行


313
00:14:06,380 --> 00:14:09,550 line:-2
我用的是NSFontDescriptor
系统设计API


314
00:14:09,616 --> 00:14:10,851 line:-2
是macOS 10.15中的
新功能


315
00:14:11,451 --> 00:14:13,353 line:-1
如果我说


316
00:14:13,420 --> 00:14:15,889 line:-2
我想让字体更圆一点
或是serif字体


317
00:14:16,290 --> 00:14:17,157 line:-1
或是等宽字体


318
00:14:18,292 --> 00:14:19,493 line:-1
我们会有另一场演讲


319
00:14:19,560 --> 00:14:21,595 line:-1
会进行更加详细的介绍


320
00:14:21,662 --> 00:14:24,565 line:-2
但我认为这是让你的app
更具风格的方式


321
00:14:29,303 --> 00:14:32,272 line:0
如果你有一款编写


322
00:14:32,673 --> 00:14:34,474 line:0
富文本文件的跨平台app


323
00:14:34,741 --> 00:14:36,243 line:-1
在Mac OS和iOS上同时运行


324
00:14:36,310 --> 00:14:39,446 line:0
或者是一款不跨平台 只从其他平台


325
00:14:39,513 --> 00:14:40,480 line:0
读取文件的app


326
00:14:41,014 --> 00:14:42,449 line:0
你可能会遇到这样的问题


327
00:14:42,749 --> 00:14:46,153 line:0
即使文档指定的是相同的字体大小


328
00:14:46,620 --> 00:14:48,021 line:0
但是看起来还是十分不同


329
00:14:48,789 --> 00:14:50,858 line:0
这是因为iOS设备和Mac设备


330
00:14:50,924 --> 00:14:52,826 line:0
屏幕密度十分不同


331
00:14:54,561 --> 00:14:55,863 line:0
在macOS 10.15


332
00:14:56,463 --> 00:14:58,532 line:0
我们有新属性字符串API


333
00:14:59,132 --> 00:15:00,801 line:0
你可以在读取和写入富文本文件中的


334
00:15:01,101 --> 00:15:03,170 line:0
属性字符串时使用


335
00:15:03,770 --> 00:15:07,875 line:0
您可以告诉我们源和
目标操作系统是什么


336
00:15:08,308 --> 00:15:10,944 line:0
我们会自动调整字体大小


337
00:15:11,512 --> 00:15:13,113 line:0
让它们视觉上看起来一样


338
00:15:13,881 --> 00:15:17,084 line:0
在这种情况下
我们把160点调到了120点


339
00:15:17,584 --> 00:15:19,753 line:0
这样它们视觉上看起来就是一样的了


340
00:15:22,556 --> 00:15:23,690 line:-2
（NSLAYOUTmanAGER
默认断字）


341
00:15:23,757 --> 00:15:25,659 line:-1
最后一点关于文字的功能 我想谈谈


342
00:15:26,326 --> 00:15:28,028 line:-2
对NSLayoutManager
进行的添加


343
00:15:28,929 --> 00:15:30,264 line:-1
叫做使用默认断字


344
00:15:31,064 --> 00:15:32,065 line:-1
过去


345
00:15:32,432 --> 00:15:35,102 line:-1
NSText类可以


346
00:15:35,402 --> 00:15:37,371 line:-2
通过NSParagraphStyle
帮你断字


347
00:15:37,671 --> 00:15:39,373 line:-1
以此来控制断字


348
00:15:40,274 --> 00:15:42,743 line:-2
LayoutManager
更易使用


349
00:15:43,177 --> 00:15:45,512 line:-2
它默认是关闭的
也就是说不需要断字


350
00:15:45,579 --> 00:15:46,680 line:-1
像左边这样


351
00:15:46,747 --> 00:15:49,383 line:-2
你若设置
我们将为断字选择一个默认值


352
00:15:49,683 --> 00:15:52,619 line:-2
而右边
我们将encyclopedia


353
00:15:52,920 --> 00:15:54,121 line:-2
internationalization
两个词断开了


354
00:15:55,756 --> 00:15:57,357 line:-1
所以 该文本API


355
00:15:57,658 --> 00:16:00,060 line:-1
可以润色你文本系统的


356
00:16:00,127 --> 00:16:01,228 line:-1
角落和边缘


357
00:16:03,530 --> 00:16:04,398 line:-1
（工具栏）


358
00:16:04,464 --> 00:16:06,533 line:-1
NSToolbar也有一些新功能


359
00:16:07,534 --> 00:16:08,635 line:-1
首先


360
00:16:09,002 --> 00:16:11,071 line:-2
是NSToolbarItem的
新属性


361
00:16:11,672 --> 00:16:12,739 line:-1
叫isBordered


362
00:16:14,241 --> 00:16:15,175 line:-1
过去


363
00:16:15,242 --> 00:16:19,046 line:-2
如果你想在NSToolbar中
获取这种按钮式的外观


364
00:16:19,546 --> 00:16:21,315 line:-1
你必须要配置自己的


365
00:16:21,381 --> 00:16:22,749 line:-1
NSButton实例


366
00:16:22,816 --> 00:16:23,984 line:-1
自己设置


367
00:16:24,051 --> 00:16:26,954 line:-2
然后将其用作工具栏项目的
自定义视图


368
00:16:27,855 --> 00:16:30,023 line:-1
这可以实现 但是花费太多精力了


369
00:16:30,357 --> 00:16:33,160 line:-2
而且你也不能使用
NSToolbarItem


370
00:16:33,694 --> 00:16:36,864 line:-1
对自动启用和禁用提供内置支持


371
00:16:38,265 --> 00:16:40,334 line:-1
但如果你将其用作边界属性


372
00:16:40,601 --> 00:16:41,768 line:-1
那你就可以自由使用了


373
00:16:42,870 --> 00:16:43,937 line:-1
还有


374
00:16:44,438 --> 00:16:46,540 line:-2
NSToolbarItem
有一个新的标题属性


375
00:16:46,974 --> 00:16:48,809 line:-1
可以将工具栏项目配置为


376
00:16:49,343 --> 00:16:52,246 line:-1
字符串按钮 而不是图标按钮


377
00:16:52,946 --> 00:16:55,015 line:-1
这与标签属性也有所不同


378
00:16:55,082 --> 00:16:56,783 line:-1
如果我们已将工具栏配置为显示标签


379
00:16:57,217 --> 00:16:59,353 line:-1
它会在按钮下方出现


380
00:17:01,722 --> 00:17:05,925 line:-2
这并不是macOS 10.15功能
关于NSToolbar的全部类


381
00:17:07,060 --> 00:17:10,364 line:-2
我们还在NSToolbarItemGroup中
添加了许多功能


382
00:17:10,631 --> 00:17:12,398 line:-1
让它们更多功能和更实用


383
00:17:12,965 --> 00:17:14,134 line:-1
首先


384
00:17:14,201 --> 00:17:16,537 line:-1
就是一些方便的构造函数


385
00:17:16,936 --> 00:17:18,204 line:-1
它们可以让你


386
00:17:18,271 --> 00:17:21,974 line:-1
同更少的代码创建出一样好的UI


387
00:17:22,976 --> 00:17:25,811 line:-2
而NSToolbarItemGroup
同时也变得更为灵活


388
00:17:26,613 --> 00:17:28,682 line:-1
看看屏幕右方的图片


389
00:17:29,116 --> 00:17:31,919 line:-1
你可以看到 它的支持项目


390
00:17:31,985 --> 00:17:33,220 line:-1
表示为分段控件


391
00:17:33,720 --> 00:17:37,257 line:-2
也能通过下拉菜单和
弹出菜单等方式代表它们


392
00:17:38,158 --> 00:17:40,227 line:-1
所以它是一个多功能的工具栏控件


393
00:17:41,161 --> 00:17:44,198 line:-1
因为它将其他工具栏项目用作词汇


394
00:17:44,264 --> 00:17:46,967 line:-1
我们还可以自动创建折叠表示


395
00:17:47,467 --> 00:17:50,037 line:-1
当窗口有太多工具栏时可以用到


396
00:17:50,103 --> 00:17:50,938 line:-2
（NSTOOLBARITEMGROUP
方便的构造函数）


397
00:17:51,004 --> 00:17:51,839 line:-2
（分段控件
折叠表示）


398
00:17:54,808 --> 00:17:57,578 line:-1
在新NSMenuToolbarItem类中


399
00:17:57,644 --> 00:17:59,046 line:-1
也有一个非常相似的效果


400
00:18:00,013 --> 00:18:02,850 line:-2
这很像
ToolbarItemGroup的


401
00:18:03,250 --> 00:18:04,484 line:-1
菜单项表示


402
00:18:05,519 --> 00:18:07,721 line:-2
但将NSMenu
用作了currency


403
00:18:08,589 --> 00:18:11,525 line:-2
这很棒
因为你可以使用NSMenu功能


404
00:18:11,592 --> 00:18:13,560 line:-1
比如子菜单或分隔符项


405
00:18:14,228 --> 00:18:16,597 line:-1
甚至可以对菜单项使用自定义视图


406
00:18:16,964 --> 00:18:18,899 line:-1
所以这是一项很强大的工具


407
00:18:19,399 --> 00:18:22,569 line:-2
如果你想让工具栏有一些更复杂
更厉害的表现的话


408
00:18:24,638 --> 00:18:28,175 line:0
NSTouchBar在
macOS 10.15中同样也有提升


409
00:18:28,876 --> 00:18:30,244 line:0
我想说的第一点


410
00:18:30,310 --> 00:18:33,247 line:0
是NSTouchBar
本身的新类属性


411
00:18:33,313 --> 00:18:35,382 line:0
那就是自动自定义TouchBar


412
00:18:35,449 --> 00:18:36,450 line:0
菜单项已启用


413
00:18:36,950 --> 00:18:38,218 line:0
这听起来可能很熟悉


414
00:18:38,285 --> 00:18:40,621 line:0
在NSApplication
中有一模一样的属性


415
00:18:41,488 --> 00:18:43,023 line:0
如果你在代码中


416
00:18:43,490 --> 00:18:45,359 line:0
想以不引用NSApplication的
方式对其进行分解


417
00:18:45,425 --> 00:18:47,361 line:0
那么你就可以使用触控栏的这一功能


418
00:18:47,728 --> 00:18:50,731 line:0
一个例子是
如果你在写UIKit app


419
00:18:50,797 --> 00:18:53,700 line:0
也并不会有
NSApplication实例


420
00:18:56,170 --> 00:18:57,471 line:-1
一个更重要的控件


421
00:18:57,771 --> 00:19:00,474 line:-2
是新的
NSStepperTouchBarItem类


422
00:19:01,341 --> 00:19:03,210 line:-1
就像屏幕上的步进器


423
00:19:03,577 --> 00:19:06,180 line:-1
这对于日期和数字等的


424
00:19:06,246 --> 00:19:08,115 line:-1
离散输入非常有用


425
00:19:08,916 --> 00:19:12,186 line:-2
但考虑到触控栏布局较大
且分布水平


426
00:19:12,252 --> 00:19:13,954 line:-1
你可以在新app中使用这项功能


427
00:19:14,021 --> 00:19:16,790 line:-1
比如在绘图app中直观地选择工具


428
00:19:17,491 --> 00:19:19,927 line:-2
我们对于这项
TouchBarItem新类也十分激动


429
00:19:19,993 --> 00:19:22,896 line:-1
我认为你们可以在app中好好利用


430
00:19:25,065 --> 00:19:26,366 line:-1
NSSlider触控栏项目


431
00:19:26,433 --> 00:19:27,734 line:-1
也有一些小提升


432
00:19:29,002 --> 00:19:31,805 line:-2
你可能用过
NSSliderTouchBarItem


433
00:19:31,872 --> 00:19:33,841 line:-1
你可能会觉得太小


434
00:19:34,908 --> 00:19:38,779 line:-2
那么可以通过TouchBarItem实例
中的滑块来解决这个问题


435
00:19:39,112 --> 00:19:41,014 line:-1
再为其添加自动布局约束


436
00:19:41,982 --> 00:19:43,317 line:-1
在macOS 10.15中


437
00:19:43,851 --> 00:19:46,386 line:-2
你可以直接在项目上
设置最小滑块宽度


438
00:19:46,453 --> 00:19:47,788 line:-1
接下来的事情我们会帮你解决


439
00:19:48,488 --> 00:19:51,592 line:-1
同样的 如果你想放大滑块


440
00:19:51,992 --> 00:19:54,862 line:-2
你可以通过
最大滑块宽度属性来达到目的


441
00:19:57,998 --> 00:20:00,701 line:-1
最后我想说说边栏软件度量


442
00:20:01,134 --> 00:20:02,436 line:-1
在macOS 10.15


443
00:20:02,503 --> 00:20:04,404 line:-1
你可以切换补充工具栏的大小


444
00:20:04,471 --> 00:20:07,174 line:-2
可以通过设置或者
系统偏好设置中的常规窗口切换


445
00:20:08,909 --> 00:20:11,478 line:-1
默认是中 你也可以设为小或大


446
00:20:12,579 --> 00:20:15,616 line:-2
我把它调出来是因为
如果你不知道这个功能


447
00:20:15,682 --> 00:20:18,118 line:-1
你可能就没有办法查看


448
00:20:18,185 --> 00:20:19,386 line:-1
这些或大或小规格的原图


449
00:20:20,020 --> 00:20:21,388 line:-1
所以如果你使用的是位图


450
00:20:21,455 --> 00:20:23,090 line:-1
那么继续使用 再为其添加表述


451
00:20:23,457 --> 00:20:25,292 line:-1
或者使用独立分辨率版本


452
00:20:26,159 --> 00:20:28,595 line:-2
同样的 macOS 10.15中
也有一项新功能


453
00:20:29,062 --> 00:20:31,999 line:-1
也可以自动选择明或者暗的外观


454
00:20:32,065 --> 00:20:34,535 line:-1
这也可以在常规pref窗格中找到


455
00:20:36,837 --> 00:20:40,307 line:-2
好了 我们介绍了
工具栏和触控栏的控件


456
00:20:40,374 --> 00:20:43,911 line:-1
让我们来谈谈广泛适用的控件


457
00:20:43,977 --> 00:20:45,212 line:-1
（控件）


458
00:20:45,279 --> 00:20:46,346 line:-1
首先


459
00:20:46,647 --> 00:20:48,348 line:-2
我们非常开心
向大家介绍NSSwitch


460
00:20:48,882 --> 00:20:51,285 line:-2
NSSwitch是
NSControl的完整子类


461
00:20:51,652 --> 00:20:53,754 line:-1
它支持绑定 支持格式化


462
00:20:55,689 --> 00:20:59,092 line:-1
但它与现有的复选框功能一起存在


463
00:20:59,626 --> 00:21:01,495 line:-1
所以你可能有这样一个问题


464
00:21:01,562 --> 00:21:02,829 line:-1
我什么时候该用NSSwitch


465
00:21:02,896 --> 00:21:04,198 line:-1
什么时候又用复选框呢


466
00:21:04,865 --> 00:21:06,867 line:-1
如果你已经在用复选框


467
00:21:07,201 --> 00:21:09,069 line:-1
你就继续用


468
00:21:09,136 --> 00:21:10,804 line:-1
它通常都是正确的控件


469
00:21:11,805 --> 00:21:13,340 line:-1
我们认为NSSwitch


470
00:21:13,407 --> 00:21:15,776 line:-1
在你进行很多切换时更好用


471
00:21:16,043 --> 00:21:18,412 line:-1
比如你要关闭和开启很多功能时


472
00:21:19,379 --> 00:21:20,747 line:-1
在这个例子中


473
00:21:21,281 --> 00:21:22,883 line:-1
左边是主切换


474
00:21:22,950 --> 00:21:25,185 line:-1
它可以启用右边


475
00:21:25,752 --> 00:21:27,387 line:-1
所有的共享服务


476
00:21:27,454 --> 00:21:28,722 line:-2
（NSSWITCH
可以在进行大量切换时使用）


477
00:21:28,789 --> 00:21:30,457 line:-2
（不要在小型活动中使用NSSWITCH
特别是列表）


478
00:21:30,524 --> 00:21:31,692 line:-1
（收集视图组成布局）


479
00:21:32,392 --> 00:21:33,760 line:-1
在macOS 10.15


480
00:21:33,827 --> 00:21:36,029 line:-2
我们在NSCollectionView
花了很多功夫


481
00:21:36,864 --> 00:21:39,333 line:-1
我们要说的一点


482
00:21:39,700 --> 00:21:40,767 line:-1
是构图布局


483
00:21:41,401 --> 00:21:42,436 line:-1
在此


484
00:21:42,703 --> 00:21:45,539 line:-2
你不需要再通过添加
NSCollectionViewLayout子类


485
00:21:46,006 --> 00:21:46,840 line:-1
来修改它


486
00:21:47,441 --> 00:21:50,377 line:-1
你还可以使用很多有趣的功能


487
00:21:51,111 --> 00:21:53,046 line:-1
比如容量相关尺寸


488
00:21:53,547 --> 00:21:54,815 line:-1
布局中断和部分


489
00:21:54,882 --> 00:21:55,949 line:-1
以及可嵌套组合


490
00:21:56,483 --> 00:21:58,519 line:-1
并使各个部分可以滚动


491
00:21:58,952 --> 00:22:01,421 line:-1
当然 所有都适用于从左到右


492
00:22:01,488 --> 00:22:02,723 line:-1
和从右到左的语言


493
00:22:04,324 --> 00:22:06,460 line:-2
还有一项新
CollectionView功能


494
00:22:06,760 --> 00:22:07,961 line:-1
称为可扩展数据源


495
00:22:09,062 --> 00:22:11,832 line:-1
这些是基于标识符的数据源


496
00:22:11,899 --> 00:22:14,535 line:-1
让我们能跟踪添加或删除项目等内容


497
00:22:14,601 --> 00:22:16,703 line:-1
或者是项目在两个地点间的移动


498
00:22:17,237 --> 00:22:19,973 line:-1
它可以自动推断出要使用的模块


499
00:22:20,474 --> 00:22:22,943 line:-2
也就是说你不用再用
performBatchUpdates


500
00:22:23,277 --> 00:22:24,211 line:-1
或是reloadData了


501
00:22:26,647 --> 00:22:28,048 line:-2
（使用IB Storyboard的
IBSEGUEACTION）


502
00:22:28,115 --> 00:22:30,684 line:-1
好了 从app控件


503
00:22:31,418 --> 00:22:32,286 line:-1
回到IB功能


504
00:22:33,253 --> 00:22:35,722 line:-1
IB是一个很好的方法


505
00:22:36,089 --> 00:22:38,659 line:-1
来连接app中的各种视图控制器


506
00:22:40,327 --> 00:22:42,095 line:-1
曾经


507
00:22:42,529 --> 00:22:45,132 line:-1
视图控制器会通过编码器进行初始化


508
00:22:45,199 --> 00:22:47,034 line:-1
你就需要不同的方法


509
00:22:47,434 --> 00:22:49,870 line:-1
将不同的信息输入视图控制器


510
00:22:51,138 --> 00:22:52,372 line:-1
这没有那么难


511
00:22:52,439 --> 00:22:53,974 line:-1
但同时也意味着你的代码


512
00:22:54,041 --> 00:22:55,542 line:-1
可能比你想象的要多


513
00:22:56,410 --> 00:22:57,511 line:-1
看看我的代码


514
00:22:57,578 --> 00:23:00,147 line:-2
你可以看到一项叫
showPetDetails的功能


515
00:23:01,181 --> 00:23:05,085 line:-2
它会返回一个新的视图控制器
从IB传递编码器


516
00:23:06,053 --> 00:23:08,722 line:-2
还对选定的pet名
插入了我们自己的概念


517
00:23:10,357 --> 00:23:12,926 line:-2
所以这是将单独的初始化
集合起来的好方法


518
00:23:12,993 --> 00:23:14,228 line:-1
和配置步骤


519
00:23:14,995 --> 00:23:17,197 line:-1
还有一件事


520
00:23:17,564 --> 00:23:21,134 line:-2
这个函数附带了
BSegueAction注释


521
00:23:21,835 --> 00:23:23,103 line:-1
因此


522
00:23:23,170 --> 00:23:26,039 line:-2
我们可以为Segueway转到
连接检查器和界面构建器


523
00:23:26,106 --> 00:23:29,042 line:-1
并将其直接连接


524
00:23:30,477 --> 00:23:33,313 line:-2
所以我们认为这对于在视图控制器
和Storyboard中


525
00:23:33,380 --> 00:23:35,282 line:-1
添加额外配置非常有用


526
00:23:40,787 --> 00:23:43,957 line:-2
对于所有AppKit控件而言
一项很棒的功能就是


527
00:23:44,291 --> 00:23:45,692 line:-1
它们支持自动布局


528
00:23:46,159 --> 00:23:48,795 line:-1
它们知道如何处理内容


529
00:23:48,862 --> 00:23:50,497 line:-1
并将其输入自动布局引擎


530
00:23:51,498 --> 00:23:54,034 line:-1
也就是说你可以做一些例如


531
00:23:54,101 --> 00:23:55,402 line:-1
改变文本字段和按钮字符串的事


532
00:23:55,836 --> 00:23:58,972 line:-2
并且自动布局将自动
重排视图层次结构和窗口


533
00:23:59,039 --> 00:24:00,507 line:-1
让它们更好看


534
00:24:03,243 --> 00:24:04,378 line:-1
但有时候


535
00:24:04,645 --> 00:24:05,779 line:-1
它们是UI


536
00:24:06,180 --> 00:24:07,614 line:-1
是一些不太重要的部分


537
00:24:07,915 --> 00:24:09,116 line:-1
所以在这个网格视图中


538
00:24:09,383 --> 00:24:12,686 line:-1
网格决定了其他东西的大小


539
00:24:13,220 --> 00:24:15,923 line:-1
内部标签的大小其实不重要


540
00:24:16,990 --> 00:24:20,060 line:-2
但通常 AppKit还是会
测量这些控件


541
00:24:20,127 --> 00:24:21,595 line:-1
并将它们输入自动布局引擎


542
00:24:21,662 --> 00:24:23,564 line:-1
虽然这并不会影响最终效果


543
00:24:25,666 --> 00:24:26,867 line:-1
在macOS 10.15中


544
00:24:27,668 --> 00:24:28,602 line:-1
你可以把它关掉


545
00:24:29,403 --> 00:24:31,104 line:-1
NSView有两项新属性


546
00:24:31,805 --> 00:24:33,307 line:-1
来关闭对垂直轴


547
00:24:33,373 --> 00:24:35,409 line:-1
和水平轴的测量行为


548
00:24:35,976 --> 00:24:39,646 line:-1
我认为这是减少UI内行为的好方法


549
00:24:39,913 --> 00:24:42,616 line:-1
因为你知道内部控件的大小影响不大


550
00:24:47,287 --> 00:24:49,456 line:-1
关于控件我还想讲一点


551
00:24:49,523 --> 00:24:51,158 line:-1
比NSControl更宽泛一点


552
00:24:51,758 --> 00:24:52,726 line:-1
就是NSResponder


553
00:24:53,360 --> 00:24:56,563 line:-1
及其模块捕获有关行为


554
00:24:57,397 --> 00:24:59,366 line:-1
来看屏幕上的代码


555
00:25:00,000 --> 00:25:01,101 line:-1
你可以看到两部分


556
00:25:01,168 --> 00:25:02,603 line:-1
一个是外面的部分


557
00:25:02,669 --> 00:25:04,671 line:-1
这将在后台线程上执行


558
00:25:05,405 --> 00:25:06,540 line:-1
还有是里面的部分


559
00:25:06,807 --> 00:25:08,575 line:-1
将在主线程上执行


560
00:25:09,176 --> 00:25:10,511 line:-1
这是一种相当普遍的模式


561
00:25:10,577 --> 00:25:12,079 line:-1
我们在后台开展工作


562
00:25:12,579 --> 00:25:14,815 line:-1
然后继续将该工作的结果


563
00:25:14,882 --> 00:25:16,216 line:-1
分配给主线程上的UI


564
00:25:17,651 --> 00:25:19,653 line:-2
但是这段代码是在
macOS 10.14上运行的


565
00:25:20,153 --> 00:25:22,122 line:-1
可能会导致崩溃


566
00:25:22,823 --> 00:25:25,926 line:-1
保留文本字段的唯一方式


567
00:25:25,993 --> 00:25:26,960 line:-1
是这些模块


568
00:25:27,494 --> 00:25:29,563 line:-1
而这些模块的破坏顺序又没有被定义


569
00:25:30,397 --> 00:25:32,299 line:-1
如果外部块最后解除分配


570
00:25:32,599 --> 00:25:34,835 line:-1
则文本字段将在后台线程上解除分配


571
00:25:35,903 --> 00:25:38,138 line:-1
文本字段作为应答器


572
00:25:38,205 --> 00:25:39,573 line:-1
是应答器链的一部分


573
00:25:39,873 --> 00:25:42,543 line:-2
它可以是视图层次结构
或键视图循环的一部分


574
00:25:42,976 --> 00:25:44,811 line:-1
所有数据结构都是如此


575
00:25:44,878 --> 00:25:46,914 line:-1
从后台做修改是不安全的


576
00:25:46,980 --> 00:25:48,182 line:-1
因为这是dealloc要做的


577
00:25:50,150 --> 00:25:51,418 line:-1
在macOS 10.15中


578
00:25:51,885 --> 00:25:52,719 line:-1
这不是问题


579
00:25:53,220 --> 00:25:56,356 line:-2
NSResponder会自动将
dealloc方法及其结果


580
00:25:56,423 --> 00:25:58,725 line:-1
移动到主线程


581
00:25:59,593 --> 00:26:01,495 line:-1
所以在模块中做捕捉就很安全了


582
00:26:01,562 --> 00:26:04,097 line:-1
而不用担心这些模块在哪里会被释放


583
00:26:04,531 --> 00:26:07,367 line:-1
所以我认为这在你的app中


584
00:26:07,434 --> 00:26:08,635 line:-1
可以去除许多复杂的事故


585
00:26:09,169 --> 00:26:11,638 line:-1
因为这些后台上的崩溃


586
00:26:11,905 --> 00:26:14,541 line:-1
在几秒甚至几分钟后才会显现出来


587
00:26:21,682 --> 00:26:24,484 line:-1
我还想谈谈打开和保存面板


588
00:26:24,551 --> 00:26:25,419 line:-1
（面板和工作区）


589
00:26:25,485 --> 00:26:28,956 line:-2
我们在macOS 10.15中
做了很大改变


590
00:26:29,890 --> 00:26:32,359 line:-1
那就是打开和保存面板


591
00:26:32,826 --> 00:26:34,561 line:-1
现在是两个不同的过程


592
00:26:35,462 --> 00:26:39,499 line:-1
这在沙盒app中已经实施了


593
00:26:40,000 --> 00:26:42,102 line:-1
我们只是把它用于所有app而已


594
00:26:43,136 --> 00:26:45,038 line:-1
这应该不会有什么太大影响


595
00:26:45,105 --> 00:26:47,241 line:-1
你应该不会注意到


596
00:26:47,841 --> 00:26:49,810 line:-1
除了一些性能和安全性问题


597
00:26:50,477 --> 00:26:53,280 line:-2
但是 如果要对打开和
保存面板进行子类化


598
00:26:53,347 --> 00:26:55,983 line:-2
且依赖于特定的
视图层次结构配置的话


599
00:26:56,350 --> 00:26:57,451 line:-1
那你就会遇到问题了


600
00:26:57,918 --> 00:26:59,419 line:-1
我们希望能在实验室看到你们


601
00:26:59,486 --> 00:27:01,488 line:-1
讨论这些问题并解决这些问题


602
00:27:02,222 --> 00:27:03,524 line:-1
（面板）


603
00:27:03,590 --> 00:27:04,858 line:-1
（新NSWORKSPACE方法）


604
00:27:05,325 --> 00:27:08,395 line:-2
我们在macOS 10.15中
也有NSWorkspace的新方法


605
00:27:10,264 --> 00:27:14,001 line:-2
这些方法可用于打开一或多个URL
或是app


606
00:27:14,601 --> 00:27:16,904 line:-2
这听起来很熟悉
你可能认为NSWorkspace


607
00:27:16,970 --> 00:27:18,305 line:-1
已经有了这样的方法


608
00:27:18,939 --> 00:27:19,907 line:-1
是的


609
00:27:20,307 --> 00:27:21,708 line:-1
但新方法是异步的


610
00:27:22,042 --> 00:27:24,011 line:-1
因此它们根本不会阻止主要威胁


611
00:27:24,444 --> 00:27:27,581 line:-1
当app完成启动或取消操作时


612
00:27:27,648 --> 00:27:29,516 line:-1
我们将以完成处理程序进行回调


613
00:27:30,551 --> 00:27:32,085 line:-1
除了异步之外


614
00:27:32,452 --> 00:27:35,222 line:-1
这些方法还可以高度控制


615
00:27:35,289 --> 00:27:37,791 line:-1
我们启动这些URL和app的方式


616
00:27:39,326 --> 00:27:40,627 line:-1
而该控制通过


617
00:27:40,928 --> 00:27:43,764 line:-1
新NSWorkspace.OpenConfiguration对象


618
00:27:45,566 --> 00:27:48,235 line:-1
这只是一个告诉你如何操作的例子


619
00:27:48,602 --> 00:27:51,805 line:-1
但你可以控制用户是否参与此过程


620
00:27:51,872 --> 00:27:53,006 line:-1
比如


621
00:27:53,073 --> 00:27:54,408 line:-1
如果你要请求服务器安装


622
00:27:54,474 --> 00:27:56,210 line:-1
或是不知道要用哪个app


623
00:27:56,276 --> 00:27:58,145 line:-1
用户就要选择一个app


624
00:27:58,879 --> 00:28:01,849 line:-2
这时你就可以压制这种行为
或取消打开程序


625
00:28:02,783 --> 00:28:05,219 line:-1
你也可以控制一项程序或是文件


626
00:28:05,285 --> 00:28:06,587 line:-1
是否要添加进最近访问菜单


627
00:28:07,321 --> 00:28:09,122 line:-1
有很多东西可以控制


628
00:28:09,189 --> 00:28:11,859 line:-1
哪些app可以在启动时隐藏


629
00:28:11,925 --> 00:28:14,027 line:-1
哪些app可以在启动时隐藏


630
00:28:14,628 --> 00:28:17,531 line:-2
所以 不管你的url
或app打开需要什么条件


631
00:28:18,031 --> 00:28:20,901 line:-2
NSWorkspace在
macOS 10.15都能很好适应


632
00:28:23,370 --> 00:28:24,505 line:-1
（活动）


633
00:28:26,039 --> 00:28:27,941 line:-1
我们来简单谈谈活动


634
00:28:29,409 --> 00:28:31,078 line:-1
这是我想要展示的功能


635
00:28:31,879 --> 00:28:35,115 line:-1
如果你将鼠标停在绿色按钮上


636
00:28:35,983 --> 00:28:37,117 line:-1
在窗口标题栏上


637
00:28:37,551 --> 00:28:38,819 line:-1
你就会得到新菜单


638
00:28:39,286 --> 00:28:40,487 line:-1
第一组选项


639
00:28:40,821 --> 00:28:43,156 line:-1
就是将窗口全屏显示


640
00:28:43,223 --> 00:28:45,592 line:-1
或将其放置在共享全屏空间中


641
00:28:46,360 --> 00:28:47,427 line:-1
这很实用


642
00:28:47,761 --> 00:28:50,564 line:-1
但还有一项更实用的功能


643
00:28:50,898 --> 00:28:53,467 line:-1
就是可以将窗口移至另一显示器


644
00:28:55,068 --> 00:28:57,070 line:-1
这对于经常将电脑


645
00:28:57,137 --> 00:28:58,539 line:-1
连到另一个扩展屏幕的人来说


646
00:28:58,605 --> 00:29:00,207 line:-1
我觉得尤其实用


647
00:29:00,974 --> 00:29:03,377 line:-1
但你不需要用传统意义上的显示器


648
00:29:04,244 --> 00:29:07,080 line:-2
有附加显示器功能的
iPad也可以


649
00:29:08,715 --> 00:29:10,017 line:-1
你们可以看到


650
00:29:10,083 --> 00:29:12,352 line:-2
这是一个叫Pencil Draw
的iPad程序


651
00:29:12,419 --> 00:29:14,688 line:-1
上面有美丽的草书


652
00:29:15,656 --> 00:29:16,757 line:-2
该app支持
Apple Pencil


653
00:29:17,024 --> 00:29:20,894 line:-2
所以iPad现在可以
作为Mac的平板设备


654
00:29:22,129 --> 00:29:25,232 line:-2
所以在macOS 10.15中
我们将拥有更多的平板电脑用户


655
00:29:26,099 --> 00:29:29,169 line:-1
如果你在过去几年中一直在想


656
00:29:29,236 --> 00:29:31,371 line:-1
为你的app增加平板支持


657
00:29:31,438 --> 00:29:33,473 line:-1
现在正是时候


658
00:29:34,341 --> 00:29:36,376 line:-1
现在我来告诉你怎么做


659
00:29:37,244 --> 00:29:38,545 line:-1
（平板活动回顾）


660
00:29:38,979 --> 00:29:41,849 line:-1
平板活动基本上是正常的鼠标活动


661
00:29:43,750 --> 00:29:45,886 line:-1
但它们也有不同 如果你注意到


662
00:29:45,953 --> 00:29:47,654 line:-2
NSEvent SubType
字段的话


663
00:29:48,188 --> 00:29:50,123 line:-2
这里有一个
tabletPoint值


664
00:29:51,091 --> 00:29:53,460 line:-1
如果你注意到来自平板的


665
00:29:53,527 --> 00:29:54,461 line:-1
tabletPoint活动


666
00:29:54,895 --> 00:29:57,865 line:-1
它同时还有附加的压力信息


667
00:29:58,599 --> 00:30:00,934 line:-1
注意到这些压力信息


668
00:30:01,001 --> 00:30:02,870 line:-1
对于做一些漂亮的草书是非常重要的


669
00:30:03,337 --> 00:30:05,405 line:-1
因为会有不同笔宽的地方


670
00:30:07,508 --> 00:30:10,377 line:-2
如果你过去在iOS中
使用Pencil API


671
00:30:11,879 --> 00:30:13,914 line:-2
通过注册处理程序
你可以做一些事情


672
00:30:13,981 --> 00:30:17,050 line:-1
对压力进行更新


673
00:30:17,951 --> 00:30:19,152 line:-1
但这在Mac中没有表现出来


674
00:30:19,219 --> 00:30:21,822 line:-2
你可以只关注
NSEvent的压力部分


675
00:30:25,492 --> 00:30:27,961 line:-2
有一个和Apple Pencil
有关的管理


676
00:30:28,028 --> 00:30:28,962 line:-1
我想提一提


677
00:30:29,429 --> 00:30:32,399 line:-1
就是如果你双击笔的侧面


678
00:30:33,000 --> 00:30:34,301 line:-1
它就会切换


679
00:30:34,368 --> 00:30:36,637 line:-1
比如画图app中的画图工具


680
00:30:37,204 --> 00:30:38,672 line:-2
我们叫它
changeModeEvent


681
00:30:39,306 --> 00:30:40,974 line:-2
此项活动中有一个
新的EventType论坛


682
00:30:41,308 --> 00:30:42,843 line:-1
也有新的响应器方法


683
00:30:42,910 --> 00:30:45,646 line:-1
通过响应器链进行直接处理


684
00:30:48,148 --> 00:30:49,082 line:-1
在许多情况下


685
00:30:49,349 --> 00:30:51,185 line:-1
你可能想要平板功能


686
00:30:51,251 --> 00:30:54,688 line:-2
但它并没有像View一样
锚定在响应器子类中


687
00:30:55,489 --> 00:30:57,791 line:-1
但你还是想直接处理该活动


688
00:30:57,858 --> 00:30:59,626 line:-1
有一个方法可以做到


689
00:30:59,693 --> 00:31:01,995 line:-2
就是使用现有的
LocalEventMonitor API


690
00:31:03,363 --> 00:31:05,632 line:-1
看看屏幕底端的代码


691
00:31:06,867 --> 00:31:09,536 line:-2
你可以看到
NSEvent.addLocalEventMonitor


692
00:31:09,603 --> 00:31:13,173 line:-2
用来使活动函数
抓取changeModeEvents


693
00:31:13,640 --> 00:31:15,309 line:-1
然后循环使用工具


694
00:31:15,375 --> 00:31:16,510 line:-1
最后回到活动


695
00:31:16,810 --> 00:31:19,046 line:-1
让它流经响应者链的其余部分


696
00:31:19,847 --> 00:31:23,884 line:-1
所以 这是分解代码的好方法


697
00:31:27,187 --> 00:31:28,021 line:-1
（几何）


698
00:31:28,088 --> 00:31:28,989 line:-1
好


699
00:31:29,957 --> 00:31:31,725 line:-1
我们来谈谈基础功能


700
00:31:32,359 --> 00:31:33,894 line:-1
我们有一些新的几何数据类型


701
00:31:33,961 --> 00:31:35,696 line:-1
通常进入基础功能


702
00:31:35,963 --> 00:31:37,364 line:-1
大家都很紧张


703
00:31:37,798 --> 00:31:40,400 line:-1
今年你可以选怎么个紧张法


704
00:31:43,003 --> 00:31:45,739 line:-2
数据类型是
NSDirectionalRectEdge


705
00:31:46,440 --> 00:31:48,008 line:-1
NSDirectionalEdgeInsets


706
00:31:48,308 --> 00:31:49,376 line:-1
和NSRectAlignment


707
00:31:50,344 --> 00:31:52,946 line:-2
它不在像Min X或Max S
之类的currency里工作


708
00:31:53,013 --> 00:31:53,847 line:-1
也不是左右


709
00:31:54,314 --> 00:31:57,017 line:-1
而是用前导和尾后标识符


710
00:31:57,651 --> 00:31:59,987 line:-2
所以 他们会根据从左到右
或是从右到左的系统中


711
00:32:00,053 --> 00:32:01,955 line:-1
上下文自动翻转


712
00:32:03,023 --> 00:32:05,659 line:-2
NSCollectionView
正是出于此目的


713
00:32:05,993 --> 00:32:08,962 line:-1
你也可以在你的app种直接运用


714
00:32:11,999 --> 00:32:13,233 line:-1
（格式化）


715
00:32:13,300 --> 00:32:15,269 line:-1
我还想说说另一个基础功能


716
00:32:15,335 --> 00:32:17,638 line:-2
有助你进行本地化
那就是新格式化程序


717
00:32:18,906 --> 00:32:21,909 line:-2
首先是
NSRelativeDateFormatter


718
00:32:23,477 --> 00:32:26,180 line:-2
NSRelativeDateFormatter
有两个重要属性


719
00:32:26,246 --> 00:32:27,514 line:-1
dateTimeStyle


720
00:32:27,581 --> 00:32:30,417 line:-1
允许你选择是否以绝对单位


721
00:32:30,484 --> 00:32:31,685 line:-1
或是更口语化的术语工作


722
00:32:31,752 --> 00:32:33,220 line:-1
是一星期前或是上周


723
00:32:33,854 --> 00:32:35,122 line:-1
还有unitsStyle


724
00:32:35,189 --> 00:32:39,459 line:-1
控制了语言是冗长或是简洁


725
00:32:42,563 --> 00:32:44,598 line:-2
还有新的
NSListFormatter类


726
00:32:45,499 --> 00:32:48,335 line:-2
NSListFormatter
很有趣 它并不格式化


727
00:32:49,036 --> 00:32:50,237 line:-1
标量对象


728
00:32:50,504 --> 00:32:52,472 line:-1
而是格式化一个对象数组


729
00:32:53,841 --> 00:32:56,577 line:-1
而它对每一个对象


730
00:32:56,643 --> 00:32:57,811 line:-1
都使用一个单独的格式化程序


731
00:32:58,645 --> 00:33:00,380 line:-1
列表格式化程序添加的值


732
00:33:01,315 --> 00:33:03,150 line:-1
是了解在各个格式化字符串之间


733
00:33:03,217 --> 00:33:05,252 line:-1
在哪里添加逗号


734
00:33:05,786 --> 00:33:08,555 line:-2
以及是否需要牛津逗号
或是将二者结合


735
00:33:09,556 --> 00:33:12,326 line:-1
之后会有关于这方面更详细的演讲


736
00:33:12,392 --> 00:33:14,294 line:-1
我建议你也听听


737
00:33:17,998 --> 00:33:20,834 line:-2
关于基础功能
我们还有一项令人激动的新功能


738
00:33:20,901 --> 00:33:22,002 line:-1
叫Combine


739
00:33:22,436 --> 00:33:24,271 line:-2
Combine
是Swift API


740
00:33:24,738 --> 00:33:27,574 line:-1
用于将app中对象的属性


741
00:33:27,875 --> 00:33:30,344 line:-1
连接到另一个属性


742
00:33:31,311 --> 00:33:33,680 line:-1
所以我这里展示了具体的例子


743
00:33:34,248 --> 00:33:36,350 line:-2
这是我们实施的
awakeFrontNib方法


744
00:33:36,850 --> 00:33:40,354 line:-1
继续并从模型对象绑定名称属性


745
00:33:40,721 --> 00:33:42,122 line:-1
至NSText字段值


746
00:33:42,723 --> 00:33:44,258 line:-1
不管该名称何时改变


747
00:33:44,324 --> 00:33:46,293 line:-1
该文本字段都会更新其字符串


748
00:33:47,327 --> 00:33:48,662 line:-1
所以这真的很强大


749
00:33:49,129 --> 00:33:51,164 line:-1
它app不仅仅是UI绑定


750
00:33:51,565 --> 00:33:54,168 line:-1
我们也有专门对此进行的演讲


751
00:33:54,234 --> 00:33:55,669 line:-1
也非常棒


752
00:33:56,436 --> 00:33:58,272 line:-1
所以这周也去看看


753
00:34:00,340 --> 00:34:01,575 line:-1
（扩展）


754
00:34:02,409 --> 00:34:03,410 line:-1
最后


755
00:34:03,477 --> 00:34:06,246 line:-2
我想说说macOS
系统扩展的一些改变


756
00:34:07,481 --> 00:34:10,150 line:-2
我们在系统扩展系列中
添加了一小部分


757
00:34:10,884 --> 00:34:13,987 line:-2
以非UI文件提供程序
操作扩展的形式进行


758
00:34:14,688 --> 00:34:17,791 line:-1
如果您熟悉基于UI的文件或行为


759
00:34:18,192 --> 00:34:19,525 line:-1
文件提供者动作扩展


760
00:34:19,826 --> 00:34:20,960 line:-1
都是一样的


761
00:34:21,027 --> 00:34:23,362 line:-1
但有时 你并不需要额外的UI


762
00:34:23,429 --> 00:34:25,732 line:-1
你可以不用 这也满足了这种需要


763
00:34:26,366 --> 00:34:27,501 line:-1
（新扩展类型）


764
00:34:28,467 --> 00:34:30,571 line:-1
还有一些我们觉得更有趣的事情


765
00:34:31,438 --> 00:34:33,507 line:-1
在过去 有一些功能


766
00:34:33,574 --> 00:34:35,909 line:-2
在OS层面上
你必须要用内核扩展来添加


767
00:34:36,476 --> 00:34:39,379 line:-2
我们现在让系统扩展
可以执行类似的操作


768
00:34:40,179 --> 00:34:41,547 line:-1
我们有新的网络扩展


769
00:34:41,982 --> 00:34:45,452 line:-2
有DriverKit来帮助编写
某些类型的设备驱动程序


770
00:34:46,119 --> 00:34:48,088 line:-1
我们还有新的端点安全系统


771
00:34:48,155 --> 00:34:49,755 line:-1
有助于编写杀毒软件


772
00:34:50,524 --> 00:34:52,993 line:-2
所以如果你这些年来
一直在编写内核扩展


773
00:34:53,060 --> 00:34:54,795 line:-1
那这些对你就非常有用


774
00:34:55,295 --> 00:34:57,531 line:-1
我们对此进行了安全提升


775
00:34:57,598 --> 00:34:58,532 line:-1
我们也感到十分兴奋


776
00:34:58,599 --> 00:35:01,535 line:-2
你不用再对内核模式调试
你应该也会很兴根


777
00:35:03,871 --> 00:35:04,972 line:-1
所以


778
00:35:05,239 --> 00:35:06,507 line:-1
这也就包含了我们的补充


779
00:35:06,573 --> 00:35:07,674 line:-1
（总结）


780
00:35:07,741 --> 00:35:09,676 line:-1
我想再次提醒你们今天说到的


781
00:35:10,043 --> 00:35:10,944 line:-1
很棒的东西


782
00:35:11,545 --> 00:35:14,448 line:-2
我们补充了NSColor
包括新的动态系统颜色


783
00:35:14,781 --> 00:35:17,584 line:-1
将自己的动态程序


784
00:35:17,651 --> 00:35:18,952 line:-1
嵌入NSColor系统的新方法


785
00:35:19,353 --> 00:35:21,822 line:-1
以及你可以自己使用的颜色取样器类


786
00:35:22,122 --> 00:35:23,857 line:-1
可以直接从屏幕上拾取颜色


787
00:35:25,559 --> 00:35:27,895 line:-2
我们也说到了NSScreen里的
许多API


788
00:35:27,961 --> 00:35:31,465 line:-2
包括那些让你充分利用
扩展动态范围的东西


789
00:35:33,033 --> 00:35:35,369 line:-1
我们说到了各种各样的文本增强功能


790
00:35:37,271 --> 00:35:39,339 line:-2
如果你想让你的app在较暗主题下
也很好看的话


791
00:35:39,406 --> 00:35:41,375 line:-1
或是呈现简单或富文本


792
00:35:41,875 --> 00:35:44,011 line:-1
黑暗模式增强功能都会很棒


793
00:35:44,278 --> 00:35:46,914 line:-2
文本检查控制器将让你
丰富自己的文本引擎


794
00:35:46,980 --> 00:35:47,915 line:-1
而且是以前所未有的方式


795
00:35:48,582 --> 00:35:52,052 line:-1
我们兼容iOS和macOS


796
00:35:52,119 --> 00:35:54,188 line:-1
关于文本大小的调整非常有用


797
00:35:54,521 --> 00:35:57,090 line:-2
尤其是考虑到今年
Mac上有了UIKit


798
00:35:59,059 --> 00:36:01,461 line:-2
我们也说到了像
NSSwitch这样的控件


799
00:36:01,795 --> 00:36:02,863 line:-1
还有CollectionView


800
00:36:03,497 --> 00:36:05,832 line:-2
你们一定要去听听
CollectionView演讲


801
00:36:05,899 --> 00:36:07,868 line:-2
因为CollectionView
已经成为UI词汇中


802
00:36:07,935 --> 00:36:09,036 line:-1
非常重要的一部分


803
00:36:10,437 --> 00:36:12,406 line:-2
我们也说到了NSToolbar
的一些提升


804
00:36:12,706 --> 00:36:15,075 line:-1
让您更轻松地制作按钮


805
00:36:15,142 --> 00:36:18,645 line:-2
还有使用ToolbarItem组
的更多方式


806
00:36:20,747 --> 00:36:24,418 line:-1
我们介绍了在NSEvent中


807
00:36:24,484 --> 00:36:27,054 line:-2
如何处理平板活动及对
Apple Pencil特殊支持


808
00:36:27,621 --> 00:36:29,389 line:-1
再次强调 现在有许多平板用户


809
00:36:29,456 --> 00:36:30,891 line:-1
在未来会转向使用Mac


810
00:36:31,158 --> 00:36:32,826 line:-1
我认为你的app可以使用平板功能


811
00:36:33,126 --> 00:36:34,361 line:-1
加上去会是很棒的功能


812
00:36:35,996 --> 00:36:38,131 line:-1
最后以对NS的一些本地化提升结束


813
00:36:38,565 --> 00:36:40,567 line:-1
或者说是对基础几何数据类型的提升


814
00:36:40,934 --> 00:36:41,902 line:-1
以及新的格式化程序


815
00:36:43,437 --> 00:36:45,472 line:-2
希望你们都能够喜欢
并运用这些新功能


816
00:36:46,240 --> 00:36:47,541 line:-1
祝你拥有美好的一周


817
00:36:48,408 --> 00:36:49,443 line:-1
非常感谢


818
00:36:49,910 --> 00:36:51,979 line:-2
（欲知更多信息 请登录
DEVELOPER.APPLE.COM/WWDC19/210）

