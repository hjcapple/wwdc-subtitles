1
00:00:06,640 --> 00:00:10,410 line:0
（与Siri活动集成建议）


2
00:00:10,477 --> 00:00:11,578 line:-1
大家下午好


3
00:00:12,546 --> 00:00:15,716 line:-2
欢迎来到
与Siri活动集成建议演讲


4
00:00:16,216 --> 00:00:19,620 line:-2
我是Sofiane 是Apple
Siri框架团队的一名工程师


5
00:00:20,387 --> 00:00:22,589 line:-2
今天我将与
我的同事Magnus一起演讲


6
00:00:23,190 --> 00:00:25,058 line:-1
今天很开心能在这里


7
00:00:25,292 --> 00:00:29,263 line:-2
和大家讲讲如何将你的app
与Siri活动建议集成


8
00:00:31,231 --> 00:00:33,667 line:-1
Siri是我们喜爱的虚拟助手


9
00:00:34,268 --> 00:00:37,104 line:-2
通过SiriKit
你的app就能和Siri一起


10
00:00:37,371 --> 00:00:40,541 line:-1
做一些比如发送信息 请求乘坐


11
00:00:40,841 --> 00:00:44,378 line:-2
还有使用捷径
启用app的关键功能


12
00:00:45,679 --> 00:00:48,982 line:-1
Siri也深入与我们的平台集成


13
00:00:49,216 --> 00:00:52,019 line:-2
为我们每天使用的app
添加了设备智能


14
00:00:53,420 --> 00:00:55,689 line:-1
在日历中 Siri是个人的


15
00:00:55,856 --> 00:00:58,725 line:-1
它知道你的预订并帮你组织你的活动


16
00:00:59,526 --> 00:01:02,596 line:-1
Siri可以利用你的预订信息


17
00:01:03,030 --> 00:01:05,432 line:-1
在系统中主动提出积极的建议


18
00:01:06,300 --> 00:01:07,901 line:-1
在锁屏上


19
00:01:08,268 --> 00:01:11,638 line:-2
Siri会根据交通情况
提醒你什么时候出发


20
00:01:12,573 --> 00:01:15,142 line:-2
当你打开地图时
也会得到Siri的建议


21
00:01:15,275 --> 00:01:16,844 line:-1
让你方便快捷得


22
00:01:17,177 --> 00:01:20,247 line:-1
获取到达终点的路线 只需一按


23
00:01:21,481 --> 00:01:22,583 line:-1
当你到达目的地时


24
00:01:23,016 --> 00:01:25,652 line:-1
Siri会建议你打开请勿打扰模式


25
00:01:25,986 --> 00:01:27,955 line:-1
这样你就能专注你要做的事情


26
00:01:28,822 --> 00:01:32,559 line:-1
而这些都基于系统知道你的预订


27
00:01:33,060 --> 00:01:33,994 line:-1
不管这些预订是在哪里的


28
00:01:34,661 --> 00:01:37,497 line:-1
不管是邮件中的车辆租赁预订


29
00:01:38,098 --> 00:01:40,267 line:-1
还是信息中的餐厅预订


30
00:01:40,934 --> 00:01:43,937 line:-1
或者是在Safari中订的机票


31
00:01:44,738 --> 00:01:46,673 line:-1
现在在iOS 13中


32
00:01:47,007 --> 00:01:50,644 line:-2
我们很高兴
向你介绍一款新的API


33
00:01:50,777 --> 00:01:52,779 line:-1
能够与生态系统直接整合


34
00:01:58,118 --> 00:01:59,486 line:-1
比如


35
00:01:59,786 --> 00:02:02,923 line:-2
你在美国航空app内部
查看你的航班预订时


36
00:02:03,590 --> 00:02:05,826 line:-1
该app会将信息发给系统


37
00:02:06,660 --> 00:02:09,930 line:-2
Siri就可以利用该信息
自动显示提示


38
00:02:10,264 --> 00:02:11,732 line:-1
并将该航班添加至你的日历中


39
00:02:12,833 --> 00:02:16,336 line:-2
Siri之后就会对该航班
在正确的时候


40
00:02:16,637 --> 00:02:19,173 line:-2
提出积极的建议 显示在刚刚
我提过的所有地方


41
00:02:20,007 --> 00:02:23,510 line:-2
而所有的这些智能行为
都直接发生在设备上


42
00:02:24,478 --> 00:02:25,879 line:-1
但我们不止于此


43
00:02:26,446 --> 00:02:29,883 line:-1
今年 我们希望扩展深度系统集成


44
00:02:30,317 --> 00:02:33,086 line:-2
并在系统中的更多位置
推广你的app


45
00:02:34,288 --> 00:02:35,455 line:-1
在iOS 13中


46
00:02:35,856 --> 00:02:37,291 line:-1
如果你的app支持签到


47
00:02:37,558 --> 00:02:39,927 line:-1
它会在锁屏中置顶


48
00:02:40,360 --> 00:02:43,163 line:-2
以便在正确的时间
将用户带入你的app中


49
00:02:44,731 --> 00:02:46,600 line:-1
在新的iOS 13中 在地图中


50
00:02:47,201 --> 00:02:49,536 line:-1
当用户在正确的时间进入地图


51
00:02:49,937 --> 00:02:52,606 line:-2
他们就可以获得
有关其航班的最新信息


52
00:02:52,739 --> 00:02:56,710 line:-2
还能够帮助他们
获取到登机口的方向


53
00:02:58,445 --> 00:03:01,381 line:-1
所以Siri会你从预订开始


54
00:03:01,815 --> 00:03:04,651 line:-2
到你登机为止的
每一步都为你提供帮助


55
00:03:05,752 --> 00:03:09,756 line:-1
我希望你们也觉得这个功能很酷


56
00:03:10,490 --> 00:03:11,792 line:-1
但是这是怎么运作的呢


57
00:03:13,493 --> 00:03:15,462 line:-1
API是SiriKit的一部分


58
00:03:15,596 --> 00:03:18,498 line:-2
它能够让你做许多事情
比如说创建捷径


59
00:03:18,565 --> 00:03:20,200 line:-1
发送付款等等


60
00:03:20,868 --> 00:03:23,604 line:-1
特别是我们今天说的每一点


61
00:03:23,837 --> 00:03:25,672 line:-2
都是作为Intent
框架的一部分公开


62
00:03:27,140 --> 00:03:29,309 line:-1
我们支持从餐厅到票务


63
00:03:29,610 --> 00:03:31,778 line:-1
甚至是交通方式等


64
00:03:31,845 --> 00:03:33,213 line:-1
一系列类别的预订


65
00:03:33,881 --> 00:03:37,718 line:-2
今年我们在Intent框架中
我们引入了一个新类


66
00:03:38,118 --> 00:03:41,221 line:-1
来表示所有这些预订类别的详细信息


67
00:03:42,022 --> 00:03:45,125 line:-2
所有的新类都继承自
新的IN预订类型


68
00:03:45,459 --> 00:03:48,128 line:-1
例如 要表示餐厅预订


69
00:03:48,529 --> 00:03:51,064 line:-2
你可以创建
INRestaurantReservation对象


70
00:03:52,933 --> 00:03:56,570 line:-2
如果你熟悉SiriKit
你就会认识这个INInteraction API


71
00:03:56,770 --> 00:03:58,906 line:-1
可以用于创建捷径


72
00:03:59,473 --> 00:04:02,242 line:-1
所以当用户浏览你app中的预订时


73
00:04:02,709 --> 00:04:06,180 line:-2
你的app就会创建交互
并发送至系统


74
00:04:06,980 --> 00:04:09,816 line:-2
交互是由Intent
或者说是Intent响应组成


75
00:04:10,117 --> 00:04:13,420 line:-1
他们共同代表用户的完整交互


76
00:04:15,022 --> 00:04:16,589 line:-1
今年 我们引入了


77
00:04:16,656 --> 00:04:20,027 line:-2
新的IN获取预订细节Intent
这是一个Intent响应


78
00:04:20,627 --> 00:04:24,631 line:-1
旨在获取与用户预订相关的详细信息


79
00:04:25,032 --> 00:04:28,368 line:-2
这是你的app
与Siri共享信息的方法


80
00:04:29,670 --> 00:04:32,606 line:-2
现在Intent响应
用了我们之前看到的


81
00:04:32,673 --> 00:04:33,907 line:-2
INReservation
对象列表


82
00:04:34,308 --> 00:04:36,210 line:-1
这代表了你的具体预订


83
00:04:36,743 --> 00:04:37,945 line:-1
比如说


84
00:04:38,245 --> 00:04:41,849 line:-2
我要创建一个IN住宿预订
并将其附加至Intent响应


85
00:04:42,182 --> 00:04:43,917 line:-1
来代表酒店入住细节


86
00:04:45,319 --> 00:04:48,488 line:-1
你要做的就是将这些交互发送给系统


87
00:04:49,156 --> 00:04:52,259 line:-2
Siri就可以将其用于
Siri活动建议


88
00:04:52,526 --> 00:04:53,961 line:-1
或者是Siri捷径等地方


89
00:04:55,262 --> 00:04:58,699 line:-1
现在我们来说说你的app要做的


90
00:04:58,932 --> 00:05:00,234 line:-1
简单的三个步骤


91
00:05:00,434 --> 00:05:02,803 line:-1
来充分利用这些功能


92
00:05:03,537 --> 00:05:07,608 line:-1
首先我们来说说如何创建及发送交互


93
00:05:08,442 --> 00:05:12,446 line:-2
接下来是如何采用
新的预订行为API


94
00:05:12,713 --> 00:05:15,449 line:-2
这样你的app就可以从新的
登记捷径中获益


95
00:05:16,283 --> 00:05:20,053 line:-2
最后 你的app可能会与你
之前发送的预订一起启动


96
00:05:20,654 --> 00:05:22,756 line:-1
所以我们也会说到你应该处理的


97
00:05:22,823 --> 00:05:24,024 line:-1
各种启动方案


98
00:05:24,992 --> 00:05:27,661 line:-1
现在有请我的同事Magnus上台


99
00:05:27,995 --> 00:05:29,897 line:-1
来讲讲API 有请Magnus


100
00:05:34,434 --> 00:05:35,402 line:-1
谢谢你 Sofiane


101
00:05:37,037 --> 00:05:38,839 line:-1
大家好 我是Magnus


102
00:05:39,406 --> 00:05:41,308 line:-1
今天我很高兴和大家说说


103
00:05:41,375 --> 00:05:43,143 line:-1
Siri活动建议


104
00:05:44,244 --> 00:05:46,847 line:-2
首先我会向你展示
一个如何使用API的演示


105
00:05:47,447 --> 00:05:49,816 line:-1
之后再谈到细节


106
00:05:50,651 --> 00:05:51,685 line:-1
我们先来看演示


107
00:05:55,556 --> 00:05:58,025 line:-1
先来看看这款叫我的航班的app


108
00:05:58,692 --> 00:06:00,527 line:-1
我们先打开来看看是什么样的


109
00:06:02,296 --> 00:06:04,665 line:-1
它会显示我的航班预订列表


110
00:06:05,666 --> 00:06:08,702 line:-2
如果我点击其中一个
它就会显示航班预订信息


111
00:06:10,437 --> 00:06:13,140 line:-1
我想利用Siri活动建议API


112
00:06:13,340 --> 00:06:16,476 line:-1
并发送预订细节并向用户显示


113
00:06:18,579 --> 00:06:19,780 line:-1
让我们转到Xcode


114
00:06:22,082 --> 00:06:25,118 line:-2
现在我的app中有一些
视图控制器和服务器


115
00:06:25,252 --> 00:06:26,887 line:-1
我可以在那里获取航班信息详情


116
00:06:27,654 --> 00:06:29,556 line:-1
因为我想在向用户显示时


117
00:06:30,257 --> 00:06:31,592 line:-1
发送这些信息


118
00:06:31,692 --> 00:06:34,094 line:-1
所以让我们看看预订信息视图控制器


119
00:06:37,531 --> 00:06:39,800 line:-1
视图控制器从服务器中获取预订信息


120
00:06:40,601 --> 00:06:41,935 line:-1
在这个演示中


121
00:06:42,135 --> 00:06:45,239 line:-2
服务器会返回
INReservations SiriKit对象


122
00:06:46,406 --> 00:06:48,041 line:-1
我已经做了一些工作了


123
00:06:48,175 --> 00:06:50,544 line:-2
但是这里还有一些没有写的代码
标记为待办事项


124
00:06:52,145 --> 00:06:55,649 line:-2
我们去服务器看看
INReservations对象是由什么组成的


125
00:06:59,086 --> 00:07:02,189 line:-2
在我的服务器代码中
有一个叫创建航班预订的方法


126
00:07:02,556 --> 00:07:04,091 line:-1
使用来创建和保存预订信息的


127
00:07:04,157 --> 00:07:06,093 line:-1
所以我可以从我的视图控制器访问它


128
00:07:07,327 --> 00:07:09,329 line:-2
我要在这里创建一个
叫INFlightReservation的对象


129
00:07:16,737 --> 00:07:19,339 line:-2
该方法创建了一个
INFlightReservation的对象


130
00:07:19,806 --> 00:07:22,943 line:-2
该对象涵盖了所有
航班预订的详细信息


131
00:07:24,678 --> 00:07:26,246 line:-1
我们来看看其中一些属性


132
00:07:29,583 --> 00:07:31,151 line:-1
首先是itemReference


133
00:07:31,919 --> 00:07:34,788 line:-1
这是该预订项目的唯一标识符


134
00:07:35,422 --> 00:07:37,224 line:-1
它在系统启动我的app时使用


135
00:07:37,791 --> 00:07:40,027 line:-1
以告知它要显示哪个特定的预订项目


136
00:07:41,995 --> 00:07:44,731 line:-2
在我的app中 预订编号对于
此次航班来说是唯一的


137
00:07:45,199 --> 00:07:47,601 line:-1
所以我将它用于词汇表标识符


138
00:07:48,969 --> 00:07:52,372 line:-2
同时我也加上了可以向
用户显示的口头短语


139
00:07:53,407 --> 00:07:57,010 line:-2
我用的是航班XX815
简短精悍


140
00:08:00,881 --> 00:08:02,182 line:-1
这是所有预订类型


141
00:08:03,317 --> 00:08:05,452 line:-1
共享的一些常见属性


142
00:08:05,819 --> 00:08:08,522 line:-1
比如预订编号 还有预订持有人等


143
00:08:12,426 --> 00:08:14,661 line:-1
我们也想获取关于航班的一些信息


144
00:08:15,629 --> 00:08:18,198 line:-2
它是在一个叫创建航班的
单独方法中创建的


145
00:08:18,866 --> 00:08:20,133 line:-1
我们来看看


146
00:08:27,975 --> 00:08:30,177 line:-2
在这里我创建了一个
INFlight对象


147
00:08:30,777 --> 00:08:32,946 line:-1
它表示了航班的所有详细信息


148
00:08:33,246 --> 00:08:35,448 line:-1
比如航班号 航空公司


149
00:08:35,916 --> 00:08:38,018 line:-1
还有出发和到达信息


150
00:08:39,385 --> 00:08:40,821 line:-1
我这里还有一些待办事项


151
00:08:41,087 --> 00:08:42,222 line:-1
我们一起来完成


152
00:08:42,456 --> 00:08:45,526 line:-1
从航空公司和机场信息开始


153
00:08:53,600 --> 00:08:55,369 line:-1
这些对象表示了航空公司


154
00:08:55,435 --> 00:08:57,971 line:-1
还有航班出发和到达的信息


155
00:08:58,805 --> 00:09:01,742 line:-2
在我们的例子中
该航班是从旧金山到巴黎


156
00:09:03,177 --> 00:09:07,447 line:-2
航空公司和机场信息都使用
IATA或者ICAO代码识别


157
00:09:08,415 --> 00:09:10,184 line:-1
对于机场信息而言 这也可以用来


158
00:09:10,984 --> 00:09:13,554 line:-1
确定机场的位置


159
00:09:15,022 --> 00:09:18,959 line:-1
我来为出发添加登机口和航站楼信息


160
00:09:19,092 --> 00:09:20,694 line:-1
因为现在我已经知道了


161
00:09:21,762 --> 00:09:23,630 line:-1
我还不知道到达口的信息


162
00:09:23,797 --> 00:09:24,765 line:-1
所以我设置为无


163
00:09:28,669 --> 00:09:30,904 line:-1
接下来 我还要为我的航班


164
00:09:30,971 --> 00:09:32,906 line:-1
指定出发和到达时间


165
00:09:37,544 --> 00:09:39,646 line:-1
我们使用IN日期组件范围类


166
00:09:39,713 --> 00:09:41,648 line:-1
来表示出发和到达时间


167
00:09:42,583 --> 00:09:43,984 line:-1
为了更好的用户体验


168
00:09:44,518 --> 00:09:46,220 line:-1
我设置的是当地时区


169
00:09:46,687 --> 00:09:49,022 line:-1
不好意思 我对出发和到达


170
00:09:49,690 --> 00:09:51,592 line:-1
设置的都是当地时区


171
00:09:53,026 --> 00:09:56,997 line:-2
好了 现在我们设置好
所有需要表示航班的信息了


172
00:09:57,564 --> 00:10:00,033 line:-1
我们回过头看看其他的预订


173
00:10:07,307 --> 00:10:10,077 line:-1
我想让我的用户有更好的登记体验


174
00:10:10,410 --> 00:10:13,447 line:-1
所以我就要利用新的登记捷径


175
00:10:14,581 --> 00:10:17,484 line:-1
为此 我要创建一个登记活动


176
00:10:18,285 --> 00:10:20,354 line:-2
让我们看看
createCheckInAction方法


177
00:10:27,327 --> 00:10:29,563 line:-2
该方法会创建一个
INReservation活动


178
00:10:30,397 --> 00:10:33,934 line:-2
它由类型 有效持续时间和
用户活动组成


179
00:10:35,235 --> 00:10:36,904 line:-1
在该例中 类型是登记


180
00:10:37,571 --> 00:10:41,408 line:-2
有效持续时间是用户可以
在线办理登机手续的时间


181
00:10:42,843 --> 00:10:45,312 line:-1
在此期间 我指定的用户活动


182
00:10:45,445 --> 00:10:47,848 line:-1
会显示为建议捷径


183
00:10:49,783 --> 00:10:51,785 line:-2
我从创建
NSUserActivity开始


184
00:11:02,729 --> 00:11:05,299 line:-1
我用活动类型来创建NS用户活动


185
00:11:05,532 --> 00:11:09,169 line:-2
这让我的app在启动时
知道这是一个登记活动


186
00:11:10,771 --> 00:11:14,007 line:-1
我将标题设为航班XX815登记


187
00:11:14,908 --> 00:11:17,010 line:-1
这里向用户显示的是捷径


188
00:11:17,244 --> 00:11:19,146 line:-1
所以要确保短小精悍


189
00:11:22,449 --> 00:11:24,852 line:-1
现在我再添加一些我需要知道的细节


190
00:11:25,285 --> 00:11:27,621 line:-1
以便在启动app时开始登记流程


191
00:11:27,955 --> 00:11:31,458 line:-2
我在用户信息都添加
在requiredUserInfoKeys属性中


192
00:11:35,229 --> 00:11:37,064 line:-1
我还添加了一个网页URL值


193
00:11:38,265 --> 00:11:41,602 line:-2
这样即使没有安装我的app
也能够使用登记流程


194
00:11:43,337 --> 00:11:44,972 line:-1
现在我觉得用户活动已经很不错了


195
00:11:45,439 --> 00:11:47,508 line:-1
但我还需要指定有效持续时间


196
00:11:53,580 --> 00:11:55,516 line:-2
我们在这里再次使用
EndDateComponents范围


197
00:11:56,049 --> 00:11:58,252 line:-1
这一次我们使用开始时间和结束时间


198
00:11:58,452 --> 00:11:59,419 line:-1
来表示有效持续时间


199
00:12:00,254 --> 00:12:03,690 line:-2
在我们的例子中
登记开始时间是起飞前的24小时


200
00:12:04,057 --> 00:12:07,594 line:-2
在起飞前一小时结束 所以这就是
我们的有效持续时间


201
00:12:09,363 --> 00:12:11,632 line:-2
这就是我们创建
登记捷径所需的全部


202
00:12:12,199 --> 00:12:14,935 line:-1
我们回过头看看我们创建的预订


203
00:12:20,874 --> 00:12:22,442 line:-1
现在我们有了所需的信息


204
00:12:22,576 --> 00:12:24,211 line:-1
包括预订细节


205
00:12:24,678 --> 00:12:26,947 line:-1
航班信息 和登记活动


206
00:12:28,048 --> 00:12:32,052 line:-1
让我们回到预订细节视图控制器


207
00:12:32,319 --> 00:12:33,320 line:-1
来添加发送代码


208
00:12:35,122 --> 00:12:38,258 line:-2
所以我们的视图控制器已经知道了
我们刚刚创建的预订


209
00:12:38,992 --> 00:12:41,361 line:-1
我就在这里设置一个方式来发送预订


210
00:12:42,095 --> 00:12:43,697 line:-1
让我们来添加发送代码


211
00:12:56,310 --> 00:12:58,545 line:-1
我把导航关掉 这样看得清楚一点


212
00:13:01,949 --> 00:13:03,550 line:-1
那么现在我开始创建Intent


213
00:13:04,084 --> 00:13:07,454 line:-2
该Intent告诉Siri
该向用户展示什么预订


214
00:13:08,522 --> 00:13:09,690 line:-1
它需要两个参数


215
00:13:10,190 --> 00:13:12,492 line:-1
容器参考和项目参考


216
00:13:13,560 --> 00:13:16,964 line:-1
容器参考是标识整个预订的唯一参数


217
00:13:18,031 --> 00:13:21,368 line:-2
在该例中 我只有一个
预订项目 那就是航班


218
00:13:22,202 --> 00:13:24,905 line:-1
所以我将预订项目中的项目参考


219
00:13:25,205 --> 00:13:26,373 line:-1
设置为容器参考


220
00:13:27,474 --> 00:13:29,176 line:-1
如果我有多个预订项目


221
00:13:29,376 --> 00:13:31,445 line:-1
比如说酒店和航班


222
00:13:31,879 --> 00:13:37,117 line:-2
那么我就会新建一个容器参考
来代表整个预订


223
00:13:39,186 --> 00:13:41,522 line:-1
我将预订项目参考的属性设为无


224
00:13:42,289 --> 00:13:45,125 line:-1
这是在启动app时由系统填充的


225
00:13:48,428 --> 00:13:49,596 line:-1
除了Intent


226
00:13:49,830 --> 00:13:53,133 line:-2
我还指定了Intent响应
并将其添加至我的预订


227
00:13:53,934 --> 00:13:56,370 line:-2
这会告诉Siri
应该把哪个预订详情


228
00:13:56,436 --> 00:13:57,504 line:-1
展示给用户


229
00:13:58,972 --> 00:14:02,876 line:-2
最后 我将Intent和Intent响应
添加至INInteraction


230
00:14:03,243 --> 00:14:04,578 line:-1
然后发送至我的系统


231
00:14:06,346 --> 00:14:09,216 line:-2
现在我们已经写好了所有
发送该预订所需的代码


232
00:14:09,550 --> 00:14:10,984 line:-1
但我们在启动app前


233
00:14:11,051 --> 00:14:12,219 line:-1
还要检查一个地方


234
00:14:18,225 --> 00:14:20,627 line:-2
我要将
INGetReservationDetailsIntent


235
00:14:20,694 --> 00:14:22,296 line:-1
以及自定义CheckInActivity


236
00:14:22,362 --> 00:14:25,365 line:-2
添加至info.plist中
支持的活动类型列表


237
00:14:26,200 --> 00:14:28,936 line:-2
我之前已经做好了
所以我们可以继续


238
00:14:34,107 --> 00:14:35,843 line:-1
我们先来回顾一下


239
00:14:37,010 --> 00:14:39,446 line:-2
我们创建并发送了
INFlightReservation


240
00:14:39,680 --> 00:14:42,282 line:-1
该预订包含了所有预订信息


241
00:14:43,617 --> 00:14:45,385 line:-1
现在Siri就知道了该预订


242
00:14:45,819 --> 00:14:48,622 line:-1
并可以在整个系统中提供主动建议了


243
00:14:50,057 --> 00:14:51,925 line:-2
我们还添加了
INReservation活动


244
00:14:52,125 --> 00:14:53,927 line:-1
来提供更好的登记体验


245
00:14:53,994 --> 00:14:56,196 line:-1
我们会将捷径展示给用户


246
00:14:56,663 --> 00:14:59,433 line:-2
并且在对的时机直接将其
添加至登记流程中


247
00:15:00,734 --> 00:15:01,768 line:-1
我们来在操作中看看


248
00:15:06,240 --> 00:15:07,207 line:-1
回到我的app中


249
00:15:07,574 --> 00:15:10,410 line:-1
我们来看看到巴黎的航班预订


250
00:15:13,113 --> 00:15:15,682 line:-2
当我查看我的预订时
会弹出一条通知


251
00:15:16,383 --> 00:15:18,819 line:-2
告诉我Siri找到了一项活动
并将其添加置我的日历中


252
00:15:19,686 --> 00:15:20,587 line:-1
谢谢


253
00:15:23,323 --> 00:15:25,592 line:-1
我来点击该通知 看看会出现什么


254
00:15:27,261 --> 00:15:30,163 line:-2
正如我们所见
Siri利用我发送的信息


255
00:15:30,497 --> 00:15:32,866 line:-2
在我的Siri建议日历中
创建了活动


256
00:15:34,201 --> 00:15:35,903 line:-1
这里还有一个回到app的链接


257
00:15:37,037 --> 00:15:40,040 line:-1
当我点击时 就会直接回到app


258
00:15:40,474 --> 00:15:41,308 line:-1
这很棒


259
00:15:42,009 --> 00:15:44,144 line:-1
但是当我在查看日历时


260
00:15:44,211 --> 00:15:45,946 line:-1
我还是没有看到预订细节


261
00:15:46,480 --> 00:15:47,581 line:-1
这里我们还可以提升一下


262
00:15:47,881 --> 00:15:51,051 line:-2
让我们回到Xcode
看看如何实现app启动


263
00:15:54,021 --> 00:15:56,356 line:-2
为了实现app启动
我要去到app代理


264
00:15:58,926 --> 00:16:00,194 line:-1
当Siri启动我的app时


265
00:16:00,260 --> 00:16:02,462 line:-2
它将使用
NSUserActivity启动


266
00:16:02,663 --> 00:16:06,300 line:-2
所以我要实现app
继续用户活动代理方法


267
00:16:10,637 --> 00:16:12,606 line:-2
我在这里添加了对
两种活动类型的支持


268
00:16:13,240 --> 00:16:15,976 line:-2
第一项是
INGetReservationDetailsIntent


269
00:16:16,810 --> 00:16:20,314 line:-2
此活动类型表示
用户想要在我的app中


270
00:16:20,380 --> 00:16:22,416 line:-1
查看特定预订的详细信息


271
00:16:23,817 --> 00:16:25,886 line:-2
所以我要调用
handleShowReservation方法


272
00:16:26,186 --> 00:16:28,322 line:-1
它会将相关预订展示给用户


273
00:16:35,262 --> 00:16:39,700 line:-2
第二个是我为登记捷径
定义的活动类型


274
00:16:40,167 --> 00:16:42,436 line:-1
当用户点击锁屏或者是搜索上的


275
00:16:42,703 --> 00:16:44,271 line:-1
登记捷径时会启用


276
00:16:45,672 --> 00:16:47,975 line:-2
当该情况发生时 我要调用
handleCheckIn方法


277
00:16:48,041 --> 00:16:49,376 line:-1
来开始登记流程


278
00:16:51,545 --> 00:16:53,080 line:-1
处理完这两项事情后


279
00:16:53,547 --> 00:16:55,382 line:-1
我们再次启动app看看


280
00:17:02,022 --> 00:17:04,525 line:-1
我们首先回到日历


281
00:17:04,992 --> 00:17:07,060 line:-1
再次点击显示我的航班按钮


282
00:17:09,329 --> 00:17:11,765 line:-2
如你所见
我的app现在会直接显示


283
00:17:11,832 --> 00:17:13,733 line:-1
活动的预订详细信息


284
00:17:14,034 --> 00:17:15,868 line:-1
这大大提升了用户体验


285
00:17:21,241 --> 00:17:23,443 line:-1
我还添加了对登记捷径的支持


286
00:17:23,777 --> 00:17:28,281 line:-2
我的航班在明天下午2:50起飞
所以现在应该可以登记了


287
00:17:29,349 --> 00:17:30,350 line:-1
我们来看看这是怎样工作的


288
00:17:31,718 --> 00:17:34,154 line:-1
现在登记捷径在锁屏


289
00:17:34,621 --> 00:17:35,689 line:-1
和搜索UI上都有显示


290
00:17:36,490 --> 00:17:37,324 line:-1
当我点击


291
00:17:37,824 --> 00:17:40,294 line:-1
我就直接启动了app中的登记流程


292
00:17:40,594 --> 00:17:41,461 line:-1
这真的很棒


293
00:17:48,135 --> 00:17:49,036 line:-1
我们来回顾一下


294
00:17:49,736 --> 00:17:51,839 line:-1
我们创建和发送了预订


295
00:17:53,040 --> 00:17:54,508 line:-1
我们提供了登记活动


296
00:17:55,576 --> 00:17:57,311 line:-1
同时我们也处理了启动app


297
00:17:58,579 --> 00:17:59,580 line:-1
利用Siri活动建议API


298
00:17:59,646 --> 00:18:02,149 line:-1
来提供深度系统集成和提高用户体验


299
00:18:02,416 --> 00:18:05,752 line:-1
就是这么简单


300
00:18:07,054 --> 00:18:09,189 line:-1
现在我还想说说API


301
00:18:11,558 --> 00:18:12,826 line:-1
我们从发送开始


302
00:18:12,893 --> 00:18:15,429 line:-2
再说说Siri是如何在
例如捷径建议


303
00:18:15,629 --> 00:18:18,799 line:-1
和日历这些地方利用你发送的信息的


304
00:18:20,434 --> 00:18:21,468 line:-1
正如我们在演示中所见


305
00:18:21,935 --> 00:18:24,438 line:-2
你的app位于登记
捷径的正前方


306
00:18:25,405 --> 00:18:27,040 line:-1
我们显示了你的app名称和图标


307
00:18:27,107 --> 00:18:29,042 line:-1
还有预订信息


308
00:18:30,244 --> 00:18:34,314 line:-2
同样 我们使用你在捷径中
在NSUserActivity上设置的标题


309
00:18:34,882 --> 00:18:38,218 line:-2
因此 请确保使用准确
且具有描述性的字符串


310
00:18:40,521 --> 00:18:43,423 line:-1
现在 Siri会端到端加密


311
00:18:43,490 --> 00:18:46,360 line:-1
自动将预订详情同步至用户设备


312
00:18:47,227 --> 00:18:49,496 line:-2
所以用户在没有安装
你的app的设备上


313
00:18:49,563 --> 00:18:50,697 line:-1
也可以看到登记捷径


314
00:18:51,231 --> 00:18:52,666 line:-1
在我们的情况下是iPad


315
00:18:54,067 --> 00:18:54,902 line:-1
当该情况发生时


316
00:18:55,135 --> 00:18:58,572 line:-2
我们将使用你在NSUserActivity上
设置的网页网址属性


317
00:18:58,939 --> 00:19:01,642 line:-2
利用Safari提供
基于网页的登记流程


318
00:19:03,076 --> 00:19:04,278 line:-1
这就是登记捷径


319
00:19:04,778 --> 00:19:05,779 line:-1
我们再来看看日历


320
00:19:07,514 --> 00:19:09,082 line:-1
第一是标题


321
00:19:09,950 --> 00:19:11,785 line:-1
标题由Siri自动生成


322
00:19:12,819 --> 00:19:14,888 line:-1
利用的是你提供的预订详情


323
00:19:15,856 --> 00:19:19,526 line:-2
如你所见 Siri为标题添加了
本地化的预订类型


324
00:19:20,961 --> 00:19:22,462 line:-1
根据不同的预订类型


325
00:19:22,629 --> 00:19:25,532 line:-1
它会使用信息的不同部分来生成标题


326
00:19:26,233 --> 00:19:28,468 line:-1
因此请确保按原样提供所有详情


327
00:19:28,535 --> 00:19:31,638 line:-1
不要添加或附加任何内容


328
00:19:33,540 --> 00:19:34,675 line:-1
接下来是位置


329
00:19:35,709 --> 00:19:38,378 line:-1
位置是用户体验的关键组成部


330
00:19:38,645 --> 00:19:40,614 line:-1
它也推动了系统集成


331
00:19:40,681 --> 00:19:43,684 line:-1
例如出发时间通知和地图集成


332
00:19:44,651 --> 00:19:46,053 line:-1
对于大多预订类型


333
00:19:46,220 --> 00:19:49,423 line:-2
SiriKit会使用
CLPlacemark类来表示位置


334
00:19:50,757 --> 00:19:52,960 line:-2
你可以自己创建
CLPlacemark对象


335
00:19:53,093 --> 00:19:56,196 line:-2
或者你的app用的是MapKit
你可以从MapKit项目中获取


336
00:19:58,065 --> 00:20:00,267 line:-2
如果你是自己创建
CLPlacemark对象


337
00:20:00,601 --> 00:20:05,038 line:-1
一定要包括位置和邮政地址


338
00:20:06,340 --> 00:20:09,109 line:-1
如果你不知道坐标 就设为00


339
00:20:09,710 --> 00:20:12,212 line:-1
这样Siri就知道只有邮政地址


340
00:20:14,548 --> 00:20:17,117 line:-1
接下来就是预订的开始和结束时间


341
00:20:18,418 --> 00:20:19,319 line:-1
如你所见


342
00:20:20,254 --> 00:20:22,389 line:-1
该活动显示的开始和结束时间


343
00:20:22,589 --> 00:20:26,226 line:-1
是用户所在时区和预订所在时区


344
00:20:27,895 --> 00:20:31,331 line:-1
因此 请确保为预订设置本地时区


345
00:20:31,398 --> 00:20:34,134 line:-2
或者如果你的app
没有该功能的话 请使用UTC


346
00:20:35,869 --> 00:20:38,372 line:-2
有些预订类型有着清晰的
开始和结束时间


347
00:20:39,239 --> 00:20:40,741 line:-1
比如航班


348
00:20:40,807 --> 00:20:43,911 line:-2
你可以使用计划出发时间
和计划到达时间


349
00:20:45,212 --> 00:20:47,648 line:-1
对于住宿和汽车租赁等预订


350
00:20:47,814 --> 00:20:49,816 line:-1
就使用登记入住和退房时间


351
00:20:51,685 --> 00:20:54,621 line:-2
如果该预订没有特定的
结束时间 就设为无


352
00:20:55,422 --> 00:20:59,760 line:-2
这样Siri就会根据
预订类型使用来过滤


353
00:21:02,095 --> 00:21:03,363 line:-1
接下来是Notes部分


354
00:21:03,997 --> 00:21:06,600 line:-1
Siri使用Notes部分来提供


355
00:21:06,667 --> 00:21:09,136 line:-1
可能会对用户有用的


356
00:21:09,236 --> 00:21:10,537 line:-1
关于预订详情的更多信息


357
00:21:11,004 --> 00:21:13,574 line:-1
例如预订号码或座位信息


358
00:21:14,675 --> 00:21:16,743 line:-1
请确保填写所有


359
00:21:16,810 --> 00:21:17,945 line:-1
可能向用户显示的


360
00:21:18,312 --> 00:21:19,780 line:-1
预订详细信息


361
00:21:22,082 --> 00:21:25,919 line:-2
最后，Siri提供了一个直接从
日历到你的app的链接


362
00:21:26,753 --> 00:21:28,422 line:-1
点击即可启动你的app


363
00:21:28,622 --> 00:21:31,425 line:-2
这样它就可以显示更多
关于预订的信息


364
00:21:32,860 --> 00:21:34,494 line:-2
我们来看看在你的app中
处理这个问题


365
00:21:34,628 --> 00:21:35,829 line:-1
你需要知道什么


366
00:21:38,432 --> 00:21:39,766 line:-1
为了更好地理解启动app


367
00:21:40,100 --> 00:21:43,704 line:-2
我们回过头看看我们
在发送信息时的步骤


368
00:21:44,605 --> 00:21:47,908 line:-2
在刚刚的演示里
我们发送了一个预订项目


369
00:21:49,343 --> 00:21:52,145 line:-1
但现在我们假设有多个预订项目


370
00:21:52,779 --> 00:21:54,348 line:-1
比如往返航班


371
00:21:55,916 --> 00:21:58,018 line:-1
这样我们就有两趟航班


372
00:21:58,085 --> 00:21:59,853 line:-1
可能会共享一个预订编号


373
00:22:01,154 --> 00:22:03,390 line:-1
这样预订编号就不能用于


374
00:22:03,457 --> 00:22:06,059 line:-1
唯一标识特定预订项目了


375
00:22:07,794 --> 00:22:11,365 line:-1
因此你的app必须提供名为


376
00:22:11,732 --> 00:22:13,100 line:-1
项目参考的附加标识符


377
00:22:14,668 --> 00:22:18,505 line:-2
对于app的每个预订项
项目参考必须是唯一的


378
00:22:19,573 --> 00:22:22,042 line:-1
怎么构建项目参考完全取决于你


379
00:22:22,442 --> 00:22:25,946 line:-1
只要后面能够推断出它属于哪个预订


380
00:22:27,247 --> 00:22:30,083 line:-2
在这个例子中
我们通过组合共享预订编号


381
00:22:30,150 --> 00:22:31,985 line:-1
和特定航班号


382
00:22:32,219 --> 00:22:33,787 line:-1
来创建预订项目


383
00:22:37,824 --> 00:22:39,960 line:-1
然后我们将两个预订项目


384
00:22:40,093 --> 00:22:42,496 line:-2
添加至
INGetReservationDetailsIntent响应


385
00:22:43,163 --> 00:22:44,331 line:-1
完善发送信息


386
00:22:44,531 --> 00:22:47,367 line:-2
我们还需要创建
INGetReservationDetailsIntent


387
00:22:49,937 --> 00:22:50,971 line:-1
当我们创建Intent时


388
00:22:51,405 --> 00:22:54,575 line:-2
我们要告诉Siri
用户查看的是哪个预订


389
00:22:56,043 --> 00:22:58,178 line:-1
这由容器参考表示


390
00:22:59,613 --> 00:23:02,015 line:-1
在该例中 我们发送的是


391
00:23:02,216 --> 00:23:03,851 line:-1
两个属于同一预订的航班


392
00:23:04,484 --> 00:23:07,721 line:-1
我们将容器参考设置为共享预订编号


393
00:23:08,021 --> 00:23:10,757 line:-1
因为它唯一地标识了整个预订


394
00:23:12,926 --> 00:23:16,263 line:-1
最后我们将预订项目参考数组设为无


395
00:23:16,797 --> 00:23:18,432 line:-1
这当你启动app时才会使用


396
00:23:18,665 --> 00:23:21,602 line:-1
让它知道用户想要查看哪个预订


397
00:23:23,871 --> 00:23:24,805 line:-1
这就是信息发送


398
00:23:26,507 --> 00:23:28,509 line:-1
我们来看看启动app时


399
00:23:28,575 --> 00:23:29,576 line:-1
这些信息是如何利用的


400
00:23:31,945 --> 00:23:34,815 line:-2
当你的app启动
以显示预订详细信息时


401
00:23:35,015 --> 00:23:37,718 line:-2
它会以
INGetReservationDetailsIntent启动


402
00:23:39,052 --> 00:23:42,389 line:-1
这表示用户想要查看详细信息的预订


403
00:23:43,156 --> 00:23:44,024 line:-1
在该例中


404
00:23:44,791 --> 00:23:47,528 line:-2
我们启动该app
Intent表示用户


405
00:23:47,594 --> 00:23:50,497 line:-1
希望详细了解标识为B9C8的预订


406
00:23:51,665 --> 00:23:54,301 line:-1
如果该预订项目参考数组为无


407
00:23:54,701 --> 00:23:57,871 line:-2
你的app就会显示一个
全部预订的用户界面


408
00:23:58,772 --> 00:24:01,475 line:-2
在我们刚刚的例子中
就会显示两趟航班


409
00:24:03,243 --> 00:24:07,181 line:-2
用户可能还希望查看
有关特定预订的详细信息


410
00:24:07,614 --> 00:24:10,217 line:-1
比如前一个例子中的某一趟航班


411
00:24:11,385 --> 00:24:15,556 line:-2
在这种情况下
你的app就会以单个项目填充的


412
00:24:15,689 --> 00:24:17,224 line:-1
预订项目参考数组启动


413
00:24:18,325 --> 00:24:20,194 line:-2
它会是你在
INReservation对象中


414
00:24:20,260 --> 00:24:22,596 line:-1
设置的项目参考


415
00:24:23,864 --> 00:24:26,600 line:-2
在这种情况下
你的app应该会显示


416
00:24:26,667 --> 00:24:28,402 line:-1
只有特定预订的界面


417
00:24:31,772 --> 00:24:32,773 line:-1
在你启动app之前


418
00:24:32,906 --> 00:24:36,443 line:-2
我们会将Intent包括在INInteraction
和NSUserActivity对象中


419
00:24:36,910 --> 00:24:39,179 line:-2
有了活动类型
你就可以设置Intent名称


420
00:24:39,646 --> 00:24:42,115 line:-2
再用其启动app
就像前面的演示那样


421
00:24:45,586 --> 00:24:48,522 line:-2
我们了解了Siri如何利用
你发送的预订详情


422
00:24:48,689 --> 00:24:51,425 line:-2
以及该信息之后
会如何启动你的app


423
00:24:52,893 --> 00:24:54,895 line:-1
但是生活是不确定的


424
00:24:55,863 --> 00:24:58,298 line:-1
用户可能改变或者取消了他们的预订


425
00:24:58,699 --> 00:25:00,834 line:-1
而这可能是在你的app外发生的


426
00:25:01,068 --> 00:25:02,569 line:-1
比如网页


427
00:25:03,871 --> 00:25:06,106 line:-1
我们现在就来看看怎么处理这种情况


428
00:25:08,275 --> 00:25:11,678 line:-2
我们先看看什么时候
才是发送信息的时机


429
00:25:13,080 --> 00:25:16,750 line:-2
在该例中 用户正在浏览
特定预订的详情


430
00:25:17,851 --> 00:25:20,220 line:-1
这就是你发送信息的时机


431
00:25:20,754 --> 00:25:24,858 line:-2
就像我们刚刚在演示里看到的
我们会像用户发送通知


432
00:25:25,993 --> 00:25:29,596 line:-1
同时看到通知和预订详情


433
00:25:29,830 --> 00:25:32,065 line:-1
会是很好的用户体验


434
00:25:33,700 --> 00:25:35,969 line:-2
但是在app后台运行的时候
生活可能就会发生变化


435
00:25:36,870 --> 00:25:39,206 line:-1
而用户应该始终拥有最新信息


436
00:25:40,007 --> 00:25:43,076 line:-1
所以有新的预订可用时


437
00:25:44,178 --> 00:25:45,479 line:-1
应将其从后台发送


438
00:25:46,780 --> 00:25:49,349 line:-2
.在这种情况下 我们就不会
向用户发送通知


439
00:25:51,185 --> 00:25:53,287 line:-1
这就是你的app发送信息的时机


440
00:25:53,687 --> 00:25:55,923 line:-1
那么什么时候不该发送信息呢


441
00:25:58,058 --> 00:25:59,459 line:-1
在刚刚那个演示中


442
00:25:59,960 --> 00:26:01,094 line:-1
你的app不应该在


443
00:26:01,161 --> 00:26:03,597 line:-1
显示不相关的预订列表时发送


444
00:26:05,132 --> 00:26:08,402 line:-2
如果在这时发送通知
会使用户摸不着头脑


445
00:26:08,569 --> 00:26:09,870 line:-1
因为缺乏上下文


446
00:26:11,538 --> 00:26:13,106 line:-1
为了提供更好的体验


447
00:26:13,307 --> 00:26:16,677 line:-2
你的app不应该提供
会直接发送给Siri的的UI元素


448
00:26:18,779 --> 00:26:20,447 line:-1
在该例中 你的app应该在


449
00:26:20,514 --> 00:26:22,616 line:-1
预订详情正在显示的时候发送信息


450
00:26:24,484 --> 00:26:28,422 line:-2
接下来让我们看看预订
可能发生的一些变化


451
00:26:30,257 --> 00:26:33,627 line:-1
我们以用户选择航班座位为例


452
00:26:34,962 --> 00:26:36,830 line:-1
我们先发送了预订


453
00:26:37,998 --> 00:26:40,467 line:-1
这时座位信息还不可用


454
00:26:40,634 --> 00:26:42,236 line:-1
所以我们将座位属性设为无


455
00:26:43,303 --> 00:26:45,038 line:-1
现在用户选择了座位


456
00:26:45,873 --> 00:26:48,175 line:-1
我们就要发送更新的预订详情


457
00:26:48,609 --> 00:26:50,143 line:-1
也就是座位信息设置


458
00:26:51,512 --> 00:26:54,681 line:-2
请记住 项目参考在整个
预订生命周期中


459
00:26:54,781 --> 00:26:56,316 line:-1
都要保持不变


460
00:26:57,751 --> 00:27:00,420 line:-1
一旦发送 Siri就会将该信息


461
00:27:00,721 --> 00:27:03,056 line:-1
发送至有关位置 包括日历


462
00:27:04,491 --> 00:27:06,393 line:-1
现在我们就来说说取消


463
00:27:08,095 --> 00:27:10,531 line:-1
取消是一种特殊的修改方式


464
00:27:11,532 --> 00:27:12,432 line:-1
在该例中


465
00:27:12,733 --> 00:27:16,837 line:-1
我们已经以确认状态发送了此预订


466
00:27:17,871 --> 00:27:20,440 line:-1
但是用户取消了预订


467
00:27:21,074 --> 00:27:23,577 line:-1
所以我们还要发送更新信息


468
00:27:23,644 --> 00:27:25,012 line:-1
既取消状态设置


469
00:27:26,880 --> 00:27:30,184 line:-2
就像其他修改一样
项目参考要保持一致


470
00:27:31,752 --> 00:27:33,687 line:-1
这就是app处理这些情况的方式


471
00:27:33,754 --> 00:27:35,856 line:-2
它可能发生在预订
生命周期的任何时候


472
00:27:37,024 --> 00:27:39,393 line:-1
现在我们对今天讲的东西做一个总结


473
00:27:41,628 --> 00:27:42,863 line:-1
我们看到了利用


474
00:27:42,930 --> 00:27:45,465 line:-1
Siri活动建议API是多么容易


475
00:27:45,799 --> 00:27:49,503 line:-2
以及我们在预订生命周期内
如何给用户提供更好的体验


476
00:27:50,571 --> 00:27:52,372 line:-1
以下是三个主要内容


477
00:27:54,308 --> 00:27:57,711 line:-2
你的app应在向用户显示时
发送预订详细信息


478
00:27:58,111 --> 00:27:59,947 line:-1
或者是在后台接收时


479
00:28:01,748 --> 00:28:03,617 line:-2
确保在预订详细信息
发生变化时发送信息


480
00:28:03,684 --> 00:28:06,019 line:-1
来保证用户拥有最新信息


481
00:28:06,954 --> 00:28:09,756 line:-1
最后记得处理app启动


482
00:28:09,990 --> 00:28:14,494 line:-2
这样用户就可以在正确的时间
正确的地点回到app


483
00:28:17,030 --> 00:28:19,600 line:-2
有关更多信息
以及访问我们的示例代码


484
00:28:19,733 --> 00:28:22,102 line:-1
你可以访问开发者门户上的演讲链接


485
00:28:22,970 --> 00:28:25,405 line:-1
我们也有早些年的相关演讲


486
00:28:25,572 --> 00:28:27,107 line:-1
我也建议你听一听


487
00:28:28,475 --> 00:28:30,611 line:-1
谢谢大家 希望大家喜欢

