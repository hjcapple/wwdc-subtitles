1
00:00:00,506 --> 00:00:06,436
[音乐]


2
00:00:06,936 --> 00:00:08,616
>> 欢迎大家走进


3
00:00:08,616 --> 00:00:09,616
文档管理和快速查看的新功能


4
00:00:09,956 --> 00:00:11,286
我们有很多很棒的新 API


5
00:00:11,446 --> 00:00:12,946
用于管理文档和文件预览


6
00:00:12,946 --> 00:00:13,976
今天将与你们共享


7
00:00:16,046 --> 00:00:16,996
以下是我们在本次大会中


8
00:00:16,996 --> 00:00:18,166
将会讨论到的领域


9
00:00:19,076 --> 00:00:21,126
首先我们将展示


10
00:00:21,126 --> 00:00:22,366
你的 App 如何使用


11
00:00:22,366 --> 00:00:24,256
文档选择器访问目录及其内容


12
00:00:24,676 --> 00:00:27,056
我们还将展示


13
00:00:27,056 --> 00:00:28,836
你的 App 如何正确支持


14
00:00:28,836 --> 00:00:30,596
存储在外部 USB 驱动器


15
00:00:30,596 --> 00:00:31,246
或 SMB 服务器上的文件


16
00:00:32,586 --> 00:00:34,176
然后还可以查看


17
00:00:34,176 --> 00:00:35,426
你的 App 如何获取并显示


18
00:00:35,426 --> 00:00:36,086
丰富的缩略图


19
00:00:37,796 --> 00:00:39,356
另外你还将看到 


20
00:00:39,356 --> 00:00:40,616
App 如何通过快速查看


21
00:00:40,616 --> 00:00:42,676
为图像 PDF 和视频


22
00:00:42,676 --> 00:00:43,146
提供快速编辑支持


23
00:00:43,146 --> 00:00:46,586
我们可以很容易


24
00:00:46,706 --> 00:00:48,746
将你的 iOS App 移植到 macOS


25
00:00:48,746 --> 00:00:50,306
因为快速查看扩展 API


26
00:00:50,306 --> 00:00:51,306
现在是跨平台的


27
00:00:51,736 --> 00:00:54,246
最后我们将谈论


28
00:00:54,246 --> 00:00:56,656
如何在 Mac 上支持 iPad App


29
00:00:58,426 --> 00:00:59,986
那这个会议的受众是谁呢


30
00:01:00,256 --> 00:01:02,246
如果你正在编写一个新的 App 


31
00:01:02,246 --> 00:01:03,216
或者已经有了一个


32
00:01:03,216 --> 00:01:06,056
显示文档或执行文件操作的 App


33
00:01:06,056 --> 00:01:06,706
你就来对地方了


34
00:01:06,846 --> 00:01:08,726
你可以在这里学习支持


35
00:01:08,726 --> 00:01:10,226
存储在可移动驱动器


36
00:01:10,226 --> 00:01:13,416
如 USB 和 SMB 上文件的最佳实践


37
00:01:14,086 --> 00:01:15,446
可能还需要你的 App 


38
00:01:15,446 --> 00:01:16,886
以递归方式


39
00:01:16,886 --> 00:01:18,286
访问文件夹中多个文档


40
00:01:18,286 --> 00:01:20,156
并执行批处理文件操作


41
00:01:21,546 --> 00:01:22,726
如果你想了解更多


42
00:01:22,726 --> 00:01:24,096
关于显示文件缩略图的信息


43
00:01:24,096 --> 00:01:25,496
或者你想在 App 中


44
00:01:25,496 --> 00:01:26,946
提供简单的图像和视频编辑


45
00:01:26,946 --> 00:01:28,566
就请坚持看下去


46
00:01:29,766 --> 00:01:31,126
顺便说一下


47
00:01:31,126 --> 00:01:32,236
如果你还没有了解过


48
00:01:32,236 --> 00:01:34,846
你一定要看看 2018 年 WWDC 的


49
00:01:34,846 --> 00:01:38,296
《Managing Documents in Your iOS Apps》


50
00:01:38,296 --> 00:01:39,816
其中我们详细介绍了


51
00:01:40,176 --> 00:01:42,336
如何使用 UIDocumentBrowserViewController


52
00:01:42,416 --> 00:01:44,086
以及 UIDocumentPickerViewController


53
00:01:45,216 --> 00:01:46,746
还有一场会议


54
00:01:46,746 --> 00:01:48,296
如果你对在 iOS 和 macOS 上


55
00:01:48,456 --> 00:01:50,866
展示文件预览感兴趣的话


56
00:01:50,866 --> 00:01:51,896
我们强烈建议你


57
00:01:52,206 --> 00:01:54,006
看一下 2018 年 WWDC 中的


58
00:01:54,006 --> 00:01:56,286
《Quick Look Previews from the Ground Up》


59
00:01:56,786 --> 00:02:00,526
最需要的功能之一


60
00:02:00,526 --> 00:02:03,716
是访问整个目录及其内容


61
00:02:04,126 --> 00:02:05,616
我们真的很高兴


62
00:02:05,616 --> 00:02:06,906
你现在可以使用 iOS 13 实现了


63
00:02:07,846 --> 00:02:09,485
此外你 App 中的功能


64
00:02:09,485 --> 00:02:11,306
可能需要访问目录的内容


65
00:02:11,306 --> 00:02:13,636
以便读取 写入或创建文档


66
00:02:14,286 --> 00:02:15,626
例如图像编辑器


67
00:02:15,696 --> 00:02:16,836
需要对一批图像


68
00:02:16,836 --> 00:02:18,396
应用相同的更改


69
00:02:18,396 --> 00:02:20,216
这些图像将读取每个图像


70
00:02:20,216 --> 00:02:21,926
应用更改


71
00:02:21,926 --> 00:02:23,386
并在原始图像旁边保存新图像


72
00:02:23,826 --> 00:02:27,396
在 iOS 13 之前


73
00:02:27,396 --> 00:02:28,736
一个 App 可以通过


74
00:02:28,736 --> 00:02:30,216
UIDocumentPickerViewController


75
00:02:30,216 --> 00:02:31,886
访问其 App 之外的文件


76
00:02:32,126 --> 00:02:33,396
但是用户一次


77
00:02:33,396 --> 00:02:34,166
必须选择一个文件


78
00:02:34,956 --> 00:02:37,426
iOS 13 的新功能是 你的 App 可以提供一个


79
00:02:37,426 --> 00:02:38,976
UIDocumentPickerViewController


80
00:02:38,976 --> 00:02:40,386
让用户选择一个文件夹


81
00:02:40,606 --> 00:02:44,336
通过验证后  App 将被授予


82
00:02:44,336 --> 00:02:45,806
对目录及其所有内容的


83
00:02:45,806 --> 00:02:46,566
递归访问权限


84
00:02:47,376 --> 00:02:50,196
此外 你还可以设置


85
00:02:50,196 --> 00:02:51,976
显示在文档选取器上的默认目录


86
00:02:55,176 --> 00:02:56,526
现在我们来看一下


87
00:02:56,526 --> 00:02:57,976
如何做到这一点


88
00:02:57,976 --> 00:02:59,236
比如我们如何配置


89
00:02:59,236 --> 00:03:00,836
UIDocumentPickerViewController 


90
00:03:01,496 --> 00:03:03,296
若要允许选择文件夹


91
00:03:03,596 --> 00:03:05,136
请创建用仅包含


92
00:03:05,136 --> 00:03:07,126
kUTTypeFolder 类型的


93
00:03:07,126 --> 00:03:09,076
数组初始化的实例


94
00:03:09,076 --> 00:03:10,176
然后显示该实例


95
00:03:11,586 --> 00:03:13,316
要设置 UIDocumentPickerViewController


96
00:03:13,316 --> 00:03:14,676
实例的默认目录


97
00:03:14,676 --> 00:03:16,396
请设置其 directoryURL 属性


98
00:03:16,396 --> 00:03:18,246
然后显示


99
00:03:18,286 --> 00:03:22,046
现在让我们看看这个例子


100
00:03:22,326 --> 00:03:23,406
我们将展示


101
00:03:23,406 --> 00:03:25,326
如何枚举文件夹的内容


102
00:03:25,326 --> 00:03:26,586
不过你可以使用相同的示例


103
00:03:26,586 --> 00:03:28,036
在这里使用标准的文件管理 API


104
00:03:28,036 --> 00:03:29,006
来编写文件


105
00:03:30,466 --> 00:03:34,126
另外请确保使用 URL.start/stopAccessing


106
00:03:34,126 --> 00:03:36,806
SecurityScopedResource 调用


107
00:03:36,996 --> 00:03:39,066
并使用 NSFileCoordinator API 


108
00:03:39,066 --> 00:03:40,466
进行读写操作


109
00:03:40,536 --> 00:03:41,786
如示例中所示


110
00:03:45,986 --> 00:03:48,526
在 iOS 13 中


111
00:03:48,526 --> 00:03:49,546
用户可以控制哪些 App


112
00:03:49,546 --> 00:03:50,676
可以访问哪些文件夹


113
00:03:51,276 --> 00:03:53,136
此访问权限已列出


114
00:03:53,136 --> 00:03:54,596
可以在“隐私”中的


115
00:03:54,596 --> 00:03:56,336
“文件和文件夹”部分撤消


116
00:03:57,306 --> 00:04:00,916
请注意 由于用户可以随时


117
00:04:00,916 --> 00:04:01,976
撤消访问权限


118
00:04:01,976 --> 00:04:03,466
因此在尝试打开文档


119
00:04:03,466 --> 00:04:04,926
或枚举文件夹时


120
00:04:04,926 --> 00:04:06,166
需确保代码正常处理错误


121
00:04:06,606 --> 00:04:10,636
在此示例中


122
00:04:10,636 --> 00:04:11,756
你可通过存储书签数据


123
00:04:11,756 --> 00:04:17,016
然后使用 URL resolvingBookmarkData 选项调用


124
00:04:17,016 --> 00:04:19,755
重新创建 URL


125
00:04:19,926 --> 00:04:21,776
从而在 App 启动时


126
00:04:21,776 --> 00:04:22,176
保持对文件夹的持久访问


127
00:04:26,676 --> 00:04:29,166
在 iOS 13 中


128
00:04:29,166 --> 00:04:30,936
我们新增了对外部 USB 驱动器


129
00:04:31,056 --> 00:04:33,016
拇指驱动器和 SMB 服务器的支持


130
00:04:34,756 --> 00:04:37,936
支持格式化为 APFS HFS +


131
00:04:38,006 --> 00:04:40,046
FAT 和 ExFAT 的驱动器


132
00:04:42,516 --> 00:04:44,306
驱动器可以插入


133
00:04:44,306 --> 00:04:45,686
iPad Pro 上的 USB-C 接口


134
00:04:45,736 --> 00:04:47,956
也可以通过 SD 卡


135
00:04:47,956 --> 00:04:48,716
读卡器附件插入


136
00:04:49,976 --> 00:04:51,526
它们会自动列在


137
00:04:51,526 --> 00:04:53,286
文件 App 的侧边栏中


138
00:04:53,436 --> 00:04:54,416
或者列在带有


139
00:04:54,416 --> 00:04:55,996
UIDocumentPickerViewController


140
00:04:56,126 --> 00:04:57,256
或文档浏览器的 App 当中


141
00:05:00,046 --> 00:05:01,886
用户还可以使用


142
00:05:01,886 --> 00:05:03,376
与查找工具相同的键盘快捷方式


143
00:05:03,376 --> 00:05:05,296
或使用侧边栏菜单


144
00:05:05,296 --> 00:05:06,996
使用“连接到服务器”操作


145
00:05:07,046 --> 00:05:08,076
连接到 SMB 服务器


146
00:05:12,126 --> 00:05:13,206
只要 App 是使用 iOS 13 SDK


147
00:05:13,206 --> 00:05:14,716
或更高版本构建的


148
00:05:14,716 --> 00:05:15,776
UIDocumentBrowserViewController API


149
00:05:15,836 --> 00:05:17,286
或 UIDocumentPickerViewController API 的


150
00:05:17,286 --> 00:05:18,786
任何客户端


151
00:05:18,786 --> 00:05:23,586
都可以直接获得相同的支持


152
00:05:24,586 --> 00:05:26,066
但是你需要


153
00:05:26,066 --> 00:05:27,286
检查几个地方


154
00:05:27,286 --> 00:05:29,536
以确保你的 App 


155
00:05:29,536 --> 00:05:30,716
对 USB 和 SMB 有很好的支持


156
00:05:32,346 --> 00:05:34,616
有一些预设现已不再适用


157
00:05:35,386 --> 00:05:36,996
文件访问


158
00:05:36,996 --> 00:05:38,386
不再位于单个卷上


159
00:05:38,386 --> 00:05:39,466
因为它们现在


160
00:05:39,466 --> 00:05:41,466
可以存储在外部卷上


161
00:05:41,466 --> 00:05:42,346
如 USB 或 SMB 服务器


162
00:05:43,396 --> 00:05:45,096
如果 USB 驱动器拔出


163
00:05:45,096 --> 00:05:47,266
或与 SMB 服务器卷的


164
00:05:47,266 --> 00:05:48,516
网络连接丢失


165
00:05:48,516 --> 00:05:50,006
卷可能会消失


166
00:05:51,276 --> 00:05:52,826
磁盘访问速度可能


167
00:05:52,826 --> 00:05:54,146
比你过去预期的速度慢


168
00:05:55,136 --> 00:05:56,186
根据网络条件


169
00:05:56,186 --> 00:05:57,706
或 USB 设备的速度


170
00:05:57,706 --> 00:05:59,396
你假定的即时操作


171
00:05:59,396 --> 00:06:00,296
现在可能需要几秒钟


172
00:06:00,296 --> 00:06:02,546
甚至几分钟


173
00:06:03,556 --> 00:06:05,356
此外不要假设


174
00:06:05,356 --> 00:06:07,176
底层文件系统始终是


175
00:06:07,176 --> 00:06:08,926
APFS 或 HFS+


176
00:06:10,186 --> 00:06:12,163
那么这对你的 App 有何影响


177
00:06:14,456 --> 00:06:16,246
如果你需要将文件


178
00:06:16,246 --> 00:06:18,106
从一个位置移动到另一个位置


179
00:06:18,106 --> 00:06:20,866
请使用 API 中的 


180
00:06:21,066 --> 00:06:22,256
FileManager.moveItem 


181
00:06:22,256 --> 00:06:23,826
它负责处理跨卷移动文件


182
00:06:25,026 --> 00:06:26,546
过去移动和克隆操作


183
00:06:26,546 --> 00:06:28,036
一直很快


184
00:06:28,876 --> 00:06:30,336
在卷上移动时


185
00:06:30,336 --> 00:06:32,836
复制和删除操作可能会变慢


186
00:06:33,296 --> 00:06:36,176
如果使用 NSTemporaryDirectory


187
00:06:36,346 --> 00:06:37,866
保存文件的临时版本


188
00:06:37,866 --> 00:06:39,906
则应更新代码


189
00:06:39,906 --> 00:06:41,626
以根据写入文件的


190
00:06:41,626 --> 00:06:42,906
最终目标


191
00:06:42,906 --> 00:06:45,136
选择临时文件夹的位置


192
00:06:46,446 --> 00:06:48,776
你可以使用以下文件管理器


193
00:06:50,176 --> 00:06:52,156
userDomainMask properFor URL 中的


194
00:06:52,156 --> 00:06:54,336
itemReplacementDirectory 的


195
00:06:54,476 --> 00:06:56,816
文件管理器 URL 


196
00:06:56,946 --> 00:06:57,456
来执行此操作


197
00:06:58,426 --> 00:06:59,316
这将始终为你提供


198
00:06:59,316 --> 00:07:01,516
正确的临时目录来写入文件


199
00:07:02,076 --> 00:07:06,756
在过去 你的 App 可能会假设


200
00:07:06,756 --> 00:07:08,936
一个文件打开时永远不会消失


201
00:07:08,936 --> 00:07:10,356
这不再是真的


202
00:07:10,356 --> 00:07:12,106
因为 USB 驱动器可能被拔出


203
00:07:12,106 --> 00:07:14,296
SMB 服务器连接可能会中断


204
00:07:15,126 --> 00:07:16,516
这可能会导致


205
00:07:16,516 --> 00:07:18,276
App 在读取或写入文件内容时失败


206
00:07:19,216 --> 00:07:20,926
你的 App 应检查错误


207
00:07:20,926 --> 00:07:21,876
并正常失败


208
00:07:22,876 --> 00:07:24,446
我的一个建议是


209
00:07:24,446 --> 00:07:26,096
如果 App 无法写入文件


210
00:07:26,096 --> 00:07:28,126
它可以显示 UIDocumentPickerViewController


211
00:07:28,256 --> 00:07:32,516
让用户选择一个备用位置来保存文件


212
00:07:32,726 --> 00:07:34,186
读取或写入存储在


213
00:07:34,186 --> 00:07:35,986
USB 驱动器或远程 SMB 服务器上的


214
00:07:35,986 --> 00:07:38,496
文件可能会很慢


215
00:07:38,496 --> 00:07:39,546
因此需要确保


216
00:07:39,546 --> 00:07:41,736
在执行文件操作时 App 不会挂起


217
00:07:42,196 --> 00:07:45,286
而是始终在后台队列上


218
00:07:45,286 --> 00:07:45,526
执行文件系统操作


219
00:07:46,736 --> 00:07:47,946
我们还建议你


220
00:07:47,946 --> 00:07:50,076
添加 UI 作为活动指示器


221
00:07:50,076 --> 00:07:53,966
让用户知道正在发生什么


222
00:07:54,046 --> 00:07:55,456
并为用户提供


223
00:07:55,456 --> 00:07:56,756
取消操作的方法


224
00:07:57,876 --> 00:07:59,326
否则用户可能会觉得


225
00:07:59,326 --> 00:08:00,976
App 没有响应


226
00:08:01,426 --> 00:08:05,186
当文档存储在 USB 驱动器


227
00:08:05,186 --> 00:08:07,216
或远程 SMB 服务器上时


228
00:08:07,616 --> 00:08:09,686
LIFS 将被报告


229
00:08:09,686 --> 00:08:11,736
而非媒体格式化的文件系统


230
00:08:12,546 --> 00:08:13,606
很可能你的 App 


231
00:08:13,606 --> 00:08:15,406
不用担心底层的文件系统


232
00:08:16,046 --> 00:08:17,236
相反你应该


233
00:08:17,236 --> 00:08:18,766
检查文件系统功能


234
00:08:18,766 --> 00:08:20,396
以了解支持哪些


235
00:08:20,396 --> 00:08:20,906
文件系统操作


236
00:08:21,916 --> 00:08:23,676
LIFS 是一个


237
00:08:23,676 --> 00:08:24,986
文件系统抽象


238
00:08:24,986 --> 00:08:26,196
它不直接寻找它的存在


239
00:08:27,076 --> 00:08:28,786
要了解有关 LIFS 的更多信息


240
00:08:28,786 --> 00:08:30,076
我们建议你查看


241
00:08:30,076 --> 00:08:31,756
“文件系统中的新功能”会话


242
00:08:36,116 --> 00:08:38,176
iOS 13 中的新功能


243
00:08:38,176 --> 00:08:39,756
是在 UIDocumentBrowserViewController


244
00:08:39,756 --> 00:08:39,823
当中提供额外的


245
00:08:39,823 --> 00:08:41,395
自定义支持


246
00:08:41,556 --> 00:08:45,536
下面我们来看一下


247
00:08:45,536 --> 00:08:47,016
现在通过将


248
00:08:47,016 --> 00:08:48,486
shouldShowFileExtensions 属性设置为 true


249
00:08:48,486 --> 00:08:49,896
可以选择始终显示


250
00:08:49,896 --> 00:08:50,716
文件扩展


251
00:08:51,296 --> 00:08:54,066
现在还可以


252
00:08:54,066 --> 00:08:55,876
自定义创建文档按钮


253
00:08:55,876 --> 00:08:57,146
以通过设置


254
00:08:57,146 --> 00:08:58,356
defaultDocumentAspectRatio 属性


255
00:08:58,356 --> 00:09:00,646
来调整按钮图标的宽高比


256
00:09:01,626 --> 00:09:04,906
现在可以通过设置 localizedCreate


257
00:09:04,906 --> 00:09:05,826
DocumentActionTitle 属性


258
00:09:05,826 --> 00:09:07,466
来更改标题为 Text 的按钮


259
00:09:07,916 --> 00:09:10,206
接下来 Lyn 将介绍


260
00:09:10,206 --> 00:09:11,786
快速查看的新功能


261
00:09:14,476 --> 00:09:16,076
>> 在你的 App 中


262
00:09:16,076 --> 00:09:17,116
获取文件缩略图


263
00:09:17,386 --> 00:09:19,976
现在可以通过设置希望通过显示


264
00:09:19,976 --> 00:09:21,166
丰富的文件缩略图


265
00:09:21,166 --> 00:09:22,886
来增强 App 外观的开发者


266
00:09:24,476 --> 00:09:26,186
你可以有这样的东西


267
00:09:26,186 --> 00:09:29,786
但是这样会更好


268
00:09:31,556 --> 00:09:33,306
快速查看缩略图是一种


269
00:09:33,306 --> 00:09:34,956
新的跨平台框架


270
00:09:34,956 --> 00:09:36,666
用于检索文件 URL 的


271
00:09:36,666 --> 00:09:37,606
缩略图图像


272
00:09:38,276 --> 00:09:40,196
这是 iOS 上的新功能


273
00:09:40,196 --> 00:09:42,106
并取代了 macOS 上


274
00:09:42,106 --> 00:09:43,856
用于 QLThumbnail 的 C API 


275
00:09:44,656 --> 00:09:45,766
它还取代了


276
00:09:45,766 --> 00:09:47,936
NSURLThumbnailDictionaryKey


277
00:09:49,216 --> 00:09:51,326
iOS 和 macOS 为多种文件类型


278
00:09:51,326 --> 00:09:52,846
提供内置支持


279
00:09:52,986 --> 00:09:56,486
如图像 PDF 文本文件和视频等


280
00:09:56,806 --> 00:09:59,246
你还可以使用缩略图扩展


281
00:09:59,246 --> 00:10:00,486
为自己的文件类型


282
00:10:00,486 --> 00:10:01,626
提供支持


283
00:10:04,356 --> 00:10:05,696
快速查看缩略图


284
00:10:05,696 --> 00:10:06,936
是非用户界面框架


285
00:10:07,576 --> 00:10:09,526
我们默认 


286
00:10:09,526 --> 00:10:10,086
不导入 UIKit 或 AppKit


287
00:10:10,796 --> 00:10:12,526
我们可以不使用任何方法


288
00:10:12,526 --> 00:10:14,176
获取你的 CGImages 缩略图


289
00:10:14,176 --> 00:10:16,476
但你也可以分别通过


290
00:10:16,476 --> 00:10:18,836
显式链接 UIKit 或 AppKit 


291
00:10:18,836 --> 00:10:20,746
来获取 iOS 上的 UIImages 或


292
00:10:20,746 --> 00:10:22,016
macOS 上的 NSImages


293
00:10:23,226 --> 00:10:25,286
它是异步的


294
00:10:25,286 --> 00:10:26,206
因此在检索缩略图时


295
00:10:26,206 --> 00:10:28,706
不会阻塞


296
00:10:28,706 --> 00:10:30,366
并且它支持取消


297
00:10:30,366 --> 00:10:31,366
以防你最终决定


298
00:10:31,366 --> 00:10:31,896
不需要该缩略图


299
00:10:34,996 --> 00:10:37,086
我们来从整体概述开始


300
00:10:37,536 --> 00:10:39,336
要获取缩略图


301
00:10:39,336 --> 00:10:40,266
首先要创建一个


302
00:10:40,266 --> 00:10:42,626
QLThumbnailGenerator.Request 


303
00:10:42,626 --> 00:10:43,566
然后将其传递给


304
00:10:43,566 --> 00:10:46,316
QLThumbnailGenerator


305
00:10:46,316 --> 00:10:47,736
指定是否希望


306
00:10:47,736 --> 00:10:49,406
每次有新的缩略图表示时


307
00:10:49,406 --> 00:10:51,336
或仅在你请求的


308
00:10:51,336 --> 00:10:52,156
最佳表示完成时


309
00:10:52,156 --> 00:10:54,376
收到通知


310
00:10:54,416 --> 00:10:58,366
你可以请求


311
00:10:58,366 --> 00:10:59,806
不同的缩略图表现


312
00:10:59,926 --> 00:11:01,066
这将具有不同的


313
00:11:01,066 --> 00:11:02,636
质量和性能成本


314
00:11:04,066 --> 00:11:05,506
icon 是与该文件类型


315
00:11:05,506 --> 00:11:06,986
关联的通用图像


316
00:11:07,586 --> 00:11:08,716
这对于给定类型的


317
00:11:08,716 --> 00:11:10,016
所有文件都是相同的


318
00:11:10,436 --> 00:11:13,306
lowQualityThumbnail 是我们能够


319
00:11:13,306 --> 00:11:14,556
提供的更快的缩略图


320
00:11:14,556 --> 00:11:16,456
可能与你指定的尺寸


321
00:11:16,456 --> 00:11:18,066
不完全相同


322
00:11:19,026 --> 00:11:20,166
这通常来自缩略图的


323
00:11:20,166 --> 00:11:21,886
缓存版本


324
00:11:21,956 --> 00:11:23,636
或者可能是嵌入到


325
00:11:23,636 --> 00:11:24,776
文件本身中的缩略图


326
00:11:26,176 --> 00:11:27,956
最后一个表示类型 thumbnail


327
00:11:28,216 --> 00:11:30,836
是缩略图的完整质量版本


328
00:11:31,316 --> 00:11:32,886
与请求完全匹配


329
00:11:33,436 --> 00:11:35,676
这将花费最长的时间来生成


330
00:11:37,426 --> 00:11:38,986
为方便起见


331
00:11:38,986 --> 00:11:41,196
你还可以指定获取


332
00:11:41,196 --> 00:11:42,166
任何类型的可用缩略图


333
00:11:42,596 --> 00:11:46,426
创建 QLThumbnail 生成请求时


334
00:11:46,426 --> 00:11:48,296
你可以指定所需的大小


335
00:11:48,296 --> 00:11:51,376
比例和表示类型


336
00:11:51,866 --> 00:11:53,926
你可能只关心


337
00:11:53,926 --> 00:11:55,986
完整质量的缩略图


338
00:11:55,986 --> 00:11:58,726
或者你也可以使用图标或较低质量的版本


339
00:11:58,986 --> 00:12:00,886
最好指定适合你的


340
00:12:00,916 --> 00:12:02,476
所有表示类型


341
00:12:02,476 --> 00:12:04,496
因为并非所有三种类型


342
00:12:04,586 --> 00:12:06,876
都可用于给定的缩略图


343
00:12:09,786 --> 00:12:10,576
你将会得到一个


344
00:12:10,576 --> 00:12:12,386
QLThumbnailRepresentation 


345
00:12:13,096 --> 00:12:14,386
它将指定缩略图的


346
00:12:14,386 --> 00:12:16,346
类型 图标


347
00:12:16,346 --> 00:12:18,546
低质量或缩略图


348
00:12:18,546 --> 00:12:20,296
以及一个可以


349
00:12:20,296 --> 00:12:22,716
作为 CGImagecgimage 访问的图像


350
00:12:22,716 --> 00:12:24,096
或者如果在 iOS 上链接了


351
00:12:24,096 --> 00:12:26,876
UIKit 或在 macOS 上链接了 AppKit


352
00:12:26,876 --> 00:12:29,186
你可以分别获取 UIImage 或 NSImage


353
00:12:29,546 --> 00:12:32,246
要获得 QLThumbnailRepresentation


354
00:12:32,246 --> 00:12:34,396
请将缩略图请求


355
00:12:34,396 --> 00:12:37,326
传递给 QLThumbnailGenerator


356
00:12:37,676 --> 00:12:39,646
如果你只想获得


357
00:12:39,646 --> 00:12:41,696
最佳质量的缩略图


358
00:12:41,696 --> 00:12:43,296
请使用 generateBestRepresentation


359
00:12:43,916 --> 00:12:45,116
它将使用可以创建的


360
00:12:45,116 --> 00:12:46,626
最佳缩略图请求版本调用


361
00:12:46,626 --> 00:12:50,796
完成处理程序


362
00:12:50,796 --> 00:12:52,296
或者你可能更想


363
00:12:52,296 --> 00:12:54,336
通过提供 updateHandler 


364
00:12:54,336 --> 00:12:55,896
来获取增量更新


365
00:12:55,896 --> 00:12:57,396
以便生成


366
00:12:57,396 --> 00:13:00,206
灵活的可以调用的表示


367
00:13:00,676 --> 00:13:02,566
例如你可以使用它


368
00:13:02,566 --> 00:13:04,436
来快速更新 UI


369
00:13:04,506 --> 00:13:05,946
然后提高缩略图到达时


370
00:13:05,946 --> 00:13:08,256
所显示内容的质量


371
00:13:08,826 --> 00:13:13,026
这对缩略图检索来说已经足够了


372
00:13:13,146 --> 00:13:14,486
下面我们来谈谈


373
00:13:14,486 --> 00:13:16,496
如何使用快速查看编辑图像


374
00:13:16,496 --> 00:13:17,136
PDF 和视频


375
00:13:20,146 --> 00:13:21,886
快速查看提供了 API


376
00:13:21,886 --> 00:13:23,336
用来预览 iOS 上


377
00:13:23,336 --> 00:13:24,606
各种类型文件的文档


378
00:13:25,406 --> 00:13:26,616
它还允许你通过扩展


379
00:13:26,616 --> 00:13:28,156
为自己的文档


380
00:13:28,156 --> 00:13:29,646
提供自定义预览


381
00:13:31,116 --> 00:13:33,386
现在在 iOS 13 中


382
00:13:33,386 --> 00:13:35,186
我们还添加了使用 QLPreviewController 


383
00:13:35,346 --> 00:13:38,236
支持快速编辑图像 PDF 和视频


384
00:13:38,616 --> 00:13:42,516
QLPreviewController 


385
00:13:42,516 --> 00:13:43,956
是用来预览文件的


386
00:13:44,316 --> 00:13:46,366
如果只分配一个


387
00:13:46,366 --> 00:13:47,526
QLPreviewController 实例


388
00:13:47,526 --> 00:13:50,846
并在显示前设置数据源和委托


389
00:13:50,846 --> 00:13:51,486
就可以使用了


390
00:13:52,416 --> 00:13:53,686
为了进一步了解快速查看


391
00:13:53,686 --> 00:13:55,386
和 QLPreviewController


392
00:13:55,386 --> 00:13:56,586
我们强烈建议你


393
00:13:56,586 --> 00:13:59,036
查看我们在 2018 年发表的


394
00:13:59,036 --> 00:14:01,906
有关快速查看的 WWDC 演示文稿


395
00:14:02,486 --> 00:14:05,886
对于 iOS 13 的新功能


396
00:14:05,886 --> 00:14:07,376
QLPreviewController 


397
00:14:07,376 --> 00:14:09,016
还提供对标记的支持


398
00:14:09,426 --> 00:14:11,046
标记是你在预览文档和文件


399
00:14:11,046 --> 00:14:13,376
或编辑邮件附件时


400
00:14:13,666 --> 00:14:14,916
可用的编辑工具


401
00:14:15,426 --> 00:14:21,146
这适用于图像和 PDF


402
00:14:21,336 --> 00:14:22,746
QLPreviewController 


403
00:14:22,746 --> 00:14:25,186
还支持修剪和旋转视频


404
00:14:25,596 --> 00:14:28,086
要使用这些功能


405
00:14:28,086 --> 00:14:29,406
只需启用编辑模式


406
00:14:29,806 --> 00:14:33,836
你所要做的就是为预览项


407
00:14:33,836 --> 00:14:35,216
实现可选的


408
00:14:35,686 --> 00:14:37,416
委托方法编辑模式


409
00:14:37,866 --> 00:14:43,046
默认情况下编辑已禁用


410
00:14:43,046 --> 00:14:44,646
但可以基于每个项目启用它


411
00:14:45,166 --> 00:14:46,536
此委托方法允许你


412
00:14:46,536 --> 00:14:48,516
指定是否需要编辑功能


413
00:14:48,516 --> 00:14:50,556
以及如何处理


414
00:14:50,556 --> 00:14:52,286
生成的文件


415
00:14:52,816 --> 00:14:56,146
你可以让 QLPreviewController


416
00:14:56,146 --> 00:14:57,886
使用用户编辑的版本


417
00:14:57,886 --> 00:15:00,486
覆盖原始文件


418
00:15:00,706 --> 00:15:03,426
为此请从预览项的编辑模式


419
00:15:03,426 --> 00:15:05,666
返回 updateContents 


420
00:15:07,556 --> 00:15:09,246
如果需要对成功保存的


421
00:15:09,246 --> 00:15:11,156
编辑做出反应


422
00:15:11,156 --> 00:15:12,796
还可以实现可选的


423
00:15:12,796 --> 00:15:15,266
didUpdateContentsof 


424
00:15:17,806 --> 00:15:18,026
previewItem 方法


425
00:15:18,116 --> 00:15:19,816
或者你可能更倾向使用


426
00:15:19,816 --> 00:15:21,556
QLPreviewController 


427
00:15:21,556 --> 00:15:23,336
来创建正在预览的


428
00:15:23,336 --> 00:15:24,716
文件编辑副本


429
00:15:24,716 --> 00:15:25,226
并自行管理它们


430
00:15:25,826 --> 00:15:28,526
要执行此操作


431
00:15:28,526 --> 00:15:30,306
请从预览项的编辑模式


432
00:15:30,846 --> 00:15:32,796
返回 createCopy 


433
00:15:32,796 --> 00:15:35,226
并实施委托方法


434
00:15:35,316 --> 00:15:36,786
在修改后的内容 URL 中


435
00:15:36,786 --> 00:15:37,906
保存预览项目的已编辑副本


436
00:15:42,316 --> 00:15:44,456
macOS 上的快速查看


437
00:15:44,456 --> 00:15:45,056
扩展 API


438
00:15:46,556 --> 00:15:47,716
我们刚刚谈到了


439
00:15:47,716 --> 00:15:49,476
获取和使用


440
00:15:49,476 --> 00:15:50,476
缩略图和文件预览


441
00:15:51,476 --> 00:15:52,466
现在让我们谈谈


442
00:15:52,466 --> 00:15:54,046
如何为你自己的文件类型


443
00:15:54,046 --> 00:15:55,316
提供缩略图和预览


444
00:15:55,646 --> 00:15:58,406
一个 App 在 iOS 上


445
00:15:58,406 --> 00:15:59,936
可以实现快速查看


446
00:15:59,936 --> 00:16:01,626
缩略图和预览扩展


447
00:16:01,626 --> 00:16:03,416
为自己的文档提供


448
00:16:03,416 --> 00:16:05,086
系统范围的缩略图和预览支持


449
00:16:05,716 --> 00:16:06,626
现在 macOS 上也提供了


450
00:16:06,626 --> 00:16:09,286
相同的快速查看扩展 API


451
00:16:11,116 --> 00:16:12,806
缩略图在整个 macOS 


452
00:16:12,806 --> 00:16:14,946
和 iOS 中使用


453
00:16:14,946 --> 00:16:16,356
允许用户快速识别文件


454
00:16:17,176 --> 00:16:18,626
例如你可以在屏幕截图中


455
00:16:18,626 --> 00:16:20,306
看到 macOS 如何


456
00:16:20,306 --> 00:16:21,246
在访达中使用它们


457
00:16:21,506 --> 00:16:23,686
macOS 可以为许多常见的


458
00:16:23,686 --> 00:16:26,176
文件类型生成缩略图


459
00:16:26,176 --> 00:16:27,276
实现缩略图扩展允许你


460
00:16:27,276 --> 00:16:28,766
也为自己的文件类型


461
00:16:28,766 --> 00:16:30,126
提供缩略图


462
00:16:30,126 --> 00:16:31,996
以便它们可以在访达


463
00:16:31,996 --> 00:16:33,826
和缩略图可能显示的


464
00:16:33,826 --> 00:16:35,386
其他位置具有丰富的表示形式


465
00:16:35,946 --> 00:16:38,546
扩展 API 取代了旧的


466
00:16:38,546 --> 00:16:40,976
基于 CF 插件的生成器系统


467
00:16:41,116 --> 00:16:42,566
如果你有快速查看生成器


468
00:16:42,566 --> 00:16:44,876
请考虑尽快迁移


469
00:16:45,206 --> 00:16:47,866
我在这里说的快速查看扩展


470
00:16:47,866 --> 00:16:49,176
是一般意义上的


471
00:16:49,176 --> 00:16:50,756
因为缩略图扩展点


472
00:16:50,756 --> 00:16:51,936
来自快速查看缩略图


473
00:16:52,566 --> 00:16:53,996
这是之前从 iOS 上的


474
00:16:53,996 --> 00:16:55,466
快速查看框架中获得的


475
00:16:56,276 --> 00:16:57,516
如果你不需要 UIKit


476
00:16:57,516 --> 00:16:58,896
可能需要考虑


477
00:16:58,896 --> 00:17:00,126
从快速查看缩略图中导入它


478
00:17:00,126 --> 00:17:02,406
因为这将使扩展


479
00:17:02,406 --> 00:17:03,626
更加精简


480
00:17:06,116 --> 00:17:07,915
要创建缩略图扩展


481
00:17:07,996 --> 00:17:09,816
请使用缩略图扩展模板


482
00:17:09,816 --> 00:17:12,246
在 Xcode 项目中添加新目标


483
00:17:13,976 --> 00:17:15,586
设置扩展目标之后


484
00:17:15,586 --> 00:17:17,146
你将能实现


485
00:17:17,146 --> 00:17:21,026
QLThumbnailProvider 子类


486
00:17:21,126 --> 00:17:24,316
你可以使用 CG 上下文


487
00:17:24,316 --> 00:17:26,106
AppKit 上下文绘制缩略图


488
00:17:26,106 --> 00:17:28,415
也可以为图像提供文件 URL


489
00:17:31,116 --> 00:17:32,846
这是一个快速示例


490
00:17:32,846 --> 00:17:34,316
我们覆盖了为请求处理程序方法


491
00:17:34,316 --> 00:17:35,776
提供缩略图


492
00:17:36,206 --> 00:17:37,986
我们在 2017 年 WWDC 的


493
00:17:37,986 --> 00:17:39,466
《Building Great Document-based Apps in iOS 11》


494
00:17:39,466 --> 00:17:43,016
会议中广泛介绍了


495
00:17:43,016 --> 00:17:45,496
快速查看 API 的这一部分


496
00:17:46,016 --> 00:17:47,666
我们强烈建议你们查看一下


497
00:17:47,996 --> 00:17:50,106
简而言之你将获得一个


498
00:17:50,106 --> 00:17:52,006
QLFileThumbnailRequest 


499
00:17:52,006 --> 00:17:54,146
它将包含文件的 URL


500
00:17:54,356 --> 00:17:58,226
缩略图的最大和最小尺寸及其比例


501
00:17:58,766 --> 00:18:00,896
使用这些来创建


502
00:18:00,896 --> 00:18:02,466
符合这些规范的缩略图


503
00:18:04,306 --> 00:18:06,216
对于每个缩略图请求


504
00:18:06,216 --> 00:18:07,846
API 希望你创建一个


505
00:18:07,846 --> 00:18:10,006
QLThumbnailReply 


506
00:18:10,006 --> 00:18:11,286
用于生成缩略图


507
00:18:11,526 --> 00:18:13,476
将 QLThumbnailReply 


508
00:18:13,476 --> 00:18:14,716
传递给上面的完成处理程序块


509
00:18:18,346 --> 00:18:21,616
要在 macOS 上调试缩略图扩展


510
00:18:21,616 --> 00:18:22,436
可使用 QLManage


511
00:18:22,466 --> 00:18:24,506
如果你以前编写过


512
00:18:24,506 --> 00:18:26,096
快速查看生成器


513
00:18:26,096 --> 00:18:27,036
你可能会认识到这个工具


514
00:18:27,036 --> 00:18:29,066
在 Xcode 中构建


515
00:18:29,066 --> 00:18:30,746
并运行扩展目标


516
00:18:30,746 --> 00:18:32,106
以便在系统中注册你的扩展


517
00:18:32,856 --> 00:18:34,606
然后使用 QLManage 生成


518
00:18:34,606 --> 00:18:36,176
文件类型的缩略图


519
00:18:36,176 --> 00:18:37,976
并附加到 Xcode 中的扩展中


520
00:18:40,096 --> 00:18:41,866
预览文件扩展


521
00:18:42,196 --> 00:18:44,266
今年新推出的 macOS 


522
00:18:44,266 --> 00:18:46,286
快速查看还允许你通过


523
00:18:46,286 --> 00:18:48,276
实现预览扩展


524
00:18:48,276 --> 00:18:50,646
为自己的文件类型提供预览


525
00:18:51,956 --> 00:18:53,406
快速查看预览扩展


526
00:18:53,406 --> 00:18:54,946
已经存在


527
00:18:54,946 --> 00:18:55,966
以支持聚焦预览


528
00:18:56,326 --> 00:18:59,306
请参阅 WWDC 2017 的


529
00:18:59,306 --> 00:19:00,846
iOS 和 macOS 


530
00:19:00,846 --> 00:19:01,456
Core Spotlight 中的新功能


531
00:19:02,406 --> 00:19:03,596
今年我们还增加了


532
00:19:03,596 --> 00:19:04,826
对文件预览的支持


533
00:19:05,236 --> 00:19:07,906
使用扩展程序


534
00:19:07,906 --> 00:19:09,136
你现在可以直接提供


535
00:19:09,136 --> 00:19:10,196
显示预览的视图


536
00:19:11,146 --> 00:19:12,236
这与旧的快速查看生成器不同


537
00:19:12,236 --> 00:19:13,686
在这些生成器中


538
00:19:13,686 --> 00:19:15,596
你提供了供系统


539
00:19:15,596 --> 00:19:16,766
显示的数据或 URL


540
00:19:17,146 --> 00:19:19,436
新的扩展 API 


541
00:19:19,436 --> 00:19:20,556
可以让你更好地


542
00:19:20,556 --> 00:19:21,846
控制预览的外观


543
00:19:22,546 --> 00:19:23,966
我们建议你从旧的


544
00:19:23,966 --> 00:19:25,336
快速查看生成器中迁移


545
00:19:25,336 --> 00:19:27,606
因为它们在将来的版本中将被弃用


546
00:19:30,436 --> 00:19:32,206
要创建预览扩展


547
00:19:32,206 --> 00:19:33,826
请在项目中添加新目标


548
00:19:33,826 --> 00:19:36,186
然后选择“Quick Look Preview Extension”模板


549
00:19:38,756 --> 00:19:41,996
该 API 与 iOS 预览扩展相同


550
00:19:41,996 --> 00:19:44,886
可以看看看 2018 年的


551
00:19:44,886 --> 00:19:46,036
《Quick Look Previews from the Ground Up》


552
00:19:46,436 --> 00:19:48,646
快速总结一下


553
00:19:48,646 --> 00:19:49,766
你需要在 Info.plist 中的 


554
00:19:49,766 --> 00:19:51,006
QLSupportedContentTypes 中


555
00:19:51,006 --> 00:19:53,826
声明支持的 UTI 列表


556
00:19:54,966 --> 00:19:57,026
这必须与要预览的


557
00:19:57,026 --> 00:19:58,706
文件的 UTI 完全匹配


558
00:19:59,216 --> 00:20:01,726
不支持通过父 UTI 进行匹配


559
00:20:02,136 --> 00:20:03,986
该模板将提供一个视图控制器


560
00:20:03,986 --> 00:20:05,246
你可在在其中


561
00:20:05,246 --> 00:20:06,756
准备预览的内容


562
00:20:07,216 --> 00:20:10,366
下面是视图控制器模板的


563
00:20:10,366 --> 00:20:11,466
一个快速示例


564
00:20:12,176 --> 00:20:14,156
在 URL 上执行


565
00:20:14,156 --> 00:20:16,696
preparePreviewofFile 以准备视图控制器


566
00:20:16,996 --> 00:20:19,256
准备好后 调用完成处理程序


567
00:20:20,026 --> 00:20:21,556
显示预览的 QLPreviewView 


568
00:20:21,556 --> 00:20:23,096
将显示一个旋转轮


569
00:20:23,096 --> 00:20:24,476
直到调用好


570
00:20:24,476 --> 00:20:25,406
此完成处理程序为止


571
00:20:25,816 --> 00:20:27,046
因此需要尽快


572
00:20:27,046 --> 00:20:28,166
准备好预览


573
00:20:30,276 --> 00:20:32,176
请记住你的预览可以显示在


574
00:20:32,176 --> 00:20:34,036
任何 QLPreviewView 中


575
00:20:34,726 --> 00:20:36,166
可能是预览面板


576
00:20:36,336 --> 00:20:37,636
列视图侧边栏


577
00:20:37,876 --> 00:20:39,556
聚焦搜索或 


578
00:20:39,556 --> 00:20:41,236
QLPreviewView 的任何客户端


579
00:20:45,716 --> 00:20:47,546
要进行调试请使用 Xcode


580
00:20:47,546 --> 00:20:48,486
启动扩展目标


581
00:20:48,756 --> 00:20:51,146
注意 Xcode 在默认情况下


582
00:20:51,146 --> 00:20:52,616
将使用快速查看模拟器


583
00:20:53,076 --> 00:20:54,586
这有助于


584
00:20:54,586 --> 00:20:55,966
调试 Core Spotlight 预览


585
00:20:55,966 --> 00:20:57,386
这些预览也是可扩展的


586
00:20:57,386 --> 00:20:57,966
也可以提供支持


587
00:20:58,516 --> 00:21:00,796
要调试常规文件预览


588
00:21:00,796 --> 00:21:02,136
可以忽略模拟器并使用


589
00:21:02,136 --> 00:21:04,496
访达或 QLManage 调用预览


590
00:21:04,746 --> 00:21:05,976
只要预览扩展


591
00:21:05,976 --> 00:21:07,066
通过 Xcode 启动


592
00:21:07,066 --> 00:21:10,306
Xcode 就会自动附加到它


593
00:21:14,416 --> 00:21:16,036
让我们谈谈在 Mac 上


594
00:21:16,176 --> 00:21:17,936
支持 iPad App


595
00:21:17,936 --> 00:21:19,586
我们的文档处理 API 


596
00:21:19,586 --> 00:21:22,066
在 Mac 上的 iPad App 中受支持


597
00:21:22,066 --> 00:21:22,646
因此你可以将


598
00:21:22,646 --> 00:21:25,236
基于文档的 iOS App 带到 macOS


599
00:21:28,036 --> 00:21:30,316
对于 UIDocumentPickerViewController


600
00:21:30,456 --> 00:21:32,216
像在 iOS 上那样使用它


601
00:21:32,216 --> 00:21:33,946
用户会自动获得


602
00:21:33,946 --> 00:21:37,196
和体验到 macOS 特有的感觉


603
00:21:37,196 --> 00:21:38,786
具体来说


604
00:21:38,786 --> 00:21:41,066
.import 和 .open 模式显示


605
00:21:41,326 --> 00:21:43,736
NSOpenPanel


606
00:21:43,736 --> 00:21:45,306
.exportToService 和 .moveToService


607
00:21:45,306 --> 00:21:46,426
模式显示 NSSavePanel


608
00:21:48,296 --> 00:21:49,816
同样对于


609
00:21:49,816 --> 00:21:51,676
UIDocumentBrowserViewController


610
00:21:52,176 --> 00:21:53,706
用户将获得一种在 macOS 上


611
00:21:53,706 --> 00:21:54,656
基于文档的 App 的


612
00:21:54,656 --> 00:21:56,456
原生体验


613
00:21:56,826 --> 00:21:59,336
用户将在单独的窗口中


614
00:21:59,336 --> 00:22:00,716
获取 NSOpenPanel


615
00:22:00,716 --> 00:22:01,666
就像在 TextEdit 中一样


616
00:22:02,176 --> 00:22:04,406
由于 iOS 和 macOS 上的


617
00:22:04,406 --> 00:22:06,456
接口之间存在差异


618
00:22:06,456 --> 00:22:08,926
因此存在一些小的运行时间差异


619
00:22:09,606 --> 00:22:11,016
一个很好的例子是


620
00:22:11,016 --> 00:22:12,916
UIDocumentBrowserViewControllers 导航栏


621
00:22:12,916 --> 00:22:15,996
它在 macOS 上不存在


622
00:22:16,596 --> 00:22:17,776
有关如何处理


623
00:22:17,776 --> 00:22:19,286
这些特定情况的详细信息


624
00:22:19,286 --> 00:22:20,376
请查看文档


625
00:22:21,296 --> 00:22:23,106
在某些情况下


626
00:22:23,106 --> 00:22:25,206
你可以使用新的 API


627
00:22:25,356 --> 00:22:26,736
例如菜单栏 API


628
00:22:26,806 --> 00:22:27,576
来帮助你解决这些 UI 差异


629
00:22:30,196 --> 00:22:32,226
Mac 上的 iPad App


630
00:22:32,226 --> 00:22:34,186
也可以使用快速查看功能


631
00:22:34,356 --> 00:22:36,186
呈现 QLPreviewController 


632
00:22:36,186 --> 00:22:38,216
将在 macOS 上启动 QLPreviewPanel


633
00:22:38,216 --> 00:22:41,466
以提供更原始自然的 Mac 体验


634
00:22:42,436 --> 00:22:44,316
由于 QLPreviewPanel 


635
00:22:44,316 --> 00:22:45,306
是一个单独的窗口


636
00:22:45,306 --> 00:22:46,536
因此你呈现的视图控制器


637
00:22:46,536 --> 00:22:48,656
内容将是可见的


638
00:22:48,656 --> 00:22:49,696
但它将是非常棒的


639
00:22:49,696 --> 00:22:50,596
并且不会交互


640
00:22:52,436 --> 00:22:54,376
在 Mac 上测试 iPad App


641
00:22:54,376 --> 00:22:55,406
以确保它看起来很棒


642
00:22:58,096 --> 00:22:59,716
在 Mac 上的 iPad App 中


643
00:22:59,716 --> 00:23:01,946
要注意到 QLPreviewController 的限制


644
00:23:01,946 --> 00:23:03,706
即嵌入 QLPreviewController 的


645
00:23:03,706 --> 00:23:05,326
视图不完全受支持


646
00:23:05,326 --> 00:23:07,336
在这种情况下


647
00:23:07,336 --> 00:23:08,896
我们将提供缩略图


648
00:23:08,896 --> 00:23:09,976
而不是实时预览


649
00:23:13,046 --> 00:23:14,076
我们今天学到了什么


650
00:23:14,926 --> 00:23:16,046
首先我们向你展示了


651
00:23:16,046 --> 00:23:18,076
如何在 App 中


652
00:23:18,076 --> 00:23:20,066
利用 iOS 13 的新功能


653
00:23:20,066 --> 00:23:21,826
例如访问目录中的多个文件


654
00:23:22,116 --> 00:23:24,356
支持 USB 驱动器


655
00:23:24,356 --> 00:23:24,866
和 SMB 服务器


656
00:23:25,806 --> 00:23:27,526
然后我们了解了如何


657
00:23:27,526 --> 00:23:29,136
使用快速查看显示


658
00:23:29,136 --> 00:23:31,196
与文件 App 相同的丰富缩略图


659
00:23:31,196 --> 00:23:33,116
为图像和视频


660
00:23:33,116 --> 00:23:34,866
提供快速查看编辑支持


661
00:23:34,906 --> 00:23:36,396
并在 Mac 上提供


662
00:23:36,396 --> 00:23:37,856
带有现代扩展 API 的


663
00:23:37,856 --> 00:23:41,386
预览和缩略图 谢谢大家

