1
00:00:07,574 --> 00:00:11,411 line:0
大家好 我是Jared McGann
watchOS的工程经理


2
00:00:12,679 --> 00:00:16,015 line:-2
watchOS 5中 Apple发布了
新的Infograph表盘


3
00:00:16,082 --> 00:00:17,651 line:-1
带有图形元素


4
00:00:18,886 --> 00:00:21,655 line:-2
watchOS 6中的
图形元素有所改善


5
00:00:21,922 --> 00:00:23,023 line:-1
用新的调色 模式


6
00:00:24,892 --> 00:00:28,595 line:-2
任何带图形元素的表盘
都支持调色组件


7
00:00:29,196 --> 00:00:32,665 line:-2
下面几个例子就是
watchOS 6新的表盘样式


8
00:00:33,534 --> 00:00:36,870 line:-1
这些图形元素包括三种数据类型


9
00:00:36,937 --> 00:00:38,572 line:-1
仪表 文本 图形


10
00:00:39,273 --> 00:00:42,176 line:-1
系统改变了它们的色彩外观


11
00:00:42,743 --> 00:00:43,810 line:-1
我们分别来看


12
00:00:44,945 --> 00:00:47,314 line:-1
在色彩环境中 仪表显示为


13
00:00:47,381 --> 00:00:49,683 line:-1
纯色 而不是渐变色


14
00:00:49,750 --> 00:00:51,785 line:-1
（仪表的调色）


15
00:00:51,852 --> 00:00:54,054 line:-1
仪表的颜色由系统决定


16
00:00:54,121 --> 00:00:56,356 line:-1
根据用户选择的颜色


17
00:00:57,090 --> 00:00:58,659 line:-1
如果元素需要通过颜色


18
00:00:58,725 --> 00:01:00,794 line:-1
传递仪表上的信息


19
00:01:00,861 --> 00:01:01,962 line:-1
你就要重新考虑


20
00:01:02,029 --> 00:01:04,565 line:-1
如何将信息显示在元素中


21
00:01:06,099 --> 00:01:06,967 line:-1
（文本的调色）


22
00:01:07,034 --> 00:01:10,204 line:-1
文本在色彩环境中也是单色


23
00:01:10,571 --> 00:01:12,406 line:-1
它的颜色也是由系统决定的


24
00:01:12,472 --> 00:01:14,174 line:-1
根据用户选择的颜色


25
00:01:15,275 --> 00:01:17,911 line:-1
多色文本被简化成单色


26
00:01:18,445 --> 00:01:20,914 line:-1
如活动圆环所示


27
00:01:22,182 --> 00:01:23,250 line:-1
（图片的调色）


28
00:01:23,317 --> 00:01:26,987 line:-2
最后 在色彩环境中
图形颜色默认为不饱和


29
00:01:28,088 --> 00:01:31,658 line:-1
但我们有新的API提供替代图形


30
00:01:33,026 --> 00:01:33,961 line:-1
（数据提供程序）


31
00:01:34,027 --> 00:01:36,797 line:-1
在探索新API之前 我们退回一步


32
00:01:36,864 --> 00:01:38,765 line:-1
了解下数据提供程序


33
00:01:39,700 --> 00:01:42,736 line:-2
ClockKit
包括多个元素数据提供程序


34
00:01:43,337 --> 00:01:45,873 line:-2
这些程序管理
提供给ClockKit的数据


35
00:01:45,939 --> 00:01:47,674 line:-1
会在元素里展示


36
00:01:50,143 --> 00:01:52,679 line:-1
这是全彩图片提供程序


37
00:01:54,548 --> 00:01:56,917 line:-1
图片属性定义为全彩图片


38
00:01:56,984 --> 00:01:58,819 line:-1
由元素显示


39
00:02:00,354 --> 00:02:02,456 line:-2
然后是
accessibilityLabel属性


40
00:02:02,523 --> 00:02:05,792 line:-2
它是个简洁的标签
定义了图片的用途


41
00:02:06,660 --> 00:02:09,763 line:-1
如何将替代图片加入调色环境呢


42
00:02:10,898 --> 00:02:15,335 line:-2
WatchOS 6的
CLKFullColorImageProvider有新属性


43
00:02:15,402 --> 00:02:16,803 line:-1
tintedImageProvider


44
00:02:17,504 --> 00:02:18,672 line:-1
这是个可选项属性


45
00:02:18,739 --> 00:02:21,441 line:-1
可以单独将一个图形放入调色程序


46
00:02:21,508 --> 00:02:24,211 line:-1
如果不想降低全彩图片饱和度


47
00:02:25,212 --> 00:02:28,348 line:-2
这个属性的类型是
CLKImageProvider


48
00:02:29,016 --> 00:02:30,684 line:-1
选择这个类 是因为可以


49
00:02:30,751 --> 00:02:33,320 line:-1
同时提供单图形和双图形


50
00:02:33,387 --> 00:02:34,655 line:-1
给调色程序


51
00:02:37,057 --> 00:02:39,793 line:-2
下面来仔细看看
CLKImageProvider


52
00:02:40,093 --> 00:02:41,929 line:-1
从watchOS 2开始使用


53
00:02:42,863 --> 00:02:46,033 line:-1
首先是CLKFullColorImageProvider


54
00:02:46,099 --> 00:02:48,502 line:-1
它并不是CLKImageProvider的衍生


55
00:02:48,936 --> 00:02:50,737 line:-1
它们是完全不同的两个类


56
00:02:51,538 --> 00:02:53,807 line:-2
CLKImageProvider
这个类


57
00:02:53,874 --> 00:02:56,643 line:-1
管理元素中显示的模板图形


58
00:02:57,311 --> 00:03:00,681 line:-2
显示该元素的表盘
决定了图形的样式


59
00:03:00,747 --> 00:03:02,416 line:-1
以及使用什么颜色


60
00:03:04,284 --> 00:03:07,921 line:-2
第一个属性是单图形
就是单一模板图形


61
00:03:08,288 --> 00:03:09,923 line:-1
这是唯一必需的属性


62
00:03:11,758 --> 00:03:12,993 line:-1
下面是染色


63
00:03:13,493 --> 00:03:15,829 line:-1
在一些传统的元素环境中


64
00:03:15,896 --> 00:03:17,497 line:-1
该颜色是模板图片


65
00:03:17,564 --> 00:03:18,866 line:-1
在元素中的显示


66
00:03:19,466 --> 00:03:22,302 line:-2
而在图形环境中
染色是被忽略的


67
00:03:22,369 --> 00:03:24,271 line:-1
因为颜色由系统决定


68
00:03:24,338 --> 00:03:26,740 line:-1
并受用户色彩选择的影响


69
00:03:28,175 --> 00:03:30,010 line:-1
所以这里的双图形


70
00:03:30,077 --> 00:03:32,746 line:-1
包括了双重图片背景


71
00:03:32,813 --> 00:03:35,148 line:-1
和双重图片前景属性


72
00:03:38,285 --> 00:03:43,056 line:-2
传统元素在多彩环境中使用双图形
如图所示


73
00:03:43,824 --> 00:03:47,594 line:-2
而图形元素是在调色环境中
使用双图形


74
00:03:48,195 --> 00:03:52,232 line:-1
如适用 双图形优先于单图形


75
00:03:53,233 --> 00:03:55,669 line:-1
双图形包含一个前景图片


76
00:03:55,736 --> 00:03:57,604 line:-1
叠加在背景图片之上


77
00:03:58,272 --> 00:04:00,007 line:-1
两个图片都是模板图片


78
00:04:00,574 --> 00:04:03,677 line:-2
在传统元素中
色彩和着色属性


79
00:04:03,744 --> 00:04:07,014 line:-2
应用于背景图片
而白色用于前景图片


80
00:04:07,814 --> 00:04:11,018 line:-1
而在染色图形元素中 如上所述


81
00:04:11,084 --> 00:04:12,319 line:-1
着色是被忽略的


82
00:04:12,986 --> 00:04:15,856 line:-1
系统会决定前景和背景的颜色


83
00:04:15,923 --> 00:04:18,225 line:-1
基于用户的色彩选择


84
00:04:20,994 --> 00:04:23,497 line:-2
下面演示几个场景
看看图形如何显示在


85
00:04:23,564 --> 00:04:25,465 line:-1
染色图形元素中


86
00:04:26,433 --> 00:04:30,304 line:-1
首先是全彩图形的不饱和化


87
00:04:30,904 --> 00:04:33,340 line:-1
这里全彩图形的饱和度降低了


88
00:04:33,407 --> 00:04:35,309 line:-1
差不多为如右图中的灰度


89
00:04:37,678 --> 00:04:38,879 line:-1
代码上的操作


90
00:04:38,946 --> 00:04:41,949 line:-2
只要初始化
CLKFullColorImageProvider


91
00:04:42,015 --> 00:04:44,751 line:-2
无需tintedImageProvider
如图


92
00:04:45,519 --> 00:04:48,155 line:-2
若tintedImageProvider
属性为nil


93
00:04:48,222 --> 00:04:51,625 line:-1
系统显示不饱和的全彩图形


94
00:04:54,027 --> 00:04:54,862 line:-1
在其他场景中


95
00:04:54,928 --> 00:04:56,864 line:-1
可能需要替代图形


96
00:04:56,930 --> 00:04:58,298 line:-1
给调色环境


97
00:04:58,999 --> 00:05:01,335 line:-1
可能因为全彩图形的饱和度不够低


98
00:05:01,702 --> 00:05:05,005 line:-1
又或者某个标志的颜色不对


99
00:05:07,140 --> 00:05:10,143 line:-2
代码中要创建一个
CLKImageProvider


100
00:05:10,210 --> 00:05:12,479 line:-1
带上需要的单图片模板


101
00:05:12,913 --> 00:05:13,847 line:-1
然后提供


102
00:05:13,914 --> 00:05:16,850 line:-2
CLKFullColorImageProvider
初始化


103
00:05:17,184 --> 00:05:18,919 line:-1
和全彩图形


104
00:05:19,686 --> 00:05:20,988 line:-1
在全彩环境中


105
00:05:21,054 --> 00:05:23,223 line:-1
ClockKit会使用全彩图形


106
00:05:23,490 --> 00:05:27,094 line:-2
在调色环境中
CLKImageProvider提供的单图形


107
00:05:27,160 --> 00:05:28,161 line:-1
会被采用


108
00:05:31,064 --> 00:05:32,866 line:-1
值得注意的是 你也可以提供


109
00:05:32,933 --> 00:05:36,136 line:-2
同样的全彩图片
给tintedImageProvider


110
00:05:36,203 --> 00:05:39,273 line:-2
这个图片会被模板化
而不会被降低饱和度


111
00:05:39,806 --> 00:05:43,310 line:-2
这个技术被用于
许多标准的watchOS元素


112
00:05:46,146 --> 00:05:49,016 line:-1
最后 如果需要有替换性的双图形


113
00:05:49,082 --> 00:05:50,317 line:-1
在调色环境中


114
00:05:53,287 --> 00:05:56,190 line:-2
为此 需创建一个
CLKImageProvider


115
00:05:56,256 --> 00:05:58,892 line:-1
同时带有单图形和双图形模板


116
00:05:59,426 --> 00:06:00,594 line:-1
然后将这个对象带入


117
00:06:00,661 --> 00:06:03,864 line:-2
CLKFullColorImageProvider
初始化


118
00:06:04,131 --> 00:06:05,899 line:-1
和全彩图片


119
00:06:06,400 --> 00:06:08,969 line:-2
在染色环境中
ClockKit会决定


120
00:06:09,036 --> 00:06:11,939 line:-1
使用单图形还是双图形


121
00:06:14,007 --> 00:06:16,076 line:0
这个图表来自
Human Interface Guidelines


122
00:06:16,143 --> 00:06:18,412 line:0
涵盖了多种图形元素样式


123
00:06:20,914 --> 00:06:23,817 line:0
这是调色后的样子


124
00:06:26,019 --> 00:06:26,887 line:-1
（划重点）


125
00:06:26,954 --> 00:06:27,855 line:-1
谨记 ClockKit


126
00:06:27,921 --> 00:06:31,124 line:-1
在调色环境下 会改变元素的外观


127
00:06:32,025 --> 00:06:35,762 line:-1
色彩图形元素的颜色由系统决定


128
00:06:35,829 --> 00:06:38,131 line:-1
根据用户的色彩选择


129
00:06:38,832 --> 00:06:39,733 line:-1
最后


130
00:06:39,800 --> 00:06:43,403 line:-2
我们提供的新API可以让你
提供替代性模板图形


131
00:06:43,470 --> 00:06:45,506 line:-1
在调色环境中显示


132
00:06:46,974 --> 00:06:48,475 line:0
（更多信息）


133
00:06:48,542 --> 00:06:51,211 line:0
如果你没有用过
或者想要学习一下


134
00:06:51,278 --> 00:06:54,548 line:0
这些视频可能有用 网址
developer.apple.com

