1
00:00:07,016 --> 00:00:15,500
[ 音乐 ]


2
00:00:21,516 --> 00:00:26,616
[ 掌声 ]


3
00:00:27,116 --> 00:00:29,286
欢迎来到


4
00:00:29,286 --> 00:00:30,706
Getting to Know Swift Manager


5
00:00:31,476 --> 00:00:32,386
我是 Rick Ballard


6
00:00:32,856 --> 00:00:34,476
和我一起的是 Boris Buegling


7
00:00:34,726 --> 00:00:35,946
我们非常高兴


8
00:00:35,946 --> 00:00:37,356
能来给你们介绍


9
00:00:37,356 --> 00:00:38,926
Swift 的包管理器


10
00:00:38,926 --> 00:00:40,236
有时也叫 SwiftPM


11
00:00:40,236 --> 00:00:43,156
今天我们主要关注的


12
00:00:43,156 --> 00:00:44,516
就是这个开源项目


13
00:00:44,716 --> 00:00:46,126
而不是 Apple 的


14
00:00:46,126 --> 00:00:47,056
其他开发者工具


15
00:00:47,266 --> 00:00:49,466
今天要讲的内容有很多


16
00:00:50,906 --> 00:00:52,346
Swift 包管理器


17
00:00:52,346 --> 00:00:54,226
使得在 Swift 生态系统里


18
00:00:54,226 --> 00:00:56,986
开发和分配源代码变得更轻松


19
00:00:57,656 --> 00:00:58,576
今天我们就来讨论一下


20
00:00:58,576 --> 00:01:00,946
它的目标 设计


21
00:01:00,946 --> 00:01:03,876
还有一些对未来的展望


22
00:01:05,275 --> 00:01:06,836
首先 我想先说一下


23
00:01:06,836 --> 00:01:08,526
为什么我们决定


24
00:01:08,526 --> 00:01:10,126
为 Swift 项目


25
00:01:10,196 --> 00:01:11,586
创建一个新的包管理器


26
00:01:12,426 --> 00:01:14,186
我们将简单介绍它的使用方法


27
00:01:14,186 --> 00:01:16,276
然后深入讨论它的设计


28
00:01:16,276 --> 00:01:17,146
和特性


29
00:01:18,356 --> 00:01:19,396
我们还会讲到


30
00:01:19,396 --> 00:01:20,596
我们未来的打算


31
00:01:20,596 --> 00:01:22,706
最后会介绍


32
00:01:22,706 --> 00:01:24,586
SwiftPM 的开源过程 


33
00:01:24,666 --> 00:01:26,246
以及如果你感兴趣


34
00:01:26,246 --> 00:01:27,646
要如何加入


35
00:01:28,796 --> 00:01:30,186
我相信你们大多数人对


36
00:01:30,186 --> 00:01:31,486
包管理器都很熟悉 


37
00:01:31,986 --> 00:01:33,506
它们可以很好的用来


38
00:01:33,506 --> 00:01:34,276
分享和再利用代码


39
00:01:34,276 --> 00:01:36,146
但是我们为什么 


40
00:01:36,146 --> 00:01:37,946
要给 Swift 再做一个新的呢


41
00:01:39,576 --> 00:01:41,356
首先是因为


42
00:01:41,356 --> 00:01:42,646
Swift 是一个跨平台语言


43
00:01:42,906 --> 00:01:43,836
所以我们想 


44
00:01:43,836 --> 00:01:45,446
为你的 Swift 代码


45
00:01:45,446 --> 00:01:46,096
建一个跨平台工具


46
00:01:46,996 --> 00:01:48,376
这样你可以更容易的


47
00:01:48,376 --> 00:01:49,866
以一致的方式配置代码


48
00:01:49,866 --> 00:01:51,596
并且在所有 Swift


49
00:01:51,666 --> 00:01:52,936
支持的平台上使用


50
00:01:53,696 --> 00:01:55,386
SwiftPM 包括


51
00:01:55,386 --> 00:01:57,166
完整的构建系统


52
00:01:57,166 --> 00:01:58,856
让你只用一个工具


53
00:01:59,176 --> 00:02:02,976
就可以配置 构建 测试 甚至运行软件


54
00:02:07,556 --> 00:02:08,916
同时 我们还致力于


55
00:02:08,916 --> 00:02:10,485
让你能够将


56
00:02:10,485 --> 00:02:12,856
你的 Swift 库


57
00:02:12,856 --> 00:02:14,836
轻松分享给任何人 


58
00:02:15,116 --> 00:02:16,676
通过在 Swift 项目中


59
00:02:16,676 --> 00:02:18,976
提供规范的包管理器


60
00:02:18,976 --> 00:02:20,626
我们希望能


61
00:02:20,686 --> 00:02:21,516
为分发库的方式 


62
00:02:21,516 --> 00:02:22,706
建立一个公共标准


63
00:02:23,466 --> 00:02:24,676
这也有助于


64
00:02:24,676 --> 00:02:26,506
Swift 生态系统的发展  


65
00:02:26,546 --> 00:02:27,546
让 Swift 变得更好


66
00:02:28,006 --> 00:02:31,426
很多人可能有


67
00:02:31,626 --> 00:02:33,206
想要添加的特性


68
00:02:33,626 --> 00:02:34,756
但是我们对


69
00:02:34,756 --> 00:02:36,276
加入核心库的内容非常谨慎


70
00:02:36,276 --> 00:02:37,966
这样才能保证


71
00:02:37,966 --> 00:02:39,426
我们的 API 是精心呈现的


72
00:02:40,486 --> 00:02:41,966
优秀的包管理器


73
00:02:41,966 --> 00:02:43,446
可以较为容易的以包的形式配置


74
00:02:43,866 --> 00:02:45,976
想要添加的内容 而不是


75
00:02:45,976 --> 00:02:47,866
直接把它们放入核心库


76
00:02:48,576 --> 00:02:50,386
随着时间发展


77
00:02:50,386 --> 00:02:52,156
优质的内容


78
00:02:52,156 --> 00:02:53,486
在社区会越来越受欢迎


79
00:02:53,486 --> 00:02:55,066
并且逐渐标准化


80
00:02:56,516 --> 00:02:58,486
最后 


81
00:02:58,486 --> 00:03:00,496
建立 Swift 的包管理器


82
00:03:00,496 --> 00:03:01,746
让我们可以利用


83
00:03:01,746 --> 00:03:03,676
Swift 的功能和理念


84
00:03:04,716 --> 00:03:06,406
SwiftPM 本身是


85
00:03:06,406 --> 00:03:08,896
写在 Swift 里的 并且也是一个 Swift 包


86
00:03:09,656 --> 00:03:10,836
除此之外


87
00:03:10,836 --> 00:03:13,116
我们和 Swift 语言


88
00:03:13,156 --> 00:03:14,676
以及核心库项目


89
00:03:14,676 --> 00:03:16,806
通力合作


90
00:03:16,806 --> 00:03:18,076
为包管理器构建了很棒的功能


91
00:03:18,076 --> 00:03:19,576
能帮助你的 Swift 代码更好的发挥作用


92
00:03:21,006 --> 00:03:23,106
SwiftPM 是 


93
00:03:23,106 --> 00:03:25,306
Swift 开源项目的一部分  


94
00:03:25,306 --> 00:03:28,636
在 Swift.org 和 GitHub 上都可以访问


95
00:03:29,596 --> 00:03:30,636
Swift.org 上的


96
00:03:30,636 --> 00:03:32,886
Swift 包管理器部分


97
00:03:32,886 --> 00:03:34,286
是对其入门的好地方 


98
00:03:35,596 --> 00:03:37,456
如果你决定试着使用


99
00:03:37,456 --> 00:03:40,696
你可以在所有 Swift 工具链中找到它


100
00:03:40,696 --> 00:03:42,426
也可以从 Swift.org 下载


101
00:03:43,106 --> 00:03:44,946
当然 它也和 Swift 工具一起


102
00:03:44,946 --> 00:03:46,856
包含在 Xcode 的


103
00:03:46,856 --> 00:03:47,746
每一次发布中


104
00:03:49,166 --> 00:03:51,716
接下来讲解 如何使用 SwiftPM


105
00:03:52,166 --> 00:03:53,186
让我们邀请


106
00:03:53,186 --> 00:03:54,546
Boris Buegling 上台


107
00:03:54,546 --> 00:03:54,976
展示一下基本内容


108
00:03:55,516 --> 00:04:02,500
[ 掌声 ]


109
00:04:07,076 --> 00:04:08,376
谢谢 Rick


110
00:04:08,376 --> 00:04:10,366
让我们了解一下如何使用 SwiftPM


111
00:04:12,736 --> 00:04:15,096
SwiftPM 包含四个


112
00:04:15,096 --> 00:04:16,976
命令行工具 


113
00:04:16,976 --> 00:04:17,666
顶层是 Swift Command


114
00:04:18,466 --> 00:04:20,726
Swift Build 用于创建你的包  


115
00:04:21,065 --> 00:04:23,676
Swift Run 用于运行可执行文件


116
00:04:24,096 --> 00:04:26,466
Swift Test 用于进行测试


117
00:04:26,986 --> 00:04:29,326
Swift Package 用于对包进行


118
00:04:29,326 --> 00:04:33,176
各种非创建操作


119
00:04:33,316 --> 00:04:35,566
包储存在 git 储存区


120
00:04:35,986 --> 00:04:37,876
并且用 git 标签


121
00:04:37,916 --> 00:04:38,756
标示分支


122
00:04:41,656 --> 00:04:43,496
接下来 我会演示


123
00:04:43,496 --> 00:04:45,866
创建第一个 Swift 包


124
00:04:45,866 --> 00:04:47,416
是多么简单的事情


125
00:04:51,136 --> 00:04:54,026
从终端开始


126
00:04:54,026 --> 00:04:56,886
创建一个新的目录叫 helloworld


127
00:04:57,806 --> 00:04:59,656
这也是我们包的名字


128
00:05:00,386 --> 00:05:02,706
转到该目录


129
00:05:02,706 --> 00:05:06,656
并运行 swift package init


130
00:05:06,656 --> 00:05:08,046
--type executable


131
00:05:08,576 --> 00:05:12,166
这样 SwiftPM 就创建了


132
00:05:12,166 --> 00:05:14,006
一个基本包和结构


133
00:05:15,096 --> 00:05:18,306
让我们打开访达


134
00:05:18,306 --> 00:05:19,556
仔细看一下这个包


135
00:05:29,046 --> 00:05:30,426
这个是 Package.swift


136
00:05:30,426 --> 00:05:33,356
清单文件 用来描述包的结构


137
00:05:33,746 --> 00:05:34,656
有一个 README


138
00:05:34,656 --> 00:05:38,026
还有 Sources 目录


139
00:05:39,086 --> 00:05:40,266
其中的子文件夹就是


140
00:05:40,266 --> 00:05:41,176
我们的目标 helloworld


141
00:05:41,836 --> 00:05:43,736
以及可执行项的


142
00:05:43,736 --> 00:05:44,306
main.swift 文件


143
00:05:44,986 --> 00:05:46,286
同时还有一个 test 目录


144
00:05:46,486 --> 00:05:48,476
一会儿可以放入一些单元测试


145
00:05:49,186 --> 00:05:52,146
让我们回到终端


146
00:05:52,816 --> 00:05:58,296
输入 swift run


147
00:05:58,296 --> 00:06:00,126
来构建和运行这个包


148
00:06:00,466 --> 00:06:03,066
这个命令会编译该包


149
00:06:03,066 --> 00:06:05,056
链接可执行项


150
00:06:05,056 --> 00:06:06,266
于是我们看到了输出的 Hello，World！


151
00:06:06,766 --> 00:06:10,766
下面 我要换另外一个终端窗口


152
00:06:10,766 --> 00:06:12,566
在那里我准备了一个 复杂一点儿的包


153
00:06:12,706 --> 00:06:13,656
在接下来讲解关于


154
00:06:13,656 --> 00:06:16,926
SwiftPM 的基本概念时


155
00:06:17,116 --> 00:06:18,276
我们会使用它


156
00:06:19,026 --> 00:06:22,106
首先 让我们先运行一下


157
00:06:22,106 --> 00:06:23,346
看看它是干嘛的


158
00:06:24,236 --> 00:06:25,986
你可以看到


159
00:06:25,986 --> 00:06:27,546
它会在终端随机产生


160
00:06:27,986 --> 00:06:28,666
扑克牌花色和数字


161
00:06:35,076 --> 00:06:36,666
现在 我们可以回到


162
00:06:36,666 --> 00:06:39,816
幻灯片来说一说


163
00:06:39,866 --> 00:06:40,816
SwiftPM 的基本概念


164
00:06:47,436 --> 00:06:49,186
一个包分为三个


165
00:06:49,186 --> 00:06:51,006
主要部分 依赖


166
00:06:52,576 --> 00:06:57,206
目标和产品


167
00:06:57,736 --> 00:06:59,666
接下来我们会


168
00:06:59,666 --> 00:07:01,876
分别了解一下每一个部分


169
00:07:04,036 --> 00:07:05,836
依赖是当你


170
00:07:05,836 --> 00:07:08,336
开发功能的时候


171
00:07:08,336 --> 00:07:09,476
可使用的 Swift 包


172
00:07:10,146 --> 00:07:14,346
每个依赖提供


173
00:07:14,346 --> 00:07:16,736
一个或多个产品


174
00:07:17,256 --> 00:07:18,466
比如你的包可使用的库


175
00:07:19,046 --> 00:07:21,816
让我们来看一下


176
00:07:21,816 --> 00:07:23,286
包中的依赖


177
00:07:23,286 --> 00:07:26,216
在 Swift 清单文件里是什么样子


178
00:07:26,426 --> 00:07:27,816
每个依赖都有源位置


179
00:07:27,816 --> 00:07:31,486
而且有版本号


180
00:07:35,576 --> 00:07:37,436
目标是包的 


181
00:07:37,436 --> 00:07:38,646
基本构建模块


182
00:07:39,786 --> 00:07:42,076
一个目标描述


183
00:07:42,076 --> 00:07:44,736
如何将一组源文件


184
00:07:45,156 --> 00:07:47,606
构建到模块或者测试套件中


185
00:07:49,956 --> 00:07:51,856
目标可以依赖


186
00:07:51,856 --> 00:07:54,736
同个包里的其他目标 


187
00:07:56,456 --> 00:07:58,716
或者从其他包里


188
00:07:58,716 --> 00:08:00,106
导出的


189
00:08:00,106 --> 00:08:00,776
声明为依赖的产品


190
00:08:02,976 --> 00:08:04,656
产品可以由库


191
00:08:04,656 --> 00:08:08,396
执行


192
00:08:08,396 --> 00:08:09,476
产品是由一个或者多个目标的


193
00:08:09,476 --> 00:08:11,506
构件组成的


194
00:08:13,996 --> 00:08:16,166
包通过定义产品


195
00:08:16,166 --> 00:08:18,836
为其他包提供库


196
00:08:19,726 --> 00:08:22,536
默认情况下


197
00:08:22,536 --> 00:08:23,946
你不需要声明库的类型


198
00:08:23,946 --> 00:08:26,726
SwiftPM 会根据


199
00:08:26,726 --> 00:08:29,356
它的使用情况来帮你选择


200
00:08:30,446 --> 00:08:32,346
如果需要


201
00:08:32,346 --> 00:08:34,586
你可以特定声明一个库 


202
00:08:34,586 --> 00:08:34,976
是静态的或者动态的


203
00:08:35,586 --> 00:08:38,496
让我们看一下


204
00:08:38,496 --> 00:08:40,756
目标是如何


205
00:08:41,746 --> 00:08:42,066
清单中配置的


206
00:08:42,066 --> 00:08:43,996
在这个例子里 一共有三个目标


207
00:08:45,916 --> 00:08:47,866
第一个叫 libdealer


208
00:08:48,046 --> 00:08:51,646
它包含了我们主要功能的执行


209
00:08:52,496 --> 00:08:53,906
它有一个依赖


210
00:08:53,906 --> 00:08:55,036
是 DeckOfPlayingCards


211
00:08:55,946 --> 00:08:58,266
就是我们之前声明的


212
00:08:58,266 --> 00:08:59,096
依赖的产品


213
00:09:00,896 --> 00:09:03,206
第二个目标是 dealer 它需要依靠


214
00:09:03,206 --> 00:09:04,946
前一个目标来提供


215
00:09:04,946 --> 00:09:06,536
我们刚才运行的命令行工具


216
00:09:07,096 --> 00:09:10,756
最后 有一个测试目标


217
00:09:10,756 --> 00:09:12,126
它依赖于


218
00:09:12,126 --> 00:09:13,696
其他两个目标


219
00:09:13,696 --> 00:09:14,956
我们可以对功能进行单元测试


220
00:09:20,026 --> 00:09:21,436
在我们的样例包中


221
00:09:21,436 --> 00:09:23,206
我们还配置了两个产品


222
00:09:24,646 --> 00:09:26,676
第一个是库产品


223
00:09:27,206 --> 00:09:29,026
对应目标 libdealer


224
00:09:30,066 --> 00:09:31,806
它把我们的执行结果


225
00:09:31,806 --> 00:09:33,736
作为库提供给


226
00:09:33,736 --> 00:09:34,746
外部使用


227
00:09:35,186 --> 00:09:39,016
第二个是一个


228
00:09:39,016 --> 00:09:41,166
可执行目标


229
00:09:41,166 --> 00:09:43,916
它依靠 dealer 目标  


230
00:09:43,916 --> 00:09:45,526
为命令行提供可执行项


231
00:09:50,496 --> 00:09:52,686
最后我要展示一下


232
00:09:52,686 --> 00:09:53,886
如果运用包


233
00:09:53,886 --> 00:09:56,306
为本例添加一个新功能


234
00:09:59,836 --> 00:10:01,216
让我们换到一个新的 


235
00:10:01,216 --> 00:10:03,686
终端窗口然后打开


236
00:10:04,116 --> 00:10:05,806
package.swift 清单文件


237
00:10:05,806 --> 00:10:10,636
添加一个新依赖


238
00:10:10,896 --> 00:10:15,156
这次 我们添加的是 


239
00:10:15,156 --> 00:10:16,136
SwiftPM 本身


240
00:10:16,216 --> 00:10:19,296
正如 Rick 所说 


241
00:10:19,346 --> 00:10:20,426
它自己就是 Swift 包


242
00:10:20,856 --> 00:10:22,446
但是它并不提供一个稳定的API  


243
00:10:22,606 --> 00:10:23,686
这就是为什么我们


244
00:10:23,686 --> 00:10:25,486
要依赖于一个具体的版本号


245
00:10:27,516 --> 00:10:30,146
我们还希望能


246
00:10:30,146 --> 00:10:32,086
在 libdealer 目标中


247
00:10:32,086 --> 00:10:32,476
依赖于一个 SwiftPM 的产品


248
00:10:33,016 --> 00:10:34,206
叫做 Utility


249
00:10:34,546 --> 00:10:37,716
它有一个类


250
00:10:37,716 --> 00:10:40,146
叫做终端控制器


251
00:10:40,146 --> 00:10:42,026
让我们可以


252
00:10:42,216 --> 00:10:46,326
在终端中输出不同的颜色


253
00:10:46,476 --> 00:10:48,056
请记住


254
00:10:48,056 --> 00:10:49,986
这不是官方 Apple API


255
00:10:49,986 --> 00:10:51,196
我们只是用来演示


256
00:10:51,756 --> 00:10:54,906
让我们回到终端


257
00:10:57,136 --> 00:10:59,576
在演示前 


258
00:10:59,576 --> 00:11:01,156
我已经更改了代码


259
00:11:02,016 --> 00:11:03,496
来使用这个新依赖


260
00:11:03,876 --> 00:11:06,716
让我们试着运行


261
00:11:06,716 --> 00:11:07,226
看下结果


262
00:11:07,716 --> 00:11:09,926
正如你所见 


263
00:11:09,926 --> 00:11:11,346
输出是一样的


264
00:11:11,346 --> 00:11:12,946
但添加了一些颜色


265
00:11:12,946 --> 00:11:13,346
变得更有趣了


266
00:11:19,096 --> 00:11:20,856
现在我想展示最后一个演示


267
00:11:22,656 --> 00:11:24,986
就是 SwiftPM 怎么运行测试


268
00:11:25,526 --> 00:11:28,566
我们要使用 Swift Neo 包


269
00:11:29,096 --> 00:11:30,636
它是一个 Apple


270
00:11:31,006 --> 00:11:32,686
在春天发布的开源网络库


271
00:11:33,236 --> 00:11:37,986
我们使用 --parallel 选项


272
00:11:38,226 --> 00:11:39,366
运行 Swift Test 


273
00:11:40,806 --> 00:11:42,576
这让我们可以 进行平行测试


274
00:11:42,656 --> 00:11:44,656
这样就可以更快的得到测试结果


275
00:11:45,216 --> 00:11:47,036
还可以选择 filter 选项


276
00:11:49,396 --> 00:11:51,156
这样你就可以运行子测试


277
00:11:51,156 --> 00:11:53,926
基于单一结果进行迭代


278
00:11:57,736 --> 00:12:00,356
现在需要在几秒内


279
00:12:01,166 --> 00:12:05,236
再次编译我们的包并运行测试


280
00:12:09,136 --> 00:12:10,716
如你所见


281
00:12:10,716 --> 00:12:13,236
进度条很好


282
00:12:13,286 --> 00:12:14,536
测试结束的很快


283
00:12:14,536 --> 00:12:15,636
因为我们在平行运行它们


284
00:12:18,026 --> 00:12:19,836
让我们再次回到幻灯片


285
00:12:26,536 --> 00:12:27,776
接下来 我要讲一下 


286
00:12:27,776 --> 00:12:29,936
Swift 包管理器的设计


287
00:12:36,216 --> 00:12:38,606
SwiftPM 遵循 Swift 的理念


288
00:12:38,986 --> 00:12:40,706
快速 安全


289
00:12:40,706 --> 00:12:41,146
表达能力强


290
00:12:41,816 --> 00:12:44,736
它很安全


291
00:12:44,736 --> 00:12:46,426
因为构建环境是独立的


292
00:12:46,426 --> 00:12:48,546
而且构建项目不能运行任意指令


293
00:12:49,256 --> 00:12:52,116
而快速得益于


294
00:12:52,116 --> 00:12:53,896
使用了对大型依赖图


295
00:12:53,896 --> 00:12:54,886
可扩展的构建引擎


296
00:12:55,416 --> 00:12:58,526
表达能力强是因为 


297
00:12:58,636 --> 00:13:00,716
包清单文件使用的是 Swift 语言


298
00:13:01,426 --> 00:13:04,136
这也让你可以使用


299
00:13:04,136 --> 00:13:06,346
已经熟悉的编程语言


300
00:13:06,956 --> 00:13:11,346
接下来


301
00:13:11,346 --> 00:13:12,436
我会向你展示


302
00:13:12,436 --> 00:13:13,726
在创建 Swift 包时


303
00:13:13,726 --> 00:13:16,136
会遇到的各个步骤


304
00:13:16,766 --> 00:13:19,576
首先是配置


305
00:13:23,096 --> 00:13:25,126
就像刚才见到的 SwiftPM 的清单文件


306
00:13:25,126 --> 00:13:26,796
是基于 Swift 的


307
00:13:27,336 --> 00:13:28,906
使用 Swift 让它更加容易理解


308
00:13:28,906 --> 00:13:31,116
因为这样你不用学习任何


309
00:13:31,116 --> 00:13:32,136
新的语言


310
00:13:32,736 --> 00:13:34,646
而且我们还遵循了 


311
00:13:34,646 --> 00:13:36,876
Swift 的 API 设计准则 


312
00:13:36,876 --> 00:13:37,416
让你觉得更加熟悉


313
00:13:38,216 --> 00:13:40,216
这还让我们可以


314
00:13:40,216 --> 00:13:42,216
利用现有的


315
00:13:42,276 --> 00:13:47,086
为 Swift 写的工具 


316
00:13:47,086 --> 00:13:48,586
但是当编写你自己的清单时


317
00:13:48,586 --> 00:13:50,076
你还是应该使用声明式语法


318
00:13:50,076 --> 00:13:51,946
以避免副作用发生


319
00:13:53,236 --> 00:13:54,586
因为 SwiftPM 不能保证


320
00:13:54,586 --> 00:13:56,766
在什么时候或按什么频率


321
00:13:56,766 --> 00:13:59,406
评估你的源代码


322
00:14:00,316 --> 00:14:01,836
左手边


323
00:14:01,836 --> 00:14:03,846
这个例子就没有


324
00:14:03,846 --> 00:14:04,686
完全使用声明式


325
00:14:05,416 --> 00:14:06,886
我们看不到


326
00:14:06,886 --> 00:14:09,656
生成的名字


327
00:14:09,656 --> 00:14:11,526
而它在包里面出现了好几次


328
00:14:12,076 --> 00:14:15,736
相反 在右边就是一个


329
00:14:15,736 --> 00:14:17,486
运用字符串常量的


330
00:14:17,486 --> 00:14:18,406
声明式清单文件


331
00:14:18,666 --> 00:14:20,356
很容易理解 


332
00:14:20,746 --> 00:14:21,726
目标是什么


333
00:14:23,556 --> 00:14:25,526
如你所见


334
00:14:25,526 --> 00:14:27,086
不使用声明式语法


335
00:14:27,086 --> 00:14:28,056
会让你的清单


336
00:14:28,056 --> 00:14:29,596
对你和你的用户而言


337
00:14:29,596 --> 00:14:29,976
更难理解


338
00:14:33,146 --> 00:14:35,226
源文件被放在磁盘上


339
00:14:35,296 --> 00:14:36,786
在包中以每个目标命名的


340
00:14:36,786 --> 00:14:38,806
文件夹下


341
00:14:39,426 --> 00:14:40,846
这样就可以上手


342
00:14:40,846 --> 00:14:43,216
并且让包


343
00:14:43,246 --> 00:14:46,336
使用一个常见结构


344
00:14:46,516 --> 00:14:47,796
让你可以更快的导航


345
00:14:50,856 --> 00:14:52,496
包管理器和其他构建工具


346
00:14:52,496 --> 00:14:54,506
总是关注


347
00:14:55,036 --> 00:14:56,696
哪些是用户


348
00:14:56,696 --> 00:14:58,636
指定编写的


349
00:14:58,636 --> 00:15:00,256
哪些是由包管理器


350
00:15:00,256 --> 00:15:00,976
应用的惯例


351
00:15:06,046 --> 00:15:07,586
正如之前所讲


352
00:15:07,586 --> 00:15:09,126
源文件是自动从


353
00:15:09,126 --> 00:15:10,616
盘里的惯例位置提取的


354
00:15:10,616 --> 00:15:12,746
这样你可以很容易的


355
00:15:12,746 --> 00:15:14,286
添加或者移除源文件


356
00:15:14,286 --> 00:15:15,936
而不需要编辑


357
00:15:16,006 --> 00:15:17,316
包清单文件


358
00:15:19,496 --> 00:15:21,096
但是产品和目标


359
00:15:21,656 --> 00:15:23,326
需要指定配置


360
00:15:23,326 --> 00:15:26,376
这样可以更简单的


361
00:15:26,376 --> 00:15:28,436
理解这个包和它的定义


362
00:15:28,676 --> 00:15:31,506
而无需与盘的布局 进行对照


363
00:15:32,816 --> 00:15:33,876
同时 客户仅仅通过看清单


364
00:15:33,876 --> 00:15:36,346
就很容易明白


365
00:15:36,346 --> 00:15:38,846
这个包提供的是什么内容


366
00:15:42,236 --> 00:15:44,756
SwiftPM 同时支持 


367
00:15:44,756 --> 00:15:45,926
用其他语言创建源代码


368
00:15:45,926 --> 00:15:47,766
比如 C C++


369
00:15:47,766 --> 00:15:49,456
或者 Objective-C


370
00:15:50,156 --> 00:15:52,276
并且可以与现有代码整合


371
00:15:53,456 --> 00:15:54,826
但是请注意


372
00:15:54,826 --> 00:15:56,516
我们不支持在同一个目标里


373
00:15:56,946 --> 00:15:58,646
把这些语言和 Swift 混用


374
00:15:59,086 --> 00:16:03,266
接下来 我们看一下


375
00:16:03,366 --> 00:16:04,646
依赖和版本号


376
00:16:07,916 --> 00:16:10,006
为了确保你的包


377
00:16:10,006 --> 00:16:12,116
能够很好的进行错误修补


378
00:16:12,116 --> 00:16:14,136
而不是频繁混乱


379
00:16:14,356 --> 00:16:16,306
Swift 包需要坚持语义版本


380
00:16:17,606 --> 00:16:19,186
这是一个常用标准


381
00:16:19,346 --> 00:16:20,656
把具体语义 


382
00:16:20,656 --> 00:16:22,246
与每个版本数的部分


383
00:16:22,246 --> 00:16:23,246
联系起来


384
00:16:25,376 --> 00:16:27,236
主要版本意味着


385
00:16:27,276 --> 00:16:29,996
破坏性改变


386
00:16:30,146 --> 00:16:31,936
需要客户更新代码


387
00:16:33,196 --> 00:16:34,756
这些改变包括


388
00:16:34,756 --> 00:16:36,516
删除现有类型


389
00:16:36,996 --> 00:16:38,566
删除信息


390
00:16:38,566 --> 00:16:39,236
或者改变签名


391
00:16:40,166 --> 00:16:42,066
同时包括


392
00:16:42,066 --> 00:16:45,296
反向不兼容错误修补


393
00:16:45,296 --> 00:16:48,366
或者对现有 API 的行为


394
00:16:48,366 --> 00:16:50,066
做出的重大改变


395
00:16:50,896 --> 00:16:52,406
次要版本是指


396
00:16:52,406 --> 00:16:55,646
以反向兼容的形式


397
00:16:55,646 --> 00:16:56,006
添加的功能


398
00:16:57,046 --> 00:16:58,456
比如添加一个新的


399
00:16:58,456 --> 00:17:00,106
方法或者类型


400
00:17:00,996 --> 00:17:02,896
最后 补丁版本是指


401
00:17:02,896 --> 00:17:04,465
当你做反向兼容错误修补时


402
00:17:04,465 --> 00:17:06,736
需要增加的数字


403
00:17:08,276 --> 00:17:10,776
这让客户可以


404
00:17:10,776 --> 00:17:13,536
可以得到错误修复


405
00:17:13,536 --> 00:17:17,695
而不用担心破坏源代码


406
00:17:17,816 --> 00:17:21,296
SwiftPM 在开始构建前


407
00:17:21,296 --> 00:17:23,246
需要确定包图中所有包的


408
00:17:23,246 --> 00:17:24,056
具体版本


409
00:17:24,705 --> 00:17:26,526
我们要使用叫


410
00:17:26,526 --> 00:17:27,756
依赖解析的过程


411
00:17:28,716 --> 00:17:30,796
它可以让 SwiftPM 


412
00:17:30,796 --> 00:17:32,376
查看所有对包的指定要求


413
00:17:33,456 --> 00:17:37,516
并找出和它们兼容的


414
00:17:37,516 --> 00:17:40,146
最新版本


415
00:17:40,216 --> 00:17:41,396
让我们再来看一下


416
00:17:41,396 --> 00:17:42,926
SwiftPM 在这个过程中


417
00:17:42,926 --> 00:17:44,836
都做了些什么


418
00:17:44,836 --> 00:17:45,306
还用刚才的演示


419
00:17:47,136 --> 00:17:49,676
dealer 包有两个


420
00:17:49,676 --> 00:17:51,066
直接的依赖


421
00:17:51,476 --> 00:17:53,796
一个是 SwiftPM 本身


422
00:17:53,796 --> 00:17:58,136
另外一个是 DeckOfPlayingCards


423
00:17:58,276 --> 00:17:59,666
SwiftPM 会分析


424
00:17:59,666 --> 00:18:01,456
这些直接依赖的版本 


425
00:18:02,366 --> 00:18:03,666
第一个一目了然 


426
00:18:03,666 --> 00:18:05,086
因为我们


427
00:18:05,086 --> 00:18:06,536
指定了一个版本


428
00:18:07,886 --> 00:18:09,336
写在了标签中


429
00:18:10,446 --> 00:18:12,866
第二个 我们使用了 from 语法


430
00:18:13,286 --> 00:18:14,986
意味着我们


431
00:18:14,986 --> 00:18:17,826
对次要和补丁部分进行更新


432
00:18:18,356 --> 00:18:21,766
本例中 最后得到的


433
00:18:21,896 --> 00:18:24,046
是 3.1.4 标签


434
00:18:24,596 --> 00:18:28,566
整个过程都是递归的


435
00:18:29,206 --> 00:18:30,876
接下来 SwiftPM


436
00:18:30,876 --> 00:18:33,296
查看所有直接依赖的传递依赖


437
00:18:33,726 --> 00:18:34,716
PM 没有其他的依赖了


438
00:18:34,716 --> 00:18:37,146
所以没有其他什么可做的了


439
00:18:37,706 --> 00:18:39,686
但是 DeckOfPlayingCards


440
00:18:39,796 --> 00:18:41,236
依赖于 fisher-yates 和


441
00:18:41,236 --> 00:18:42,346
playing-card 包


442
00:18:42,916 --> 00:18:47,426
SwiftPM 需要再次解析


443
00:18:47,426 --> 00:18:49,176
这些包的版本


444
00:18:49,576 --> 00:18:50,976
对 fisher-yates 包来说 


445
00:18:51,066 --> 00:18:52,966
方法是一样的


446
00:18:52,966 --> 00:18:55,576
因为我们使用的还是 from 语法


447
00:18:56,666 --> 00:18:57,906
在这里的


448
00:18:57,906 --> 00:18:59,626
标签结果是 2.2.5


449
00:19:00,146 --> 00:19:02,716
对 playing-card 包


450
00:19:02,986 --> 00:19:04,976
我们使用的是 upToNextMinor 语法


451
00:19:05,446 --> 00:19:06,866
意味着我们


452
00:19:06,866 --> 00:19:08,316
只更新补丁部分


453
00:19:09,566 --> 00:19:10,466
如果你想对依赖更保守一点


454
00:19:10,466 --> 00:19:11,786
只进行错误修补


455
00:19:11,786 --> 00:19:14,576
那么你应该使用这种语法


456
00:19:15,216 --> 00:19:17,786
在这里的


457
00:19:17,786 --> 00:19:21,916
标签结果是 3.0.2


458
00:19:22,066 --> 00:19:23,626
最后 当考虑目标时


459
00:19:23,626 --> 00:19:26,486
SwiftPM 需要


460
00:19:26,576 --> 00:19:28,456
把要求的产品


461
00:19:28,456 --> 00:19:30,606
和我们解析的包匹配


462
00:19:31,186 --> 00:19:32,556
让我们看一下演示中的


463
00:19:32,556 --> 00:19:34,996
dealer 目标 


464
00:19:34,996 --> 00:19:36,696
如你所见  


465
00:19:36,696 --> 00:19:39,176
Utility 产品是由


466
00:19:39,176 --> 00:19:40,346
SwiftPM 包提供的


467
00:19:41,476 --> 00:19:43,116
包的其他部分


468
00:19:43,786 --> 00:19:45,186
提供其他产品


469
00:19:45,646 --> 00:19:50,156
依赖解析之后 


470
00:19:50,156 --> 00:19:52,106
解析结果被保存在


471
00:19:52,106 --> 00:19:53,236
package.resolved 文件里


472
00:19:53,816 --> 00:19:56,106
这个文件的目的是


473
00:19:56,106 --> 00:19:57,556
让你可以把你的


474
00:19:57,606 --> 00:19:59,086
解析版本分享给


475
00:19:59,086 --> 00:20:01,076
团队其他人或者 


476
00:20:01,576 --> 00:20:03,496
继续集成基础结构


477
00:20:03,496 --> 00:20:05,896
这样你就可以得到 可依赖的构建结果


478
00:20:05,896 --> 00:20:07,436
并且你可以选择


479
00:20:07,436 --> 00:20:10,976
什么时候更新依赖


480
00:20:11,046 --> 00:20:12,536
当你想更新时


481
00:20:12,536 --> 00:20:14,406
运行 Swift Package Update 就可以


482
00:20:15,366 --> 00:20:19,896
请注意 包含 package.resolved 的


483
00:20:19,936 --> 00:20:21,286
是最顶层的包


484
00:20:22,176 --> 00:20:24,626
如果有传递依赖包含


485
00:20:24,626 --> 00:20:26,606
package.resolve 文件


486
00:20:26,606 --> 00:20:28,506
它会被依赖解析忽略


487
00:20:30,776 --> 00:20:32,206
接下来让我们看一下


488
00:20:32,206 --> 00:20:36,796
包的构建


489
00:20:36,796 --> 00:20:38,446
SwiftPM 使用 llbuild


490
00:20:38,446 --> 00:20:39,846
作为基础构建引擎


491
00:20:40,526 --> 00:20:42,146
llbuild 是一套构建 


492
00:20:42,146 --> 00:20:43,156
构建系统的库


493
00:20:43,726 --> 00:20:45,146
建立在通用目标和


494
00:20:45,146 --> 00:20:47,546
可重复利用的构建引擎之上


495
00:20:47,956 --> 00:20:49,836
这样我们可以进行


496
00:20:49,836 --> 00:20:52,206
更快也更准确的增量构建


497
00:20:53,056 --> 00:20:54,926
Xcode 的新构建系统


498
00:20:54,926 --> 00:20:55,536
也使用该引擎


499
00:20:56,096 --> 00:21:00,606
这也是 Swift 开源项目的一部分


500
00:21:02,796 --> 00:21:04,806
独立的软件开发


501
00:21:04,876 --> 00:21:06,266
再加上详细声明的依赖


502
00:21:06,266 --> 00:21:10,686
保证了


503
00:21:10,686 --> 00:21:11,776
即使有的包要求复杂


504
00:21:11,776 --> 00:21:13,476
也可以安全可靠地


505
00:21:13,476 --> 00:21:15,736
在不同环境下构建和使用


506
00:21:17,016 --> 00:21:18,376
SwiftPM 不会把包


507
00:21:18,376 --> 00:21:19,596
以全局形式安装到系统


508
00:21:19,786 --> 00:21:21,506
它只允许你


509
00:21:21,506 --> 00:21:23,956
使用你指明依赖的包


510
00:21:25,166 --> 00:21:29,116
我们还利用了构建沙盒


511
00:21:29,116 --> 00:21:30,526
这样在构建时 就不会


512
00:21:30,526 --> 00:21:32,106
把内容写入文件系统的任意位置


513
00:21:33,546 --> 00:21:36,216
SwiftPM 不允许


514
00:21:36,216 --> 00:21:37,676
执行任意命令


515
00:21:37,676 --> 00:21:39,056
或者外壳脚本


516
00:21:40,246 --> 00:21:41,326
这让我们可以


517
00:21:41,326 --> 00:21:44,016
完全了解你的构建图


518
00:21:44,396 --> 00:21:46,396
和所有的输入输出


519
00:21:46,396 --> 00:21:49,366
进行快速又准确的增量构建


520
00:21:50,166 --> 00:21:52,486
因为我们知道


521
00:21:52,486 --> 00:21:53,326
你所有的依赖


522
00:21:53,946 --> 00:21:56,726
正如我之前演示时所说 


523
00:21:56,726 --> 00:21:59,496
SwiftPM 也支持测试


524
00:22:00,076 --> 00:22:02,716
它建立在 XCTest 框架上


525
00:22:02,716 --> 00:22:03,306
你应该已经很熟悉了


526
00:22:03,916 --> 00:22:07,136
我们支持平行测试


527
00:22:07,136 --> 00:22:08,876
这样你可以更快的得到测试结果


528
00:22:10,036 --> 00:22:12,766
我们还支持测试过滤 


529
00:22:12,766 --> 00:22:13,856
这样你可以运行一系列


530
00:22:13,886 --> 00:22:15,566
子测试并基于同一结果


531
00:22:15,566 --> 00:22:15,936
进行迭代


532
00:22:16,496 --> 00:22:20,816
因为我们在扩展 SwiftPM


533
00:22:20,816 --> 00:22:21,726
我们考虑到了


534
00:22:21,726 --> 00:22:23,776
工作流程功能


535
00:22:23,776 --> 00:22:25,116
让你可以在命令行


536
00:22:25,116 --> 00:22:27,526
进行所有的开发


537
00:22:27,716 --> 00:22:29,376
这个功能就是编辑模式


538
00:22:30,246 --> 00:22:32,876
它可以重写某个特定包所有的


539
00:22:32,876 --> 00:22:34,986
传递事件


540
00:22:34,986 --> 00:22:37,186
它创建了一个本地副本


541
00:22:37,386 --> 00:22:40,626
这样可以进行临时编辑


542
00:22:40,626 --> 00:22:41,766
而对传递依赖的


543
00:22:41,766 --> 00:22:43,326
调整可以被测试


544
00:22:43,806 --> 00:22:44,996
而不用把提前转给


545
00:22:44,996 --> 00:22:46,836
包图中所有的包


546
00:22:51,036 --> 00:22:53,396
分支依赖允许


547
00:22:53,396 --> 00:22:54,826
在没有严格版本要求的情况下   


548
00:22:54,826 --> 00:22:56,346
依赖包


549
00:22:56,626 --> 00:22:58,146
当你在同时


550
00:22:58,146 --> 00:23:00,076
开发好几个包时 这个很有用


551
00:23:01,276 --> 00:23:02,396
这是只针对开发的功能


552
00:23:02,396 --> 00:23:04,816
所以当你发布标签之前


553
00:23:04,816 --> 00:23:06,446
你需要调整到


554
00:23:06,706 --> 00:23:10,786
特定版本的依赖


555
00:23:10,986 --> 00:23:12,636
本地包让你可以


556
00:23:12,636 --> 00:23:14,526
直接从文件系统


557
00:23:14,526 --> 00:23:17,296
使用包 而不是从 Git 存储库


558
00:23:17,806 --> 00:23:19,056
这很有用


559
00:23:19,056 --> 00:23:22,876
可以让你在初始创建中


560
00:23:22,876 --> 00:23:24,816
创建多个包


561
00:23:27,936 --> 00:23:29,566
最后一个话题是


562
00:23:29,566 --> 00:23:33,176
使用 SwiftPM 和 Swift 语言的新版本


563
00:23:33,746 --> 00:23:37,766
每个新 Swift 版本 


564
00:23:37,766 --> 00:23:39,156
会产生一个新版本的


565
00:23:39,156 --> 00:23:40,866
package.swift 清单 API


566
00:23:41,796 --> 00:23:43,146
上一个版本 API 


567
00:23:43,146 --> 00:23:45,876
还可以使用


568
00:23:45,876 --> 00:23:47,366
这样你可以利用新的源工具


569
00:23:47,556 --> 00:23:48,716
而不需要更新你的包


570
00:23:48,716 --> 00:23:52,316
或者失去对现有包的访问


571
00:23:53,576 --> 00:23:55,156
采用新的 API


572
00:23:55,626 --> 00:23:57,676
是独立于


573
00:23:57,676 --> 00:23:59,466
将你的包源代码


574
00:23:59,466 --> 00:24:00,546
更改到新的 Swift 语言版本的


575
00:24:01,146 --> 00:24:05,546
若要指定使用的 API 具体是哪个版本 


576
00:24:05,546 --> 00:24:08,006
我们要在 package.swift


577
00:24:08,006 --> 00:24:09,476
清单文件的顶层


578
00:24:10,526 --> 00:24:12,846
使用 Swift 工具版本指令


579
00:24:13,446 --> 00:24:15,306
它可以指定


580
00:24:15,306 --> 00:24:16,476
用来处理给定清单所需的


581
00:24:16,476 --> 00:24:19,266
Swift 工具的


582
00:24:19,266 --> 00:24:20,226
最低版本要求


583
00:24:20,686 --> 00:24:24,056
每个包还可以声明


584
00:24:24,176 --> 00:24:25,356
它用来编译源代码的


585
00:24:25,356 --> 00:24:28,646
Swift 语言版本


586
00:24:29,536 --> 00:24:31,186
这是一个列表


587
00:24:31,186 --> 00:24:32,436
通过使用编译指令


588
00:24:32,436 --> 00:24:34,216
你可以对于自己同一版本的包


589
00:24:34,216 --> 00:24:36,846
你可以支持多个版本的 Swift


590
00:24:37,816 --> 00:24:39,256
一个包图可以是


591
00:24:39,256 --> 00:24:41,826
很多不同语言版本的包的集合


592
00:24:44,456 --> 00:24:45,866
今天讲了很多


593
00:24:45,866 --> 00:24:48,136
SwiftPM 如何工作的


594
00:24:48,136 --> 00:24:49,516
接下来 让我们再次


595
00:24:49,516 --> 00:24:51,746
请 Rick 上台来讲一下


596
00:24:51,746 --> 00:24:52,476
未来的展望


597
00:24:53,516 --> 00:24:58,626
[ 掌声 ]


598
00:24:59,126 --> 00:24:59,946
谢谢 Boris


599
00:25:01,286 --> 00:25:02,416
Boris 向你们展示了现在 


600
00:25:02,416 --> 00:25:04,856
可以做什么 但其实


601
00:25:04,856 --> 00:25:06,136
还有很多潜力


602
00:25:06,586 --> 00:25:08,426
SwiftPM 还是一个新项目 


603
00:25:08,426 --> 00:25:09,716
有很多成长空间 


604
00:25:11,216 --> 00:25:13,396
Swift 使用了一个


605
00:25:13,396 --> 00:25:14,986
开放演化的过程


606
00:25:15,206 --> 00:25:17,956
意味着任何人 包括你们都可以贡献想法


607
00:25:18,926 --> 00:25:19,796
如果你想得到一些启发


608
00:25:19,796 --> 00:25:21,596
我们也愿意分享一些


609
00:25:21,596 --> 00:25:23,736
我们的想法


610
00:25:23,736 --> 00:25:25,136
虽然它们还没有形成计划


611
00:25:25,946 --> 00:25:27,086
我们分享这些想法


612
00:25:27,086 --> 00:25:29,956
为了让你看到 Swift 包管理器的潜力


613
00:25:30,276 --> 00:25:32,276
也很希望能得到


614
00:25:32,276 --> 00:25:33,926
你们的反馈评论和想法 


615
00:25:33,926 --> 00:25:36,706
帮助我们推进这个产品


616
00:25:38,216 --> 00:25:39,636
我今天要讲的


617
00:25:39,806 --> 00:25:41,266
想法分为四个


618
00:25:41,266 --> 00:25:42,106
不同的主题


619
00:25:43,256 --> 00:25:44,396
第一个应该就是


620
00:25:44,396 --> 00:25:45,806
让 Swift 包管理器


621
00:25:45,806 --> 00:25:47,756
和其他工具融合


622
00:25:47,756 --> 00:25:50,366
帮助你发布


623
00:25:50,366 --> 00:25:52,756
包的新版本和配置它们的产品


624
00:25:53,726 --> 00:25:55,806
支持比 SwiftPM


625
00:25:55,886 --> 00:25:57,606
如今能构建的更复杂的包


626
00:25:57,606 --> 00:25:59,606
最后是在包的


627
00:25:59,606 --> 00:26:02,646
发现和信任上的展望


628
00:26:02,986 --> 00:26:05,896
因为 SwiftPM 命令行


629
00:26:05,896 --> 00:26:07,726
体验非常重要


630
00:26:07,726 --> 00:26:09,036
我们希望确保


631
00:26:09,036 --> 00:26:11,026
SwiftPM 能和其他工具融合


632
00:26:11,026 --> 00:26:12,386
比如开发环境


633
00:26:12,676 --> 00:26:14,316
自动化等等


634
00:26:15,706 --> 00:26:16,846
我们已经通过


635
00:26:16,846 --> 00:26:18,096
SwiftPM 基于库的结构  


636
00:26:18,096 --> 00:26:20,466
打下了一个基础


637
00:26:21,356 --> 00:26:22,726
SwiftPM 如今还没有


638
00:26:22,726 --> 00:26:25,076
稳定的 API 


639
00:26:25,076 --> 00:26:26,296
但是对于那些同


640
00:26:26,296 --> 00:26:28,186
SwiftPM 一起改变的工具 


641
00:26:28,186 --> 00:26:30,686
现在已经可以使用和添加了


642
00:26:32,256 --> 00:26:33,646
如果你愿意


643
00:26:33,646 --> 00:26:35,156
在你的开发工具里


644
00:26:35,156 --> 00:26:36,956
为 SwiftPM  构建支持 


645
00:26:36,956 --> 00:26:38,446
我们非常欢迎你的贡献和讨论


646
00:26:38,856 --> 00:26:40,786
我们希望让 SwiftPM 成为


647
00:26:40,786 --> 00:26:43,196
开发工具繁荣的生态系统中的一部分


648
00:26:43,476 --> 00:26:46,666
最近在 Swift 论坛上


649
00:26:46,666 --> 00:26:48,596
我们看到的一些请求是


650
00:26:48,596 --> 00:26:50,406
寻找可以用自动工具


651
00:26:50,406 --> 00:26:52,276
编辑 package.swift 清单的方法 


652
00:26:52,276 --> 00:26:53,946
而不需要


653
00:26:53,946 --> 00:26:55,796
让用户总是直接


654
00:26:55,796 --> 00:26:56,966
编辑源代码


655
00:26:57,746 --> 00:26:59,166
我们认为让 SwiftPM


656
00:26:59,166 --> 00:27:00,536
支持这个是可行的 


657
00:27:00,876 --> 00:27:03,196
可能会通过使用 libSyntax 实现


658
00:27:04,056 --> 00:27:05,926
libSyntax 是一个 


659
00:27:05,926 --> 00:27:07,296
在 Swift 开源项目中


660
00:27:07,296 --> 00:27:08,856
开发的库


661
00:27:08,856 --> 00:27:11,256
让你更容易的


662
00:27:11,256 --> 00:27:13,536
在别的工具上理解和使用 


663
00:27:13,536 --> 00:27:14,336
Swift 语法


664
00:27:15,476 --> 00:27:17,546
Boris 刚才讲到过


665
00:27:17,546 --> 00:27:19,556
你应该为 package.swift 清单


666
00:27:19,636 --> 00:27:21,236
采用声明式语法


667
00:27:21,526 --> 00:27:22,986
这是另外一个原因


668
00:27:22,986 --> 00:27:25,006
这会让 SwiftPM 可以 


669
00:27:25,006 --> 00:27:26,526
更容易的


670
00:27:26,526 --> 00:27:28,076
理解你的清单


671
00:27:28,076 --> 00:27:29,706
并作出自动调整


672
00:27:29,706 --> 00:27:31,106
比如添加新的依赖


673
00:27:31,106 --> 00:27:32,486
或者目标


674
00:27:32,996 --> 00:27:36,286
SwiftPM 还有很多空间


675
00:27:36,286 --> 00:27:39,016
来添加新的功能 帮助


676
00:27:39,016 --> 00:27:40,176
你发布新版本


677
00:27:40,176 --> 00:27:42,596
并部署它们的产品


678
00:27:43,916 --> 00:27:45,776
现在 如果你想


679
00:27:45,776 --> 00:27:46,996
发布一个包的新版本


680
00:27:47,346 --> 00:27:49,056
你需要手动用 Git 标注 


681
00:27:49,056 --> 00:27:52,976
如果你想检查发布的标签


682
00:27:52,976 --> 00:27:54,096
也要直接使用Git


683
00:27:55,356 --> 00:27:56,986
我们可以添加新功能


684
00:27:57,146 --> 00:27:58,956
来自动化这一过程


685
00:27:58,956 --> 00:28:00,786
执行额外的杂务工作


686
00:28:00,786 --> 00:28:02,676
验证和其他辅助任务


687
00:28:02,676 --> 00:28:06,046
作为工作流程改进的一部分


688
00:28:07,796 --> 00:28:09,726
我们可以添加的


689
00:28:09,726 --> 00:28:11,206
一个非常有用的功能


690
00:28:11,316 --> 00:28:12,686
就是帮助保持


691
00:28:12,686 --> 00:28:14,056
正确语义版本


692
00:28:14,696 --> 00:28:17,176
我们可以让 SwiftPM 分析


693
00:28:17,176 --> 00:28:18,776
你的新版本包里


694
00:28:18,776 --> 00:28:20,226
API 的差异


695
00:28:20,226 --> 00:28:22,976
并检测你是否在编译时


696
00:28:22,976 --> 00:28:24,656
做出了不兼容的更改


697
00:28:24,656 --> 00:28:26,186
如果做出不兼容的更改


698
00:28:26,186 --> 00:28:27,726
就建议你更新包的主要版本


699
00:28:30,916 --> 00:28:32,326
另外一件可以做的事是


700
00:28:32,326 --> 00:28:34,286
让你可以从 SwiftPM


701
00:28:34,286 --> 00:28:36,516
更容易的部署产品


702
00:28:36,516 --> 00:28:39,606
你也许希望个性化


703
00:28:39,606 --> 00:28:41,636
和库的链接


704
00:28:41,636 --> 00:28:43,586
或者个性化特定配置环境下


705
00:28:43,626 --> 00:28:45,086
的产品布局


706
00:28:45,086 --> 00:28:46,526
本地或者在服务器上


707
00:28:47,326 --> 00:28:48,886
或者你希望


708
00:28:48,886 --> 00:28:50,696
包含版本信息


709
00:28:50,696 --> 00:28:53,006
关于哪些包被构建进产品


710
00:28:54,076 --> 00:28:55,736
或者你希望


711
00:28:55,736 --> 00:28:57,316
把 SwiftPM 关于


712
00:28:57,366 --> 00:28:59,816
你的包的参数用于你的产品 


713
00:29:00,516 --> 00:29:02,106
SwiftPM 可以添加新的命令


714
00:29:02,106 --> 00:29:03,666
来支持这些需求


715
00:29:05,836 --> 00:29:07,196
现在用 SwiftPM 


716
00:29:07,196 --> 00:29:09,266
已经可以构建很多东西


717
00:29:09,266 --> 00:29:10,736
但是我们希望可以支持


718
00:29:10,736 --> 00:29:13,486
更多有更复杂需求的包


719
00:29:14,916 --> 00:29:16,356
如今最大的缺口


720
00:29:16,356 --> 00:29:18,646
可能就是支持资源


721
00:29:18,836 --> 00:29:20,836
如果你有任何图像 数据


722
00:29:20,836 --> 00:29:22,726
文件或者其他素材 


723
00:29:22,726 --> 00:29:24,386
SwiftPM 目前还不能


724
00:29:24,386 --> 00:29:25,426
把它们和你的产品


725
00:29:25,426 --> 00:29:25,966
打包在一起


726
00:29:27,096 --> 00:29:28,626
基础核心库


727
00:29:28,626 --> 00:29:30,716
在今年春天刚刚添加了  


728
00:29:30,716 --> 00:29:33,276
跨平台使用资源的 API


729
00:29:33,276 --> 00:29:35,586
如果我们想构建


730
00:29:35,586 --> 00:29:37,316
这个特性 可以让


731
00:29:37,316 --> 00:29:38,046
SwiftPM 使用这一 API


732
00:29:39,896 --> 00:29:41,736
我知道还有一些用户


733
00:29:41,736 --> 00:29:43,496
希望添加对


734
00:29:43,496 --> 00:29:45,446
一些特定编译器标志 连接标志的支持


735
00:29:45,746 --> 00:29:47,026
以及其他 SwiftPM 如今


736
00:29:47,026 --> 00:29:48,686
还不支持的属性


737
00:29:48,796 --> 00:29:51,216
我们希望能


738
00:29:51,216 --> 00:29:52,946
添加一个强大的


739
00:29:52,946 --> 00:29:55,136
构建设置模式


740
00:29:55,136 --> 00:29:56,386
包含条件设置


741
00:29:56,386 --> 00:29:58,776
或者粒度控制
 
00:29:58,776 --> 00:30:00,146
来决定哪一部分的包


742
00:30:00,216 --> 00:30:01,526
有哪些设定值


743
00:30:03,636 --> 00:30:04,866
Boris 刚才还谈到


744
00:30:04,866 --> 00:30:06,786
SwiftPM 构建的独立性


745
00:30:06,786 --> 00:30:08,026
以及它重要的原因


746
00:30:09,206 --> 00:30:10,456
我们不允许你运行


747
00:30:10,456 --> 00:30:11,206
任意外壳脚本


748
00:30:11,626 --> 00:30:13,696
但有一些用户


749
00:30:13,696 --> 00:30:14,906
构建可以在一定程度上个性化


750
00:30:14,906 --> 00:30:16,416
也许是因为


751
00:30:16,416 --> 00:30:18,216
想要个性化语言


752
00:30:18,216 --> 00:30:19,976
或者处理器


753
00:30:19,976 --> 00:30:21,026
他们想运行自己的


754
00:30:21,026 --> 00:30:22,686
文档生成器工具


755
00:30:22,686 --> 00:30:24,166
或者有其他需要添加到


756
00:30:24,166 --> 00:30:25,826
构建过程的步骤


757
00:30:26,776 --> 00:30:27,926
我们认为 SwiftPM 


758
00:30:27,926 --> 00:30:29,836
可以安全的支持这些内容


759
00:30:29,836 --> 00:30:32,196
甚至是通过实际的工具包


760
00:30:32,196 --> 00:30:33,506
把新的工具带入


761
00:30:33,506 --> 00:30:34,366
你的构建过程


762
00:30:34,956 --> 00:30:36,226
重要的是


763
00:30:36,226 --> 00:30:37,746
如果我们采用这一新功能


764
00:30:37,746 --> 00:30:39,706
就要确保


765
00:30:39,706 --> 00:30:40,716
任何加入构建过程


766
00:30:40,716 --> 00:30:42,306
的新工具都必须


767
00:30:42,306 --> 00:30:44,196
准确的声明它们的


768
00:30:44,246 --> 00:30:46,166
输入和输出依赖


769
00:30:46,166 --> 00:30:48,286
这样 SwiftPM 才可以继续保持


770
00:30:48,366 --> 00:30:50,946
正确的增量和平行构建


771
00:30:53,596 --> 00:30:54,876
最后 我想说一下


772
00:30:54,876 --> 00:30:56,446
关于包的发现


773
00:30:56,446 --> 00:30:58,306
信任和管理的


774
00:30:58,556 --> 00:31:00,406
前瞻想法


775
00:31:00,906 --> 00:31:04,026
Git 自身支持


776
00:31:04,026 --> 00:31:05,226
它的条款也支持


777
00:31:05,546 --> 00:31:07,116
提供如 TLS 的安全机制


778
00:31:07,116 --> 00:31:08,786
以确保


779
00:31:08,786 --> 00:31:10,056
你在和你认为的


780
00:31:10,056 --> 00:31:11,826
远程储存库接触


781
00:31:12,356 --> 00:31:14,036
但是恶意伪装


782
00:31:14,036 --> 00:31:15,496
可以危害到


783
00:31:15,496 --> 00:31:17,296
远程储存库


784
00:31:17,326 --> 00:31:18,876
并写入恶意内容


785
00:31:19,166 --> 00:31:20,186
事实上


786
00:31:20,186 --> 00:31:21,536
在任何情况下使用第三方代码


787
00:31:21,536 --> 00:31:22,996
你都应该


788
00:31:22,996 --> 00:31:24,006
提高警惕


789
00:31:24,376 --> 00:31:25,706
但是 Swift 包管理器


790
00:31:25,856 --> 00:31:27,776
提供一个很好的机会


791
00:31:27,776 --> 00:31:29,686
让我们构建一个安全功能


792
00:31:29,686 --> 00:31:30,996
确保你得到的是


793
00:31:30,996 --> 00:31:33,016
你所期待的内容


794
00:31:35,456 --> 00:31:37,546
SwiftPM 还可以让


795
00:31:37,546 --> 00:31:39,026
构建中的


796
00:31:39,026 --> 00:31:41,206
package.swift 清单评估 


797
00:31:41,206 --> 00:31:42,876
无法绕过安全保护并从你的


798
00:31:42,876 --> 00:31:44,266
文件系统写出内容


799
00:31:44,266 --> 00:31:45,316
或者访问网络


800
00:31:45,756 --> 00:31:47,686
今天我们使用的是


801
00:31:47,686 --> 00:31:49,066
macOS 的沙盒技术


802
00:31:49,066 --> 00:31:49,786
它很棒


803
00:31:50,096 --> 00:31:51,166
但我们同时也想


804
00:31:51,166 --> 00:31:53,126
把这种安全性带入别的平台


805
00:31:55,596 --> 00:31:56,966
很多用户希望


806
00:31:56,966 --> 00:31:58,566
将复刻包变得简单


807
00:31:58,916 --> 00:32:00,346
也许是因为他们想


808
00:32:00,346 --> 00:32:02,086
在包图里对某个包


809
00:32:02,086 --> 00:32:03,456
做私人的个性化处理


810
00:32:04,046 --> 00:32:05,416
又或者是因为


811
00:32:05,416 --> 00:32:08,006
他们想重写


812
00:32:08,006 --> 00:32:10,406
得到这个包的原 URL


813
00:32:10,406 --> 00:32:12,516
这样可以指向


814
00:32:12,516 --> 00:32:14,846
一个他们控制的私人镜像


815
00:32:14,876 --> 00:32:16,616
而不用寄希望于


816
00:32:16,676 --> 00:32:20,116
原来的包永远在那个位置


817
00:32:20,286 --> 00:32:21,636
最后我希望


818
00:32:21,636 --> 00:32:23,966
Swift 包能有一个真正的索引


819
00:32:24,636 --> 00:32:25,846
除了提供


820
00:32:25,846 --> 00:32:27,936
标准化命名空间


821
00:32:27,936 --> 00:32:29,476
让发现新的包更容易


822
00:32:29,476 --> 00:32:31,696
我们还可以为包


823
00:32:31,696 --> 00:32:34,416
提供更多支持 如质量衡量标准等等


824
00:32:34,416 --> 00:32:35,656
比如它的自动测试范围


825
00:32:35,656 --> 00:32:36,146
是怎样的


826
00:32:36,636 --> 00:32:38,466
或者支持用来评估


827
00:32:38,466 --> 00:32:40,246
你考虑使用的


828
00:32:40,246 --> 00:32:41,476
新包的可靠性的方法


829
00:32:41,976 --> 00:32:45,106
我说了很多


830
00:32:45,306 --> 00:32:47,236
但这些只是其中的一些可能性


831
00:32:47,616 --> 00:32:49,256
如果你们感兴趣


832
00:32:49,256 --> 00:32:51,066
我们很希望


833
00:32:51,066 --> 00:32:52,846
听到你的反馈


834
00:32:52,846 --> 00:32:54,606
想法和贡献 


835
00:32:54,606 --> 00:32:56,126
让 Swift 包管理器成为


836
00:32:56,126 --> 00:32:57,756
开发者社区里最好的工具


837
00:32:58,686 --> 00:33:00,726
如果希望加入的话


838
00:33:00,726 --> 00:33:02,146
你们应该如何做呢


839
00:33:02,146 --> 00:33:04,476
我想说一下 Swift 的开源过程


840
00:33:05,756 --> 00:33:07,506
我刚才也提到过


841
00:33:07,506 --> 00:33:10,306
包管理器是 Swift 开源项目的一部分


842
00:33:10,926 --> 00:33:12,686
Swift.org 是


843
00:33:12,686 --> 00:33:14,306
一个很好的


844
00:33:14,306 --> 00:33:16,536
了解社区和过程的地方


845
00:33:18,306 --> 00:33:20,786
SwiftPM 使用的是 


846
00:33:20,856 --> 00:33:23,176
Swift 语言评估过程


847
00:33:23,176 --> 00:33:25,696
这意味着任何人都可以对


848
00:33:25,696 --> 00:33:28,336
Swift 包管理器的的新功能或者调整


849
00:33:28,476 --> 00:33:29,616
提供建议


850
00:33:31,156 --> 00:33:32,826
不过 在你起草


851
00:33:32,826 --> 00:33:34,396
一个完整正式的提案之前


852
00:33:34,466 --> 00:33:36,036
我建议你


853
00:33:36,036 --> 00:33:37,676
去 Swift 论坛的


854
00:33:37,676 --> 00:33:39,636
包管理器部分


855
00:33:39,636 --> 00:33:40,726
和社区交流一下你的想法


856
00:33:41,246 --> 00:33:42,456
你可以得到很多反馈


857
00:33:42,526 --> 00:33:44,576
能够帮助你完善你的想法


858
00:33:45,156 --> 00:33:47,916
如果你想先


859
00:33:47,916 --> 00:33:48,936
小试牛刀


860
00:33:48,936 --> 00:33:50,756
bugs.swift.org 的


861
00:33:50,756 --> 00:33:52,786
错误追踪器中


862
00:33:52,786 --> 00:33:54,856
有很多的好想法


863
00:33:54,856 --> 00:33:55,966
尤其是那些


864
00:33:55,966 --> 00:33:58,756
标记了 StarterBug 的的错误


865
00:33:59,266 --> 00:34:00,656
因为 正如我所说 SwiftPM 


866
00:34:00,656 --> 00:34:02,226
是用 Swift 写的
 
00:34:02,436 --> 00:34:04,886
你会发现它其实很容易上手


867
00:34:05,346 --> 00:34:07,836
当然 如果你在


868
00:34:07,836 --> 00:34:09,306
使用 SwiftPM 时找到了错误


869
00:34:09,306 --> 00:34:10,746
我们鼓励你报到


870
00:34:10,746 --> 00:34:12,525
bugs.swift.org 上 


871
00:34:12,525 --> 00:34:16,556
你可以追踪我们是如何解决的


872
00:34:16,755 --> 00:34:18,166
SwiftPM 可以利用


873
00:34:18,166 --> 00:34:20,926
和 Swift 项目相同的


874
00:34:20,926 --> 00:34:21,956
持续集成基础结构


875
00:34:22,356 --> 00:34:23,516
这意味着轮询请求


876
00:34:23,516 --> 00:34:25,126
可以被自动构建


877
00:34:25,126 --> 00:34:27,116
并在合并前进行测试


878
00:34:27,766 --> 00:34:29,206
因为 SwiftPM 代码


879
00:34:29,206 --> 00:34:30,815
有很大的测试范围


880
00:34:31,116 --> 00:34:31,775
我们发现这个


881
00:34:31,775 --> 00:34:33,206
基础结构对我们来说


882
00:34:33,206 --> 00:34:33,755
非常有用


883
00:34:35,356 --> 00:34:36,806
当你准备尝试


884
00:34:36,806 --> 00:34:38,686
最后的调整


885
00:34:38,686 --> 00:34:40,436
你可以在 Swift.org 上


886
00:34:40,536 --> 00:34:41,775
下载 Trunk Snapshot 工具链


887
00:34:41,775 --> 00:34:44,156
它们会定期更新 


888
00:34:46,456 --> 00:34:47,866
我们很高兴见到


889
00:34:47,866 --> 00:34:49,746
SwiftPM 社区如今的成长


890
00:34:49,956 --> 00:34:51,876
有180 多个人做出贡献


891
00:34:51,876 --> 00:34:53,626
有些是在错误修复上


892
00:34:53,626 --> 00:34:55,146
有些是在新功能上


893
00:34:55,636 --> 00:34:57,276
Swift 包生态系统


894
00:34:57,276 --> 00:34:58,446
也在以健康的速度增长


895
00:34:58,446 --> 00:35:00,216
很多跨平台包


896
00:35:00,216 --> 00:35:01,736
和公共包


897
00:35:01,736 --> 00:35:03,236
都可以在 GitHub 上找到  


898
00:35:04,086 --> 00:35:05,296
这意味着你可以


899
00:35:05,296 --> 00:35:06,666
专注于怎样让你的产品


900
00:35:06,666 --> 00:35:08,406
与众不同 让包的依赖


901
00:35:08,406 --> 00:35:10,086
负责剩下的部分


902
00:35:10,086 --> 00:35:12,346
我建议你现在就


903
00:35:12,346 --> 00:35:13,966
体验一下 SwiftPM 的


904
00:35:14,116 --> 00:35:15,456
一些功能


905
00:35:15,456 --> 00:35:16,766
而它未来还有很大的进步空间


906
00:35:17,136 --> 00:35:19,126
两个建议的功能分别是


907
00:35:19,126 --> 00:35:21,656
命令行实用工具和


908
00:35:21,656 --> 00:35:23,616
针对在服务器上用 Swift 做开发的库


909
00:35:24,796 --> 00:35:26,216
服务器端的 Swift 社区 


910
00:35:26,216 --> 00:35:27,926
对 Swift 包管理器


911
00:35:27,926 --> 00:35:29,156
进行了广泛的应用


912
00:35:29,626 --> 00:35:30,956
服务器端的 


913
00:35:30,956 --> 00:35:32,696
自己也在很好的成长


914
00:35:32,696 --> 00:35:33,916
现在提供了很多框架


915
00:35:33,916 --> 00:35:35,646
来做网页和后端开发


916
00:35:36,296 --> 00:35:37,886
如果你愿意关注一下


917
00:35:37,886 --> 00:35:39,006
这种方式的话


918
00:35:39,006 --> 00:35:40,326
我觉得你会发现


919
00:35:40,326 --> 00:35:41,426
Swift 是做这种跨平台开发的


920
00:35:41,426 --> 00:35:42,736
很好的语言


921
00:35:44,076 --> 00:35:45,686
但是你也可以


922
00:35:45,686 --> 00:35:47,096
用 SwiftPM 创建


923
00:35:47,096 --> 00:35:50,116
命令行实用工具和库


924
00:35:50,116 --> 00:35:50,796
哪个都可以


925
00:35:51,386 --> 00:35:53,406
上手很容易


926
00:35:53,406 --> 00:35:54,856
只需要打开一个终端窗口


927
00:35:54,856 --> 00:35:57,006
然后在里面运行 Swift 包


928
00:35:57,776 --> 00:35:58,746
如果下次


929
00:35:58,746 --> 00:36:00,186
你想尝试新事物


930
00:36:00,186 --> 00:36:02,136
我建议你试试看


931
00:36:03,046 --> 00:36:04,176
如果你想做出贡献


932
00:36:04,176 --> 00:36:05,946
请到 Swift 论坛


933
00:36:05,946 --> 00:36:07,786
开始对话


934
00:36:08,796 --> 00:36:09,986
如果想来和我们聊聊


935
00:36:09,986 --> 00:36:11,876
明天下午 3 点


936
00:36:11,876 --> 00:36:15,326
我们会在实验室


937
00:36:15,326 --> 00:36:16,626
我很兴奋的想知道


938
00:36:16,626 --> 00:36:17,906
我们能做成什么


939
00:36:17,906 --> 00:36:19,366
以及这个开发者社区一起


940
00:36:19,366 --> 00:36:19,826
可以成就什么


941
00:36:20,586 --> 00:36:21,886
你的贡献能够帮助我们


942
00:36:21,916 --> 00:36:23,626
设计一个很棒的包管理器


943
00:36:23,626 --> 00:36:25,796
对整个 Swift 社区都意义重大


944
00:36:26,796 --> 00:36:27,226
谢谢


945
00:36:27,306 --> 00:36:28,916
祝你享受接下来的 WWDC


946
00:36:29,516 --> 00:36:33,500
[ 掌声 ]

