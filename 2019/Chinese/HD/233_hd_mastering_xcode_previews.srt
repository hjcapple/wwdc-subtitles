1
00:00:06,039 --> 00:00:09,910 line:0
（掌握Xcode预览）


2
00:00:13,881 --> 00:00:17,684 line:-2
各位下午好 欢迎来到
掌握Xcode预览演讲


3
00:00:18,051 --> 00:00:22,155 line:-2
这周你可能在许多地方
都听过Xcode预览介绍


4
00:00:22,222 --> 00:00:24,224 line:-1
主题演讲 国情咨文


5
00:00:24,291 --> 00:00:26,493 line:-2
还有一些关于SwiftUI
的演讲中可能都听过


6
00:00:26,860 --> 00:00:30,163 line:-2
但今天 我们关注的是
Xcode预览本身


7
00:00:30,964 --> 00:00:32,031 line:-1
我叫Anton


8
00:00:32,098 --> 00:00:34,268 line:-1
待会我会与


9
00:00:34,334 --> 00:00:37,337 line:-2
我的同事Nate一起介绍
Xcode预览是什么


10
00:00:37,404 --> 00:00:38,305 line:-1
它是如何运作的


11
00:00:38,372 --> 00:00:40,641 line:-1
以及在你的工作中


12
00:00:40,707 --> 00:00:41,742 line:-1
如何运用


13
00:00:41,808 --> 00:00:44,711 line:-2
无论你是用SwiftUI
创建新的app


14
00:00:45,078 --> 00:00:48,015 line:-2
或是用UIKit或AppKit
来维护已有app


15
00:00:48,849 --> 00:00:50,751 line:-1
让我先说一个小故事


16
00:00:52,052 --> 00:00:55,255 line:-1
一位设计师拿着他为你的


17
00:00:55,322 --> 00:00:58,892 line:-1
迪士尼app设计的界面样板找到你


18
00:00:59,193 --> 00:01:01,428 line:-1
你拿到样板 拿回办公室


19
00:01:01,495 --> 00:01:02,796 line:-1
开始创建


20
00:01:03,197 --> 00:01:05,999 line:-1
完成后再拿给设计师看


21
00:01:06,600 --> 00:01:07,901 line:-1
你运行代码


22
00:01:08,168 --> 00:01:10,904 line:-1
浏览之前做好的许多见面


23
00:01:10,971 --> 00:01:11,972 line:-1
找到这个界面


24
00:01:12,272 --> 00:01:13,740 line:-2
然后把该界面给设计师看
然后他们说


25
00:01:14,708 --> 00:01:16,710 line:-1
看起来不错 但是


26
00:01:17,578 --> 00:01:19,246 line:-1
我现在看这个做好的界面


27
00:01:19,713 --> 00:01:22,449 line:-1
我觉得这个按钮可以再蓝一点


28
00:01:23,250 --> 00:01:24,251 line:-1
没问题


29
00:01:24,318 --> 00:01:27,454 line:-2
你退出app 打开Xcode
开始编辑


30
00:01:28,422 --> 00:01:29,289 line:-1
然后再次运行


31
00:01:29,356 --> 00:01:31,358 line:-1
再从一堆界面中


32
00:01:31,425 --> 00:01:32,726 line:-1
找到刚刚创建的新界面


33
00:01:32,793 --> 00:01:34,127 line:-1
拿给设计师看


34
00:01:34,695 --> 00:01:35,529 line:-1
他们又说


35
00:01:36,129 --> 00:01:38,599 line:-1
好多了 但是


36
00:01:39,833 --> 00:01:41,535 line:-1
文字部分我觉得可以


37
00:01:41,802 --> 00:01:43,604 line:-1
可以再紧凑一点 你觉得呢


38
00:01:44,538 --> 00:01:46,039 line:-1
你应该知道这个故事是什么意思


39
00:01:46,106 --> 00:01:49,943 line:-2
这种弄来弄去的反复
其实是一个正常的过程


40
00:01:50,410 --> 00:01:51,645 line:-1
我们每个人都经历过


41
00:01:51,712 --> 00:01:54,481 line:-1
这也是我们创建好看的app的方式


42
00:01:54,748 --> 00:01:58,218 line:-1
但是这就消耗太多时间了


43
00:01:58,285 --> 00:02:01,755 line:-1
而且浪费时间的也不是反复的过程


44
00:02:01,822 --> 00:02:04,191 line:-1
不是这里小改一下 那里小弄一下


45
00:02:04,258 --> 00:02:05,859 line:-1
也不是得到反馈的过程


46
00:02:06,126 --> 00:02:09,562 line:-1
而是创建 运行 配置 浏览


47
00:02:09,630 --> 00:02:13,400 line:-1
再验证你刚刚对app


48
00:02:13,467 --> 00:02:16,103 line:-1
做出的那些更改是否达到预期效果


49
00:02:17,804 --> 00:02:18,639 line:-1
所以


50
00:02:19,540 --> 00:02:20,741 line:-1
我再举一个例子


51
00:02:22,309 --> 00:02:25,546 line:-1
你和设计师交流结束


52
00:02:25,612 --> 00:02:29,249 line:-1
你对新界面也很满意


53
00:02:29,550 --> 00:02:30,684 line:-1
你把它拿回去


54
00:02:30,984 --> 00:02:35,155 line:-1
但是你作为开发者的工作还没有结束


55
00:02:35,222 --> 00:02:39,459 line:-2
因为作为开发者
你肯定希望你的app能够正常运作


56
00:02:39,526 --> 00:02:40,360 line:-1
然后


57
00:02:40,928 --> 00:02:43,297 line:-1
正常运作的意思是


58
00:02:43,964 --> 00:02:46,600 line:-2
不管用户在什么样的
配置上运行你的app


59
00:02:46,667 --> 00:02:47,935 line:-1
新界面看起来都要很好


60
00:02:48,202 --> 00:02:52,072 line:-1
比如 在深色模式下要好看


61
00:02:53,907 --> 00:02:57,044 line:-1
或者是在不同动态大小


62
00:02:58,612 --> 00:03:01,014 line:-1
甚至是不同设备上都要好看


63
00:03:02,316 --> 00:03:06,486 line:-1
而且验证你的UI和app


64
00:03:06,553 --> 00:03:10,157 line:-1
在不同的情况下看起来都一样好


65
00:03:10,457 --> 00:03:12,626 line:-1
还是有一定难度的


66
00:03:12,693 --> 00:03:15,996 line:-2
之后还要将你的app
上架到App Store


67
00:03:16,363 --> 00:03:19,800 line:-1
作为开发者这个过程我们都很熟悉了


68
00:03:20,734 --> 00:03:23,136 line:-1
我们Xcode团队也一直在


69
00:03:23,203 --> 00:03:24,004 line:-1
思考这个问题


70
00:03:24,471 --> 00:03:25,973 line:-1
我们得出了解决方案


71
00:03:26,673 --> 00:03:28,041 line:-1
那就是Xcode预览


72
00:03:28,108 --> 00:03:31,345 line:-2
Xcode预览是
Xcode的新功能


73
00:03:33,881 --> 00:03:36,216 line:-1
该功能可以大大减少


74
00:03:36,283 --> 00:03:38,385 line:-1
构建 运行和配置视图


75
00:03:38,752 --> 00:03:40,654 line:-1
以验证所做改变的时间


76
00:03:40,721 --> 00:03:44,892 line:-1
让你能够专注于你真正想做的事情


77
00:03:44,958 --> 00:03:47,094 line:-1
那就是创建好app


78
00:03:48,962 --> 00:03:52,065 line:-2
但问题是怎么做
这一切都是如何运作的


79
00:03:53,000 --> 00:03:55,669 line:-1
那么你在app中启用预览时


80
00:03:55,736 --> 00:03:58,906 line:-2
Xcode会以一种
特殊方式来创建app


81
00:04:00,240 --> 00:04:03,210 line:-1
Xcode知道


82
00:04:03,277 --> 00:04:05,546 line:-1
你正在处理的是哪个视图和哪个文件


83
00:04:05,612 --> 00:04:08,115 line:-1
它就只会编译该文件


84
00:04:08,182 --> 00:04:11,218 line:-2
和该视图 与app中的
其他部分分开来


85
00:04:12,119 --> 00:04:16,456 line:-1
然后使用Swift的动态替换功能


86
00:04:16,523 --> 00:04:19,059 line:-1
将该实现应用于app


87
00:04:20,226 --> 00:04:21,394 line:-1
因为这些代码


88
00:04:21,461 --> 00:04:23,230 line:-1
对于每次更改进行重新编译


89
00:04:23,297 --> 00:04:27,534 line:-2
比重新编译整个app
工作量要小得多


90
00:04:27,601 --> 00:04:31,738 line:-2
Xcode可以针对你所做的
每一项更改不断重复执行此操作


91
00:04:32,573 --> 00:04:37,611 line:-1
也就是说对更改进行的反馈会更快


92
00:04:38,412 --> 00:04:42,816 line:-2
但是这些变化Xcode
还可以进一步优化


93
00:04:43,217 --> 00:04:46,587 line:-2
对于仅涉及字面值
如字符串或数字的更改


94
00:04:46,653 --> 00:04:50,190 line:-1
Xcode不会做出重新编译


95
00:04:52,226 --> 00:04:55,295 line:-1
只会将新值传入正在运行的app中


96
00:04:55,629 --> 00:04:57,397 line:-1
你就可以获得即时反馈


97
00:04:57,664 --> 00:05:00,267 line:-1
就像可视化编辑工具那样


98
00:05:02,870 --> 00:05:05,072 line:-1
还有更为重要的一点是


99
00:05:06,573 --> 00:05:09,276 line:-1
Xcode预览并不代表


100
00:05:09,343 --> 00:05:12,112 line:-1
Xcode在运行app时


101
00:05:12,179 --> 00:05:13,714 line:-1
所见的视图


102
00:05:14,114 --> 00:05:17,217 line:-1
它实际上会构建和运行代码


103
00:05:18,619 --> 00:05:21,722 line:-1
所以在你运行app时可用的上下文


104
00:05:21,788 --> 00:05:25,459 line:-1
在预览视图中也可用


105
00:05:25,526 --> 00:05:26,927 line:-1
所以如果你有自定义资产


106
00:05:27,327 --> 00:05:29,530 line:-1
你就可以在预览中使用并进行渲染


107
00:05:29,596 --> 00:05:32,766 line:-2
如果你想要在app中
使用自定义逻辑


108
00:05:32,833 --> 00:05:35,903 line:-1
当然每款app都有自定义逻辑


109
00:05:36,203 --> 00:05:37,337 line:-1
你也同样可以使用


110
00:05:37,404 --> 00:05:41,742 line:-2
甚至是运行配置
比如设置用户默认值


111
00:05:41,808 --> 00:05:44,111 line:-1
在预览视图下同样可以使用


112
00:05:45,812 --> 00:05:50,450 line:-2
所以现在的问题是
Xcode怎么知道要向你展示什么


113
00:05:52,786 --> 00:05:54,154 line:-1
其实


114
00:05:54,688 --> 00:05:55,923 line:-1
告诉Xcode


115
00:05:56,490 --> 00:05:59,026 line:-1
要显示什么视图以及如何进行配置


116
00:05:59,092 --> 00:06:00,227 line:-1
只需要几行代码


117
00:06:01,028 --> 00:06:04,598 line:-1
你需要做的就是实现一个


118
00:06:04,665 --> 00:06:06,900 line:-2
符合PreviewProvider
协议的小类型


119
00:06:07,234 --> 00:06:09,536 line:-1
这也是SwiftUI框架的一部分


120
00:06:10,003 --> 00:06:11,805 line:-1
这部分有一个要求


121
00:06:11,872 --> 00:06:14,274 line:-1
就是你实现的预览属性


122
00:06:14,775 --> 00:06:15,876 line:-1
之后就会返回一些内容


123
00:06:15,943 --> 00:06:18,378 line:-1
而你得到的返回


124
00:06:19,213 --> 00:06:20,848 line:-1
都是取决于你


125
00:06:22,649 --> 00:06:26,687 line:-1
因为这些代码也是你app的一部分


126
00:06:26,753 --> 00:06:29,489 line:-1
它与app中的其他部分一起编译的


127
00:06:29,823 --> 00:06:34,194 line:-1
配置代码也是一样的道理


128
00:06:34,261 --> 00:06:35,162 line:-1
和视图一样


129
00:06:35,229 --> 00:06:38,265 line:-1
所以在这里你可以使用自定义逻辑


130
00:06:38,332 --> 00:06:42,302 line:-1
自定义资源甚至运行配置


131
00:06:42,870 --> 00:06:46,440 line:-1
运用代码来配置视图


132
00:06:46,507 --> 00:06:48,375 line:-1
还有许多好处


133
00:06:49,009 --> 00:06:51,578 line:-1
比如 这是SwiftUI代码


134
00:06:51,645 --> 00:06:53,280 line:-1
配置代码只是SwiftUI


135
00:06:53,347 --> 00:06:55,816 line:-2
如果你知道如何
创建SwiftUIView


136
00:06:55,883 --> 00:06:59,753 line:-1
那么你就知道如何配置该视图


137
00:07:01,421 --> 00:07:03,624 line:-1
你也可以先写一个预览


138
00:07:03,991 --> 00:07:06,059 line:-2
将它放在源代码管理中
并与团队共享


139
00:07:06,126 --> 00:07:09,963 line:-2
这样你团队都可以从
你写的预览中获益


140
00:07:11,131 --> 00:07:14,334 line:-2
最后 因为你的变更
视图会不断变化


141
00:07:14,401 --> 00:07:15,769 line:-1
app也在不断变化


142
00:07:15,836 --> 00:07:20,707 line:-2
当视图或是它的API变化时
编译程序可以确保


143
00:07:20,774 --> 00:07:23,143 line:-1
预览与视图保持同步


144
00:07:23,210 --> 00:07:24,044 line:-1
这样


145
00:07:24,545 --> 00:07:26,780 line:-1
你就知道你预览的内容是正确的


146
00:07:28,916 --> 00:07:32,619 line:-1
所以这就是预览运作方式的简要介绍


147
00:07:33,187 --> 00:07:35,689 line:-1
接下来就讲讲如何配置预览


148
00:07:35,756 --> 00:07:38,859 line:-2
来充分利用预览的优势
有请Nate


149
00:07:48,702 --> 00:07:50,604 line:-1
Anton刚才说到预览其实是代码


150
00:07:51,271 --> 00:07:52,773 line:-1
现在我就来说说怎么写这个代码


151
00:07:54,408 --> 00:07:58,178 line:-2
我们Xcode预览团队
有一次到动物园去玩


152
00:08:00,447 --> 00:08:01,849 line:-1
动物园里有很多动物


153
00:08:01,915 --> 00:08:04,518 line:-1
我们想确保我们看到了每一个动物


154
00:08:05,619 --> 00:08:07,521 line:-1
作为开发者


155
00:08:07,588 --> 00:08:10,257 line:-1
我们实在忍不住想要创建一个app


156
00:08:10,624 --> 00:08:12,292 line:-1
来追踪动物园里的动物


157
00:08:13,961 --> 00:08:15,729 line:-1
我就担起了做这个app的任务


158
00:08:16,096 --> 00:08:18,732 line:-1
它的主要用户界面


159
00:08:19,566 --> 00:08:21,134 line:-1
就是动物园里的动物清单列表


160
00:08:21,768 --> 00:08:25,339 line:-1
在该列表中有每个动物名称


161
00:08:27,641 --> 00:08:29,276 line:-1
我来给你们看看现在我做到哪了


162
00:08:32,913 --> 00:08:36,383 line:-1
在画布中 你可以看到动物的预览


163
00:08:37,851 --> 00:08:41,121 line:-2
因为iPhone 10S的
运行目的地已经选择


164
00:08:41,188 --> 00:08:43,724 line:-2
我们在动物视图看到的
chrome就是这样的


165
00:08:44,858 --> 00:08:49,129 line:-2
但是我们想让该视图
在各个设备上看起来都好


166
00:08:49,196 --> 00:08:52,099 line:-1
我的手机是iPhone SE


167
00:08:52,833 --> 00:08:56,470 line:-2
我可以将运行目的地
更改为iPhone SE


168
00:08:56,537 --> 00:08:59,439 line:-1
但预览API还提供另一种机制


169
00:08:59,806 --> 00:09:02,176 line:-1
准确来说是预览设备


170
00:09:04,211 --> 00:09:06,246 line:-1
你可以将想要显示预览的


171
00:09:06,313 --> 00:09:07,581 line:-1
设备名称输入该机制


172
00:09:08,215 --> 00:09:13,220 line:-2
几乎同一时间 你就可以在画布上
看到设备显示该视图


173
00:09:14,354 --> 00:09:18,292 line:-2
现在我再看看设备
iPhone SE显示动物名称图


174
00:09:18,358 --> 00:09:19,493 line:-1
我发现了一个问题


175
00:09:19,826 --> 00:09:21,929 line:-1
最右边的文本被截断了


176
00:09:22,963 --> 00:09:24,131 line:-1
我们来解决这个问题


177
00:09:24,665 --> 00:09:27,801 line:-2
为此 我将HStack
改为VStack


178
00:09:29,169 --> 00:09:33,540 line:-2
画布马上就更新了
这正是我们先要的样子


179
00:09:34,908 --> 00:09:37,511 line:-2
Anton的手机是
iPhone 10r


180
00:09:37,578 --> 00:09:40,280 line:-2
我们想要确保该动物名称
在他的设备上也能正确显示


181
00:09:40,347 --> 00:09:43,617 line:-2
我们可以改变我们传递给
预览设备的参数


182
00:09:44,151 --> 00:09:45,285 line:-1
但是方法更简单


183
00:09:45,686 --> 00:09:49,022 line:-2
具体来说 我们可以将此视图
嵌入到一个组中


184
00:09:49,423 --> 00:09:54,228 line:-2
按住Command键并单击
动物名称图 然后向下滚动到嵌入组


185
00:09:54,928 --> 00:09:58,765 line:-1
之后添加动物名称图的第二个实例


186
00:09:59,032 --> 00:10:03,103 line:-2
这次我们用iPhone 10r
调用预览设备


187
00:10:04,638 --> 00:10:06,173 line:-1
我们可以看到 在画布中


188
00:10:06,607 --> 00:10:09,176 line:-1
该视图在两个设备中运行


189
00:10:10,444 --> 00:10:13,247 line:-1
动物的学名一般是用斜体写的


190
00:10:13,680 --> 00:10:15,649 line:-1
我们现在就来更改


191
00:10:19,853 --> 00:10:23,423 line:-2
现在画布中
我们就能验证更改是否正确


192
00:10:23,690 --> 00:10:25,192 line:-1
两台设备都可以


193
00:10:25,259 --> 00:10:26,527 line:-1
真的太简单了


194
00:10:33,767 --> 00:10:37,004 line:-1
我们可以看到在用户使用的设备上


195
00:10:37,070 --> 00:10:38,705 line:-1
我们的界面预览


196
00:10:39,072 --> 00:10:40,674 line:-1
对于像格子这样的小视图


197
00:10:40,741 --> 00:10:44,845 line:-1
也能让你更加专注于你想要的东西


198
00:10:45,179 --> 00:10:47,414 line:-1
摆脱多余的chrome


199
00:10:48,148 --> 00:10:50,584 line:-1
为此 预览API提供了这个方法


200
00:10:50,651 --> 00:10:51,718 line:-1
预览布局


201
00:10:52,653 --> 00:10:54,154 line:-1
现在这个预览布局方法


202
00:10:55,222 --> 00:10:56,957 line:-1
可以传递三个不同的参数


203
00:10:57,457 --> 00:10:59,993 line:-1
首先你可以指定设备


204
00:11:00,060 --> 00:11:01,929 line:-1
这实际上是默认使用的


205
00:11:01,995 --> 00:11:04,097 line:-1
也就是现在画布上的内容


206
00:11:04,531 --> 00:11:05,365 line:-1
然后


207
00:11:06,133 --> 00:11:08,168 line:-1
你可以指定


208
00:11:08,235 --> 00:11:09,970 line:-1
预览显示的大小


209
00:11:10,037 --> 00:11:12,105 line:-1
如果你要将你的视图


210
00:11:12,172 --> 00:11:15,642 line:-2
嵌入到特定大小的更大的界面上
这就十分有用了


211
00:11:15,943 --> 00:11:18,612 line:-1
最后你可以使用适合大小功能


212
00:11:18,912 --> 00:11:23,317 line:-1
如果你希望视图可以根据内容


213
00:11:23,383 --> 00:11:25,919 line:-1
确定预览大小 那该功能十分有用


214
00:11:26,220 --> 00:11:28,722 line:-2
因为动物名称单元格
要被嵌入到列表中


215
00:11:29,122 --> 00:11:33,894 line:-1
该列表允许动物单元格


216
00:11:34,428 --> 00:11:37,197 line:-1
根据其内容垂直调整大小


217
00:11:37,264 --> 00:11:39,132 line:-1
我们来使用适合大小功能


218
00:11:41,535 --> 00:11:45,105 line:-2
画布马上进行更新
显示我们想要的效果


219
00:11:46,573 --> 00:11:49,009 line:-1
我现在点击画布右下方按钮


220
00:11:49,076 --> 00:11:50,410 line:-1
来将视图放大


221
00:11:51,945 --> 00:11:54,047 line:-1
这两个文本


222
00:11:54,548 --> 00:11:56,884 line:-1
红狐和它下面的所述科


223
00:11:56,950 --> 00:11:57,784 line:-1
犬类


224
00:11:58,986 --> 00:12:01,054 line:-1
有点太模糊了


225
00:12:01,421 --> 00:12:04,057 line:-1
我希望它们看起来是清晰可见的


226
00:12:04,124 --> 00:12:06,827 line:-1
所以我要将红狐加粗


227
00:12:07,394 --> 00:12:09,696 line:-1
我对该文本点击Command


228
00:12:10,330 --> 00:12:12,165 line:-1
向下滚动到检验操作


229
00:12:12,633 --> 00:12:14,868 line:-1
将字体加粗


230
00:12:17,137 --> 00:12:19,640 line:-1
源编辑器添加了新代码


231
00:12:20,007 --> 00:12:22,309 line:-1
预览也进行了相应的更新


232
00:12:23,110 --> 00:12:23,944 line:-1
看起来不错


233
00:12:25,445 --> 00:12:29,249 line:-1
很多用户喜欢用动态字体大小


234
00:12:29,583 --> 00:12:32,286 line:-1
我们来看看当用户将字体


235
00:12:32,586 --> 00:12:36,490 line:-2
调到最大的时候
我们的界面看起来是什么样的


236
00:12:37,491 --> 00:12:40,861 line:-2
因为预览API是
SwiftUI的一部分


237
00:12:41,128 --> 00:12:45,098 line:-2
我们在写预览的时候
就可以利用SwiftUI


238
00:12:45,165 --> 00:12:48,769 line:-2
在这种情况下
我们可以使用环境修饰符


239
00:12:50,237 --> 00:12:53,240 line:-1
并将字体类别键径值


240
00:12:53,307 --> 00:12:54,408 line:-1
调到最大


241
00:12:56,109 --> 00:13:00,013 line:-1
这样就能轻松改变


242
00:13:00,080 --> 00:13:01,481 line:-1
我们正在看的字体大小


243
00:13:01,548 --> 00:13:03,250 line:-1
还有更棒的一点是


244
00:13:03,317 --> 00:13:05,953 line:-1
我们可以一次看到


245
00:13:06,019 --> 00:13:09,022 line:-1
所有不同字体大小下的界面


246
00:13:09,556 --> 00:13:12,926 line:-1
我们要做的就是将该界面嵌入一个组


247
00:13:12,993 --> 00:13:16,597 line:-2
对于每一个大小
创建一个新的动物单元格


248
00:13:16,663 --> 00:13:19,333 line:-2
但是重复工作太多了
还有更好的方法


249
00:13:20,701 --> 00:13:23,303 line:-2
SwiftUI有一个
应用于所有功能


250
00:13:23,370 --> 00:13:26,173 line:-1
我对动物单元格点击Command


251
00:13:26,507 --> 00:13:27,941 line:-1
下滑选择重复


252
00:13:29,142 --> 00:13:33,180 line:-2
现在对于0到5
我们都得到了对应的预览


253
00:13:33,814 --> 00:13:34,948 line:-1
但是我想要的


254
00:13:35,482 --> 00:13:38,252 line:-1
是每种字体大小


255
00:13:38,318 --> 00:13:39,253 line:-1
都有预览


256
00:13:39,520 --> 00:13:44,057 line:-2
而且我想要每种情况的
大小类别键径


257
00:13:44,391 --> 00:13:47,661 line:-1
都在环境中指定为对应的值


258
00:13:49,062 --> 00:13:49,897 line:-1
就像这样


259
00:13:50,264 --> 00:13:52,165 line:-1
你可以看到在画布上


260
00:13:52,432 --> 00:13:55,369 line:-1
每种字体大小都显示出来了


261
00:14:03,310 --> 00:14:04,411 line:-1
完成之后


262
00:14:04,845 --> 00:14:08,348 line:-1
在最小的字体那我发现一个问题


263
00:14:08,415 --> 00:14:10,450 line:-1
标题 也就是通俗名称


264
00:14:10,517 --> 00:14:12,619 line:-1
不是我想的那么显眼


265
00:14:12,886 --> 00:14:14,788 line:-1
让我们将它放大一点


266
00:14:15,322 --> 00:14:18,425 line:-2
我再次在视图上点击Command
这次实在画布中


267
00:14:19,393 --> 00:14:21,628 line:-1
再选择检查操作


268
00:14:22,262 --> 00:14:24,064 line:-1
改变标题字体


269
00:14:26,433 --> 00:14:29,937 line:-2
在源代码编辑器中插入代码
画布上也有相应的更新


270
00:14:30,537 --> 00:14:31,405 line:-1
看起来不错


271
00:14:32,105 --> 00:14:33,874 line:-1
你可能会遇到一个问题


272
00:14:33,941 --> 00:14:36,643 line:-1
当你在画布中有多个预览


273
00:14:37,044 --> 00:14:40,514 line:-1
很难区分


274
00:14:40,781 --> 00:14:44,084 line:-1
你要分清楚代码中的配置


275
00:14:44,151 --> 00:14:46,887 line:-1
预览静态属性的实现


276
00:14:46,954 --> 00:14:50,090 line:-1
对应的是画布中的哪个预览


277
00:14:51,325 --> 00:14:52,860 line:-1
为了解决这个问题


278
00:14:53,427 --> 00:14:56,763 line:-2
预览API提供一个功能
叫做预览显示名称


279
00:14:57,231 --> 00:14:59,132 line:-1
以免你想要使用这些


280
00:14:59,199 --> 00:15:01,401 line:-1
文字大小的名称


281
00:15:02,002 --> 00:15:05,839 line:-2
在每个预览的下方
我们就可以看到文字大小了


282
00:15:10,911 --> 00:15:12,246 line:-1
是的 真的很棒


283
00:15:14,448 --> 00:15:18,085 line:-1
预览API非常简洁且功能非常强大


284
00:15:18,619 --> 00:15:21,154 line:-2
接下来要讲的是
如何利用Xcode功能


285
00:15:21,221 --> 00:15:23,824 line:-2
来发挥预览的最大作用
有请Anton


286
00:15:31,598 --> 00:15:36,770 line:-1
我来继续讲这个演示


287
00:15:36,837 --> 00:15:38,572 line:-1
把Nate做的这个动物清单创建完


288
00:15:38,872 --> 00:15:39,973 line:-1
我要做的第一件事


289
00:15:40,040 --> 00:15:43,710 line:-1
是把注意力放到红狐图像占位符


290
00:15:44,011 --> 00:15:45,779 line:-1
我们发布此款app的时候


291
00:15:45,846 --> 00:15:48,982 line:-1
我们希望这些数据是来自于


292
00:15:49,049 --> 00:15:50,184 line:-1
我们将要提供的网络服务


293
00:15:50,817 --> 00:15:52,819 line:-1
但是我们还没有构建网络代码


294
00:15:52,886 --> 00:15:55,455 line:-2
所以我还没有这些数据
来填充我的视图


295
00:15:55,522 --> 00:15:57,991 line:-1
所以我先使用占位符代码


296
00:15:58,058 --> 00:16:01,261 line:-2
这对字符串来说会容易一些
就像现在我们对狐狸做的这样


297
00:16:01,328 --> 00:16:03,797 line:-1
但是对于图像来说就有些难度了


298
00:16:03,864 --> 00:16:07,000 line:-1
因为我可以在预览中加入


299
00:16:07,067 --> 00:16:08,502 line:-1
占位符资产


300
00:16:09,136 --> 00:16:09,970 line:-1
但是


301
00:16:10,437 --> 00:16:12,506 line:-1
但这也意味着我们要将此资产


302
00:16:12,573 --> 00:16:14,274 line:-1
与app一起发给用户


303
00:16:14,341 --> 00:16:16,009 line:-1
我不想这样


304
00:16:16,343 --> 00:16:18,278 line:-1
我也不想搞乱我的二进制文件


305
00:16:19,012 --> 00:16:24,084 line:-2
所以今年Xcode就出了一个
新功能来帮助解决这个问题


306
00:16:25,018 --> 00:16:26,720 line:-1
叫做开发资产


307
00:16:26,787 --> 00:16:30,657 line:-2
我现在就来展示这个功能
先打开项目编辑器


308
00:16:32,459 --> 00:16:36,230 line:-1
就在目标下面 下滑到开发资产


309
00:16:36,296 --> 00:16:38,198 line:-1
你可能已经注意到


310
00:16:38,665 --> 00:16:42,269 line:-2
我预先将预览资产
配置成目录 这里会保存所有图像


311
00:16:42,336 --> 00:16:43,570 line:-1
如果你是从头开始


312
00:16:43,637 --> 00:16:46,406 line:-1
并且使用的是新模板


313
00:16:46,473 --> 00:16:48,275 line:-1
它会自动预配置


314
00:16:48,342 --> 00:16:50,077 line:-1
但如果你编辑的是已经存在的app


315
00:16:50,143 --> 00:16:52,279 line:-1
添加这个也很容易


316
00:16:53,046 --> 00:16:55,349 line:-1
现在我将预览资产


317
00:16:55,415 --> 00:16:56,483 line:-1
加入到资产目录


318
00:16:56,550 --> 00:17:00,120 line:-2
就在我的预览数据下面
这是我的资产目录


319
00:17:00,187 --> 00:17:03,190 line:-1
这里已经有一张红狐的图片了


320
00:17:03,257 --> 00:17:04,958 line:-1
我就用它作为占位符


321
00:17:05,925 --> 00:17:08,929 line:-1
然后我打开动物名单元格


322
00:17:10,531 --> 00:17:11,365 line:-1
然后


323
00:17:13,066 --> 00:17:14,101 line:-1
我们可以预览


324
00:17:15,736 --> 00:17:20,040 line:-1
占位符已经是图片名称了


325
00:17:20,107 --> 00:17:23,176 line:-1
我们要做的就是把这个文字改成图像


326
00:17:26,012 --> 00:17:28,549 line:-1
图像就会在预览中出现了


327
00:17:28,916 --> 00:17:29,983 line:-1
看起来不错


328
00:17:30,284 --> 00:17:33,353 line:-1
但是我还想对它进行一些视觉处理


329
00:17:33,420 --> 00:17:35,055 line:-1
让它更加脱颖而出


330
00:17:35,322 --> 00:17:38,392 line:-1
我可以用SwiftUI代码来做


331
00:17:38,926 --> 00:17:43,063 line:-2
这看起来不错
有阴影和叠加


332
00:17:43,130 --> 00:17:45,299 line:-1
看起来不错 我们来看看代码


333
00:17:45,365 --> 00:17:49,403 line:-1
现在单元格的视图大部分


334
00:17:49,469 --> 00:17:51,004 line:-1
都被图像处理代码支配


335
00:17:51,371 --> 00:17:53,874 line:-1
我处理完图片


336
00:17:53,941 --> 00:17:56,643 line:-1
我也不想丢失这些细节


337
00:17:56,710 --> 00:18:00,614 line:-2
所以我Command
点击图像来进行提取


338
00:18:01,348 --> 00:18:02,416 line:-1
点击图像


339
00:18:02,850 --> 00:18:04,518 line:-1
选择提取视图


340
00:18:05,052 --> 00:18:09,022 line:-2
Xcode就会在下面的同一文件中
创建一个新的SwiftUI视图


341
00:18:09,089 --> 00:18:12,192 line:-1
我将其重新命名为动物图像


342
00:18:13,427 --> 00:18:16,363 line:-1
再给它一些参数 也就是图片名称


343
00:18:16,430 --> 00:18:18,932 line:-1
滑下来 这是我的动物图片


344
00:18:19,800 --> 00:18:22,936 line:-1
很简单 删除输入


345
00:18:26,240 --> 00:18:27,474 line:-1
更新预览


346
00:18:31,211 --> 00:18:33,180 line:-1
谢谢 我也觉得很厉害


347
00:18:33,580 --> 00:18:35,148 line:-1
你可以看到预览其实没有变


348
00:18:35,215 --> 00:18:38,685 line:-1
再划上去看看动物单元格是什么样的


349
00:18:38,752 --> 00:18:40,621 line:-1
现在就清楚多了


350
00:18:40,687 --> 00:18:44,024 line:-1
我也可以专注图像处理以外的细节了


351
00:18:45,025 --> 00:18:46,493 line:-1
现在看起来很好


352
00:18:46,560 --> 00:18:49,997 line:-2
请注意 我们现在
关注的只是视图本身


353
00:18:50,063 --> 00:18:53,534 line:-1
但它不会以这种方式出现在用户面前


354
00:18:53,600 --> 00:18:57,037 line:-1
用户只会在列表的上下文中


355
00:18:57,104 --> 00:18:59,406 line:-1
看到这个


356
00:18:59,473 --> 00:19:01,074 line:-1
所以现在我来做这一点


357
00:19:01,842 --> 00:19:05,746 line:-2
实际上我在这个
动物列表文件中已经开始了


358
00:19:05,812 --> 00:19:07,614 line:-1
之前我们还没有动物单元格


359
00:19:07,681 --> 00:19:12,753 line:-2
所以我创建了一个简单的
接收动物的列表


360
00:19:12,819 --> 00:19:15,923 line:-1
每个动物都会在单元格中展示


361
00:19:15,989 --> 00:19:19,560 line:-2
所以我用刚刚创建的新的
动物单元格来替换该代码


362
00:19:19,626 --> 00:19:20,861 line:-1
这里显示出来了


363
00:19:21,461 --> 00:19:23,830 line:-1
这和用户看到的十分接近了


364
00:19:25,199 --> 00:19:28,302 line:-1
但是没有动物园只有一只动物


365
00:19:28,368 --> 00:19:29,203 line:-1
所以


366
00:19:29,536 --> 00:19:34,308 line:-1
我用一些数据来填充该单元格


367
00:19:34,374 --> 00:19:38,078 line:-1
这和用户看到的就很接近了


368
00:19:38,912 --> 00:19:39,913 line:-1
那么要怎么做呢


369
00:19:39,980 --> 00:19:43,750 line:-1
向下滚动到预览配置代码


370
00:19:44,551 --> 00:19:47,087 line:-1
你可以看到我用只有一个元素的


371
00:19:47,154 --> 00:19:48,922 line:-1
数组来填充列表


372
00:19:49,256 --> 00:19:52,693 line:-1
所以我可以在这里进行硬编码


373
00:19:52,759 --> 00:19:54,328 line:-1
添加一些这个


374
00:19:54,595 --> 00:19:56,496 line:-1
三个单元格就会出现


375
00:19:56,864 --> 00:19:57,698 line:-1
很接近了


376
00:19:58,432 --> 00:20:00,601 line:-1
我可以继续这样填充


377
00:20:00,667 --> 00:20:02,402 line:-1
但这过于均匀


378
00:20:02,469 --> 00:20:05,539 line:-1
和用户看到的也不完全一样


379
00:20:06,139 --> 00:20:08,475 line:-1
动物名称有长有短


380
00:20:08,542 --> 00:20:09,610 line:-1
颜色也不一样


381
00:20:09,676 --> 00:20:13,413 line:-1
我真的很想知道它会是什么样子


382
00:20:14,014 --> 00:20:15,482 line:-1
那我还有其他选择吗


383
00:20:16,083 --> 00:20:17,251 line:-1
我还可以做一件事


384
00:20:17,317 --> 00:20:21,388 line:-2
因为预览代码是作为
app的一部分运行的


385
00:20:21,688 --> 00:20:24,057 line:-1
我实际上可以启动网络代码


386
00:20:24,124 --> 00:20:27,194 line:-1
点击网络 获取一些数据来做填充


387
00:20:27,261 --> 00:20:28,262 line:-1
可以这样做


388
00:20:28,328 --> 00:20:30,430 line:-1
但这样做会有一些问题


389
00:20:30,497 --> 00:20:31,331 line:-1
首先


390
00:20:32,032 --> 00:20:34,801 line:-2
我还没有创建网络代码
所以无法实现


391
00:20:35,102 --> 00:20:38,438 line:-1
第二 即使我创建了还是会有问题


392
00:20:38,505 --> 00:20:41,241 line:-1
因为每次我编辑该界面时


393
00:20:41,942 --> 00:20:45,212 line:-1
我必须要在线 且必须提供服务


394
00:20:46,280 --> 00:20:48,182 line:-1
这不是一个好方法


395
00:20:48,248 --> 00:20:53,620 line:-1
所以我想做的是获取数据并缓存


396
00:20:53,687 --> 00:20:55,556 line:-1
而且不用app中的


397
00:20:55,622 --> 00:20:58,559 line:-1
其他组件就可以看到视图


398
00:20:58,625 --> 00:21:00,460 line:-1
所以我已经提前做好；


399
00:21:00,527 --> 00:21:04,164 line:-1
我创建了JSON文件缓存


400
00:21:04,231 --> 00:21:05,065 line:-1
我来给你看看


401
00:21:05,465 --> 00:21:07,868 line:-2
预览数据下面就是一个
简单的JSON文件


402
00:21:07,935 --> 00:21:11,338 line:-1
就是一些动物列表来填充我们的数据


403
00:21:11,405 --> 00:21:12,739 line:-1
我能做的就是


404
00:21:13,707 --> 00:21:15,542 line:-1
我并不想把这个也一起传给用户


405
00:21:15,609 --> 00:21:17,277 line:-1
所以待会我要把它


406
00:21:18,045 --> 00:21:21,381 line:-2
添加到开发资产
但现在先暂时跳过


407
00:21:21,448 --> 00:21:26,453 line:-1
现在它已经在这里了 我只需要加载


408
00:21:26,520 --> 00:21:29,056 line:-1
我还要在预览代码中添加一些代码


409
00:21:29,122 --> 00:21:31,225 line:-1
从主包中加载JSON


410
00:21:31,758 --> 00:21:35,128 line:-2
并使用JSON解码器
来解析我的数据


411
00:21:35,195 --> 00:21:37,965 line:-1
现在我就有一组数据了 我可以


412
00:21:38,031 --> 00:21:39,299 line:-1
我把这个关了


413
00:21:39,600 --> 00:21:40,467 line:-1
我可以用


414
00:21:41,702 --> 00:21:45,072 line:-2
Self.sampleAnimals
来替代


415
00:21:46,440 --> 00:21:48,275 line:-1
更新预览


416
00:21:49,142 --> 00:21:51,745 line:-1
UI就会用样本动物进行填充


417
00:21:55,482 --> 00:21:56,316 line:-1
谢谢


418
00:21:56,984 --> 00:22:00,787 line:-1
这就比较像用户看到的界面了


419
00:22:00,854 --> 00:22:03,490 line:-1
但是在布局上马上也出现了一些问题


420
00:22:03,557 --> 00:22:05,592 line:-1
比如 这里的雪豹太长了


421
00:22:05,659 --> 00:22:08,562 line:-1
这个名称应该顶端对其


422
00:22:09,496 --> 00:22:12,633 line:-1
另外一个问题是 标题太大了


423
00:22:12,699 --> 00:22:15,669 line:-2
你现在看还可以
但到了这里就有点空


424
00:22:15,736 --> 00:22:17,871 line:-1
我想顶部和底部的字再大一点


425
00:22:17,938 --> 00:22:21,175 line:-1
因为这些改变都是在动物单元格里的


426
00:22:21,241 --> 00:22:23,277 line:-1
所以找到动物单元格进行连接


427
00:22:25,078 --> 00:22:25,946 line:-1
看看发生了什么


428
00:22:26,747 --> 00:22:29,016 line:-1
刚刚的预览不见了


429
00:22:29,082 --> 00:22:34,354 line:-2
我回到了单元格的上下文
所以列表不见了


430
00:22:34,855 --> 00:22:37,791 line:-1
我想在找到该单元格出现的


431
00:22:37,858 --> 00:22:40,627 line:-1
上下文的同时进行编辑


432
00:22:40,694 --> 00:22:41,528 line:-1
也就是该列表


433
00:22:41,962 --> 00:22:44,531 line:-1
我可以在此处添加预览


434
00:22:44,598 --> 00:22:45,666 line:-1
来预览该列表


435
00:22:45,732 --> 00:22:49,002 line:-2
就像我之前说到的
你可以提供任何内容


436
00:22:49,069 --> 00:22:50,137 line:-1
作为预览的一部分


437
00:22:50,604 --> 00:22:53,707 line:-1
但这也就意味着每次我要看


438
00:22:53,774 --> 00:22:54,608 line:-1
这里面的东西时


439
00:22:54,675 --> 00:22:56,643 line:-2
我要一遍又一编地
复制相同的代码


440
00:22:56,710 --> 00:22:57,744 line:-1
所以还有更好的方法


441
00:22:59,079 --> 00:23:00,347 line:-1
我来告诉你可以怎么做


442
00:23:00,848 --> 00:23:02,249 line:-1
再次回到动物列表


443
00:23:02,316 --> 00:23:04,585 line:-1
会看到和之前一样的预览列表


444
00:23:04,651 --> 00:23:08,121 line:-1
用到左下角这个固定按钮


445
00:23:08,422 --> 00:23:09,356 line:-1
点击


446
00:23:09,423 --> 00:23:10,591 line:-1
你就会看到


447
00:23:10,657 --> 00:23:15,262 line:-1
它将当前预览固定到此预览中


448
00:23:15,329 --> 00:23:18,632 line:-2
因为我是在不同的文件中进行导航的
我们来看看会发生什么


449
00:23:20,767 --> 00:23:21,935 line:-1
此预览不变


450
00:23:23,337 --> 00:23:24,171 line:-1
谢谢


451
00:23:27,241 --> 00:23:29,109 line:-1
这里有一个标题告诉我


452
00:23:29,176 --> 00:23:31,478 line:-1
现在的预览和之前


453
00:23:31,545 --> 00:23:32,679 line:-1
文件里的不一样


454
00:23:32,746 --> 00:23:35,415 line:-1
这是动物列表里的 所以你知道


455
00:23:35,482 --> 00:23:38,352 line:-1
如果我想从这个文件中获取原始预览


456
00:23:38,418 --> 00:23:40,587 line:-1
我就直接滑下去 一切都还在


457
00:23:40,654 --> 00:23:42,356 line:-1
我不需要做任何上下文


458
00:23:46,994 --> 00:23:48,962 line:-1
现在我知道要做什么


459
00:23:49,029 --> 00:23:52,032 line:-2
对VStack点击Command
调用检查


460
00:23:52,099 --> 00:23:54,835 line:-1
就可以检查和改变这里的对齐方式


461
00:23:55,736 --> 00:23:56,837 line:-1
放大一点


462
00:23:58,005 --> 00:23:58,972 line:-1
我们来看看


463
00:24:02,075 --> 00:24:06,246 line:-1
这有点太大了


464
00:24:06,313 --> 00:24:07,247 line:-1
我们回去


465
00:24:07,314 --> 00:24:09,583 line:-1
再放小一点


466
00:24:11,218 --> 00:24:12,553 line:-1
看起来好多了 我喜欢


467
00:24:12,619 --> 00:24:13,887 line:-1
所以就让它这样了


468
00:24:14,454 --> 00:24:15,956 line:-1
下一步就是


469
00:24:16,023 --> 00:24:21,762 line:-2
是一个操作列表 你可以在每个
单元格被选中时使用这些操作


470
00:24:22,129 --> 00:24:25,299 line:-1
现在我要进行单元格实现


471
00:24:25,933 --> 00:24:28,435 line:-1
在另一个叫可选动物单元格的文件中


472
00:24:29,670 --> 00:24:32,873 line:-2
因为我不想破坏我的数据
我的动物单元格模型数据


473
00:24:32,940 --> 00:24:36,910 line:-1
不想加一些来自UI的东西


474
00:24:36,977 --> 00:24:40,047 line:-2
我添加了一个小包装程序
把这些数据都包起来


475
00:24:40,414 --> 00:24:43,016 line:-1
再向其添加选定的点


476
00:24:43,083 --> 00:24:47,354 line:-2
我再用这个
叫可选动物单元格的另一个视图


477
00:24:47,421 --> 00:24:50,591 line:-2
它要做的就是接受模型
显示我的动物单元格


478
00:24:50,657 --> 00:24:54,394 line:-1
检查选定点并显示操作


479
00:24:54,461 --> 00:24:55,729 line:-1
这些小图标


480
00:24:55,796 --> 00:24:58,065 line:-1
会给我更多的信息并拍照


481
00:24:59,399 --> 00:25:01,101 line:-1
如果我取消固定预览


482
00:25:01,168 --> 00:25:04,271 line:-2
你可以看到我为此单元格
创建了两个预览


483
00:25:04,338 --> 00:25:07,307 line:-2
一个是选定状态
另一个是未选定状态


484
00:25:07,741 --> 00:25:10,277 line:-2
反了 这个是未选定的
这个是选定的


485
00:25:11,712 --> 00:25:13,380 line:-1
这是一个好方法


486
00:25:13,447 --> 00:25:16,183 line:-2
但同样我希望在列表
上下文中看到这些


487
00:25:17,084 --> 00:25:19,353 line:-1
所以我要将选择也加入列表中


488
00:25:19,419 --> 00:25:21,321 line:-1
所以定位到动物列表


489
00:25:23,156 --> 00:25:28,362 line:-2
SwiftUI处理这样的数据的
方式是使用State变量


490
00:25:28,428 --> 00:25:32,299 line:-1
所以我在此添加以储存数据


491
00:25:32,366 --> 00:25:34,668 line:-1
就是我现在选择的数据


492
00:25:35,836 --> 00:25:38,172 line:-1
再用一些代码


493
00:25:38,472 --> 00:25:42,843 line:-2
进行翻译
因为该数据指定了所选模型


494
00:25:42,910 --> 00:25:46,280 line:-2
但不管单元格是否被选中
它都有一个布尔值


495
00:25:46,713 --> 00:25:48,182 line:-1
我要把它也加上去


496
00:25:49,783 --> 00:25:51,552 line:-1
现在我做了两件事


497
00:25:51,618 --> 00:25:53,353 line:-1
我要用这些可选动物表格


498
00:25:54,688 --> 00:25:56,089 line:-1
来替换动物列表


499
00:25:57,457 --> 00:25:58,525 line:-1
我只需要这样


500
00:25:58,592 --> 00:26:00,194 line:-1
更新预览


501
00:26:01,195 --> 00:26:02,563 line:-1
你可以看到


502
00:26:03,797 --> 00:26:04,932 line:-1
没有什么变化


503
00:26:05,432 --> 00:26:06,633 line:-1
为什么呢


504
00:26:06,700 --> 00:26:07,534 line:-1
因为


505
00:26:08,435 --> 00:26:10,304 line:-1
这里的选则是可选的


506
00:26:10,737 --> 00:26:12,873 line:-1
但是我的列表默认是没有被选中


507
00:26:12,940 --> 00:26:16,176 line:-1
所以看不到我刚刚改的东西


508
00:26:16,243 --> 00:26:18,879 line:-1
我也可以点击实时模式按钮


509
00:26:20,080 --> 00:26:21,248 line:-1
用实时视图查看页面


510
00:26:21,548 --> 00:26:23,150 line:-1
如果我点击


511
00:26:24,151 --> 00:26:25,285 line:-1
选择就出现了


512
00:26:26,019 --> 00:26:27,421 line:-1
和我想的一样


513
00:26:28,188 --> 00:26:30,891 line:-1
但如果我想创建静态 谢谢


514
00:26:31,358 --> 00:26:34,461 line:-1
但如果我想创建静态预览


515
00:26:35,262 --> 00:26:38,599 line:-1
来提醒我选择状态是这样的


516
00:26:38,665 --> 00:26:41,869 line:-2
所以当我对这些
进行更改时 我不会忘记


517
00:26:41,935 --> 00:26:43,871 line:-1
验证更改后的选择看起来是什么样的


518
00:26:43,937 --> 00:26:46,106 line:-1
我可以在这里创建静态预览


519
00:26:46,173 --> 00:26:48,342 line:-1
但是要对代码做出一些更改


520
00:26:48,408 --> 00:26:51,245 line:-1
因为这些数据是比较私密的


521
00:26:51,311 --> 00:26:54,348 line:-1
我无法从预览中做出更改


522
00:26:54,414 --> 00:26:56,517 line:-1
那么我该怎么做才能展示这个预览呢


523
00:26:56,583 --> 00:26:58,619 line:-1
我要做的就是将其移动至


524
00:26:58,685 --> 00:27:00,420 line:-1
我可以设置的绑定中


525
00:27:00,687 --> 00:27:03,357 line:-1
我将通过引入新视图来实现


526
00:27:03,423 --> 00:27:05,926 line:-1
我要在动物列表中创建私密视图


527
00:27:05,993 --> 00:27:07,961 line:-1
会运用于所有的实现中


528
00:27:08,028 --> 00:27:09,229 line:-1
我要叫它内容


529
00:27:09,596 --> 00:27:13,233 line:-2
因为这是私密的
所以只在该文件夹中可用


530
00:27:14,001 --> 00:27:17,804 line:-1
然后采用我刚刚构建的所有实现


531
00:27:18,272 --> 00:27:22,109 line:-1
移动到我刚刚声明的视图中


532
00:27:22,476 --> 00:27:23,610 line:-1
最后一点是


533
00:27:23,677 --> 00:27:27,414 line:-1
是为动物列表添加主体实现


534
00:27:27,481 --> 00:27:28,549 line:-1
根据是其内容


535
00:27:28,615 --> 00:27:32,085 line:-2
这样做只是证实了我刚刚
声明的内容视图


536
00:27:32,386 --> 00:27:33,420 line:-1
运用于动物


537
00:27:33,487 --> 00:27:35,789 line:-1
并创建一个绑定到选定的状态


538
00:27:36,356 --> 00:27:38,692 line:-1
现在可以看到预览中的改变


539
00:27:38,759 --> 00:27:40,527 line:-1
而不是预览动物列表了


540
00:27:41,128 --> 00:27:43,063 line:-1
预览的是动物列表内容


541
00:27:44,731 --> 00:27:45,799 line:-1
当我更新后


542
00:27:47,568 --> 00:27:49,369 line:-1
可以看到选定出现了


543
00:27:49,436 --> 00:27:51,371 line:-1
实现了选定的静态预览


544
00:27:51,438 --> 00:27:55,709 line:-1
现 在 我在这里设置动物列表预览


545
00:27:55,776 --> 00:27:58,445 line:-1
同样可以验证未选定时


546
00:27:58,512 --> 00:27:59,580 line:-1
动物列表看起来是什么样的


547
00:27:59,646 --> 00:28:04,117 line:-2
而且 我仍然可以使用
Live Vote验证过渡和动画


548
00:28:04,184 --> 00:28:05,886 line:-1
并对预览进行编辑


549
00:28:07,487 --> 00:28:08,322 line:-1
谢谢


550
00:28:11,625 --> 00:28:14,461 line:-1
现在我们介绍了XCode预览


551
00:28:14,528 --> 00:28:15,929 line:-1
以及如何在SwiftUI中使用


552
00:28:15,996 --> 00:28:19,099 line:-1
但是它能做的还有更多


553
00:28:19,633 --> 00:28:22,503 line:-1
下面欢迎Nate进行讲解


554
00:28:25,172 --> 00:28:27,508 line:-1
（演示）


555
00:28:27,574 --> 00:28:28,475 line:-1
谢谢Anton


556
00:28:33,347 --> 00:28:35,983 line:-1
并不是所有人都是从这周开始


557
00:28:36,049 --> 00:28:37,918 line:-2
用SwiftUI写一款
全新的app的


558
00:28:38,519 --> 00:28:40,220 line:-2
可能有些人在
App Store已经有app


559
00:28:40,287 --> 00:28:42,155 line:-1
或者是有已经做了几年的app了


560
00:28:42,923 --> 00:28:47,761 line:-2
因为SwiftUI与UIKit、AppKit
和WatchKit都有很好的集成


561
00:28:48,295 --> 00:28:51,164 line:-2
也因为API是
SwiftUI的一部分


562
00:28:52,032 --> 00:28:55,802 line:-2
Xcode预览在这些框架下
也能很好地工作


563
00:28:57,971 --> 00:28:59,306 line:-1
在我们的动物园app


564
00:28:59,907 --> 00:29:02,176 line:-1
当你点击详情按钮


565
00:29:02,543 --> 00:29:04,611 line:-2
也就是Anton刚刚在
单元格添加的按钮


566
00:29:04,878 --> 00:29:08,282 line:-1
就会展示选定动物的细节


567
00:29:08,882 --> 00:29:13,420 line:-2
该界面是用
UIViewController写的


568
00:29:14,788 --> 00:29:16,356 line:-1
叫动物视图控制器


569
00:29:17,524 --> 00:29:18,659 line:-1
让我给你们看看代码


570
00:29:19,426 --> 00:29:21,628 line:-1
我先关闭画布


571
00:29:21,695 --> 00:29:22,729 line:-1
按Command 返回


572
00:29:23,630 --> 00:29:25,766 line:-1
再转到动物视图控制器


573
00:29:27,768 --> 00:29:30,003 line:-1
我给你们看看视图控制器是怎样的


574
00:29:30,270 --> 00:29:32,539 line:-1
但是先不急创建和运行


575
00:29:32,606 --> 00:29:34,741 line:-1
我先创建一个预览


576
00:29:35,542 --> 00:29:37,344 line:-1
现在预览还只是代码


577
00:29:37,411 --> 00:29:40,347 line:-1
所以我们可以继续在此文件中


578
00:29:40,414 --> 00:29:43,150 line:-2
与此UIViewController
一起创建预览


579
00:29:43,684 --> 00:29:46,520 line:-1
但在这个例子中 我想创建新文件


580
00:29:47,120 --> 00:29:50,157 line:-2
按Command-0
打开项目导航器


581
00:29:50,557 --> 00:29:54,027 line:-1
之后在我想要的组中添加新文件


582
00:29:54,661 --> 00:29:56,563 line:-1
右击 选择新文件


583
00:29:57,431 --> 00:29:58,265 line:-1
SwiftFile


584
00:29:58,332 --> 00:30:01,702 line:-2
输入名称
动物图片控制器预览


585
00:30:06,306 --> 00:30:08,976 line:-2
预览API是
SwiftUI的一部分


586
00:30:09,042 --> 00:30:12,045 line:-1
所以要编写预览 你需要导入该框架


587
00:30:13,313 --> 00:30:15,616 line:-1
为了创建在画布中显示的预览


588
00:30:15,682 --> 00:30:18,685 line:-2
你需要为预览提供程序协议
添加一致性


589
00:30:19,219 --> 00:30:21,455 line:-1
在该例中 我要创建一个全新类型


590
00:30:21,522 --> 00:30:25,392 line:-2
来确定该协议
将其命名为动物视图控制器预览


591
00:30:26,226 --> 00:30:29,396 line:-1
现在 预览提供程序协议只有一个


592
00:30:29,463 --> 00:30:33,400 line:-1
必须实现的要求 即静态预览属性


593
00:30:33,967 --> 00:30:36,803 line:-1
为实现该属性 我要返回某些视图


594
00:30:36,870 --> 00:30:40,807 line:-2
在该例中我们需要嵌入
动物视图控制器中的视图


595
00:30:42,042 --> 00:30:46,747 line:-2
SwiftUI支持以
Representables的形式


596
00:30:47,047 --> 00:30:50,450 line:-2
将UIViewControllers
嵌入到SwiftViews中


597
00:30:50,751 --> 00:30:52,019 line:-1
欲了解更多详情


598
00:30:52,085 --> 00:30:54,488 line:-1
请查看集成SwiftUI演讲


599
00:30:54,988 --> 00:30:55,889 line:-1
在我们的例子中


600
00:30:56,156 --> 00:30:58,825 line:-2
因为我们想要
UIViewController


601
00:30:59,293 --> 00:31:02,996 line:-2
我们想要添加一个可表示的
UIViewController的一致性


602
00:31:03,530 --> 00:31:05,732 line:-1
方便起见 我继续操作


603
00:31:05,799 --> 00:31:08,569 line:-2
将其与
PreviewProvider一起添加


604
00:31:08,635 --> 00:31:10,637 line:-1
至动物视图控制器预览类别


605
00:31:11,972 --> 00:31:13,440 line:-1
为了达到目的


606
00:31:13,907 --> 00:31:16,109 line:-2
UIViewController
可表示的协议


607
00:31:16,176 --> 00:31:19,046 line:-1
还有三个要求需要实现


608
00:31:19,413 --> 00:31:23,317 line:-1
第一种是指定要表示的


609
00:31:23,383 --> 00:31:24,618 line:-2
UIViewController
类型


610
00:31:25,052 --> 00:31:27,454 line:-1
在该例中就是动物视图控制器


611
00:31:28,088 --> 00:31:29,089 line:-1
接下来


612
00:31:29,156 --> 00:31:33,026 line:-2
我们需要描述如何创建这些
带有上下文的


613
00:31:33,093 --> 00:31:35,262 line:-1
动物视图控制器


614
00:31:35,562 --> 00:31:37,231 line:-1
该上下文包括


615
00:31:37,297 --> 00:31:39,800 line:-1
用户是在明亮或是深色模式下使用


616
00:31:39,867 --> 00:31:41,535 line:-1
或是动态字体的大小


617
00:31:43,470 --> 00:31:44,304 line:-1
在该例中


618
00:31:44,371 --> 00:31:46,273 line:-2
我们已经在
UIStoryBoard


619
00:31:46,340 --> 00:31:47,674 line:-1
添加了包好的一类


620
00:31:47,741 --> 00:31:49,910 line:-1
我要从中加载动物视图控制器


621
00:31:51,478 --> 00:31:53,680 line:-1
我们要实现的第三个要求


622
00:31:53,747 --> 00:31:55,449 line:-2
就是更新
UIViewController


623
00:31:55,916 --> 00:31:59,419 line:-1
这允许我们根据环境的变化等


624
00:31:59,486 --> 00:32:02,723 line:-1
改变视图控制器的外观


625
00:32:03,390 --> 00:32:05,692 line:-1
在该例中 我们需要创建预览


626
00:32:06,159 --> 00:32:09,596 line:-1
所以我将继续将此实现留空


627
00:32:11,198 --> 00:32:12,866 line:-1
现在我们已经符合


628
00:32:13,233 --> 00:32:15,669 line:-2
UIViewController
可表示的协议


629
00:32:15,969 --> 00:32:18,739 line:-1
我们已准备好实施预览的方法


630
00:32:20,240 --> 00:32:23,343 line:-1
具体来说 我们将返回符合


631
00:32:23,410 --> 00:32:25,646 line:-2
UIViewController
表示类型的实例


632
00:32:25,712 --> 00:32:28,081 line:-1
也就是动物视图控制器预览


633
00:32:28,982 --> 00:32:30,984 line:-1
在这几行代码


634
00:32:31,451 --> 00:32:35,122 line:-2
你可以在Xcode中看到
UIViewController的预览


635
00:32:35,189 --> 00:32:36,290 line:-1
我们来看看


636
00:32:37,090 --> 00:32:39,159 line:-1
我要关闭项目导航


637
00:32:39,459 --> 00:32:42,296 line:-2
再打开画布
按Command-选项-返回


638
00:32:43,664 --> 00:32:47,100 line:-1
因为我们在源编辑器中添加了新方法


639
00:32:47,167 --> 00:32:48,435 line:-1
所以我们要重新创建


640
00:32:48,869 --> 00:32:50,437 line:-1
在画布中


641
00:32:50,504 --> 00:32:54,107 line:-2
UIViewController预览
是用Swift写的


642
00:32:54,174 --> 00:32:57,110 line:-1
谢谢 这真的很棒


643
00:32:57,945 --> 00:33:02,716 line:-2
在UIKit中用Swift写的
UIViewController预览


644
00:33:05,452 --> 00:33:07,688 line:-1
但是当我看该视图控制器


645
00:33:07,754 --> 00:33:09,189 line:-1
我发现了一个问题


646
00:33:09,489 --> 00:33:12,059 line:-1
这些文本读起来太困难了


647
00:33:13,026 --> 00:33:16,897 line:-2
图片上方的文字下面
还有一个底层视图


648
00:33:17,231 --> 00:33:20,100 line:-1
它是半透明的 因此让文本更加好读


649
00:33:20,367 --> 00:33:22,703 line:-1
但是这还不够半透明


650
00:33:23,136 --> 00:33:26,473 line:-1
所以让我们继续提高不透明度


651
00:33:26,940 --> 00:33:28,408 line:-1
我将该预览固定


652
00:33:28,709 --> 00:33:31,278 line:-1
这样我们就可以看到做出的改变


653
00:33:31,979 --> 00:33:34,348 line:-1
转到动物视图控制器文件


654
00:33:37,384 --> 00:33:41,955 line:-2
在这里我将底层视图的
alpha值调到0.5


655
00:33:42,689 --> 00:33:44,691 line:-1
画布立马做出更新


656
00:33:44,958 --> 00:33:48,829 line:-2
为视图控制器显示出
刚刚所做改变的预览


657
00:33:49,830 --> 00:33:53,200 line:-2
Xcode的预览
并不只是与SwiftUI一起工作


658
00:33:53,467 --> 00:33:55,402 line:-1
而是所有Swift代码


659
00:33:55,469 --> 00:33:58,405 line:-1
而且 我们可以获得所有热交换


660
00:33:58,472 --> 00:34:01,842 line:-1
和增量更新而无需重新编译文字值


661
00:34:01,909 --> 00:34:03,310 line:-1
就像Anton说的


662
00:34:03,377 --> 00:34:07,080 line:-2
SwiftUI UIAppKit
或WatchKit都可以一起工作


663
00:34:11,717 --> 00:34:12,553 line:-1
谢谢


664
00:34:15,121 --> 00:34:17,623 line:-2
Anton向你们展示了
动物视图控制器


665
00:34:18,158 --> 00:34:21,094 line:-2
我已经对其进行编辑了
所以我已经加上了预览


666
00:34:21,527 --> 00:34:22,563 line:-1
让我给你们看看


667
00:34:23,030 --> 00:34:26,934 line:-1
取消固定动物视图编辑器


668
00:34:27,201 --> 00:34:29,503 line:-1
点击左下角取消固定按钮


669
00:34:29,803 --> 00:34:30,771 line:-1
再转到


670
00:34:31,103 --> 00:34:33,540 line:-1
动物操作视图控制器表示


671
00:34:34,474 --> 00:34:37,543 line:-1
这是动物操作视图控制器的预览


672
00:34:38,277 --> 00:34:41,348 line:-1
我们觉得按钮隔太开了


673
00:34:41,614 --> 00:34:45,284 line:-1
我们觉得IImage不太合适


674
00:34:45,351 --> 00:34:47,688 line:-1
它与平台不太一致


675
00:34:48,655 --> 00:34:50,123 line:-1
我们来解决这个问题


676
00:34:50,991 --> 00:34:53,627 line:-1
打开动物操作视图操作器文件


677
00:34:54,027 --> 00:34:57,464 line:-1
因为我实是在很久很久之前写的


678
00:34:57,531 --> 00:34:59,533 line:-2
所以我用的是
Objective-C


679
00:35:03,003 --> 00:35:04,304 line:-1
谢谢


680
00:35:04,972 --> 00:35:06,139 line:-1
很棒的语言


681
00:35:07,374 --> 00:35:10,377 line:-1
我们来把填充详情按钮的


682
00:35:10,444 --> 00:35:12,980 line:-2
系统图像改成
info.circle


683
00:35:14,748 --> 00:35:15,582 line:-1
再返回到


684
00:35:16,149 --> 00:35:17,651 line:-1
我们的预览


685
00:35:18,318 --> 00:35:19,486 line:-1
再更新预览


686
00:35:19,820 --> 00:35:23,023 line:-2
因为这是用Objective-C
而不是Swift写的


687
00:35:24,892 --> 00:35:28,295 line:-2
Xcode会告诉构建系统
启动正常重建


688
00:35:28,362 --> 00:35:31,832 line:-1
而不是使用增量更新或热交换


689
00:35:31,899 --> 00:35:34,134 line:-1
但还是很快


690
00:35:34,201 --> 00:35:37,604 line:-1
特别是比进行app重建


691
00:35:37,671 --> 00:35:40,240 line:-1
运行又导航来说快多了


692
00:35:41,208 --> 00:35:45,512 line:-2
Xcode预览不仅适用于
SwiftUI或是Swift文件


693
00:35:45,846 --> 00:35:50,117 line:-2
甚至UIKit、AppKit和WatchKit中
用Objective-C写的代码


694
00:35:50,184 --> 00:35:52,586 line:-1
而是适用于Xcode能理解的


695
00:35:52,653 --> 00:35:54,087 line:-1
所有源文件


696
00:36:03,697 --> 00:36:04,831 line:0
（演示）


697
00:36:04,898 --> 00:36:05,732 line:0
正如你所见


698
00:36:06,433 --> 00:36:09,636 line:-2
Xcode预览可以
真正加快工作流程


699
00:36:10,237 --> 00:36:11,605 line:-1
但是现在我想说说


700
00:36:12,206 --> 00:36:16,610 line:-1
如何调整你的app


701
00:36:17,411 --> 00:36:20,214 line:-2
如何调整app体系结构
使Xcode预览更加适合你


702
00:36:20,848 --> 00:36:21,682 line:-1
特别是


703
00:36:22,282 --> 00:36:23,917 line:-1
我想说说在我们动物园app中


704
00:36:23,984 --> 00:36:25,586 line:-1
出现过的一个类型


705
00:36:25,853 --> 00:36:28,055 line:-1
叫动物单元格模型


706
00:36:28,922 --> 00:36:30,457 line:-1
我们做了什么呢


707
00:36:31,658 --> 00:36:32,559 line:-1
来看看


708
00:36:32,626 --> 00:36:34,428 line:-1
我们填充了动物视图


709
00:36:35,195 --> 00:36:36,163 line:-1
动物单元格


710
00:36:36,897 --> 00:36:39,566 line:-1
因为SwiftUI流畅的API


711
00:36:40,300 --> 00:36:41,134 line:-1
还有


712
00:36:42,936 --> 00:36:46,573 line:-2
我们也可以很简便地
实现body方法


713
00:36:47,508 --> 00:36:49,910 line:-1
我们也用了单元格模型


714
00:36:51,011 --> 00:36:53,113 line:-1
哪个数据


715
00:36:53,180 --> 00:36:57,985 line:-2
进入视图的哪部分
都是非常明确的


716
00:37:00,921 --> 00:37:01,855 line:-1
这样


717
00:37:02,122 --> 00:37:04,758 line:-1
我们就可以使用动物模型对象


718
00:37:04,825 --> 00:37:06,960 line:-1
再将其直接传入视图


719
00:37:07,728 --> 00:37:09,730 line:-1
但是我们没有 原因有二


720
00:37:11,465 --> 00:37:12,299 line:-1
第一


721
00:37:12,833 --> 00:37:14,868 line:-1
使用视图模型


722
00:37:15,202 --> 00:37:16,436 line:-1
添加新预览


723
00:37:17,104 --> 00:37:18,505 line:-1
是很容易的


724
00:37:19,206 --> 00:37:23,343 line:-1
为实现预览提供程序的一个好方法


725
00:37:23,744 --> 00:37:27,014 line:-1
是在视图模型中添加静态数组


726
00:37:27,381 --> 00:37:31,351 line:-1
并在您的静态预览属性的实现中


727
00:37:31,952 --> 00:37:35,989 line:-1
迭代该视图模型数组并填充视图


728
00:37:36,557 --> 00:37:40,727 line:-1
当新数据配置


729
00:37:40,794 --> 00:37:43,096 line:-1
会导致不同布局时 这就很有用了


730
00:37:43,931 --> 00:37:48,168 line:-2
你要做的就是创建一个新的
视图模型并将其加入该数组


731
00:37:49,203 --> 00:37:51,405 line:-1
然后你就会在画布上看到新预览


732
00:37:51,471 --> 00:37:53,207 line:-1
显示你的新视图布局


733
00:37:54,575 --> 00:37:57,110 line:-1
在说第二个为什么我们


734
00:37:57,477 --> 00:38:00,380 line:-2
要在动物园app中使用
视图模型的原因前


735
00:38:00,881 --> 00:38:03,550 line:-1
如果你们忍得了我的话


736
00:38:03,617 --> 00:38:04,551 line:-1
我想提一点哲学问题


737
00:38:08,188 --> 00:38:12,726 line:-1
应用程序的模型层包含丰富的对象图


738
00:38:13,427 --> 00:38:16,930 line:-2
在动物园app中
我们有动物模型对象


739
00:38:17,531 --> 00:38:20,868 line:-1
而且该动物模型对象也只是


740
00:38:21,235 --> 00:38:23,203 line:-1
许多动物中的一个


741
00:38:24,605 --> 00:38:25,672 line:-1
另一方面


742
00:38:25,739 --> 00:38:29,076 line:-1
该动物模型对象中含有基因数组


743
00:38:30,878 --> 00:38:33,614 line:-2
那么你要怎么将
这些信息展示给用户呢


744
00:38:34,948 --> 00:38:36,016 line:-1
好


745
00:38:36,483 --> 00:38:38,018 line:-1
并不是一次做到的


746
00:38:40,454 --> 00:38:44,691 line:-2
比如说 你不会在动物单元格里
加入基因组信息


747
00:38:44,758 --> 00:38:46,260 line:-1
信息量太大了


748
00:38:47,127 --> 00:38:49,496 line:-1
所以你要从


749
00:38:49,563 --> 00:38:52,132 line:-1
模型对象中提取


750
00:38:52,566 --> 00:38:54,101 line:-1
最重要的信息


751
00:38:54,535 --> 00:38:57,237 line:-1
再创建预览


752
00:38:57,771 --> 00:39:00,841 line:-1
但不是用一对一的方式来提取


753
00:39:01,375 --> 00:39:04,578 line:-1
通常要对数据进行一些转换


754
00:39:05,379 --> 00:39:09,016 line:-1
我们从动物模型对象中提取了两部分


755
00:39:09,416 --> 00:39:14,321 line:-2
并将它们组合起来
创建一个包含属性和种类的单个文本


756
00:39:16,990 --> 00:39:19,626 line:-1
转化和提取的过程


757
00:39:19,893 --> 00:39:21,028 line:-1
很容易出错


758
00:39:21,662 --> 00:39:24,064 line:-1
但是用预览模型就简单多了


759
00:39:25,899 --> 00:39:27,167 line:-1
这是一个预览模型


760
00:39:28,068 --> 00:39:32,606 line:-2
特别是我们的动物单元格模型
也是从模型对象构建的


761
00:39:34,441 --> 00:39:37,811 line:-2
我们就可以清楚地看到这些数据
从模型对象中被提取出来


762
00:39:37,878 --> 00:39:38,912 line:-1
再进行结合


763
00:39:38,979 --> 00:39:42,416 line:-2
我们就可以向用户展示
我们想要的东西了


764
00:39:43,650 --> 00:39:47,254 line:-1
而且这一点非常有用


765
00:39:47,321 --> 00:39:50,591 line:-1
因为检验起来更容易


766
00:39:50,924 --> 00:39:54,294 line:-1
当我们遇到新的模型对象


767
00:39:54,828 --> 00:39:58,198 line:-1
需要以不同的方式向用户展示时


768
00:39:58,699 --> 00:40:01,101 line:-1
我们需要做的就是利用XCTest


769
00:40:01,168 --> 00:40:07,007 line:-2
添加一个新的测试用例
并在该测试用例中创建一个模型对象


770
00:40:07,074 --> 00:40:08,876 line:-1
从中创建一个视图模型


771
00:40:08,942 --> 00:40:10,677 line:-1
再验证该视图模型


772
00:40:10,744 --> 00:40:13,747 line:-1
是否具有我们希望向用户显示的数据


773
00:40:13,814 --> 00:40:15,883 line:-1
以表示该模型对象


774
00:40:17,017 --> 00:40:20,454 line:-2
这也是为什么我们
要在动物园app中


775
00:40:20,521 --> 00:40:21,688 line:-1
使用视图模型的第二个原因


776
00:40:22,523 --> 00:40:23,624 line:-1
（应用架构）


777
00:40:23,690 --> 00:40:24,525 line:-1
那么对于总体app架构来说


778
00:40:24,591 --> 00:40:27,094 line:-1
这意味什么呢


779
00:40:29,997 --> 00:40:32,766 line:-1
构建一款好app 重要的一点是


780
00:40:33,300 --> 00:40:38,172 line:-1
是在你的模型层中


781
00:40:38,238 --> 00:40:40,007 line:-1
采用丰富的模型对象图


782
00:40:40,974 --> 00:40:43,277 line:-1
再向你的用户进行展示


783
00:40:43,343 --> 00:40:46,246 line:-1
再从中提取最重要的信息


784
00:40:46,613 --> 00:40:49,082 line:-1
再以好看的方式展示给用户


785
00:40:50,417 --> 00:40:54,087 line:-1
使用视图模型会简单得多


786
00:40:55,022 --> 00:40:56,056 line:-1
原因是


787
00:40:56,723 --> 00:40:59,159 line:-1
你可以使用以下流程


788
00:41:00,494 --> 00:41:01,328 line:-1
首先


789
00:41:01,929 --> 00:41:05,032 line:-1
为你的模型对象构建视图模型


790
00:41:07,367 --> 00:41:09,236 line:-1
这个过程很容易出错


791
00:41:09,303 --> 00:41:11,705 line:-1
所以你一遍又一遍地测试


792
00:41:12,139 --> 00:41:15,242 line:-1
确保视图模型包含你想让


793
00:41:15,309 --> 00:41:16,610 line:-1
你的用户看到的完整数据


794
00:41:17,010 --> 00:41:19,913 line:-1
第二 对于每个视图模型的不同风格


795
00:41:21,748 --> 00:41:25,652 line:-2
都会呈现不同的布局
你都要加上预览


796
00:41:26,019 --> 00:41:28,088 line:-1
你可以在画布中检验


797
00:41:28,388 --> 00:41:32,426 line:-1
你的视图和你想让用户看到的一样


798
00:41:33,160 --> 00:41:35,796 line:-1
最后 你可以用XCUI测试


799
00:41:36,330 --> 00:41:39,199 line:-1
验证你的app在创建过程中的


800
00:41:39,499 --> 00:41:40,367 line:-1
工作方式


801
00:41:41,802 --> 00:41:44,338 line:-1
我想花点时间谈谈性能


802
00:41:44,404 --> 00:41:45,639 line:-1
（app的生命周期）


803
00:41:47,541 --> 00:41:48,542 line:-1
我们刚刚说过


804
00:41:49,409 --> 00:41:50,844 line:-1
预览只是一些代码


805
00:41:51,778 --> 00:41:53,013 line:-1
而后果就是


806
00:41:53,080 --> 00:41:56,016 line:-1
你不想在显示预览的时候


807
00:41:56,583 --> 00:41:58,785 line:-1
运行任意操作


808
00:41:59,052 --> 00:42:01,555 line:-1
你不想要这么多的运算


809
00:42:02,456 --> 00:42:04,725 line:-1
Xcode预览也是同样的道理


810
00:42:04,791 --> 00:42:08,195 line:-2
它会调用app
完成启动 进行操作


811
00:42:08,695 --> 00:42:12,232 line:-1
所以你也不想做一些无关紧要的工作


812
00:42:12,499 --> 00:42:16,570 line:-1
特别是当你只想看在画布上的


813
00:42:16,637 --> 00:42:20,541 line:-1
预览视图时 你并不想


814
00:42:20,607 --> 00:42:21,875 line:-1
设置UI层次结构


815
00:42:22,409 --> 00:42:23,243 line:-1
所以


816
00:42:23,610 --> 00:42:28,015 line:-2
识别app场景 使其符合
UIWindow场景代理


817
00:42:28,315 --> 00:42:31,485 line:-1
实现场景连接到操作方法


818
00:42:31,919 --> 00:42:34,521 line:-1
并在那里设置UI层次结构


819
00:42:35,355 --> 00:42:38,325 line:-1
看看 这并不只是对开发者有益


820
00:42:38,392 --> 00:42:40,494 line:-1
能让你更快地看到预览


821
00:42:40,761 --> 00:42:42,896 line:-1
对用户来说也是好消息


822
00:42:43,797 --> 00:42:46,133 line:-1
当你的app在后台运行时


823
00:42:46,400 --> 00:42:48,302 line:-1
它不会做一堆额外的工作


824
00:42:48,669 --> 00:42:51,705 line:-2
它只做它需要做的事情
然后就回去睡觉了


825
00:42:52,139 --> 00:42:54,274 line:-1
也避免了浪费用户的电池


826
00:42:55,843 --> 00:43:00,814 line:-1
（总结）


827
00:43:02,516 --> 00:43:03,550 line:-1
我们来做一个回顾


828
00:43:04,318 --> 00:43:08,789 line:-2
我们说到了如何写预览
预览API是SwiftUI的一部分


829
00:43:08,856 --> 00:43:10,190 line:-1
它的功能真的很强大


830
00:43:10,557 --> 00:43:13,994 line:-2
当你在写预览的时候
可以用到所有的SwiftUI


831
00:43:15,562 --> 00:43:18,232 line:-2
你也学习了如何使用
高级Xcode工作流程


832
00:43:18,298 --> 00:43:20,701 line:-1
比如说预览固定 在你要在不同


833
00:43:20,767 --> 00:43:23,103 line:-1
文件转换的时候固定预览视图


834
00:43:23,704 --> 00:43:26,640 line:-2
我们也说到了
如何使用开发资产


835
00:43:26,707 --> 00:43:29,576 line:-1
让你拥有丰富有趣的预览


836
00:43:31,712 --> 00:43:34,515 line:-1
而不用把测试数据也传给用户


837
00:43:35,082 --> 00:43:35,916 line:-1
最后


838
00:43:36,250 --> 00:43:37,284 line:-1
你也看到了


839
00:43:38,218 --> 00:43:41,555 line:-2
预览并不只是适用于
SwiftUI或者Swift


840
00:43:41,889 --> 00:43:44,658 line:-2
而是所有Xcode
能够理解的源文件类型


841
00:43:44,725 --> 00:43:47,427 line:-2
可以是用UIKit、AppKit
或是WatchKit写的


842
00:43:55,035 --> 00:43:57,070 line:-2
这就是掌握
Xcode预览的全部内容


843
00:43:57,137 --> 00:43:58,272 line:-1
谢谢大家捧场


844
00:43:58,338 --> 00:44:00,774 line:-1
（更多信息）


845
00:44:02,309 --> 00:44:03,577 line:0
来实验室找我们吧

