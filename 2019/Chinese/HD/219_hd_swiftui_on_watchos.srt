1
00:00:06,039 --> 00:00:09,910 line:0
（watchOS上的
SwiftUI)


2
00:00:12,679 --> 00:00:14,781 line:-1
你们好 欢迎大家


3
00:00:15,782 --> 00:00:16,950 line:-1
我是Matthew Koonce


4
00:00:17,284 --> 00:00:19,653 line:-2
我是watchOS架构团队的
一名工程师


5
00:00:20,654 --> 00:00:22,389 line:-1
我非常激动今天有机会


6
00:00:22,656 --> 00:00:25,325 line:-2
能与我的朋友和同事
Josh Weinberg一起


7
00:00:25,959 --> 00:00:27,928 line:-2
聊聊如何使用
SwiftUI在你的手腕


8
00:00:28,395 --> 00:00:32,031 line:-1
上创建一些令人叫绝的用户体验


9
00:00:34,368 --> 00:00:37,271 line:-1
从功能简单的watchOS 1起


10
00:00:38,105 --> 00:00:40,407 line:-2
Apple Watch
同watchOS一起


11
00:00:40,941 --> 00:00:43,110 line:-1
已经有了显著的进步


12
00:00:44,444 --> 00:00:48,015 line:-2
过去的几年 我们一直在添加
新的API和开发其他功能


13
00:00:48,382 --> 00:00:51,785 line:-1
你们也一直在提升app的使用体验


14
00:00:53,554 --> 00:00:55,122 line:-1
但那只是开始


15
00:00:56,156 --> 00:00:57,491 line:-1
因为在watchOS 6上


16
00:00:58,225 --> 00:01:00,694 line:-1
我们将整个平台提升到了一个新高度


17
00:01:01,628 --> 00:01:02,863 line:-1
对于独立app


18
00:01:03,430 --> 00:01:07,100 line:-2
我们解耦了iOS和
watch OS的用户体验


19
00:01:08,035 --> 00:01:09,136 line:-1
这一次 你将可以


20
00:01:09,570 --> 00:01:11,872 line:-1
通过新的App Store直接在


21
00:01:12,172 --> 00:01:13,941 line:-2
Apple Watch上
下载app


22
00:01:14,575 --> 00:01:17,578 line:-2
我们也增加了对新的API的支持
比如流式音频


23
00:01:18,212 --> 00:01:20,013 line:-1
以及延长了会话运行时长


24
00:01:22,382 --> 00:01:24,718 line:-1
但是我们也研发了一个特别酷的功能


25
00:01:25,452 --> 00:01:29,623 line:-2
那就是watchOS的
SwiftUI


26
00:01:35,596 --> 00:01:38,165 line:-2
SwiftUI有强大的
声明式的语法


27
00:01:39,032 --> 00:01:41,535 line:-2
且已被集成至Xcode的
Canvas中


28
00:01:42,469 --> 00:01:45,205 line:-1
你现在可以很容易就能创建各种视图


29
00:01:46,340 --> 00:01:47,474 line:-1
在watchOS上


30
00:01:48,108 --> 00:01:50,310 line:-1
我们有一个全新的UI框架


31
00:01:51,011 --> 00:01:54,147 line:-1
同时我们也有很多酷炫的API


32
00:01:54,314 --> 00:01:57,851 line:-1
你可以用这些新功能创建


33
00:01:58,051 --> 00:01:59,319 line:-1
你之前无法想象的世界


34
00:02:01,255 --> 00:02:02,089 line:-1
比如


35
00:02:03,290 --> 00:02:04,124 line:-1
在这个列表上


36
00:02:04,725 --> 00:02:07,261 line:-1
我们现在支持滑动删除


37
00:02:07,828 --> 00:02:09,162 line:-1
和拖拽重新排序


38
00:02:10,396 --> 00:02:12,799 line:-1
你也可以在watch上使用


39
00:02:13,033 --> 00:02:14,635 line:-2
SwiftUI强大的
动画特效来创建复杂


40
00:02:14,801 --> 00:02:18,071 line:-1
可中断的自定义动画特效


41
00:02:20,340 --> 00:02:23,043 line:-2
现在SwiftUI已经完全
集成至WatchKit


42
00:02:24,077 --> 00:02:26,713 line:-2
也就是说
SwiftUI视图和已有的


43
00:02:27,214 --> 00:02:28,482 line:-1
WatchKit接口控制器


44
00:02:28,549 --> 00:02:31,084 line:-1
可以共存


45
00:02:32,219 --> 00:02:34,054 line:-1
以及 我们甚至支持


46
00:02:34,121 --> 00:02:36,957 line:-1
将WatchKit提供的视图对象


47
00:02:37,024 --> 00:02:39,259 line:-2
直接嵌入至你的
SwiftUI视图层次中


48
00:02:39,326 --> 00:02:41,295 line:-2
比如这个新设计的
“用Apple登录”按钮


49
00:02:44,131 --> 00:02:46,466 line:-2
事实上
SwiftUI已经对所有已有的


50
00:02:46,533 --> 00:02:49,336 line:-1
UI框架的集成提供了强大的支持


51
00:02:50,204 --> 00:02:52,339 line:-2
我们将有一个关于
这个话题的完整的讨论


52
00:02:52,406 --> 00:02:54,074 line:-1
我非常推荐你们参加


53
00:02:55,776 --> 00:03:00,214 line:-2
SwiftUI已被
完全集成至watchOS


54
00:03:01,281 --> 00:03:05,452 line:-2
即你可以在watchOS 6上
使用所有API和这些年


55
00:03:06,220 --> 00:03:08,288 line:-1
我们添加的其他酷炫的功能


56
00:03:08,989 --> 00:03:10,624 line:-1
无论你是在使用一个流式音频app


57
00:03:10,991 --> 00:03:13,026 line:-1
或是最近加扩展了的运行时间功能


58
00:03:13,360 --> 00:03:16,163 line:-2
或是你在为这个平台
创建一些新的东西


59
00:03:18,765 --> 00:03:21,502 line:-1
现在 我们终于有了一个可以在


60
00:03:22,035 --> 00:03:24,438 line:-1
所有的设备上运行的UI框架


61
00:03:25,305 --> 00:03:28,141 line:-2
无论你的开发环境是38毫米的
Apple Watch


62
00:03:28,675 --> 00:03:31,678 line:-1
或是65英寸的电视


63
00:03:32,079 --> 00:03:33,747 line:-1
所有一切都能用SwiftUI完成


64
00:03:35,115 --> 00:03:37,084 line:-2
但Apple Watch
是一个特别的设备


65
00:03:38,151 --> 00:03:40,654 line:-2
在创建app时
Apple Watch有独特规则


66
00:03:43,056 --> 00:03:44,591 line:-2
为Apple Watch
创建app时


67
00:03:44,658 --> 00:03:47,861 line:-2
更像是在为你的iOS app
创建一个mini版本


68
00:03:49,062 --> 00:03:52,299 line:-1
它是你app功能集合的精髓


69
00:03:53,967 --> 00:03:55,802 line:-2
Apple Watch
是一个高级的个人设备


70
00:03:55,869 --> 00:03:59,039 line:-1
它让我们更容易获取到重要的信息


71
00:04:01,208 --> 00:04:03,744 line:-2
当你在iOS app
耗费了好几分钟


72
00:04:03,810 --> 00:04:05,612 line:-1
或是在杂货店排队时


73
00:04:06,180 --> 00:04:09,183 line:-2
使用Apple Watch
会更为简单


74
00:04:10,217 --> 00:04:11,685 line:-1
用户一眼就可以看到信息


75
00:04:12,619 --> 00:04:14,154 line:-1
轻点几下就能快速回复


76
00:04:16,156 --> 00:04:18,892 line:-1
所以 你可能会开始为


77
00:04:19,560 --> 00:04:22,129 line:-1
Apple Watch创建app


78
00:04:23,130 --> 00:04:25,065 line:-1
但它更像是创建了


79
00:04:25,499 --> 00:04:27,367 line:-1
一种联系整个系统里


80
00:04:27,434 --> 00:04:28,902 line:-1
各种不同触碰功能的体验


81
00:04:30,170 --> 00:04:32,472 line:-1
无论你是在使用Siri相关的功能


82
00:04:33,540 --> 00:04:35,209 line:-1
在表盘上创建一条动态的提示


83
00:04:35,342 --> 00:04:38,245 line:-1
来实时查看信息


84
00:04:39,012 --> 00:04:40,447 line:-1
或是使用complication


85
00:04:42,683 --> 00:04:45,252 line:-2
对于Apple Watch来说
用户体验非常重要


86
00:04:45,752 --> 00:04:48,255 line:-1
如何定义这种体验则更为重要


87
00:04:49,690 --> 00:04:51,525 line:-1
这种体验需要


88
00:04:51,925 --> 00:04:54,294 line:-1
结合上下文 准时


89
00:04:55,229 --> 00:04:58,432 line:-1
在正确的时间给予用户正确的信息


90
00:05:00,934 --> 00:05:02,202 line:-1
以及在手表的屏幕上


91
00:05:03,136 --> 00:05:05,038 line:-1
简单易懂


92
00:05:05,806 --> 00:05:06,974 line:-1
设计精巧


93
00:05:08,942 --> 00:05:11,411 line:-1
它应该精简交互步骤


94
00:05:12,112 --> 00:05:14,481 line:-1
只需轻点几下就能帮助用户完成任务


95
00:05:16,750 --> 00:05:19,186 line:-1
那我们则需要先了解SwiftUI


96
00:05:20,854 --> 00:05:23,457 line:-2
使用SwiftUI
你就能在Apple Watch上


97
00:05:23,524 --> 00:05:25,626 line:-1
创建你一直想要的上述的用户体验


98
00:05:27,694 --> 00:05:29,963 line:-1
今天我们就来聊聊在watchOS


99
00:05:30,030 --> 00:05:31,932 line:-1
上使用SwiftUI的几个方法


100
00:05:33,133 --> 00:05:36,937 line:-2
首先 我们来看下
如何利用SwiftUI


101
00:05:38,772 --> 00:05:42,309 line:-1
在app中创建一则高度交互的通知


102
00:05:44,111 --> 00:05:46,146 line:-1
以及 利用数码表冠的高级特征


103
00:05:46,680 --> 00:05:48,248 line:-1
来提升用户的感官感受


104
00:05:49,983 --> 00:05:51,652 line:-1
首先我们来看一个app


105
00:05:52,386 --> 00:05:54,555 line:-1
这是Josh和我一起研发的


106
00:06:02,196 --> 00:06:04,331 line:-1
请看Xcode


107
00:06:04,565 --> 00:06:06,867 line:-2
Josh和我一同开发的app
叫做Pop Quiz


108
00:06:07,634 --> 00:06:10,971 line:-2
这是一个抽认卡app
我可以用它随时学习


109
00:06:12,506 --> 00:06:15,375 line:-1
现在我打开的是接口控制器


110
00:06:16,376 --> 00:06:20,214 line:-2
如果你之前使用过WatchKit
你会很熟悉接口控制器


111
00:06:20,480 --> 00:06:23,784 line:-2
这是另一个接口控制器
但它有点不同


112
00:06:25,018 --> 00:06:30,357 line:-2
首先这个接口控制器
是WK托管控制器的子类


113
00:06:31,024 --> 00:06:34,461 line:-2
是由SwiftUI提供的
一类接口控制器


114
00:06:35,896 --> 00:06:39,766 line:-1
现在 因为它是接口控制器类型


115
00:06:39,833 --> 00:06:42,035 line:-1
这个接口控制器可以


116
00:06:42,703 --> 00:06:44,838 line:-1
和其他接口控制器一同使用


117
00:06:46,340 --> 00:06:49,009 line:-1
比如 我在故事板建立的这个


118
00:06:49,343 --> 00:06:51,712 line:-1
app初始化接口控制器


119
00:06:52,279 --> 00:06:55,315 line:-2
让这个接口控制器成为
我的app的入口界面


120
00:06:56,750 --> 00:06:59,786 line:-2
但是 又比如 如果我想
在我的故事板使用


121
00:07:00,621 --> 00:07:03,924 line:-1
文章视图 我可以在这里将


122
00:07:03,991 --> 00:07:07,594 line:-2
我的接口控制器放在其他
WK接口控制器一旁


123
00:07:08,028 --> 00:07:12,165 line:-2
给WatchKit和
SwiftUI增加了良好的互用性


124
00:07:13,867 --> 00:07:16,203 line:-2
我也可以使用相同的
WatchKit接口控制器


125
00:07:16,270 --> 00:07:19,439 line:-2
来推送API
以此来推送这个接口控制器


126
00:07:20,240 --> 00:07:23,911 line:-2
或者我可以使用
SwiftUI的导航按钮


127
00:07:24,878 --> 00:07:28,448 line:-1
给一个接口控制器一个目的地


128
00:07:29,082 --> 00:07:31,685 line:-2
接着从SwiftUI
推送至WatchKit


129
00:07:33,654 --> 00:07:36,023 line:-1
那么 我们现在来看这段代码


130
00:07:37,057 --> 00:07:40,594 line:-2
你可能留意到和使用
WatchKit有点不同


131
00:07:41,395 --> 00:07:42,796 line:-1
这里没有IB渠道


132
00:07:44,131 --> 00:07:46,934 line:-2
那是因为我们使用了
WK托管控制器和SwiftUI


133
00:07:47,634 --> 00:07:50,470 line:-1
我们整个app的接口控制器的视图


134
00:07:50,804 --> 00:07:52,706 line:-1
都由SwiftUI来定义


135
00:07:53,473 --> 00:07:54,575 line:-1
非常酷


136
00:07:56,543 --> 00:07:58,278 line:-1
另一个新的不同是


137
00:07:58,579 --> 00:08:00,280 line:-1
主体属性的使用


138
00:08:00,347 --> 00:08:04,318 line:-2
这是WK托管控制器
提供的一个新属性


139
00:08:04,751 --> 00:08:05,853 line:-1
我们在这里覆盖重写


140
00:08:07,354 --> 00:08:09,923 line:-1
我们可以指定这个body属性


141
00:08:09,990 --> 00:08:13,260 line:-2
让我们希望的SwiftUI视图
关联至接口控制器


142
00:08:14,094 --> 00:08:16,029 line:-1
既然如此 这是我们的主题列表


143
00:08:16,964 --> 00:08:19,900 line:-2
这是我的不同抽认卡的
一系列主题列表


144
00:08:20,334 --> 00:08:22,703 line:-1
在右侧 你能看到它的预览图


145
00:08:24,371 --> 00:08:26,406 line:-1
接下来 我么来聊一下主题列表


146
00:08:29,176 --> 00:08:33,413 line:-1
如名所见 主题列表就是一个列表


147
00:08:34,414 --> 00:08:36,850 line:-1
这个列表表明 对每个模块…


148
00:08:37,017 --> 00:08:38,585 line:-1
不好意思 对我的模块的每个主题


149
00:08:39,352 --> 00:08:40,921 line:-1
我创建了一个导航按钮


150
00:08:41,154 --> 00:08:43,090 line:-2
它会跳转到另一个
SwiftUI视图


151
00:08:43,323 --> 00:08:45,158 line:-1
这就是抽认卡列表


152
00:08:46,426 --> 00:08:48,061 line:-1
它创建主题单元格


153
00:08:49,196 --> 00:08:52,199 line:-1
我使用这个列表行面板颜色修改器


154
00:08:52,866 --> 00:08:55,302 line:-1
每个单元格的颜色就是由它确定的


155
00:08:56,870 --> 00:08:58,438 line:-1
下面的主题单元格


156
00:08:59,006 --> 00:09:00,541 line:-1
你能看到 代码非常简洁


157
00:09:02,075 --> 00:09:04,845 line:-1
这里 只用了我主题的标题


158
00:09:06,013 --> 00:09:08,916 line:-2
字体选择
System Rounded字体


159
00:09:09,249 --> 00:09:10,884 line:-2
这个字体在
Apple Watch上非常好看


160
00:09:12,819 --> 00:09:14,922 line:-1
好的 另外一件需要说明的事


161
00:09:15,522 --> 00:09:17,658 line:-1
是上面的app对象绑定的使用


162
00:09:18,592 --> 00:09:21,195 line:-2
使用app对象绑定
我能让SwiftUI知道


163
00:09:21,461 --> 00:09:24,331 line:-1
这个模块是这个视图的数据来源


164
00:09:26,333 --> 00:09:29,970 line:-2
只要这个模块数据有变动
对应的这个视图就会自动更新


165
00:09:31,505 --> 00:09:34,374 line:-2
现在 了解了数据如何
在SwiftUI之间传递


166
00:09:34,441 --> 00:09:36,210 line:-1
是非常重要的一个话题


167
00:09:36,877 --> 00:09:40,247 line:-2
在SwiftUI中的数据流演讲中
我们会来专门介绍


168
00:09:40,314 --> 00:09:41,715 line:-1
我非常推荐你们参加


169
00:09:42,616 --> 00:09:44,251 line:-1
现在 我们需要知道


170
00:09:44,318 --> 00:09:47,254 line:-2
这就是我如何让我的模块
和我的列表同步的


171
00:09:49,056 --> 00:09:50,390 line:-1
现在点击这个按钮


172
00:09:51,091 --> 00:09:52,359 line:-1
让我们来模拟器上使用这个app


173
00:09:53,861 --> 00:09:57,965 line:-2
这个app可以用了
我能在Xcode的右边滚动它


174
00:09:59,333 --> 00:10:02,436 line:-2
如你所见 默认情况下
我们的app运行非常好


175
00:10:03,237 --> 00:10:04,438 line:-1
关于这个列表


176
00:10:04,738 --> 00:10:06,440 line:-1
我们在后台做了非常酷的东西


177
00:10:06,507 --> 00:10:10,511 line:-1
比如随着列表的滚动 动画效果很赞


178
00:10:10,844 --> 00:10:12,246 line:-1
折叠这些单元格


179
00:10:12,312 --> 00:10:14,548 line:-1
这些内容就像从你的手腕流了出去


180
00:10:16,917 --> 00:10:20,354 line:-1
关于这个列表 我还有一些事情要做


181
00:10:20,854 --> 00:10:21,955 line:-1
那我们现在开始吧


182
00:10:23,223 --> 00:10:24,525 line:-1
首先


183
00:10:24,591 --> 00:10:27,094 line:-1
我想在每个主题单元格


184
00:10:27,461 --> 00:10:28,562 line:-1
添加一个标签


185
00:10:29,496 --> 00:10:32,833 line:-1
来展示我的每个主题下有几张卡片


186
00:10:33,834 --> 00:10:35,035 line:-1
这样我一看就能知道


187
00:10:35,102 --> 00:10:36,703 line:-1
还有多少内容我需要学习


188
00:10:38,305 --> 00:10:39,540 line:-1
现在我们来实现这个功能吧


189
00:10:39,606 --> 00:10:41,308 line:-1
我需要一个VStack


190
00:10:42,075 --> 00:10:44,578 line:-2
Xcode的编辑器
让一切都变简单了


191
00:10:46,013 --> 00:10:49,516 line:-2
只需按Command 点击文本
就能快速弹出菜单


192
00:10:50,851 --> 00:10:53,520 line:-1
选择“嵌入VStack”选项


193
00:10:55,756 --> 00:10:56,890 line:-1
代码就被添加了


194
00:10:57,658 --> 00:10:59,092 line:-1
在文本下面


195
00:10:59,693 --> 00:11:02,329 line:-1
我能添加卡片的数量


196
00:11:03,096 --> 00:11:04,698 line:-1
你能看到浏览图马上就更新了


197
00:11:05,666 --> 00:11:09,269 line:-2
现在你能看到
VStack默认居中对齐


198
00:11:10,070 --> 00:11:12,406 line:-1
但我想要领先对齐


199
00:11:13,407 --> 00:11:14,942 line:-1
同样 我们可以用编辑器来实现


200
00:11:16,410 --> 00:11:19,246 line:-2
选择VStack
按Command键 点击它


201
00:11:19,313 --> 00:11:20,914 line:-1
选择检查器


202
00:11:21,782 --> 00:11:24,117 line:-1
这个视窗展示了不同类型的修饰符


203
00:11:24,184 --> 00:11:25,886 line:-1
这样我就可以修改VStack


204
00:11:26,854 --> 00:11:29,590 line:-1
选择领先对齐选项


205
00:11:31,191 --> 00:11:33,093 line:-1
浏览图就又更新了


206
00:11:33,160 --> 00:11:34,361 line:-1
很快我们就完成了


207
00:11:36,230 --> 00:11:39,366 line:-2
现在 我们在SwiftUI
使用领先对齐和尾随对齐


208
00:11:39,933 --> 00:11:42,870 line:-2
因为默认情况下
我们要支持右到左的语言


209
00:11:43,670 --> 00:11:47,374 line:-2
如我的项目中有一个国际化语言文件
是阿拉伯语或希伯来语


210
00:11:47,841 --> 00:11:50,410 line:-2
默认情况下 整个app的
用户界面将会左右翻转


211
00:11:50,944 --> 00:11:53,847 line:-1
这样就能默认支持从右到左的语言


212
00:11:55,949 --> 00:11:58,418 line:-1
在这里 我还想再添加其它一些东西


213
00:11:58,485 --> 00:12:01,555 line:-2
我想添加一个符号
这样我就能将这些主题联系起来


214
00:12:02,389 --> 00:12:05,659 line:-1
我想要它出现在我的文字的一侧


215
00:12:07,160 --> 00:12:08,695 line:-2
我可以用HStack
来实现这个功能


216
00:12:10,030 --> 00:12:11,732 line:-1
所以 我们再次使用编辑器


217
00:12:12,132 --> 00:12:13,500 line:-2
按Command键
同时点击这个VStack


218
00:12:14,101 --> 00:12:16,236 line:-1
选择“嵌入HStack”选项


219
00:12:17,704 --> 00:12:21,108 line:-2
接着我就能插入符号了
一个表情符号


220
00:12:22,242 --> 00:12:25,245 line:-2
现在 它看着有点小
我想让它变大一点


221
00:12:26,280 --> 00:12:29,550 line:-1
所以 再一次使用我们熟悉的检查器


222
00:12:29,716 --> 00:12:32,486 line:-2
按Command键 同时点击文本
弹出检查器


223
00:12:33,187 --> 00:12:36,089 line:-1
现在有很多不同的上下文定义的选项


224
00:12:37,057 --> 00:12:40,360 line:-1
在字体中选择标题字体


225
00:12:41,328 --> 00:12:43,463 line:-1
这些选择器让一切都变得简单操作


226
00:12:43,530 --> 00:12:45,899 line:-1
比如添加和修改这段代码


227
00:12:45,966 --> 00:12:48,902 line:-2
因为它在我的代码库里
添加真实的代码


228
00:12:48,969 --> 00:12:51,705 line:-1
不会改变我的故事版的POS文件


229
00:12:51,772 --> 00:12:54,441 line:-2
实际上 它教会我如何写
优质的SwiftUI的代码


230
00:12:56,743 --> 00:12:59,746 line:-1
短短几行SwiftUI代码


231
00:12:59,813 --> 00:13:01,114 line:-1
让这些单元格变得更完美了


232
00:13:01,181 --> 00:13:05,152 line:-2
整个过程我们都能实时
在Xcode右侧查看效果


233
00:13:06,220 --> 00:13:07,788 line:-1
我构建和运行这个app的需要


234
00:13:09,189 --> 00:13:11,925 line:-2
此次在Apple Watch上的
迭代真的很厉害


235
00:13:12,926 --> 00:13:16,129 line:-2
比如说 我们终于可以
快速完成设计流程


236
00:13:16,530 --> 00:13:19,233 line:-1
我不必在设备上来回检查


237
00:13:21,401 --> 00:13:24,137 line:-2
好的 在SwiftUI上
还有其他新的功能


238
00:13:24,404 --> 00:13:28,075 line:-2
特别是
针对于Apple Watch的


239
00:13:29,243 --> 00:13:30,944 line:-1
这是一个完全新的


240
00:13:31,345 --> 00:13:32,980 line:-1
滚动样式设计


241
00:13:34,214 --> 00:13:36,483 line:-2
我们来实现它
首先 我们给每个单元格


242
00:13:36,550 --> 00:13:37,651 line:-1
增加一点高度


243
00:13:39,753 --> 00:13:41,221 line:-1
回到检查器


244
00:13:43,390 --> 00:13:44,525 line:-1
找到高度


245
00:13:45,325 --> 00:13:46,693 line:-1
我将高度设为100


246
00:13:48,095 --> 00:13:49,196 line:-1
预览图更新了


247
00:13:50,030 --> 00:13:51,365 line:-1
现在回到我的列表


248
00:13:52,032 --> 00:13:55,169 line:-2
这个全新设计的滚动风格
叫做Carousel样式


249
00:13:56,103 --> 00:13:58,105 line:-1
一行SwiftUI代码就能实现


250
00:13:58,238 --> 00:14:01,308 line:-1
我们完全改变了列表滚动的方式


251
00:14:02,543 --> 00:14:04,144 line:-1
如果我现在在预览图中滚动它


252
00:14:05,045 --> 00:14:07,381 line:-1
你能看到每个卡片


253
00:14:07,447 --> 00:14:08,615 line:-1
现在都在屏幕中间居中了


254
00:14:09,716 --> 00:14:11,818 line:-1
这为我们的用户带来了全新的体验


255
00:14:11,885 --> 00:14:13,320 line:-1
当它们滚动内容时


256
00:14:13,987 --> 00:14:16,790 line:-2
它能让用户集中注意到
列表中的每个元素


257
00:14:17,758 --> 00:14:21,295 line:-2
现在 我决定为Pop Quiz
添加这种滚动风格


258
00:14:21,361 --> 00:14:23,630 line:-1
因为列表上只有不多的元素


259
00:14:24,264 --> 00:14:26,867 line:-1
使用一个框架来让它们变大


260
00:14:27,568 --> 00:14:30,337 line:-2
这就是Carousel
列表样式的厉害之处


261
00:14:31,405 --> 00:14:33,240 line:-2
如果你的每个单元格里
都有交互的设计


262
00:14:33,307 --> 00:14:36,410 line:-2
使用Carousel列表样式
也是一个好选择


263
00:14:36,977 --> 00:14:38,612 line:-1
因为它能让我们的用户


264
00:14:39,079 --> 00:14:41,248 line:-1
能专注 而且更容易选中目标


265
00:14:43,750 --> 00:14:45,118 line:-1
好 接下来


266
00:14:45,886 --> 00:14:49,723 line:-2
在列表上 我们也新增了
两个其他的交互功能


267
00:14:49,957 --> 00:14:52,092 line:-2
都是Apple Watch
新的交互设计


268
00:14:53,894 --> 00:14:56,096 line:-1
第一个是通过拖拽来重新排序


269
00:14:57,231 --> 00:15:00,000 line:-1
现在 使用一个修饰符就能简单完成


270
00:15:01,168 --> 00:15:02,870 line:-1
你可以添加onMove


271
00:15:03,170 --> 00:15:05,272 line:-1
传给onMove的闭包


272
00:15:05,506 --> 00:15:07,708 line:-1
告诉它如何更新你的数据库


273
00:15:08,475 --> 00:15:11,245 line:-1
你只需从一个元素移动到另一个


274
00:15:12,946 --> 00:15:15,549 line:-1
添加删除


275
00:15:15,782 --> 00:15:16,683 line:-1
通过滑动就能删除


276
00:15:17,451 --> 00:15:19,520 line:-2
传统的委托代理
需要好几个方法来实现


277
00:15:19,586 --> 00:15:21,188 line:-1
使用SwiftUI


278
00:15:21,555 --> 00:15:23,156 line:-1
只需要一行代码就能创建滑动的动作


279
00:15:24,658 --> 00:15:27,327 line:-1
现在 我滑动这个列表


280
00:15:28,662 --> 00:15:30,531 line:-1
动画特效真酷


281
00:15:31,231 --> 00:15:34,635 line:-1
创建这些有趣好玩的单元格的代码


282
00:15:35,235 --> 00:15:36,336 line:-1
都在这 就在预览视图的旁边


283
00:15:36,937 --> 00:15:38,539 line:-1
我找到了一个我想删除的单元格


284
00:15:39,072 --> 00:15:41,642 line:-1
我在预览视图中只需向右滑就能删除


285
00:15:42,476 --> 00:15:44,378 line:-1
就是这么简单和强大


286
00:15:53,987 --> 00:15:54,821 line:-1
好


287
00:15:55,088 --> 00:15:58,859 line:-2
这就是如何在我们的主题列表中
使用SwiftUI


288
00:15:59,293 --> 00:16:01,128 line:-2
以及创建之前不可能
在Apple Watch


289
00:16:01,195 --> 00:16:03,497 line:-1
实现的交互体验


290
00:16:04,965 --> 00:16:07,534 line:-2
但这只是SwiftUI
和Apple Watch


291
00:16:07,668 --> 00:16:09,303 line:-1
的冰山一角


292
00:16:10,704 --> 00:16:13,774 line:-2
想要知道如何将
你的用户体验再提升一个等级


293
00:16:14,441 --> 00:16:16,443 line:-2
欢迎Josh Weinberg
上台演讲


294
00:16:23,684 --> 00:16:24,551 line:-1
谢谢 Matthew


295
00:16:25,519 --> 00:16:26,353 line:-1
那么...


296
00:16:26,920 --> 00:16:30,357 line:-2
Matthew已经聊了
很多使用SwiftUI


297
00:16:30,424 --> 00:16:34,328 line:-2
在Apple Watch上
创建酷炫的交互体验


298
00:16:34,795 --> 00:16:36,163 line:-1
不过 就像我们之前说的


299
00:16:36,496 --> 00:16:39,266 line:-2
Apple Watch上的
用户体验不仅仅只是


300
00:16:39,533 --> 00:16:42,236 line:-1
在各种app上


301
00:16:43,604 --> 00:16:45,706 line:-2
如何提升Apple Watch上
的用户体验


302
00:16:45,772 --> 00:16:48,976 line:-1
首先 我想要谈谈交互式通知


303
00:16:49,877 --> 00:16:52,312 line:-2
现在Apple Watch上的
交互式通知


304
00:16:52,613 --> 00:16:54,414 line:-1
是向用户提供


305
00:16:54,481 --> 00:16:58,185 line:-1
实时和上下文信息首要功能


306
00:16:59,486 --> 00:17:03,090 line:-2
Apple交互式通知
由两个重要的部分组成


307
00:17:03,557 --> 00:17:05,459 line:-1
第一个是短看


308
00:17:06,260 --> 00:17:08,862 line:-1
现在 一个短看被注册了


309
00:17:08,929 --> 00:17:12,299 line:-1
它直接展示了通知的有效信息


310
00:17:13,000 --> 00:17:15,736 line:-1
它同时也自动展示了app的图标


311
00:17:16,837 --> 00:17:19,540 line:-1
短看出现一段时间之后


312
00:17:19,906 --> 00:17:22,542 line:-1
它会自动转变成长看


313
00:17:23,544 --> 00:17:25,646 line:-1
长看是一个滚动的界面


314
00:17:25,712 --> 00:17:28,214 line:-1
它允许你客制化操作主体


315
00:17:28,715 --> 00:17:31,118 line:-1
和控制下面的通知动作


316
00:17:32,119 --> 00:17:34,721 line:-2
你现在看到的是Yelp的
一个试用版本


317
00:17:34,788 --> 00:17:38,125 line:-1
他们利用通知


318
00:17:38,425 --> 00:17:40,027 line:-1
创建了一个完整的预定流程


319
00:17:41,295 --> 00:17:43,597 line:-1
我们如何扩展Pop Quiz呢


320
00:17:43,730 --> 00:17:45,432 line:-1
为了和它的名字相符


321
00:17:45,966 --> 00:17:47,334 line:-1
我们来创建一则通知


322
00:17:47,401 --> 00:17:50,304 line:-1
它能将一张抽认卡直接在主体中展示


323
00:17:50,604 --> 00:17:52,306 line:-1
来保证我不间断学习


324
00:17:55,142 --> 00:17:55,976 line:-1
那么...


325
00:17:56,944 --> 00:17:59,880 line:-1
我想从通知控制器开始


326
00:18:00,814 --> 00:18:02,916 line:-1
通知控制器由


327
00:18:03,116 --> 00:18:05,452 line:-1
我们创建项目时的模版提供


328
00:18:05,686 --> 00:18:08,822 line:-1
只要勾选了“包含通知”


329
00:18:10,424 --> 00:18:13,493 line:-1
和接口控制器非常类似 它...


330
00:18:14,228 --> 00:18:16,263 line:-1
很新 是SwiftUI的一部分


331
00:18:16,330 --> 00:18:20,567 line:-1
但它继承自WK用户接口控制器


332
00:18:21,268 --> 00:18:23,904 line:-1
所以这个新的用户通知托管控制器


333
00:18:24,204 --> 00:18:26,573 line:-1
为交互式通知提供了入口点


334
00:18:26,640 --> 00:18:28,809 line:-2
以及允许我们提供
SwiftUI内容


335
00:18:30,277 --> 00:18:32,746 line:-1
如果你之前使用过 你会非常熟悉


336
00:18:32,813 --> 00:18:34,648 line:-1
和来自用户通知框架中的


337
00:18:34,715 --> 00:18:36,450 line:-1
didReceive方法一样


338
00:18:37,518 --> 00:18:40,888 line:-2
didReceive方法
允许我们从通知中


339
00:18:40,954 --> 00:18:42,089 line:-1
取出信息


340
00:18:42,789 --> 00:18:44,958 line:-1
存到我们的接口控制器里


341
00:18:45,592 --> 00:18:47,694 line:-1
它同时也提供了通知的主体下方


342
00:18:47,761 --> 00:18:50,063 line:-1
的通知动作


343
00:18:51,231 --> 00:18:53,166 line:-1
和接口控制器一样


344
00:18:53,233 --> 00:18:55,002 line:-1
我们也有相同的主体属性


345
00:18:55,702 --> 00:18:58,572 line:-2
唯一不同的是
当didReceive被调用后


346
00:18:59,106 --> 00:19:03,010 line:-1
主体属性会被自动作废和重新检验


347
00:19:03,076 --> 00:19:05,779 line:-1
这样你的通知视图就完全更新了


348
00:19:07,514 --> 00:19:10,951 line:-2
我们来查看这则通知的样子
让我们跳转到通知的视图


349
00:19:12,052 --> 00:19:13,253 line:-1
现在 我们在预览视图中


350
00:19:13,687 --> 00:19:15,789 line:-1
看到通知出现了


351
00:19:16,056 --> 00:19:19,026 line:-1
但它对我的学习并不是非常有帮助


352
00:19:19,626 --> 00:19:21,695 line:-1
在底部 是抽认卡的视图


353
00:19:21,762 --> 00:19:24,431 line:-1
它同时展示了问题和答案


354
00:19:25,666 --> 00:19:27,901 line:-1
为了做得更好一些


355
00:19:28,268 --> 00:19:29,770 line:-1
我想要钉住这个视图


356
00:19:29,837 --> 00:19:32,039 line:-1
使用画布左下角的钉按钮


357
00:19:32,873 --> 00:19:34,875 line:-1
接着我们回到抽认卡视图


358
00:19:35,642 --> 00:19:38,278 line:-1
现在我们就能看到我创建的抽认卡了


359
00:19:38,478 --> 00:19:41,381 line:-1
以及完成之后它在上下文的样子


360
00:19:43,083 --> 00:19:45,018 line:-1
我已经创建了一些视图了


361
00:19:45,085 --> 00:19:48,222 line:-2
我可以将它们放到我的抽认卡里
让抽认卡更加美观


362
00:19:49,056 --> 00:19:51,992 line:-1
第一件我想做的事是用Side


363
00:19:52,392 --> 00:19:54,461 line:-1
来取代Text


364
00:19:54,995 --> 00:19:57,331 line:-1
一张抽认卡有两面


365
00:19:57,464 --> 00:19:59,132 line:-1
所以我们将两面都用Side环绕


366
00:19:59,233 --> 00:20:02,536 line:-2
现在我们看到抽认卡被
好看的铬合金环绕着


367
00:20:02,603 --> 00:20:04,371 line:-1
所有我添加的内容


368
00:20:04,438 --> 00:20:06,306 line:-1
都是我所希望的默认样式


369
00:20:07,307 --> 00:20:09,877 line:-1
但我现在还是能同时看到两面


370
00:20:09,943 --> 00:20:11,879 line:-1
这样还是不能很好的辅助我学习


371
00:20:12,713 --> 00:20:16,617 line:-2
我想要用一个我自定义的容器
来取代这个VStack


372
00:20:16,884 --> 00:20:18,151 line:-1
我称它为翻转视图


373
00:20:18,919 --> 00:20:20,521 line:-1
翻转视图提供了


374
00:20:20,754 --> 00:20:23,624 line:-1
所有的变换和互动体验


375
00:20:23,690 --> 00:20:25,192 line:-1
我们马上就会看到


376
00:20:25,592 --> 00:20:28,328 line:-1
所有的这些源代码我都会在会议后


377
00:20:28,428 --> 00:20:29,930 line:-1
开源为式例代码


378
00:20:31,031 --> 00:20:34,234 line:-2
我们在模拟器试运行下
看看通知是什么样子


379
00:20:34,635 --> 00:20:37,671 line:-1
我们可以用Xcode的通知方案


380
00:20:37,738 --> 00:20:40,274 line:-1
来创建和运行项目


381
00:20:41,041 --> 00:20:43,110 line:-1
我们看到短看出现了


382
00:20:43,210 --> 00:20:45,212 line:-1
我们直接过渡到长看


383
00:20:45,279 --> 00:20:48,315 line:-1
它看上去和预览视图中的一模一样


384
00:20:48,515 --> 00:20:50,350 line:-1
下面的通知动作


385
00:20:50,784 --> 00:20:53,587 line:-1
如我们所期待的一样通知的交互顺畅


386
00:20:53,654 --> 00:20:55,355 line:-1
我可以点击抽认卡翻转它


387
00:20:55,789 --> 00:20:58,892 line:-1
甚至直接在通知主体中拖拽它


388
00:21:02,596 --> 00:21:06,533 line:-2
这只是一个非常简单的问题
我已经解决了


389
00:21:10,404 --> 00:21:14,675 line:-1
我们用了创建这个app


390
00:21:14,875 --> 00:21:16,610 line:-1
相同的手段来用通知


391
00:21:16,910 --> 00:21:19,413 line:-1
创建更加丰富好玩的


392
00:21:19,479 --> 00:21:20,547 line:-1
用户交互体验


393
00:21:22,182 --> 00:21:24,585 line:-2
最后 关于Apple Watch
我还想再聊一点


394
00:21:24,651 --> 00:21:25,819 line:-1
我要聊的是


395
00:21:26,253 --> 00:21:27,621 line:-1
数码表冠


396
00:21:28,355 --> 00:21:31,358 line:-2
现在 你已经可以
利用数码表冠的优势


397
00:21:31,425 --> 00:21:35,829 line:-2
在WatchKit app使用
WKCrownSequencer的API


398
00:21:36,830 --> 00:21:41,702 line:-2
这个API允许你在表冠中做一些
比较有限的事情


399
00:21:41,835 --> 00:21:42,703 line:-1
数码表冠


400
00:21:42,836 --> 00:21:46,440 line:-2
但我们想要你们创建
和iOS里app


401
00:21:46,507 --> 00:21:48,976 line:-1
一样的用户界面


402
00:21:50,577 --> 00:21:55,215 line:-2
在Apple Watch Series 4
我们介绍了全新的触觉表冠


403
00:21:55,749 --> 00:22:00,854 line:-2
触觉和数码表冠在屏幕上
提供了可以滚动内容的功能


404
00:22:01,455 --> 00:22:04,591 line:-2
它为每个元素提供了优异的
阻力和重量感


405
00:22:04,658 --> 00:22:07,761 line:-1
让内容可以更加适配数码表冠


406
00:22:07,828 --> 00:22:08,962 line:-1
它比以往更加强大和优异


407
00:22:10,330 --> 00:22:14,568 line:-2
我们已经在我们自己的app中
使用了所有新的功能


408
00:22:14,968 --> 00:22:17,905 line:-1
比如 在锻炼时 我们有这样的列表


409
00:22:17,971 --> 00:22:20,607 line:-2
当你滚动这些元素时
它们都附有自重


410
00:22:21,241 --> 00:22:24,077 line:-2
或着当你自定义一个时钟时
你可以滑动这些选择器


411
00:22:24,144 --> 00:22:26,413 line:-1
它能提供一个触觉回馈


412
00:22:27,381 --> 00:22:30,184 line:-1
SwiftUI提供了系统组件


413
00:22:30,250 --> 00:22:32,186 line:-1
所有的这些都可以直接用


414
00:22:32,553 --> 00:22:36,623 line:-2
比如列表、选择器和滚动视图
你都可以使用


415
00:22:38,125 --> 00:22:40,394 line:-1
但当你要创建一个更客制化的内容时


416
00:22:41,128 --> 00:22:43,931 line:-1
SwiftUI的一些新的修饰符


417
00:22:43,997 --> 00:22:45,699 line:-1
会帮你实现你的愿景


418
00:22:46,767 --> 00:22:48,902 line:-1
我要聊的第一类自定义界面


419
00:22:48,969 --> 00:22:51,104 line:-1
称为自由滚动界面


420
00:22:51,839 --> 00:22:53,273 line:-1
在自由滚动界面中


421
00:22:53,640 --> 00:22:57,010 line:-1
你不必在你的内容中创建具体的停顿


422
00:22:57,411 --> 00:23:00,480 line:-1
相反 你可以随着数码表冠


423
00:23:00,581 --> 00:23:01,949 line:-1
在序列中随时停下来


424
00:23:03,584 --> 00:23:04,885 line:-1
实现像这样的效果


425
00:23:04,985 --> 00:23:07,888 line:-1
你需要使用由SwiftUI提供的


426
00:23:08,088 --> 00:23:09,323 line:-1
新数码表冠旋转修饰符


427
00:23:09,990 --> 00:23:13,460 line:-1
它非常简单 只需3个参数


428
00:23:14,194 --> 00:23:16,763 line:-1
第一个我们需要知道的是绑定


429
00:23:17,664 --> 00:23:20,868 line:-2
像其他SwiftUI组件一样
需要绑定


430
00:23:20,934 --> 00:23:22,803 line:-1
它提供了数据来源


431
00:23:23,337 --> 00:23:25,806 line:-1
让这个修饰符与系统产生关联


432
00:23:26,607 --> 00:23:28,408 line:-1
在自由滚动列表中


433
00:23:28,942 --> 00:23:32,312 line:-2
我们想要绑定我们正在移动的
这个视图的偏移量


434
00:23:33,413 --> 00:23:35,315 line:-1
我们也需要告诉数码表冠


435
00:23:35,649 --> 00:23:38,385 line:-1
from和through的值


436
00:23:38,785 --> 00:23:42,523 line:-2
它限定了数码表冠移动时
序列的移动范围


437
00:23:44,157 --> 00:23:47,094 line:-1
我们来看下实际操作


438
00:23:47,160 --> 00:23:50,163 line:-2
当我们移动这个代表数码表冠
的小红点时


439
00:23:50,797 --> 00:23:55,235 line:-1
在数码表冠的序列中橡胶传送行为


440
00:23:55,302 --> 00:23:57,437 line:-1
的限制下


441
00:23:57,538 --> 00:23:59,706 line:-1
会得到线性反馈和很赞的触觉反馈


442
00:24:01,642 --> 00:24:04,411 line:-1
下一次 当你想要创建更客制化的


443
00:24:04,478 --> 00:24:07,648 line:-1
比如 在最新的计算器app里


444
00:24:07,714 --> 00:24:09,983 line:-1
的这个选择器


445
00:24:10,617 --> 00:24:12,920 line:-1
这里 我们不再滚动内容


446
00:24:12,986 --> 00:24:15,589 line:-1
相反 我们在两个元素中选择


447
00:24:15,656 --> 00:24:18,158 line:-1
使用数码表冠来移动到另一个


448
00:24:19,660 --> 00:24:22,629 line:-2
同样使用完全相同的数码表冠
的旋转修饰符


449
00:24:22,696 --> 00:24:24,998 line:-1
这些参数也一样


450
00:24:25,699 --> 00:24:27,234 line:-1
现在 这些参数…


451
00:24:27,501 --> 00:24:31,271 line:-1
我们不去查看可滚动的列表


452
00:24:31,338 --> 00:24:32,906 line:-1
我们在人数之间选择


453
00:24:33,407 --> 00:24:35,042 line:-1
从1到15


454
00:24:35,943 --> 00:24:38,512 line:-1
这里的新参数是by


455
00:24:38,645 --> 00:24:41,148 line:-2
by参数允许我们定义序列
数码表冠的序列


456
00:24:41,515 --> 00:24:44,251 line:-1
的运行幅度


457
00:24:44,318 --> 00:24:47,221 line:-1
为你提供触感反馈和下落表现


458
00:24:48,622 --> 00:24:51,725 line:-1
为了查看效果 我们现在来看


459
00:24:51,792 --> 00:24:54,695 line:-2
当我们从某个元素移动到另一个时
数码表冠会提供的触感反馈


460
00:24:55,662 --> 00:24:56,730 line:-1
非常简单


461
00:24:58,665 --> 00:25:01,368 line:-1
最后 当你想要创建更加客制化的


462
00:25:01,435 --> 00:25:04,137 line:-1
比如 闹钟中的界面


463
00:25:04,771 --> 00:25:08,008 line:-1
数码表冠正在控制一个视图


464
00:25:08,075 --> 00:25:09,576 line:-1
围绕着圆旋转


465
00:25:09,643 --> 00:25:12,179 line:-1
它不被序列所限制


466
00:25:13,347 --> 00:25:16,683 line:-2
现在 我们回到
数码表冠的旋转修饰符


467
00:25:17,217 --> 00:25:19,520 line:-1
这个修饰符使用的参数也一样


468
00:25:19,586 --> 00:25:20,954 line:-1
我们之前聊过


469
00:25:21,622 --> 00:25:23,924 line:-1
但我想介绍新的两个参数


470
00:25:24,558 --> 00:25:25,993 line:-1
第一个是灵敏度


471
00:25:26,860 --> 00:25:30,831 line:-2
灵敏度允许我们定义
使用数码表冠控制旋转的力度


472
00:25:30,898 --> 00:25:33,767 line:-1
来从某个元素移动到另一个


473
00:25:34,434 --> 00:25:36,770 line:-1
最后一个是连续参数


474
00:25:37,204 --> 00:25:39,439 line:-1
这个参数允许我们定义


475
00:25:39,506 --> 00:25:43,510 line:-1
不再想要数码表冠在序列中停下


476
00:25:45,379 --> 00:25:49,550 line:-2
实际操作中
在回退和同一方向的持续操作上


477
00:25:49,616 --> 00:25:53,654 line:-1
交互流程非常好


478
00:25:54,454 --> 00:25:55,956 line:-1
序列不再有限制


479
00:25:58,192 --> 00:26:00,994 line:-1
最后 让数码表冠获得输入


480
00:26:01,461 --> 00:26:04,331 line:-1
我们需要告诉系统如何获取


481
00:26:04,865 --> 00:26:07,334 line:-2
为了实现这个功能
需要了解可焦距的修饰符


482
00:26:08,235 --> 00:26:10,537 line:-1
如果你用过我们提供的其他UI框架


483
00:26:10,604 --> 00:26:12,940 line:-1
你会非常熟悉可焦距性


484
00:26:13,407 --> 00:26:16,210 line:-1
这和UIKit里的UI聚焦引擎


485
00:26:16,476 --> 00:26:19,680 line:-2
或第一响应者非常像
我觉得大家一定都用过


486
00:26:20,848 --> 00:26:23,317 line:-1
只需添加可焦距修饰符


487
00:26:23,784 --> 00:26:26,653 line:-2
我们就能使用数码表冠
来更新人数选择器


488
00:26:26,887 --> 00:26:30,724 line:-2
轻点这个小按钮
持续使用表冠来更新当前选中的视图


489
00:26:33,260 --> 00:26:35,495 line:-2
想要了解更多关于可焦距性
如何工作的内容


490
00:26:35,562 --> 00:26:38,098 line:-2
可以参加
所有设备中的SwiftUI演讲


491
00:26:40,334 --> 00:26:41,935 line:-1
我们如何利用它的优势


492
00:26:42,336 --> 00:26:45,572 line:-2
以及在Pop Quiz创建一些
非常酷的用户体验


493
00:26:45,873 --> 00:26:46,974 line:-1
我们回到示例


494
00:26:51,111 --> 00:26:55,649 line:-2
Matthew已经展示了一个
非常完美的卡片列表


495
00:26:55,716 --> 00:26:57,751 line:-1
在这个app的入口点…


496
00:26:57,818 --> 00:27:00,120 line:-1
或app入口的主题列表


497
00:27:01,288 --> 00:27:04,358 line:-1
但我想要创建一个非常酷的列表


498
00:27:04,691 --> 00:27:08,695 line:-2
现在 我们在一个可滚动的视图上
已经有一个查看抽认卡的列表


499
00:27:08,996 --> 00:27:11,765 line:-1
可以在预览视图中看到


500
00:27:12,232 --> 00:27:14,902 line:-1
但如果我们有一个…不是更好吗


501
00:27:15,302 --> 00:27:18,839 line:-2
非常酷 如果完全使用数码表冠来
客制化交互过程


502
00:27:20,274 --> 00:27:24,811 line:-2
我首先要用ZStack
替换scrollView


503
00:27:25,779 --> 00:27:29,483 line:-2
现在 我们看到
抽认卡不再垂直排列了


504
00:27:29,550 --> 00:27:31,385 line:-1
它们都重叠在一起了


505
00:27:31,685 --> 00:27:33,954 line:-1
但我可以保证它们还在那


506
00:27:35,355 --> 00:27:38,992 line:-2
接下来 因为我们要使用数码表冠
绑定其他数据


507
00:27:39,059 --> 00:27:41,695 line:-1
我们需要使用可焦距修饰符


508
00:27:42,262 --> 00:27:45,199 line:-1
和数码表冠的旋转修饰符


509
00:27:46,366 --> 00:27:49,536 line:-2
现在 这里有很多参数
但它们都是我们之前知道的


510
00:27:49,603 --> 00:27:50,938 line:-1
完全一样的参数


511
00:27:51,004 --> 00:27:52,673 line:-1
我们来一个个看


512
00:27:53,540 --> 00:27:56,577 line:-2
首先 我们需要
一个绑定或是数码表冠


513
00:27:56,643 --> 00:27:59,513 line:-1
更新数据的数据源


514
00:28:00,414 --> 00:28:02,516 line:-2
为了能够实现目标
我们需要提供一些状态


515
00:28:03,383 --> 00:28:05,352 line:-1
这个自定义的交互会在两者间移动


516
00:28:05,419 --> 00:28:07,921 line:-1
我想要提供当前的序列号


517
00:28:09,489 --> 00:28:13,227 line:-1
接下来我们给状态提供绑定


518
00:28:13,794 --> 00:28:15,295 line:-1
回到数码表冠的旋转


519
00:28:15,696 --> 00:28:18,398 line:-1
这里 我想使用绑定的动画版本


520
00:28:18,465 --> 00:28:20,534 line:-1
这样数码表冠就会更新


521
00:28:20,601 --> 00:28:23,437 line:-1
会已动画特效的形式更新这个视图


522
00:28:24,771 --> 00:28:27,608 line:-1
接下来我们需要确认我们开始的位置


523
00:28:28,342 --> 00:28:30,777 line:-1
以及我们在序列中到达的位置


524
00:28:31,078 --> 00:28:33,447 line:-1
这是序列中倒数第二张卡


525
00:28:33,514 --> 00:28:35,249 line:-1
来确认我们到达的位置


526
00:28:36,583 --> 00:28:39,353 line:-1
接下来 我们需要确认by参数的值


527
00:28:39,419 --> 00:28:42,222 line:-1
来规定每张卡之间的跨度


528
00:28:42,823 --> 00:28:44,525 line:-1
和精度


529
00:28:44,658 --> 00:28:47,227 line:-1
在这里 我想使用低精度


530
00:28:47,294 --> 00:28:49,429 line:-1
这样每张卡都能得到一些重量


531
00:28:49,496 --> 00:28:51,798 line:-1
这样我能找到我想要看的那张卡


532
00:28:53,567 --> 00:28:57,004 line:-1
最后 为了得到我们想要的效果


533
00:28:57,838 --> 00:29:00,641 line:-1
我已经写了这张卡片的转换修饰符


534
00:29:00,707 --> 00:29:03,744 line:-2
这个自定义视图的调节器
就是我已经写好的


535
00:29:04,444 --> 00:29:07,714 line:-1
它可以实现3D效果


536
00:29:07,881 --> 00:29:11,485 line:-1
和允许卡片随着当前序列号更新


537
00:29:12,085 --> 00:29:14,621 line:-1
我们传给修饰符当前的序列号值


538
00:29:14,688 --> 00:29:17,624 line:-1
所以每当视图重绘时 它都会更新


539
00:29:19,159 --> 00:29:19,993 line:-1
就是这样


540
00:29:21,061 --> 00:29:23,730 line:-2
现在我们构建一下
运行一下这个app


541
00:29:25,732 --> 00:29:28,335 line:-2
在模拟器里出现了 我们看到了
和Matthew最初展示


542
00:29:28,402 --> 00:29:30,003 line:-1
的一样的视图


543
00:29:31,305 --> 00:29:32,639 line:-1
我们来浏览这个列表


544
00:29:32,873 --> 00:29:34,107 line:-1
选择我们要看的那个


545
00:29:34,541 --> 00:29:38,011 line:-1
现在我们可以使用数码表冠


546
00:29:38,078 --> 00:29:39,112 line:-1
滚动浏览这个界面


547
00:29:40,180 --> 00:29:41,982 line:-1
就是这样


548
00:29:42,683 --> 00:29:44,651 line:-1
如果有人知道这个问题的答案


549
00:29:44,718 --> 00:29:46,887 line:-1
请告诉我 我真的很想知道答案


550
00:29:54,895 --> 00:29:55,929 line:-1
很酷


551
00:29:56,430 --> 00:29:59,833 line:-2
我们已经知道
如何使用SwiftUI


552
00:29:59,900 --> 00:30:01,268 line:-1
创建良好的用户体验


553
00:30:01,635 --> 00:30:03,370 line:-2
以及利用
Apple Watch提供的


554
00:30:03,437 --> 00:30:05,539 line:-1
各种功能来实现我们的目标


555
00:30:06,473 --> 00:30:08,175 line:-1
但不仅仅只是这些


556
00:30:08,342 --> 00:30:13,113 line:-2
现在你能在我们所有的平台
使用UI框架


557
00:30:13,480 --> 00:30:15,516 line:-1
你能运用你学到的概念


558
00:30:15,582 --> 00:30:17,684 line:-2
创建属于你自己的
iPhone app


559
00:30:18,151 --> 00:30:22,155 line:-2
直接用于Apple Watch上
创建和优化体验


560
00:30:23,056 --> 00:30:26,393 line:-2
我们很期待看到
你在Apple Watch上


561
00:30:26,460 --> 00:30:28,462 line:-1
一直渴望创建的界面


562
00:30:29,530 --> 00:30:33,734 line:-2
今年的演讲议程中
有很多关于SwiftUI的讨论


563
00:30:34,067 --> 00:30:36,537 line:-1
想要知道如何创建这些3D特效


564
00:30:36,603 --> 00:30:39,506 line:-2
你可以参加 用SwiftUI
建立自定义视图的演讲


565
00:30:40,073 --> 00:30:41,842 line:-2
祝你在接下来的会议中过得愉快
谢谢

