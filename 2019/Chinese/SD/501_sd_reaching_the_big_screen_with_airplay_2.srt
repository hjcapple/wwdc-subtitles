1
00:00:05,739 --> 00:00:08,675 line:0
（在大屏幕上进行隔空播放2）


2
00:00:08,742 --> 00:00:09,610 line:-1
好吧


3
00:00:09,977 --> 00:00:10,911 line:-1
大家早上好


4
00:00:12,779 --> 00:00:14,381 line:-2
我是
Jonathan Bennett


5
00:00:14,448 --> 00:00:17,017 line:-1
我是Apple连接媒体团队的一员


6
00:00:18,018 --> 00:00:20,654 line:-1
我很高兴能来到这里与大家分享


7
00:00:20,721 --> 00:00:22,289 line:-1
关于隔空播放的相关信息


8
00:00:23,323 --> 00:00:26,693 line:-2
开始我们先讲一下
你可以用隔空播放做什么


9
00:00:28,562 --> 00:00:33,567 line:-2
你可以使用隔空播放无线发送视频
到电视上进行观看


10
00:00:34,868 --> 00:00:36,703 line:-1
或在家里任何地方听音乐


11
00:00:37,571 --> 00:00:39,273 line:-1
你还可以


12
00:00:41,742 --> 00:00:47,181 line:-2
使用隔空播放镜像从iOS或
macOS屏幕上共享几乎所有内容


13
00:00:48,415 --> 00:00:51,118 line:-1
对于今天的演讲 我们聚焦视频


14
00:00:51,885 --> 00:00:54,354 line:-1
我们会讲我们所做的改进


15
00:00:55,489 --> 00:00:58,792 line:-1
从而确保你可以


16
00:00:59,159 --> 00:01:03,597 line:-1
在隔空播放发送设备上


17
00:01:04,331 --> 00:01:05,999 line:-2
获得很棒的电视目的地
和优秀的隔空播放体验


18
00:01:09,503 --> 00:01:11,171 line:-1
当提到目的地时


19
00:01:11,872 --> 00:01:15,442 line:-2
过去Apple TV一向是
在电视上隔空播放视频的唯一方式


20
00:01:16,009 --> 00:01:18,345 line:-1
对于许多人来说仍然是个不错的选择


21
00:01:19,279 --> 00:01:21,915 line:-2
正如你今年早些时候听到的
我们一直


22
00:01:22,916 --> 00:01:26,119 line:-1
在与一些最大的电视制造商合作


23
00:01:27,487 --> 00:01:31,358 line:-1
直接在电视中建立隔空播放支持


24
00:01:32,192 --> 00:01:35,028 line:-1
这极大地增加了人们


25
00:01:35,562 --> 00:01:38,432 line:-1
在哪里可以进行隔空播放视频的选择


26
00:01:38,999 --> 00:01:41,134 line:-1
也增加了大量


27
00:01:41,568 --> 00:01:44,638 line:-1
你可以利用的电视设备


28
00:01:47,441 --> 00:01:51,211 line:-2
因此只要在电视盒上找到这个标签
你就会了解它支持


29
00:01:51,778 --> 00:01:55,682 line:-2
隔空播放镜像、多房间音乐
当然还有视频


30
00:01:59,019 --> 00:02:01,688 line:-2
Apple TV
和支持隔空播放的电视


31
00:02:04,324 --> 00:02:08,729 line:-2
可以支持最高4K HDR视频
带环绕立体声


32
00:02:09,062 --> 00:02:12,299 line:-1
这是一种高品质的视频体验


33
00:02:14,101 --> 00:02:18,005 line:-2
这些是我们在电视上所增加的
一些新功能


34
00:02:19,106 --> 00:02:21,375 line:-1
提到隔空播放发送设备


35
00:02:22,042 --> 00:02:24,845 line:-2
我想讲一下我们在iOS中
所做的一些改进


36
00:02:24,912 --> 00:02:27,548 line:-1
从而使人们可以更轻松地


37
00:02:28,015 --> 00:02:29,683 line:-2
把app中他们所喜欢的内容
放到电视上


38
00:02:31,952 --> 00:02:35,822 line:-2
首先现在你的视频app
可以在隔空播放列表的顶部


39
00:02:35,889 --> 00:02:37,457 line:-1
对电视目的地进行排序


40
00:02:37,791 --> 00:02:42,296 line:-2
使查找你想要播放视频的电视
变得比以前更简单了


41
00:02:43,664 --> 00:02:47,801 line:-1
我们还改进和丰富了可用的远程控制


42
00:02:48,435 --> 00:02:54,074 line:-2
允许人们与你的视频迅速和轻松地
进行交互


43
00:02:55,876 --> 00:02:57,211 line:-1
我们还做了一些改善


44
00:02:57,277 --> 00:02:59,780 line:-2
可以让人们更好地在他们的
iOS设备上进行多任务操作


45
00:02:59,847 --> 00:03:02,382 line:-1
因此他们可以接电话


46
00:03:03,217 --> 00:03:06,420 line:-2
或查看他们刚从iMessage中
收到的那段可爱的视频


47
00:03:06,954 --> 00:03:09,089 line:-1
而同时仍在电视上继续播放你的视频


48
00:03:11,391 --> 00:03:16,663 line:-1
最后iOS现在可以使用设备上学习


49
00:03:16,730 --> 00:03:18,098 line:-1
智能地推荐要进行隔空播放的电视


50
00:03:18,632 --> 00:03:21,535 line:-2
因此我可以坐在沙发上
启动你的视频app


51
00:03:22,069 --> 00:03:25,939 line:-2
我只需要轻触我最喜欢的节目
就会在电视上自动播放


52
00:03:28,342 --> 00:03:31,845 line:-1
通过新电视目的地和这些体验改善


53
00:03:31,912 --> 00:03:35,582 line:-2
现在是时候确保你的视频app
完全支持隔空播放了


54
00:03:36,783 --> 00:03:41,154 line:-1
我想在接下来的演讲中讲五个重点


55
00:03:42,122 --> 00:03:44,291 line:-1
用于添加这种优秀的体验


56
00:03:45,726 --> 00:03:49,530 line:-2
首先我们要确保你有在电视上可用的
高品质视频


57
00:03:51,298 --> 00:03:54,535 line:-1
然后我们要一种方式


58
00:03:54,601 --> 00:03:55,736 line:-2
可以让人们使用app内的选择器
把视频放到电视上


59
00:03:58,539 --> 00:04:01,141 line:-2
一旦视频出现在电视上
我们要确保人们可以控制它


60
00:04:03,810 --> 00:04:05,913 line:-2
并且要确保当人们使用iOS设备
进行其它操作时


61
00:04:06,914 --> 00:04:09,550 line:-1
持续播放视频


62
00:04:11,451 --> 00:04:13,220 line:-1
最后如果你的app


63
00:04:13,287 --> 00:04:17,591 line:-2
主要播放长格式视频
如电影或电视节目


64
00:04:18,659 --> 00:04:20,260 line:-1
你还应该采取一些额外的步骤


65
00:04:20,327 --> 00:04:21,995 line:-1
从而确保用户们受益于


66
00:04:22,396 --> 00:04:25,365 line:-1
智能隔空播放推荐


67
00:04:28,368 --> 00:04:31,371 line:-1
让我们先讲高品质视频


68
00:04:33,106 --> 00:04:36,210 line:-2
HTTP直播流是一种
快速的和自适应的方式


69
00:04:36,276 --> 00:04:38,612 line:-1
用于把高品质视频放到任何设备上


70
00:04:39,213 --> 00:04:43,917 line:-2
你很可能已经使用HLS
向iOS app提交视频了


71
00:04:44,852 --> 00:04:47,688 line:-1
现在有些人可能正在整理播放列表


72
00:04:47,754 --> 00:04:49,790 line:-1
主要集中于那些设备类型


73
00:04:50,190 --> 00:04:52,526 line:-1
是iPhone屏幕或iPad屏幕


74
00:04:54,127 --> 00:04:57,331 line:-2
但请记住
用户任何时候都可以获取视频


75
00:04:57,397 --> 00:04:59,533 line:-1
并可以在电视上进行隔空播放


76
00:04:59,600 --> 00:05:02,903 line:-1
你的播放列表中


77
00:05:03,570 --> 00:05:05,906 line:-1
拥有适合电视的全部变体非常重要


78
00:05:06,073 --> 00:05:11,011 line:-2
其中包括支持4K、HDR
和环绕立体声的变体


79
00:05:12,613 --> 00:05:15,749 line:-1
如果你的播放列表中含有


80
00:05:15,816 --> 00:05:17,584 line:-1
你用于编码内容的多视频编解码器


81
00:05:18,185 --> 00:05:21,688 line:-2
请一定要为每个视频编解码器
提供全部变体


82
00:05:22,389 --> 00:05:24,558 line:-1
这可以确保播放你视频的任意设备


83
00:05:24,625 --> 00:05:26,260 line:-1
完全支持播放你的视频


84
00:05:26,827 --> 00:05:30,464 line:-2
并确保播放器可以流畅地在变体之间
进行转换


85
00:05:31,164 --> 00:05:33,700 line:-1
通过使用同一个视频编解码器实现


86
00:05:36,470 --> 00:05:39,740 line:-1
我发现自己经常会做的一件事就是


87
00:05:39,806 --> 00:05:42,176 line:-1
快进或跳着看视频


88
00:05:42,776 --> 00:05:44,211 line:-1
无论是…


89
00:05:46,146 --> 00:05:50,851 line:-2
在我和孩子们一起观看时
跳过电影中恐怖的画面


90
00:05:51,118 --> 00:05:53,720 line:-2
或查找WWDC视频中间部分的一个
有意思的话题


91
00:05:54,154 --> 00:05:58,125 line:-2
在跳着看时有快进、快速播放、
帧预览


92
00:05:58,492 --> 00:06:02,563 line:-2
可以让我迅速并自信地找到
我想要找的内容


93
00:06:03,564 --> 00:06:05,632 line:-1
你可以在你的视频中添加这种支持


94
00:06:05,699 --> 00:06:08,902 line:-2
通过在你的HLS播放列表中
包含一个I帧变体实现


95
00:06:11,572 --> 00:06:16,410 line:-2
最后如果你有需要保护和管理的
高价值内容


96
00:06:16,476 --> 00:06:18,745 line:-2
你很可能会使用FairPlay Streaming
对其进行保护和管理


97
00:06:19,379 --> 00:06:23,550 line:-2
无论何时也无论你在哪里进行隔空
播放都完全支持FairPlay Streaming


98
00:06:24,017 --> 00:06:25,986 line:-1
包括在Apple TV上隔空播放


99
00:06:26,453 --> 00:06:29,389 line:-1
我也很高兴地宣布


100
00:06:29,456 --> 00:06:32,292 line:-2
只要内嵌隔空播放支持的智能电视
都支持FairPlay Streaming


101
00:06:34,228 --> 00:06:38,198 line:-1
除了我们今天所讲的这些


102
00:06:38,265 --> 00:06:39,266 line:-2
还有许多关于针对隔空播放
验证你的HLS的详细信息


103
00:06:39,766 --> 00:06:42,336 line:-2
我们制作了一个与此演讲相关联的
独立视频


104
00:06:42,402 --> 00:06:43,904 line:-1
我推荐你参考那个视频了解相关信息


105
00:06:46,773 --> 00:06:49,276 line:-1
拥有高品质内容非常棒


106
00:06:49,343 --> 00:06:52,246 line:-1
但我们也要确保我们有流畅的播放


107
00:06:53,247 --> 00:06:57,451 line:-1
如果你需要在你的视频中


108
00:06:57,518 --> 00:06:59,386 line:-1
插入前、中或后视频广告


109
00:07:00,120 --> 00:07:02,623 line:-2
你可以使用HLS的不连续性标签
来实现


110
00:07:03,190 --> 00:07:05,659 line:-1
这就允许播放器保持不变


111
00:07:05,726 --> 00:07:07,628 line:-1
并且预估的带宽也保持不变


112
00:07:07,694 --> 00:07:10,097 line:-2
从而你的插播广告视频
以高品质播放


113
00:07:10,497 --> 00:07:12,399 line:-1
当它结束后恢复播放主内容时


114
00:07:12,466 --> 00:07:15,802 line:-1
可以立即开始以高品质播放主内容


115
00:07:18,105 --> 00:07:20,774 line:-1
再一次 确保这些插播视频广告


116
00:07:20,841 --> 00:07:23,343 line:-2
拥有与主内容相同的视频格式
非常重要


117
00:07:23,877 --> 00:07:26,413 line:-2
比如同样的视频编解码器
这就允许这些转换


118
00:07:26,480 --> 00:07:27,948 line:-1
可以迅速并流畅地进行


119
00:07:30,150 --> 00:07:33,654 line:-2
如果你由于某些原因不能使用
HLS不连续性标签


120
00:07:33,720 --> 00:07:36,924 line:-1
或你有想要连续播放的多段视频内容


121
00:07:37,925 --> 00:07:40,394 line:-2
我们推荐你在隔空播放时使用
AVQueuePlayer


122
00:07:42,963 --> 00:07:47,234 line:-2
如果当你进行隔空播放时不能使用
AVQueuePlayer


123
00:07:47,301 --> 00:07:49,870 line:-1
请使用同一个AVPlayer实例


124
00:07:50,270 --> 00:07:52,973 line:-2
你只需要用你的新内容替换
当前内容即可


125
00:07:53,807 --> 00:07:56,743 line:-2
你一定不想给每段视频销毁一个
AVPlayer并创建一个新的AVPlayer


126
00:07:57,010 --> 00:08:00,013 line:-1
或在实例之间调换


127
00:08:00,414 --> 00:08:01,682 line:-1
因为当隔空播放时


128
00:08:01,748 --> 00:08:02,783 line:-1
系统不了解


129
00:08:02,850 --> 00:08:05,118 line:-1
一段新视频即将到达


130
00:08:05,185 --> 00:08:07,487 line:-1
因此它可能会开始释放引擎


131
00:08:07,554 --> 00:08:10,057 line:-1
你一定不想产生这种类型的延迟


132
00:08:10,123 --> 00:08:12,326 line:-2
仅仅是因为在视频之间进行转换
而引起的延迟


133
00:08:15,596 --> 00:08:18,332 line:-1
好吧 我们已经得到了高品质的内容


134
00:08:18,398 --> 00:08:21,468 line:-2
现在让我们为人们提供一种方式
可以让他们把内容放到电视上


135
00:08:22,669 --> 00:08:25,572 line:-2
你可以通过把隔空投放选择器
添加到你的app中实现


136
00:08:26,440 --> 00:08:30,911 line:-2
在iOS 13中有个新功能
你可以决定如何对这些目的地排序


137
00:08:32,779 --> 00:08:36,482 line:-2
要添加一个隔空播放选择器 请使用
AVRoutePickerView


138
00:08:36,549 --> 00:08:40,921 line:-2
自iOS 11起它在iOS上可用
现在它也在macOS上可用了


139
00:08:42,256 --> 00:08:46,093 line:-2
有些人可能会使用
MPVolumeView的路由按钮属性


140
00:08:46,159 --> 00:08:47,594 line:-1
在app中获得选择器


141
00:08:48,695 --> 00:08:52,566 line:-2
iOS 13中
已经弃用路由按钮属性了


142
00:08:54,168 --> 00:08:56,904 line:-2
但不要担心 你仍可以使用
MPVolumeView


143
00:08:56,970 --> 00:08:59,873 line:-1
把音量UI放到你的app中


144
00:08:59,940 --> 00:09:02,809 line:-2
但当要使用路由按钮时 请使用
RoutePickerView替代


145
00:09:08,782 --> 00:09:13,921 line:-1
让我们看看如何添加 非常简单


146
00:09:14,454 --> 00:09:17,257 line:-2
我所要做的就是创建一个
AVRoutePickerView


147
00:09:17,324 --> 00:09:18,759 line:-1
并把它添加到我的视频等级中


148
00:09:20,360 --> 00:09:22,396 line:-1
在iOS 13中


149
00:09:22,696 --> 00:09:25,265 line:-2
我可以把prioritizesVideoDevices
设为真


150
00:09:25,599 --> 00:09:30,404 line:-1
那会为我提供一个路由按钮图标


151
00:09:30,470 --> 00:09:33,707 line:-1
关注带有隔空播放视频标志的视频


152
00:09:34,208 --> 00:09:38,078 line:-2
并同时在顶部对这些电视目的地
进行排序


153
00:09:38,478 --> 00:09:40,147 line:-2
从而把查找我想在哪个电视上
播放视频变得超级简单


154
00:09:45,419 --> 00:09:47,254 line:-1
现在我可以在电视上播放视频了


155
00:09:47,321 --> 00:09:49,790 line:-2
让我们确保人们可以通过一种方式
对其进行控制


156
00:09:49,857 --> 00:09:50,991 line:-1
这非常重要


157
00:09:51,058 --> 00:09:53,093 line:-2
因此我们要确保
整个系统中的远程控制


158
00:09:53,160 --> 00:09:56,530 line:-1
比以前更便利、更得力


159
00:09:58,065 --> 00:10:02,202 line:-2
比如我可以通过锁屏控件
控制我的视频


160
00:10:02,436 --> 00:10:05,439 line:-2
并且当你锚定一个电视时
我们也添加了额外功能


161
00:10:07,007 --> 00:10:10,410 line:-2
我还可以使用Siri发布播放命令
并说出


162
00:10:10,611 --> 00:10:12,145 line:-2
你知道的
在我的电视上播放这个视频


163
00:10:17,251 --> 00:10:21,221 line:-2
这并不仅仅是控制在iOS设备上
播放什么


164
00:10:21,388 --> 00:10:22,890 line:-1
还要控制你周围的设备


165
00:10:23,490 --> 00:10:25,325 line:-1
比如你可以下拉控制中心


166
00:10:25,492 --> 00:10:28,362 line:-2
控制正在家里播放音乐的
HomePod


167
00:10:28,829 --> 00:10:32,566 line:-2
或甚至是控制
正在播放视频的tvOS app


168
00:10:32,799 --> 00:10:34,735 line:-2
我可以看到播放内容
并可以从几乎任意设备上控制它


169
00:10:39,072 --> 00:10:42,809 line:-2
如果你的app不支持
远程控制会怎样？


170
00:10:42,876 --> 00:10:45,512 line:-2
嗯 这是我的app
它正在电视上进行隔空播放


171
00:10:47,314 --> 00:10:50,651 line:-2
但如果我锁定屏幕
我就不知道视频正在播放


172
00:10:50,717 --> 00:10:53,654 line:-2
更重要的是
我就不能与那个视频进行交互了


173
00:10:55,822 --> 00:10:57,724 line:-1
通过支持远程控制


174
00:10:58,158 --> 00:11:00,093 line:-1
你可以了解正在播放什么


175
00:11:01,795 --> 00:11:03,463 line:-1
视频已经播放了多久


176
00:11:04,898 --> 00:11:06,700 line:-1
一种与之迅速地相交互的不错的方式


177
00:11:08,001 --> 00:11:10,070 line:-1
然后甚至可以返回到


178
00:11:10,137 --> 00:11:11,271 line:-1
目前正在播放那段视频的app中


179
00:11:11,338 --> 00:11:13,907 line:-1
你只需要轻触视频或标题即可返回


180
00:11:15,375 --> 00:11:19,713 line:-2
让我们看看如何在你的app中
添加这些远程控制


181
00:11:19,947 --> 00:11:22,649 line:-1
首先是要成为“正在播放”app


182
00:11:24,284 --> 00:11:26,687 line:-2
通过做两件事即可成为
“正在播放”app


183
00:11:26,753 --> 00:11:29,623 line:-1
一件事是至少支持一个远程控制命令


184
00:11:30,290 --> 00:11:33,327 line:-1
另一件事是用媒体配置初始化播放


185
00:11:34,661 --> 00:11:37,965 line:-1
在iOS上 那意味着


186
00:11:38,031 --> 00:11:40,167 line:-1
用不可混合类别激活你的音频会话


187
00:11:40,234 --> 00:11:42,970 line:-2
对于多大多数视频app来说
那应该是播放类别


188
00:11:44,838 --> 00:11:49,409 line:-2
在macOS和运行在
macOS上的iOS代码来说


189
00:11:49,476 --> 00:11:52,813 line:-2
你要采取的措施稍微有些不同
你要获取MPNowPlayingInfoCenter


190
00:11:53,247 --> 00:11:59,119 line:-2
并且无论何时当你开始或结束
视频体验时 要修改播放状态


191
00:12:02,155 --> 00:12:04,291 line:-1
提到支持远程控制


192
00:12:04,358 --> 00:12:06,860 line:-2
如果你使用了AVKit的
AVPlayerViewController


193
00:12:06,927 --> 00:12:08,028 line:-1
来呈现你的视频


194
00:12:08,395 --> 00:12:11,098 line:-2
它会替你处理远程控制
然后你就搞定了


195
00:12:13,867 --> 00:12:17,137 line:-2
如你使用AVFoundation
和自定义UI来呈现你的视频


196
00:12:17,471 --> 00:12:21,375 line:-2
你得用MPRemoteCommandCenter
和MPNowPlayingInfoCenter


197
00:12:21,441 --> 00:12:23,177 line:-1
来获得同样的功能


198
00:12:23,977 --> 00:12:26,246 line:-1
我想花点时间逐步讲一下


199
00:12:26,313 --> 00:12:29,349 line:-1
如何使用这些媒体播放器API


200
00:12:29,416 --> 00:12:31,051 line:-1
来创建这个功能


201
00:12:32,853 --> 00:12:35,122 line:-1
在这里我又返回到我孤独的锁屏上


202
00:12:36,490 --> 00:12:39,960 line:-2
让我们通过支持播放命令来添加一些
简单的支持


203
00:12:42,162 --> 00:12:44,731 line:-1
我可以通过创建


204
00:12:44,798 --> 00:12:46,366 line:-1
支持远程控制的设置方法来实现


205
00:12:46,867 --> 00:12:49,102 line:-1
随着我们继续创建支持


206
00:12:49,169 --> 00:12:50,838 line:-1
我们会一次又一次地使用这个方法


207
00:12:52,573 --> 00:12:55,375 line:-2
我首先要获取远程命令中心的
共享实例


208
00:12:57,477 --> 00:13:01,648 line:-2
远程命令中心支持许多不同类型的
媒体命令


209
00:13:02,049 --> 00:13:03,884 line:-1
在这里我支持播放命令


210
00:13:03,951 --> 00:13:06,019 line:-1
为此 我们要添加一个目标处理器


211
00:13:06,286 --> 00:13:08,622 line:-2
来接收那个命令
并使用它执行某些操作


212
00:13:09,256 --> 00:13:11,124 line:-1
在这里 我们要开始播放


213
00:13:12,226 --> 00:13:13,227 line:-1
一旦完成播放


214
00:13:13,794 --> 00:13:17,431 line:-2
我要返回一个状态
表明命令是成功或失败


215
00:13:18,632 --> 00:13:20,467 line:-2
这是你要针对你所支持的
任意远程命令


216
00:13:20,534 --> 00:13:22,336 line:-1
所要使用的基础结构


217
00:13:24,505 --> 00:13:26,640 line:-1
为了充实我们的播放命令处理


218
00:13:26,707 --> 00:13:30,577 line:-2
我们要支持暂停命令和
togglePlayPauseCommand


219
00:13:30,644 --> 00:13:32,246 line:-1
通过为它们添加处理器实现


220
00:13:34,481 --> 00:13:37,985 line:-2
这给了我一个
有播放/暂停按钮的面板


221
00:13:38,051 --> 00:13:40,053 line:-1
我至少知道哪个app正在播放


222
00:13:40,120 --> 00:13:43,357 line:-2
但如果我知道正在播放哪个视频
就太棒了


223
00:13:45,259 --> 00:13:47,794 line:-2
你可以通过提供
“正在播放”信息来实现


224
00:13:49,062 --> 00:13:51,031 line:-1
“正在播放”信息由两部分组成


225
00:13:51,098 --> 00:13:55,035 line:-1
一部分是元数据 比如视频或标题


226
00:13:56,069 --> 00:13:59,973 line:-2
然后是播放状态
比如时长和当前已播放时间


227
00:14:00,307 --> 00:14:02,709 line:-1
在我的代码中有两个主要事件


228
00:14:02,776 --> 00:14:04,645 line:-2
我想在这两个主要事件中
更新这个信息


229
00:14:05,212 --> 00:14:10,250 line:-2
其中一个是当某项发生变更时
从第一段到第二段


230
00:14:12,886 --> 00:14:14,821 line:-1
另一个是当我有当前项时


231
00:14:14,888 --> 00:14:16,857 line:-1
且播放状态发生变革


232
00:14:16,924 --> 00:14:21,328 line:-2
因此我的速率发生了改变
或我想跳到视频中的另一个位置


233
00:14:24,831 --> 00:14:26,300 line:-1
因此当某项发生变更时


234
00:14:26,500 --> 00:14:29,937 line:-2
我要获取我在app中通过一种结构
打包好的元数据


235
00:14:30,170 --> 00:14:32,673 line:-1
并通过我的app传递它


236
00:14:33,407 --> 00:14:35,676 line:-2
我要更新那个静态的
“正在播放”信息


237
00:14:35,742 --> 00:14:37,411 line:-1
比如标题和视频


238
00:14:38,145 --> 00:14:39,146 line:-1
如果我有“正在播放”信息


239
00:14:40,547 --> 00:14:44,418 line:-1
我这一次也会更新播放信息


240
00:14:45,853 --> 00:14:48,121 line:-1
当播放状态发生变更时


241
00:14:49,489 --> 00:14:51,825 line:-1
我所要做的就是更新那个播放信息


242
00:14:52,092 --> 00:14:55,762 line:-2
我不需要更新视频
也不需要花时间去做那些操作


243
00:14:57,731 --> 00:14:59,800 line:-1
让我们看看如何更新这些信息


244
00:15:01,702 --> 00:15:04,905 line:-2
我要做的第一件事就是
从共享信息中心


245
00:15:04,972 --> 00:15:06,940 line:-1
获取“现在播放”信息字典


246
00:15:09,776 --> 00:15:12,212 line:-1
对于这个字典 我要更新我的元数据


247
00:15:12,279 --> 00:15:14,414 line:-1
在这里 我要更新标题和视频


248
00:15:14,681 --> 00:15:16,550 line:-1
我的app中还支持或可能支持


249
00:15:16,617 --> 00:15:19,019 line:-1
许多其它类型的元数据


250
00:15:19,720 --> 00:15:20,988 line:-1
无论我支持哪种类型


251
00:15:21,221 --> 00:15:24,825 line:-1
重要的是要更新这个元数据或清除它


252
00:15:24,892 --> 00:15:29,830 line:-2
如果某项没有那种类型的属性的话
就把它消除掉


253
00:15:30,564 --> 00:15:35,269 line:-2
你一定不想在字典中包含
新旧混合的元数据


254
00:15:37,204 --> 00:15:38,372 line:-1
然而一旦我更新元数据之后


255
00:15:38,438 --> 00:15:41,175 line:-1
我就把它传回给信息中心用于呈现


256
00:15:45,078 --> 00:15:48,282 line:-1
更新“现在播放”信息超级简单


257
00:15:48,482 --> 00:15:50,884 line:-1
现在让我们看看如何更新播放信息


258
00:15:52,286 --> 00:15:55,522 line:-2
更新方式很相似
我先获取“现在播放”信息


259
00:15:55,923 --> 00:15:57,057 line:-1
信息字典


260
00:15:57,824 --> 00:15:59,860 line:-1
为此 我要更新时长


261
00:15:59,927 --> 00:16:02,229 line:-1
和已播放时间以及播放速率


262
00:16:03,397 --> 00:16:07,234 line:-2
我只需要在发生显著变化的事件上
更新这个信息即可


263
00:16:07,301 --> 00:16:11,171 line:-2
我不需要对每秒都进行更新
来查看远程UI的进度


264
00:16:11,572 --> 00:16:13,941 line:-2
只要我在速率发生变化时
或发生重大快进时


265
00:16:14,007 --> 00:16:16,109 line:-1
更新这三项


266
00:16:16,577 --> 00:16:18,111 line:-1
系统就会推断


267
00:16:18,278 --> 00:16:20,581 line:-2
在任何特定时刻你在视频中
所处的位置


268
00:16:20,781 --> 00:16:22,916 line:-1
并相应地更新远程UI


269
00:16:24,751 --> 00:16:25,953 line:-1
再一次 一旦我更新了这个信息


270
00:16:26,019 --> 00:16:28,589 line:-2
我只需要把它传回给信息中心
以获得呈现


271
00:16:30,958 --> 00:16:32,659 line:-1
这样我就能了解正在播放哪个视频


272
00:16:32,726 --> 00:16:36,597 line:-1
能在视频中实现导航真是太棒了


273
00:16:37,130 --> 00:16:41,368 line:-2
你可以使用playhead刷子
或快进和后退


274
00:16:42,669 --> 00:16:45,472 line:-1
在你的视频中添加对视频导航的支持


275
00:16:46,573 --> 00:16:47,674 line:-1
让我们看一下我们该如何做


276
00:16:48,942 --> 00:16:52,312 line:-2
我们返回到
用于设置远程控制命令的方法中


277
00:16:52,579 --> 00:16:56,183 line:-1
我要添加对快进命令的支持


278
00:16:57,084 --> 00:16:59,987 line:-1
这是支持额外配置的其中一个命令


279
00:17:00,053 --> 00:17:03,957 line:-2
在这里我把首选快进间隔设置为
15秒


280
00:17:05,726 --> 00:17:08,161 line:-1
然后我为那个命令添加一个处理器


281
00:17:09,496 --> 00:17:11,231 line:-1
重点是要注意


282
00:17:11,531 --> 00:17:14,367 line:-2
我在这里使用了通过命令事件
传给我的间隔


283
00:17:15,169 --> 00:17:16,703 line:-1
仅仅因为我设置了首选间隔


284
00:17:16,770 --> 00:17:18,472 line:-1
但那并不意味着每次都要用这个间隔


285
00:17:18,739 --> 00:17:23,010 line:-1
比如我可以要求Siri快进42秒


286
00:17:23,076 --> 00:17:25,078 line:-1
这是将要传给我的值


287
00:17:25,145 --> 00:17:26,480 line:-1
也是我应该使用的值


288
00:17:28,749 --> 00:17:30,317 line:-1
然后我通过支持后退命令


289
00:17:30,584 --> 00:17:33,187 line:-2
和当对视频进行导航时所使用的
修改播放位置命令


290
00:17:33,253 --> 00:17:36,590 line:-1
来充实我的支持


291
00:17:39,793 --> 00:17:41,762 line:-2
对于某些app
和某些类型的视频来说


292
00:17:41,828 --> 00:17:44,331 line:-1
你可能需要暂时禁用导航


293
00:17:44,665 --> 00:17:47,634 line:-1
你可以通过在你要禁用的命令上


294
00:17:47,701 --> 00:17:49,603 line:-1
设置isEnabled属性来实现


295
00:17:49,903 --> 00:17:52,506 line:-2
你不需要移除目标处理器
然后再把它添加回来


296
00:17:56,043 --> 00:17:59,780 line:-2
今年我们对远程控制UI
所添加的其中一个新功能是


297
00:17:59,847 --> 00:18:04,284 line:-1
选择和修改音频语言和字幕的能力


298
00:18:04,785 --> 00:18:07,521 line:-1
因此如果你拥有带有这些选项的视频


299
00:18:07,921 --> 00:18:09,923 line:-1
你一定想在远程控制中


300
00:18:10,757 --> 00:18:11,925 line:-1
添加这种类型的支持


301
00:18:13,694 --> 00:18:20,234 line:-2
这可以让人们轻松地
以他们想要和需要的方式观看视频


302
00:18:20,801 --> 00:18:22,102 line:-1
你可以通过提供一个


303
00:18:22,169 --> 00:18:26,940 line:-1
代表音频语言和字幕的


304
00:18:28,041 --> 00:18:30,244 line:-2
听得见的和易读的语言选项列表
来添加这种支持


305
00:18:30,677 --> 00:18:32,312 line:-1
然后你还可以识别


306
00:18:32,379 --> 00:18:34,214 line:-1
其中每个群组的当前选项


307
00:18:35,115 --> 00:18:36,416 line:-1
最后你要通过远程UI


308
00:18:36,583 --> 00:18:39,653 line:-1
处理那些选择


309
00:18:41,355 --> 00:18:43,357 line:-1
让我们看看如何提供这个信息


310
00:18:45,459 --> 00:18:46,960 line:-1
首先创建一个映射


311
00:18:47,027 --> 00:18:54,001 line:-2
我要从我的AVAsset中加载
听得见的和易读的语言群组


312
00:18:55,002 --> 00:18:56,770 line:-1
我要通过把它们转化到


313
00:18:57,070 --> 00:19:00,874 line:-1
代表这些选项的媒体播放器对象中


314
00:19:00,941 --> 00:19:03,210 line:-1
来创建它们的映射


315
00:19:03,277 --> 00:19:05,145 line:-1
我可以使用便利的函数来实现


316
00:19:05,812 --> 00:19:08,916 line:-1
我要在我的app中维持这种映射


317
00:19:08,982 --> 00:19:11,785 line:-2
因此当我从远程命令中
收到语言选项时


318
00:19:11,852 --> 00:19:14,688 line:-2
我最终可以把它转化到
AVFoundation对象中


319
00:19:14,988 --> 00:19:18,158 line:-2
并在我的AVPlayer项上
设置它 从而修改选择


320
00:19:20,227 --> 00:19:23,263 line:-2
创建好映射之后
我就可以更新那个信息了


321
00:19:23,697 --> 00:19:27,334 line:-2
在这里我要在update方法中
针对播放信息执行这种操作


322
00:19:27,668 --> 00:19:31,672 line:-2
我已经在播放信息中添加了
播放时长和已播放时间


323
00:19:32,506 --> 00:19:36,743 line:-1
为此 我要添加一个可用选项群组


324
00:19:38,212 --> 00:19:39,680 line:-1
及其当前选择的列表


325
00:19:41,815 --> 00:19:44,885 line:-1
现在我们要处理对这些选择的更改


326
00:19:46,787 --> 00:19:49,823 line:-2
我可以在我的setup方法中
对远程控制执行这种操作


327
00:19:50,290 --> 00:19:54,061 line:-2
或我可以添加支持
enableLanguageOptionCommand


328
00:19:55,395 --> 00:19:58,365 line:-1
这个处理器将首先获取当前播放项


329
00:19:59,900 --> 00:20:02,769 line:-2
然后使用我的映射来获取
我所接收的语言选项


330
00:20:03,036 --> 00:20:06,406 line:-2
并把它转化为
AVFoundation对象


331
00:20:08,675 --> 00:20:10,677 line:-1
然后我就使用AVPlayer项


332
00:20:10,744 --> 00:20:12,913 line:-1
选择option和group方法


333
00:20:13,647 --> 00:20:16,950 line:-1
从而为当前项选择新选项


334
00:20:17,885 --> 00:20:19,753 line:-1
我想更新我的“现在播放”信息


335
00:20:19,820 --> 00:20:22,689 line:-1
和其它内部状态并处理那个播放变更


336
00:20:25,893 --> 00:20:29,096 line:-2
现在有些类型的选项群组
可能什么都没选择


337
00:20:29,162 --> 00:20:31,965 line:-1
比如关闭字幕和隐藏字幕


338
00:20:32,499 --> 00:20:35,035 line:-2
通过disableLanguage
OptionCommand实现


339
00:20:35,102 --> 00:20:38,872 line:-2
因此你一定要确保支持
启用和禁用命令


340
00:20:39,640 --> 00:20:43,210 line:-2
并且处理器非常类似
首先获取当前项


341
00:20:44,444 --> 00:20:46,780 line:-1
并使用我的映射查找群组


342
00:20:47,781 --> 00:20:49,082 line:-1
但现在我要查看


343
00:20:49,650 --> 00:20:53,453 line:-2
群组是否允许空选择
并确保它可以允许空选择


344
00:20:56,056 --> 00:20:57,057 line:-1
如果它允许


345
00:20:57,124 --> 00:20:58,559 line:-1
我就使用同一个选择方法


346
00:20:58,625 --> 00:21:00,027 line:-1
但传递“无”作为选项


347
00:21:00,093 --> 00:21:02,396 line:-2
这将取消那个群组中所选择的
全部选项


348
00:21:06,300 --> 00:21:09,203 line:-2
因此我就得到了
我可以支持的完整远程控制集


349
00:21:09,436 --> 00:21:11,972 line:-1
我要何时注册和注销这些呢？


350
00:21:12,706 --> 00:21:15,943 line:-2
对于绝大多数视频app来说
当你有要播放的内容时进行注册


351
00:21:16,210 --> 00:21:20,247 line:-2
即当用户在你的app中选择了一个
视频时


352
00:21:21,582 --> 00:21:24,051 line:-2
当你没有什么要播放的东西时
你一定想进行注销


353
00:21:24,117 --> 00:21:27,120 line:-1
即当用户退出视频时


354
00:21:27,721 --> 00:21:31,225 line:-2
你可以利用那个机会来清除字典中的
“正在播放”信息


355
00:21:31,291 --> 00:21:33,794 line:-1
从而确保不保留数据


356
00:21:36,563 --> 00:21:38,832 line:-1
我提到过那并不仅仅是控制


357
00:21:38,899 --> 00:21:41,635 line:-2
在你的设备上播放什么
还要控制你周围的设备


358
00:21:42,402 --> 00:21:44,671 line:-1
因此如果你有一个tvOS app


359
00:21:45,205 --> 00:21:48,275 line:-2
用于尝试在Apple TV上
播放内容


360
00:21:48,342 --> 00:21:50,911 line:-1
并在iPhone上下拉控制中心


361
00:21:51,445 --> 00:21:53,146 line:-1
而锚定那台Apple TV


362
00:21:53,514 --> 00:21:57,251 line:-2
请看 你可以看到
你所预期的视频信息


363
00:21:57,317 --> 00:21:59,019 line:-2
并且你也可以按照你的预期
对其进行控制


364
00:21:59,219 --> 00:22:01,622 line:-2
这对于使用Siri来控制你的电视
是一样的


365
00:22:05,626 --> 00:22:07,995 line:-1
我刚才所讲到的例子


366
00:22:08,061 --> 00:22:10,330 line:-2
都是我们所制作的
与本场演讲相关联的


367
00:22:10,397 --> 00:22:11,665 line:-1
示例项目的一部分


368
00:22:11,732 --> 00:22:13,100 line:-1
我建议你们查看一下示例项目


369
00:22:16,970 --> 00:22:18,505 line:-1
好吧 我们已经拥有高品质内容


370
00:22:18,572 --> 00:22:20,440 line:-1
我们可以在电视上播放它并控制它


371
00:22:21,108 --> 00:22:22,309 line:-1
当在电视上播放时


372
00:22:22,376 --> 00:22:26,280 line:-2
如果我可以同时使用手机或iPad
做其它事情的话就太棒了


373
00:22:27,581 --> 00:22:31,385 line:-2
要支持一种优秀的多任务体验
你需要采取两个步骤


374
00:22:31,919 --> 00:22:34,188 line:-1
第一步是确保当用户执行多任务时


375
00:22:34,988 --> 00:22:36,356 line:-1
你的视频可以持续播放


376
00:22:37,191 --> 00:22:38,659 line:-1
第二步是确保


377
00:22:39,159 --> 00:22:41,461 line:-1
如果电视上已经有正在播放的视频


378
00:22:41,662 --> 00:22:44,665 line:-2
你的app在对其UI进行导航时
不会意外地


379
00:22:45,532 --> 00:22:47,134 line:-1
中断那种体验


380
00:22:49,403 --> 00:22:52,239 line:-1
因此当我正在收集上观看视频时


381
00:22:52,973 --> 00:22:55,175 line:-1
我的视频app通常会留在前台


382
00:22:55,242 --> 00:22:57,344 line:-1
因为我需要在屏幕上看它


383
00:22:59,680 --> 00:23:01,381 line:-1
但当我在电视上进行隔空播放时


384
00:23:01,448 --> 00:23:04,017 line:-2
我现在可以自由使用
iPhone来做其它事了


385
00:23:04,084 --> 00:23:06,820 line:-1
比如查看我的消息或邮件或社交媒体


386
00:23:10,023 --> 00:23:13,560 line:-2
如果我使用了
不支持后台媒体的视频app


387
00:23:15,662 --> 00:23:17,931 line:-2
当我离开那个app时
视频将停止播放


388
00:23:18,432 --> 00:23:21,568 line:-2
因此我们一定要确保你的视频
可以继续播放


389
00:23:23,470 --> 00:23:26,406 line:-2
你可以通过在app的
Info.plist文件中


390
00:23:26,473 --> 00:23:27,908 line:-1
支持音频后台模式来实现


391
00:23:29,343 --> 00:23:31,578 line:-2
并且你还可以把
AVAudioSession配置为


392
00:23:31,645 --> 00:23:32,980 line:-1
后台播放


393
00:23:33,981 --> 00:23:37,017 line:-2
对于绝大多数视频app来说
那意味着使用播放类别


394
00:23:37,084 --> 00:23:41,588 line:-2
这就在你的app中
提供了媒体适当行为


395
00:23:42,489 --> 00:23:44,091 line:-1
包括在后台播放


396
00:23:46,360 --> 00:23:48,462 line:-1
关于播放类别设备的另一点是


397
00:23:48,529 --> 00:23:49,863 line:-1
它会中断其它媒体的播放


398
00:23:49,930 --> 00:23:53,967 line:-1
当用户按下播放


399
00:23:54,034 --> 00:23:56,737 line:-2
并开始播放你app中的一段
主要内容时


400
00:23:56,803 --> 00:23:59,306 line:-1
确保你仅激活你的音频会话非常重要


401
00:24:01,008 --> 00:24:03,510 line:-2
一旦你的app被激活
它就可以保持激活状态


402
00:24:05,412 --> 00:24:07,781 line:-1
不必仅仅因为用户暂停了视频


403
00:24:07,848 --> 00:24:10,350 line:-1
就遣散你的音频会话


404
00:24:13,187 --> 00:24:16,690 line:-1
现在媒体中断可在任意时间发生


405
00:24:16,990 --> 00:24:21,228 line:-2
因此在AVAudioSession上
监听这些通知很重要


406
00:24:21,995 --> 00:24:25,999 line:-2
当中断开始时
你就更新你的UI和内部状态


407
00:24:26,967 --> 00:24:29,736 line:-1
当它结束时 请查看通知有效载荷


408
00:24:30,070 --> 00:24:33,941 line:-2
并确保你检查了
shouldResume键


409
00:24:34,541 --> 00:24:36,176 line:-1
并使用那个值


410
00:24:36,510 --> 00:24:40,480 line:-2
因此 仅当那个值返回真时自动恢复
视频播放


411
00:24:42,182 --> 00:24:44,818 line:-1
当电视上已经正在播放视频时


412
00:24:44,885 --> 00:24:47,621 line:-1
测试你的app并启动它


413
00:24:47,688 --> 00:24:48,956 line:-1
用于导航UI


414
00:24:49,156 --> 00:24:50,290 line:-1
并确保不会发生


415
00:24:50,357 --> 00:24:52,693 line:-1
你不希望发生的突然中断隔空播放


416
00:24:53,026 --> 00:24:56,196 line:-1
或突然中断当前视频体验


417
00:24:57,598 --> 00:25:01,168 line:-1
我想讲一些你可能会遇到的几个例子


418
00:25:03,003 --> 00:25:06,039 line:-2
第一个 有时存在永远不应该进行
隔空播放的视频


419
00:25:06,106 --> 00:25:10,043 line:-1
因此如果在app启动时有启动动画


420
00:25:10,110 --> 00:25:12,279 line:-1
那是我通过视频资产实现的启动动画


421
00:25:13,213 --> 00:25:16,950 line:-1
你一定不想让启动动画中断当前体验


422
00:25:17,484 --> 00:25:21,221 line:-1
对于用于其他类型的视觉丰富


423
00:25:21,421 --> 00:25:23,490 line:-2
或在我app内促销内容的视频资产
也一样


424
00:25:24,458 --> 00:25:26,260 line:-1
你一定要确保那些视频


425
00:25:26,326 --> 00:25:30,531 line:-2
不会中断当前体验
并保留在设备本地


426
00:25:30,898 --> 00:25:33,500 line:-2
你可以通过把allowsExternalPlayback
设为假来实现


427
00:25:35,869 --> 00:25:37,804 line:-1
你的app仅应该


428
00:25:37,871 --> 00:25:40,474 line:-2
在用户直接与该视频进行交互时
隔空播放视频


429
00:25:43,043 --> 00:25:44,144 line:-1
为了那个目的


430
00:25:45,546 --> 00:25:48,549 line:-2
你不应该仅仅因为你的app被启动
或进入前台


431
00:25:48,615 --> 00:25:51,285 line:-1
就自动播放主要内容


432
00:25:53,453 --> 00:25:54,454 line:-1
当提到媒体时


433
00:25:54,521 --> 00:25:57,824 line:-1
人们总是应该能控制何时开始播放


434
00:25:58,825 --> 00:25:59,793 line:-1
这一点非常重要


435
00:25:59,860 --> 00:26:02,629 line:-1
我想讲一些例子 解释一下为什么


436
00:26:04,765 --> 00:26:07,000 line:-2
在这里 我正在
我的iPhone上听音乐


437
00:26:07,367 --> 00:26:11,104 line:-1
我有一个支持按需视频的视频app


438
00:26:11,171 --> 00:26:13,674 line:-1
当app进入前台时


439
00:26:14,308 --> 00:26:15,943 line:-1
我可以观看并自动播放直播电视频道


440
00:26:17,377 --> 00:26:19,446 line:-2
因此如果我正在听音乐
我启动了那个app


441
00:26:19,713 --> 00:26:22,783 line:-2
将会停止播放音乐
而我再也不能控制它了


442
00:26:24,484 --> 00:26:26,587 line:-1
也许我不是为了观看直播视频


443
00:26:26,653 --> 00:26:28,422 line:-1
才启动那个app


444
00:26:30,724 --> 00:26:34,528 line:-2
你一定要确保人们可以
在启动你的app时


445
00:26:34,761 --> 00:26:38,031 line:-1
明确了解那不会中断他们当前的体验


446
00:26:39,833 --> 00:26:42,870 line:-2
我将举例说明今年新添加的一个
重要功能


447
00:26:45,372 --> 00:26:46,640 line:-1
对于长格式视频app来说


448
00:26:46,707 --> 00:26:50,377 line:-1
当视频开始播放时


449
00:26:51,578 --> 00:26:53,480 line:-1
iOS可以推荐自动播放视频的电视


450
00:26:54,314 --> 00:26:56,917 line:-2
当iOS为你做出推荐时
系统会提供一个通知


451
00:26:56,984 --> 00:27:00,687 line:-1
告诉用户视频将在电视上自动播放


452
00:27:01,421 --> 00:27:04,758 line:-1
人们可以轻触通知或状态栏图标


453
00:27:04,825 --> 00:27:06,827 line:-1
来修改所推荐的目的地


454
00:27:08,729 --> 00:27:12,599 line:-1
如果我有一款自动播放内容的app


455
00:27:13,433 --> 00:27:16,203 line:-2
在我有机会真正查看通知
并与通知进行交互之前


456
00:27:16,270 --> 00:27:20,140 line:-1
很可能就会在电视上开始播放视频


457
00:27:21,275 --> 00:27:23,443 line:-1
通过使用开始播放动作


458
00:27:24,545 --> 00:27:29,650 line:-2
你可以为人们提供能决定何时
以及在哪里播放视频的能力


459
00:27:30,050 --> 00:27:32,286 line:-1
那会创建一种优秀的媒体体验


460
00:27:33,020 --> 00:27:36,190 line:-2
为了让大家更好地了解
长格式视频app


461
00:27:36,523 --> 00:27:39,993 line:-1
及其与智能隔空播放建议的集成


462
00:27:40,394 --> 00:27:42,863 line:-2
我要邀请我同事
Marty Pye上台来


463
00:27:51,371 --> 00:27:52,239 line:-1
谢谢Jonathan


464
00:27:52,306 --> 00:27:53,440 line:-1
大家好


465
00:27:53,507 --> 00:27:54,541 line:-1
我是Marty Pye


466
00:27:54,608 --> 00:27:56,276 line:-2
我是Apple的
AVKit软件工程师


467
00:27:57,110 --> 00:27:59,012 line:-1
今天我在这里要与大家分享一些


468
00:27:59,079 --> 00:28:02,282 line:-2
关于我们嵌入到iOS 13中的
高级路由功能


469
00:28:02,716 --> 00:28:05,752 line:-2
以及你的长格式视频app
该如何利用这些功能


470
00:28:06,887 --> 00:28:10,057 line:-2
首先我们要讲一下
到底什么是长格式视频app


471
00:28:11,024 --> 00:28:12,559 line:-1
然后我们再讲讲


472
00:28:12,626 --> 00:28:16,597 line:-2
我们针对长格式视频app创建了
哪些具体的路由行为


473
00:28:16,997 --> 00:28:20,934 line:-2
最后我要为大家介绍
如何把这些功能集成到你的代码中


474
00:28:23,370 --> 00:28:24,838 line:-1
那么什么是长格式视频app？


475
00:28:25,339 --> 00:28:29,409 line:-2
正如它的名字所暗示的那样
任何主要播放长格式视频内容app


476
00:28:29,743 --> 00:28:31,211 line:-1
都可以称为长格式视频app


477
00:28:31,278 --> 00:28:34,181 line:-1
内容包含比如电影


478
00:28:34,615 --> 00:28:38,385 line:-2
或电视类内容
比如电视节目、体育节目等等


479
00:28:39,686 --> 00:28:43,423 line:-1
如果你的app主要是从社交媒体


480
00:28:43,757 --> 00:28:45,559 line:-1
或其它类型的短视频片段播放内容


481
00:28:45,626 --> 00:28:48,095 line:-1
那它就不是长格式视频app


482
00:28:50,230 --> 00:28:52,733 line:-1
我们推荐你全面评估你的app


483
00:28:52,799 --> 00:28:55,602 line:-1
从而决定它属于哪一类


484
00:28:56,470 --> 00:28:58,906 line:-2
一旦你确定你的app
是长格式视频app


485
00:28:58,972 --> 00:29:02,543 line:-2
对于此类app
隔空播放路由行为有何不同？


486
00:29:03,744 --> 00:29:05,145 line:-1
让我们看一个例子


487
00:29:06,880 --> 00:29:10,617 line:-2
假如你正在观看关于香蕉蛞蝓的一个
纪录片


488
00:29:10,684 --> 00:29:14,354 line:-2
并且你把这个内容从iPhone上
投到Apple TV上隔空播放


489
00:29:15,689 --> 00:29:20,994 line:-2
iOS 13有个新功能 当朋友
给你发送他最新的越野摩托车视频时


490
00:29:21,295 --> 00:29:24,598 line:-2
你可以继续并在本地设备上观看
这个较短的视频


491
00:29:24,932 --> 00:29:28,535 line:-2
而不需要中断正在电视上播放的
香蕉蛞蝓的纪录片


492
00:29:31,305 --> 00:29:35,209 line:-2
我们嵌入iOS 13中的
另一个功能是隔空播放建议


493
00:29:36,677 --> 00:29:38,712 line:-1
如果用户要播放某些内容


494
00:29:38,779 --> 00:29:43,016 line:-2
隔空播放路由系统会检测附近
可能的隔空播放设备


495
00:29:43,717 --> 00:29:48,755 line:-2
然后系统可能提示用户并建议
在这台设备上进行隔空播放


496
00:29:48,822 --> 00:29:50,791 line:-1
或取决于系统的自信程度


497
00:29:50,858 --> 00:29:54,528 line:-2
系统可能还会自动在那台设备上
路由播放


498
00:29:55,762 --> 00:30:00,067 line:-2
现在你了解了这些功能
要如何在你的app中利用它们呢？


499
00:30:00,801 --> 00:30:02,569 line:-1
嗯 你需要做两件事


500
00:30:02,803 --> 00:30:06,673 line:-2
第一件事是把你的app注册为
长格式视频app


501
00:30:07,541 --> 00:30:08,742 line:-1
这要如何实现呢？


502
00:30:09,409 --> 00:30:10,577 line:-1
非常非常简单


503
00:30:11,512 --> 00:30:14,748 line:-2
你所要做的就是在你app的
Info.plist文件中


504
00:30:14,815 --> 00:30:18,018 line:-1
添加AVInitialRouteSharingPolicy键


505
00:30:19,186 --> 00:30:20,654 line:-1
通过把它设置到plist上


506
00:30:20,854 --> 00:30:22,589 line:-1
在你创建任何播放对象之前


507
00:30:22,656 --> 00:30:24,992 line:-1
以及在app启动的时候


508
00:30:25,292 --> 00:30:27,694 line:-1
我们可以确保你的app


509
00:30:27,895 --> 00:30:29,463 line:-2
跟系统上其它长格式视频
app的行为差不多


510
00:30:33,333 --> 00:30:35,135 line:-1
为了利用隔空播放建议


511
00:30:35,202 --> 00:30:38,005 line:-1
你需要做的第二件事是


512
00:30:38,071 --> 00:30:40,474 line:-1
预备要播放的路由系统


513
00:30:41,942 --> 00:30:45,512 line:-2
我首先要给你一个概念上的综述
让你了解它是如何运作的


514
00:30:45,579 --> 00:30:48,081 line:-1
然后我们再从代码中实现它


515
00:30:51,752 --> 00:30:54,922 line:-2
在你的app中
你最可能有某种浏览UI


516
00:30:54,988 --> 00:30:58,292 line:-1
用户们可以在不同内容之间进行滚动


517
00:30:58,759 --> 00:31:01,929 line:-1
选择他们想要播放的内容并点击播放


518
00:31:02,696 --> 00:31:06,266 line:-2
嗯 在这个转换中
从浏览到实际的播放


519
00:31:06,466 --> 00:31:09,169 line:-1
你应该预备好隔空播放路由系统


520
00:31:10,437 --> 00:31:12,506 line:-1
当你预备路由系统时会发生什么？


521
00:31:13,807 --> 00:31:18,612 line:-2
嗯 它可能会决定自动在本地设备上
播放内容


522
00:31:18,679 --> 00:31:21,281 line:-1
或把内容路由到外部屏幕上


523
00:31:21,481 --> 00:31:24,451 line:-1
很可能是附近的隔空播放设备


524
00:31:24,518 --> 00:31:27,454 line:-2
或如果你有连接到设备上的
外部屏幕的话


525
00:31:29,323 --> 00:31:31,491 line:-1
然而 取决于自信等级


526
00:31:31,658 --> 00:31:33,493 line:-1
系统可能还会提示用户


527
00:31:33,727 --> 00:31:38,098 line:-2
请求是否会在附近的隔空播放设备上
进行播放


528
00:31:39,533 --> 00:31:41,535 line:-1
然后取决于用户的选择


529
00:31:41,602 --> 00:31:43,270 line:-1
然后控制会交还到你的app手上


530
00:31:43,670 --> 00:31:46,240 line:-1
其中包含内容要在哪里播放的信息


531
00:31:48,876 --> 00:31:51,111 line:-1
让我们看一下如何在代码中实现


532
00:31:52,479 --> 00:31:55,349 line:-1
当用户决定点击播放时


533
00:31:55,782 --> 00:31:58,485 line:-2
你应该
在AVAudioSession上


534
00:31:58,652 --> 00:32:00,087 line:-2
调用
prepareRouteSelectionForPlayback


535
00:32:00,921 --> 00:32:02,823 line:-1
这个方法接受一个完成处理器


536
00:32:04,124 --> 00:32:06,493 line:-1
如果隔空播放可以-


537
00:32:06,560 --> 00:32:07,461 line:-2
如果隔空播放路由系统可以做出
自动播放决策的话


538
00:32:07,528 --> 00:32:10,697 line:-1
将会立即调用这个完成处理器


539
00:32:11,598 --> 00:32:15,602 line:-1
然而 可能还会给用户呈现一个提示


540
00:32:16,270 --> 00:32:18,906 line:-2
请求用户是否要在附近的这台
隔空播放设备上进行播放


541
00:32:19,406 --> 00:32:22,943 line:-1
如果用户决定要在本地播放内容


542
00:32:23,410 --> 00:32:27,814 line:-2
然后会调用你的完成处理器
其路由选择类型为本地


543
00:32:29,583 --> 00:32:31,985 line:-2
现在你可以继续
并呈现你的播放UI了


544
00:32:32,186 --> 00:32:34,221 line:-1
比如AVPlayerViewController


545
00:32:34,821 --> 00:32:37,524 line:-2
或你可以呈现你自己的
自定义播放UI


546
00:32:38,792 --> 00:32:42,229 line:-1
相反 如果用户决定


547
00:32:42,429 --> 00:32:43,931 line:-1
他们要在客厅隔空播放内容


548
00:32:44,431 --> 00:32:46,400 line:-1
然后会调用你的完成处理器


549
00:32:46,466 --> 00:32:48,402 line:-1
其路由选择类型为外部


550
00:32:49,469 --> 00:32:52,039 line:-1
此时你有机会呈现


551
00:32:52,105 --> 00:32:54,875 line:-1
某种自定义远程播放UI


552
00:32:55,142 --> 00:32:58,445 line:-1
其控件可以专用于控制


553
00:32:58,512 --> 00:33:00,314 line:-1
正在外部显示屏上播放的内容


554
00:33:00,781 --> 00:33:04,852 line:-2
最后不要忘记处理这种情况
即用户决定取消播放的情况


555
00:33:06,253 --> 00:33:09,356 line:-2
为了测试你的app
及其隔空播放建议


556
00:33:09,523 --> 00:33:11,525 line:-1
在各种不同情境中的表现


557
00:33:12,059 --> 00:33:16,363 line:-2
我们在开发者设置中创建了一些
toggle


558
00:33:16,997 --> 00:33:19,399 line:-1
如果你深入到开发者设置中


559
00:33:19,600 --> 00:33:22,002 line:-1
你会发现这个新添加的隔空播放建议


560
00:33:23,103 --> 00:33:26,807 line:-1
在这里 你可以选择三种不同的模式


561
00:33:28,509 --> 00:33:31,478 line:-1
默认模式就是默认系统行为


562
00:33:33,080 --> 00:33:34,915 line:-1
你还可以模式之间进行选择


563
00:33:35,349 --> 00:33:38,252 line:-1
在这种模式下 系统总是会提示用户


564
00:33:38,318 --> 00:33:42,523 line:-2
并请求是否应该在特定设备上
隔空播放内容


565
00:33:43,257 --> 00:33:45,058 line:-1
或你可以强制系统进入一种模式


566
00:33:45,125 --> 00:33:48,896 line:-1
总是会在特定设备上自动路由播放


567
00:33:49,463 --> 00:33:51,798 line:-1
并且你还可以选择这应用于


568
00:33:52,032 --> 00:33:55,302 line:-2
下面列出的附近的路由列表中的
哪一台设备


569
00:33:56,003 --> 00:33:58,839 line:-1
一旦你强制用户进入特定模式


570
00:33:59,206 --> 00:34:01,542 line:-1
请一定要重设媒体服务


571
00:34:02,910 --> 00:34:05,812 line:-1
如果你担心隔空播放建议是否


572
00:34:05,879 --> 00:34:07,748 line:-2
能处理每一种用户可能想要执行
隔空播放的可能的用例


573
00:34:07,814 --> 00:34:10,984 line:-1
不用担心


574
00:34:11,251 --> 00:34:12,286 line:-1
最终


575
00:34:12,953 --> 00:34:16,790 line:-2
你仍能完全控制何时以及在哪里进行
隔空播放


576
00:34:17,324 --> 00:34:22,094 line:-2
你总是可以选择修改
你要进行隔空播放的设备


577
00:34:22,161 --> 00:34:24,364 line:-2
你可以通过app内的
AVRoutePickerView实现


578
00:34:25,032 --> 00:34:27,601 line:-2
或通过AVPlayerViewController内的
控件实现


579
00:34:27,935 --> 00:34:29,469 line:-1
或通过控制中心实现


580
00:34:31,271 --> 00:34:34,541 line:-1
这些新功能使用户


581
00:34:34,608 --> 00:34:37,578 line:-2
在他们所选择的设备上播放你的内容
变得更简单了


582
00:34:38,478 --> 00:34:41,047 line:-2
我们建议你们查看
与此相关联的示例代码


583
00:34:41,481 --> 00:34:43,617 line:-2
我们在一个简单的
测试app中演示了


584
00:34:43,784 --> 00:34:46,987 line:-1
如何继承我们今天所描述的行为


585
00:34:47,821 --> 00:34:49,223 line:-1
那么我们今天学到了什么？


586
00:34:49,989 --> 00:34:52,525 line:-2
我们了解了如何通过
AVRoutePickerView


587
00:34:52,592 --> 00:34:54,061 line:-2
把隔空播放选择器
集成到你的app中


588
00:34:54,862 --> 00:34:59,032 line:-2
我们了解了如何通过
MPRemoteCommandCenter


589
00:34:59,099 --> 00:35:00,834 line:-1
处理和注册远程控制命令


590
00:35:01,235 --> 00:35:05,038 line:-2
以及如何用相关的“正在播放”信息
填充系统UI


591
00:35:06,707 --> 00:35:09,409 line:-1
我们了解了如何利用隔空播放多任务


592
00:35:09,476 --> 00:35:12,179 line:-2
以及如何把你的app注册为一个
长格式视频app


593
00:35:14,081 --> 00:35:17,651 line:-2
最后我们了解了如何在播放之前
预备路由系统


594
00:35:17,718 --> 00:35:20,120 line:-1
从而充分利用隔空播放建议


595
00:35:21,955 --> 00:35:25,559 line:-2
就是这些了 我想感谢你们大家
今天能来参加我们的演讲


596
00:35:26,894 --> 00:35:28,996 line:-2
我们已经迫不及待地要看到你们
把这些隔空播放的新功能


597
00:35:29,062 --> 00:35:30,564 line:-1
集成到你的app中了


598
00:35:31,265 --> 00:35:32,766 line:-1
请享受余下的大会时光

