1
00:00:06,406 --> 00:00:09,943 line:0
（如何创建独立的
Watch App）


2
00:00:15,749 --> 00:00:16,583 line:-1
大家好


3
00:00:17,050 --> 00:00:19,887 line:-2
我是Neil Desai
是一名watchOS框架工程师


4
00:00:19,953 --> 00:00:22,155 line:-1
今天很开心向大家介绍


5
00:00:22,222 --> 00:00:25,158 line:-1
如何创建独立的Watch app


6
00:00:26,560 --> 00:00:29,930 line:-1
现在 越来越多的人出门


7
00:00:29,997 --> 00:00:31,865 line:-1
只带Apple Watch


8
00:00:31,932 --> 00:00:36,136 line:-2
用户喜欢Apple Watch
给他们带来的快速互动和自由


9
00:00:36,970 --> 00:00:39,973 line:-1
不管是带着Watch去运动


10
00:00:40,307 --> 00:00:43,310 line:-1
出差 或者就是接一个电话


11
00:00:45,479 --> 00:00:49,449 line:-2
Apple Watch都能帮你
和你最在意的人 信息


12
00:00:49,516 --> 00:00:51,618 line:-1
或者是app相连


13
00:00:52,986 --> 00:00:57,491 line:-2
现在我们享受着
Apple Watch带来的自由


14
00:00:57,991 --> 00:01:00,694 line:-1
用户将它们的iPhone当做备胎


15
00:01:02,663 --> 00:01:04,364 line:-2
所以我们想让
我们的Watch app


16
00:01:04,431 --> 00:01:07,901 line:-2
也达到用户对
Apple Watch的期望


17
00:01:07,968 --> 00:01:10,838 line:-1
为此 我们引入了一个全新的概念


18
00:01:10,904 --> 00:01:14,408 line:-1
叫做独立Watch app


19
00:01:15,042 --> 00:01:18,412 line:-2
所以现在你的iPhone app
也会成为备胎


20
00:01:18,478 --> 00:01:19,680 line:-1
（独立WATCH APP）


21
00:01:20,681 --> 00:01:23,750 line:-2
许多app现在或多或少
已经是独立的了


22
00:01:23,817 --> 00:01:26,587 line:-2
Outcast就是一款
很好的播客app


23
00:01:26,653 --> 00:01:30,691 line:-1
我从手腕上就可以直接控制整个体验


24
00:01:31,525 --> 00:01:34,494 line:-2
CARROT天气是
另一款很好的例子


25
00:01:34,561 --> 00:01:38,332 line:-2
我经常用它来查看天气
我仅在Apple Watch上用


26
00:01:39,066 --> 00:01:44,538 line:-2
我出国旅游时也经常会用
Elk进行货币兑换


27
00:01:45,038 --> 00:01:47,875 line:-2
但是 这些app
都有iPhone版本


28
00:01:48,976 --> 00:01:52,346 line:-2
现在既然我们说
iPhone app是备胎


29
00:01:52,679 --> 00:01:54,314 line:-1
那么史上第一次


30
00:01:54,948 --> 00:01:59,686 line:-2
你可开发为Watch
量身定做app而不用做iOS版本


31
00:02:01,154 --> 00:02:01,989 line:-1
谢谢


32
00:02:06,260 --> 00:02:08,495 line:-1
为了让你的app独立起来


33
00:02:08,562 --> 00:02:10,997 line:-2
我来为你们介绍
今年针对Watch app


34
00:02:11,064 --> 00:02:12,032 line:-1
推出的新功能


35
00:02:12,099 --> 00:02:16,436 line:-1
比如直接向设备发送推送通知


36
00:02:16,703 --> 00:02:21,275 line:-2
以及使登录更加容易
还有许多其他的功能


37
00:02:21,775 --> 00:02:23,243 line:-1
但是首先我想谈谈


38
00:02:23,310 --> 00:02:25,679 line:-1
到底怎么安装这些app


39
00:02:27,481 --> 00:02:29,082 line:-1
现在 在Watch iOS 5中


40
00:02:29,149 --> 00:02:31,919 line:-2
Watch app是
嵌入到iOS app中的


41
00:02:31,985 --> 00:02:34,388 line:-2
所以我们将两种版本
都下载到iPhone


42
00:02:35,489 --> 00:02:38,725 line:-2
之后由iPhone来处理
Watch app安装任务


43
00:02:38,792 --> 00:02:40,961 line:-2
所以安装要从iPhone
到Apple Watch


44
00:02:43,197 --> 00:02:44,031 line:-1
而且…


45
00:02:44,097 --> 00:02:48,435 line:-2
我们在iOS 13和watchOS 6中
将完全改变这一点


46
00:02:48,502 --> 00:02:51,605 line:-1
所以现在App Store服务器


47
00:02:51,672 --> 00:02:55,475 line:-2
无论在何时何地
都可以安装这些app


48
00:02:55,542 --> 00:02:59,279 line:-1
而且它将应用于商店中的所有app


49
00:03:00,614 --> 00:03:01,849 line:-1
（安装）


50
00:03:01,915 --> 00:03:02,749 line:-1
所以


51
00:03:03,617 --> 00:03:07,521 line:-2
这意味着iOS app
不再包括Watch app


52
00:03:07,588 --> 00:03:11,625 line:-2
有些人可能会很高兴听到下面一点
Watch app不再会计入你的


53
00:03:11,692 --> 00:03:14,461 line:-1
iOS app蜂窝下载限制了


54
00:03:15,462 --> 00:03:17,164 line:-1
然后 谢谢


55
00:03:20,300 --> 00:03:24,538 line:-2
我们可以通过用bitcode
重新编译App Store中的


56
00:03:24,605 --> 00:03:26,073 line:-1
所有的app来实现这一操作


57
00:03:26,139 --> 00:03:29,743 line:-2
将iOS app
与Watch app分开来


58
00:03:30,644 --> 00:03:34,047 line:-2
也就是说每个设备可以
分别下载自己的app


59
00:03:34,114 --> 00:03:37,751 line:-2
所以iPhone有iPhone app
手表有Watch app


60
00:03:40,487 --> 00:03:41,355 line:-1
因此


61
00:03:41,421 --> 00:03:44,491 line:-1
我们可以直接将app下载到设备中


62
00:03:44,558 --> 00:03:47,461 line:-2
我们也第一次将
Watch app的


63
00:03:47,528 --> 00:03:48,562 line:-1
资源和变体细化


64
00:03:49,196 --> 00:03:51,732 line:-2
所以如果你的用户
用的是Series 4的设备


65
00:03:52,032 --> 00:03:55,369 line:-1
我们就可以安装特定适用于


66
00:03:55,435 --> 00:03:56,503 line:-1
该设备的变体


67
00:03:56,570 --> 00:03:59,439 line:-1
和体系结构大小 而不是其他


68
00:03:59,706 --> 00:04:02,843 line:-1
资源也是同样的道理


69
00:04:02,910 --> 00:04:05,445 line:-1
所以如果你已经将资源目录


70
00:04:05,512 --> 00:04:06,346 line:-1
配置为


71
00:04:07,247 --> 00:04:10,551 line:-1
将特定资源用于特定设备


72
00:04:10,617 --> 00:04:13,921 line:-2
那么我们就能将
特定的资源安装到特定的设备


73
00:04:14,988 --> 00:04:17,591 line:-1
说得简单一点就是


74
00:04:17,658 --> 00:04:19,125 line:-1
下载会更小


75
00:04:19,192 --> 00:04:21,562 line:-2
Watch app的
二进制规模也会更小


76
00:04:21,995 --> 00:04:26,099 line:-2
如果你是因为Swift 5和
ABI的稳定性而使用Swift


77
00:04:26,166 --> 00:04:29,670 line:-2
那么现在Swift dylibs
已经不包含在你的app里了


78
00:04:29,736 --> 00:04:32,339 line:-1
所以下载还会变得更小


79
00:04:33,540 --> 00:04:36,243 line:-1
所以 这就是我么安装app的方式


80
00:04:36,310 --> 00:04:38,745 line:-2
现在我们来说说
用户要如何获取你的app


81
00:04:40,414 --> 00:04:43,550 line:-2
在iOS App Store里
你的app仍旧可以找到


82
00:04:43,817 --> 00:04:46,086 line:-1
但是现在新的watchOS 6中


83
00:04:46,153 --> 00:04:49,022 line:-2
我们要向你介绍专为Apple Watch
打造的App Store


84
00:04:50,190 --> 00:04:52,726 line:-2
这是一个功能齐全的
App Store


85
00:04:53,227 --> 00:04:55,562 line:-1
有完整的功能部分


86
00:04:55,629 --> 00:04:59,333 line:-1
完整的产品详情页面 搜索 编辑


87
00:04:59,399 --> 00:05:00,434 line:-1
而且我得说


88
00:05:00,501 --> 00:05:02,636 line:-2
你甚至可以直接
在手腕上就能购买app


89
00:05:02,703 --> 00:05:05,105 line:-1
操作起来真的很酷


90
00:05:05,172 --> 00:05:06,607 line:-1
我真的很喜欢


91
00:05:07,174 --> 00:05:10,077 line:-1
现在我们来说说不同类型的app


92
00:05:10,143 --> 00:05:13,780 line:-2
以及它们在新的
Watch App Store中如何运行


93
00:05:14,648 --> 00:05:16,183 line:-1
（依存APP)


94
00:05:16,250 --> 00:05:18,852 line:-1
所以 现在商店里的所有app


95
00:05:18,919 --> 00:05:21,255 line:-1
我们都叫做依存app


96
00:05:21,321 --> 00:05:24,591 line:-2
因为Watch app在系统上
是依赖于iPhone app


97
00:05:24,658 --> 00:05:25,626 line:-1
而存在的


98
00:05:27,828 --> 00:05:30,063 line:-1
所以如果我在Watch


99
00:05:30,130 --> 00:05:32,466 line:-2
App Store里
下载了一款app


100
00:05:32,533 --> 00:05:36,837 line:-2
系统会自动将iPhone版本
下载到你的iPhone


101
00:05:38,005 --> 00:05:40,807 line:-2
如果iPhone app
还没有安装完成


102
00:05:40,874 --> 00:05:43,410 line:-2
那么watchOS app
是启动不了的


103
00:05:43,477 --> 00:05:45,846 line:-1
因为系统认为Watch app


104
00:05:45,913 --> 00:05:47,915 line:-1
是依存于iPhone app的


105
00:05:49,416 --> 00:05:50,250 line:-1
（独立APP）


106
00:05:50,317 --> 00:05:52,019 line:-1
现在 不像依存app


107
00:05:52,085 --> 00:05:55,422 line:-2
独立app的意思是
Watch app可以单独运行


108
00:05:55,489 --> 00:05:58,458 line:-2
也就是说你
不用安装iPhone app


109
00:05:58,525 --> 00:05:59,960 line:-1
也可以启动Watch app


110
00:06:02,429 --> 00:06:05,632 line:-2
也就是说Watch app
是独立安装的


111
00:06:05,699 --> 00:06:10,704 line:-2
如果你同时下载了
iPhone和Watch app


112
00:06:10,771 --> 00:06:13,574 line:-2
那么用户可以
卸载iPhone app


113
00:06:13,640 --> 00:06:15,275 line:-1
而Watch app依旧存在


114
00:06:18,312 --> 00:06:21,048 line:-1
有些人可能开始紧张


115
00:06:21,114 --> 00:06:22,182 line:-1
可能开始思考


116
00:06:22,249 --> 00:06:24,785 line:-2
那我在商店里已经上架的app
会受到什么影响呢


117
00:06:24,852 --> 00:06:27,588 line:-2
那么我告诉你
那些有iOS app的


118
00:06:27,654 --> 00:06:28,689 line:-1
独立watchOS app


119
00:06:28,755 --> 00:06:32,092 line:-1
完全兼容旧版OS


120
00:06:32,726 --> 00:06:35,028 line:-1
而那些新的Watch app


121
00:06:35,329 --> 00:06:36,163 line:-1
谢谢


122
00:06:38,632 --> 00:06:42,903 line:-2
新的Watch app会由
watchOS或更高版本进行支持


123
00:06:44,705 --> 00:06:45,639 line:-1
（企业分发）


124
00:06:45,706 --> 00:06:48,942 line:-1
如果你想在企业内部分发app


125
00:06:49,009 --> 00:06:51,745 line:-2
很高兴告诉你
我们有完整的Xcode支持


126
00:06:51,812 --> 00:06:54,748 line:-1
来创建我们刚刚提到的不同变体


127
00:06:54,815 --> 00:06:57,417 line:-2
来将你的iPhone
和Watch app分离


128
00:06:58,051 --> 00:07:00,454 line:-1
而且当你使用Xcode完成流程时


129
00:07:00,521 --> 00:07:02,923 line:-1
在生成的清单plist中


130
00:07:02,990 --> 00:07:05,959 line:-1
会添加一个新的平台标识符密钥


131
00:07:06,026 --> 00:07:09,496 line:-1
用于告知系统安装内容以及安装位置


132
00:07:11,632 --> 00:07:15,169 line:-2
现在我们了解了
独立Watch app的重要性


133
00:07:15,602 --> 00:07:19,273 line:-2
现在就来说说
如何创建独立Watch app


134
00:07:19,339 --> 00:07:20,874 line:-1
（创建独立Watch App）


135
00:07:21,308 --> 00:07:22,142 line:-1
（演示）


136
00:07:22,209 --> 00:07:25,112 line:-1
现在我们进入Xcode


137
00:07:25,179 --> 00:07:26,980 line:-1
我来告诉你们 将现有app


138
00:07:27,047 --> 00:07:29,883 line:-1
转化为独立app有多简单


139
00:07:37,024 --> 00:07:37,858 line:-1
酷


140
00:07:37,925 --> 00:07:39,626 line:-1
现在我们进入Xcode


141
00:07:39,693 --> 00:07:43,263 line:-2
这是一款很棒的Watch app
现在它还是依存app


142
00:07:43,730 --> 00:07:44,665 line:-1
这是


143
00:07:44,731 --> 00:07:47,701 line:-2
我基本上已经完成了所有
让这个app独立的工作


144
00:07:47,768 --> 00:07:51,038 line:-2
因为这真的是一款在Watch上的
很好的闪卡app


145
00:07:53,340 --> 00:07:55,042 line:-1
所以我们来创建和运行这款app


146
00:07:55,108 --> 00:07:57,911 line:-1
并且看看手机模拟器和手表模拟器


147
00:07:57,978 --> 00:08:01,682 line:-1
与我们想的调试流程是不是一样的


148
00:08:05,018 --> 00:08:07,521 line:-1
现在我们运行Watch app


149
00:08:07,588 --> 00:08:09,957 line:-1
我可以马上启动调试会话


150
00:08:10,224 --> 00:08:13,093 line:-2
但是我们先让系统
将这款app独立起来


151
00:08:13,861 --> 00:08:15,629 line:-1
所以我们先停止调试会话


152
00:08:17,564 --> 00:08:21,602 line:-2
现在在WatchKit扩展的
目标编辑器中


153
00:08:22,035 --> 00:08:24,671 line:-2
我们可以看到在部署目标下方
有一个新的复选框


154
00:08:24,738 --> 00:08:28,041 line:-2
叫支持在未安装iOS app的
情况下运行


155
00:08:28,642 --> 00:08:29,776 line:-1
所以我来看看它


156
00:08:30,277 --> 00:08:31,812 line:-1
然后我再进行创建和运行


157
00:08:31,879 --> 00:08:36,283 line:-2
这样 通过该复选框
我就告诉系统这款app是独立的


158
00:08:36,350 --> 00:08:37,518 line:-1
我刚刚做得挺快的


159
00:08:37,583 --> 00:08:40,721 line:-2
所以现在我来
给你们看看一件很酷的事情


160
00:08:42,089 --> 00:08:44,591 line:-1
让我们关闭iPhone模拟器


161
00:08:45,325 --> 00:08:46,493 line:-1
因为该app是独立的


162
00:08:46,560 --> 00:08:48,662 line:-2
我们就不再需要
iPhone SIM卡了


163
00:08:48,996 --> 00:08:50,631 line:-2
所以我再创建
和运行该app一次


164
00:08:50,998 --> 00:08:53,934 line:-1
现在 我只创建和运行了手表模拟器


165
00:08:54,001 --> 00:08:57,271 line:-1
而且调试过程也更快


166
00:09:01,575 --> 00:09:02,409 line:-1
好


167
00:09:03,911 --> 00:09:07,114 line:-1
好 现在让我们来建立一款


168
00:09:07,181 --> 00:09:08,148 line:-1
只在手表上的app


169
00:09:08,882 --> 00:09:10,484 line:-1
所以我先关闭这个项目


170
00:09:11,251 --> 00:09:15,322 line:-2
为了创建新app
我点击文件 新项目


171
00:09:18,192 --> 00:09:20,527 line:-2
在watchOS下面
我看到了Watch app


172
00:09:20,594 --> 00:09:23,197 line:-2
还有带Watch app的
iOS app


173
00:09:23,263 --> 00:09:25,799 line:-2
现在我想创建
单独的手表app


174
00:09:27,000 --> 00:09:28,268 line:-1
所以我们选这个


175
00:09:34,074 --> 00:09:34,908 line:-1
好


176
00:09:35,175 --> 00:09:37,211 line:-1
然后 我们使用SwiftUI


177
00:09:37,611 --> 00:09:39,713 line:-1
这很酷 有很多好东西


178
00:09:40,781 --> 00:09:43,116 line:-1
我们再创立一个并发


179
00:09:44,084 --> 00:09:46,153 line:-1
之后我再保存到桌面


180
00:09:50,324 --> 00:09:51,325 line:-1
好


181
00:09:52,893 --> 00:09:54,428 line:-1
现在我们来创建和运行该app


182
00:09:54,895 --> 00:09:58,866 line:-2
再次强调 就像我们刚刚
说到的独立app一样


183
00:09:58,932 --> 00:10:00,534 line:-1
我们不需要iPhone模拟器


184
00:10:00,601 --> 00:10:03,570 line:-2
我们就创建和
运行手表app就行


185
00:10:03,637 --> 00:10:05,405 line:-1
直接运用手表模拟器


186
00:10:06,373 --> 00:10:07,207 line:-1
好


187
00:10:12,646 --> 00:10:14,615 line:-1
（演示）


188
00:10:14,681 --> 00:10:15,516 line:-1
谢谢


189
00:10:17,751 --> 00:10:19,186 line:-1
（XCODE中的APP）


190
00:10:19,253 --> 00:10:23,357 line:-1
我们刚刚谈到了如何迁移现有app


191
00:10:23,423 --> 00:10:25,425 line:-2
并将它做成
独立的Watch app


192
00:10:25,993 --> 00:10:28,729 line:-2
我们也可以创建
只在手表上运行的app


193
00:10:28,795 --> 00:10:29,630 line:-1
我们也说了


194
00:10:29,696 --> 00:10:32,366 line:-1
模拟器体验如何大大改善


195
00:10:32,766 --> 00:10:35,302 line:-1
与模拟器体验一样


196
00:10:35,369 --> 00:10:36,737 line:-1
我们接下来就谈谈调试


197
00:10:37,371 --> 00:10:40,007 line:-1
watchOS 6中的调试过程


198
00:10:40,073 --> 00:10:42,709 line:-1
对于模拟器来说 现在快了十倍


199
00:10:42,776 --> 00:10:44,044 line:-1
（调试）


200
00:10:44,111 --> 00:10:44,978 line:-1
谢谢


201
00:10:46,580 --> 00:10:48,982 line:-1
设备调试速度提高了一倍


202
00:10:49,049 --> 00:10:50,517 line:-1
今年我们也做了许多努力


203
00:10:50,584 --> 00:10:53,387 line:-1
让它比以往更加可靠


204
00:10:55,088 --> 00:10:58,292 line:-1
调试依旧通过iPhone代理


205
00:10:58,358 --> 00:11:00,928 line:-1
但是我想给你一个小小的专业提示


206
00:11:00,994 --> 00:11:03,997 line:-2
如果你的手机和手表
都连着Wi-Fi


207
00:11:04,064 --> 00:11:06,867 line:-1
那么系统会选择更快的线路


208
00:11:06,934 --> 00:11:09,369 line:-1
你就可以看到调试过程会更快


209
00:11:10,537 --> 00:11:13,507 line:-1
现在我们来深入探讨


210
00:11:14,074 --> 00:11:15,776 line:-1
如何让app独立起来的不同方面


211
00:11:17,377 --> 00:11:20,447 line:-1
为此我们要讲到三点


212
00:11:20,981 --> 00:11:23,283 line:-1
我们会说到如何通过身份验证


213
00:11:23,350 --> 00:11:26,086 line:-1
获取用户数据 或者直接从用户处


214
00:11:26,420 --> 00:11:27,888 line:-1
获取用户私有数据


215
00:11:29,056 --> 00:11:31,925 line:-1
之后是如何将信息传输至设备


216
00:11:32,392 --> 00:11:35,195 line:-1
最后我们会讲到如何连接


217
00:11:35,262 --> 00:11:37,364 line:-1
和收集自己的app数据


218
00:11:38,398 --> 00:11:40,667 line:-1
首先来谈谈身份验证


219
00:11:41,535 --> 00:11:44,137 line:-1
（登录和注册）


220
00:11:44,204 --> 00:11:46,773 line:-1
处理身份验证的主要方式


221
00:11:46,840 --> 00:11:48,842 line:-1
就是注册和登录


222
00:11:48,909 --> 00:11:50,410 line:-1
现在在watchOS 6中


223
00:11:50,477 --> 00:11:53,480 line:-1
你可以直接在手表上建立注册验证


224
00:11:54,381 --> 00:11:59,319 line:-2
你可以使用WK警报操作API
支持条款和条件


225
00:12:00,554 --> 00:12:01,855 line:-1
以及在watchOS 6


226
00:12:01,922 --> 00:12:04,625 line:-1
和我们其他的Apple平台上


227
00:12:04,691 --> 00:12:06,860 line:-1
现在都支持使用Apple登录


228
00:12:08,495 --> 00:12:11,665 line:-1
然后我们会谈谈如何创建自己的


229
00:12:12,399 --> 00:12:14,401 line:-1
自定义密码登录


230
00:12:15,402 --> 00:12:17,271 line:-1
我们先来说说使用Apple登录


231
00:12:17,337 --> 00:12:18,906 line:-1
（使用Apple登录）


232
00:12:18,972 --> 00:12:21,041 line:-1
使用Apple登录是一项简单安全


233
00:12:21,108 --> 00:12:24,311 line:-1
以及私密的方法从用户处获取信息


234
00:12:25,279 --> 00:12:27,781 line:-1
用户不需要填写表格


235
00:12:27,848 --> 00:12:30,050 line:-1
不用想新的密码


236
00:12:30,384 --> 00:12:31,818 line:-1
他们可以就


237
00:12:32,319 --> 00:12:36,423 line:-1
选择一个邮件地址 然后继续登录


238
00:12:39,526 --> 00:12:43,030 line:-2
而且每个账户都内置
两个因子身份验证


239
00:12:43,564 --> 00:12:46,800 line:-1
用户也不需要进行邮件验证


240
00:12:47,935 --> 00:12:50,404 line:-1
我们也支持在所有设备上登录


241
00:12:50,470 --> 00:12:55,242 line:-2
此外还有适用于任何其他类型设备的
JavaScript SDK


242
00:12:57,711 --> 00:12:59,313 line:-1
所以通过Apple登录


243
00:12:59,379 --> 00:13:01,882 line:-2
确保并使用了现在
可在watchOS上


244
00:13:01,949 --> 00:13:04,151 line:-1
使用的身份验证服务框架


245
00:13:06,119 --> 00:13:08,789 line:-1
如果你有任何特定的UI想要创建


246
00:13:08,856 --> 00:13:11,658 line:-2
现在可以使用
授权Apple ID按钮


247
00:13:11,725 --> 00:13:13,927 line:-1
并将其嵌入你的app中


248
00:13:13,994 --> 00:13:16,897 line:-1
这样 你的用户点击按钮


249
00:13:16,964 --> 00:13:18,765 line:-1
你就可以收到ID活动


250
00:13:18,832 --> 00:13:21,635 line:-1
然后你就可以使用身份验证服务框架


251
00:13:21,702 --> 00:13:24,037 line:-1
来显示相应的系统UI


252
00:13:25,506 --> 00:13:27,241 line:-1
这周还有其他很棒的演讲


253
00:13:27,307 --> 00:13:29,543 line:-2
如果你想了解更多关于
使用Apple登录的内容


254
00:13:29,610 --> 00:13:31,078 line:-1
我强烈建议你去听听


255
00:13:32,779 --> 00:13:36,450 line:-1
好了 要在WatchKit扩展的


256
00:13:36,517 --> 00:13:38,085 line:-1
Xcode中启用Apple登录


257
00:13:38,151 --> 00:13:39,686 line:-1
只需添加一项新功能


258
00:13:39,753 --> 00:13:42,055 line:-1
并启用通过Apple登录授权


259
00:13:42,523 --> 00:13:44,358 line:-1
上手就是这么轻松


260
00:13:45,225 --> 00:13:47,160 line:-1
（文本字段）


261
00:13:47,227 --> 00:13:50,197 line:-1
现在你有了自己的自定义密码登录


262
00:13:50,264 --> 00:13:53,667 line:-2
现在我要向你介绍今年
watchOS推出的新文本字段


263
00:13:54,935 --> 00:13:59,673 line:-2
这样你就可以在SwiftUI或
WatchKit中嵌入此文本字段


264
00:14:01,842 --> 00:14:05,212 line:-2
你就可以创建一个像这样的UI
然后告诉用户


265
00:14:05,279 --> 00:14:07,414 line:-1
我们只需要用户名和密码


266
00:14:07,481 --> 00:14:09,249 line:-1
我们使用占位符文本


267
00:14:09,316 --> 00:14:12,186 line:-1
来指导用户要输入什么


268
00:14:14,087 --> 00:14:16,490 line:-1
如果为该特定文本字段设置了


269
00:14:16,557 --> 00:14:18,225 line:-1
适当的文本内容类型


270
00:14:18,292 --> 00:14:21,195 line:-1
然后被调出的系统文本输入控制器


271
00:14:21,261 --> 00:14:24,231 line:-1
会自动改变成适当的文本类型


272
00:14:27,301 --> 00:14:30,571 line:-2
所以 对于这个流程
比如用户点击用户名


273
00:14:31,371 --> 00:14:34,441 line:-1
然后系统文本输入控制器就会被调出


274
00:14:34,775 --> 00:14:39,680 line:-2
用户就可以通过语音
或是手写来输入内容


275
00:14:39,746 --> 00:14:43,217 line:-2
现在有了一个新的选项
叫连续性键盘


276
00:14:43,483 --> 00:14:45,152 line:-1
如果用户点击这一选项


277
00:14:46,220 --> 00:14:47,588 line:-1
Apple Watch就会说


278
00:14:47,654 --> 00:14:51,692 line:-2
“在你的iOS或者iPad OS
设备上继续完成输入”


279
00:14:51,758 --> 00:14:54,595 line:-2
然后你会在
iPhone或iPad上


280
00:14:54,661 --> 00:14:56,430 line:-1
收到通知


281
00:14:56,496 --> 00:14:59,266 line:-2
如果它们是用相同的
iCloud账户登录的


282
00:14:59,933 --> 00:15:02,736 line:-2
如果你曾经使用过
带有文本字段的tvOS


283
00:15:02,803 --> 00:15:04,638 line:-1
那么这个流程你就很熟悉了


284
00:15:06,306 --> 00:15:07,674 line:-1
当用户点击输入


285
00:15:07,741 --> 00:15:11,411 line:-2
他们就可以轻松地将文本
输入到他们的iOS键盘中


286
00:15:12,079 --> 00:15:15,516 line:-2
再次强调 文本内容类型
就像我们刚才说到的那样


287
00:15:15,582 --> 00:15:18,485 line:-1
在这里会有自动填充建议


288
00:15:18,819 --> 00:15:22,756 line:-2
然后用户可以
从他们的iCloud钥匙串


289
00:15:22,823 --> 00:15:27,361 line:-2
或者是首选密码管理器中
选择自动填充建议


290
00:15:29,763 --> 00:15:30,831 line:-1
（iOS的密码自动填充建议）


291
00:15:30,898 --> 00:15:31,732 line:-1
现在


292
00:15:32,499 --> 00:15:35,569 line:-1
如果你想让系统置顶你的


293
00:15:35,636 --> 00:15:37,171 line:-1
密码自动填充建议


294
00:15:37,471 --> 00:15:38,605 line:-1
那么


295
00:15:38,672 --> 00:15:41,208 line:-1
你要保证设置正确的文本内容类型


296
00:15:41,542 --> 00:15:45,345 line:-2
并将关联域名添加到
你的WatchKit扩展中


297
00:15:45,812 --> 00:15:50,651 line:-2
关联域名是将你的app
和网站联系起来的好方法


298
00:15:50,918 --> 00:15:53,453 line:-1
这样系统就知道


299
00:15:53,520 --> 00:15:58,192 line:-2
用户的iCloud钥匙串中
可能存在的凭证


300
00:15:58,258 --> 00:16:01,595 line:-1
可以置顶并显示在iOS键盘的顶部


301
00:16:04,498 --> 00:16:07,467 line:-1
一旦用户选择自动填充建议


302
00:16:07,534 --> 00:16:09,937 line:-1
系统就会尽力


303
00:16:10,003 --> 00:16:13,507 line:-1
同时填写用户名和密码


304
00:16:15,275 --> 00:16:16,577 line:-1
对于基于密码的登录


305
00:16:16,643 --> 00:16:19,847 line:-1
有时候你可能会需要支持一次性密码


306
00:16:20,180 --> 00:16:22,516 line:-1
如果你设置了正确的文本内容类型


307
00:16:23,417 --> 00:16:26,186 line:-1
一次性密码就会自动填充


308
00:16:26,253 --> 00:16:29,690 line:-2
如果你是通过iMessage
或短信发送的话


309
00:16:29,957 --> 00:16:33,694 line:-2
然后系统文本输入控制器
将显示自动填充建议


310
00:16:33,760 --> 00:16:35,429 line:-1
用户就可以选择


311
00:16:35,495 --> 00:16:38,398 line:-1
之后继续进行身份验证


312
00:16:39,833 --> 00:16:42,903 line:-1
（文本字段）


313
00:16:45,005 --> 00:16:46,373 line:-1
再次强调 对于文本字段


314
00:16:46,440 --> 00:16:50,978 line:-2
你可以在SwiftUI
或WatchKit中使用


315
00:16:51,044 --> 00:16:53,313 line:-1
保证你设置了关联域名


316
00:16:53,380 --> 00:16:56,183 line:-1
来置顶适当的自动填充建议


317
00:16:57,117 --> 00:16:59,753 line:-1
运用连续性键盘测试流程


318
00:16:59,820 --> 00:17:02,322 line:-2
如果需要的话
构建一次性密码支持


319
00:17:03,824 --> 00:17:07,560 line:-1
我们有时要用到的另一种用户信息


320
00:17:07,627 --> 00:17:09,663 line:-1
就是私密用户信息


321
00:17:10,130 --> 00:17:12,766 line:-1
我们想要通过不同的可用框架


322
00:17:12,833 --> 00:17:14,601 line:-1
来向用户询问这些信息


323
00:17:14,667 --> 00:17:15,569 line:-1
（隐私管理）


324
00:17:15,636 --> 00:17:16,904 line:-1
在watchOS中


325
00:17:16,970 --> 00:17:20,140 line:-1
我们已经支持直接访问日历


326
00:17:20,207 --> 00:17:21,708 line:-1
联系人 手势


327
00:17:21,775 --> 00:17:25,712 line:-1
甚至一切其他类型的信息 如定位


328
00:17:26,012 --> 00:17:27,915 line:-1
现在在watchOS 6中


329
00:17:28,315 --> 00:17:32,486 line:-2
我们现在支持直接在
Apple Watch上提供健康授权


330
00:17:34,755 --> 00:17:35,589 line:-1
谢谢


331
00:17:37,057 --> 00:17:41,295 line:-2
现在用户可以选择
是否允许所有数据请求访问


332
00:17:41,361 --> 00:17:43,597 line:-1
或只是允许特定请求


333
00:17:47,067 --> 00:17:49,203 line:-1
这就是我们如何在独立app中


334
00:17:49,269 --> 00:17:50,838 line:-1
获取用户信息


335
00:17:51,138 --> 00:17:54,474 line:-2
现在我们来谈谈如何
将信息传输至设备中


336
00:17:54,775 --> 00:17:55,909 line:-1
当然


337
00:17:55,976 --> 00:17:58,612 line:-1
传输信息的最好方式


338
00:17:59,112 --> 00:18:00,581 line:-1
就是推送通知


339
00:18:00,948 --> 00:18:02,649 line:-1
现在在watchOS 6中


340
00:18:02,950 --> 00:18:06,353 line:-1
手表首次成为独立推送目标


341
00:18:06,787 --> 00:18:07,754 line:-1
（推送通知）


342
00:18:07,821 --> 00:18:08,655 line:-1
谢谢


343
00:18:10,757 --> 00:18:12,059 line:-1
也就是说


344
00:18:12,426 --> 00:18:16,530 line:-1
你可以将用户可见通知和后台通知


345
00:18:16,597 --> 00:18:18,365 line:-1
直接发送至Apple Watch


346
00:18:18,799 --> 00:18:21,835 line:-1
而这是基于用户通知框架


347
00:18:21,902 --> 00:18:24,238 line:-1
我们用的是和其他Apple设备


348
00:18:24,304 --> 00:18:26,206 line:-1
一样的基础设施


349
00:18:27,107 --> 00:18:27,941 line:-1
（通知）


350
00:18:28,008 --> 00:18:30,043 line:-1
总的来说


351
00:18:30,577 --> 00:18:34,047 line:-2
你的服务器会直接
向APNS发送请求标头和


352
00:18:34,114 --> 00:18:35,482 line:-1
有效负载


353
00:18:35,549 --> 00:18:38,452 line:-1
APNS是Apple通知推送服务


354
00:18:38,785 --> 00:18:40,921 line:-1
然后 APNS会将有效负载


355
00:18:40,988 --> 00:18:42,723 line:-1
发送至适当设备


356
00:18:43,524 --> 00:18:44,424 line:-1
在watchOS中


357
00:18:44,491 --> 00:18:47,928 line:-1
有效负载和其他平台是一样的


358
00:18:48,495 --> 00:18:51,899 line:-2
而在在APNS请求标题上
有一个新密钥


359
00:18:51,965 --> 00:18:53,000 line:-1
（APNS请求标题）


360
00:18:53,066 --> 00:18:55,869 line:-1
新密钥是APNS推送类型


361
00:18:57,304 --> 00:19:00,274 line:-1
它也支持所有Apple平台


362
00:19:00,340 --> 00:19:01,875 line:-1
以及所有OS


363
00:19:03,143 --> 00:19:07,648 line:-1
你可以将该密钥设置为提醒或是后台


364
00:19:07,714 --> 00:19:09,449 line:-1
我觉得它的使用方式就是


365
00:19:09,516 --> 00:19:12,052 line:-1
如果用户会看到该通知


366
00:19:12,119 --> 00:19:15,889 line:-2
他们要被提醒
那么就将推送类型设置为提醒


367
00:19:15,956 --> 00:19:18,425 line:-1
如果你只需发送后台提醒


368
00:19:18,492 --> 00:19:21,995 line:-1
只是想在有新内容可用时


369
00:19:22,062 --> 00:19:26,066 line:-2
在设备中唤醒app
那么你就可以设为后台推送类型


370
00:19:27,601 --> 00:19:28,902 line:-1
（推送通知）


371
00:19:28,969 --> 00:19:31,405 line:-1
对于注册和推送


372
00:19:32,306 --> 00:19:33,140 line:-1
对于注册而言


373
00:19:33,207 --> 00:19:35,209 line:-1
我们会获得WatchKit令牌


374
00:19:35,876 --> 00:19:39,413 line:-1
就像过去发送通知一样


375
00:19:39,479 --> 00:19:42,382 line:-2
你的提醒通知
会推送至Watch app


376
00:19:42,449 --> 00:19:44,084 line:-1
方式与以前一样


377
00:19:44,151 --> 00:19:47,187 line:-1
将用户通知与WatchKit结合


378
00:19:48,222 --> 00:19:49,556 line:-1
而后台通知


379
00:19:49,623 --> 00:19:52,526 line:-1
则会推送只WK扩展代理


380
00:19:53,627 --> 00:19:55,495 line:-1
如果你加密了任何有效负载


381
00:19:55,562 --> 00:19:58,632 line:-2
由于我们现在
在watchOS上也有完整的


382
00:19:58,699 --> 00:20:00,267 line:-1
通知服务扩展


383
00:20:00,901 --> 00:20:03,937 line:-2
所以你可以直接在设备上
解密该有效负载


384
00:20:04,004 --> 00:20:05,639 line:-1
之后向用户展示


385
00:20:07,708 --> 00:20:08,842 line:-1
在Xcode项目中


386
00:20:08,909 --> 00:20:12,112 line:-1
在目标编辑器中启用推送通知


387
00:20:12,179 --> 00:20:16,383 line:-2
如果你选择了WatchKit扩展
你就可以直接添加新功能


388
00:20:16,450 --> 00:20:19,386 line:-1
并启用推送通知权利


389
00:20:20,487 --> 00:20:23,023 line:-1
如果你想要支持后台通知


390
00:20:23,090 --> 00:20:24,758 line:-1
你可以启用后台模式


391
00:20:25,492 --> 00:20:28,929 line:-1
然后启用远程通知复选框


392
00:20:30,531 --> 00:20:32,266 line:-1
我们来看看代码


393
00:20:33,600 --> 00:20:38,071 line:-2
现在我们在扩展代理中
app也完成了启动


394
00:20:38,138 --> 00:20:41,775 line:-1
我们注册通知要做的第一件事就是


395
00:20:41,842 --> 00:20:44,211 line:-1
征求用户许可


396
00:20:44,278 --> 00:20:48,115 line:-2
所以如果我们在
UN用户通知中心请求授权


397
00:20:48,916 --> 00:20:51,185 line:-1
用户选择了授予访问权限


398
00:20:51,451 --> 00:20:54,488 line:-1
那我们就可以WK共享扩展上


399
00:20:54,555 --> 00:20:56,423 line:-1
调用远程注册通知


400
00:20:57,858 --> 00:20:59,159 line:-1
之后


401
00:20:59,726 --> 00:21:04,198 line:-1
如果我们完成了远程通知调用注册


402
00:21:04,264 --> 00:21:06,033 line:-1
那么我们就可以获取设备令牌


403
00:21:06,099 --> 00:21:10,070 line:-2
并将该通知转发给
我们的通知提供程序


404
00:21:10,137 --> 00:21:11,371 line:-1
或者是我们自己的服务器


405
00:21:12,439 --> 00:21:14,541 line:-1
当然 我们也希望确保


406
00:21:14,608 --> 00:21:17,110 line:-1
实施无法注册远程通知


407
00:21:17,177 --> 00:21:18,579 line:-1
以防故障发生


408
00:21:22,249 --> 00:21:24,084 line:-1
对于后台通知而言


409
00:21:24,151 --> 00:21:27,588 line:-1
它们会推送收到远程通知


410
00:21:27,654 --> 00:21:30,457 line:-2
以及获取完成处理程序
和后台获取结果


411
00:21:30,724 --> 00:21:32,059 line:-1
所以 当你收到该通知


412
00:21:32,125 --> 00:21:34,228 line:-1
你就可以开始处理后台通知


413
00:21:34,494 --> 00:21:36,263 line:-1
然后只需使用适当的后台获取结果


414
00:21:36,330 --> 00:21:39,166 line:-1
调用完成处理程序


415
00:21:40,501 --> 00:21:42,669 line:-1
（细节）


416
00:21:42,736 --> 00:21:47,307 line:-2
再次提醒
当发送推送到watchOS时


417
00:21:47,374 --> 00:21:50,544 line:-2
需要APNS推送类型
即APNS请求标头的新密钥


418
00:21:50,611 --> 00:21:52,646 line:-1
并且它支持所有平台


419
00:21:52,713 --> 00:21:56,283 line:-2
所以你要将通知推送至
任何Apple设备


420
00:21:56,350 --> 00:21:58,685 line:-1
只需确保添加APNS推送类型


421
00:22:00,654 --> 00:22:04,191 line:-2
并且APNS请求标题上的
APNS密钥


422
00:22:04,258 --> 00:22:07,060 line:-2
是你的WatchKit
app包标识符


423
00:22:07,361 --> 00:22:10,297 line:-2
而不是WatchKit扩展
我只想快速提一下


424
00:22:11,665 --> 00:22:15,435 line:-2
如果你有多个app 比如
iPhone App和Watch app


425
00:22:15,869 --> 00:22:19,740 line:-1
你想同时向两个设备发送通知


426
00:22:20,073 --> 00:22:21,375 line:-1
当你这么做时


427
00:22:21,675 --> 00:22:25,379 line:-1
系统会在同步推送通知时


428
00:22:25,445 --> 00:22:27,314 line:-1
适当删除重复通知


429
00:22:28,949 --> 00:22:29,783 line:-1
（WATCHOS中的并发推送）


430
00:22:29,850 --> 00:22:32,286 line:-1
还有另一种向设备推送通知的好方法


431
00:22:32,352 --> 00:22:34,154 line:-1
那就是并发推送


432
00:22:35,022 --> 00:22:38,525 line:-1
并发推送是更新你的app的好方法


433
00:22:38,592 --> 00:22:42,996 line:-1
如果活动表盘已启用并发功能的话


434
00:22:45,399 --> 00:22:46,967 line:-1
而这是通过PushKit完成的


435
00:22:47,034 --> 00:22:49,603 line:-1
现在在watchOS上也可使用


436
00:22:49,970 --> 00:22:53,273 line:-2
并且你可以使用PushKit
进行注册和推送


437
00:22:54,308 --> 00:22:58,779 line:-2
,如果你用的是过去
基于iOS的旧并发推送机制


438
00:22:58,846 --> 00:23:01,548 line:-1
我们建议你现在直接将并发推送


439
00:23:01,615 --> 00:23:03,317 line:-1
发至Watch


440
00:23:05,052 --> 00:23:06,320 line:-1
在代码中


441
00:23:07,354 --> 00:23:09,756 line:-1
我们可以通过设置PK推送注册表


442
00:23:09,823 --> 00:23:13,260 line:-1
来注册并发推送 设置代理


443
00:23:13,327 --> 00:23:16,697 line:-1
之后指定所需推送类型


444
00:23:18,999 --> 00:23:22,135 line:-1
完成之后我们就要获取设备令牌


445
00:23:22,202 --> 00:23:24,771 line:-1
只需转发至我们的服务器


446
00:23:25,539 --> 00:23:28,075 line:-1
然后处理任何可能发生的失效


447
00:23:29,910 --> 00:23:32,412 line:-1
之后我们发送推送


448
00:23:32,880 --> 00:23:36,517 line:-1
然后运用适当的PushKit方法


449
00:23:36,583 --> 00:23:38,785 line:-1
处理接受并发推送


450
00:23:39,052 --> 00:23:41,722 line:-1
然后重新加载并发时间表


451
00:23:44,124 --> 00:23:45,192 line:-1
好了


452
00:23:45,259 --> 00:23:47,628 line:-1
这就是我们向设备推送信息的方法


453
00:23:48,328 --> 00:23:51,632 line:-1
我们接下来讲讲如何收集信息


454
00:23:51,698 --> 00:23:53,100 line:-1
以及处理连接性问题


455
00:23:54,301 --> 00:23:55,135 line:-1
（联网）


456
00:23:55,202 --> 00:23:57,137 line:-1
一般来说 在联网方面


457
00:23:57,938 --> 00:23:59,473 line:-1
我们会用URL会话


458
00:23:59,540 --> 00:24:02,576 line:-2
这在watchOS上
已经可用很久了


459
00:24:03,277 --> 00:24:04,111 line:-1
至于


460
00:24:04,912 --> 00:24:06,313 line:-1
至于CloudKit


461
00:24:06,380 --> 00:24:09,383 line:-2
我们也用CloudKit
来收集app数据


462
00:24:10,083 --> 00:24:11,618 line:-1
（URL会话）


463
00:24:11,685 --> 00:24:13,987 line:-1
如果你在使用手表连接


464
00:24:14,054 --> 00:24:17,291 line:-2
并且要依赖iPhone app
来获取特定信息


465
00:24:17,357 --> 00:24:21,094 line:-2
那么你就要将所有的
手表连接使用情况


466
00:24:21,161 --> 00:24:22,930 line:-1
迁移至NSURL会话


467
00:24:24,398 --> 00:24:25,666 line:-1
再次强调 对于手表来说


468
00:24:26,166 --> 00:24:28,769 line:-2
用户基本上使用
Watch app的时间


469
00:24:28,836 --> 00:24:31,705 line:-1
都会很短 然后他们就会放下手腕


470
00:24:31,772 --> 00:24:34,174 line:-1
因此 务必使用后台会话


471
00:24:34,241 --> 00:24:38,111 line:-1
确保URL会话能够正确完成


472
00:24:39,746 --> 00:24:40,647 line:-1
（手表连接）


473
00:24:40,714 --> 00:24:43,517 line:-1
所以 手表连接功能依旧是可用的


474
00:24:44,518 --> 00:24:46,920 line:-1
你依旧可将其用于任何伴随app的


475
00:24:46,987 --> 00:24:48,589 line:-1
特定互动


476
00:24:48,655 --> 00:24:51,625 line:-1
但只在需要的时候使用


477
00:24:53,393 --> 00:24:56,129 line:-2
现在有一项为伴随app
安装的Boolean属性


478
00:24:56,196 --> 00:24:59,233 line:-2
它会让你知道该app
是否有iPhone版本


479
00:25:02,302 --> 00:25:04,037 line:-1
在CloudKit中


480
00:25:04,805 --> 00:25:07,407 line:-2
如果你已经在使用
那么你会很高兴听到


481
00:25:07,474 --> 00:25:11,211 line:-2
我们现在在watchOS上
也有完整的CK订阅支持


482
00:25:12,112 --> 00:25:15,816 line:-2
它与CloudKit
通知支持相辅相成


483
00:25:15,883 --> 00:25:19,720 line:-2
因此 如果你不想管理自己的
服务器或通知提供程序


484
00:25:19,786 --> 00:25:22,589 line:-2
你就可以运用CloudKit
来发送通知


485
00:25:23,690 --> 00:25:25,626 line:-1
在网上有一个很棒的演讲


486
00:25:25,692 --> 00:25:27,761 line:-2
如果你想了解更多
关于CloudKit


487
00:25:27,828 --> 00:25:30,097 line:-1
及其最佳运用的信息 请参阅该演讲


488
00:25:31,398 --> 00:25:33,267 line:-1
对于CK订阅


489
00:25:34,034 --> 00:25:36,737 line:-1
它是订阅在任何其他设备上发生的


490
00:25:36,803 --> 00:25:39,273 line:-1
数据库更改的好方法


491
00:25:39,339 --> 00:25:40,307 line:-1
（CK订阅）


492
00:25:40,374 --> 00:25:42,876 line:-1
之后你会收到后台通知推送


493
00:25:42,943 --> 00:25:45,379 line:-1
它们会告诉你什么时候更新app


494
00:25:45,646 --> 00:25:48,048 line:-1
然后你就可以检索只在app


495
00:25:48,115 --> 00:25:50,951 line:-1
和CloudKit容器之间的更改


496
00:25:52,853 --> 00:25:57,824 line:-2
进一步说 如果你的用户
正在使用iPhone app


497
00:25:57,891 --> 00:25:59,626 line:-1
他们更改了数据库


498
00:25:59,693 --> 00:26:03,063 line:-2
该项更改就会
发送至CloudKit


499
00:26:03,363 --> 00:26:06,700 line:-2
CloudKit就会知道
这是一项订阅


500
00:26:07,434 --> 00:26:12,339 line:-2
CloudKit就会告诉APNS
向其他设备


501
00:26:12,406 --> 00:26:15,342 line:-2
发送发送后台通知
告诉它们有一项订阅


502
00:26:15,409 --> 00:26:16,877 line:-2
在这个例子中
就是Watch app


503
00:26:19,646 --> 00:26:21,148 line:-1
之后 如果Watch app


504
00:26:21,215 --> 00:26:23,684 line:-2
如果用户对Watch app
做出了更改


505
00:26:23,750 --> 00:26:25,752 line:-1
该循环就会自动重复


506
00:26:26,186 --> 00:26:31,358 line:-1
如何发送通知在任何其他设备上


507
00:26:31,425 --> 00:26:33,427 line:-1
都遵循一样的规则


508
00:26:34,528 --> 00:26:38,765 line:-2
想要进行CloudKit订阅
你可以设置通知信息


509
00:26:38,832 --> 00:26:42,035 line:-1
然后将发送内容可用


510
00:26:42,102 --> 00:26:43,136 line:-1
设为真


511
00:26:43,837 --> 00:26:46,006 line:-2
然后CloudKit就会向
我们刚刚说过的


512
00:26:46,073 --> 00:26:48,942 line:-1
相同的回调代理发送通知


513
00:26:49,009 --> 00:26:50,978 line:-1
你就会收到远程通知


514
00:26:51,044 --> 00:26:52,412 line:-1
这样 你就可以处理并检索


515
00:26:52,479 --> 00:26:55,649 line:-2
只在你的app和
CloudKit容器之间


516
00:26:55,716 --> 00:26:57,050 line:-1
发生的更改


517
00:26:59,720 --> 00:27:01,655 line:-1
好了 这就是我们说到的


518
00:27:01,722 --> 00:27:05,058 line:-1
如何创建独立的Watch app


519
00:27:05,125 --> 00:27:06,860 line:-1
如何获取用户信息


520
00:27:07,461 --> 00:27:11,331 line:-1
以及如何向设备推送信息


521
00:27:11,665 --> 00:27:15,502 line:-2
最后是如何获取自己的app数据的
三种主要方式


522
00:27:16,637 --> 00:27:17,804 line:-1
（总结）


523
00:27:19,072 --> 00:27:23,644 line:-2
用户喜欢Apple Watch
给他们带来的自由和独立


524
00:27:23,710 --> 00:27:27,381 line:-1
现在也有许多可供使用的系统和


525
00:27:27,447 --> 00:27:28,815 line:-1
开发者功能


526
00:27:28,882 --> 00:27:33,153 line:-2
所以务必使你的Watch app
独立起来 因为说实话


527
00:27:33,220 --> 00:27:37,057 line:-1
因为现在用户可能比以往更加希望


528
00:27:37,124 --> 00:27:39,126 line:-1
Watch app能够独立


529
00:27:39,960 --> 00:27:40,794 line:-1
（更多信息）


530
00:27:40,861 --> 00:27:43,730 line:-1
网上还有更多关于演讲


531
00:27:43,997 --> 00:27:46,266 line:-1
以及实验室的详细信息


532
00:27:46,600 --> 00:27:50,971 line:-2
再次感谢大家光临
希望你们在WWDC过得愉快


533
00:27:51,271 --> 00:27:52,206 line:-1
谢谢

