1
00:00:06,406 --> 00:00:07,241 line:-1
（ClassKit新功能）


2
00:00:07,307 --> 00:00:09,142 line:-2
大家好 欢迎来到
ClassKit新功能演讲


3
00:00:09,676 --> 00:00:10,878 line:-1
我是John Calhoun


4
00:00:11,278 --> 00:00:13,747 line:-2
我是ClassKit和Schoolwork
团队的iOS工程师


5
00:00:14,381 --> 00:00:15,215 line:-2
（ClassKit介绍
新功能 最佳运用）


6
00:00:15,282 --> 00:00:16,650 line:-1
如果你刚接触ClassKit


7
00:00:17,050 --> 00:00:20,087 line:-2
我就先简单做一个介绍
让你知道应该了解什么内容


8
00:00:20,888 --> 00:00:23,156 line:-2
你应该关注的是
ClassKit的新功能


9
00:00:23,223 --> 00:00:26,193 line:-1
还有你可能会用到的一些


10
00:00:26,460 --> 00:00:27,561 line:-1
最佳编程实践的简要讨论


11
00:00:29,396 --> 00:00:31,064 line:-1
让我们从介绍ClassKit开始


12
00:00:31,865 --> 00:00:32,698 line:-1
（ClassKit是什么）


13
00:00:32,766 --> 00:00:36,436 line:-2
ClassKit是Apple
在iOS 11.3中引入的框架


14
00:00:37,771 --> 00:00:40,507 line:-2
它是Apple教育生态系统
的核心部分


15
00:00:41,108 --> 00:00:44,244 line:-1
所以如果你的app面向的也是教育


16
00:00:44,311 --> 00:00:46,780 line:-2
那么你应该要
熟悉ClassKit框架


17
00:00:46,847 --> 00:00:47,948 line:-1
以及它能为你的app做些什么


18
00:00:50,384 --> 00:00:53,086 line:-2
ClassKit的目的在于
让你的app可以


19
00:00:53,153 --> 00:00:54,655 line:-1
与老师分享学生的进度


20
00:00:55,122 --> 00:00:57,524 line:-1
我等下会详细说到这是什么意思


21
00:00:59,593 --> 00:01:01,562 line:-1
由于学生的数据十分重要


22
00:01:02,129 --> 00:01:04,697 line:-2
ClassKit能够确保
这些数据的安全


23
00:01:04,998 --> 00:01:07,334 line:-1
并且只能被特定用户访问


24
00:01:07,801 --> 00:01:09,703 line:-1
比如得到授权能够


25
00:01:09,970 --> 00:01:11,071 line:-1
访问该数据的教师


26
00:01:11,805 --> 00:01:13,173 line:-1
让我们看一个例子


27
00:01:14,208 --> 00:01:17,177 line:-1
我以一个虚构的app为例


28
00:01:17,978 --> 00:01:20,981 line:-1
假设这款app是教用户写代码的


29
00:01:21,815 --> 00:01:24,117 line:-1
它包含了许多的学生信息


30
00:01:25,252 --> 00:01:27,554 line:-1
里面有练习和测验


31
00:01:27,621 --> 00:01:30,457 line:-2
来帮助检查学生
对这些东西学懂了多少


32
00:01:31,158 --> 00:01:32,926 line:-1
这已经包含了活动的概念了


33
00:01:33,293 --> 00:01:35,929 line:-2
如果能将学生的进度
与老师分享就更好了


34
00:01:36,563 --> 00:01:38,498 line:-1
简而言之 用ClassKit正好


35
00:01:41,235 --> 00:01:42,669 line:-1
这是使用这款app的学生


36
00:01:42,736 --> 00:01:43,937 line:-1
（教育情景）


37
00:01:44,271 --> 00:01:46,974 line:-1
该app想将学生的进度


38
00:01:47,040 --> 00:01:50,477 line:-2
与老师分享
同时又要保护学生的隐私


39
00:01:52,179 --> 00:01:54,481 line:-1
这就是ClassKit的功能


40
00:01:55,282 --> 00:01:56,917 line:-1
ClassKit确保学生数据


41
00:01:57,451 --> 00:01:59,620 line:-1
在设备中储存 然后发送至云端


42
00:01:59,686 --> 00:02:01,822 line:-1
之后安全地在云端储存


43
00:02:02,823 --> 00:02:06,059 line:-1
ClassKit同时确保这些数据


44
00:02:06,126 --> 00:02:08,195 line:-1
仅被有权限的用户访问


45
00:02:08,262 --> 00:02:09,663 line:-1
比如说学生的老师


46
00:02:10,731 --> 00:02:13,133 line:-1
那么这些老师和学生


47
00:02:13,467 --> 00:02:16,003 line:-2
如何在一款启用了ClassKit
的app中看到他们的进度呢


48
00:02:17,871 --> 00:02:20,908 line:-2
Apple为iOS提供了一款
叫Schoolwork的app


49
00:02:22,342 --> 00:02:23,710 line:-1
这是iPad的免费app


50
00:02:24,278 --> 00:02:26,180 line:-2
它自ClassKit首次亮相以来
就已上市


51
00:02:26,513 --> 00:02:27,548 line:-1
现在你可以下载


52
00:02:28,982 --> 00:02:31,718 line:-1
不仅美国学校使用


53
00:02:31,785 --> 00:02:32,986 line:-1
其他国家的学校也在用


54
00:02:33,720 --> 00:02:35,622 line:-2
老师使用Schoolwork
创建一项


55
00:02:35,923 --> 00:02:39,626 line:-2
名为讲义的作业 学生
从Schoolwork接受讲义


56
00:02:41,228 --> 00:02:44,565 line:-1
当你的app响应讲义活动


57
00:02:44,631 --> 00:02:45,832 line:-1
记录进度时


58
00:02:46,300 --> 00:02:50,437 line:-2
Schoolwork里的老师
和学生都可以追踪进度


59
00:02:51,605 --> 00:02:54,908 line:-2
我们简单看看Schoolwork
好让你理解它是怎么运作的


60
00:02:56,610 --> 00:02:58,946 line:-2
你第一次作为开发者
启动Schoolwork时


61
00:02:59,012 --> 00:03:00,280 line:-1
你会看到这样的界面


62
00:03:01,114 --> 00:03:03,450 line:-2
Schoolwork需要
被管理的Apple ID


63
00:03:03,851 --> 00:03:06,153 line:-2
这是学校使用的
Apple ID类型


64
00:03:06,220 --> 00:03:08,455 line:-1
好将这些ID发给老师和学生


65
00:03:09,122 --> 00:03:11,725 line:-2
因为我们都不怎么用
被管理的Apple ID


66
00:03:12,125 --> 00:03:14,361 line:-1
在iOS里有个很有用的开关


67
00:03:14,661 --> 00:03:16,864 line:-1
在开发者部分的设置里


68
00:03:19,099 --> 00:03:21,068 line:-1
你需要安装开发者版本的iOS


69
00:03:21,668 --> 00:03:24,705 line:-1
这会在设置中添加开发者选项


70
00:03:26,507 --> 00:03:28,675 line:-2
其中一个设置
被标记为ClassKit API


71
00:03:30,277 --> 00:03:32,412 line:-1
这里你可以模拟用户角色


72
00:03:32,479 --> 00:03:33,580 line:-1
不管是教师权限


73
00:03:34,047 --> 00:03:35,749 line:-1
还是学生权限用户


74
00:03:36,517 --> 00:03:37,684 line:-1
一开始这是关闭的


75
00:03:39,152 --> 00:03:41,889 line:-2
但如果你先选择老师
再打开Schoolwork


76
00:03:42,189 --> 00:03:45,325 line:-1
你就可以创建讲义并将其发送给学生


77
00:03:46,260 --> 00:03:50,264 line:-2
我们回到设置
将ClassKit API切换成学生


78
00:03:51,298 --> 00:03:53,133 line:-1
你再回到Schoolwork


79
00:03:53,600 --> 00:03:55,435 line:-1
就是学生角色了


80
00:03:55,502 --> 00:03:56,970 line:-1
你可以完成刚刚


81
00:03:57,037 --> 00:03:59,206 line:-1
老师发给你的讲义


82
00:04:00,073 --> 00:04:01,208 line:-1
如果你还跟得上的话


83
00:04:01,275 --> 00:04:03,343 line:-1
可以再切换回教师角色


84
00:04:03,677 --> 00:04:06,113 line:-1
就能够检查学生的进度了


85
00:04:07,481 --> 00:04:09,683 line:-1
若你从没用过Schoolwork


86
00:04:10,017 --> 00:04:12,085 line:-1
这就是讲义的样子


87
00:04:12,619 --> 00:04:13,921 line:-1
卡片顶部的


88
00:04:13,987 --> 00:04:16,723 line:-1
讲义收件人是老师选择的


89
00:04:16,990 --> 00:04:19,125 line:-1
讲义的标题和说明


90
00:04:19,192 --> 00:04:21,995 line:-1
就在收件人下面 也是老师创建的


91
00:04:23,564 --> 00:04:24,498 line:-1
但是活动


92
00:04:24,998 --> 00:04:27,467 line:-1
你看到的这个图标


93
00:04:27,935 --> 00:04:30,637 line:-2
可能是启用ClassKit的
app中的活动


94
00:04:31,538 --> 00:04:33,073 line:-1
那么我们如何从代码


95
00:04:33,440 --> 00:04:35,108 line:-1
从app中获取 再发送给讲义呢


96
00:04:36,443 --> 00:04:37,644 line:-1
通过ClassKit


97
00:04:39,313 --> 00:04:43,050 line:-1
WWDC 2018有一场演讲


98
00:04:43,317 --> 00:04:45,619 line:-2
专门是讲ClassKit
及其所有功能


99
00:04:46,119 --> 00:04:47,154 line:-1
简而言之


100
00:04:47,221 --> 00:04:50,924 line:-2
我会为你介绍ClassKit中
一个特定且重要的类


101
00:04:51,959 --> 00:04:53,193 line:-1
就是CLSContext


102
00:04:54,161 --> 00:04:56,964 line:-2
如果你对ClassKit
的全部不是很熟悉


103
00:04:57,030 --> 00:04:59,099 line:-1
那起码要理解CLSContext


104
00:04:59,166 --> 00:05:01,602 line:-1
这会让你知道你的app


105
00:05:01,668 --> 00:05:04,171 line:-2
在Schoolwork是否清楚
然后添加至讲义


106
00:05:04,905 --> 00:05:06,807 line:-1
都是因为CLSContext


107
00:05:07,307 --> 00:05:09,710 line:-1
你的app才能显示它支持的活动


108
00:05:10,511 --> 00:05:11,778 line:-1
如果你的app是教写代码的


109
00:05:12,079 --> 00:05:14,047 line:-1
那么每节课都可能是单独的活动


110
00:05:14,381 --> 00:05:17,951 line:-2
所以每节课都有一个
相应的CLSContext


111
00:05:19,386 --> 00:05:20,754 line:-1
当学生使用app时


112
00:05:21,188 --> 00:05:22,756 line:-1
这些一样的CLSContext


113
00:05:23,156 --> 00:05:25,959 line:-1
就会提供挂起进度数据的脚手架


114
00:05:26,793 --> 00:05:27,895 line:-1
在这个例子中


115
00:05:27,961 --> 00:05:30,831 line:-2
我刚刚说到我们
可以追踪一节课花费的时间


116
00:05:31,331 --> 00:05:33,033 line:-1
或者app中有一场测试


117
00:05:33,100 --> 00:05:36,003 line:-2
我们就可以将测验成绩
作为学生进度数据记录下来


118
00:05:37,971 --> 00:05:39,072 line:-1
正如我讲到的


119
00:05:39,339 --> 00:05:42,376 line:-1
你的app可以创建和活动数量


120
00:05:42,709 --> 00:05:44,645 line:-1
一样多的CLSContext


121
00:05:45,045 --> 00:05:46,146 line:-1
多少都可以


122
00:05:47,080 --> 00:05:49,650 line:-1
ClassKit将其组织在一个


123
00:05:49,716 --> 00:05:51,351 line:-1
父子关系的树形结构中


124
00:05:53,720 --> 00:05:56,423 line:-1
我们来看看到底什么是上下文树


125
00:05:57,391 --> 00:05:59,193 line:-1
它以CLSContext开始


126
00:05:59,459 --> 00:06:00,727 line:-1
如果你的app没有创建的话


127
00:06:01,195 --> 00:06:02,629 line:-1
这是主要app上下文


128
00:06:03,397 --> 00:06:06,433 line:-1
主要app上下文是在你需要时


129
00:06:06,500 --> 00:06:07,501 line:-1
由ClassKit创建的


130
00:06:07,868 --> 00:06:10,838 line:-2
该上下文是
所有创建的CLSContext


131
00:06:11,104 --> 00:06:13,740 line:-1
的来源 是上下文树的子项


132
00:06:14,641 --> 00:06:15,943 line:-1
是树的根节点


133
00:06:17,444 --> 00:06:19,980 line:-2
所以在app中使用
ClassKit进行任何操作之前


134
00:06:20,280 --> 00:06:23,217 line:-2
你需要从ClassKit
请求主要app上下文


135
00:06:23,984 --> 00:06:27,020 line:-2
只需调用CLSDataStore
单例即可


136
00:06:27,521 --> 00:06:28,455 line:-1
如图所示


137
00:06:29,056 --> 00:06:31,859 line:-1
在我们继续创建上下文


138
00:06:31,925 --> 00:06:33,894 line:-1
把它们添加到主app上下文之前


139
00:06:34,428 --> 00:06:35,796 line:-1
我们需要回过头看看


140
00:06:36,330 --> 00:06:40,033 line:-2
我们app想要呈现的
环境或活动是什么


141
00:06:40,100 --> 00:06:41,301 line:-1
（app活动）


142
00:06:42,002 --> 00:06:45,339 line:-2
我还是用刚刚
教你写代码的app为例


143
00:06:46,073 --> 00:06:47,074 line:-1
在我们的例子中


144
00:06:47,140 --> 00:06:49,543 line:-1
假设有三个主要部分


145
00:06:50,110 --> 00:06:53,447 line:-1
介绍部分 变量和数据类型部分


146
00:06:53,947 --> 00:06:55,349 line:-1
还有就是条件


147
00:06:56,517 --> 00:06:59,486 line:-2
我们将每个部分都看成是活动
但是问问自己


148
00:06:59,753 --> 00:07:03,457 line:-1
如果老师想将其中一部分作为讲义


149
00:07:04,358 --> 00:07:07,594 line:-2
这些部分都较大 对于单个讲义而言
包含的东西可能有点多


150
00:07:07,895 --> 00:07:09,830 line:-1
它的范围可能太大了


151
00:07:11,164 --> 00:07:12,699 line:-1
但是细看我们的app


152
00:07:12,766 --> 00:07:15,869 line:-1
每个部分app里都有独立的课程


153
00:07:16,937 --> 00:07:19,606 line:-1
课程更小 更易于接受


154
00:07:20,440 --> 00:07:23,777 line:-1
展示这些比活动更合理


155
00:07:24,978 --> 00:07:26,680 line:-1
因为部分相当宽泛


156
00:07:27,181 --> 00:07:30,050 line:-1
我就假设老师不会分配一整个部分


157
00:07:30,517 --> 00:07:32,619 line:-1
所以我就不考虑它们了


158
00:07:33,387 --> 00:07:34,922 line:-1
我们就留下这七个课程


159
00:07:36,323 --> 00:07:38,091 line:-1
在我们的app里


160
00:07:38,358 --> 00:07:40,227 line:-1
有一些课程后面还有测试


161
00:07:40,294 --> 00:07:42,296 line:-1
来检验学生对课程的理解情况


162
00:07:43,030 --> 00:07:45,766 line:-2
这是我们的app可以提供的
比较好的活动


163
00:07:45,832 --> 00:07:47,768 line:-1
是给老师的有用进度数据


164
00:07:48,135 --> 00:07:50,537 line:-1
比如 测试中学生的分数


165
00:07:51,638 --> 00:07:52,573 line:-1
那么这是什么意思呢


166
00:07:53,240 --> 00:07:56,343 line:-1
我们用ClassKit的树结构


167
00:07:56,844 --> 00:07:58,846 line:-1
测验可以作为


168
00:07:58,912 --> 00:08:00,180 line:-1
对应课程的子项活动


169
00:08:01,081 --> 00:08:04,651 line:-1
现在这里的每个项目都有意义


170
00:08:04,985 --> 00:08:06,753 line:-1
是可追踪的进度活动


171
00:08:07,287 --> 00:08:08,288 line:-1
不会过于宽泛


172
00:08:08,755 --> 00:08:12,259 line:-2
现在我们来看看app
用CLSContext


173
00:08:12,659 --> 00:08:13,927 line:-1
如何展示这些活动


174
00:08:15,729 --> 00:08:19,566 line:-2
所以我现在用树排列的方式
描述这些活动


175
00:08:20,033 --> 00:08:22,069 line:-1
树的顶端


176
00:08:22,336 --> 00:08:24,972 line:-2
就是由ClassKit提供的
主要app上下文


177
00:08:25,639 --> 00:08:28,976 line:-2
主要app上下文的下面
就是一级子项


178
00:08:29,877 --> 00:08:31,712 line:-1
也就是我们刚才说的七个课程


179
00:08:32,479 --> 00:08:34,347 line:-1
或者是带有测试的课程


180
00:08:34,414 --> 00:08:37,618 line:-1
这个作为上下文的子项代表了测试


181
00:08:38,585 --> 00:08:42,089 line:-2
代表app创建的
CLSContext的标签


182
00:08:42,556 --> 00:08:45,592 line:-2
是CLSContext
标识符属性


183
00:08:46,760 --> 00:08:50,531 line:-2
标识符是你希望分配给
CLSContext的任何字符串


184
00:08:51,231 --> 00:08:53,100 line:-1
对老师和学生不可见


185
00:08:53,166 --> 00:08:55,536 line:-2
所以你可以用任何你任何
有意义的方法来命名它们


186
00:08:55,969 --> 00:08:57,070 line:-1
在该例中


187
00:08:57,137 --> 00:08:59,806 line:-1
我的命名就相当紧凑但也具有描述性


188
00:09:01,608 --> 00:09:04,244 line:-1
CLSContext也有标题属性


189
00:09:04,578 --> 00:09:06,547 line:-1
这对老师和学生是可见的


190
00:09:06,613 --> 00:09:07,881 line:-1
待会儿会看到


191
00:09:08,515 --> 00:09:10,884 line:-1
我只展示上下文树的标题部分


192
00:09:10,951 --> 00:09:13,320 line:-1
因为整个树占屏幕控件


193
00:09:13,387 --> 00:09:14,688 line:-1
太大了 会看不见


194
00:09:16,423 --> 00:09:17,925 line:-1
让我们回到标识符


195
00:09:18,292 --> 00:09:19,226 line:-1
从软件的角度看


196
00:09:19,293 --> 00:09:21,528 line:-1
我们专门处理标识符属性


197
00:09:22,529 --> 00:09:26,934 line:-2
将具有给定标识符的CLSContext
添加到上下文树后


198
00:09:27,601 --> 00:09:30,137 line:-1
它就会有一个隐含的标识符路径


199
00:09:31,305 --> 00:09:34,174 line:-2
ClassKit API通常
会引用此路径


200
00:09:34,241 --> 00:09:36,677 line:-1
所以要简单解释一下


201
00:09:37,411 --> 00:09:39,680 line:-1
标识符路径是一个字符串数组


202
00:09:40,214 --> 00:09:42,916 line:-2
是CLSContext的
标识符数组


203
00:09:43,317 --> 00:09:47,087 line:-2
从上下文树的底部
一直到CLSContext


204
00:09:47,988 --> 00:09:50,290 line:-1
我从主app上下文的任一子项开始


205
00:09:50,357 --> 00:09:51,525 line:-1
并获取标识符


206
00:09:51,992 --> 00:09:55,796 line:-2
从树上往下走的时候
添加子项的标识符


207
00:09:55,863 --> 00:09:58,866 line:-1
直到到达预期CLSContext


208
00:09:59,633 --> 00:10:02,736 line:-2
你现在就有通往该
CLSContext标识符路径了


209
00:10:04,605 --> 00:10:06,240 line:-1
我只举了一个简单的例子


210
00:10:06,540 --> 00:10:08,675 line:-2
因为CLSContext
确实很重要


211
00:10:10,143 --> 00:10:13,313 line:-1
标识符路径是4下划线结构


212
00:10:13,680 --> 00:10:15,182 line:-1
和4下划线测试


213
00:10:15,249 --> 00:10:17,885 line:-1
它就指这一个CLSContext


214
00:10:18,218 --> 00:10:20,721 line:-1
并且是此测验上下文的标识符路径


215
00:10:22,022 --> 00:10:24,024 line:-1
现在将其在app中进行测试


216
00:10:24,358 --> 00:10:27,694 line:-1
并考虑我们想要支持的活动及其等级


217
00:10:28,161 --> 00:10:31,565 line:-2
我们就得到了这个
表示CLSContext的树


218
00:10:32,432 --> 00:10:35,836 line:-2
如果你想查看创建
CLSContext的代码


219
00:10:36,403 --> 00:10:38,972 line:-1
请点击此次演讲相关资源


220
00:10:39,773 --> 00:10:41,775 line:-1
回到演讲的内容


221
00:10:42,209 --> 00:10:45,112 line:-1
我们再次回到Schoolwork


222
00:10:45,179 --> 00:10:48,549 line:-2
将对于CLSContext的讨论
重新回到师生工作流程中


223
00:10:50,217 --> 00:10:53,120 line:-1
在设置中你可以选择教师角色


224
00:10:53,654 --> 00:10:56,023 line:-2
选择教师并启动
Schoolwork


225
00:10:57,291 --> 00:11:00,394 line:-1
在界面右上角有一个加号按钮


226
00:11:00,727 --> 00:11:02,763 line:-1
允许老师创建新讲义


227
00:11:03,964 --> 00:11:05,098 line:-1
点击该按钮


228
00:11:05,832 --> 00:11:07,000 line:-1
出现该界面


229
00:11:07,434 --> 00:11:09,169 line:-1
允许创建新讲义


230
00:11:10,571 --> 00:11:11,805 line:-1
正如我前面所说


231
00:11:11,872 --> 00:11:14,441 line:-1
老师可以决定将讲义发给谁


232
00:11:14,942 --> 00:11:17,211 line:-1
还可以创建讲义标题和介绍


233
00:11:18,011 --> 00:11:19,379 line:-1
但是更有趣的是


234
00:11:19,446 --> 00:11:20,747 line:-1
这个蓝色的加号按钮


235
00:11:21,515 --> 00:11:23,250 line:-1
标签是添加活动


236
00:11:24,184 --> 00:11:26,420 line:-1
点击该按钮 出现活动列表


237
00:11:27,321 --> 00:11:30,924 line:-1
你可以选择添加不同文件类型


238
00:11:30,991 --> 00:11:32,960 line:-1
但我们应该注意最上面的选项


239
00:11:33,594 --> 00:11:34,428 line:-1
app


240
00:11:34,962 --> 00:11:39,132 line:-1
点击该按钮会出现app活动列表


241
00:11:39,499 --> 00:11:41,568 line:-1
列表第二项就是我们的app


242
00:11:42,769 --> 00:11:45,472 line:-1
我们的app出现了


243
00:11:45,539 --> 00:11:47,674 line:-2
说明我们已经
创建了CLSContext树


244
00:11:49,643 --> 00:11:52,880 line:-1
右边的V形按钮告诉老师


245
00:11:52,946 --> 00:11:54,281 line:-1
可以查看该app的活动


246
00:11:55,616 --> 00:11:56,950 line:-1
点击该按钮


247
00:11:57,451 --> 00:11:58,886 line:-1
你认为教师界面会出现什么


248
00:11:59,520 --> 00:12:00,654 line:-1
是我们主要app上下文


249
00:12:01,021 --> 00:12:04,525 line:-2
第一个下行分支的
CLSContext


250
00:12:05,392 --> 00:12:08,729 line:-2
当然我们展示的
是CLSContext的标题


251
00:12:08,795 --> 00:12:09,930 line:-1
不是标识符


252
00:12:10,464 --> 00:12:11,865 line:-1
这样才是可读的


253
00:12:13,767 --> 00:12:16,303 line:-1
你可能注意到后五项都有V形按钮


254
00:12:17,404 --> 00:12:20,240 line:-1
这些都是包含测试的


255
00:12:20,307 --> 00:12:21,542 line:-1
CLSContext


256
00:12:22,643 --> 00:12:23,677 line:-1
例如


257
00:12:24,578 --> 00:12:26,747 line:-1
如果老师点击第三项


258
00:12:27,181 --> 00:12:28,315 line:-1
什么是变量


259
00:12:29,750 --> 00:12:30,617 line:-1
这就是测试


260
00:12:31,318 --> 00:12:34,721 line:-2
但是假设老师正在创建
一个介绍Swift的讲义


261
00:12:35,155 --> 00:12:37,291 line:-1
该课程还尚未提到变量


262
00:12:37,591 --> 00:12:40,561 line:-2
老师就可以点击此按钮
进行备份并返回


263
00:12:41,395 --> 00:12:43,964 line:-1
老师再点击右上角选择按钮


264
00:12:44,731 --> 00:12:46,567 line:-1
选择什么是Swift活动


265
00:12:47,201 --> 00:12:49,203 line:-1
这样你就可以将活动加入讲义


266
00:12:50,537 --> 00:12:53,240 line:-1
我们再回到讲义编辑视图


267
00:12:53,574 --> 00:12:57,044 line:-1
老师就可以点击右上角的发送


268
00:12:57,110 --> 00:12:59,379 line:-1
将讲义发送给学生


269
00:13:00,714 --> 00:13:01,915 line:-1
正如我们所见


270
00:13:02,216 --> 00:13:05,652 line:-1
带有活动的讲义卡片就会出现在


271
00:13:05,719 --> 00:13:06,820 line:-1
每一个人的Schoolwork中


272
00:13:07,921 --> 00:13:09,423 line:-2
ClassKit还有很多
需要学习的东西


273
00:13:09,489 --> 00:13:12,192 line:-1
比如如果学生点击活动


274
00:13:12,259 --> 00:13:13,260 line:-1
并启动app会怎样


275
00:13:13,594 --> 00:13:15,329 line:-1
以及如何报告进度数据


276
00:13:15,629 --> 00:13:17,631 line:-2
但这都不是我们
这次演讲要讨论的东西


277
00:13:18,699 --> 00:13:20,901 line:-1
如果你想了解更多关于这些的信息


278
00:13:20,968 --> 00:13:23,537 line:-1
我建议你查看其他与此相关的演讲


279
00:13:23,604 --> 00:13:26,607 line:-2
WWDC 2018的
ClassKit演讲


280
00:13:28,408 --> 00:13:31,178 line:-1
刚刚介绍了ClassKit的背景


281
00:13:31,245 --> 00:13:32,880 line:-1
现在我们来讲讲新功能


282
00:13:34,214 --> 00:13:35,716 line:-1
我要介绍的功能


283
00:13:35,782 --> 00:13:38,986 line:-2
在iOS 12.2的
ClassKit中引入


284
00:13:39,520 --> 00:13:41,188 line:-1
所以现在已经是可用的了


285
00:13:42,189 --> 00:13:44,424 line:-2
我们添加了新的
上下文提供程序扩展


286
00:13:44,992 --> 00:13:48,028 line:-2
添加了一个新功能
你可以调用该功能将活动标记为完成


287
00:13:48,529 --> 00:13:50,297 line:-1
以及添加了新的进度值


288
00:13:51,265 --> 00:13:54,468 line:-1
我首先说说上下文提供程序扩展


289
00:13:55,235 --> 00:13:56,970 line:-1
它的名字已经解释了它的功能


290
00:13:57,404 --> 00:13:59,907 line:-1
这是一个app的新扩展


291
00:13:59,973 --> 00:14:02,676 line:-2
可以用来创建
CLSContext树


292
00:14:03,243 --> 00:14:04,378 line:-1
来提供上下文


293
00:14:05,512 --> 00:14:07,247 line:-1
我在解释它如何工作之前


294
00:14:07,514 --> 00:14:10,184 line:-1
我想先告诉你如何创建该扩展


295
00:14:10,817 --> 00:14:12,186 line:-1
这是Xcode


296
00:14:12,686 --> 00:14:15,522 line:-2
如果您转到文件菜单
选择新建然后选择目标


297
00:14:15,956 --> 00:14:18,792 line:-1
对于iOS app扩展模板


298
00:14:18,859 --> 00:14:19,927 line:-1
（内容提供程序扩展模板）


299
00:14:19,993 --> 00:14:23,330 line:-2
ClassKit上下文提供程序
有一个新的模板


300
00:14:24,097 --> 00:14:25,866 line:-1
当你将该目标加入你的app


301
00:14:25,933 --> 00:14:27,701 line:-1
它就会新建文件


302
00:14:28,535 --> 00:14:31,471 line:-2
现在我来说说内容提供程序扩展模板
是如何工作的


303
00:14:31,538 --> 00:14:34,007 line:-1
我会像你展示可能用到的样板代码


304
00:14:34,374 --> 00:14:37,044 line:-2
之后向你展示
如何运用于Schoolwork


305
00:14:39,146 --> 00:14:42,950 line:-2
我刚刚说到内容提供程序扩展模板
会创建新文件


306
00:14:43,250 --> 00:14:45,052 line:-1
实际上只是一个单一类


307
00:14:45,686 --> 00:14:48,689 line:-2
CLSContextProvider
是超类


308
00:14:48,989 --> 00:14:51,458 line:-1
你必须只用一个函数覆盖


309
00:14:52,492 --> 00:14:55,495 line:-2
完成上下文的
updateDescendants


310
00:14:56,430 --> 00:14:59,132 line:-2
ClassKit会调用你的扩展
updateDescendants调用


311
00:14:59,766 --> 00:15:03,103 line:-1
在实现调用时 扩展会添加最小更新


312
00:15:03,170 --> 00:15:05,739 line:-1
或是提供正在传输的


313
00:15:06,240 --> 00:15:08,709 line:-1
CLSContext子项


314
00:15:09,576 --> 00:15:11,879 line:-1
你在该函数中不会回到子项


315
00:15:12,212 --> 00:15:14,848 line:-1
你的扩展只会添加或更新


316
00:15:14,915 --> 00:15:18,852 line:-1
上下文树中的特定部分并保存更改


317
00:15:20,454 --> 00:15:21,855 line:-1
原因是


318
00:15:22,289 --> 00:15:25,325 line:-1
你在该函数中的代码应该尽可能高校


319
00:15:27,528 --> 00:15:29,296 line:0
我现在回到我们刚才的例子


320
00:15:29,363 --> 00:15:31,231 line:0
来告诉你这是怎么工作的


321
00:15:32,065 --> 00:15:33,667 line:0
你的扩展被调用


322
00:15:33,934 --> 00:15:36,803 line:0
上下文完成
updateDescendants被调用


323
00:15:37,237 --> 00:15:40,741 line:0
传输的CLSContext
是你app的主要app上下文


324
00:15:41,675 --> 00:15:43,610 line:-2
代码怎么知道
这是主要app上下文呢


325
00:15:43,944 --> 00:15:47,948 line:0
最简单的方法是看
CLSContext传输有无父项


326
00:15:48,482 --> 00:15:50,784 line:0
只有主要app上下文没有


327
00:15:51,652 --> 00:15:54,755 line:0
所以你的合同是更新你的上下文树


328
00:15:54,821 --> 00:15:57,558 line:0
让其提供至少第一层 也就是


329
00:15:57,824 --> 00:16:01,528 line:0
主要app上下文的
直接子项CLSContext


330
00:16:02,496 --> 00:16:03,764 line:-1
回想我们的例子


331
00:16:04,097 --> 00:16:07,768 line:0
在CLSContext
就相当于IDE是什么


332
00:16:07,835 --> 00:16:10,204 line:-1
Swift是什么 变量是什么等等


333
00:16:10,571 --> 00:16:12,406 line:-1
就是顶层的七个课程


334
00:16:13,040 --> 00:16:16,877 line:0
我们一直用它们的标识符来指代它们
也就是这些


335
00:16:19,379 --> 00:16:20,781 line:0
如果这些子项


336
00:16:21,415 --> 00:16:23,417 line:0
在你的上下文树中都存在了


337
00:16:23,684 --> 00:16:26,587 line:0
也不需要修改
那么你的代码什么也不用做


338
00:16:27,120 --> 00:16:31,391 line:0
你就可以直接调用完成
不报错来指示一切正常


339
00:16:32,226 --> 00:16:35,629 line:0
但扩展允许你创建树的这一部分


340
00:16:35,929 --> 00:16:39,499 line:0
教师可能从没有看过
你app的这一部分


341
00:16:39,766 --> 00:16:41,902 line:0
或者他们就从来
没有启动过你的app


342
00:16:42,769 --> 00:16:45,839 line:0
我想补充一点
你的扩展程序可以自由填充


343
00:16:45,906 --> 00:16:47,574 line:0
app中的上下文树的更多部分


344
00:16:48,108 --> 00:16:50,377 line:0
其实它可以填充整个上下文树


345
00:16:50,644 --> 00:16:52,012 line:0
只要它够快


346
00:16:52,846 --> 00:16:54,548 line:-1
待会你就知道这为什么很重要了


347
00:16:54,982 --> 00:16:56,149 line:0
在这个例子中


348
00:16:56,216 --> 00:16:57,417 line:0
还是使用最低限度


349
00:16:57,684 --> 00:17:00,654 line:0
并且假设我们只创建传入的


350
00:17:00,721 --> 00:17:02,589 line:0
CLSContext的直接子项


351
00:17:03,257 --> 00:17:05,858 line:0
我们创建这七个子项


352
00:17:06,226 --> 00:17:08,127 line:0
上下文树应该就是这样的


353
00:17:09,896 --> 00:17:11,231 line:0
我再举一个例子


354
00:17:11,531 --> 00:17:13,200 line:0
能让你们更加清晰地理解运作过程


355
00:17:13,901 --> 00:17:16,136 line:0
现在扩展被再次调用


356
00:17:16,803 --> 00:17:21,508 line:-2
但是这次CLSContext
标识符3下划线数据类型


357
00:17:21,808 --> 00:17:24,211 line:-2
是传递给
函数的CLSContext


358
00:17:25,646 --> 00:17:28,882 line:0
而代码会添加或更新


359
00:17:28,949 --> 00:17:32,753 line:0
至少是3下划线数据类型的直接子项


360
00:17:33,954 --> 00:17:36,290 line:0
你可能还记得 这是一个测试


361
00:17:36,590 --> 00:17:38,158 line:0
所以 我们把它添加到这里


362
00:17:39,092 --> 00:17:40,394 line:-1
（上下文提供程序扩展目的）


363
00:17:40,460 --> 00:17:43,330 line:-2
那么上下文提供程序扩展
的目的是什么呢


364
00:17:44,064 --> 00:17:45,832 line:-1
我已经总结出来了


365
00:17:45,899 --> 00:17:50,604 line:-2
它让你的app能够
让CLSContext树


366
00:17:50,938 --> 00:17:52,873 line:-1
宣传你的app活动


367
00:17:53,473 --> 00:17:56,443 line:-2
这样老师其实并不需要
打开你的app


368
00:17:57,678 --> 00:18:01,081 line:-1
当然老师还是需要下载该app


369
00:18:01,448 --> 00:18:04,618 line:-2
但是下载行为可以让
你的ClassKit扩展


370
00:18:04,685 --> 00:18:06,353 line:-1
在iOS上注册


371
00:18:06,420 --> 00:18:09,223 line:-2
比如ClassKit
更确切来说是Schoolwork


372
00:18:09,590 --> 00:18:11,592 line:-1
将了解可用活动


373
00:18:15,495 --> 00:18:18,365 line:-1
你的app可能支持一系列活动


374
00:18:18,632 --> 00:18:20,767 line:-1
可能会有很宽或者是很长的树


375
00:18:21,535 --> 00:18:23,637 line:-1
在你启动app时创建一整个树


376
00:18:23,704 --> 00:18:25,239 line:-1
可能会导致性能问题


377
00:18:25,305 --> 00:18:28,909 line:-2
因此 此扩展旨在允许
在小批量的情况下


378
00:18:28,976 --> 00:18:31,478 line:-1
发放CLSContext


379
00:18:32,713 --> 00:18:35,282 line:-2
有一些ClassKit在
创建上下文树之前


380
00:18:35,349 --> 00:18:37,818 line:-1
需要用户交互


381
00:18:38,685 --> 00:18:41,622 line:-1
很遗憾 该扩展在这些情况下


382
00:18:41,688 --> 00:18:42,656 line:-1
并不适用


383
00:18:43,023 --> 00:18:46,260 line:-2
该扩展是在你的app
无法展示UI时被调用


384
00:18:48,495 --> 00:18:52,332 line:-2
最后 我想告诉你
上下文提供程序扩展


385
00:18:52,399 --> 00:18:54,134 line:-1
如何使用老师工作流程


386
00:18:54,868 --> 00:18:56,537 line:-1
回忆一下我之前的例子


387
00:18:56,904 --> 00:18:58,539 line:-1
老师要创建一个讲义


388
00:18:58,605 --> 00:19:00,908 line:-1
并浏览可用活动


389
00:19:01,642 --> 00:19:03,777 line:-2
如果你的app有
上下文提供程序扩展


390
00:19:04,111 --> 00:19:07,147 line:-2
老师在进入Schoolwork
的这个页面之前


391
00:19:07,214 --> 00:19:08,215 line:-1
它就能被调用


392
00:19:08,582 --> 00:19:11,251 line:-2
你的扩展应该已使用主
要app上下文调用


393
00:19:11,518 --> 00:19:14,855 line:-2
所以你的app可以作为
可用活动在这里出现


394
00:19:15,722 --> 00:19:19,426 line:-2
在老师开始进一步浏览
你的app活动子项时


395
00:19:20,694 --> 00:19:23,730 line:-1
你可以重复调用扩展


396
00:19:23,797 --> 00:19:25,999 line:-1
让你的CLSContext树更长


397
00:19:27,034 --> 00:19:31,171 line:-1
因为你的树或多或少是实时创建


398
00:19:31,605 --> 00:19:33,340 line:-1
但是必须在老师浏览时创建完成


399
00:19:33,841 --> 00:19:36,577 line:-1
这就是为什么你的扩展代码


400
00:19:36,643 --> 00:19:41,081 line:-2
要快速创建和保存
请求的CLSContext


401
00:19:42,216 --> 00:19:45,319 line:-2
现在你看到这些东西
是如何一起工作的了


402
00:19:45,586 --> 00:19:49,056 line:-2
扩展 你的app为活动和
schoolwork创建的树


403
00:19:50,424 --> 00:19:52,059 line:-1
ClassKit的另一个新功能


404
00:19:52,426 --> 00:19:55,429 line:-2
是一个让你可以标记
活动完成的API


405
00:19:55,729 --> 00:19:59,366 line:-1
这让学生更加容易告诉老师


406
00:19:59,433 --> 00:20:01,702 line:-1
分配的活动已完成


407
00:20:03,036 --> 00:20:05,172 line:-2
为了更好的理解为什么
这是一项厉害的新功能


408
00:20:05,706 --> 00:20:09,376 line:-2
我要再次打开Schoolwork
但这次是学生视角


409
00:20:10,110 --> 00:20:13,113 line:-1
我们看到了老师是如何进行分配活动


410
00:20:13,580 --> 00:20:15,148 line:-1
那么接收终端又是什么样的呢


411
00:20:15,816 --> 00:20:18,051 line:-1
这是我刚刚展示的讲义卡


412
00:20:18,385 --> 00:20:20,220 line:-2
而这时学生会在
Schoolwork中看到的样子


413
00:20:21,154 --> 00:20:22,356 line:-1
当他们点击


414
00:20:25,025 --> 00:20:27,127 line:-1
他们就可以看到带有活动的讲义


415
00:20:27,528 --> 00:20:29,162 line:-1
在这个例子中只有一个活动


416
00:20:29,530 --> 00:20:31,865 line:-1
点击活动会将其添加至app中


417
00:20:32,299 --> 00:20:34,301 line:-1
但他们完成活动后


418
00:20:34,368 --> 00:20:37,137 line:-2
学生依旧需要
返回Schoolwork


419
00:20:37,671 --> 00:20:39,139 line:-1
点击完成按钮


420
00:20:40,274 --> 00:20:43,076 line:-2
如果你的app采用的是
新的ClassKit API


421
00:20:43,377 --> 00:20:45,179 line:-1
就不需要最后一步了


422
00:20:46,280 --> 00:20:49,116 line:-2
在你的app中
你可以通过调用新API


423
00:20:49,183 --> 00:20:50,817 line:-1
来标记完成


424
00:20:52,386 --> 00:20:54,888 line:-2
CLSDataStore
有一个新功能


425
00:20:55,289 --> 00:20:58,792 line:-2
叫completeAllAssignedActivities
匹配context路径


426
00:20:59,793 --> 00:21:01,094 line:-1
该路径当然是


427
00:21:01,161 --> 00:21:03,697 line:-1
CLSContext或者是学生


428
00:21:04,064 --> 00:21:05,899 line:-1
所完成的活动的标识符路径


429
00:21:06,700 --> 00:21:09,269 line:-1
例如 学生刚刚完成了


430
00:21:09,336 --> 00:21:11,471 line:-1
这个app中的变量练习


431
00:21:12,239 --> 00:21:16,176 line:-2
我们可以通过
CLSContext路径


432
00:21:16,243 --> 00:21:18,011 line:-2
调用completeAllAssignedActivities
指示完成


433
00:21:18,378 --> 00:21:20,981 line:-1
2下划线变量 2下划线测试


434
00:21:21,915 --> 00:21:24,284 line:-2
下次学生再返回
Schoolwork时


435
00:21:25,252 --> 00:21:26,987 line:-1
它就会指示该活动完成


436
00:21:27,554 --> 00:21:30,057 line:-1
而且分配讲义的老师


437
00:21:30,123 --> 00:21:33,093 line:-1
也会看到学生活动已标记为完成


438
00:21:33,894 --> 00:21:35,629 line:-1
如果你的app采用了这项新调用


439
00:21:35,896 --> 00:21:37,965 line:-1
学生的工作流程会更顺畅


440
00:21:39,900 --> 00:21:42,936 line:-2
最后 ClassKit和
iOS 12.2


441
00:21:43,003 --> 00:21:44,838 line:-1
都添加了新的活动类型


442
00:21:45,172 --> 00:21:46,773 line:-1
正确/错误类型


443
00:21:46,840 --> 00:21:48,008 line:-1
（正确/错误类型）


444
00:21:48,408 --> 00:21:49,676 line:-1
在ClassKit介绍中


445
00:21:49,743 --> 00:21:52,379 line:-1
我没有讲到CLS活动类型


446
00:21:52,946 --> 00:21:55,148 line:-1
但是为了介绍新功能


447
00:21:55,215 --> 00:21:58,018 line:-2
我说到了每一个
CLSContext


448
00:21:58,085 --> 00:22:01,722 line:-2
都可以以CLS
活动对象的形式拥有活动


449
00:22:02,289 --> 00:22:07,327 line:-2
而且CLS活动可以包含
任意数量的CLS活动项目


450
00:22:08,929 --> 00:22:13,300 line:-2
CLSActivityItem
是少数其他类的父类


451
00:22:13,767 --> 00:22:18,038 line:-2
我想特别提到一个
就是CLSBinaryItem


452
00:22:20,007 --> 00:22:21,408 line:-1
CLSBinaryItem


453
00:22:21,675 --> 00:22:24,344 line:-1
只能在一半情况下展示进度


454
00:22:24,411 --> 00:22:25,846 line:-1
我将它们展示出来了


455
00:22:26,647 --> 00:22:29,383 line:-1
可能你想报告的进度就只是


456
00:22:29,449 --> 00:22:30,584 line:-1
学生过没过而已


457
00:22:30,651 --> 00:22:33,921 line:-2
CLSBinaryItem
有一个枚举来指示


458
00:22:34,521 --> 00:22:38,759 line:-1
此外你也可以展示真或假 是或否


459
00:22:39,826 --> 00:22:42,362 line:-1
但我们从一些开发者那里听到说


460
00:22:42,429 --> 00:22:43,797 line:-1
我们确实一些二元的东西


461
00:22:45,532 --> 00:22:48,869 line:-2
所以ClassKit定义了
正确/不正确枚举


462
00:22:48,936 --> 00:22:51,271 line:-1
来描述这种新类型的二元活动


463
00:22:52,072 --> 00:22:54,641 line:-1
想想在我们的app中的测试


464
00:22:55,209 --> 00:22:56,610 line:-1
它由十个问题组成


465
00:22:56,944 --> 00:23:01,014 line:-2
我们不会对主要活动项
使用二元活动类型


466
00:23:01,315 --> 00:23:03,650 line:-1
因为我们想把分数表示为数量


467
00:23:03,717 --> 00:23:07,454 line:-1
比如说老师可以看到学生得了70分


468
00:23:08,922 --> 00:23:12,726 line:-2
作为奖励 我们的app可以
添加其他活动项目


469
00:23:12,793 --> 00:23:14,761 line:-1
比如说每一个问题


470
00:23:15,162 --> 00:23:17,331 line:-1
都可以看到是正确还是错误


471
00:23:17,397 --> 00:23:20,067 line:-1
这样老师就能看到学生哪题答错


472
00:23:20,434 --> 00:23:21,702 line:-1
哪题答对


473
00:23:22,236 --> 00:23:25,372 line:-2
我只是举了一个这种类型
应该怎么使用的例子


474
00:23:26,807 --> 00:23:28,108 line:-1
最后


475
00:23:28,475 --> 00:23:31,378 line:-2
我们来讲讲ClassKit
编程最佳实践


476
00:23:31,445 --> 00:23:32,613 line:-1
（最佳实践）


477
00:23:33,747 --> 00:23:37,651 line:-2
我刚说到你可以在
上下文树中加入错误


478
00:23:37,718 --> 00:23:41,255 line:-2
一个CLSContext的
标识符路径不是唯一的


479
00:23:42,055 --> 00:23:45,092 line:-1
乍一听 这个错误好像很难做


480
00:23:45,659 --> 00:23:47,194 line:-1
但是想想这样的情景


481
00:23:47,895 --> 00:23:49,796 line:-1
你第一次启动你的app


482
00:23:50,097 --> 00:23:53,033 line:-2
尽职尽责地创建了一个
CLSContext树


483
00:23:53,100 --> 00:23:55,335 line:-1
为了创建app活动


484
00:23:56,003 --> 00:23:58,172 line:-1
这是原始树的一部分


485
00:23:59,706 --> 00:24:01,074 line:-1
第二次启动app时


486
00:24:01,575 --> 00:24:04,845 line:-2
不应该再创建一次
CLSContext树


487
00:24:06,346 --> 00:24:08,448 line:0
这将添加具有与现有


488
00:24:08,515 --> 00:24:11,718 line:0
标识符路径冲突的
标识符路径的CLSContext


489
00:24:12,252 --> 00:24:15,856 line:0
在添加之前记住要检查


490
00:24:15,923 --> 00:24:17,524 line:0
CLSContext在树中
是否已经存在


491
00:24:19,293 --> 00:24:22,162 line:-2
检查CLSContext
在树中是否存在


492
00:24:22,229 --> 00:24:23,630 line:-1
有几种方法


493
00:24:24,031 --> 00:24:29,036 line:-2
一是调用CLSDataStore功能上下文
matchingIdentifierPath


494
00:24:29,570 --> 00:24:31,205 line:-1
当完成模块被调用


495
00:24:31,572 --> 00:24:33,540 line:-1
请注意 该调用是异步的


496
00:24:33,974 --> 00:24:36,577 line:-1
返回的CLSContext空数组


497
00:24:36,877 --> 00:24:40,247 line:-1
将指示该路径的上下文尚不存在


498
00:24:40,314 --> 00:24:42,583 line:-1
所以可以创建


499
00:24:43,283 --> 00:24:46,153 line:-2
第二种方法是
调用CLSContext功能


500
00:24:46,520 --> 00:24:49,623 line:-2
子项
matchingIdentifierPath


501
00:24:50,224 --> 00:24:51,592 line:-1
这也是异步的


502
00:24:51,658 --> 00:24:53,093 line:-1
和前面的例子一样


503
00:24:53,393 --> 00:24:56,763 line:-1
如果没有上下文经过完成模块


504
00:24:56,830 --> 00:24:59,967 line:-2
那么你的app就可以
添加新CLSContext


505
00:25:00,734 --> 00:25:03,070 line:-1
在你的app中有很多地方


506
00:25:03,136 --> 00:25:05,138 line:-1
需要进行这样的检查


507
00:25:06,006 --> 00:25:09,142 line:-2
如果你采用的是新的
上下文提供程序扩展


508
00:25:09,476 --> 00:25:12,045 line:-2
你就添加了更多的矢量
那么也就有更多的东西需要检查


509
00:25:12,112 --> 00:25:15,983 line:-2
是否CLSContext
在树中已经存在


510
00:25:17,451 --> 00:25:20,420 line:-1
所以这可能是很棒的解决方案


511
00:25:20,754 --> 00:25:23,724 line:-2
就是实现CLSDataStore
代理函数


512
00:25:23,790 --> 00:25:26,894 line:-2
createContext forIdentifier
parentContext


513
00:25:26,960 --> 00:25:28,228 line:-1
和parentIdentifierPath


514
00:25:29,062 --> 00:25:30,797 line:-2
如果你将其中一类
加入你的app中


515
00:25:30,864 --> 00:25:32,466 line:-1
CLSDataStore代理


516
00:25:32,900 --> 00:25:34,701 line:-2
那么当你调用任何一项
刚刚提到的函数


517
00:25:34,768 --> 00:25:38,105 line:-2
如CLSDataStore上下文
matchingIdentifierPath


518
00:25:38,672 --> 00:25:40,774 line:-1
代理函数就会在上下文


519
00:25:41,074 --> 00:25:43,110 line:-1
从未被创建的情况下才会被调用


520
00:25:44,044 --> 00:25:46,513 line:-1
实现委托就容易了


521
00:25:46,780 --> 00:25:49,516 line:-2
所有上下文都会创建到
app的一个位置


522
00:25:50,784 --> 00:25:52,986 line:-1
以我的经验


523
00:25:53,053 --> 00:25:56,290 line:-2
创建CLSContext实际操作
对每个app都不一样


524
00:25:56,356 --> 00:25:57,925 line:-1
所以这里的代码我没有写


525
00:25:58,692 --> 00:26:01,061 line:-2
如果你是第一次
添加ClassKit支持


526
00:26:01,495 --> 00:26:04,598 line:-2
可以从2018年WWDC的
ClassKit演讲


527
00:26:04,865 --> 00:26:08,001 line:-1
以及示范代码开始上手


528
00:26:09,736 --> 00:26:13,440 line:-2
这是一个你app中可能存在的
简单帮助函数的示范


529
00:26:13,907 --> 00:26:15,909 line:-2
该函数叫
beginActivity


530
00:26:16,376 --> 00:26:20,380 line:-2
可以调用以使特定的
CLSContext成为活动上下文


531
00:26:20,948 --> 00:26:22,950 line:-1
我们只将它传入标识符路径


532
00:26:24,084 --> 00:26:26,553 line:-2
该函数调用
CLSContext查询


533
00:26:26,620 --> 00:26:29,890 line:-2
以查找与传入的
标识符路径匹配的子项


534
00:26:30,591 --> 00:26:33,360 line:-2
再次强调 因为我们在
app的其他地方


535
00:26:33,427 --> 00:26:35,495 line:-2
设置了
CLSDataStore代理


536
00:26:35,896 --> 00:26:39,733 line:-2
我们可以肯定 如果从未创建
指定的CLSContext


537
00:26:40,067 --> 00:26:43,971 line:-1
那么它就在委托函数中


538
00:26:44,037 --> 00:26:45,472 line:-2
因此应从查询中
返回CLSContext


539
00:26:47,040 --> 00:26:49,042 line:-1
我们让上下文返回至活动


540
00:26:49,476 --> 00:26:51,979 line:-1
创建新活动并开始该活动


541
00:26:52,613 --> 00:26:55,549 line:-1
这一系列调用表明我们希望


542
00:26:55,616 --> 00:26:59,052 line:-2
以特定CLSContext的
时间形式记录进度


543
00:27:00,187 --> 00:27:03,290 line:-2
最后我们调用
CLSDataStore保存


544
00:27:03,357 --> 00:27:05,659 line:-1
来发起我们刚刚完成的调用


545
00:27:06,693 --> 00:27:09,763 line:-2
同样的 你就可以创建许多
像这样的帮助功能


546
00:27:10,130 --> 00:27:13,166 line:-2
但是上下文创建代码
只需要在一个地方


547
00:27:13,467 --> 00:27:15,702 line:-2
在你的CLSDataStore
代理函数中


548
00:27:17,237 --> 00:27:18,739 line:-1
如果你是ClassKit新手


549
00:27:18,805 --> 00:27:22,176 line:-2
我希望这个介绍
能够让你体验到它的功能


550
00:27:22,442 --> 00:27:25,245 line:-1
如果你认为老师和学生


551
00:27:25,312 --> 00:27:27,281 line:-1
能在教育领域使用你的app


552
00:27:27,648 --> 00:27:30,150 line:-2
那么你应该
考虑采用ClassKit


553
00:27:31,051 --> 00:27:32,986 line:-2
如果你对ClassKit
已经很熟悉了


554
00:27:33,053 --> 00:27:36,490 line:-2
我希望你能利用
我们在2019年添加的新功能


555
00:27:36,857 --> 00:27:39,026 line:-1
因为这些都是像你们这样的


556
00:27:39,092 --> 00:27:40,527 line:-1
开发者反馈的结果


557
00:27:40,928 --> 00:27:41,828 line:-1
（何去何从）


558
00:27:42,095 --> 00:27:44,464 line:-1
请查看该演讲的附带链接


559
00:27:45,365 --> 00:27:49,703 line:-2
你可以找到示例代码 文档和
其他更加深入的


560
00:27:49,770 --> 00:27:51,672 line:-1
ClassKit演讲链接


561
00:27:52,472 --> 00:27:53,540 line:-1
谢谢

