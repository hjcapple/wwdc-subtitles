1
00:00:06,039 --> 00:00:07,441 line:0
（多任务App中的窗口管理）


2
00:00:07,508 --> 00:00:08,775 line:0
（激活、刷新和销毁窗口）


3
00:00:08,842 --> 00:00:10,477 line:0
大家好
我是Giovanni Tarducci


4
00:00:10,544 --> 00:00:12,479 line:0
来自系统UI SpringBoard团队


5
00:00:12,546 --> 00:00:17,184 line:-2
今天我很高兴跟大家分享
iPadOS上的窗口管理


6
00:00:17,751 --> 00:00:21,154 line:-1
为此我们引入了三个新API


7
00:00:21,221 --> 00:00:25,626 line:-2
可以分别激活、刷新或销毁
任意情景会话


8
00:00:26,426 --> 00:00:29,997 line:-2
但让我们先来看一个
如何使用这些API的演示


9
00:00:30,063 --> 00:00:32,031 line:-1
在一个我们一直在设计的app中


10
00:00:39,273 --> 00:00:42,209 line:-1
好的 我们叫它Clown Town


11
00:00:42,276 --> 00:00:45,379 line:-1
这为聚会寻找小丑提供了一个新方法


12
00:00:46,013 --> 00:00:49,816 line:-2
打开它是一个全屏地图
显示我网络中所有的小丑们


13
00:00:49,883 --> 00:00:53,587 line:-1
我可以轻触任意一个标记了解详情


14
00:00:55,022 --> 00:00:57,558 line:-1
它的实现也非常直观


15
00:00:57,624 --> 00:01:01,662 line:-2
详情视图控制器完全了解
如何显示某个指定ID的小丑


16
00:01:01,728 --> 00:01:04,364 line:-1
而地图视图控制器把一切


17
00:01:04,431 --> 00:01:08,035 line:-2
陈述、动画、
和姿势都委托给了UIKit


18
00:01:08,101 --> 00:01:11,171 line:-2
通过视图呈现
视图控制器激活了API


19
00:01:11,638 --> 00:01:13,907 line:-1
嗯 关于多任务的改进


20
00:01:13,974 --> 00:01:16,810 line:-2
我们可以把这个委托模型
提升到一个新的层级


21
00:01:16,877 --> 00:01:19,646 line:-1
并免费获取强大的新功能


22
00:01:19,713 --> 00:01:21,315 line:-1
需要在结账时收取税费


23
00:01:22,249 --> 00:01:25,419 line:-2
因此我们的确需要从添加
“在新窗口中打开”按钮开始


24
00:01:25,485 --> 00:01:26,653 line:-1
在详情视图中


25
00:01:27,187 --> 00:01:31,491 line:-2
我们所有的用户都将发现
这个很棒的新功能


26
00:01:31,859 --> 00:01:36,363 line:-2
当轻触它时 我们会调用
新的请求情景会话激活API


27
00:01:36,630 --> 00:01:39,867 line:-2
从而在辅助的专用窗口中
打开这个小丑页面


28
00:01:40,167 --> 00:01:41,168 line:-1
让我们来做一下


29
00:01:41,969 --> 00:01:43,971 line:-1
我已经可以浏览地图、


30
00:01:44,037 --> 00:01:46,507 line:-1
结账以及与其他小丑们对比了


31
00:01:46,874 --> 00:01:47,941 line:-1
但不仅如此


32
00:01:48,008 --> 00:01:51,311 line:-2
我们现在可以让整个系统
都为我们服务


33
00:01:51,612 --> 00:01:53,247 line:-1
我们可以重新调整窗口大小


34
00:01:53,981 --> 00:01:55,249 line:-1
四处移动窗口


35
00:01:55,849 --> 00:01:57,818 line:-1
总是打开新窗口


36
00:01:58,085 --> 00:01:59,419 line:-1
我这边的窗口


37
00:01:59,486 --> 00:02:01,288 line:-1
在切换器中有自己的位置


38
00:02:01,688 --> 00:02:06,560 line:-2
现在我可以把这个小丑滑过去
移动它 并存起来


39
00:02:06,927 --> 00:02:10,130 line:-1
也许要打开其它的详情窗口


40
00:02:10,898 --> 00:02:14,134 line:-1
Crusty 还有最后一个


41
00:02:15,435 --> 00:02:16,503 line:-1
Mr. Happy


42
00:02:18,405 --> 00:02:20,674 line:-1
好的 那么通过滑动app


43
00:02:20,741 --> 00:02:23,677 line:-1
我可以查看所有的窗口


44
00:02:23,744 --> 00:02:26,213 line:-1
甚至可以在它们之间快速地切换


45
00:02:26,280 --> 00:02:27,147 line:-1
就像那样


46
00:02:27,714 --> 00:02:29,583 line:-1
我甚至可以返回到


47
00:02:29,650 --> 00:02:31,051 line:-1
位于地图旁边的一个大窗口


48
00:02:31,451 --> 00:02:32,920 line:-1
现在让我们暂停一下


49
00:02:32,986 --> 00:02:36,323 line:-2
我们的确实现了全部这些功能
通过为系统添加委托、描述、


50
00:02:36,390 --> 00:02:39,126 line:-1
动画以及更多


51
00:02:39,193 --> 00:02:43,163 line:-2
目前通过
单一的请求情景会话激活API


52
00:02:44,031 --> 00:02:48,168 line:-2
现在我注意到这个Mr. Happy
有一个星的评级


53
00:02:48,235 --> 00:02:50,070 line:-1
很可能不是一个很好的小丑


54
00:02:50,137 --> 00:02:52,072 line:-1
因此让我们移除他 关掉他的窗口


55
00:02:52,139 --> 00:02:55,809 line:-1
通过新的请求情景会话销毁API


56
00:02:55,876 --> 00:02:58,345 line:-1
这是我为右上角的按钮调用的


57
00:02:58,745 --> 00:03:00,547 line:-1
让我们做一下 他消失了


58
00:03:01,181 --> 00:03:03,183 line:-1
现在我记得切换器中有一个小丑


59
00:03:03,250 --> 00:03:04,351 line:-1
拥有五星评级


60
00:03:04,418 --> 00:03:05,919 line:-1
那么让我们再次打开她


61
00:03:07,621 --> 00:03:10,090 line:-1
请注意她并不是复制出来的


62
00:03:10,157 --> 00:03:11,525 line:-1
这是Clown Town的政策


63
00:03:11,592 --> 00:03:13,160 line:-1
它的实施很简单


64
00:03:13,227 --> 00:03:16,663 line:-1
就是要求请求情景会话API激活


65
00:03:16,730 --> 00:03:18,999 line:-1
一个现有会话而不是一个新会话


66
00:03:20,300 --> 00:03:22,436 line:-1
我甚至可以追踪她何时可用


67
00:03:22,503 --> 00:03:24,338 line:-1
系统会查看并发现她是否可用


68
00:03:24,404 --> 00:03:26,773 line:-1
并且我可以通过绿色导航栏来呈现


69
00:03:26,840 --> 00:03:30,777 line:-1
同时会在左侧出现一个立即预定按钮


70
00:03:31,945 --> 00:03:34,081 line:-1
如果她的可用性发生变化


71
00:03:34,147 --> 00:03:35,482 line:-1
我会收到一个通知


72
00:03:35,549 --> 00:03:38,952 line:-2
我将更新这个UI
让导航栏变成红色


73
00:03:39,152 --> 00:03:43,557 line:-2
并且我会调用
新的请求情景会话刷新API


74
00:03:43,624 --> 00:03:47,728 line:-1
用于更新UI的快照 其它不变


75
00:03:47,794 --> 00:03:50,097 line:-1
当它在切换器中显示时


76
00:03:50,931 --> 00:03:52,299 line:-1
但我还没有做出决定


77
00:03:52,366 --> 00:03:56,236 line:-1
那么让我们都追踪一下


78
00:03:56,970 --> 00:03:58,005 line:-1
就像这样


79
00:03:59,139 --> 00:04:02,042 line:-2
如果我可以在app后台做一些事情
做一些其它事


80
00:04:02,109 --> 00:04:04,311 line:-1
也许是把这个app推荐给我的朋友们


81
00:04:04,378 --> 00:04:07,014 line:-1
并且显示我当前已经拥有的收藏


82
00:04:07,581 --> 00:04:11,985 line:-2
但我已经收到了通知说
其中有一些不再可用了


83
00:04:12,219 --> 00:04:13,353 line:-1
我忘记了他们的名字


84
00:04:13,420 --> 00:04:16,322 line:-1
那么让我使用app快照


85
00:04:16,390 --> 00:04:18,325 line:-1
浏览我的所有窗口


86
00:04:18,725 --> 00:04:19,826 line:-1
就是这样


87
00:04:19,892 --> 00:04:22,329 line:-1
快照已经更新了 非常棒


88
00:04:22,396 --> 00:04:24,932 line:-1
因为我可以在这里直接管理我的窗口


89
00:04:25,165 --> 00:04:27,267 line:-1
向上滑动几次就搞定了


90
00:04:27,968 --> 00:04:29,870 line:-1
看起来这些小丑们流动性很大


91
00:04:29,937 --> 00:04:32,739 line:-2
那么让我们继续
预定BuBu LuBu


92
00:04:32,806 --> 00:04:34,908 line:-1
然后我们就可以准备聚会了


93
00:04:36,977 --> 00:04:38,378 line:-1
哎呦 稍后见Clown Town


94
00:04:39,646 --> 00:04:40,881 line:-1
好的 那么…


95
00:04:42,549 --> 00:04:43,617 line:-1
谢谢


96
00:04:45,285 --> 00:04:48,288 line:-1
那么让我们查看API的激活会话功能


97
00:04:49,656 --> 00:04:51,358 line:-1
首先激活会话


98
00:04:51,425 --> 00:04:54,661 line:-1
仅用于响应直接的和本地的用户交互


99
00:04:55,028 --> 00:04:58,365 line:-1
用户需要触摸屏幕来触发它


100
00:04:59,900 --> 00:05:03,437 line:-2
并且你要通过调用
新的请求情景会话激活API


101
00:05:03,504 --> 00:05:04,738 line:-1
在UI app上


102
00:05:04,805 --> 00:05:07,441 line:-2
要么激活一个现有会话
要么激活一个新会话


103
00:05:08,775 --> 00:05:11,078 line:-2
在Clown Town中
当我们首次启动它时


104
00:05:11,144 --> 00:05:14,648 line:-1
UIApplication只有一个打开的会话


105
00:05:14,715 --> 00:05:16,683 line:-1
就是那个显示地图配置的会话


106
00:05:18,051 --> 00:05:21,355 line:-1
窗口中显示了我们的整个视图层级


107
00:05:22,689 --> 00:05:26,093 line:-2
当按下打开新窗口按钮时
通过委托


108
00:05:26,159 --> 00:05:28,795 line:-2
详情视图控制器
会接触到地图视图控制器


109
00:05:28,862 --> 00:05:29,963 line:-1
并呈现它


110
00:05:30,364 --> 00:05:31,798 line:-1
并且地图视图控制器


111
00:05:31,865 --> 00:05:35,636 line:-2
会调用我们在app委托上
所添加的方法


112
00:05:36,870 --> 00:05:39,406 line:-1
因为我们有不复制政策


113
00:05:39,473 --> 00:05:43,043 line:-2
我们会查看
这个指定小丑的全部现有会话


114
00:05:43,110 --> 00:05:44,978 line:-2
因为是首次启动
我们没有任何发现


115
00:05:45,045 --> 00:05:47,948 line:-1
那么我们在运行时会传输nil


116
00:05:48,215 --> 00:05:50,184 line:-1
把nil传给这个参数


117
00:05:50,250 --> 00:05:53,120 line:-1
请求创建一个全新的情景会话


118
00:05:54,121 --> 00:05:56,757 line:-2
然后我们要为这个小丑
创建一个userActivity


119
00:05:56,823 --> 00:06:01,195 line:-2
并通过UIKit
把userActivity返回给我们


120
00:06:01,562 --> 00:06:04,932 line:-1
我们稍后会在委托链中看到


121
00:06:05,933 --> 00:06:09,269 line:-2
选项对象可以让我
指定一个请求情景


122
00:06:09,336 --> 00:06:13,574 line:-1
就是用户会在哪里发起这个请求


123
00:06:13,841 --> 00:06:16,977 line:-1
系统使用这个信息来避免


124
00:06:17,044 --> 00:06:19,947 line:-2
用激活的请求情景
替换requestingScene


125
00:06:20,314 --> 00:06:22,249 line:-1
还有就是为了导航


126
00:06:23,016 --> 00:06:24,418 line:-1
我们现在可以调用API


127
00:06:25,252 --> 00:06:26,553 line:-1
显示了新窗口


128
00:06:26,620 --> 00:06:29,623 line:-1
同时创建了新的会话等级


129
00:06:30,858 --> 00:06:31,892 line:-1
正如我所提到过的


130
00:06:31,959 --> 00:06:35,495 line:-1
有两个关键方法你们一定很想实施


131
00:06:35,562 --> 00:06:39,333 line:-2
以便让你的app决定
实际要创建什么


132
00:06:39,399 --> 00:06:40,801 line:-1
以及如何配置


133
00:06:41,802 --> 00:06:45,906 line:-2
那么让我们退一步
返回到我们调用API时


134
00:06:46,840 --> 00:06:48,108 line:-1
我们这样做时


135
00:06:49,142 --> 00:06:51,578 line:-1
UIKit会创建一个全新的情景会话


136
00:06:51,645 --> 00:06:54,281 line:-1
并让你为其指定一个配置


137
00:06:54,348 --> 00:06:57,484 line:-1
通过调用用于连接情景会话的配置


138
00:06:57,551 --> 00:06:58,752 line:-1
在app委托上


139
00:06:58,819 --> 00:07:00,487 line:-1
你一定很想实施这个


140
00:07:00,554 --> 00:07:03,490 line:-1
在这里你可以检验用户活动


141
00:07:03,557 --> 00:07:07,294 line:-1
它会通过UI情景连接选项返回给你


142
00:07:07,694 --> 00:07:09,129 line:-1
让你选择一个会话


143
00:07:09,196 --> 00:07:13,767 line:-1
对于我来说是详情配置


144
00:07:14,268 --> 00:07:16,970 line:-2
现在如果你的配置
指定了情节串联图版


145
00:07:17,037 --> 00:07:18,372 line:-1
正如我所推荐的


146
00:07:18,438 --> 00:07:21,975 line:-2
在这点上
UIKit会继续并创建整个视图等级


147
00:07:22,042 --> 00:07:23,977 line:-1
并且你只需要配置就可以了


148
00:07:24,244 --> 00:07:26,980 line:-2
你可以通过实施
sceneWillConnectToSession来实现


149
00:07:27,047 --> 00:07:28,448 line:-1
在你的情景委托上


150
00:07:28,916 --> 00:07:29,750 line:-1
还是在那里


151
00:07:29,816 --> 00:07:32,853 line:-2
你可以发现你的用户活动
以及连接选项


152
00:07:32,920 --> 00:07:36,623 line:-2
并且你可以为其
配置窗口和视图控制器等级


153
00:07:38,692 --> 00:07:40,093 line:-1
那是一个新会话


154
00:07:40,160 --> 00:07:41,795 line:-1
那么现有会话呢？


155
00:07:42,696 --> 00:07:45,232 line:-1
如果会话仍然存在


156
00:07:45,299 --> 00:07:47,201 line:-1
我们会直接进入情景委托


157
00:07:47,267 --> 00:07:50,704 line:-1
并且如果会话在其间断开连接


158
00:07:50,771 --> 00:07:52,840 line:-1
我们会调用sceneWillConnectToSession


159
00:07:53,607 --> 00:07:55,576 line:-1
但是如果情景仍然保持连接


160
00:07:55,642 --> 00:07:58,579 line:-1
我们将进入continueUserActivity


161
00:07:59,446 --> 00:08:01,081 line:-1
这两个你一定都想实施


162
00:08:01,481 --> 00:08:06,386 line:-2
总的来说 激活会话仅用于
响应直接用户请求


163
00:08:06,453 --> 00:08:10,023 line:-2
要么激活新会话
要么激活现有会话


164
00:08:10,090 --> 00:08:14,294 line:-2
并且你想实施
你的app和情景委托方法


165
00:08:14,361 --> 00:08:19,399 line:-1
以便配置两个情景以及活动窗口


166
00:08:21,001 --> 00:08:22,970 line:-1
现在谈谈刷新会话


167
00:08:23,604 --> 00:08:26,807 line:-1
刷新是在app中与用户相关的更新


168
00:08:27,574 --> 00:08:28,775 line:-1
举几个例子


169
00:08:28,976 --> 00:08:31,545 line:-1
可以是在同一个设备上


170
00:08:31,612 --> 00:08:34,481 line:-1
显示并运行多个窗口


171
00:08:34,548 --> 00:08:39,318 line:-2
用户可能从一个窗口
或甚至是另一台设备上修改了它们


172
00:08:39,385 --> 00:08:40,888 line:-1
现在你希望能保持同步


173
00:08:40,953 --> 00:08:45,526 line:-1
你希望它们的呈现保持更新


174
00:08:45,993 --> 00:08:47,861 line:-1
或者你只想获取新数据


175
00:08:47,928 --> 00:08:50,531 line:-1
并对用户可见


176
00:08:50,597 --> 00:08:53,433 line:-1
或你想更新一切情景和会话元数据


177
00:08:53,500 --> 00:08:54,501 line:-1
正如我们即将看到的


178
00:08:55,736 --> 00:08:57,504 line:-1
你这样做了 通过在任意时间


179
00:08:57,571 --> 00:09:01,708 line:-2
在UIApplication上调用
requestSceneSessionRefresh API


180
00:09:02,109 --> 00:09:06,146 line:-1
通过传输你所希望刷新的会话


181
00:09:08,549 --> 00:09:12,352 line:-1
这个API究竟会让你更新哪些东西？


182
00:09:12,686 --> 00:09:16,190 line:-1
你可以给这个会话更新


183
00:09:16,256 --> 00:09:17,391 line:-1
状态恢复用户活动


184
00:09:17,457 --> 00:09:20,494 line:-1
你可以更新情景激活条件


185
00:09:20,561 --> 00:09:21,795 line:-1
并且你的UI


186
00:09:21,862 --> 00:09:25,532 line:-1
最终又会在快照中被捕捉到


187
00:09:26,633 --> 00:09:29,970 line:-2
正如我们在Clown Town中所看到的
由于那些更新的快照


188
00:09:30,037 --> 00:09:32,272 line:-1
我们会感觉app在切换器中是活跃的


189
00:09:32,339 --> 00:09:35,676 line:-2
并且我们还可以
信心满满地处理输入数据


190
00:09:35,742 --> 00:09:38,679 line:-1
而不需要导航到每一个会话


191
00:09:38,745 --> 00:09:41,582 line:-1
只是为了查看是否已连接或已更新


192
00:09:41,648 --> 00:09:43,383 line:-1
即便我们压根就不再需要它们了


193
00:09:45,219 --> 00:09:47,054 line:-1
在架构注释中


194
00:09:47,354 --> 00:09:49,456 line:-1
你想监测相关模型变更


195
00:09:49,523 --> 00:09:51,425 line:-1
从而调用API


196
00:09:51,491 --> 00:09:55,929 line:-2
无论是在感兴趣的视图控制器中
还是在长周期对象中


197
00:09:56,697 --> 00:09:59,066 line:-1
因为如果场景仍然保持连接


198
00:09:59,566 --> 00:10:02,135 line:-1
无论是在前台或是后台


199
00:10:02,202 --> 00:10:04,705 line:-1
它都可以自己收到通知


200
00:10:04,771 --> 00:10:05,806 line:-1
并且调用API


201
00:10:05,873 --> 00:10:08,242 line:-1
这将会在内部实现


202
00:10:09,843 --> 00:10:12,012 line:-1
如果情景已经断开连接


203
00:10:12,079 --> 00:10:14,147 line:-1
将不会再显示视图控制器


204
00:10:14,214 --> 00:10:16,817 line:-1
因此长周期对象可以介入


205
00:10:16,884 --> 00:10:20,721 line:-2
解决这个问题并在它自己的位置上
调用刷新API


206
00:10:21,088 --> 00:10:23,957 line:-1
然后情景就会在后台保持连接


207
00:10:24,024 --> 00:10:27,294 line:-1
并且视图控制器可以进行自我更新


208
00:10:27,528 --> 00:10:29,963 line:-1
并捕捉快照


209
00:10:32,032 --> 00:10:36,403 line:-2
总的来说 你想在app中
刷新用户相关的更新


210
00:10:37,004 --> 00:10:39,106 line:-1
让布局时间缩短


211
00:10:39,173 --> 00:10:41,542 line:-1
因此我们可以迅速捕捉快照


212
00:10:41,875 --> 00:10:45,412 line:-1
并且不依赖于它的立即执行


213
00:10:45,479 --> 00:10:48,081 line:-1
系统保留在稍后


214
00:10:48,148 --> 00:10:50,217 line:-1
实施这个请求的能力 如果必要的话


215
00:10:51,785 --> 00:10:53,220 line:-1
现在讲销毁会话


216
00:10:53,287 --> 00:10:55,756 line:-1
又叫做带着样式离开


217
00:10:57,291 --> 00:11:01,061 line:-1
你针对直接用户请求销毁会话


218
00:11:01,128 --> 00:11:04,064 line:-2
或者如果你有窗口
是一个辅助窗口


219
00:11:04,131 --> 00:11:06,433 line:-1
用于显示一些数据 一些项目


220
00:11:06,500 --> 00:11:09,102 line:-1
而用户已经从其它地方把这些删掉了


221
00:11:09,169 --> 00:11:11,705 line:-1
从另一个窗口或甚至是另一台设备


222
00:11:13,240 --> 00:11:15,042 line:-1
你可以通过在任意时间


223
00:11:15,108 --> 00:11:16,343 line:-1
在UIApplication上调用


224
00:11:16,410 --> 00:11:18,779 line:-2
requestSceneSessionDestruction
API实现


225
00:11:18,846 --> 00:11:21,481 line:-1
它会处理你希望销毁的会话


226
00:11:21,548 --> 00:11:23,450 line:-1
还有一个选项对象


227
00:11:24,585 --> 00:11:27,888 line:-2
这个选项可以让你指定一个
DismissalAnimation


228
00:11:28,522 --> 00:11:30,924 line:-1
是系统需要考虑的


229
00:11:30,991 --> 00:11:34,494 line:-1
如果情景恰好当时处于前台


230
00:11:35,629 --> 00:11:36,530 line:-1
现在让我讲清楚点


231
00:11:36,597 --> 00:11:39,733 line:-1
会话将会消失 再也不会出现


232
00:11:40,100 --> 00:11:45,005 line:-1
但动画允许你了解用户关掉它的意图


233
00:11:45,606 --> 00:11:47,174 line:-1
那么要选择哪个呢？


234
00:11:47,875 --> 00:11:49,877 line:-1
主草图是一个很棒的范例


235
00:11:50,310 --> 00:11:53,580 line:-1
当主草图未经保存就被取消时


236
00:11:53,647 --> 00:11:57,117 line:-2
用户就是很明确地要求
销毁其中的内容


237
00:11:57,184 --> 00:11:59,319 line:-1
这很常见 当关掉窗口时


238
00:11:59,386 --> 00:12:00,554 line:-2
正如我们在Clown Town中
所看到的那样


239
00:12:00,954 --> 00:12:03,724 line:-1
在这些情况下 你选择标准动画


240
00:12:04,558 --> 00:12:06,426 line:-1
用于了解这个意图


241
00:12:08,061 --> 00:12:09,696 line:-1
当发送草稿时


242
00:12:09,763 --> 00:12:12,900 line:-1
用户并没有要求销毁他的内容


243
00:12:13,333 --> 00:12:14,902 line:-1
那么会话将会被销毁


244
00:12:14,968 --> 00:12:18,372 line:-1
作为用户接受


245
00:12:18,438 --> 00:12:19,339 line:-1
会话的最终目的的副作用


246
00:12:19,406 --> 00:12:22,476 line:-1
那么对于邮箱来说就是发送邮件


247
00:12:22,543 --> 00:12:25,045 line:-1
在Clown Town例子中就是预定小丑


248
00:12:25,112 --> 00:12:26,346 line:-1
如果你处于追踪模式中的话


249
00:12:26,880 --> 00:12:30,684 line:-1
你选择交付就是


250
00:12:30,751 --> 00:12:32,920 line:-1
用户已批准会话的最终目的


251
00:12:34,488 --> 00:12:38,759 line:-1
现在当草图被取消和保存时


252
00:12:39,092 --> 00:12:42,129 line:-1
用户并没有要求销毁他的内容


253
00:12:42,396 --> 00:12:44,031 line:-1
那么会话将会被销毁


254
00:12:44,097 --> 00:12:48,468 line:-1
作为用户拒绝立即采取行动的副作用


255
00:12:49,136 --> 00:12:50,604 line:-1
你选择拒绝 在这些情况中


256
00:12:50,671 --> 00:12:53,273 line:-1
是告知会话的最终目的


257
00:12:53,340 --> 00:12:55,509 line:-1
尚未被实现


258
00:12:56,276 --> 00:12:58,212 line:-1
（会话销毁动画衰退）


259
00:12:58,779 --> 00:12:59,680 line:-1
总结一下


260
00:13:00,147 --> 00:13:02,850 line:-1
你为了响应用户请求而销毁会话


261
00:13:02,916 --> 00:13:04,685 line:-1
无论是本地还是远程


262
00:13:04,751 --> 00:13:06,520 line:-1
并且你选择动画样式


263
00:13:06,587 --> 00:13:10,157 line:-1
用于最好地了解用户的意图


264
00:13:11,458 --> 00:13:13,894 line:-2
总的来说 我们了解了
如何通过这些新API


265
00:13:13,961 --> 00:13:16,563 line:-1
授权给用户的操作


266
00:13:16,630 --> 00:13:19,800 line:-1
并且你可以把复杂的操作委托给系统


267
00:13:19,867 --> 00:13:22,169 line:-1
同时获取能让你的用户


268
00:13:22,236 --> 00:13:24,671 line:-1
轻松发现的强大的新功能


269
00:13:24,738 --> 00:13:25,672 line:-1
谢谢


270
00:13:25,739 --> 00:13:30,644 line:-2
（要了解更多信息请查看
developer.apple.com/wwdc19/246）

