1
00:00:07,516 --> 00:00:16,500
[ 音乐 ]


2
00:00:21,516 --> 00:00:28,500
[ 掌声 ]


3
00:00:29,226 --> 00:00:30,026
>> 早上好


4
00:00:30,026 --> 00:00:31,916
欢迎来到 204 会议


5
00:00:31,976 --> 00:00:33,636
自动强密码及


6
00:00:33,636 --> 00:00:35,066
安全码的自动填充


7
00:00:35,506 --> 00:00:36,616
我的名字叫 Chelsea


8
00:00:37,466 --> 00:00:38,766
在昨天的年度咨文中


9
00:00:38,766 --> 00:00:40,176
你可能已经对自动强密码


10
00:00:40,176 --> 00:00:41,496
以及安全码的自动填充


11
00:00:41,496 --> 00:00:42,526
有所了解


12
00:00:42,806 --> 00:00:44,216
今天 我非常兴奋能向你们


13
00:00:44,216 --> 00:00:45,756
介绍更多有关这些功能的内容


14
00:00:47,096 --> 00:00:48,816
这些新功能和其他


15
00:00:48,816 --> 00:00:50,406
iOS 12 里的功能将帮助


16
00:00:50,406 --> 00:00:52,246
用户便捷地在你的 App 中


17
00:00:52,246 --> 00:00:54,866
登录和创建帐号


18
00:00:55,486 --> 00:00:58,026
如果你的 App 中有一个登录屏幕


19
00:00:58,026 --> 00:00:59,336
或者帐号创建屏幕


20
00:00:59,336 --> 00:01:00,916
那么这期会议就很适合你


21
00:01:02,216 --> 00:01:04,366
用户的一大难题是


22
00:01:04,366 --> 00:01:05,446
处理密码


23
00:01:06,746 --> 00:01:08,196
这个问题很麻烦
 
00:01:08,196 --> 00:01:09,446
即便是对那些使用最佳做法


24
00:01:09,446 --> 00:01:11,056
也就是用密码管理器来


25
00:01:11,056 --> 00:01:13,236
创建和填写


26
00:01:13,266 --> 00:01:14,536
密码的人来说也一样


27
00:01:15,486 --> 00:01:16,956
对其他人来说


28
00:01:16,956 --> 00:01:18,616
这就像是尝试做一些简单


29
00:01:18,616 --> 00:01:20,936
但是不安全的操作 例如重复


30
00:01:20,936 --> 00:01:22,266
使用他们在其他设备上已经


31
00:01:22,266 --> 00:01:24,326
使用过的密码 或者使用一个


32
00:01:24,326 --> 00:01:27,276
容易猜到的密码以便记忆


33
00:01:28,636 --> 00:01:30,546
我们知道最私人


34
00:01:30,706 --> 00:01:32,916
最安全的方法 对你的用户来说


35
00:01:32,946 --> 00:01:35,126
是在每个设备上使用


36
00:01:35,336 --> 00:01:36,916
特殊的强密码


37
00:01:37,926 --> 00:01:39,686
我们都听说过由于破解


38
00:01:39,686 --> 00:01:41,946
设备导致的用户


39
00:01:41,946 --> 00:01:44,866
密码曝露


40
00:01:44,866 --> 00:01:46,516
用户就需要对他们


41
00:01:46,516 --> 00:01:48,286
使用的每个服务都进行


42
00:01:48,446 --> 00:01:49,436
密码修改


43
00:01:50,846 --> 00:01:52,146
我们今天将讨论的


44
00:01:52,146 --> 00:01:54,456
功能将帮助用户为 App


45
00:01:54,686 --> 00:01:56,666
选择特殊的强密码


46
00:01:57,406 --> 00:01:59,096
这样 你能够既帮助那些


47
00:01:59,446 --> 00:02:00,876
有意识尝试使用


48
00:02:00,876 --> 00:02:03,206
最佳密码的用户


49
00:02:03,236 --> 00:02:04,416
也能帮助那些


50
00:02:04,416 --> 00:02:06,186
不愿去想密码的用户


51
00:02:06,786 --> 00:02:09,566
你的很多用户在使用


52
00:02:09,566 --> 00:02:10,675
iCloud 钥匙串


53
00:02:11,246 --> 00:02:12,336
我们今天将谈到的功能


54
00:02:12,336 --> 00:02:14,736
是在钥匙串上建立的


55
00:02:14,736 --> 00:02:17,526
它有最好的类安全性


56
00:02:17,526 --> 00:02:19,176
同时它能在生物认证之下


57
00:02:19,176 --> 00:02:21,016
保护用户的密码


58
00:02:21,446 --> 00:02:24,486
Apple 没有通往


59
00:02:24,486 --> 00:02:25,526
钥匙串内存储凭证的路径


60
00:02:25,526 --> 00:02:28,296
所以用户的隐私同样是得到保护的


61
00:02:29,156 --> 00:02:30,586
iCloud 密码钥匙串管理员


62
00:02:30,846 --> 00:02:33,106
可以帮助用户在 App 上登录及


63
00:02:33,106 --> 00:02:34,386
创建帐号


64
00:02:35,546 --> 00:02:36,926
我们在 iOS 12 上增添了一些新功能


65
00:02:37,056 --> 00:02:38,886
从而使帐号的创建


66
00:02:38,886 --> 00:02:40,546
和登录更加简单


67
00:02:40,966 --> 00:02:42,346
我非常激动 要向你们


68
00:02:42,346 --> 00:02:43,716
演示这些功能


69
00:02:48,156 --> 00:02:49,686
那么我现在要使用 Shiny 这个 App


70
00:02:50,486 --> 00:02:52,886
这是我最喜欢用来


71
00:02:53,236 --> 00:02:56,146
展示帐户创建和再次登录的 App


72
00:02:56,146 --> 00:02:57,806
现在我要开始创建


73
00:02:57,866 --> 00:02:59,486
点击创建帐户


74
00:03:00,436 --> 00:03:02,346
我将停在邮件字段这里


75
00:03:02,346 --> 00:03:03,596
你能看到系统给了我


76
00:03:03,596 --> 00:03:04,856
一个建议的用户名


77
00:03:05,316 --> 00:03:07,286
这是 iOS 12 的一个新功能


78
00:03:08,246 --> 00:03:09,716
这些建议的用户名是


79
00:03:09,716 --> 00:03:11,086
基于用户


80
00:03:11,086 --> 00:03:12,386
已经储存在钥匙串里的


81
00:03:12,386 --> 00:03:13,036
凭证产生的


82
00:03:13,886 --> 00:03:14,816
由于我经常使用


83
00:03:14,816 --> 00:03:16,556
Chelsea@example.com 所以我将


84
00:03:16,556 --> 00:03:18,106
选择它作为我的用户名


85
00:03:18,956 --> 00:03:20,206
不需要任何其他的点击


86
00:03:20,206 --> 00:03:22,116
已经停在了密码字段


87
00:03:22,376 --> 00:03:24,586
系统提供了一个唯一的强密码


88
00:03:25,136 --> 00:03:27,666
同时我也被告知


89
00:03:27,666 --> 00:03:28,646
我随时可以在设置里


90
00:03:28,646 --> 00:03:29,866
查询这个密码


91
00:03:29,866 --> 00:03:31,066
如果我需要将它


92
00:03:31,066 --> 00:03:32,696
输入另一台可以使用 iCloud


93
00:03:32,696 --> 00:03:34,176
钥匙串的设备


94
00:03:34,176 --> 00:03:35,026
同样也可以操作


95
00:03:35,496 --> 00:03:38,046
我将使用这个强密码进行注册


96
00:03:38,956 --> 00:03:40,536
只需轻点几下


97
00:03:40,586 --> 00:03:42,106
我就可以在 Shiny 上重新登录


98
00:03:42,106 --> 00:03:43,666
在 Shiny 这个 App 上注册就完成了


99
00:03:44,796 --> 00:03:46,236
现在 让我们快进所有


100
00:03:46,236 --> 00:03:47,616
其他的帐户创建


101
00:03:47,616 --> 00:03:48,886
我打开了第二个


102
00:03:48,886 --> 00:03:49,776
身份验证


103
00:03:50,296 --> 00:03:51,486
让我们看看登回


104
00:03:51,486 --> 00:03:52,846
Shiny 是什么样子


105
00:03:52,846 --> 00:03:55,796
现在我将点击邮件处


106
00:03:56,696 --> 00:03:57,956
就像你看到的 我刚才


107
00:03:57,956 --> 00:03:59,636
创建的凭证已经出现在


108
00:03:59,636 --> 00:04:01,966
快速输入条上选中它


109
00:04:01,966 --> 00:04:04,586
然后 在面容 ID 出现后


110
00:04:04,586 --> 00:04:05,976
我的密码和用户名已经被填写好


111
00:04:05,976 --> 00:04:06,826
我可以登录了


112
00:04:07,936 --> 00:04:10,246
现在 我已经创建了第二个


113
00:04:10,246 --> 00:04:11,096
身份验证


114
00:04:11,666 --> 00:04:12,806
一般来说 我需要努力去


115
00:04:12,806 --> 00:04:14,906
记住它或者去短信里找


116
00:04:15,166 --> 00:04:16,625
但是就像你看到的


117
00:04:16,625 --> 00:04:18,106
我刚刚收到的


118
00:04:18,106 --> 00:04:19,536
第二重身份验证码已经


119
00:04:19,536 --> 00:04:20,416
在快速输入条里显示了


120
00:04:20,796 --> 00:04:22,536
所以 只需轻点一下 我就能


121
00:04:22,536 --> 00:04:22,956
填入这个验证码


122
00:04:23,156 --> 00:04:25,536
这是不是很了不起


123
00:04:26,508 --> 00:04:28,508
［ 掌声 ］


124
00:04:29,116 --> 00:04:30,336
所以 我可以填入验证码


125
00:04:30,586 --> 00:04:33,136
提交 再一次


126
00:04:33,136 --> 00:04:34,696
使用极少量的轻点


127
00:04:34,696 --> 00:04:36,916
我就又重新登录回了 Shiny


128
00:04:37,206 --> 00:04:39,706
回到展示页面


129
00:04:39,946 --> 00:04:41,836
就像你们看到的


130
00:04:41,836 --> 00:04:43,186
使用自动强密码创建一个帐号


131
00:04:43,186 --> 00:04:45,366
是快速而容易的


132
00:04:45,786 --> 00:04:46,656
我不需要去想密码


133
00:04:46,656 --> 00:04:48,436
因为系统已经提供了一个


134
00:04:48,436 --> 00:04:50,846
并且被输入到了密码字段


135
00:04:52,136 --> 00:04:53,286
同样 当我重新登录回 Shiny 时


136
00:04:53,286 --> 00:04:55,316
我也不需要去想密码


137
00:04:55,826 --> 00:04:57,376
密码已经真正成为了


138
00:04:57,376 --> 00:04:59,186
一个实现细节


139
00:04:59,186 --> 00:05:00,826
当我使用自动强密码和密码自动填充


140
00:05:00,826 --> 00:05:02,746
来登录我的 App 的时候


141
00:05:03,256 --> 00:05:05,976
这里是今天的会议安排


142
00:05:06,476 --> 00:05:07,676
首先 我们将快速


143
00:05:07,676 --> 00:05:09,266
回顾一下密码自动填充


144
00:05:09,656 --> 00:05:11,046
因为我们今天要


145
00:05:11,046 --> 00:05:12,416
讲到的很多功能是基于


146
00:05:12,416 --> 00:05:13,696
这个功能之上的


147
00:05:14,756 --> 00:05:15,986
接下来 我们将谈谈如何


148
00:05:15,986 --> 00:05:17,366
确保自动强密码


149
00:05:17,366 --> 00:05:19,516
在你的 App 上顺利运行


150
00:05:19,816 --> 00:05:21,936
然后 我们将讲到安全码的自动填充


151
00:05:23,046 --> 00:05:24,506
接着 我们将讲到


152
00:05:24,506 --> 00:05:25,496
使用第三方服务进行


153
00:05:25,496 --> 00:05:26,656
联合身份验证


154
00:05:27,696 --> 00:05:28,946
最后 我们将讨论一些


155
00:05:28,946 --> 00:05:30,616
iCloud 密码钥匙串管理器


156
00:05:30,616 --> 00:05:31,276
为我们提供的


157
00:05:31,276 --> 00:05:33,046
新的密码管理功能


158
00:05:33,756 --> 00:05:37,146
在 iOS 11 里我们引入了


159
00:05:37,146 --> 00:05:38,366
App 里的密码自动填充


160
00:05:39,586 --> 00:05:40,806
今天我们将要介绍的


161
00:05:40,806 --> 00:05:42,306
新功能采用


162
00:05:42,306 --> 00:05:43,826
和之前那个功能


163
00:05:43,826 --> 00:05:45,156
一样的方式


164
00:05:45,596 --> 00:05:50,616
密码自动填充帮助用户


165
00:05:50,616 --> 00:05:52,286
登录 App 


166
00:05:52,286 --> 00:05:53,166
只需在快速输入条上


167
00:05:53,166 --> 00:05:53,896
显示登录凭证


168
00:05:54,486 --> 00:05:55,856
这里我们快速地回顾一下


169
00:05:55,856 --> 00:05:56,966
如何确保这个功能在你的 App


170
00:05:57,796 --> 00:05:57,866
上顺利运行


171
00:05:59,496 --> 00:06:02,166
iCloud 钥匙串密码管理器里


172
00:06:02,166 --> 00:06:03,896
的密码是储存在


173
00:06:03,896 --> 00:06:05,256
网页的域名上的


174
00:06:05,456 --> 00:06:06,526
例如 Apple.com


175
00:06:07,356 --> 00:06:08,696
所以 很重要的一点是


176
00:06:08,696 --> 00:06:11,106
将你的 App 和


177
00:06:11,466 --> 00:06:12,466
网页的域名联系起来


178
00:06:13,456 --> 00:06:14,536
这样我们就有信心


179
00:06:14,536 --> 00:06:17,516
在快速输入条上显示登录凭证


180
00:06:18,346 --> 00:06:19,196
你已经有了这项


181
00:06:19,196 --> 00:06:20,686
如果你已经使用了


182
00:06:20,736 --> 00:06:22,396
通用链接或接力


183
00:06:23,116 --> 00:06:25,346
加入这项关联就


184
00:06:25,346 --> 00:06:26,916
非常容易


185
00:06:27,236 --> 00:06:28,686
你需要对你的 App 的


186
00:06:28,686 --> 00:06:30,986
授权文件做一个小的修改


187
00:06:30,986 --> 00:06:32,346
这样你就可以通过


188
00:06:32,346 --> 00:06:33,186
你的网络域名访问文件


189
00:06:34,246 --> 00:06:35,786
如果你希望更加深入地了解


190
00:06:35,786 --> 00:06:37,746
如何对这项关联进行设置


191
00:06:37,746 --> 00:06:39,286
你可以去看看 WWDC 2017 的


192
00:06:39,286 --> 00:06:41,716
App 密码自动填充部分


193
00:06:42,276 --> 00:06:45,426
很重要的一点是


194
00:06:45,426 --> 00:06:46,876
永远将你的字段标记为文本内容类型


195
00:06:46,876 --> 00:06:48,296
这样自动填充就能在


196
00:06:48,296 --> 00:06:49,566
正确的地方显示


197
00:06:50,426 --> 00:06:51,886
将你的用户名字段标记为


198
00:06:51,886 --> 00:06:53,226
用户名内容类型


199
00:06:54,366 --> 00:06:55,916
将用户需要填写


200
00:06:55,916 --> 00:06:58,276
或者已有帐户的密码字段


201
00:06:58,276 --> 00:07:00,986
标记为密码内容类型


202
00:07:02,096 --> 00:07:03,526
如果你选择


203
00:07:03,526 --> 00:07:04,956
不在密码字段使用安全文本输入


204
00:07:04,956 --> 00:07:08,116
那么将你的字段标记为


205
00:07:08,116 --> 00:07:09,086
密码内容类型


206
00:07:09,086 --> 00:07:10,186
就一点尤为重要


207
00:07:10,566 --> 00:07:11,626
这样做 我们会知道我们处在


208
00:07:11,656 --> 00:07:12,586
密码环境中


209
00:07:13,586 --> 00:07:15,306
我们已经讨论了如何


210
00:07:15,306 --> 00:07:16,746
将密码自动填充进


211
00:07:16,746 --> 00:07:18,376
你的 App 下面让我们来讨论


212
00:07:18,376 --> 00:07:19,436
这个功能做了哪些改进


213
00:07:20,976 --> 00:07:23,626
自从 iOS 11.3 以来 


214
00:07:23,626 --> 00:07:25,126
WKWebView 一直支持密码自动填充功能


215
00:07:25,906 --> 00:07:27,236
这将帮到你的用户


216
00:07:27,236 --> 00:07:28,626
如果你的登录界面使用的


217
00:07:28,626 --> 00:07:29,996
是网页技术的话


218
00:07:30,676 --> 00:07:34,316
iOS 12 新的一点在于


219
00:07:34,316 --> 00:07:36,046
App Store 里的密码管理器可以提供


220
00:07:36,046 --> 00:07:37,406
自动填充的内容信息


221
00:07:38,176 --> 00:07:39,896
这意味着你做出的任何


222
00:07:39,896 --> 00:07:41,586
支持 iCloud 钥匙串密码管理器
 
00:07:41,586 --> 00:07:42,856
在你的 App 中


223
00:07:42,856 --> 00:07:44,556
填充密码的工作


224
00:07:44,556 --> 00:07:45,816
都能同样帮助那些使用其他


225
00:07:45,816 --> 00:07:47,276
密码管理器的用户


226
00:07:48,516 --> 00:07:49,656
如果你是一个密码管理器的


227
00:07:49,656 --> 00:07:51,306
开发人员 请参考


228
00:07:51,306 --> 00:07:54,146
自动填充凭证提供程序扩展


229
00:07:56,346 --> 00:07:58,976
在 iOS 12 里当用户以一个


230
00:07:58,976 --> 00:08:00,836
新的账户登录时


231
00:08:00,836 --> 00:08:02,396
我么现在可以提供存储凭证的功能


232
00:08:03,556 --> 00:08:05,166
这样 用户可以


233
00:08:05,166 --> 00:08:06,726
在你的 App 和网页中使用这些凭证


234
00:08:06,726 --> 00:08:09,066
也可以在其他所有设备上


235
00:08:10,206 --> 00:08:11,576
让我们来聊聊如何确保


236
00:08:11,576 --> 00:08:13,186
用户获得在你的 App 中存储以及更新


237
00:08:13,186 --> 00:08:15,226
密码的提示


238
00:08:16,136 --> 00:08:17,646
这就是存储运行的原理


239
00:08:18,386 --> 00:08:19,996
首先 自动填充意味着


240
00:08:19,996 --> 00:08:21,346
我们处在登录场景


241
00:08:22,646 --> 00:08:24,086
然后 自动填充


242
00:08:24,086 --> 00:08:26,106
通过检查你的 App 和网页域名之间


243
00:08:26,106 --> 00:08:27,286
是否有关联来确认


244
00:08:27,286 --> 00:08:29,086
你的 App 的合格性


245
00:08:29,856 --> 00:08:32,046
没有这层关联


246
00:08:32,046 --> 00:08:33,416
密码存储服务将无法提供


247
00:08:33,866 --> 00:08:37,015
接着 它将找到用户名和密码字段


248
00:08:37,015 --> 00:08:38,566
然后才可以确定哪些数据是需要


249
00:08:38,566 --> 00:08:40,476
储存在新凭证里


250
00:08:41,866 --> 00:08:43,246
之后 它能探测到登录


251
00:08:43,326 --> 00:08:44,166
行为的发生


252
00:08:45,266 --> 00:08:47,276
最后 自动填充将决定


253
00:08:47,426 --> 00:08:49,246
是否存储或者更新这个密码


254
00:08:49,246 --> 00:08:51,346
依据是判断这是否是一个


255
00:08:51,536 --> 00:08:52,846
尚未存在在钥匙串里的


256
00:08:52,846 --> 00:08:54,146
全新凭证


257
00:08:54,496 --> 00:08:56,126
或者用户是否正在更新


258
00:08:56,126 --> 00:08:57,136
现有的凭证


259
00:08:57,706 --> 00:09:00,776
现在 这项功能在 iOS 12 环境下


260
00:09:00,776 --> 00:09:02,496
在你的 App 中没有发生变化


261
00:09:02,576 --> 00:09:04,106
但是让我们来聊聊一些你可以采取的步骤


262
00:09:04,106 --> 00:09:05,736
以确保这项功能可以成功运行


263
00:09:06,576 --> 00:09:08,186
首先 请确保将你的字段


264
00:09:08,186 --> 00:09:09,546
标记成为用户名及密码的内容类型


265
00:09:09,546 --> 00:09:11,296
例如 当信号发生时


266
00:09:11,296 --> 00:09:12,316
使用输入密码的时候


267
00:09:13,066 --> 00:09:15,176
请确保将你的


268
00:09:15,176 --> 00:09:16,716
用户名和密码字段


269
00:09:16,716 --> 00:09:18,866
从视图层级移除


270
00:09:19,286 --> 00:09:20,886
这样 自动填充就可以探测到


271
00:09:20,886 --> 00:09:22,146
登录的发生


272
00:09:23,146 --> 00:09:24,496
你可以通过撤销


273
00:09:24,496 --> 00:09:25,806
你的登录字段所在的


274
00:09:25,806 --> 00:09:28,636
视图控制器来实现


275
00:09:28,846 --> 00:09:30,166
请确保仅仅清除


276
00:09:30,166 --> 00:09:31,886
用户名及密码字段


277
00:09:31,886 --> 00:09:33,196
在他们从视图层级


278
00:09:33,196 --> 00:09:34,046
被移除之后


279
00:09:34,436 --> 00:09:35,876
这样 我们能够读取


280
00:09:35,876 --> 00:09:37,716
数据然后将它存储到凭证中


281
00:09:37,716 --> 00:09:41,256
请确保自动填充功能


282
00:09:41,256 --> 00:09:42,776
将凭证存储到正确的域名里


283
00:09:43,176 --> 00:09:44,556
你可以通过将


284
00:09:44,556 --> 00:09:45,946
密码保存在你的 App 里 


285
00:09:45,946 --> 00:09:47,516
然后在设置里核对


286
00:09:47,516 --> 00:09:48,636
凭证存储的地方来进行确认


287
00:09:49,426 --> 00:09:50,786
如果你发现自动填充并没有


288
00:09:50,786 --> 00:09:52,126
存储到正确的域名里


289
00:09:52,126 --> 00:09:53,926
你可以将保存的地方重载


290
00:09:53,926 --> 00:09:55,336
通过使用


291
00:09:55,336 --> 00:09:57,386
与域名服务相关联的网页凭证


292
00:09:58,746 --> 00:10:00,596
最后 当用户登录你的 App 时


293
00:10:00,596 --> 00:10:01,236
你之前可能已经使用了


294
00:10:01,356 --> 00:10:03,046
SecAddSharedWebCredential


295
00:10:03,046 --> 00:10:05,716
来人工存储凭证


296
00:10:06,366 --> 00:10:07,786
但是 既然现在自动填充可以


297
00:10:07,786 --> 00:10:09,776
自动地将用户的


298
00:10:09,776 --> 00:10:12,386
密码存储 你可能就将不再需要它了


299
00:10:13,616 --> 00:10:15,426
你可能仍然希望使用它


300
00:10:15,426 --> 00:10:17,176
如果你的 App 在登录界面


301
00:10:17,176 --> 00:10:19,436
有网络视图


302
00:10:19,436 --> 00:10:20,426
并不支持密码的存储


303
00:10:21,006 --> 00:10:24,396
所以 这就是一些


304
00:10:24,466 --> 00:10:25,736
我们目前为止讨论出的关键步骤


305
00:10:25,736 --> 00:10:26,916
以确保在你的 App 中可以实现


306
00:10:26,916 --> 00:10:28,766
填充和存储密码


307
00:10:29,436 --> 00:10:30,936
请确保将你的 App


308
00:10:30,936 --> 00:10:33,886
与网页域名相关联将你的字节


309
00:10:33,886 --> 00:10:35,916
标记为用户名和密码内容类别


310
00:10:37,256 --> 00:10:39,916
对于存储密码


311
00:10:39,916 --> 00:10:41,636
请确保登录你的 App 时


312
00:10:41,636 --> 00:10:42,826
保存提示符会出现


313
00:10:43,156 --> 00:10:45,406
来保证登录活动被检测到


314
00:10:46,756 --> 00:10:48,086
通过确保密码自动填充


315
00:10:48,086 --> 00:10:49,696
在你的 App 上可以正常运作


316
00:10:49,696 --> 00:10:51,636
你将帮助你的用户简化登录过程


317
00:10:52,326 --> 00:10:55,576
对于新用户来说


318
00:10:55,576 --> 00:10:56,656
他们与你的 App 产生的第一个互动就是


319
00:10:56,656 --> 00:10:58,386
创建一个帐户


320
00:10:59,466 --> 00:11:01,746
在我的演示中你们已经看到


321
00:11:01,746 --> 00:11:02,946
自动强密码如何使这个过程变得


322
00:11:02,946 --> 00:11:04,536
非常简单


323
00:11:05,496 --> 00:11:06,846
我想要邀请 Reza 来到台上


324
00:11:06,846 --> 00:11:08,766
介绍如何确保


325
00:11:08,766 --> 00:11:11,976
自动强密码在你的 App 上运行 谢谢


326
00:11:12,516 --> 00:11:17,500
［ 掌声 ］


327
00:11:18,486 --> 00:11:19,156
>> 谢谢你 Chelsea


328
00:11:20,676 --> 00:11:22,666
大家好 我是 Reza 很兴奋能


329
00:11:22,666 --> 00:11:24,286
向你们介绍所有关于


330
00:11:24,286 --> 00:11:25,676
自动强密码的内容


331
00:11:26,126 --> 00:11:28,846
帐户创建是一个让很多用户


332
00:11:28,896 --> 00:11:30,506
感到沮丧的地方


333
00:11:30,896 --> 00:11:32,206
他们有可能离开你的 App


334
00:11:32,476 --> 00:11:34,326
永不再回来 或者就像他们中很多人做的那样


335
00:11:34,326 --> 00:11:36,376
决定使用一个弱密码或者


336
00:11:36,446 --> 00:11:38,606
重复使用同一个密码


337
00:11:39,316 --> 00:11:42,076
这样做极大地削弱了他们帐户的安全性


338
00:11:43,056 --> 00:11:44,156
虽然 这可能是一种创建帐户的


339
00:11:44,156 --> 00:11:46,656
替代方法


340
00:11:46,856 --> 00:11:48,446
你们当中有些人对


341
00:11:48,446 --> 00:11:51,176
在登录帐户时


342
00:11:51,176 --> 00:11:55,256
允许使用社交媒体有所疑虑


343
00:11:55,506 --> 00:11:57,496
自动强密码


344
00:11:57,496 --> 00:11:59,186
使得帐户创建变得很简单


345
00:11:59,546 --> 00:12:01,416
它为注册的过程


346
00:12:01,486 --> 00:12:03,396
带来了便捷性与安全性


347
00:12:04,016 --> 00:12:05,646
用户不需要思考或者


348
00:12:05,646 --> 00:12:07,446
担心密码


349
00:12:08,556 --> 00:12:10,616
自动填充甚至为用户名提供建议


350
00:12:10,716 --> 00:12:12,046
以此来简化注册流程


351
00:12:12,926 --> 00:12:14,466
用了自动强密码


352
00:12:14,686 --> 00:12:16,956
帐户创建只需几下轻点而已


353
00:12:17,316 --> 00:12:18,836
这样 用户将更倾向于


354
00:12:18,836 --> 00:12:20,436
注册及使用你的服务


355
00:12:21,066 --> 00:12:23,446
现在 我将谈谈


356
00:12:23,446 --> 00:12:25,326
自动强密码是如何运行的


357
00:12:25,856 --> 00:12:28,506
与 Chelsea 在


358
00:12:28,506 --> 00:12:30,346
登录场景下的解释十分类似


359
00:12:31,126 --> 00:12:32,476
当你的 App 显示一个视图控制器时


360
00:12:32,476 --> 00:12:34,586
自动填充就会推断它的类型


361
00:12:34,866 --> 00:12:36,966
这种情况下 它是一个注册视图控制器


362
00:12:38,436 --> 00:12:42,486
它将检查你的资格


363
00:12:42,486 --> 00:12:43,926
检查你的 App 的资格


364
00:12:43,956 --> 00:12:46,326
基于被关联的域名


365
00:12:46,326 --> 00:12:49,056
以此来判断是否能够存储密码


366
00:12:49,196 --> 00:12:51,346
如果是这样的话


367
00:12:51,346 --> 00:12:53,776
自动填充将检测相关的


368
00:12:53,816 --> 00:12:58,436
注册表格元素 用户名及密码


369
00:12:58,566 --> 00:13:00,206
一旦用户名字段成为第一响应者


370
00:13:00,306 --> 00:13:02,616
自动填充便会提供


371
00:13:02,616 --> 00:13:03,706
建议用户名


372
00:13:04,416 --> 00:13:05,436
这是我们在 iOS 12 里加入的


373
00:13:05,436 --> 00:13:06,466
一个新功能


374
00:13:07,456 --> 00:13:08,886
用户可以使用


375
00:13:08,936 --> 00:13:10,046
建议的用户名


376
00:13:10,996 --> 00:13:12,306
最终 密码字段


377
00:13:12,356 --> 00:13:13,976
成为第一响应者


378
00:13:14,626 --> 00:13:16,346
自动填充将自动地


379
00:13:16,346 --> 00:13:17,476
将一个强密码填入


380
00:13:17,476 --> 00:13:18,206
密码字段


381
00:13:18,846 --> 00:13:20,636
到此为止 用户只需要


382
00:13:20,636 --> 00:13:21,646
使用建议的密码


383
00:13:21,686 --> 00:13:23,096
然后注册


384
00:13:24,196 --> 00:13:26,176
自动填充会负责存储密码


385
00:13:27,536 --> 00:13:29,246
在很多情况下


386
00:13:29,246 --> 00:13:30,896
存储会自动进行


387
00:13:30,896 --> 00:13:32,556
而不需要在你的 App 上出现采用要求


388
00:13:33,086 --> 00:13:35,546
但是 为了确保你的


389
00:13:35,546 --> 00:13:36,816
App 和自动强密码的兼容性


390
00:13:36,816 --> 00:13:39,016
这里有些需要你


391
00:13:39,016 --> 00:13:42,956
完成的步骤


392
00:13:43,176 --> 00:13:44,536
其中很多步骤和


393
00:13:44,536 --> 00:13:46,156
Chelsea 提到的


394
00:13:46,156 --> 00:13:47,436
为了保证你的 App 与存储功能兼容


395
00:13:47,516 --> 00:13:49,256
需要采取的步骤相同


396
00:13:52,046 --> 00:13:53,596
确保将你的用户名字段


397
00:13:53,596 --> 00:13:56,186
标记为 UITextContentType username


398
00:13:57,406 --> 00:13:59,806
iOS 12 的新增内容是 确保将你的


399
00:13:59,806 --> 00:14:01,606
新密码字段以及确认新密码字段


400
00:14:01,606 --> 00:14:04,926
标记为 UITextContentType newPassword


401
00:14:05,536 --> 00:14:08,616
如果你在使用 UITableView 来


402
00:14:08,616 --> 00:14:10,236
显示你的注册表格


403
00:14:11,046 --> 00:14:12,546
确保在用户名及密码字段处


404
00:14:12,546 --> 00:14:16,346
使用唯一的 UITextField 实例


405
00:14:17,006 --> 00:14:18,606
这很重要 因为一旦


406
00:14:18,606 --> 00:14:20,626
自动填充探测到了用户名及


407
00:14:20,626 --> 00:14:22,456
密码字段 它的预期是


408
00:14:22,456 --> 00:14:24,226
能够在后期可靠地


409
00:14:24,226 --> 00:14:25,946
读取他们的值


410
00:14:26,916 --> 00:14:28,516
你们当中有些人在你的


411
00:14:28,516 --> 00:14:29,756
App 中修改密码表格


412
00:14:30,636 --> 00:14:32,316
自动强密码在


413
00:14:32,346 --> 00:14:33,996
自动填充能够


414
00:14:33,996 --> 00:14:35,676
在同一个屏幕上


415
00:14:35,676 --> 00:14:37,396
探测到用户名字段和密码字段的情况下


416
00:14:37,396 --> 00:14:40,976
与修改密码表格兼容


417
00:14:41,076 --> 00:14:42,916
请注意 用户名字段为只读


418
00:14:44,266 --> 00:14:45,846
我们刚才讨论过的


419
00:14:45,846 --> 00:14:47,816
对于注册表格的最佳做法 同样也适用于


420
00:14:47,816 --> 00:14:48,796
修改密码表格


421
00:14:49,176 --> 00:14:52,976
现在 让我们花点时间来


422
00:14:52,976 --> 00:14:55,546
谈谈这些生成密码的格式


423
00:14:59,176 --> 00:15:01,556
生成的密码的长度有 20 个字节


424
00:15:02,496 --> 00:15:05,516
他们包含了大写字母 数字


425
00:15:06,846 --> 00:15:09,566
连字符和小写字母


426
00:15:10,756 --> 00:15:12,356
这将使你的强密码


427
00:15:12,356 --> 00:15:14,406
拥有大于71位的熵


428
00:15:15,636 --> 00:15:17,386
我们将它设计成很强


429
00:15:17,386 --> 00:15:19,276
但是可以与大部分服务兼容的密码


430
00:15:19,426 --> 00:15:22,526
这当然也能够


431
00:15:22,526 --> 00:15:24,246
让你们的 App 定义他们自己的


432
00:15:24,246 --> 00:15:25,276
自定义密码规则


433
00:15:26,546 --> 00:15:28,746
就像我之前提到的那样


434
00:15:28,746 --> 00:15:30,096
大部分情况下你不需要这样做


435
00:15:30,266 --> 00:15:31,526
因为自动强密码的


436
00:15:31,526 --> 00:15:33,896
默认格式是有兼容性的


437
00:15:34,616 --> 00:15:36,846
但是 如果你 App 的后端


438
00:15:36,846 --> 00:15:38,556
需要单独的一套


439
00:15:38,556 --> 00:15:40,216
不与自动强密码默认格式


440
00:15:40,216 --> 00:15:41,586
兼容的规制


441
00:15:41,586 --> 00:15:43,136
那么你可以自己


442
00:15:43,136 --> 00:15:44,196
定义自己的规则


443
00:15:45,396 --> 00:15:47,526
如需这样做 请使用


444
00:15:47,526 --> 00:15:49,496
iOS 12 里的新密码规则语言


445
00:15:50,676 --> 00:15:51,936
根据密码规则语言


446
00:15:51,936 --> 00:15:54,936
创建一个 rulesDescriptor


447
00:15:55,446 --> 00:15:57,856
使用 rulesDescriptor


448
00:15:57,856 --> 00:16:01,506
创建一个 UITextInputPasswordRules 实例


449
00:16:01,506 --> 00:16:02,816
然后将它传递给


450
00:16:02,866 --> 00:16:04,236
UITextField 的密码规则属性


451
00:16:04,726 --> 00:16:06,976
只要你这样做了


452
00:16:06,976 --> 00:16:08,516
自动强密码将在这些规则的基础上


453
00:16:08,566 --> 00:16:10,056
生成密码


454
00:16:10,736 --> 00:16:13,516
我们也创造了一个新的


455
00:16:13,516 --> 00:16:14,816
基于网页的密码规则的


456
00:16:14,816 --> 00:16:15,606
验证工具


457
00:16:16,716 --> 00:16:18,466
用这个工具可确保


458
00:16:18,466 --> 00:16:19,856
你制定的规则是正确的


459
00:16:19,856 --> 00:16:22,196
并且能生成你所需要的那种


460
00:16:22,196 --> 00:16:23,466
密码类型


461
00:16:23,966 --> 00:16:25,436
我一会儿将多谈谈这个


462
00:16:25,436 --> 00:16:30,356
现在 我们已经讲了


463
00:16:30,466 --> 00:16:32,306
确保你的 App 与


464
00:16:32,306 --> 00:16:33,886
自动强密码兼容的步骤


465
00:16:33,886 --> 00:16:35,596
我想给大家


466
00:16:35,596 --> 00:16:36,306
做一个演示


467
00:16:36,956 --> 00:16:39,806
我是 Shiny App 的开发人员


468
00:16:39,806 --> 00:16:41,126
我想确定


469
00:16:41,126 --> 00:16:42,526
Shiny 是够可以与


470
00:16:42,526 --> 00:16:44,706
iOS 12 里的自动强密码兼容的


471
00:16:45,326 --> 00:16:47,386
所以 我需要做的第一件事是


472
00:16:47,386 --> 00:16:49,616
使用 iOS 12 SDK 来运行 Shiny


473
00:16:49,616 --> 00:16:50,856
然后试试看


474
00:16:51,696 --> 00:16:57,666
所以在 Xcode 里我将点击运行


475
00:16:57,846 --> 00:16:58,916
这里就是 Shiny


476
00:16:59,586 --> 00:17:02,916
我将轻点创建帐户 轻点邮件


477
00:17:02,916 --> 00:17:06,126
我没有看到任何建议用户名


478
00:17:07,026 --> 00:17:08,606
当我轻点密码字段时


479
00:17:08,606 --> 00:17:10,236
我也没有看到任何自动强密码


480
00:17:10,236 --> 00:17:11,406
的建议出现


481
00:17:11,726 --> 00:17:13,465
所以让我们回到 Xcode 然后


482
00:17:13,465 --> 00:17:14,526
进一步研究它


483
00:17:14,636 --> 00:17:20,306
第一件事是确保


484
00:17:20,306 --> 00:17:22,816
你的 App 已经与域名相关联


485
00:17:23,536 --> 00:17:25,136
在这里 我已经


486
00:17:25,136 --> 00:17:26,576
确认 Shiny 与


487
00:17:26,576 --> 00:17:27,536
域名进行了关联


488
00:17:27,816 --> 00:17:30,046
事实上 今天早些时候


489
00:17:30,046 --> 00:17:31,866
当我想登录 Shiny 的时候


490
00:17:31,866 --> 00:17:33,476
我可以得到自动填充建议


491
00:17:34,496 --> 00:17:37,666
下一步 你需要看看


492
00:17:37,666 --> 00:17:39,036
你需要仔细观察


493
00:17:39,036 --> 00:17:40,286
你的注册视图控制器


494
00:17:40,856 --> 00:17:44,326
我将点击邮件字段处


495
00:17:46,166 --> 00:17:49,266
在这里 在 Text Input Traits 下面


496
00:17:49,266 --> 00:17:51,286
内容类型 


497
00:17:51,286 --> 00:17:52,706
我看到我正确地设置了用户名的


498
00:17:52,706 --> 00:17:53,966
内容类型


499
00:17:55,266 --> 00:17:57,586
因为我希望


500
00:17:57,586 --> 00:17:58,906
用户名的格式是


501
00:17:58,906 --> 00:18:00,876
电子邮件地址


502
00:18:00,876 --> 00:18:02,316
我同样正确地将键盘类型


503
00:18:02,316 --> 00:18:03,466
设置为电子邮件


504
00:18:03,796 --> 00:18:04,476
好的 这样很好


505
00:18:05,006 --> 00:18:06,826
我们仔细看看密码字段


506
00:18:06,826 --> 00:18:11,236
我能看到的内容类型


507
00:18:11,276 --> 00:18:12,406
是非指定的


508
00:18:12,496 --> 00:18:15,526
事实上 这应当被设为新密码


509
00:18:16,396 --> 00:18:19,846
所以 在这里我将选择新密码


510
00:18:22,586 --> 00:18:24,986
同时因为这里是密码字段


511
00:18:25,046 --> 00:18:26,366
我将把它标记为


512
00:18:26,446 --> 00:18:27,436
安全文本输入


513
00:18:30,516 --> 00:18:31,246
好了


514
00:18:31,246 --> 00:18:33,176
让我们再次尝试运行


515
00:18:33,876 --> 00:18:34,226
Shiny 我来试一下


516
00:18:38,686 --> 00:18:40,976
好了 点击创建帐户


517
00:18:41,696 --> 00:18:42,476
点击邮件


518
00:18:42,816 --> 00:18:44,536
这里 现在我能看到我得到了


519
00:18:44,596 --> 00:18:45,836
建议用户名


520
00:18:46,296 --> 00:18:47,046
我将继续


521
00:18:47,046 --> 00:18:48,616
通过使用建议用户名进行操作


522
00:18:49,116 --> 00:18:50,776
我同样看到


523
00:18:50,776 --> 00:18:51,276
自动强密码


524
00:18:51,906 --> 00:18:53,506
所以 在大多数情况下 这样就够了


525
00:18:53,506 --> 00:18:54,876
你已经做完要做的事了


526
00:18:55,356 --> 00:18:57,466
让我们进行注册环节


527
00:19:00,146 --> 00:19:01,616
这个演示的目的


528
00:19:02,096 --> 00:19:04,506
是要求 Shiny 密码中


529
00:19:04,506 --> 00:19:05,596
包含有一个美元符号


530
00:19:06,386 --> 00:19:07,676
这意味着我们需要


531
00:19:07,676 --> 00:19:09,696
专门为自动强密码


532
00:19:09,696 --> 00:19:11,586
指定自定义密码规则


533
00:19:12,116 --> 00:19:13,426
事实上 最佳的方式是


534
00:19:13,426 --> 00:19:15,426
使用新密码规则


535
00:19:15,426 --> 00:19:16,526
验证工具


536
00:19:17,006 --> 00:19:19,106
通过使用这个工具 我能够


537
00:19:19,106 --> 00:19:21,156
明确正确的密码规则


538
00:19:21,156 --> 00:19:22,866
同时 确保规则


539
00:19:23,256 --> 00:19:24,736
将生成我希望的


540
00:19:24,736 --> 00:19:25,796
那种类型的密码


541
00:19:26,346 --> 00:19:28,246
所以 让我们直接进入


542
00:19:28,816 --> 00:19:30,436
这是一个新的密码规则


543
00:19:30,436 --> 00:19:31,776
验证工具你


544
00:19:31,776 --> 00:19:35,876
可以从 developer.apple.com. 上找到


545
00:19:36,076 --> 00:19:37,406
在这个演示里


546
00:19:37,976 --> 00:19:39,216
我将允许


547
00:19:39,856 --> 00:19:43,116
小写字母 数字 并且要求


548
00:19:43,116 --> 00:19:44,576
至少一个美元符号


549
00:19:44,576 --> 00:19:46,116
出现在我的密码里


550
00:19:46,676 --> 00:19:50,066
在这一页的底部


551
00:19:50,066 --> 00:19:51,846
我能看的一些密码的例子


552
00:19:51,846 --> 00:19:52,446
已经生成


553
00:19:53,236 --> 00:19:54,506
我同样也可以


554
00:19:54,506 --> 00:19:55,776
下载其中一些密码


555
00:19:55,826 --> 00:19:58,126
以便我需要


556
00:19:58,126 --> 00:19:59,936
在我的 App 后端运行一些测试


557
00:20:01,336 --> 00:20:02,646
一旦我对


558
00:20:02,646 --> 00:20:05,796
密码的格式已经满意


559
00:20:05,796 --> 00:20:06,596
我有两个选项


560
00:20:07,446 --> 00:20:09,116
如果我为 UIKit 做一个本地 App


561
00:20:09,116 --> 00:20:11,846
那么我可以


562
00:20:11,846 --> 00:20:13,606
为 UIKit 复制规则格式


563
00:20:13,856 --> 00:20:16,636
或者我可以制作一个我能够


564
00:20:16,636 --> 00:20:19,526
复制 HTML 格式化规则的网页


565
00:20:20,986 --> 00:20:23,416
在这个展示中 因为我们已经


566
00:20:23,416 --> 00:20:24,986
为 UIKit 做了一个本地 App


567
00:20:25,176 --> 00:20:26,286
我将继续复制


568
00:20:26,286 --> 00:20:27,866
UIKit 版本


569
00:20:30,226 --> 00:20:32,336
因为我已经完成复制


570
00:20:32,336 --> 00:20:35,246
我需要做的就是回到 Xcode


571
00:20:36,566 --> 00:20:39,756
选择密码 然后粘贴到


572
00:20:39,756 --> 00:20:42,616
在密码规则的


573
00:20:42,756 --> 00:20:43,566
文本字段里


574
00:20:45,356 --> 00:20:47,926
现在 让我们再次运行 Shiny


575
00:20:52,806 --> 00:20:55,866
好了 我将要点击创建帐户


576
00:20:55,866 --> 00:20:59,616
点击它 我将使用


577
00:20:59,616 --> 00:21:01,196
建议的用户名称继续操作


578
00:21:01,196 --> 00:21:03,796
现在 密码


579
00:21:03,796 --> 00:21:06,656
应当和我指定的规则兼容


580
00:21:06,876 --> 00:21:10,546
让我们运行注册


581
00:21:10,686 --> 00:21:12,000
就像这样 我注册进入了


582
00:21:13,508 --> 00:21:16,996
［ 掌声 ］谢谢大家


583
00:21:19,446 --> 00:21:21,206
我们刚刚看到


584
00:21:21,206 --> 00:21:22,826
让你的 App 与自动强密码兼容


585
00:21:22,826 --> 00:21:24,266
有多么容易


586
00:21:26,146 --> 00:21:26,846
>> 谢谢你 Reza


587
00:21:27,796 --> 00:21:29,186
就像 Reza 向你们展示的那样 


588
00:21:29,186 --> 00:21:30,386
这些是可以让


589
00:21:30,386 --> 00:21:31,706
自动强密码在


590
00:21:31,706 --> 00:21:32,986
你的 App 上运行的步骤


591
00:21:33,996 --> 00:21:35,696
确保将你的 App


592
00:21:35,696 --> 00:21:37,266
与网页的域名相关联


593
00:21:37,266 --> 00:21:38,876
就像填写和保存密码一样


594
00:21:40,246 --> 00:21:41,456
确保将你的字段标记为


595
00:21:41,456 --> 00:21:42,816
用户名和


596
00:21:42,816 --> 00:21:44,406
新密码内容类型


597
00:21:44,876 --> 00:21:48,276
通过检查你在


598
00:21:48,406 --> 00:21:50,116
注册时你的密码是否在 App 中存储


599
00:21:50,116 --> 00:21:52,076
以确认注册行为被探测到与否


600
00:21:53,296 --> 00:21:55,086
做完这三件事


601
00:21:55,086 --> 00:21:56,496
你们中的大多数人的工作就结束了


602
00:21:57,056 --> 00:21:58,836
但是 如果你的服务与


603
00:21:58,836 --> 00:22:00,636
Apple 的密码生成表格不兼容


604
00:22:00,636 --> 00:22:02,806
那么你可能希望


605
00:22:02,846 --> 00:22:04,366
在你的密码文本字段中


606
00:22:04,366 --> 00:22:05,536
使用一些密码规则


607
00:22:05,576 --> 00:22:07,046
以此来确保自动强密码


608
00:22:07,046 --> 00:22:09,596
能够生成兼容的密码


609
00:22:12,276 --> 00:22:13,966
通过确保


610
00:22:13,966 --> 00:22:15,336
自动强密码在


611
00:22:15,336 --> 00:22:16,586
你的 App 上运行顺利


612
00:22:16,586 --> 00:22:18,076
你将成功地鼓励用户


613
00:22:18,076 --> 00:22:19,946
在你的 App 上使用


614
00:22:19,946 --> 00:22:21,986
特殊强密码


615
00:22:22,996 --> 00:22:24,906
你们中有些人的 App 和服务


616
00:22:24,906 --> 00:22:28,466
可能在使用 SMS 或者


617
00:22:28,526 --> 00:22:30,326
将安全码通过 SMS 传给你的用户


618
00:22:31,496 --> 00:22:32,866
我将邀请 Harris 上台


619
00:22:32,866 --> 00:22:34,366
介绍你能如何


620
00:22:34,366 --> 00:22:35,896
将这些代码用到


621
00:22:35,896 --> 00:22:36,846
你的 App 中


622
00:22:37,516 --> 00:22:42,206
［ 掌声 ］


623
00:22:42,706 --> 00:22:43,046
>> 太好了


624
00:22:43,226 --> 00:22:44,346
非常感谢 Chelsea


625
00:22:45,166 --> 00:22:48,876
大家好 我的名字是 Harris


626
00:22:48,876 --> 00:22:50,016
非常高兴能向你们


627
00:22:50,016 --> 00:22:51,096
介绍安全码自动填充


628
00:22:52,226 --> 00:22:53,606
但是首先 这个部分需要


629
00:22:53,606 --> 00:22:55,186
一点听众的参与


630
00:22:55,556 --> 00:22:57,846
好的 你们中有多少人


631
00:22:57,846 --> 00:22:59,016
曾经收到过


632
00:22:59,016 --> 00:23:00,176
看起来像这样的短信息 


633
00:23:00,176 --> 00:23:00,716
请举手


634
00:23:01,236 --> 00:23:02,706
好的


635
00:23:02,966 --> 00:23:04,506
我想可以说


636
00:23:04,506 --> 00:23:05,746
目前我们中的大多数都


637
00:23:05,746 --> 00:23:07,956
常常需要与这些验证码打交道


638
00:23:08,886 --> 00:23:09,216
好了


639
00:23:09,216 --> 00:23:10,776
第二个问题


640
00:23:10,776 --> 00:23:11,666
收到这样的短信之后


641
00:23:11,666 --> 00:23:13,516
你们中多少人会


642
00:23:13,516 --> 00:23:14,726
经历像这样的过程


643
00:23:15,466 --> 00:23:16,206
你以为你已经


644
00:23:16,206 --> 00:23:18,296
记住了安全码 你将它输入


645
00:23:18,936 --> 00:23:20,256
你将最后两个数字输入反了


646
00:23:20,256 --> 00:23:21,896
然后你需要


647
00:23:21,896 --> 00:23:22,596
重新做一遍这个流程


648
00:23:23,046 --> 00:23:24,516
让我们看看举手的人数


649
00:23:26,536 --> 00:23:27,146
好的


650
00:23:27,786 --> 00:23:28,676
最后一个问题


651
00:23:29,896 --> 00:23:30,786
在经过这个过程之后


652
00:23:30,786 --> 00:23:33,076
你们中多少人会


653
00:23:33,076 --> 00:23:34,826
有这样的感受


654
00:23:36,856 --> 00:23:38,086
好的


655
00:23:38,086 --> 00:23:40,106
让我来告诉你


656
00:23:40,106 --> 00:23:40,976
你不需要这样


657
00:23:41,516 --> 00:23:43,586
因为从 iOS 12 和 macOS Mojave 开始


658
00:23:43,586 --> 00:23:45,776
我们引进了


659
00:23:45,956 --> 00:23:47,206
安全码自动填充


660
00:23:47,876 --> 00:23:49,836
一个全新的功能


661
00:23:50,066 --> 00:23:52,076
可以带走所有


662
00:23:52,076 --> 00:23:53,886
基于短信的二次验证流程带来的


663
00:23:53,886 --> 00:23:54,336
痛苦和失望


664
00:23:54,896 --> 00:23:57,876
现在 很重要的一点是注意到


665
00:23:58,286 --> 00:24:00,036
安全码自动填充


666
00:24:00,036 --> 00:24:01,716
不会改变


667
00:24:01,716 --> 00:24:03,646
二次验证的安全性积分方式


668
00:24:04,556 --> 00:24:06,556
它做的仅仅是移除


669
00:24:06,556 --> 00:24:08,196
在计算机时代需要


670
00:24:08,316 --> 00:24:11,196
自己动手填写安全码的羞辱感


671
00:24:12,236 --> 00:24:14,756
仅仅是这样而已


672
00:24:15,516 --> 00:24:18,926
［ 掌声 ］


673
00:24:19,426 --> 00:24:22,216
好了 从新的 iOS 以及 macOS 开始


674
00:24:22,216 --> 00:24:24,646
你可以这样做而不是


675
00:24:24,646 --> 00:24:27,656
训练你的记忆力


676
00:24:28,726 --> 00:24:30,396
只需轻点


677
00:24:30,396 --> 00:24:32,746
快速输入条 你就成功进行了注册


678
00:24:34,016 --> 00:24:35,606
希望在此过程结束的时候


679
00:24:35,606 --> 00:24:37,636
你们能有一点


680
00:24:37,636 --> 00:24:39,656
这样的感受


681
00:24:40,436 --> 00:24:41,916
好了 让我们来谈谈一些


682
00:24:41,916 --> 00:24:42,806
技术细节


683
00:24:44,156 --> 00:24:45,526
和其他自动填充一起


684
00:24:45,896 --> 00:24:47,506
你的 App 里的安全码自动填充


685
00:24:47,506 --> 00:24:48,886
可以立即使用


686
00:24:48,886 --> 00:24:50,206
这是在大多数情况下


687
00:24:51,456 --> 00:24:53,286
当然 你也可以做一点微小的工作


688
00:24:53,286 --> 00:24:55,876
来确保安全码自动填充


689
00:24:56,006 --> 00:24:56,886
每一次都能成功


690
00:24:57,436 --> 00:25:00,306
我们在你标记你的字段之前


691
00:25:00,346 --> 00:25:01,266
已经告知过你这些


692
00:25:02,026 --> 00:25:03,736
在 iOS 12 里我们引进了一种


693
00:25:03,736 --> 00:25:05,956
值为 oneTimeCode 的


694
00:25:05,956 --> 00:25:07,576
新的 UITextContentType


695
00:25:08,756 --> 00:25:10,016
将你的安全码字段标记为


696
00:25:10,016 --> 00:25:11,646
这个 安全码自动填充


697
00:25:11,646 --> 00:25:15,876
将能每次都成功运行


698
00:25:15,876 --> 00:25:17,586
另外 很重要的是


699
00:25:17,586 --> 00:25:19,096
你需要允许


700
00:25:19,096 --> 00:25:20,476
系统键盘


701
00:25:20,476 --> 00:25:21,546
输入这些安全码


702
00:25:22,426 --> 00:25:23,836
尽管你可能


703
00:25:23,836 --> 00:25:24,956
需要避免


704
00:25:24,956 --> 00:25:26,766
在视图图层构建编写


705
00:25:26,766 --> 00:25:28,986
键盘 UI 或者在你的控制器中


706
00:25:28,986 --> 00:25:30,786
设置自定义输入视图


707
00:25:31,186 --> 00:25:32,716
因为如果你这样做了


708
00:25:32,716 --> 00:25:34,616
你将使得 iOS 无法呈现


709
00:25:34,616 --> 00:25:36,776
必须的 UI 而且


710
00:25:36,776 --> 00:25:38,186
无法引入适合的活动来


711
00:25:38,186 --> 00:25:39,886
代表你的用户将安全码填入


712
00:25:40,416 --> 00:25:42,096
此外 你可能


713
00:25:42,096 --> 00:25:43,196
妨碍了那些


714
00:25:43,196 --> 00:25:44,126
需要使用


715
00:25:44,126 --> 00:25:46,066
例如旁白功能的可访问性技术的人


716
00:25:46,626 --> 00:25:49,116
所以 这里的底线是让


717
00:25:49,116 --> 00:25:50,496
系统键盘为你做这些繁重的工作


718
00:25:50,496 --> 00:25:52,186
然后安全码自动填充


719
00:25:52,186 --> 00:25:53,766
将会每次都能


720
00:25:53,766 --> 00:25:54,116
成功运行


721
00:25:54,726 --> 00:25:58,116
另一个能


722
00:25:58,496 --> 00:25:59,736
确保安全码自动填充


723
00:25:59,736 --> 00:26:01,026
在你的服务中良好运作的步骤是


724
00:26:01,026 --> 00:26:03,896
相应地设计你的信息


725
00:26:04,906 --> 00:26:07,506
iOS 和 macOS 使用


726
00:26:07,506 --> 00:26:09,026
数据探测程序来推断


727
00:26:09,026 --> 00:26:11,506
一个进来的信息携带了一个安全码


728
00:26:12,266 --> 00:26:14,346
特别是 我们的探测程序是会


729
00:26:14,346 --> 00:26:16,256
寻找像验证码或者


730
00:26:16,256 --> 00:26:19,106
接近真正代码串的密码


731
00:26:19,716 --> 00:26:21,266
你们可以在我身后的


732
00:26:21,266 --> 00:26:22,946
幻灯片中看到一些


733
00:26:22,946 --> 00:26:24,316
不同语言的消息


734
00:26:25,616 --> 00:26:27,976
现在 验证


735
00:26:28,146 --> 00:26:29,456
你精心制作的信息否能


736
00:26:29,536 --> 00:26:30,986
正确地触发 iOS 以及 macOS


737
00:26:30,986 --> 00:26:32,706
的探试程序是非常容易的


738
00:26:33,476 --> 00:26:34,906
你可以自己独立完成


739
00:26:35,026 --> 00:26:36,266
直接给自己发送信息


740
00:26:36,916 --> 00:26:38,116
然后 当你去到


741
00:26:38,116 --> 00:26:39,916
消息副本你会看到


742
00:26:39,916 --> 00:26:41,586
安全码被加了下划线 然后


743
00:26:41,586 --> 00:26:42,926
轻点它 它向你提供了一个


744
00:26:42,926 --> 00:26:44,876
复制验证码选项


745
00:26:45,066 --> 00:26:47,946
你知道你做对了


746
00:26:48,146 --> 00:26:49,816
安全码自动填充


747
00:26:49,816 --> 00:26:51,256
在所有 iOS 和 macOS 受支持的地区


748
00:26:51,256 --> 00:26:53,136
都可以使用


749
00:26:53,586 --> 00:26:55,706
如果在跟随这些


750
00:26:55,706 --> 00:26:57,226
最佳实践后你发现


751
00:26:57,226 --> 00:26:58,566
你不能使安全码


752
00:26:58,566 --> 00:26:59,466
在你的 App 或者网页上


753
00:26:59,466 --> 00:27:01,016
正确地触发


754
00:27:01,056 --> 00:27:02,856
请通过填写错误报告


755
00:27:02,856 --> 00:27:04,336
让我们得知


756
00:27:04,796 --> 00:27:07,766
我们将留意它们


757
00:27:07,966 --> 00:27:10,786
好了 目前为止我们讨论了


758
00:27:10,786 --> 00:27:12,096
在你的本地 iOS App 上


759
00:27:12,096 --> 00:27:15,736
获得安全码自动填充


760
00:27:16,416 --> 00:27:18,266
安全码自动填充同样


761
00:27:18,266 --> 00:27:20,556
能在 iOS Safari


762
00:27:20,556 --> 00:27:23,166
网页上工作 这很酷


763
00:27:23,166 --> 00:27:25,556
如果你的用户


764
00:27:25,556 --> 00:27:27,366
用他们 Mac 上的 Safari 登录你的服务


765
00:27:27,366 --> 00:27:28,946
那么信息将


766
00:27:28,946 --> 00:27:30,336
从他们的 iPhone 安全地


767
00:27:30,336 --> 00:27:31,666
将进来的信息推送


768
00:27:31,736 --> 00:27:32,636
到他们的 Mac 上


769
00:27:32,886 --> 00:27:34,096
现在这意味着


770
00:27:34,096 --> 00:27:35,566
他们可以通过


771
00:27:35,696 --> 00:27:37,126
点击 Safari 上的完成 UI 来


772
00:27:37,126 --> 00:27:37,946
填写安全码


773
00:27:38,186 --> 00:27:39,216
你不再需要转换回


774
00:27:39,216 --> 00:27:42,346
信息去将安全码复制出来 你懂的


775
00:27:42,346 --> 00:27:43,676
或者穿越你的整个家来寻找你的 iPhone


776
00:27:43,676 --> 00:27:50,500
这很酷［ 掌声 ］


777
00:27:51,296 --> 00:27:52,906
为了在 Safari 上支持


778
00:27:52,906 --> 00:27:54,776
安全码自动填充


779
00:27:54,776 --> 00:27:56,226
我们引入了一个新的


780
00:27:56,226 --> 00:27:57,926
input AutoComplete Attribute Value


781
00:27:58,426 --> 00:27:59,216
一次性验证码


782
00:28:00,226 --> 00:28:02,516
事实上 今天你所有听到的


783
00:28:02,516 --> 00:28:03,706
UI 文本内容类型


784
00:28:03,706 --> 00:28:05,866
都有对应的网络平台


785
00:28:05,866 --> 00:28:06,966
你可以用来


786
00:28:06,966 --> 00:28:08,926
确保在网页上


787
00:28:09,126 --> 00:28:11,196
自动填充体验可以无缝衔接


788
00:28:11,196 --> 00:28:12,956
就如同在


789
00:28:12,956 --> 00:28:13,556
你的 App 里一样


790
00:28:14,596 --> 00:28:16,046
你以前可能听说过这个


791
00:28:16,046 --> 00:28:17,566
但是这次标记你的表格字段


792
00:28:17,566 --> 00:28:19,416
自动填充将每次都能很好地运行


793
00:28:19,986 --> 00:28:22,666
好了 这就是


794
00:28:22,666 --> 00:28:24,366
一个对安全码自动填充的简介 


795
00:28:24,366 --> 00:28:26,046
一个在 iOS 12


796
00:28:26,046 --> 00:28:28,596
以及 macOS Mojave 里全新增加的


797
00:28:28,596 --> 00:28:30,196
将所有由信息二次验证流程带来的


798
00:28:30,196 --> 00:28:32,976
痛苦和失望都带走的功能


799
00:28:36,206 --> 00:28:37,846
现在 使用我们今天介绍的


800
00:28:37,846 --> 00:28:39,426
自动填充功能


801
00:28:39,426 --> 00:28:41,456
与你的用户


802
00:28:41,456 --> 00:28:42,996
建立关系的同时


803
00:28:42,996 --> 00:28:44,776
保护他们的安全以及


804
00:28:44,776 --> 00:28:46,996
尊重他们的隐私变得十分容易


805
00:28:48,276 --> 00:28:50,636
当然 你们中的有些人可能发现了


806
00:28:50,636 --> 00:28:52,246
你可能需要支持


807
00:28:52,246 --> 00:28:53,766
第三方供应商的联合身份验证


808
00:28:53,766 --> 00:28:55,546
例如一些很流行的


809
00:28:55,546 --> 00:28:56,476
社交网络


810
00:28:57,536 --> 00:28:58,576
为了你们中的一些听众


811
00:28:58,576 --> 00:29:00,506
我们在 iOS 12 中引入了


812
00:29:00,566 --> 00:29:03,566
一个新 API 去支持这项验证


813
00:29:04,156 --> 00:29:04,916
我们将它叫做


814
00:29:04,916 --> 00:29:06,976
ASWebAuthenticationSession


815
00:29:06,976 --> 00:29:08,086
我想要为你们展示


816
00:29:08,086 --> 00:29:08,476
它是如何工作的


817
00:29:09,016 --> 00:29:12,336
现在 我回到了 Shiny App


818
00:29:12,916 --> 00:29:14,226
这次我选择使用


819
00:29:14,226 --> 00:29:16,696
example.com 进行登录 一个非常流行的
 
00:29:16,696 --> 00:29:17,906
社交网站


820
00:29:18,406 --> 00:29:21,566
现在 当我点击按钮


821
00:29:21,726 --> 00:29:23,376
引擎下的 App 调用


822
00:29:23,376 --> 00:29:25,716
这个新的 ASWebAuthenticationSession API


823
00:29:26,636 --> 00:29:28,316
现在 其中一个通过


824
00:29:28,316 --> 00:29:30,096
ASWebAuthenticationSession 使


825
00:29:30,096 --> 00:29:32,406
登录变得更快捷的方法是


826
00:29:32,406 --> 00:29:33,606
与 Safari 分享划线的


827
00:29:33,606 --> 00:29:34,136
Cookie Storage


828
00:29:35,086 --> 00:29:36,896
现在当然 在我们做这些之前


829
00:29:36,896 --> 00:29:39,886
iOS 需要用户的明确许可


830
00:29:40,316 --> 00:29:44,926
通过许可 安全视图控制器将被提供给用户


831
00:29:44,926 --> 00:29:46,796
然后引导用户


832
00:29:46,796 --> 00:29:48,266
通过第三方的


833
00:29:48,266 --> 00:29:49,206
联合身份验证流程


834
00:29:50,456 --> 00:29:52,576
这样 我已经在我的 iPhone 上的


835
00:29:52,576 --> 00:29:55,356
Safari 登录进入 example.com


836
00:29:55,356 --> 00:29:57,656
我现在唯一要做的就是轻点允许


837
00:29:57,806 --> 00:29:59,976
让我们开始吧


838
00:30:00,066 --> 00:30:02,626
只要点两下 我就已经


839
00:30:02,626 --> 00:30:03,816
通过了第三方服务的


840
00:30:03,816 --> 00:30:05,896
联合身份验证了


841
00:30:06,976 --> 00:30:08,736
所以 在以前你可能需要使用


842
00:30:08,736 --> 00:30:11,886
其他 iOS 平台技术以


843
00:30:11,886 --> 00:30:12,896
在你的 App 中使用


844
00:30:12,896 --> 00:30:14,426
联合身份验证


845
00:30:15,786 --> 00:30:17,226
从 iOS 12 开始


846
00:30:17,586 --> 00:30:19,146
ASWebAuthenticationSession 就是


847
00:30:19,146 --> 00:30:21,606
执行这种验证的首选方法


848
00:30:22,126 --> 00:30:24,246
就像我们之前已经提到的


849
00:30:24,886 --> 00:30:26,566
ASWebAuthenticationSession 通过


850
00:30:26,566 --> 00:30:28,606
与 Safari 分享


851
00:30:28,606 --> 00:30:30,036
划线的 Cookie Storage


852
00:30:30,036 --> 00:30:32,426
在明确的用户许可的基础上


853
00:30:33,236 --> 00:30:34,636
现在 这意味着


854
00:30:34,636 --> 00:30:36,216
这取决于


855
00:30:36,216 --> 00:30:38,856
第三方的联合身份验证


856
00:30:39,066 --> 00:30:40,626
如果你的用户已经在


857
00:30:40,626 --> 00:30:42,376
他们设备的 Safari 上


858
00:30:42,376 --> 00:30:43,966
登录了这个服务 他们可能根本


859
00:30:43,966 --> 00:30:45,406
不需要看到登录表格


860
00:30:47,046 --> 00:30:48,486
如果他们确实需要看到登录表格


861
00:30:48,486 --> 00:30:50,576
ASWebAuthenticationSession 将支持


862
00:30:50,576 --> 00:30:52,466
密码自动填充和


863
00:30:52,466 --> 00:30:54,146
安全码自动填充 以此来使


864
00:30:54,146 --> 00:30:56,046
这项体验尽可能得减少痛苦


865
00:30:57,506 --> 00:30:58,736
对于你们开发人员而言


866
00:30:58,986 --> 00:31:00,486
ASWebAuthenticationSession


867
00:31:00,486 --> 00:31:01,846
提供了一个直接的


868
00:31:01,846 --> 00:31:03,906
Block-based API


869
00:31:03,906 --> 00:31:05,216
以使得采用过程非常简单


870
00:31:06,246 --> 00:31:08,566
让我们看看


871
00:31:08,796 --> 00:31:10,596
现在 让我们看看


872
00:31:10,656 --> 00:31:11,756
使用 ASWebAuthenticationSession 来


873
00:31:11,756 --> 00:31:13,116
执行联合身份验证


874
00:31:13,116 --> 00:31:14,706
有多容易


875
00:31:16,146 --> 00:31:17,496
首先你要


876
00:31:17,496 --> 00:31:18,546
导入全新的


877
00:31:18,546 --> 00:31:20,046
AuthenticationServices 框架


878
00:31:20,556 --> 00:31:23,536
然后 你只需根据


879
00:31:23,536 --> 00:31:25,646
第三方联合验证供应程序的描述


880
00:31:25,646 --> 00:31:27,896
对 oauthURL 进行定义


881
00:31:29,366 --> 00:31:31,096
现在 这样做之后你将


882
00:31:31,096 --> 00:31:31,926
创建一个


883
00:31:31,926 --> 00:31:33,786
ASWebAuthenticationSession 对象


884
00:31:34,176 --> 00:31:36,126
你在传递 oauthURL


885
00:31:36,126 --> 00:31:37,386
然后一个 callback handler


886
00:31:37,386 --> 00:31:38,386
将在身份验证会话的最后


887
00:31:38,386 --> 00:31:39,396
介入进来


888
00:31:40,126 --> 00:31:42,466
现在 很重要的是你要


889
00:31:42,466 --> 00:31:43,936
保持住一个对


890
00:31:43,936 --> 00:31:45,296
身份验证会话的强引用


891
00:31:45,476 --> 00:31:46,896
当这个会话是 InFlight 时


892
00:31:47,376 --> 00:31:49,056
这样做 当你选择


893
00:31:49,056 --> 00:31:50,636
去取消一个正在发生的会话时


894
00:31:50,636 --> 00:31:53,826
你就可以完成


895
00:31:54,006 --> 00:31:55,366
最后 你要调用


896
00:31:55,366 --> 00:31:56,736
Non-blocking 启动方法


897
00:31:57,486 --> 00:31:59,956
这样做后 首先 iOS 将


898
00:31:59,956 --> 00:32:01,606
请求与 Safari 共享


899
00:32:01,606 --> 00:32:02,656
用户许可


900
00:32:02,656 --> 00:32:04,256
一级你的会话中


901
00:32:04,256 --> 00:32:05,706
Safari 所包含的划线 cookie storage


902
00:32:06,066 --> 00:32:07,296
然后 用户将被展示


903
00:32:07,296 --> 00:32:08,526
一个安全视图控制器


904
00:32:08,726 --> 00:32:09,876
然后被指引着通过


905
00:32:09,876 --> 00:32:10,766
身份验证流程


906
00:32:12,116 --> 00:32:13,146
当用户完成了


907
00:32:13,146 --> 00:32:15,156
身份验证流程或者


908
00:32:15,156 --> 00:32:16,666
如果他们取消身份验证会话


909
00:32:16,666 --> 00:32:18,346
你的完成处理程序


910
00:32:18,346 --> 00:32:20,286
介入 你可以控制这个结果


911
00:32:20,796 --> 00:32:24,076
这就是在 iOS 12 里


912
00:32:24,076 --> 00:32:25,116
使用 ASWebAuthenticationSession


913
00:32:25,116 --> 00:32:27,356
执行联合身份验证


914
00:32:27,356 --> 00:32:28,896
有多么简单


915
00:32:29,166 --> 00:32:30,756
这只需要几行代码


916
00:32:32,166 --> 00:32:34,356
从 iOS 12 开始这个新的


917
00:32:34,356 --> 00:32:36,796
API 就是执行


918
00:32:36,796 --> 00:32:37,856
联合身份验证的首选


919
00:32:37,856 --> 00:32:41,546
它代替了 SFAuthenticationSession


920
00:32:42,386 --> 00:32:43,686
如果你发现你需要


921
00:32:43,686 --> 00:32:45,346
在你的 App 里支持联合身份验证


922
00:32:45,346 --> 00:32:47,246
我们强烈鼓励


923
00:32:47,246 --> 00:32:49,066
你使用这个新的 API


924
00:32:49,776 --> 00:32:52,876
讲到这里 我要将舞台


925
00:32:52,876 --> 00:32:54,376
交还给 Chelsea


926
00:32:54,376 --> 00:32:56,266
她将向你们介绍一些


927
00:32:56,266 --> 00:32:57,786
我们基于 iOS 12 以及 macOS Mojave


928
00:32:57,976 --> 00:33:01,216
搭建的非常酷的密码管理功能


929
00:33:01,786 --> 00:33:02,596
非常感谢


930
00:33:03,516 --> 00:33:07,500
［ 掌声 ］


931
00:33:08,656 --> 00:33:09,396
>> 谢谢 Harris


932
00:33:10,146 --> 00:33:11,486
我很激动要向你们介绍


933
00:33:11,486 --> 00:33:12,846
iOS 12 以及 macOS Mojave 中


934
00:33:12,846 --> 00:33:14,016
iCloud 钥匙串和密码管理器的


935
00:33:14,016 --> 00:33:17,566
和密码管理器的新功能


936
00:33:18,416 --> 00:33:19,536
你们可能在


937
00:33:19,536 --> 00:33:20,836
昨天的年度咨文中已经了解一些了


938
00:33:21,506 --> 00:33:24,316
截至目前 我们谈到的都是


939
00:33:24,716 --> 00:33:26,186
如何帮助你的用户


940
00:33:26,186 --> 00:33:28,563
登入 App 以及如何在你的 App 中创建帐户


941
00:33:28,836 --> 00:33:30,456
但是有些情况下


942
00:33:30,456 --> 00:33:31,786
用户会和你的 App 交互


943
00:33:31,786 --> 00:33:34,636
当他们在 App 环境之外时


944
00:33:34,636 --> 00:33:37,276
为了这些情况 我们已经


945
00:33:37,276 --> 00:33:38,646
在 iCloud 钥匙串和密码管理器里


946
00:33:38,646 --> 00:33:40,086
加入一些功能使得


947
00:33:40,086 --> 00:33:41,676
管理和与帐户交互


948
00:33:41,676 --> 00:33:42,786
变得轻而易举


949
00:33:43,426 --> 00:33:45,776
如果一个用户需要查找密码


950
00:33:45,776 --> 00:33:47,266
他们现在只需


951
00:33:47,266 --> 00:33:48,046
询问 Siri


952
00:33:48,916 --> 00:33:50,046
在认证后 他们将快速地


953
00:33:50,046 --> 00:33:51,686
找到他们的密码


954
00:33:52,206 --> 00:33:53,286
这样 他们就能读取


955
00:33:53,286 --> 00:33:54,676
他们的密码并将其输入


956
00:33:54,676 --> 00:33:56,886
另外在没有


957
00:33:57,346 --> 00:33:58,586
iCloud 钥匙串的设备


958
00:33:58,716 --> 00:34:00,226
有些用户可能需要为了一些服务


959
00:34:00,226 --> 00:34:02,586
与实用工具共享帐户信息


960
00:34:03,796 --> 00:34:04,766
为了分享这个信息


961
00:34:04,766 --> 00:34:06,316
用户可以


962
00:34:06,356 --> 00:34:08,286
隔空投送密码给他们的联系人


963
00:34:09,016 --> 00:34:12,876
在 iOS 12 里密码清单 UI 被


964
00:34:13,036 --> 00:34:14,806
重新设计过


965
00:34:14,806 --> 00:34:16,196
现在的它更具扫描性 


966
00:34:16,196 --> 00:34:17,545
交互也更令人愉悦


967
00:34:18,795 --> 00:34:20,976
macOS 里的密码清单 UI


968
00:34:20,976 --> 00:34:22,346
也同样被重新设计过


969
00:34:22,496 --> 00:34:25,485
它看起来很棒


970
00:34:25,666 --> 00:34:28,716
另一个 iCloud 钥匙串密码管理器的功能


971
00:34:29,016 --> 00:34:30,676
是提醒用户


972
00:34:30,676 --> 00:34:32,045
是否他们在不同的网站


973
00:34:32,045 --> 00:34:33,036
重复使用密码


974
00:34:34,396 --> 00:34:35,706
如果用户轻点了这些


975
00:34:35,706 --> 00:34:37,406
密码中的一个 他们将被提供


976
00:34:37,406 --> 00:34:38,525
在网页上修改他们


977
00:34:38,525 --> 00:34:39,876
密码的选项


978
00:34:40,646 --> 00:34:42,085
网页上的自动强密码


979
00:34:42,085 --> 00:34:43,646
能够帮助他们升级


980
00:34:43,646 --> 00:34:45,666
为该服务


981
00:34:45,906 --> 00:34:46,696
使用特殊强密码


982
00:34:47,396 --> 00:34:51,036
密码重复使用检查功能


983
00:34:51,036 --> 00:34:52,726
也是基于 macOS 上的


984
00:34:52,726 --> 00:34:55,196
Safari 密码清单创建的


985
00:34:55,676 --> 00:35:00,076
最后 你的 tvOS App


986
00:35:00,076 --> 00:35:01,746
现在可以提供从


987
00:35:01,746 --> 00:35:03,266
附近的 iOS 设备进行自动填充的服务了


988
00:35:04,516 --> 00:35:08,500
［ 掌声 ］


989
00:35:09,046 --> 00:35:10,656
如果想要了解更多


990
00:35:10,656 --> 00:35:12,046
关于这个了不起又方便的功能的信息


991
00:35:12,046 --> 00:35:13,646
请看观看 tvOS 新功能


992
00:35:13,646 --> 00:35:16,896
会议 12 的自动填充部分


993
00:35:19,316 --> 00:35:21,266
总的来说 自动填充是一个


994
00:35:21,316 --> 00:35:23,626
有力的平台功能


995
00:35:23,626 --> 00:35:24,916
它能帮助用户与你的 App 帐户


996
00:35:24,916 --> 00:35:26,896
进行交互


997
00:35:27,466 --> 00:35:29,566
就像我们讨论的那样 


998
00:35:29,566 --> 00:35:30,936
我们今天谈到的功能


999
00:35:30,936 --> 00:35:32,256
可能对你的 App 没有改变


1000
00:35:33,566 --> 00:35:34,886
但是重要的是


1001
00:35:34,956 --> 00:35:36,026
你在你的 App 上


1002
00:35:36,026 --> 00:35:37,026
应用我们今天


1003
00:35:37,686 --> 00:35:39,076
谈到的建议


1004
00:35:39,076 --> 00:35:40,796
测试这些新功能


1005
00:35:41,416 --> 00:35:42,826
如果在应用了这些建议后


1006
00:35:42,826 --> 00:35:45,056
自动填充没有


1007
00:35:45,056 --> 00:35:47,076
你想象中运行得那样好


1008
00:35:47,076 --> 00:35:48,036
请填写错误报告


1009
00:35:48,106 --> 00:35:49,856
我们很乐意收到你的消息


1010
00:35:51,536 --> 00:35:53,186
使用 Reza 在


1011
00:35:53,186 --> 00:35:54,696
他的演示中展示的验证工具


1012
00:35:54,696 --> 00:35:57,386
你可以访问列出的这个网址


1013
00:35:58,456 --> 00:35:59,716
这里是一些你可能感兴趣的


1014
00:35:59,716 --> 00:36:00,816
相关会议


1015
00:36:01,706 --> 00:36:02,826
如果你是一个


1016
00:36:02,826 --> 00:36:04,266
密码管理器的开发人员


1017
00:36:04,266 --> 00:36:05,806
请看执行自动填充凭证


1018
00:36:05,806 --> 00:36:06,986
供应商扩展


1019
00:36:07,946 --> 00:36:09,096
如果你想学习更多


1020
00:36:09,096 --> 00:36:10,296
关于 App 密码自动填充的内容


1021
00:36:10,436 --> 00:36:12,206
请看 WWDC 2017 为 App 引入


1022
00:36:12,206 --> 00:36:15,036
密码自动填充的部分


1023
00:36:15,566 --> 00:36:18,436
如果你想与我们交流


1024
00:36:18,696 --> 00:36:20,116
或者对今天谈到的内容


1025
00:36:20,116 --> 00:36:21,196
有些疑问


1026
00:36:21,196 --> 00:36:23,016
请在会后到 Safari


1027
00:36:23,176 --> 00:36:24,656
WebKit 和


1028
00:36:24,656 --> 00:36:25,896
密码自动填充实验室来


1029
00:36:26,276 --> 00:36:27,376
在本周晚些时候


1030
00:36:27,376 --> 00:36:28,056
我们还会有一些分享


1031
00:36:29,446 --> 00:36:30,326
非常感谢大家的参与


1032
00:36:30,326 --> 00:36:31,406
祝大家有一个愉快的


1033
00:36:31,406 --> 00:36:32,866
WWDC 2018


1034
00:36:33,511 --> 00:36:35,511
［ 掌声 ］

