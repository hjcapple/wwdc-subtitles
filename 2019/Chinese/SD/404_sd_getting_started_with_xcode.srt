1
00:00:06,406 --> 00:00:10,777 line:0
（Xcode入门）


2
00:00:15,983 --> 00:00:18,285 line:-1
欢迎参加Xcode入门演讲


3
00:00:18,886 --> 00:00:21,889 line:-2
我是Prachi
是Xcode工程师


4
00:00:22,689 --> 00:00:25,092 line:0
我将和同事Holly、Honza
一起演讲


5
00:00:25,492 --> 00:00:30,464 line:0
我要讲的是如何用Xcode
创建简单的iOS app


6
00:00:31,198 --> 00:00:34,168 line:0
Xcode是一个集成的开发环境


7
00:00:34,234 --> 00:00:36,670 line:0
用于Swift、
Objective-C


8
00:00:37,137 --> 00:00:39,473 line:0
和其它语言的软件开发


9
00:00:41,375 --> 00:00:42,309 line:-1
在本场演讲中


10
00:00:42,576 --> 00:00:46,780 line:-2
我们会讲如何用
Xcode创建新项目


11
00:00:47,247 --> 00:00:51,818 line:-2
在Xcode的源编辑器中如何编写
并导航源代码


12
00:00:52,853 --> 00:00:57,424 line:-2
运行和调试可能存在于代码基中的
任何问题


13
00:00:58,492 --> 00:01:02,863 line:-1
使用程序包和框架扩展app的功能


14
00:01:03,497 --> 00:01:06,967 line:-2
最后讲如何测试并把app
发布到App Store


15
00:01:08,302 --> 00:01:09,336 line:0
（创建新项目）


16
00:01:09,903 --> 00:01:11,839 line:0
让我们先讲…


17
00:01:12,673 --> 00:01:14,508 line:0
在Xcode中创建新项目


18
00:01:17,010 --> 00:01:19,813 line:-1
在你面前的是Xcode窗口


19
00:01:20,180 --> 00:01:22,983 line:-1
我要分成四个不同的区块讲


20
00:01:26,186 --> 00:01:28,322 line:-1
中间的区块是源编辑器


21
00:01:28,388 --> 00:01:31,291 line:-1
你可以浏览并编辑所有文件


22
00:01:31,859 --> 00:01:34,361 line:-1
特别是当源编辑器打开时


23
00:01:34,761 --> 00:01:37,998 line:-1
你可以用它导航并编辑所有源代码


24
00:01:38,899 --> 00:01:42,102 line:-1
还有其它编辑器可用 如项目编辑器


25
00:01:42,636 --> 00:01:45,973 line:-2
在这里 你可以在需要的时候
自定义项目设置


26
00:01:47,007 --> 00:01:48,475 line:-1
在项目编辑器内


27
00:01:48,542 --> 00:01:50,511 line:-1
你可以找到app的目标


28
00:01:50,978 --> 00:01:54,948 line:-1
目标包含创建产品的说明


29
00:01:55,883 --> 00:01:59,486 line:-1
这些产品比如包含库、框架、


30
00:02:00,454 --> 00:02:02,155 line:-1
测试包和app自己


31
00:02:03,790 --> 00:02:06,793 line:-1
Xcode最左边的窗口是导航器


32
00:02:06,860 --> 00:02:10,898 line:-2
你可以快速、轻松地浏览
项目内的所有内容


33
00:02:11,865 --> 00:02:14,301 line:-1
你可以使用导航器选择条


34
00:02:14,935 --> 00:02:16,703 line:-1
来选择一个导航器


35
00:02:16,770 --> 00:02:18,238 line:-1
你有许多可用的工具


36
00:02:19,706 --> 00:02:22,776 line:-1
因为我们已经选择好了项目导航器


37
00:02:23,510 --> 00:02:26,113 line:-1
你可以用它来添加、删除群组


38
00:02:26,180 --> 00:02:30,050 line:-1
或管理存在于项目中的所有文件


39
00:02:31,752 --> 00:02:34,021 line:-1
在最右边的区块是检查器


40
00:02:34,888 --> 00:02:38,992 line:-1
它提供关于编辑器的内容的情境数据


41
00:02:39,393 --> 00:02:41,295 line:-1
因为我们已经打开了源编辑器


42
00:02:41,562 --> 00:02:45,365 line:-1
你可以浏览所显示的文件的信息


43
00:02:45,432 --> 00:02:47,734 line:-1
比如文件名称和文件路径


44
00:02:49,469 --> 00:02:51,572 line:-1
顶部区块是一个工具栏


45
00:02:52,339 --> 00:02:55,042 line:-1
你可以在这里找到运行按钮


46
00:02:55,475 --> 00:02:57,611 line:-1
它会创建并运行产品


47
00:02:59,847 --> 00:03:03,717 line:-2
停止按钮会终止
当前正在进行中的行动


48
00:03:05,886 --> 00:03:09,790 line:-2
接下来的两个下拉菜单是
方案和运行目的地


49
00:03:10,324 --> 00:03:12,659 line:-1
方案是一个可共享的文件


50
00:03:12,993 --> 00:03:17,397 line:-1
包含创建、运行和测试app的规则


51
00:03:18,065 --> 00:03:20,601 line:-1
运行目的地是在哪里运行app


52
00:03:21,401 --> 00:03:24,371 line:-2
你可以选择在某设备的模拟器上
运行app


53
00:03:24,438 --> 00:03:27,174 line:-2
如iPhone XR 我们用的是
iPhone XR模拟器


54
00:03:27,841 --> 00:03:30,177 line:-1
你可以在Mac上运行它


55
00:03:30,544 --> 00:03:34,748 line:-2
或在已连接的设备上运行它
比如iPhone或iPad


56
00:03:36,817 --> 00:03:37,985 line:-1
最后三个按钮


57
00:03:38,318 --> 00:03:39,653 line:-1
是显示和隐藏菜单


58
00:03:39,720 --> 00:03:42,823 line:-2
它们会显示并隐藏Xcode窗口的
不同区块


59
00:03:43,257 --> 00:03:44,424 line:-1
这些菜单用起来非常便利


60
00:03:44,491 --> 00:03:46,860 line:-1
比如 如果你正在开发代码


61
00:03:47,394 --> 00:03:48,962 line:-1
并且你需要在编辑器中有更多空间


62
00:03:49,029 --> 00:03:53,267 line:-1
你可以右击鼠标关闭检查器


63
00:03:53,333 --> 00:03:56,670 line:-1
并在编辑器中获得额外的空间


64
00:03:59,740 --> 00:04:02,843 line:-2
现在我想让你们注意一下
Xcode帮助按钮


65
00:04:03,110 --> 00:04:05,746 line:-1
在这里你可以访问资源 比如


66
00:04:05,812 --> 00:04:09,550 line:-2
开发者文档、
版本注释和Xcode帮助


67
00:04:11,351 --> 00:04:14,788 line:-2
Xcode帮助对于了解Xcode
来说是一个非常棒的资源


68
00:04:15,155 --> 00:04:17,791 line:-2
我们强烈推荐你们自己浏览
其中的内容


69
00:04:18,892 --> 00:04:19,892 line:-1
（演示）


70
00:04:19,959 --> 00:04:22,629 line:-1
现在我们讲了Xcode窗口的布局


71
00:04:23,096 --> 00:04:26,266 line:-2
让我们继续并从零开始
创建一个实际的项目


72
00:04:27,968 --> 00:04:31,271 line:-2
在你们面前的是
欢迎进入Xcode窗口


73
00:04:32,139 --> 00:04:33,607 line:-1
在左边


74
00:04:33,674 --> 00:04:36,109 line:-1
你可以选择创建一个新项目


75
00:04:36,743 --> 00:04:40,280 line:-1
它会保存app的所有文件和资源


76
00:04:41,014 --> 00:04:43,450 line:-1
你还可以克隆一个现有项目


77
00:04:43,517 --> 00:04:47,020 line:-2
那可能会托管在源代码控制账户上
比如GitHub


78
00:04:47,888 --> 00:04:51,859 line:-2
最后你还可以选择打开
Xcode Playground


79
00:04:52,192 --> 00:04:54,828 line:-1
它允许你体验你的Swift代码


80
00:04:54,895 --> 00:04:57,431 line:-1
然后实时查看代码所产生的结果


81
00:04:58,632 --> 00:05:02,703 line:-2
在右侧是我们最近正在修改的
所有项目


82
00:05:02,769 --> 00:05:04,605 line:-1
我们可以快速、轻松的看到它们


83
00:05:05,272 --> 00:05:08,308 line:-2
我要继续并在Xcode中
创建一个新项目


84
00:05:09,743 --> 00:05:11,945 line:-1
这将打开模板选择器


85
00:05:12,679 --> 00:05:15,015 line:-1
模板是app的起点


86
00:05:15,782 --> 00:05:19,686 line:-1
Xcode中有各种不同的可用模板


87
00:05:21,355 --> 00:05:22,823 line:-1
为了选择合适的模板


88
00:05:22,890 --> 00:05:25,792 line:-1
我们需要先确认我们要开发的平台


89
00:05:26,193 --> 00:05:27,828 line:-1
我知道我要写一个iOS app


90
00:05:28,195 --> 00:05:30,497 line:-1
所以我继续并点击iOS标签


91
00:05:31,131 --> 00:05:33,967 line:-2
在这个标签内
你会注意到有两大类模板


92
00:05:34,034 --> 00:05:38,205 line:-1
即app模板


93
00:05:38,572 --> 00:05:40,607 line:-1
以及框架和库模板


94
00:05:42,309 --> 00:05:43,877 line:-1
为了达到这场演讲的目的


95
00:05:43,944 --> 00:05:47,181 line:-1
我要继续并选择app模板


96
00:05:47,247 --> 00:05:50,384 line:-2
我要选择最简单的一个模板
即单一视图app


97
00:05:51,018 --> 00:05:52,052 line:-1
我要点击下一步


98
00:05:52,819 --> 00:05:56,423 line:-1
我和我同事决定创建一个冥想app


99
00:05:57,191 --> 00:05:58,525 line:-1
我们决定把它命名为Mind


100
00:05:58,825 --> 00:06:00,127 line:-1
对于项目名称


101
00:06:00,594 --> 00:06:01,828 line:-1
我要输入Mind


102
00:06:03,330 --> 00:06:05,632 line:-1
对于组织名称 一般来说


103
00:06:05,699 --> 00:06:07,868 line:-1
我会填写我的组织的名称


104
00:06:08,202 --> 00:06:10,037 line:-1
但为了本场演讲的目的


105
00:06:10,404 --> 00:06:12,472 line:-2
我要把我们的组织叫做
Example Team


106
00:06:13,974 --> 00:06:17,778 line:-1
然后组织标识符是


107
00:06:17,845 --> 00:06:19,112 line:-1
组织名称的反向DNS


108
00:06:19,413 --> 00:06:22,182 line:-2
在这个例子中
是com.exampleteam


109
00:06:23,283 --> 00:06:26,019 line:-1
最后捆绑标识符是自动填写的


110
00:06:26,520 --> 00:06:31,091 line:-2
它是你的app
在Apple生态系统内的唯一ID


111
00:06:31,158 --> 00:06:34,061 line:-1
它是产品名称


112
00:06:34,361 --> 00:06:36,029 line:-1
和组织标识符的组合


113
00:06:36,763 --> 00:06:37,698 line:-1
对于语言


114
00:06:37,764 --> 00:06:40,901 line:-2
我要继续并保留Swift
因为我要用Swift写我的app


115
00:06:41,969 --> 00:06:45,706 line:-1
我要确保我包含了UI测试


116
00:06:45,772 --> 00:06:47,441 line:-1
从而它会为UI测试创建一个目标


117
00:06:47,508 --> 00:06:50,511 line:-1
因为作为开发人员 我们想形成


118
00:06:50,978 --> 00:06:52,679 line:-1
时常测试代码的习惯


119
00:06:53,347 --> 00:06:56,016 line:-1
我们稍后会演示如何添加单元测试


120
00:07:00,120 --> 00:07:01,822 line:-1
在你点击完成后


121
00:07:02,189 --> 00:07:03,590 line:-1
它将打开保存表单


122
00:07:03,991 --> 00:07:06,393 line:-2
在这里我可以决定
我想把app保存到哪儿


123
00:07:06,860 --> 00:07:09,930 line:-1
它默认保存到桌面 我觉得没问题


124
00:07:10,330 --> 00:07:11,965 line:-1
所以我没做出什么修改


125
00:07:12,232 --> 00:07:14,067 line:-1
但我想确认一件事


126
00:07:14,134 --> 00:07:17,905 line:-1
即在项目的最开始源代码就可用


127
00:07:17,971 --> 00:07:22,576 line:-1
从而我可以管理、追踪和备份


128
00:07:24,011 --> 00:07:25,445 line:-1
我在开发过程中所做出的任何修改


129
00:07:25,512 --> 00:07:27,347 line:-1
因此我要继续并检查


130
00:07:27,414 --> 00:07:31,018 line:-2
Mac复选框中的
创建一个Git仓库


131
00:07:31,418 --> 00:07:32,319 line:-1
我要点击创建


132
00:07:34,688 --> 00:07:36,256 line:-1
现在我们已经设置好模板了


133
00:07:36,757 --> 00:07:40,093 line:-1
我们可以向app中添加app图标


134
00:07:40,894 --> 00:07:44,464 line:-2
app图标是无论何时
当用户想启动我们的app时


135
00:07:44,965 --> 00:07:46,600 line:-1
所要选择的图片


136
00:07:47,534 --> 00:07:48,969 line:-1
app图标是资产


137
00:07:49,436 --> 00:07:52,439 line:-1
资产比如包括图片和颜色


138
00:07:53,707 --> 00:07:57,778 line:-1
资产目录管理和组织资产


139
00:07:58,111 --> 00:08:02,082 line:-2
我们可以通过导航器
点击资产目录进行访问


140
00:08:03,050 --> 00:08:05,185 line:-1
因为我们想要app图标的目录


141
00:08:05,252 --> 00:08:07,688 line:-2
让我们继续并点击
app图标和编辑器


142
00:08:09,289 --> 00:08:12,292 line:-1
从目录中你会注意到你的资产有


143
00:08:12,626 --> 00:08:18,265 line:-1
通知、设置、聚焦以及app自己


144
00:08:19,066 --> 00:08:21,335 line:-1
我桌面上有app图标了


145
00:08:21,401 --> 00:08:22,402 line:-1
它已经可以使用了


146
00:08:23,270 --> 00:08:27,541 line:-1
我有一台设备使用2X分辨率


147
00:08:27,975 --> 00:08:34,313 line:-2
因此app图标——
资产有1X、2X和3X分辨率可用


148
00:08:34,381 --> 00:08:35,816 line:-1
取决于你所使用的设备


149
00:08:36,216 --> 00:08:38,452 line:-1
我要继续并把这个app图标


150
00:08:39,219 --> 00:08:43,357 line:-2
拖入到针对iPhone app的
2X目录框中


151
00:08:46,260 --> 00:08:49,463 line:-2
现在我想测试我的app图标
以确保它确实可以使用


152
00:08:50,230 --> 00:08:54,201 line:-2
为此 我想在iPhone XR
的模拟器中运行它


153
00:08:54,601 --> 00:08:57,437 line:-2
因此我要把运行目的地修改为
iPhone XR


154
00:08:58,572 --> 00:08:59,973 line:-1
然后点击运行按钮


155
00:09:04,945 --> 00:09:07,080 line:-1
这将会启动模拟器


156
00:09:08,682 --> 00:09:12,286 line:-2
你将注意到模拟器
立即启动我的app


157
00:09:12,352 --> 00:09:14,588 line:-2
我知道这是因为它显示的是
Hello World


158
00:09:14,888 --> 00:09:16,657 line:-1
这是我的模板的设置


159
00:09:17,524 --> 00:09:19,660 line:-1
所以我需要进入硬件菜单


160
00:09:19,993 --> 00:09:22,663 line:-1
在主页屏幕上查看我的app图标


161
00:09:22,729 --> 00:09:23,964 line:-1
我要进入硬件菜单…


162
00:09:25,399 --> 00:09:26,366 line:-1
点击主页


163
00:09:28,001 --> 00:09:30,804 line:-2
这将把我带到主屏幕上
我可以看到那儿有我的图标


164
00:09:31,171 --> 00:09:32,706 line:-1
如果我点击app图标


165
00:09:33,407 --> 00:09:34,942 line:-1
我的app会返回到前台中


166
00:09:35,342 --> 00:09:37,477 line:-1
很棒 我知道我的app图标能用了


167
00:09:37,544 --> 00:09:40,547 line:-1
我可以终止模拟器的执行


168
00:09:41,982 --> 00:09:44,117 line:-1
现在我们的起点很好


169
00:09:44,184 --> 00:09:47,387 line:-2
我们可以提交并保存我们的修改
从而同事Holly和Honza


170
00:09:47,721 --> 00:09:50,290 line:-1
可以继续开发这个app…


171
00:09:50,557 --> 00:09:51,625 line:-1
继续开发这个项目


172
00:09:52,492 --> 00:09:55,896 line:-2
为此 我们首先需要添加一个
GitHub账户


173
00:09:57,030 --> 00:09:59,466 line:-1
我们可以通过Xcode首选项实现


174
00:09:59,533 --> 00:10:03,070 line:-2
你可以打开Xcode菜单
然后进入首选项菜单


175
00:10:04,137 --> 00:10:07,841 line:-2
Xcode首选项可让你按需
自定义Xcode


176
00:10:08,609 --> 00:10:09,977 line:-1
要添加一个账户


177
00:10:10,310 --> 00:10:12,679 line:-1
我们要继续并继续账户首选项面板


178
00:10:13,113 --> 00:10:14,648 line:-1
并点击加号按钮


179
00:10:15,349 --> 00:10:18,018 line:-1
你可以看到


180
00:10:18,418 --> 00:10:19,486 line:-1
有许多可用的账户


181
00:10:19,553 --> 00:10:21,488 line:-2
因为我们只对
GitHub账户感兴趣


182
00:10:22,422 --> 00:10:24,291 line:-1
我们要点击GitHub并点击继续


183
00:10:25,826 --> 00:10:28,395 line:-1
现在它要求我填写账户认证信息


184
00:10:28,462 --> 00:10:33,634 line:-1
我要继续并输入我的账户名称和密码


185
00:10:34,801 --> 00:10:37,437 line:-1
它登录了我的账户 很棒


186
00:10:37,504 --> 00:10:39,740 line:-1
我要继续并关闭Xcode首选项


187
00:10:43,210 --> 00:10:45,045 line:-1
现在我需要进行提交


188
00:10:45,112 --> 00:10:47,447 line:-1
为此 我要进入源代码控制菜单


189
00:10:47,514 --> 00:10:48,649 line:-1
并点击提交


190
00:10:51,985 --> 00:10:53,554 line:-1
这将打开提交表单


191
00:10:53,620 --> 00:10:56,857 line:-1
在这里你可以核实你所做的全部修改


192
00:10:57,157 --> 00:10:58,525 line:-1
并且你可以添加一条提交信息


193
00:10:58,592 --> 00:11:00,527 line:-1
从而告诉你的同事你做了哪些修改


194
00:11:00,594 --> 00:11:01,828 line:-1
对于提交信息


195
00:11:01,895 --> 00:11:05,199 line:-2
我要写此次提交
将添加一个app图标


196
00:11:06,767 --> 00:11:09,436 line:-1
然后我点击提交 那将关闭提交表单


197
00:11:10,470 --> 00:11:12,906 line:-1
现在我们的情况是这样的…


198
00:11:13,707 --> 00:11:14,775 line:-1
在我们的开发中


199
00:11:14,842 --> 00:11:18,011 line:-2
我们先是用Xcode
创建了一个项目


200
00:11:19,012 --> 00:11:23,150 line:-2
然后选择了一个
适合我们的平台的模板


201
00:11:24,751 --> 00:11:27,721 line:-2
我们给我们的资产目录中
添加了一个app图标


202
00:11:28,322 --> 00:11:31,358 line:-2
然后我们使用了
Xcode源代码控制功能


203
00:11:31,692 --> 00:11:33,026 line:-1
提交了我们的修改


204
00:11:33,093 --> 00:11:35,896 line:-2
从而我们的同事可以继续开发
我们的项目


205
00:11:37,464 --> 00:11:39,266 line:-1
要了解更多关于源代码控制的信息


206
00:11:39,333 --> 00:11:40,834 line:-1
我们推荐你们参看


207
00:11:40,901 --> 00:11:45,005 line:-2
2018年的Xcode中的
源代码控制流程演讲


208
00:11:46,340 --> 00:11:48,775 line:-1
现在我们可以开始


209
00:11:48,842 --> 00:11:51,144 line:-2
向我们的app中
添加实际的冥想功能了


210
00:11:51,578 --> 00:11:54,381 line:-1
为此 我要邀请同事Holly上台


211
00:11:54,748 --> 00:11:55,649 line:-1
谢谢


212
00:12:03,357 --> 00:12:04,358 line:-1
谢谢Prachi


213
00:12:06,126 --> 00:12:09,796 line:-2
我叫Holly 是Xcode
源代码编辑器团队的软件工程师


214
00:12:11,098 --> 00:12:13,467 line:-1
欢迎使用源代码编辑器


215
00:12:14,434 --> 00:12:17,037 line:-1
你可以在这里编写app的所有代码


216
00:12:18,572 --> 00:12:21,475 line:-1
在源代码左侧有行编号


217
00:12:22,209 --> 00:12:24,545 line:-1
代码右侧是迷你地图


218
00:12:24,845 --> 00:12:28,549 line:-2
显示编辑器中的文件的视图缩影
用于导航


219
00:12:30,250 --> 00:12:32,452 line:-1
在源代码上方是跳转栏


220
00:12:33,887 --> 00:12:36,623 line:-2
跳转栏还会帮助你在编辑器中
导航文件


221
00:12:36,690 --> 00:12:37,991 line:-1
通过弹出功能实现


222
00:12:40,227 --> 00:12:42,296 line:-1
跳转栏可以让你自定义


223
00:12:42,362 --> 00:12:46,600 line:-2
编辑器的布局 通过使用编辑器选项
和编辑器拆分菜单实现


224
00:12:48,735 --> 00:12:52,206 line:-2
我们已经在创建我们的冥想app上
取得了很大的进展


225
00:12:52,739 --> 00:12:54,107 line:-1
让我们看一下我们的目标


226
00:12:55,676 --> 00:12:57,477 line:-1
我们要创建一个冥想app


227
00:12:57,544 --> 00:13:01,715 line:-2
可以让用户选择一个持续时间
并在那段时间内进行冥想


228
00:13:02,583 --> 00:13:03,917 line:-1
当冥想结束后


229
00:13:04,218 --> 00:13:07,688 line:-2
app将把用户进行冥想的分钟数
写到他们的健康数据中


230
00:13:08,722 --> 00:13:11,692 line:-2
我们需要添加大量Swift代码
才能让我们的app发挥作用


231
00:13:12,292 --> 00:13:15,062 line:-1
但我们不尝试读取我所写的代码


232
00:13:15,362 --> 00:13:18,131 line:-2
我希望你注意一下
Xcode所提供的工具


233
00:13:18,198 --> 00:13:19,766 line:-1
用以辅助编辑过程


234
00:13:21,134 --> 00:13:22,836 line:-2
如果你不熟悉Swift
那么欢迎你使用Swift


235
00:13:23,437 --> 00:13:24,538 line:-1
要了解Swift


236
00:13:24,605 --> 00:13:27,007 line:-1
我推荐你浏览Swift指南


237
00:13:27,074 --> 00:13:28,609 line:-1
它在线可用


238
00:13:28,976 --> 00:13:30,577 line:-2
或你可以查看
Xcode Playground


239
00:13:30,978 --> 00:13:33,280 line:-1
从而可以在你看Swift指南时


240
00:13:33,347 --> 00:13:34,615 line:-1
体验Swift代码


241
00:13:36,517 --> 00:13:39,286 line:-2
你可以在docs.swift.org上
找到指南


242
00:13:40,554 --> 00:13:42,589 line:-1
接下来让我们继续讲Xcode


243
00:13:49,096 --> 00:13:52,232 line:-2
我向Prachi刚展示给我们的
项目模板中添加了一些代码


244
00:13:52,299 --> 00:13:54,134 line:-1
用于实施冥想的时间选择


245
00:13:54,201 --> 00:13:56,637 line:-1
并为app绘制一个平静的背景


246
00:13:57,471 --> 00:14:01,675 line:-2
我们仍需要实施一个UI
用于选择一个冥想持续时间


247
00:14:01,942 --> 00:14:03,644 line:-1
从而开始冥想


248
00:14:04,678 --> 00:14:07,681 line:-2
我们还需要实施一个
与HealthKit相交互的类


249
00:14:08,448 --> 00:14:10,517 line:-2
为了让我们的app
非常快速地启动并运行


250
00:14:10,584 --> 00:14:14,288 line:-2
我实施了一个虚假HealthStore
它不会与HealthKit进行交互


251
00:14:14,588 --> 00:14:16,423 line:-2
我们稍后再实施
真正的HealthStore


252
00:14:17,758 --> 00:14:20,060 line:-2
那么在这里 我们正在从项目模板中
查看ContentView.swift


253
00:14:20,127 --> 00:14:23,997 line:-1
并且我添加了一个标题和背景


254
00:14:25,199 --> 00:14:27,201 line:-1
在创建app的UI时


255
00:14:27,267 --> 00:14:30,737 line:-2
Xcode可以在
交互式的Canvas上


256
00:14:31,004 --> 00:14:32,973 line:-1
给你展示UI的预览


257
00:14:33,507 --> 00:14:36,944 line:-2
要显示Canvas
我们要选择编辑器菜单


258
00:14:37,311 --> 00:14:39,112 line:-1
并点击编辑器和Canvas


259
00:14:41,148 --> 00:14:43,250 line:-2
Canvas将在你编辑时
创建并运行你的代码


260
00:14:43,317 --> 00:14:47,554 line:-1
因此它可以实时显示代码的运行结果


261
00:14:48,388 --> 00:14:49,556 line:-1
现在在预览中


262
00:14:49,857 --> 00:14:52,826 line:-1
我们可以看到欢迎标题和平静的背景


263
00:14:53,627 --> 00:14:56,463 line:-1
接下来我想添加一个冥想视图


264
00:14:56,530 --> 00:14:58,699 line:-1
因此我要创建一个新文件


265
00:15:01,034 --> 00:15:03,670 line:-2
我要使用
SwiftUI视图文件模板


266
00:15:06,073 --> 00:15:08,242 line:-2
我要把它命名为
MeditationView


267
00:15:16,083 --> 00:15:19,386 line:-2
现在预览给我显示了一个
完整的设备列表


268
00:15:19,853 --> 00:15:21,188 line:-1
但我正在创建的视图


269
00:15:21,255 --> 00:15:23,891 line:-1
只占据屏幕的一小部分


270
00:15:24,791 --> 00:15:26,793 line:-1
我可以修改预览提供器


271
00:15:26,860 --> 00:15:29,730 line:-1
把在Canvas上显示哪个视图


272
00:15:30,063 --> 00:15:34,001 line:-2
修改为只显示我正在使用
previewLayout修改器创建的视图


273
00:15:35,536 --> 00:15:37,304 line:-1
当我开始在修改器中输入时


274
00:15:37,571 --> 00:15:40,174 line:-1
Xcode会打开代码完成窗口


275
00:15:40,908 --> 00:15:43,544 line:-2
这会根据我所键入的文本
以及代码周边的情境


276
00:15:43,610 --> 00:15:47,748 line:-1
给我显示一个推荐列表


277
00:15:48,982 --> 00:15:52,419 line:-2
我想要的修改器就是
完成列表中的第一项


278
00:15:52,486 --> 00:15:54,855 line:-1
我可以按回车以接受推荐


279
00:15:56,156 --> 00:15:58,725 line:-2
现在Xcode在编辑器中插入了
所推荐的修改器的标志


280
00:15:58,792 --> 00:16:01,695 line:-1
以及占位符 从而填写余下的代码


281
00:16:02,229 --> 00:16:04,131 line:-2
我现在要填写
sizeThatFits


282
00:16:06,400 --> 00:16:09,770 line:-2
接下来我知道
MeditationView


283
00:16:09,837 --> 00:16:11,471 line:-2
需要与MeditationController
进行交互


284
00:16:11,805 --> 00:16:14,107 line:-1
因此我要添加一个属性包装器


285
00:16:14,842 --> 00:16:17,144 line:-2
包装
MeditationController


286
00:16:18,278 --> 00:16:19,313 line:-1
然后我就重新预览


287
00:16:20,981 --> 00:16:24,852 line:-2
如果你不确定源代码编辑器中
某个API有什么作用


288
00:16:24,918 --> 00:16:27,221 line:-1
你可以浏览那个API的文档


289
00:16:27,888 --> 00:16:30,357 line:-1
按住“选项”并点击


290
00:16:30,424 --> 00:16:32,359 line:-1
你要查看文档的API的标志即可


291
00:16:33,627 --> 00:16:35,629 line:-1
这会打开快速帮助弹出框


292
00:16:35,896 --> 00:16:38,232 line:-1
显示该标志的声明


293
00:16:38,298 --> 00:16:39,867 line:-1
及其文档


294
00:16:41,235 --> 00:16:42,336 line:-1
在我们继续之前


295
00:16:42,636 --> 00:16:45,772 line:-2
我需要提供一个
MeditationController


296
00:16:46,139 --> 00:16:47,875 line:-2
通过使用environmentObject
修改器实现


297
00:16:54,014 --> 00:16:56,450 line:-1
现在让我们开始创建这个视图


298
00:16:57,317 --> 00:17:00,287 line:-2
目前我们有
Hello World文本


299
00:17:00,654 --> 00:17:01,989 line:-1
我想把它修改为


300
00:17:02,256 --> 00:17:04,458 line:-1
显示冥想的剩余时间


301
00:17:04,758 --> 00:17:06,859 line:-2
我可以从MeditationController中
获取剩余时间


302
00:17:09,162 --> 00:17:11,265 line:-1
当我在编辑器中更新代码时


303
00:17:11,330 --> 00:17:13,567 line:-1
预览也更新了 用以反映所做的修改


304
00:17:14,268 --> 00:17:16,435 line:-1
现在文本看起来有点小


305
00:17:16,703 --> 00:17:18,906 line:-1
我可以用检查器把它变大点


306
00:17:19,473 --> 00:17:23,277 line:-2
我要从Xcode工具栏中的按钮
打开检查器


307
00:17:23,844 --> 00:17:25,512 line:-1
我要点击属性图标


308
00:17:26,246 --> 00:17:28,815 line:-1
然后点击我想检查的视图


309
00:17:29,316 --> 00:17:32,252 line:-2
在这里我可以看到
这个视图上所应用的


310
00:17:32,319 --> 00:17:33,754 line:-1
所有修改器的值


311
00:17:34,588 --> 00:17:36,790 line:-1
目前字体是继承的


312
00:17:36,857 --> 00:17:40,194 line:-2
我可以通过点击菜单并选择大标题
修改它


313
00:17:41,395 --> 00:17:42,329 line:-1
当我这样做时


314
00:17:42,396 --> 00:17:46,333 line:-2
预览会进行更新
并且源代码编辑器会自动添加


315
00:17:46,400 --> 00:17:48,168 line:-1
做出这个修改所需要的代码


316
00:17:53,774 --> 00:17:54,741 line:-1
在文本上方


317
00:17:54,808 --> 00:17:59,279 line:-2
我想显示一个按钮
可以让用户暂停并恢复冥想


318
00:18:00,247 --> 00:18:02,783 line:-1
你可以使用库把现成的资源


319
00:18:02,850 --> 00:18:05,652 line:-1
添加到你正在处理的文件中


320
00:18:05,953 --> 00:18:09,089 line:-2
你可以通过点击工具栏中的加号按钮
访问它


321
00:18:10,557 --> 00:18:13,760 line:-1
库有许多类不同的对象


322
00:18:13,827 --> 00:18:17,197 line:-1
包括视图、修改器和代码片段


323
00:18:17,598 --> 00:18:19,299 line:-1
让我们看一下代码片段类


324
00:18:20,501 --> 00:18:22,736 line:-1
Xcode有内置代码片段


325
00:18:22,803 --> 00:18:25,405 line:-1
你可以也可以添加自己的代码片段


326
00:18:25,472 --> 00:18:26,707 line:-1
添加你经常写的代码碎片


327
00:18:27,474 --> 00:18:29,877 line:-2
在这里你可以看到我所添加的
全部片段


328
00:18:29,943 --> 00:18:32,646 line:-2
可以让我们在这个演示中
非常快速地添加代码


329
00:18:33,514 --> 00:18:35,716 line:-1
但现在我要切换到视图类中


330
00:18:36,016 --> 00:18:38,318 line:-1
我可以键入我正在查找的视图


331
00:18:39,453 --> 00:18:42,089 line:-2
我可以把这个按钮
拖入源代码编辑器中


332
00:18:42,155 --> 00:18:44,224 line:-1
或直接拖到预览上


333
00:18:45,025 --> 00:18:47,227 line:-1
现在Canvas告诉我这个按钮


334
00:18:47,294 --> 00:18:49,463 line:-1
以及现有文本


335
00:18:49,796 --> 00:18:51,498 line:-1
将被添加到一个新的垂直堆栈上


336
00:18:52,366 --> 00:18:53,600 line:-1
当我释放按钮时


337
00:18:54,501 --> 00:18:57,271 line:-1
源代码编辑器将添加必要的代码


338
00:18:57,337 --> 00:18:58,906 line:-1
从而把按钮


339
00:18:58,972 --> 00:19:02,476 line:-2
和文本嵌入一个垂直堆栈中
通过添加一个VStack实现


340
00:19:03,277 --> 00:19:04,945 line:-1
现在我可以填写占位符


341
00:19:05,512 --> 00:19:08,415 line:-2
当我们轻触按钮时
我们希望切换冥想


342
00:19:08,949 --> 00:19:10,250 line:-1
我不想显示文本…


343
00:19:11,485 --> 00:19:15,155 line:-1
而是显示一个图标 显示播放或暂停


344
00:19:16,823 --> 00:19:18,158 line:-1
最后


345
00:19:18,225 --> 00:19:22,496 line:-2
我只想显示剩余时间
如果用户正在活跃地冥想的话


346
00:19:23,163 --> 00:19:25,465 line:-1
否则我就显示一个选择器


347
00:19:25,532 --> 00:19:27,634 line:-1
有预设的冥想持续时间


348
00:19:28,735 --> 00:19:31,138 line:-1
Xcode非常了解


349
00:19:31,205 --> 00:19:32,739 line:-1
我在编辑器中所写的代码的结构


350
00:19:33,173 --> 00:19:36,577 line:-1
并且它可以使用结构化编辑


351
00:19:36,643 --> 00:19:38,011 line:-1
帮助我转换和重构我的代码


352
00:19:38,946 --> 00:19:41,949 line:-2
如果我按住Command
并点击一个代码结构


353
00:19:42,015 --> 00:19:43,116 line:-1
比如文本


354
00:19:43,450 --> 00:19:45,853 line:-1
Xcode将给我显示行动按钮


355
00:19:45,919 --> 00:19:48,589 line:-1
它有许多我可以实施的不同的行动


356
00:19:48,655 --> 00:19:50,557 line:-1
用于转换这种代码结构


357
00:19:51,258 --> 00:19:54,461 line:-1
在菜单中还有跳转到目的地选项


358
00:19:54,528 --> 00:19:56,830 line:-1
可以浏览文本标志的快速帮助


359
00:19:58,065 --> 00:20:01,068 line:-1
因为我只想在特定条件下显示文本


360
00:20:01,134 --> 00:20:02,903 line:-1
我要点击条件式


361
00:20:04,371 --> 00:20:06,507 line:-1
现在我可以再次填写占位符


362
00:20:07,441 --> 00:20:09,776 line:-1
条件是如果冥想是活跃的


363
00:20:10,244 --> 00:20:13,447 line:-1
现在文件下面还有另一个占位符


364
00:20:13,714 --> 00:20:15,015 line:-1
我可以跳转到它


365
00:20:15,082 --> 00:20:17,417 line:-1
使用控制-向前/键绑定


366
00:20:17,951 --> 00:20:20,387 line:-1
它会帮助我非常迅速地填写缺失代码


367
00:20:20,454 --> 00:20:22,523 line:-1
甚至不需要触摸鼠标


368
00:20:23,757 --> 00:20:26,860 line:-1
这就是我想要的那个冥想视图


369
00:20:27,294 --> 00:20:29,930 line:-2
因此我切换到ContentView
并把它添加到ContentView中


370
00:20:31,431 --> 00:20:34,501 line:-2
我想把MeditationView
添加到这个VStack的底部


371
00:20:34,935 --> 00:20:36,136 line:-1
与另一个占位器一起


372
00:20:38,005 --> 00:20:41,375 line:-2
现在预览已经进行了更新
以显示我的欢迎标题


373
00:20:41,775 --> 00:20:45,646 line:-2
我的播放按钮
和用于选择冥想持续时间的选择器


374
00:20:46,480 --> 00:20:49,449 line:-2
现在我已经完成了UI
我要关闭Canvas


375
00:20:50,284 --> 00:20:52,553 line:-2
我要隐藏检查器
从而在编辑器中获得更多空间


376
00:20:54,655 --> 00:20:56,089 line:-1
在我们尝试运行app之前


377
00:20:56,356 --> 00:20:58,825 line:-2
我想要修改
MeditationController


378
00:20:58,892 --> 00:21:00,761 line:-1
使调试变得稍微简单点


379
00:21:01,562 --> 00:21:03,964 line:-1
在这里 我要使用迷你地图


380
00:21:04,031 --> 00:21:07,501 line:-1
导航到冥想计时器状态的代码段


381
00:21:08,535 --> 00:21:12,172 line:-1
迷你地图给我显示这个文件中


382
00:21:12,239 --> 00:21:13,240 line:-1
所有标记的文本标签


383
00:21:13,807 --> 00:21:17,110 line:-2
我可以通过点击迷你地图中的标签
导航到某一个标记


384
00:21:18,712 --> 00:21:22,249 line:-2
标记是一个Xcode
使用的特殊注释


385
00:21:22,316 --> 00:21:26,787 line:-2
用于在任意编辑器中显示代码段
在跳转栏中或迷你地图中


386
00:21:27,421 --> 00:21:29,356 line:-1
现在在这段代码中


387
00:21:29,423 --> 00:21:32,492 line:-1
我有一些计算的属性 用于表明状态


388
00:21:33,260 --> 00:21:35,529 line:-1
为了方便地检查状态


389
00:21:35,596 --> 00:21:39,099 line:-2
我要添加一个已存储的属性
叫做状态


390
00:21:39,800 --> 00:21:43,504 line:-2
它有其中一个可能的值
已停止、已暂停或正在运行


391
00:21:44,037 --> 00:21:45,572 line:-1
并且我把它默认为已停止


392
00:21:46,840 --> 00:21:49,443 line:-2
现在当我们更新
MeditationTimer时


393
00:21:49,743 --> 00:21:53,881 line:-1
我们想使用开关语句


394
00:21:54,448 --> 00:21:55,682 line:-1
查看计时器状态并更新控制器状态


395
00:21:58,652 --> 00:22:02,523 line:-2
计时器可能的值是无、已暂停
或正在运行


396
00:22:02,990 --> 00:22:06,193 line:-2
在Swift中
开关语句必须要面面俱到


397
00:22:06,727 --> 00:22:07,628 line:-1
如果不面面俱到


398
00:22:07,694 --> 00:22:10,731 line:-2
我会得到一个编译程序报错
要求我添加缺失的情况


399
00:22:11,098 --> 00:22:13,934 line:-2
请注意我已经在编辑器中得到了一个
编译程序报错


400
00:22:14,001 --> 00:22:15,435 line:-1
甚至没有生成我的代码


401
00:22:15,969 --> 00:22:18,839 line:-1
这些叫做实时问题 在你输入时发生


402
00:22:19,973 --> 00:22:22,676 line:-2
那么如果我点击实时问题
我得到一个修复它


403
00:22:22,743 --> 00:22:24,912 line:-1
问我是否想添加缺失的情况


404
00:22:24,978 --> 00:22:26,647 line:-1
我想 因此我要继续并点击它


405
00:22:33,153 --> 00:22:35,122 line:-1
现在当计时器为无时


406
00:22:35,455 --> 00:22:37,124 line:-1
我希望状态是已停止


407
00:22:38,258 --> 00:22:40,861 line:-2
现在我不想对可以被包装起来的
所有可能的值


408
00:22:41,128 --> 00:22:43,463 line:-1
都使用同一个设置


409
00:22:43,764 --> 00:22:46,900 line:-1
我想明确每一个值的情况


410
00:22:47,267 --> 00:22:50,671 line:-2
因此我要把这个下划线改为第一个值
即正在运行


411
00:22:51,405 --> 00:22:52,840 line:-1
现在我已经完成了


412
00:22:52,906 --> 00:22:55,242 line:-1
这个开关语句已经不再面面俱到了


413
00:22:55,642 --> 00:22:57,811 line:-1
因此我得到了另一个实时问题


414
00:22:58,245 --> 00:23:01,081 line:-2
有另一个修复它
用于添加最后剩余的情况


415
00:23:02,149 --> 00:23:03,617 line:-1
我不需要…


416
00:23:04,318 --> 00:23:07,120 line:-1
这个关联值 因此我要继续并移除它


417
00:23:09,122 --> 00:23:12,492 line:-2
你可能已经注意到这两个名称
正在运行和已暂停


418
00:23:12,559 --> 00:23:16,363 line:-1
与这个状态枚举的剩余的情况相同


419
00:23:16,697 --> 00:23:20,901 line:-2
我可以使用多光标编辑
来迅速地填写代码占位符


420
00:23:21,702 --> 00:23:23,537 line:-1
目前我有一个插入点


421
00:23:23,837 --> 00:23:27,007 line:-2
我可以添加另一个插入点
按住Control和Shift


422
00:23:27,374 --> 00:23:30,310 line:-1
并点击我要放置下一个插入点的位置


423
00:23:31,745 --> 00:23:33,914 line:-1
现在我有多个插入点


424
00:23:34,214 --> 00:23:39,520 line:-2
我可以实施任意命令
该命令将对每个插入点起作用


425
00:23:40,187 --> 00:23:42,322 line:-1
要了解所有可用的命令


426
00:23:42,789 --> 00:23:44,658 line:-1
你可以进入Xcode首选项


427
00:23:45,492 --> 00:23:46,927 line:-1
选择按键绑定标签


428
00:23:47,494 --> 00:23:50,764 line:-2
在这里你可以看到所有命令
及其按键绑定


429
00:23:50,831 --> 00:23:53,233 line:-2
你甚至可以把按键绑定修改为
任意你想要的组合


430
00:23:54,501 --> 00:23:55,636 line:-1
我现在可以给你展示其中一些


431
00:23:56,403 --> 00:23:57,771 line:-1
我可以选择词比如返回、


432
00:23:58,438 --> 00:24:03,110 line:-2
复制、跳转到下一个占位符、
键入和粘贴


433
00:24:04,444 --> 00:24:05,512 line:-1
现在我们已经完成了


434
00:24:11,118 --> 00:24:13,287 line:-1
这是要实施我们的app的基本功能


435
00:24:13,353 --> 00:24:14,955 line:-1
所需要的全部代码


436
00:24:15,622 --> 00:24:17,558 line:-1
在我们运行和调试之前


437
00:24:17,858 --> 00:24:19,893 line:-2
让我们回顾一下
我们在源代码编辑器中学到了什么


438
00:24:20,627 --> 00:24:21,828 line:-1
（演示）


439
00:24:22,229 --> 00:24:23,697 line:-1
（总结）


440
00:24:24,831 --> 00:24:27,401 line:-2
我们了解了Xcode的
交互式Canvas如何


441
00:24:27,467 --> 00:24:29,469 line:-1
帮助我们预览app的UI


442
00:24:29,837 --> 00:24:32,406 line:-1
以及如何帮助我们编辑视图的外观


443
00:24:33,740 --> 00:24:37,311 line:-2
我们了解了代码完成
如何极大地加速了开发过程


444
00:24:38,512 --> 00:24:41,415 line:-2
然后我们了解了
Xcode如何从行动菜单中


445
00:24:41,481 --> 00:24:43,517 line:-1
帮助我们自动转换代码结构


446
00:24:43,584 --> 00:24:45,686 line:-1
并给代码结构添加功能


447
00:24:46,887 --> 00:24:49,823 line:-1
最后我们了解了实时问题和修复它


448
00:24:49,890 --> 00:24:53,360 line:-2
如何帮助我们修复编译程序报错
甚至在创建我们的项目之前


449
00:24:55,128 --> 00:24:58,165 line:0
要获取更多关于
Swift语言的新功能


450
00:24:58,565 --> 00:25:00,667 line:0
或SwiftUI框架的信息…


451
00:25:00,734 --> 00:25:02,669 line:0
SwiftUI框架
用于创建我们的视图


452
00:25:02,736 --> 00:25:04,438 line:-1
请参看Swift的新功能


453
00:25:04,505 --> 00:25:07,040 line:0
以及SwiftUI入门演讲视频


454
00:25:07,975 --> 00:25:09,943 line:0
现在我们已经准备运行app了


455
00:25:10,544 --> 00:25:11,879 line:0
我要把舞台交给Honza


456
00:25:11,945 --> 00:25:13,146 line:0
她会带我们运行并调试app


457
00:25:13,480 --> 00:25:14,581 line:-1
（运行和调试）


458
00:25:19,987 --> 00:25:20,888 line:-1
谢谢Holly


459
00:25:21,355 --> 00:25:23,824 line:-2
大家好 我是Honza
我是Xcode的一名软件工程师


460
00:25:24,892 --> 00:25:26,960 line:-1
现在Prachi创建了项目


461
00:25:27,227 --> 00:25:28,862 line:-1
Holly添加了一些代码


462
00:25:29,296 --> 00:25:32,900 line:0
接下来我们要讲
如何在模拟器和实际设备上


463
00:25:33,300 --> 00:25:35,235 line:0
创建、运行和调试app


464
00:25:36,069 --> 00:25:38,906 line:0
然后我们要添加一个
Swift程序包依赖关系


465
00:25:38,972 --> 00:25:40,908 line:-1
那可以让我们向app中添加新功能


466
00:25:41,508 --> 00:25:42,576 line:-1
让我们开始吧


467
00:25:50,350 --> 00:25:53,487 line:-1
Prachi已经讲了如何创建


468
00:25:53,887 --> 00:25:55,789 line:-2
并使用工具栏中的
运行按钮运行app


469
00:25:56,223 --> 00:25:58,725 line:-1
但我们还可以从产品菜单中实现


470
00:25:58,792 --> 00:26:03,363 line:-2
我们可以选择运行、测试、存档、
创建等等


471
00:26:03,964 --> 00:26:07,000 line:-1
那么目前我要在模拟器中运行app


472
00:26:09,803 --> 00:26:11,038 line:-1
这个app的创建、安装和启动


473
00:26:11,405 --> 00:26:13,907 line:-1
是在iPhone模拟器上


474
00:26:14,241 --> 00:26:17,077 line:-1
并且模拟器app会自动进入前台


475
00:26:18,178 --> 00:26:20,480 line:-1
这就是我们的app现在的样子


476
00:26:21,682 --> 00:26:23,283 line:-1
因为我们进展太快了


477
00:26:23,350 --> 00:26:26,253 line:-2
让我们用我们的新app
做一个快速冥想


478
00:26:26,753 --> 00:26:29,456 line:-1
我所要做的就是点击播放按钮


479
00:26:29,523 --> 00:26:31,625 line:-1
并开始一个新的三分钟冥想


480
00:26:34,294 --> 00:26:35,829 line:-1
那么冥想开始了 没有任何问题


481
00:26:36,363 --> 00:26:39,466 line:-2
但播放图标却没有发生改变
我觉得这不对


482
00:26:40,200 --> 00:26:41,502 line:-1
就像在音乐app中一样


483
00:26:41,835 --> 00:26:45,572 line:-1
我们希望当冥想暂停时显示播放图标


484
00:26:45,873 --> 00:26:48,509 line:-1
当冥想正在运行时显示暂停图标


485
00:26:49,243 --> 00:26:51,345 line:-2
因此我们要在Xcode中使用
调试器整合


486
00:26:51,411 --> 00:26:53,580 line:-1
帮助我们发现并修复这个错误


487
00:26:55,649 --> 00:26:58,285 line:-1
要运行附加有调试器的app


488
00:26:58,352 --> 00:26:59,753 line:-1
我不需要做任何特别的操作


489
00:27:00,254 --> 00:27:02,623 line:-1
因为当我刚运行app时


490
00:27:02,890 --> 00:27:04,892 line:-1
Xcode自动附加了调试器


491
00:27:07,895 --> 00:27:10,397 line:-2
因此我要让app
在模拟器中继续运行


492
00:27:10,731 --> 00:27:11,798 line:-1
并返回到Xcode中


493
00:27:12,566 --> 00:27:14,735 line:-2
我们要开始查看
MeditationView


494
00:27:15,335 --> 00:27:18,305 line:-2
我们通过使用跳转栏进入
MeditationView


495
00:27:20,440 --> 00:27:22,676 line:-2
MeditationView
用于显示


496
00:27:22,743 --> 00:27:25,412 line:-1
播放图标和剩余的时间标签


497
00:27:25,913 --> 00:27:28,015 line:-1
在这里看起来我们得到了


498
00:27:28,682 --> 00:27:30,117 line:-2
来自
MeditationController的


499
00:27:30,517 --> 00:27:32,019 line:-2
displayedIcon
属性的图片


500
00:27:32,953 --> 00:27:34,354 line:-2
因此要进入
MeditationController


501
00:27:34,421 --> 00:27:36,924 line:-2
我要命令点击
displayedIcon


502
00:27:37,191 --> 00:27:38,659 line:-1
并选择跳转到目的地


503
00:27:39,860 --> 00:27:42,196 line:-2
在这里我们在
MeditationController中


504
00:27:43,096 --> 00:27:44,565 line:-2
我要向displayedIcon
getter属性的第二行


505
00:27:45,065 --> 00:27:48,402 line:-1
添加一个断点


506
00:27:48,836 --> 00:27:50,437 line:-1
通过点击行编号实现


507
00:27:52,372 --> 00:27:55,042 line:-1
因为app仍在模拟器中运行


508
00:27:55,108 --> 00:27:56,777 line:-1
并且计时器仍在计时


509
00:27:57,144 --> 00:28:00,814 line:-2
立即就击中了断点
并以绿色突显那行代码


510
00:28:02,549 --> 00:28:05,786 line:-1
断点通常会当击中某行特定的代码时


511
00:28:05,853 --> 00:28:07,988 line:-1
暂停app的执行


512
00:28:09,456 --> 00:28:11,358 line:-1
因此现在在Xcode窗口底部


513
00:28:11,692 --> 00:28:12,860 line:-1
让我把它变大点


514
00:28:13,327 --> 00:28:14,761 line:-1
我们有调试区


515
00:28:14,828 --> 00:28:16,730 line:-1
调试区顶部是调试栏


516
00:28:16,797 --> 00:28:19,032 line:-1
调试栏中有按钮可以控制调试器


517
00:28:19,366 --> 00:28:22,169 line:-1
并激活功能 比如浏览调试器


518
00:28:22,236 --> 00:28:24,071 line:-1
内存图形调试器等等


519
00:28:25,072 --> 00:28:27,508 line:-1
在它下边 左侧是变量视图


520
00:28:27,841 --> 00:28:29,309 line:-1
右侧是控制台


521
00:28:30,511 --> 00:28:33,213 line:-1
最后在Xcode窗口的左侧


522
00:28:33,514 --> 00:28:34,882 line:-1
我们有调试导航器


523
00:28:35,215 --> 00:28:36,783 line:-2
其中包含有关我们正在运行的
app的相关信息


524
00:28:36,850 --> 00:28:39,453 line:-2
比如它做了多少工作
它使用了多少内存


525
00:28:40,020 --> 00:28:41,154 line:-1
在它下边


526
00:28:41,221 --> 00:28:42,289 line:-1
我们有调用栈


527
00:28:42,689 --> 00:28:45,893 line:-2
调用栈是关于
如何调用这段代码的记录


528
00:28:47,027 --> 00:28:49,663 line:-2
当我在调用栈中
选择一个不同的框架时


529
00:28:50,197 --> 00:28:52,399 line:-2
Xcode将在这里
切换源代码编辑器、


530
00:28:52,466 --> 00:28:54,801 line:-1
调试器甚至是变量


531
00:28:56,236 --> 00:28:59,473 line:-1
我要切换回原始框架


532
00:28:59,873 --> 00:29:01,575 line:-1
我们要返回去尝试修复


533
00:29:01,642 --> 00:29:05,112 line:-2
当我们开始冥想之后
图标没有发生变更的错误


534
00:29:06,980 --> 00:29:09,683 line:-1
让我们看一下现在要使用哪个图标


535
00:29:10,851 --> 00:29:12,786 line:-1
我可以通过选择变量


536
00:29:13,487 --> 00:29:16,623 line:-1
并点击底部的快速查看按钮实现


537
00:29:17,558 --> 00:29:19,259 line:-1
在这里我们得到了一个预览


538
00:29:21,728 --> 00:29:25,365 line:-1
因为我们所预览的变量是个图片


539
00:29:25,432 --> 00:29:29,002 line:-2
我们实际上得到了一个渲染版
但在Xcode中损坏了


540
00:29:30,304 --> 00:29:35,008 line:-1
快速查看预览支持图片、颜色、视图


541
00:29:35,075 --> 00:29:37,411 line:-2
以及实施了调试快速查看对象方法的
任意自定义对象


542
00:29:39,413 --> 00:29:43,050 line:-2
因此在预览中我们可以看到
我们仍显示播放图标


543
00:29:43,417 --> 00:29:45,152 line:-1
即使冥想已经正在运行中了


544
00:29:46,186 --> 00:29:48,622 line:-2
因此我想是否因为
MeditationController


545
00:29:48,689 --> 00:29:49,590 line:-1
处于错误的状态


546
00:29:50,457 --> 00:29:51,658 line:-1
为了找到答案


547
00:29:52,059 --> 00:29:55,395 line:-2
我要扩展引用MeditationController的
self变量


548
00:29:55,462 --> 00:29:58,232 line:-1
我们在这里进行调试并显示属性


549
00:29:58,599 --> 00:30:01,134 line:-1
其中一个是状态属性


550
00:30:01,201 --> 00:30:03,270 line:-2
它告诉我们
MeditationController


551
00:30:03,337 --> 00:30:04,771 line:-1
是正在运行状态


552
00:30:06,073 --> 00:30:07,541 line:-1
这正是我所期待的


553
00:30:07,808 --> 00:30:10,777 line:-2
那意味着所显示的图标
getter属性


554
00:30:10,844 --> 00:30:14,281 line:-1
在选择要显示的图标时


555
00:30:14,581 --> 00:30:16,083 line:-2
并没有考虑到
MeditationController的状态


556
00:30:16,950 --> 00:30:18,051 line:-1
因此为了修复这个问题


557
00:30:18,519 --> 00:30:21,488 line:-2
我要检查MeditationController
是否正在运行


558
00:30:22,322 --> 00:30:25,792 line:-2
如果是 我们将显示…
我们将显示暂停图标


559
00:30:28,462 --> 00:30:30,330 line:-1
否则我们就显示播放图标


560
00:30:31,198 --> 00:30:32,933 line:-1
现在因为我不再需要断点了


561
00:30:33,000 --> 00:30:37,004 line:-2
我要移除它
我把它拖拽出来并释放它


562
00:30:37,771 --> 00:30:39,773 line:-1
因为我们刚刚修改了代码


563
00:30:40,407 --> 00:30:43,777 line:-1
我要停止app并在此点击运行按钮


564
00:30:44,311 --> 00:30:45,846 line:-1
这会重新编译项目


565
00:30:45,913 --> 00:30:48,715 line:-2
在模拟器中
重新安装并重新启动app


566
00:30:49,550 --> 00:30:52,019 line:-1
这一次 当我开始新的冥想时


567
00:30:52,586 --> 00:30:54,855 line:-1
我们可以看到图标从播放改成了暂停


568
00:30:55,222 --> 00:30:56,557 line:-1
错误已经修复了 太棒了


569
00:31:03,397 --> 00:31:04,831 line:-1
我们要暂时停止app


570
00:31:06,099 --> 00:31:08,001 line:-1
并隐藏调试区


571
00:31:09,903 --> 00:31:12,272 line:-1
我们已经在模拟器中运行了app


572
00:31:12,339 --> 00:31:14,741 line:-2
这是一种快速迭代
我们的代码的好方法


573
00:31:15,375 --> 00:31:18,946 line:-2
但我还想在真实设备上
安装我的app


574
00:31:19,346 --> 00:31:21,381 line:-1
这样我就可以随时随地开始冥想了


575
00:31:22,583 --> 00:31:25,419 line:-1
首先 要运行…


576
00:31:25,485 --> 00:31:27,955 line:-2
要在已连接的设备上
安装并运行app


577
00:31:28,322 --> 00:31:30,858 line:-2
我们需要用Apple ID
登录到Xcode中


578
00:31:31,859 --> 00:31:34,194 line:-1
我们首先要进入Xcode首选项


579
00:31:35,896 --> 00:31:38,232 line:-1
选择一个账户 然后添加新账户


580
00:31:39,266 --> 00:31:40,567 line:-1
我们选择Apple ID


581
00:31:41,702 --> 00:31:43,370 line:-1
输入用户名和密码


582
00:31:53,180 --> 00:31:55,382 line:-2
然后我们就用Apple ID
登录了Xcode


583
00:31:55,916 --> 00:31:58,185 line:-1
接下来关闭窗口


584
00:31:58,252 --> 00:32:01,522 line:-1
进入项目导航器并选择项目


585
00:32:02,856 --> 00:32:05,025 line:-1
在这里我们要选择app目标


586
00:32:05,092 --> 00:32:07,561 line:-1
并进入签名&权限标签


587
00:32:08,595 --> 00:32:11,131 line:-1
在这里我们可以管理代码签名和权限


588
00:32:12,099 --> 00:32:15,602 line:-2
权限可以让我们声明我们的app
所需要的权限


589
00:32:16,170 --> 00:32:19,339 line:-2
在我们的例子中
我们要访问HealthKit数据


590
00:32:19,706 --> 00:32:23,610 line:-2
从而能写入用户在我们的app中
所实施的冥想


591
00:32:23,677 --> 00:32:26,480 line:-2
但同时也读取用户在其它app上
所实施的冥想


592
00:32:26,813 --> 00:32:29,950 line:-2
从而我们可以给他们显示
他们所有冥想行为的统计信息


593
00:32:31,185 --> 00:32:32,553 line:-1
因此我们要添加一个新权限


594
00:32:34,488 --> 00:32:37,324 line:-2
搜索健康
并选择HealthKit权限


595
00:32:38,992 --> 00:32:42,362 line:-2
接下来我把这个iPhone
连接到我的Mac


596
00:32:43,630 --> 00:32:46,266 line:-1
我要把iPhone作为运行目的地


597
00:32:48,068 --> 00:32:48,936 line:-1
我要点击运行


598
00:32:49,870 --> 00:32:52,039 line:-2
现在已经针对该设备进行了
app的创建


599
00:32:52,539 --> 00:32:53,941 line:-1
并在该设备上进行了安装和启动


600
00:32:54,007 --> 00:32:56,143 line:-1
从而你可以看到屏幕上正在进行什么


601
00:32:56,610 --> 00:33:00,647 line:-2
我们要用QuickTime播放器
它可以让我把iPhone屏幕


602
00:33:01,048 --> 00:33:02,149 line:-1
传回Mac


603
00:33:04,151 --> 00:33:06,987 line:-2
我们现在正在真正的iPhone上
运行Mind


604
00:33:07,054 --> 00:33:10,190 line:-2
我可以拔下这台手机
随时随地都可以开始冥想


605
00:33:11,024 --> 00:33:11,925 line:-1
现在…


606
00:33:12,526 --> 00:33:13,493 line:-1
让我停止app…


607
00:33:14,695 --> 00:33:17,197 line:-1
把目的地切换回模拟器


608
00:33:18,398 --> 00:33:20,501 line:-1
当你想查找关于设备的更多信息时


609
00:33:20,934 --> 00:33:23,971 line:-1
你可以进入窗口、设备、模拟器


610
00:33:24,605 --> 00:33:26,173 line:-1
我们可以在模拟器中看到名称、


611
00:33:26,240 --> 00:33:28,809 line:-1
类型以及设备的OS版本


612
00:33:29,176 --> 00:33:32,713 line:-1
并且我们还可以看到已安装的app


613
00:33:33,413 --> 00:33:35,516 line:-1
但同时我们其实可以配置设备


614
00:33:35,849 --> 00:33:38,285 line:-1
通过Wi-Fi连接Mac


615
00:33:38,785 --> 00:33:41,655 line:-2
那样我就不需要用USB线
把手机插到Mac上了


616
00:33:41,722 --> 00:33:44,992 line:-1
但我仍然可以在手机上创建、


617
00:33:45,058 --> 00:33:46,360 line:-1
运行并调试app


618
00:33:53,233 --> 00:33:57,204 line:-1
现在我们已经成功地在模拟器上


619
00:33:57,504 --> 00:34:00,474 line:-1
和设备上运行了我们的app


620
00:34:00,541 --> 00:34:01,675 line:-2
并且我们甚至还使用调试器
修复了一个错误


621
00:34:01,742 --> 00:34:04,077 line:-2
让我们讲一下如何向app中
添加更多功能


622
00:34:05,646 --> 00:34:08,081 line:-1
我希望我们的app可以显示


623
00:34:08,415 --> 00:34:09,850 line:-1
关于用户的冥想的统计信息


624
00:34:09,917 --> 00:34:13,954 line:-2
比如他们进行了多少次冥想、
平均持续时间是多少等等


625
00:34:14,755 --> 00:34:16,023 line:-1
但计算统计信息


626
00:34:16,089 --> 00:34:18,559 line:-2
并不只是我们的冥想app的一个
特定问题


627
00:34:19,059 --> 00:34:22,362 line:-2
我们创建了一个Swift程序包
叫做QuickStats


628
00:34:22,429 --> 00:34:23,764 line:-1
它可以帮助我们解决那个问题


629
00:34:25,532 --> 00:34:29,402 line:-2
从根本上说
Swift程序包是一个文件夹


630
00:34:29,469 --> 00:34:33,407 line:-2
其中包含你可以用于创建产品的
清单文件和源文件


631
00:34:33,473 --> 00:34:34,808 line:-1
比如我们的QuickStats库


632
00:34:36,376 --> 00:34:37,911 line:-1
要把项目添加到我们的程序包中


633
00:34:38,612 --> 00:34:42,748 line:-2
我要进入项目编辑器
并选择顶部的Swift程序包


634
00:34:43,483 --> 00:34:45,819 line:-2
在这里我要向我们的项目中
添加一个新的程序包


635
00:34:46,620 --> 00:34:49,889 line:-2
因为Prachi用我们的账户
登录了GitHub


636
00:34:49,956 --> 00:34:53,927 line:-2
我们可以看到我们的账户所收藏的
所有资源库


637
00:34:54,761 --> 00:34:57,030 line:-2
QuickStats就位于顶部
我要选择它


638
00:34:58,298 --> 00:34:59,199 line:-1
点击下一步


639
00:34:59,566 --> 00:35:01,401 line:-1
我们要使用版本1 看起来不错


640
00:35:05,305 --> 00:35:08,141 line:-1
我们要在这里确认


641
00:35:08,208 --> 00:35:09,576 line:-2
我们的app已链接
QuickStats库


642
00:35:10,844 --> 00:35:11,912 line:-1
我要点击完成


643
00:35:12,246 --> 00:35:15,983 line:-2
现在Xcode在
后台管理程序包的获取


644
00:35:16,783 --> 00:35:18,385 line:-1
在项目导航器中


645
00:35:18,452 --> 00:35:20,521 line:-2
有一个Swift程序包
依赖关系部分


646
00:35:20,854 --> 00:35:23,657 line:-1
我可以浏览程序包的资源


647
00:35:23,957 --> 00:35:27,561 line:-2
这样可以很好地理解
程序包是如何在底层运作的


648
00:35:29,696 --> 00:35:31,398 line:-1
现在 在我把舞台交还给Holly


649
00:35:31,465 --> 00:35:34,968 line:-2
把程序包整合到我们的项目中去之前
让我么快速回顾一下


650
00:35:38,438 --> 00:35:39,706 line:-1
（演示）


651
00:35:42,242 --> 00:35:46,580 line:-2
我们了解了如何在模拟器上
运行并调试app


652
00:35:47,281 --> 00:35:50,184 line:-2
我们还在实际设备上运行了
我们的app


653
00:35:51,185 --> 00:35:53,921 line:-2
然后我们向项目中添加了
Swift程序包依赖关系


654
00:35:53,987 --> 00:35:57,191 line:-1
那可以让我们向app中添加功能


655
00:35:58,592 --> 00:35:59,993 line:-1
（总结）


656
00:36:01,361 --> 00:36:04,531 line:0
这些是与这个演示中所讨论的话题
相关的演讲


657
00:36:04,932 --> 00:36:06,533 line:0
接下来欢迎Holly返回舞台


658
00:36:06,900 --> 00:36:07,835 line:0
谢谢


659
00:36:10,604 --> 00:36:12,406 line:0
（使用程序包和框架）


660
00:36:14,708 --> 00:36:15,676 line:-1
谢谢Honza


661
00:36:17,845 --> 00:36:18,912 line:-1
在这个演示中


662
00:36:19,179 --> 00:36:22,583 line:-2
我们将了解如何在我们的项目中使用
QuickStats程序包


663
00:36:23,283 --> 00:36:26,987 line:-1
然后我们将了解如何重构我们的项目


664
00:36:27,054 --> 00:36:29,323 line:-1
通过把模型代码移动到框架中实现


665
00:36:30,791 --> 00:36:32,292 line:-1
先让我们返回到Xcode中


666
00:36:42,169 --> 00:36:44,371 line:-2
现在我们已经添加了
QuickStats程序包


667
00:36:44,805 --> 00:36:49,109 line:-2
我们可以向我们的代码中导入程序包
并开始使用它的公共API


668
00:36:49,810 --> 00:36:50,944 line:-1
Honza刚才提到了


669
00:36:51,011 --> 00:36:54,982 line:-2
我们想在ContentView中
给用户显示一些


670
00:36:55,249 --> 00:36:56,250 line:-1
与他们的冥想会话相关的统计信息


671
00:36:57,251 --> 00:37:00,354 line:-2
我们要使用快速打开跳转回
ContentView.swift


672
00:37:00,687 --> 00:37:02,222 line:-1
你可以在文件菜单下找到快速打开


673
00:37:04,324 --> 00:37:05,526 line:-1
在快速打开中


674
00:37:05,592 --> 00:37:10,097 line:-2
我可以输入任意类型名称、
方法名称、导航目的地名称


675
00:37:10,898 --> 00:37:13,166 line:-2
我要输入Contentview
并按回车


676
00:37:14,434 --> 00:37:17,237 line:-2
我要做的第一件事就是导入
QuickStats


677
00:37:20,107 --> 00:37:23,443 line:-2
现在我们已经准备好开始使用
这个程序包中的API了


678
00:37:24,678 --> 00:37:27,181 line:-2
我要在从一个代码片段中
在contentView下方添加一些代码


679
00:37:27,481 --> 00:37:31,285 line:-2
那会实施一个
StatisticsView


680
00:37:31,351 --> 00:37:33,921 line:-1
它接受一组冥想会话


681
00:37:34,354 --> 00:37:39,159 line:-2
并用QuickStats API
显示关于这些会话的统计信息


682
00:37:40,594 --> 00:37:43,597 line:-2
因为我有访问
全部程序包源代码的权限


683
00:37:43,864 --> 00:37:46,366 line:-1
我可以跳转到源代码实施


684
00:37:46,433 --> 00:37:48,101 line:-1
来了解它是如何运作的


685
00:37:48,702 --> 00:37:52,606 line:-2
那么如果我命令点击
QuickStats.averageDuration


686
00:37:52,673 --> 00:37:54,474 line:-1
并选择跳转到目的地


687
00:37:55,042 --> 00:37:58,378 line:-1
我现在正在查看这个方法的实际实施


688
00:37:59,379 --> 00:38:02,816 line:-2
我可以看到
文件位于项目导航器的哪个位置


689
00:38:02,883 --> 00:38:05,919 line:-2
通过点击导航、
在项目导航器中显示来实现


690
00:38:06,587 --> 00:38:09,022 line:-2
现在我们可以看到
我们正在程序包源代码中


691
00:38:09,957 --> 00:38:12,226 line:-1
我可以导航回之前的文件


692
00:38:12,292 --> 00:38:15,095 line:-2
通过使用调专栏中的
编辑器历史按钮实现


693
00:38:16,763 --> 00:38:20,000 line:-2
现在让我们向ContentView中
添加StatisticsView


694
00:38:20,701 --> 00:38:23,103 line:-1
但在此之前我想显示Canvas


695
00:38:29,610 --> 00:38:31,612 line:-2
我要放大
这样我们就能看到完整的设备


696
00:38:33,247 --> 00:38:35,816 line:-1
我要在占位器下添加StatisticsView


697
00:38:36,817 --> 00:38:38,752 line:-1
它接受一组会话


698
00:38:38,819 --> 00:38:40,921 line:-2
我们可以从MeditationController中
获得这组会话


699
00:38:42,890 --> 00:38:46,059 line:-2
现在我们可以看到StatisticsView
位于ContentView底部


700
00:38:46,960 --> 00:38:50,163 line:-2
现在我已经完成了UI
我再次关闭Canvas


701
00:38:52,499 --> 00:38:55,836 line:-1
现在我们想开始编写模型的单元测试


702
00:38:56,203 --> 00:38:57,437 line:-1
为了让它更简单点


703
00:38:57,771 --> 00:39:01,475 line:-2
我们要把模型代码移到一个
可测试的单元框架中


704
00:39:02,075 --> 00:39:04,444 line:-1
我可以选择使用Swift程序包


705
00:39:04,811 --> 00:39:07,014 line:-1
但我只想与我的团队共享这段代码


706
00:39:07,281 --> 00:39:09,449 line:-1
因此我要选择框架来代替程序包


707
00:39:10,217 --> 00:39:11,952 line:-1
我们需要创建一个新目标…


708
00:39:14,488 --> 00:39:16,590 line:-1
并且我可以使用过滤器来搜索框架


709
00:39:18,358 --> 00:39:20,460 line:-2
我要把这个框架命名为
MindKit


710
00:39:22,229 --> 00:39:25,966 line:-2
我想确保在单元测试内
勾选这个复选框


711
00:39:26,300 --> 00:39:29,670 line:-1
从而当我创建框架时


712
00:39:29,736 --> 00:39:30,804 line:-1
自动生成单元测试目标


713
00:39:34,741 --> 00:39:36,877 line:-1
现在在我迁移代码之前


714
00:39:36,944 --> 00:39:40,814 line:-2
我想把MindKit导入到
我所了解的需要它的所有文件中


715
00:39:41,615 --> 00:39:44,151 line:-2
我知道我要迁移
HealthStore.swift


716
00:39:44,551 --> 00:39:48,422 line:-2
这个文件有两个公共类型
在整个项目中都要使用


717
00:39:48,956 --> 00:39:51,291 line:-1
我要使用查找导航器


718
00:39:51,358 --> 00:39:53,193 line:-1
来查找要在哪里使用这两个类型


719
00:39:54,061 --> 00:39:55,596 line:-1
我要切换到查找导航器


720
00:39:56,697 --> 00:40:00,200 line:-1
查找导航器可以让我搜索整个项目


721
00:40:00,267 --> 00:40:04,204 line:-2
搜索文本、标志引用、正则表达式
等等


722
00:40:05,005 --> 00:40:06,773 line:-1
目前我想查找正则表达式…


723
00:40:08,108 --> 00:40:11,278 line:-2
我想搜索…
HealthSession


724
00:40:11,912 --> 00:40:13,814 line:-1
或HealthStore


725
00:40:14,248 --> 00:40:15,849 line:-1
然后我按回车查看结果


726
00:40:17,284 --> 00:40:20,053 line:-2
我知道我要把
HealthStore.swift


727
00:40:20,120 --> 00:40:23,624 line:-2
和HealthStoreFactory.swift
迁移到MindKit框架中


728
00:40:23,957 --> 00:40:27,227 line:-1
我可以通过点击公开三角形查看结果


729
00:40:28,695 --> 00:40:30,964 line:-1
现在我要导航到每一个文件


730
00:40:31,565 --> 00:40:32,699 line:-1
并添加导入


731
00:40:34,801 --> 00:40:36,570 line:-1
因此我要跳转到文件的顶部…


732
00:40:37,804 --> 00:40:38,906 line:-1
添加导入


733
00:40:39,673 --> 00:40:42,209 line:-2
最后我们在ContentView.swift中
也需要它


734
00:40:45,145 --> 00:40:46,847 line:-1
现在我们已经准备好迁移文件了


735
00:40:46,914 --> 00:40:48,782 line:-1
因此我要切换回项目导航器


736
00:40:49,716 --> 00:40:52,719 line:-2
我提到过 我想迁移
HealthStore.swift


737
00:40:53,287 --> 00:40:56,390 line:-2
但我还想迁移
HealthStoreFactory.swift


738
00:40:57,191 --> 00:41:00,260 line:-1
我可以在项目导航器中选择多个文件


739
00:41:00,327 --> 00:41:04,298 line:-2
通过按住Command并点击
我想要选择的其它文件即可实现


740
00:41:05,199 --> 00:41:09,169 line:-2
然后我可以把这些选中的文件
拖动到MindKit群组中


741
00:41:10,671 --> 00:41:13,574 line:-2
当我这样做时
Xcode会自动更新


742
00:41:13,640 --> 00:41:15,642 line:-1
这些文件的目标成员


743
00:41:16,143 --> 00:41:18,879 line:-2
我们可以对此进行验证
通过显示检查器…


744
00:41:19,913 --> 00:41:23,116 line:-2
我们看到编辑器中打开了
文件的目标成员


745
00:41:23,183 --> 00:41:26,753 line:-2
即HealthStore.swift
它现在是MindKit框架的目标


746
00:41:27,120 --> 00:41:29,056 line:-1
而不是Mind app的目标了


747
00:41:30,924 --> 00:41:34,194 line:-1
现在我还没有忘记我们仍需要实施


748
00:41:34,261 --> 00:41:36,263 line:-2
与HealthKit相交互的
HealthStore


749
00:41:36,997 --> 00:41:38,065 line:-1
我们现在就做


750
00:41:38,131 --> 00:41:41,235 line:-2
以便我们可以开始把真正的健康数据
整合到我们的app中


751
00:41:42,169 --> 00:41:44,771 line:-2
我要做的第一件事
就是导入HealthKit


752
00:41:46,807 --> 00:41:48,942 line:-2
现在我之前从未用过
HealthKit


753
00:41:49,243 --> 00:41:51,945 line:-1
因此我想阅读一下文档


754
00:41:52,746 --> 00:41:56,850 line:-2
我可以直接在Xcode中阅读文档
打开开发者文档窗口即可实现


755
00:41:56,917 --> 00:41:58,519 line:-1
你可以在帮助菜单中找到文档


756
00:42:00,554 --> 00:42:03,457 line:-1
在这里你可以搜索来自SDK的框架


757
00:42:03,891 --> 00:42:05,492 line:-1
搜索特定API


758
00:42:05,559 --> 00:42:09,563 line:-2
或搜索编程话题
比如请求访问健康数据


759
00:42:10,163 --> 00:42:11,532 line:-2
因此在这里
我要搜索HealthKit


760
00:42:14,501 --> 00:42:16,837 line:-1
现在我可以浏览


761
00:42:16,904 --> 00:42:18,238 line:-1
整个框架的所有文档了


762
00:42:18,305 --> 00:42:20,073 line:-1
这在离线时也可用


763
00:42:21,041 --> 00:42:24,244 line:-2
幸运的是我已经把我所需要的
全部代码都放在了一个代码片段中


764
00:42:24,745 --> 00:42:26,780 line:-1
我要把它添加到文件末端


765
00:42:29,483 --> 00:42:31,952 line:-1
在我们开始编写单元测试之前


766
00:42:32,219 --> 00:42:36,690 line:-2
我想在MindKit框架中添加
我自己的API文档


767
00:42:37,024 --> 00:42:38,725 line:-1
从HealthStore协议开始


768
00:42:39,526 --> 00:42:43,197 line:-2
我可以使用一种叫做文档注释的
特殊注释实现


769
00:42:44,097 --> 00:42:47,801 line:-2
Xcode知道如何给声明生成
文档注释模板


770
00:42:48,468 --> 00:42:51,038 line:-1
这个功能在行动菜单中可用


771
00:42:51,772 --> 00:42:55,776 line:-2
因此我要命令点击
我想要给它添加文档的第一个API


772
00:42:55,843 --> 00:42:57,177 line:-1
即requestAccess


773
00:42:58,078 --> 00:43:00,080 line:-1
然后我要选择添加文档


774
00:43:01,815 --> 00:43:05,018 line:-2
现在Xcode已经插入了一个
文档注释模板


775
00:43:05,085 --> 00:43:08,222 line:-1
其中有占位符用于方法描述


776
00:43:08,288 --> 00:43:10,891 line:-1
还有它所接受的参数的描述


777
00:43:12,025 --> 00:43:14,761 line:-1
这个方法要求…


778
00:43:18,532 --> 00:43:19,666 line:-1
用户权限…


779
00:43:20,267 --> 00:43:23,237 line:-1
能访问冥想会话


780
00:43:24,771 --> 00:43:28,809 line:-2
完成参数是请求完成时
要执行的一个闭包


781
00:43:32,513 --> 00:43:35,415 line:-1
我知道这个方法可以异步执行


782
00:43:35,849 --> 00:43:40,420 line:-2
并且我想添加一个特殊注释…
用于记录这一点


783
00:43:40,487 --> 00:43:42,990 line:-2
我可以使用一个特殊的项目符号
来实现


784
00:43:43,991 --> 00:43:45,292 line:-1
现在我可以添加那个注释


785
00:43:50,931 --> 00:43:52,766 line:-1
现在我已经写好了文档


786
00:43:52,833 --> 00:43:54,101 line:-1
我可以在快速帮助中浏览它


787
00:43:55,135 --> 00:43:57,271 line:-1
再一次我们可以打开快速帮助弹出框


788
00:43:57,337 --> 00:44:01,141 line:-2
可以选择点击
我们想要浏览的文档的标志


789
00:44:01,642 --> 00:44:04,077 line:-1
现在我们可以看到我们刚写的描述


790
00:44:04,945 --> 00:44:08,615 line:-1
以及我们写的参数的描述


791
00:44:08,982 --> 00:44:12,252 line:-1
这在任意请求访问中都可用


792
00:44:18,392 --> 00:44:21,962 line:-2
要获取更多关于编写和记录
你自己的API的信息


793
00:44:22,029 --> 00:44:24,565 line:-1
请参看Swift API设计指南


794
00:44:25,232 --> 00:44:26,867 line:-1
在swift.org上可以找到它


795
00:44:27,835 --> 00:44:29,102 line:-1
（总结）


796
00:44:29,169 --> 00:44:30,237 line:-1
在这个演示中


797
00:44:30,504 --> 00:44:34,007 line:-2
我们了解了如何使用和导航
来自Swift程序包中的代码


798
00:44:35,142 --> 00:44:38,779 line:-2
我们讲了在项目中创建一个
新的框架目标


799
00:44:38,846 --> 00:44:41,448 line:-1
以及把现有代码迁移到那个框架中


800
00:44:42,816 --> 00:44:46,220 line:-2
接下来我们了解了
Xcode开发者文档窗口


801
00:44:46,587 --> 00:44:47,454 line:-1
最后


802
00:44:47,721 --> 00:44:51,291 line:-2
我们了解了如何通过文档注释
编写我们自己的文档


803
00:44:52,459 --> 00:44:56,063 line:0
现在我要把舞台交给Honza
她会与大家分享测试和发布


804
00:44:56,630 --> 00:44:57,798 line:-1
（测试和发布）


805
00:44:58,098 --> 00:44:59,099 line:-1
谢谢Holly


806
00:44:59,166 --> 00:45:00,734 line:-1
在这部分中


807
00:45:00,801 --> 00:45:04,104 line:-2
我们要讲如何在Xcode中
测试我们的代码


808
00:45:04,171 --> 00:45:06,673 line:-2
以及一旦我们准备好发布后
要如何发布我们的app


809
00:45:08,976 --> 00:45:11,545 line:-1
现在因为你的app运行得不错


810
00:45:11,912 --> 00:45:14,281 line:-1
我们需要确保它能继续适当地运行


811
00:45:15,082 --> 00:45:18,986 line:-2
增加我们对app品质的自信心的
一个好方式


812
00:45:19,253 --> 00:45:21,655 line:-1
是通过自动化测试


813
00:45:24,925 --> 00:45:27,728 line:-1
我们要给我们的app


814
00:45:27,794 --> 00:45:29,229 line:-1
编写两大类高层级测试…


815
00:45:29,563 --> 00:45:31,231 line:-1
单元测试和UI测试


816
00:45:32,933 --> 00:45:35,569 line:-1
单元测试可以确保单一组件


817
00:45:35,903 --> 00:45:40,741 line:-2
比如我们的HealthStore
能正常运行通过给它特定的输入


818
00:45:40,807 --> 00:45:44,011 line:-2
并验证输出是否与我们的预期相匹配
来实现


819
00:45:46,280 --> 00:45:49,850 line:-2
另一方面的UI测试
可以确保所有组件


820
00:45:49,917 --> 00:45:53,854 line:-2
都进行了正确集成并且
app从用户的角度来说运行无误


821
00:45:55,822 --> 00:45:57,224 line:-1
让我们返回到Xcode中


822
00:46:07,334 --> 00:46:11,305 line:-2
Holly已经创建了
MindKit框架的单元测试目标


823
00:46:11,572 --> 00:46:12,739 line:-1
叫做MindKitTests


824
00:46:13,140 --> 00:46:15,509 line:-2
但我们仍需要把它添加到
我们的测试计划中


825
00:46:16,243 --> 00:46:19,413 line:-1
测试计划是一个文件…一个资源库


826
00:46:19,713 --> 00:46:22,850 line:-1
描述了如何创建和运行测试


827
00:46:24,051 --> 00:46:27,754 line:-2
查看我们的方案使用了
哪个测试计划的方式是…


828
00:46:27,821 --> 00:46:30,224 line:-1
点击方案并点击编辑方案


829
00:46:31,458 --> 00:46:33,060 line:-1
我们要切换到测试行动


830
00:46:33,594 --> 00:46:36,663 line:-2
在这里我们可以看到我们的方案
所采用的所有测试计划


831
00:46:36,730 --> 00:46:38,265 line:-1
只有一个 即默认测试计划


832
00:46:38,665 --> 00:46:39,633 line:-1
我们要跳转到它


833
00:46:39,700 --> 00:46:42,102 line:-2
点击测试计划的名字旁边的跳转箭头
即可跳转


834
00:46:43,971 --> 00:46:47,307 line:-2
测试计划编辑器显示了
它所使用的测试目标


835
00:46:47,374 --> 00:46:50,944 line:-1
这里我们已经有了UI测试目标


836
00:46:51,211 --> 00:46:52,980 line:-1
我们稍后再编写代码


837
00:46:53,347 --> 00:46:55,816 line:-1
但我们仍需要添加单元测试的目标


838
00:46:56,917 --> 00:47:00,053 line:-1
我们通过点击底部的加号按钮


839
00:47:00,888 --> 00:47:02,523 line:-2
并选择
MindKitTests实现


840
00:47:04,658 --> 00:47:07,127 line:-2
现在让我们实际编写我们的
单元测试代码


841
00:47:08,862 --> 00:47:11,965 line:-2
我要给HealthStore
编写一些单元测试


842
00:47:12,599 --> 00:47:16,904 line:-2
我现在要做的就是控制点击
MindKitTests群组


843
00:47:17,371 --> 00:47:18,539 line:-1
并点击新文件


844
00:47:20,140 --> 00:47:22,442 line:-1
我将使用单元测试文件模板…


845
00:47:24,645 --> 00:47:28,715 line:-2
并把文件测试命名为
HealthStore


846
00:47:31,285 --> 00:47:32,419 line:-1
看起来还不错


847
00:47:33,520 --> 00:47:36,523 line:-2
在这里我们要做的第一件事就是
导入MindKit


848
00:47:36,590 --> 00:47:38,192 line:-1
因为这是代码所在的地方


849
00:47:43,630 --> 00:47:47,267 line:-2
为了既测试MindKit框架
的公共界面


850
00:47:47,334 --> 00:47:48,635 line:-1
也测试它的内部界面


851
00:47:49,036 --> 00:47:53,040 line:-1
我们要在导入中添加可测试的关键字


852
00:47:54,074 --> 00:47:56,677 line:-1
接下来我要向我们的类中


853
00:47:58,212 --> 00:47:59,880 line:-1
添加两个测试


854
00:48:00,347 --> 00:48:04,084 line:-1
第一个在我们保存冥想之后进行验证


855
00:48:04,351 --> 00:48:05,686 line:-1
我们可以马上取回它


856
00:48:06,787 --> 00:48:09,623 line:-2
第二个测试可以确保
我们可以实际上请求访问


857
00:48:09,923 --> 00:48:11,959 line:-1
读取数据


858
00:48:13,293 --> 00:48:16,630 line:-2
我要通过进入产品、测试
来运行这些测试


859
00:48:19,266 --> 00:48:21,735 line:-1
现在这些测试是针对模拟器创建的


860
00:48:21,802 --> 00:48:24,338 line:-2
并且要在iPhone XR
模拟器上运行


861
00:48:35,582 --> 00:48:36,884 line:-1
现在测试已经完成


862
00:48:36,950 --> 00:48:41,788 line:-2
我们实际上可以在源代码编辑器中的
测试名称旁边看到


863
00:48:41,855 --> 00:48:44,525 line:-1
测试菱形 表明两个测试都成功了


864
00:48:45,526 --> 00:48:46,460 line:-1
很好


865
00:48:46,894 --> 00:48:49,062 line:-1
现在我们还可以在测试导航器中


866
00:48:50,030 --> 00:48:51,298 line:-1
看到测试等级


867
00:48:52,733 --> 00:48:55,235 line:-2
我们给HealthStore
添加了一些单元测试


868
00:48:55,302 --> 00:48:58,205 line:-1
但我们想确保app的UI也没问题


869
00:48:58,906 --> 00:49:00,541 line:-2
因此我们要向UI测试中
添加一些代码


870
00:49:01,808 --> 00:49:04,545 line:-2
我要跳转到现有的
MindUITests类


871
00:49:04,611 --> 00:49:06,780 line:-1
通过在测试导航器中选中它进行跳转


872
00:49:07,548 --> 00:49:08,849 line:-1
在这里我们要添加…


873
00:49:09,783 --> 00:49:10,817 line:-1
UI测试代码


874
00:49:11,952 --> 00:49:13,854 line:-1
那会启动我们的app


875
00:49:14,621 --> 00:49:17,691 line:-1
开始一个新的冥想 数秒钟后


876
00:49:18,125 --> 00:49:19,560 line:-1
它会暂停冥想


877
00:49:20,027 --> 00:49:24,097 line:-1
然后最后它验证剩余时间标签


878
00:49:24,164 --> 00:49:25,699 line:-1
是否显示我们的预期值


879
00:49:26,934 --> 00:49:28,769 line:-1
因此我要再次运行我们的测试


880
00:49:30,204 --> 00:49:32,406 line:-1
这一次我要把模拟器带到前台来


881
00:49:32,472 --> 00:49:34,942 line:-1
以便我们可以观看UI测试运行


882
00:49:36,143 --> 00:49:39,279 line:-2
那么app已经启动
并已经开始新的冥想了


883
00:49:39,346 --> 00:49:40,614 line:-1
数秒钟之后


884
00:49:40,681 --> 00:49:42,583 line:-1
它开始暂停冥想 然后终止app


885
00:49:43,283 --> 00:49:46,987 line:-2
接下来我们还看到单元测试
启动了app一小段时间


886
00:49:48,388 --> 00:49:50,357 line:-1
现在看起来有些测试失败了


887
00:49:50,424 --> 00:49:52,159 line:-1
要了解具体发生了什么


888
00:49:52,526 --> 00:49:54,361 line:-1
我们要进入报告导航器


889
00:49:54,428 --> 00:49:56,697 line:-2
通过点击最右侧的导航器按钮
进入报告导航器


890
00:49:57,865 --> 00:50:01,502 line:-2
在这里 我选择顶部的测试行动
即最近一次的测试行动


891
00:50:02,669 --> 00:50:04,571 line:-1
然后我们就得到了测试报告


892
00:50:05,572 --> 00:50:08,075 line:-1
在这里我可以看到刚添加的UI测试


893
00:50:08,141 --> 00:50:10,244 line:-1
被标记为红色 意味着它失败了


894
00:50:10,878 --> 00:50:12,579 line:-1
要了解具体发生了什么


895
00:50:12,946 --> 00:50:14,214 line:-1
我要公开测试…


896
00:50:14,715 --> 00:50:16,950 line:-1
并深究失败的活动


897
00:50:17,551 --> 00:50:22,389 line:-2
从而了解失败的搜索结果显示
02:56不等于2:56


898
00:50:23,390 --> 00:50:24,825 line:-1
现在这开始变得有意义了


899
00:50:25,325 --> 00:50:29,162 line:-2
但要真正理解当失败发生时
屏幕上发生了什么


900
00:50:29,596 --> 00:50:31,532 line:-1
我可以公开失败自身


901
00:50:31,832 --> 00:50:33,600 line:-1
从而显示自动截图


902
00:50:34,001 --> 00:50:36,069 line:-1
我可以预览点击图标


903
00:50:36,737 --> 00:50:41,008 line:-2
在这里我可以清楚地看到
剩余计时器标签显示


904
00:50:41,341 --> 00:50:44,578 line:-2
02:56而不是
测试断言的2:56


905
00:50:46,013 --> 00:50:47,481 line:-1
我要关闭预览


906
00:50:47,548 --> 00:50:49,583 line:-1
并跳转回测试资源


907
00:50:49,650 --> 00:50:52,085 line:-2
可以通过点击
测试名称旁边的跳转箭头实现


908
00:50:53,387 --> 00:50:56,890 line:-2
在这里我们要修复这个断言
通过添加、删除零来实现


909
00:50:58,192 --> 00:51:00,994 line:-1
现在我要重新运行这一个测试


910
00:51:01,495 --> 00:51:04,398 line:-2
可以通过点击
测试名称旁边的测试菱形实现


911
00:51:06,366 --> 00:51:07,467 line:-1
再一次…


912
00:51:07,835 --> 00:51:12,039 line:-2
我们可以看到app已经启动
并开始新的冥想


913
00:51:12,773 --> 00:51:14,341 line:-1
数秒钟之后它暂停了


914
00:51:14,408 --> 00:51:16,910 line:-1
然后app被执行了 这一次…


915
00:51:17,277 --> 00:51:21,481 line:-2
终止了 抱歉 这一次
我们实际上可以看到测试菱形


916
00:51:21,782 --> 00:51:23,016 line:-1
表明测试成功


917
00:51:23,350 --> 00:51:24,184 line:-1
太棒了


918
00:51:30,123 --> 00:51:32,359 line:-2
终于 我们现在有了
一个功能性app


919
00:51:32,426 --> 00:51:35,562 line:-1
我们希望很多人能使用它


920
00:51:37,831 --> 00:51:42,302 line:-2
要在App Store或
TestFlight上发布app


921
00:51:42,369 --> 00:51:45,973 line:-2
TestFlight是Apple
beta测试服务 我们需实施存档


922
00:51:47,441 --> 00:51:52,246 line:-2
为此我们首先选择通用的
iOS设备运行目的地


923
00:51:52,813 --> 00:51:55,048 line:-1
然后选择产品存档


924
00:51:55,716 --> 00:51:58,485 line:-1
这会创建发布配置


925
00:51:58,819 --> 00:52:02,456 line:-2
并生成一个存档
我们可以用于发布我们的app


926
00:52:04,525 --> 00:52:07,494 line:-1
当它完成后 它会自动打开管理器


927
00:52:07,828 --> 00:52:09,596 line:-1
在这里当我们选择存档时


928
00:52:09,963 --> 00:52:11,798 line:-1
我们可以点击发布app


929
00:52:12,232 --> 00:52:15,202 line:-1
我们会进入把app


930
00:52:15,469 --> 00:52:18,038 line:-2
直接从Xcode提交到
Apple的流程


931
00:52:22,209 --> 00:52:25,646 line:-2
请注意要把app部署到TestFlight
或App Store


932
00:52:26,013 --> 00:52:29,816 line:-2
你需要注册与你的Apple ID
相关联的开发者账户


933
00:52:36,790 --> 00:52:38,358 line:-1
一旦app成功上传


934
00:52:39,459 --> 00:52:42,196 line:-2
你可以使用App Store
Connect网站对它进行管理


935
00:52:42,763 --> 00:52:45,866 line:-1
这样你可以要求你的朋友和家人


936
00:52:45,933 --> 00:52:47,000 line:-1
或你的同事


937
00:52:47,067 --> 00:52:48,735 line:-2
使用TestFlight
下载你的app


938
00:52:48,802 --> 00:52:52,372 line:-2
并最终上线…
也在App Store上线


939
00:52:54,107 --> 00:52:55,242 line:-1
在这个演示中


940
00:52:55,309 --> 00:52:58,612 line:-2
我们从给app创建单元测试
和UI测试开始


941
00:52:59,146 --> 00:53:02,115 line:-2
然后我们了解了如何编辑
我们的测试计划


942
00:53:02,683 --> 00:53:06,520 line:-2
以及如何使用测试报告
来诊断测试失败


943
00:53:07,387 --> 00:53:10,457 line:-2
然后我们创建了存档
并讨论了如何使用管理器


944
00:53:10,757 --> 00:53:13,861 line:-2
把我们的app上传到TestFlight
或App Store


945
00:53:15,729 --> 00:53:18,332 line:0
要了解更多关于这些话题的信息
请参考这些演讲


946
00:53:19,867 --> 00:53:22,536 line:-2
让我们回顾一下在过去的一小时内
我们都学到了什么内容


947
00:53:23,704 --> 00:53:27,007 line:-2
今天我们了解了从零创建app的
整个过程


948
00:53:28,475 --> 00:53:31,879 line:-2
Prachi创建了我们的项目
并介绍了Xcode UI


949
00:53:32,746 --> 00:53:35,048 line:-2
然后Holly向app中
添加了代码


950
00:53:35,315 --> 00:53:38,785 line:-2
使用源代码编辑器功能让添加
代码的过程变得非常流畅和有趣


951
00:53:40,053 --> 00:53:42,723 line:-1
然后我上台来讲了在模拟器和设备上


952
00:53:42,789 --> 00:53:44,791 line:-1
进行运行和调试


953
00:53:45,125 --> 00:53:47,094 line:-2
并且我们向项目中添加了一个
Swift程序包


954
00:53:48,328 --> 00:53:51,632 line:-2
然后Holly上台
来整合了Swift程序包


955
00:53:51,698 --> 00:53:53,700 line:-2
并把我们的一些代码
拆分到一个框架中


956
00:53:54,768 --> 00:53:58,405 line:-2
最后我们刚了解了如何
在Xcode中使用测试整合


957
00:53:58,672 --> 00:54:02,342 line:-2
以及如何把app发布到App Store
或TestFlight


958
00:54:04,912 --> 00:54:06,547 line:0
要获取关于本场演讲的更多信息


959
00:54:06,613 --> 00:54:07,814 line:0
请参看这个链接


960
00:54:08,148 --> 00:54:09,383 line:0
如果你有任何疑问


961
00:54:09,683 --> 00:54:12,319 line:0
在本场演讲结束后有一场演讲


962
00:54:12,386 --> 00:54:13,854 line:0
（更多信息请参看
developer.apple.com/wwdc19/404）


963
00:54:13,921 --> 00:54:15,722 line:-1
祝你们一周愉快 非常感谢

