1
00:00:06,173 --> 00:00:10,277 line:0
（延长电池寿命和改善电池性能）


2
00:00:13,213 --> 00:00:14,081 line:-1
谢谢大家


3
00:00:14,915 --> 00:00:17,317 line:-2
大家好 你们都好吗？
欢迎参加WWDC


4
00:00:17,384 --> 00:00:20,787 line:-2
我是Phillip Azar
今天能在这里与大家分享


5
00:00:21,054 --> 00:00:23,557 line:-2
延长电池寿命和改善电池性能
我感到既骄傲又高兴


6
00:00:25,626 --> 00:00:28,295 line:-2
你们的app
是我们软件体验的中坚力量


7
00:00:28,362 --> 00:00:30,430 line:-2
它们让我们的用户能够
做这么多的事情


8
00:00:30,597 --> 00:00:33,967 line:-2
参与这么多体验 没有你们的app
他们永远都做不到


9
00:00:34,701 --> 00:00:35,736 line:-1
你可以想象


10
00:00:36,737 --> 00:00:38,639 line:-2
如果你们的app
不能提供良好的电池寿命


11
00:00:38,705 --> 00:00:40,040 line:-1
并且也不提供良好的性能


12
00:00:40,274 --> 00:00:41,742 line:-1
这会让用户们非常失望


13
00:00:42,543 --> 00:00:44,344 line:-1
因此今天我们想讲一些相关信息


14
00:00:45,412 --> 00:00:47,814 line:-1
我们要讲一些工具


15
00:00:48,115 --> 00:00:49,149 line:-1
其中有新工具 也有老工具


16
00:00:49,750 --> 00:00:53,353 line:-2
你可以用来针对电池寿命和电池性能
优化你的app


17
00:00:54,321 --> 00:00:58,091 line:-2
我们要讲一些指标
你可以使用那些工具收集这些指标


18
00:00:58,659 --> 00:01:00,394 line:-1
从而了解并量化


19
00:01:00,727 --> 00:01:03,263 line:-2
你的app对电池寿命
和电池性能的影响


20
00:01:04,031 --> 00:01:05,666 line:-1
然后我会把舞台交给我的同事


21
00:01:06,033 --> 00:01:07,868 line:-1
他会进一步地讲这些工具


22
00:01:08,302 --> 00:01:09,536 line:-1
并给你们做一些演示


23
00:01:09,736 --> 00:01:12,406 line:-2
以及如何在你的app中
使用这些工具


24
00:01:12,840 --> 00:01:14,508 line:-1
来延长电池寿命和提高电池性能


25
00:01:15,042 --> 00:01:16,376 line:-2
然后我再返回舞台
总结一下今天的内容


26
00:01:17,744 --> 00:01:20,347 line:-1
让我们从工具开始讲吧


27
00:01:22,015 --> 00:01:23,550 line:-1
为了开始讲工具


28
00:01:23,617 --> 00:01:25,285 line:-1
我们需要先讲一下工具的开发过程


29
00:01:25,352 --> 00:01:26,386 line:-1
并熟悉一下这些工具


30
00:01:27,321 --> 00:01:28,655 line:-1
开发分为几个阶段


31
00:01:29,389 --> 00:01:31,091 line:-1
我们把它分为三个不同阶段


32
00:01:31,892 --> 00:01:33,493 line:-1
开发和测试是第一阶段


33
00:01:34,027 --> 00:01:36,029 line:-2
在这个阶段
我们形成概念并开始创建


34
00:01:36,430 --> 00:01:38,065 line:-1
这是一个非常反复的过程


35
00:01:38,432 --> 00:01:40,400 line:-2
我们要么在办公桌前
或要么在公园里


36
00:01:40,601 --> 00:01:43,637 line:-2
我们真的在努力了解是什么
让我们的app成为优秀的app


37
00:01:45,038 --> 00:01:46,874 line:-1
下一个阶段叫做beta测试


38
00:01:47,508 --> 00:01:49,643 line:-1
在我们开发好app的功能之后


39
00:01:49,776 --> 00:01:52,112 line:-1
我们就准备好做测试运行了


40
00:01:52,779 --> 00:01:55,215 line:-2
我们把app提供给一些人
就是我们的beta测试用户


41
00:01:55,549 --> 00:01:56,583 line:-1
我们尝试获得反馈


42
00:01:58,118 --> 00:02:00,587 line:-2
最后当我们对我们所收集到的
所有反馈都感到非常自豪时


43
00:02:00,654 --> 00:02:03,257 line:-1
我们就已经准备好迎接黄金时间了


44
00:02:03,724 --> 00:02:04,725 line:-1
即公开发布


45
00:02:05,392 --> 00:02:06,593 line:-2
此时app
会在App Store上线


46
00:02:06,660 --> 00:02:08,662 line:-1
并面向全球数百万客户


47
00:02:09,963 --> 00:02:13,901 line:-2
对于电池寿命和性能
每个步骤都至关重要


48
00:02:14,801 --> 00:02:16,703 line:-1
我们需要对每个步骤都进行优化


49
00:02:17,070 --> 00:02:18,505 line:-1
从而确保我们修复漏洞


50
00:02:18,672 --> 00:02:21,275 line:-1
并让客户获得尽可能好的体验


51
00:02:22,543 --> 00:02:25,646 line:-2
考虑到这些在iOS 13
和Xcode 11发布之前


52
00:02:25,913 --> 00:02:28,048 line:-1
我们提供了一些很棒的工具


53
00:02:28,248 --> 00:02:30,751 line:-2
帮助你了解你的app
对电池寿命和性能的影响


54
00:02:31,852 --> 00:02:32,986 line:-1
在开发和测试过程中


55
00:02:33,187 --> 00:02:35,289 line:-2
我们使用Xcode
以及它所包含的所有工具


56
00:02:35,756 --> 00:02:38,759 line:-2
比如Instruments、Energy Gauges
和Profiling工具


57
00:02:40,060 --> 00:02:40,894 line:-1
然后在beta测试中


58
00:02:41,495 --> 00:02:43,697 line:-1
你可直接在beta设备上收集痕迹


59
00:02:43,830 --> 00:02:46,466 line:-2
通过使用开发人员设置并在
Instruments中打开它们


60
00:02:46,867 --> 00:02:48,468 line:-1
这些对于了解


61
00:02:48,535 --> 00:02:51,305 line:-1
在开发环境中可能不会发生


62
00:02:51,572 --> 00:02:52,539 line:-2
但却在实际运行时可能发生的问题
很有帮助


63
00:02:52,873 --> 00:02:54,608 line:-1
比如当手机信号不好时


64
00:02:55,843 --> 00:02:59,847 line:-1
最后Xcode提供一组强大的日志


65
00:03:00,013 --> 00:03:04,084 line:-2
你可以从公共发布中了解
比如崩溃和CPU报告


66
00:03:04,418 --> 00:03:07,754 line:-2
这些帮助你了解一些问题
这些问题可能是针对特定区域


67
00:03:08,155 --> 00:03:09,456 line:-1
或针对特定客户的


68
00:03:09,523 --> 00:03:11,191 line:-1
这些客户可能与你的情况不一样


69
00:03:13,594 --> 00:03:14,628 line:-1
通过这些工具


70
00:03:14,928 --> 00:03:17,898 line:-2
在过去的几年里
我们一直在进行自我反思


71
00:03:18,198 --> 00:03:19,800 line:-2
我们觉得很可能存在一些
我们可以填充的空白


72
00:03:20,767 --> 00:03:23,604 line:-2
我们间接或直接地跟你们中的许多人
都沟通过


73
00:03:23,971 --> 00:03:27,441 line:-2
我们得到的反馈是
绝大多数空白都与指标有关


74
00:03:28,242 --> 00:03:31,645 line:-2
我们该如何量化
app的电池寿命和性能？


75
00:03:31,912 --> 00:03:34,381 line:-2
我们该如何在功能A和功能B之间
做出选择？


76
00:03:35,582 --> 00:03:38,752 line:-2
今天作为Xcode 11
和iOS 13中的一部分


77
00:03:39,052 --> 00:03:42,055 line:-2
我超级高兴地跟大家宣布
我们认为我们已经填补了那个空白


78
00:03:42,122 --> 00:03:45,158 line:-2
我们已经通过三个新工具弥合了空白
你们从现在开始就可以使用它们了


79
00:03:46,493 --> 00:03:48,128 line:-1
我要从XCTest Metrics开始讲


80
00:03:48,929 --> 00:03:51,298 line:-2
这是我们随Xcode 11
一起提供的第一个新工具


81
00:03:51,732 --> 00:03:54,668 line:-2
它可以让你直接
在XCTest中收集


82
00:03:55,102 --> 00:03:58,205 line:-1
所测量部分的性能和电池寿命指标


83
00:03:58,805 --> 00:04:00,874 line:-1
这将为你提供一些关键优势


84
00:04:01,074 --> 00:04:04,378 line:-2
当你在早期运行XCTest
并尝试了解


85
00:04:04,745 --> 00:04:06,647 line:-1
特定功能所产生的影响时


86
00:04:08,282 --> 00:04:09,116 line:-1
下一个是MetricKit


87
00:04:09,750 --> 00:04:11,718 line:-2
这是我们特别针对
电池和性能指标收集


88
00:04:11,852 --> 00:04:14,555 line:-1
所创建的强大的新框架


89
00:04:14,988 --> 00:04:17,591 line:-2
它会直接在你的app中
为你提供指标


90
00:04:18,024 --> 00:04:20,360 line:-1
并帮助你从所有不同用户那里了解


91
00:04:20,594 --> 00:04:22,396 line:-1
你的app实际运行起来怎么样


92
00:04:23,630 --> 00:04:24,565 line:-1
然后最后


93
00:04:24,665 --> 00:04:28,836 line:-2
我们给Xcode Organizer增加了
Xcode Metrics Organizer


94
00:04:29,636 --> 00:04:32,472 line:-1
它是一组高级别汇总指标


95
00:04:32,673 --> 00:04:35,542 line:-2
你可以直接在
Xcode Organizer中查看


96
00:04:35,909 --> 00:04:37,077 line:-1
无需修改任何代码


97
00:04:37,611 --> 00:04:39,613 line:-1
它会为你提供很棒的高级别概览


98
00:04:39,680 --> 00:04:41,348 line:-1
关于你的app在全球范围内


99
00:04:41,715 --> 00:04:42,716 line:-1
对所有客户的表现如何


100
00:04:44,117 --> 00:04:46,019 line:-2
那么回头来看
我们刚讲过的这个图表


101
00:04:46,119 --> 00:04:49,256 line:-2
你可以想象得到所有这些工具
非常适合开发过程


102
00:04:49,923 --> 00:04:52,326 line:-2
从开发和测试阶段的
XCTest Metrics开始


103
00:04:53,460 --> 00:04:55,362 line:-2
然后MetricKit
你能想象得到


104
00:04:55,662 --> 00:04:57,564 line:-1
它很适合beta测试和公共发布


105
00:04:57,731 --> 00:04:59,266 line:-1
当你不具备


106
00:04:59,333 --> 00:05:01,335 line:-1
想要从中收集指标信息的设备时


107
00:05:02,870 --> 00:05:05,005 line:-2
最后是Xcode
Metrics Organizer


108
00:05:05,305 --> 00:05:07,274 line:-1
加强了你对公共发布的了解


109
00:05:07,341 --> 00:05:10,711 line:-1
并帮助你从实际用户那里了解问题


110
00:05:12,880 --> 00:05:14,147 line:-1
因此当你把这些组合到一起


111
00:05:14,214 --> 00:05:15,716 line:-1
我们会看到我们有更多的指标


112
00:05:15,782 --> 00:05:19,553 line:-2
来量化开发过程中
每一个阶段的电池寿命和性能


113
00:05:20,220 --> 00:05:21,188 line:-1
我们认为这非常棒


114
00:05:24,224 --> 00:05:25,859 line:-1
我们稍微讲了一下这些工具


115
00:05:25,926 --> 00:05:28,161 line:-2
我同事稍后会具体深入地
讲每一个工具


116
00:05:28,762 --> 00:05:30,931 line:-1
但现在我想讲一下它们所提供的指标


117
00:05:31,698 --> 00:05:32,699 line:-1
因为没有这些指标


118
00:05:32,766 --> 00:05:34,401 line:-1
我们就不能量化我们的影响


119
00:05:34,968 --> 00:05:36,003 line:-1
让我们现在就开始吧


120
00:05:37,804 --> 00:05:39,606 line:-1
今年我们提供两组指标…


121
00:05:40,107 --> 00:05:41,708 line:-1
电池和性能


122
00:05:42,809 --> 00:05:43,644 line:-1
谁会猜到呢？


123
00:05:45,012 --> 00:05:46,280 line:-1
对于电池指标


124
00:05:46,547 --> 00:05:48,081 line:-1
我们今年提供了一大堆指标


125
00:05:48,148 --> 00:05:50,450 line:-2
这些指标会帮助你量化
对电池寿命的影响


126
00:05:52,119 --> 00:05:57,057 line:-1
处理、定位、显示、网络、


127
00:05:58,358 --> 00:06:03,330 line:-2
Bluetooth和配件指标、
多媒体指标和摄像头指标


128
00:06:04,431 --> 00:06:06,433 line:-1
这些是一大堆指标 非常强大


129
00:06:06,800 --> 00:06:09,069 line:-1
但我只想讲其中一些指标


130
00:06:09,236 --> 00:06:11,171 line:-2
是我们认为对每个人
都非常重要的指标


131
00:06:12,105 --> 00:06:13,507 line:-1
从处理指标开始讲


132
00:06:14,842 --> 00:06:18,011 line:-2
处理指标 就像你想象的那样
类似于CPU和GPU时间


133
00:06:18,612 --> 00:06:19,913 line:-1
我们希望你使用这些指标


134
00:06:20,047 --> 00:06:22,749 line:-1
量化和理解app的工作负荷


135
00:06:23,517 --> 00:06:26,119 line:-1
因此比如 你可以实现比如


136
00:06:26,486 --> 00:06:28,155 line:-2
在你可能无法预料的地方
找到CPU风扇


137
00:06:28,889 --> 00:06:30,224 line:-1
此外 你可以使用


138
00:06:30,290 --> 00:06:33,093 line:-2
你可以使用这些指标在你的app中
找到意想不到的渲染


139
00:06:34,461 --> 00:06:36,830 line:-2
关键是我们想让你们使用这些
处理指标


140
00:06:36,897 --> 00:06:39,399 line:-1
比较app的功能的算法效率


141
00:06:39,466 --> 00:06:40,601 line:-1
就像我们之前讨论过的那样


142
00:06:40,801 --> 00:06:42,202 line:-1
如果你有功能A和功能B


143
00:06:42,402 --> 00:06:45,405 line:-2
你可以使用这些指标来决定
哪个功能对延长电池寿命更有效


144
00:06:47,508 --> 00:06:49,109 line:-1
接下来我们有定位指标


145
00:06:50,377 --> 00:06:51,812 line:-1
这些指标会帮助你


146
00:06:51,879 --> 00:06:53,514 line:-1
了解和量化你的定位使用


147
00:06:53,814 --> 00:06:56,750 line:-2
比如你的累积使用、
不同精度的桶


148
00:06:57,050 --> 00:06:58,519 line:-1
以及后台定位使用


149
00:07:00,320 --> 00:07:02,489 line:-1
请使用这些指标来了解定位的使用


150
00:07:02,556 --> 00:07:04,892 line:-2
因为它对于电池寿命来说
是个常见的陷阱


151
00:07:05,425 --> 00:07:08,395 line:-1
比如 你可能会遇到定位一直运行


152
00:07:08,462 --> 00:07:09,596 line:-1
但你并不希望它运行的情况


153
00:07:10,230 --> 00:07:13,634 line:-1
或者你可能使用了一个


154
00:07:13,700 --> 00:07:16,503 line:-2
对于你所实施的定位的用例来说
太过强大的精确度桶


155
00:07:17,504 --> 00:07:20,340 line:-2
因此这些指标会帮助你了解并优化
那些情境


156
00:07:22,776 --> 00:07:24,645 line:-1
接下来我们提供显示指标


157
00:07:25,345 --> 00:07:27,281 line:-2
今年我们为你们提供了各种不同的
显示指标


158
00:07:27,347 --> 00:07:28,815 line:-1
但我想特别指出其中一个


159
00:07:29,149 --> 00:07:30,551 line:-1
它叫做平均像素亮度


160
00:07:31,818 --> 00:07:34,621 line:-2
在你的OLED设备上
比如iPhone X和XS


161
00:07:35,255 --> 00:07:37,124 line:-1
app中UI的颜色


162
00:07:37,191 --> 00:07:39,259 line:-1
对你在显示上所消耗的电量


163
00:07:39,493 --> 00:07:40,761 line:-1
有直接影响


164
00:07:41,862 --> 00:07:45,499 line:-2
我们通过一个叫做平均像素亮度
或简称为APL的指标来表示


165
00:07:47,034 --> 00:07:50,470 line:-2
简而言之
你在UI中使用的颜色越浅


166
00:07:51,038 --> 00:07:52,973 line:-2
你在OLED设备上
所消耗的电量越多


167
00:07:53,040 --> 00:07:54,508 line:-1
我们把这个称为APL较高


168
00:07:55,642 --> 00:07:57,411 line:-1
你在UI中所使用的颜色越深


169
00:07:57,978 --> 00:08:01,582 line:-2
我们把这个称为APL较低
并且这样消耗的电量也越少


170
00:08:02,649 --> 00:08:04,384 line:-1
因此今年请注意一下平均像素亮度


171
00:08:06,019 --> 00:08:07,688 line:-1
最后但同样重要的是我们有网络指标


172
00:08:09,022 --> 00:08:11,692 line:-1
你可能已经想象到了 这些是指


173
00:08:11,959 --> 00:08:14,361 line:-2
比如通过蜂窝和Wi-Fi
进行上传和下载的字节数


174
00:08:14,661 --> 00:08:15,829 line:-1
以及连通性指标


175
00:08:17,464 --> 00:08:19,867 line:-1
我们希望你尽可能优化网络使用


176
00:08:19,933 --> 00:08:21,401 line:-1
因为它是一个高能子系统


177
00:08:22,336 --> 00:08:23,604 line:-1
因此通过这些指标来执行


178
00:08:23,670 --> 00:08:26,206 line:-1
比如验证所预期的上传和下载计数


179
00:08:26,940 --> 00:08:29,409 line:-2
也许有一个上传
不应该在稍后的时间发生


180
00:08:29,710 --> 00:08:31,044 line:-1
你可以使用这些指标来了解具体情况


181
00:08:32,578 --> 00:08:34,515 line:-1
更重要的是 我们希望你们能了解


182
00:08:34,581 --> 00:08:36,850 line:-1
连通性对网络传输的影响


183
00:08:37,317 --> 00:08:39,620 line:-1
当进行联网时


184
00:08:39,720 --> 00:08:40,587 line:-2
它在你消耗的电量方面
起到重要作用


185
00:08:41,221 --> 00:08:42,589 line:-1
这些指标将帮助你了解


186
00:08:42,856 --> 00:08:44,725 line:-1
你是否长期处于


187
00:08:44,925 --> 00:08:45,859 line:-1
连通性差的情况下


188
00:08:48,395 --> 00:08:49,630 line:-1
这些就是电池指标


189
00:08:50,097 --> 00:08:53,400 line:-2
我们认为这一大堆指标
可以帮助你量化


190
00:08:53,600 --> 00:08:55,536 line:-1
你的app对电池寿命的影响


191
00:08:56,904 --> 00:08:58,372 line:-1
让我们继续讲性能指标


192
00:08:59,239 --> 00:09:00,741 line:-1
今年我们提供挂起指标、


193
00:09:01,675 --> 00:09:05,045 line:-1
磁盘指标、app启动指标、


194
00:09:06,013 --> 00:09:09,082 line:-1
内存指标和自定义间隔指标


195
00:09:10,184 --> 00:09:12,920 line:-2
与电池指标一样
我只想讲其中几个指标


196
00:09:13,253 --> 00:09:15,122 line:-2
是我认为对我们所有人
都非常重要的指标


197
00:09:16,223 --> 00:09:17,558 line:-1
从挂起指标开始讲


198
00:09:19,693 --> 00:09:21,895 line:-1
今年挂起指标是一个柱形图


199
00:09:21,962 --> 00:09:24,865 line:-2
表示你的app对于用户输入
无响应的时间长短


200
00:09:25,966 --> 00:09:28,001 line:-1
这是一个巨大的用户影响


201
00:09:28,368 --> 00:09:30,404 line:-2
你可以想象
如果用户正在使用你的app


202
00:09:30,470 --> 00:09:32,840 line:-1
但它突然停止工作了 那很不好


203
00:09:34,274 --> 00:09:36,109 line:-1
因此请使用这些指标


204
00:09:36,176 --> 00:09:38,879 line:-2
来了解何时把工作从主线程上移开
如果可能的话


205
00:09:39,513 --> 00:09:42,049 line:-2
并使用比如分派和异步提示
这样的功能


206
00:09:42,249 --> 00:09:43,383 line:-1
来减少挂起率


207
00:09:45,185 --> 00:09:46,520 line:-1
接下来我们有磁盘指标


208
00:09:47,120 --> 00:09:50,290 line:-2
今年我们的重点是
符合逻辑的磁盘写入


209
00:09:51,758 --> 00:09:53,994 line:-1
我们希望你们尽可能地量化磁盘使用


210
00:09:54,294 --> 00:09:56,263 line:-1
因为磁盘使用与所有子系统一样


211
00:09:56,463 --> 00:09:58,966 line:-2
是一种你只应该在真正需要的时候
才能使用的资源


212
00:09:59,967 --> 00:10:03,370 line:-2
因此使用这些指标来验证
是否存在意料之外的磁盘写入


213
00:10:03,804 --> 00:10:06,640 line:-2
并且如果你正在对磁盘写入
部署任何合并策略


214
00:10:06,974 --> 00:10:08,909 line:-2
你也可以使用这些磁盘指标
来进行验证


215
00:10:11,278 --> 00:10:12,813 line:-1
下一个是app启动指标


216
00:10:14,181 --> 00:10:15,983 line:-1
这超级棒 因为今年我们提供


217
00:10:16,216 --> 00:10:17,985 line:-1
启动和恢复时间柱形图


218
00:10:18,485 --> 00:10:21,054 line:-2
从而帮助你了解
app的启动和恢复时间


219
00:10:22,923 --> 00:10:25,759 line:-1
我们希望你们使用这些指标


220
00:10:26,093 --> 00:10:27,928 line:-1
来量化启动和恢复对性能的影响


221
00:10:30,063 --> 00:10:32,599 line:-1
我们希望你们了解启动活动的影响


222
00:10:33,133 --> 00:10:35,235 line:-1
因此当你在app启动之前执行


223
00:10:35,302 --> 00:10:36,370 line:-1
比如数据库更新操作时


224
00:10:36,470 --> 00:10:38,572 line:-1
这会直接影响你的启动和恢复时间


225
00:10:38,939 --> 00:10:40,607 line:-2
这些指标会让你实时查看
启动和恢复时间


226
00:10:42,976 --> 00:10:45,712 line:-2
我们还希望你了解
启动和恢复之间的区别


227
00:10:46,280 --> 00:10:47,881 line:-1
因为它们是两个截然不同的路径


228
00:10:48,982 --> 00:10:51,652 line:-2
要获取多信息
以及如何优化app启动


229
00:10:52,052 --> 00:10:53,754 line:-1
我推荐你参加明天的演讲


230
00:10:53,820 --> 00:10:55,822 line:-2
叫做优化app启动
时间是下午4:20


231
00:10:57,791 --> 00:10:59,660 line:-2
最后一个但并不是最不重要的
我们有内存指标


232
00:11:00,494 --> 00:11:01,562 line:-1
今年对于内存


233
00:11:01,795 --> 00:11:04,631 line:-2
我们提供比如
挂起平均内存和内存峰值


234
00:11:06,667 --> 00:11:09,136 line:-1
内存管理确实会影响启动时间


235
00:11:09,937 --> 00:11:11,171 line:-1
因此我们希望你使用这些指标


236
00:11:11,238 --> 00:11:13,307 line:-1
关注并密切注意内存使用


237
00:11:13,674 --> 00:11:15,409 line:-2
这对于性能来说
是一个至关重要的指标


238
00:11:17,144 --> 00:11:19,146 line:-1
使用这些指标来了解内存使用


239
00:11:19,479 --> 00:11:22,316 line:-1
并且如果内存峰值比你预期的峰值高


240
00:11:22,683 --> 00:11:26,186 line:-2
这可能表示出现了
比如难以重现的内存泄露


241
00:11:27,554 --> 00:11:29,890 line:-2
如果你把注意力集中在
减少挂起时的平均内存上


242
00:11:29,957 --> 00:11:31,425 line:-1
你可以通过这些指标进行量化


243
00:11:31,558 --> 00:11:33,360 line:-1
你还可以减少启动时间


244
00:11:33,427 --> 00:11:35,329 line:-1
以及对后台终止的敏感性


245
00:11:37,531 --> 00:11:40,567 line:-1
这就是其中一些性能指标


246
00:11:41,235 --> 00:11:42,402 line:-1
我们认为这些对于


247
00:11:42,469 --> 00:11:45,372 line:-2
帮助你了解设备上和脱离设备的性能
非常关键


248
00:11:47,941 --> 00:11:52,279 line:-2
回顾 我们讲了Xcode 11
和iOS 13之前所拥有的工具


249
00:11:52,679 --> 00:11:54,815 line:-1
用于了解和量化电量和性能


250
00:11:55,949 --> 00:11:58,485 line:-2
然后我们讲了
我们今天为你们提供的新工具


251
00:11:58,819 --> 00:12:01,121 line:-1
从而进一步量化


252
00:12:01,355 --> 00:12:02,890 line:-1
并帮助你优化你的app


253
00:12:03,724 --> 00:12:05,692 line:-1
这些很棒的指标


254
00:12:06,093 --> 00:12:08,161 line:-2
确实会帮助你把你的app
提升到下一个层级


255
00:12:08,996 --> 00:12:11,298 line:-1
闲话少叙 舞台交给我的同事们


256
00:12:11,532 --> 00:12:14,201 line:-2
他们会深入地讲
我们刚才讲过的每一个工具


257
00:12:14,701 --> 00:12:15,602 line:-1
Sastry先讲


258
00:12:15,903 --> 00:12:19,039 line:-1
他要讲一下在开发和测试阶段


259
00:12:19,239 --> 00:12:20,407 line:-2
用XCTest指标测量app
所产生的影响


260
00:12:20,807 --> 00:12:21,642 line:-1
Sastry？


261
00:12:29,449 --> 00:12:30,350 line:-1
谢谢Phil


262
00:12:30,884 --> 00:12:33,253 line:-2
大家好 我是
Sastry Vadlamani


263
00:12:33,387 --> 00:12:35,289 line:-1
我是Apple的一名软件工程师


264
00:12:35,889 --> 00:12:38,091 line:-2
让我们回顾一些
你可以自由使用的工具


265
00:12:38,158 --> 00:12:41,161 line:-2
它们用于在开发和测试阶段
测量app所产生的影响


266
00:12:41,929 --> 00:12:44,164 line:-1
就在Xcode的调试导航器内


267
00:12:44,531 --> 00:12:48,669 line:-2
你可以看到CPU内存
和电量子系统的高级别概览


268
00:12:49,236 --> 00:12:53,073 line:-2
当你希望深入了解细节
或诊断一些问题时


269
00:12:53,407 --> 00:12:55,409 line:-2
Instruments
是个很有用的工具


270
00:12:55,876 --> 00:12:59,413 line:-2
它带有模板
可以帮助你诊断内存问题


271
00:13:00,547 --> 00:13:02,449 line:-1
系统无响应性


272
00:13:03,116 --> 00:13:07,187 line:-1
内存过度使用以及电量问题


273
00:13:08,388 --> 00:13:11,625 line:-1
你还可使用XCTest来测量性能


274
00:13:12,192 --> 00:13:15,696 line:-2
XCTest是一个程序
你可以用它编写UI和单元测试


275
00:13:15,762 --> 00:13:19,967 line:-2
可以无缝整合到
Xcode测试流程中


276
00:13:21,435 --> 00:13:22,936 line:-1
你不仅可以测量性能


277
00:13:23,003 --> 00:13:25,472 line:-1
你还可以获取具有基线的回归


278
00:13:27,374 --> 00:13:32,312 line:-2
直到去年 你所能测量的唯一指标
就是世界时钟时间


279
00:13:32,779 --> 00:13:34,548 line:-1
性能的指标更多


280
00:13:34,748 --> 00:13:38,685 line:-2
因此今年我们向XCTest中
添加了一些新的性能指标


281
00:13:40,521 --> 00:13:42,456 line:-1
让我们具体看一下细节


282
00:13:42,656 --> 00:13:46,026 line:-1
这是XCTest的一个示例性能


283
00:13:46,326 --> 00:13:48,362 line:-1
你需要模式化一块代码


284
00:13:48,428 --> 00:13:49,963 line:-1
指明在测量方法中


285
00:13:50,030 --> 00:13:51,765 line:-1
要实施的动作


286
00:13:51,899 --> 00:13:54,468 line:-1
它会测量它实施…


287
00:13:54,535 --> 00:13:56,303 line:-1
执行这块代码所需要的时间


288
00:13:56,603 --> 00:13:58,238 line:-1
现在为了把这个转化为


289
00:13:58,305 --> 00:14:01,975 line:-1
性能测试的新样式并获取更多细节


290
00:14:02,376 --> 00:14:06,280 line:-2
我们只需要模式化时间、
内存和CPU对象


291
00:14:06,346 --> 00:14:09,816 line:-2
把它们打包到一个列表中并把列表
作为参数传给测量方法即可


292
00:14:10,250 --> 00:14:11,952 line:-1
通过这些小修改


293
00:14:12,019 --> 00:14:15,222 line:-2
你现有的性能测试就可以测量
多个指标


294
00:14:16,657 --> 00:14:17,824 line:-1
我们有点偏题了


295
00:14:18,192 --> 00:14:23,030 line:-2
通过你使用XCTest
创建的每一个新UI测试目标


296
00:14:23,363 --> 00:14:26,066 line:-2
我们可以让你们免费执行一次
app启动测试


297
00:14:26,166 --> 00:14:27,668 line:-1
因此 不需要任何代码


298
00:14:27,734 --> 00:14:31,405 line:-2
你将可以进行
测量app启动时间的测试


299
00:14:32,806 --> 00:14:33,941 line:-1
让我们看一个演示


300
00:14:39,379 --> 00:14:41,415 line:-1
为了这场演讲


301
00:14:41,481 --> 00:14:45,252 line:-2
我们创建了一个叫做
Awesome Photo App的app


302
00:14:46,620 --> 00:14:48,188 line:-1
它有几个功能


303
00:14:48,355 --> 00:14:51,291 line:-1
让我带你看一下 它可以让你拍照


304
00:14:52,593 --> 00:14:53,994 line:-1
当你拍照时


305
00:14:54,761 --> 00:14:57,464 line:-2
它会给照片标记地理位置
因此你可以在下边看到定位


306
00:14:57,998 --> 00:15:01,335 line:-2
然后你在照片上应用一些
有意思的特效


307
00:15:02,202 --> 00:15:05,372 line:-2
我们将在接下来的演示中
引用这个app工具


308
00:15:05,839 --> 00:15:07,107 line:-1
你还拥有一些标准功能


309
00:15:07,174 --> 00:15:09,343 line:-1
比如从相册中加载一张照片


310
00:15:09,409 --> 00:15:12,045 line:-1
保存照片以及把照片上传到服务器上


311
00:15:13,146 --> 00:15:14,181 line:-1
那么这是什么意思？


312
00:15:14,248 --> 00:15:16,850 line:-2
如何从Xcode中
测试这个app？


313
00:15:17,684 --> 00:15:19,920 line:-1
嗯 我刚才提到过


314
00:15:20,387 --> 00:15:25,492 line:-2
对于你所创建的每个
新XCTest UI目标


315
00:15:25,559 --> 00:15:27,594 line:-2
都可以进行一次免费的
app启动测试


316
00:15:28,195 --> 00:15:30,731 line:-1
因此在演讲之前


317
00:15:30,797 --> 00:15:32,666 line:-1
我已经获取了运行这个测试的权利


318
00:15:32,966 --> 00:15:35,102 line:-1
结果就像这样


319
00:15:35,736 --> 00:15:40,374 line:-2
你可以看到
它花了大概0.2秒启动我的app


320
00:15:40,440 --> 00:15:41,608 line:-1
这是可以接受的


321
00:15:42,009 --> 00:15:44,845 line:-1
你可以看到多次迭代的结果


322
00:15:45,145 --> 00:15:47,047 line:-1
所有迭代的时间几乎都一样


323
00:15:47,514 --> 00:15:49,183 line:-1
这是一件很有意思的事


324
00:15:49,249 --> 00:15:50,617 line:-1
你可以设置你的基线


325
00:15:51,051 --> 00:15:54,721 line:-2
基线是一种机制
你可以在基线里设置参考


326
00:15:54,821 --> 00:15:56,924 line:-1
关于你所期待的性能值


327
00:15:57,191 --> 00:15:59,560 line:-2
因此无论何时当你的性能值
超过参考值时


328
00:15:59,626 --> 00:16:02,496 line:-2
测试就会失败
这就是如何获取回归的方式


329
00:16:02,796 --> 00:16:05,666 line:-2
那么你可以设置平均值
可以设置标准差


330
00:16:06,700 --> 00:16:09,269 line:-1
并且无论何时当你下一次运行测试时


331
00:16:09,336 --> 00:16:11,638 line:-1
如果有任意值超过这些条件


332
00:16:11,705 --> 00:16:12,639 line:-1
你的测试就会失败


333
00:16:13,240 --> 00:16:15,042 line:-1
我已经修改了代码


334
00:16:15,375 --> 00:16:19,947 line:-2
但我想确保app的
启动时间没有倒退


335
00:16:20,314 --> 00:16:22,049 line:-1
让我再次运行测试


336
00:16:24,017 --> 00:16:26,153 line:-1
当运行性能测试时


337
00:16:26,220 --> 00:16:27,688 line:-1
有几个要点你要记住


338
00:16:28,021 --> 00:16:31,491 line:-1
最好不要把调试器附加到进程中


339
00:16:31,558 --> 00:16:32,860 line:-1
因为它会增加一些消耗


340
00:16:33,126 --> 00:16:37,297 line:-2
并且最好关闭所有诊断选项
比如Sanitizers


341
00:16:38,065 --> 00:16:40,834 line:-1
你还可以通过创建独立的机制


342
00:16:40,901 --> 00:16:43,337 line:-1
或使用测试计划功能来实现


343
00:16:43,403 --> 00:16:45,939 line:-2
最新改进的功能是可以轻松关闭
测试计划功能


344
00:16:46,473 --> 00:16:49,076 line:-2
现在你可以看到已经运行了测试
并且测试失败了


345
00:16:49,142 --> 00:16:50,878 line:-1
如果你要深入去看细节


346
00:16:50,944 --> 00:16:54,581 line:-1
你会看到那是因为平均值确实超标了


347
00:16:54,648 --> 00:16:58,452 line:-2
我是说 原来是0.2秒
现在变成了大约1.2秒


348
00:16:59,052 --> 00:17:00,521 line:-1
因此为了调试这个问题


349
00:17:00,587 --> 00:17:04,191 line:-2
你可把它附加到Instruments
并用Timer Profiler模板


350
00:17:04,258 --> 00:17:06,993 line:-2
查找为什么app的启动时间
变得如此糟糕


351
00:17:07,426 --> 00:17:10,497 line:-2
我会为你揭开神秘面纱
并告诉你我做了什么


352
00:17:10,564 --> 00:17:12,699 line:-1
我实际上尝试查找一个数据库


353
00:17:12,799 --> 00:17:15,202 line:-1
在我的主线程上检查数据库更新


354
00:17:15,301 --> 00:17:17,804 line:-1
Phil刚才提到过 这样做很不好


355
00:17:18,338 --> 00:17:22,175 line:-2
因此正确方案是把这个任务分派到
后台任务队列中


356
00:17:23,010 --> 00:17:25,279 line:-1
希望这能修复我们的问题


357
00:17:25,512 --> 00:17:26,980 line:-1
让我们再次运行测试


358
00:17:27,047 --> 00:17:31,418 line:-1
并确保数值在我们所期待的数值之内


359
00:17:32,619 --> 00:17:33,954 line:-1
这里的关键是你可以…


360
00:17:34,588 --> 00:17:36,089 line:-1
XCTest不仅帮助你测量


361
00:17:36,190 --> 00:17:38,592 line:-1
它还帮助你确保不会倒退


362
00:17:38,659 --> 00:17:40,928 line:-1
因此更多的是你只需写一次测试


363
00:17:40,994 --> 00:17:42,863 line:-1
就可以忘掉它了


364
00:17:42,930 --> 00:17:44,798 line:-1
并让它在你的CI系统中一直运行


365
00:17:44,865 --> 00:17:47,000 line:-1
并确保你了解你的性能不会降低


366
00:17:47,668 --> 00:17:51,138 line:-2
你可以看到 测试通过了
哇 我们修复了这个问题


367
00:17:56,076 --> 00:18:01,915 line:-2
因此把现有XCTest
性能测试转化为


368
00:18:01,982 --> 00:18:04,918 line:-2
我之前提到过的拥有更多维度的
性能测试非常简单


369
00:18:05,319 --> 00:18:06,587 line:-1
因此你所要做的就是


370
00:18:06,653 --> 00:18:10,457 line:-2
把你打算测量的对象
模式化到一个列表中


371
00:18:10,557 --> 00:18:12,526 line:-1
就像比如说 我有一个性能测试


372
00:18:12,593 --> 00:18:15,395 line:-1
测量的是拍照所花的时间


373
00:18:17,130 --> 00:18:19,700 line:-1
你知道的 使用照片并应用特效


374
00:18:20,000 --> 00:18:22,970 line:-1
之前这可能会只测量时间长短


375
00:18:23,170 --> 00:18:27,074 line:-2
但现在通过传递额外的
内存指标对象


376
00:18:27,241 --> 00:18:31,044 line:-2
我甚至可以测量内存
事实上是实施这些动作所消耗的内存


377
00:18:32,679 --> 00:18:35,749 line:-1
XCTest并不是仅限于UI测试


378
00:18:35,816 --> 00:18:37,684 line:-1
你还可以用它进行单元测试


379
00:18:38,151 --> 00:18:40,420 line:-1
我要给你们举个例子


380
00:18:40,521 --> 00:18:42,456 line:-1
我有应用特效功能


381
00:18:42,523 --> 00:18:44,391 line:-1
我可以选择


382
00:18:44,458 --> 00:18:46,460 line:-1
是否要使用一张或多张照片


383
00:18:46,894 --> 00:18:49,596 line:-1
从功能的角度来说 增加的值很小


384
00:18:49,663 --> 00:18:53,200 line:-1
但如果总量不多了 我宁愿这样做


385
00:18:53,634 --> 00:18:55,736 line:-1
因此我获取了运行这个测试的权利


386
00:18:55,802 --> 00:18:59,373 line:-1
并测试了它运行这个


387
00:18:59,439 --> 00:19:01,341 line:-2
给一张照片应用特效功能
所需要的时间


388
00:19:01,408 --> 00:19:03,143 line:-1
大约是1000KB


389
00:19:03,544 --> 00:19:07,714 line:-1
但现在测量不同情境的


390
00:19:08,015 --> 00:19:09,383 line:-1
增加的影响非常简单


391
00:19:09,449 --> 00:19:10,918 line:-1
你所需要做的就是修改代码


392
00:19:10,984 --> 00:19:13,987 line:-2
我把代码修改成拥有两个筛选器
并再次运行测试


393
00:19:14,454 --> 00:19:18,458 line:-1
测试运行时 你可以立即查看数值


394
00:19:18,692 --> 00:19:22,930 line:-2
了解了数值
你可以检查所产生的影响


395
00:19:23,063 --> 00:19:27,467 line:-1
那么你可以看到 影响是…


396
00:19:28,202 --> 00:19:32,739 line:-2
测试失败了
因为这个数值比原来的翻了一倍


397
00:19:32,806 --> 00:19:34,274 line:-1
大约是2000KB


398
00:19:34,341 --> 00:19:36,610 line:-2
因此很可能我要坚持
选择一张照片的方案


399
00:19:37,344 --> 00:19:38,178 line:-1
因此…


400
00:19:40,848 --> 00:19:46,153 line:-2
总结一下 我给你演示了
一些指标的使用 比如内存


401
00:19:46,420 --> 00:19:48,222 line:-1
但我们添加了许多指标


402
00:19:48,288 --> 00:19:52,459 line:-2
我们添加了内存 添加了存储
添加了CPU 还添加了OS标志牌


403
00:19:53,126 --> 00:19:54,261 line:-1
但我们并没有止步于此


404
00:19:54,328 --> 00:19:56,930 line:-1
我们丢弃了通用的底层系统


405
00:19:56,997 --> 00:19:59,600 line:-2
因此你实际上可以实施
你自己的自定义指标


406
00:19:59,666 --> 00:20:02,703 line:-1
并使用底层报告系统来获取回归


407
00:20:03,070 --> 00:20:05,506 line:-1
请查看文档获取更多详情


408
00:20:06,306 --> 00:20:08,709 line:-2
然后正如我在最后一个例子中
所演示的那样


409
00:20:08,775 --> 00:20:11,678 line:-2
你还可以使用XCTest来进行
某种AB测试


410
00:20:11,745 --> 00:20:17,584 line:-2
这是检查算法A是否比算法B
更好的方式 成本低而且简单


411
00:20:17,718 --> 00:20:21,121 line:-2
只需要进行简单的单元测试
你就可以得到性能值了


412
00:20:22,689 --> 00:20:27,094 line:-2
因为XCTest与Xcode
和Xcode服务器都能完美协作


413
00:20:27,561 --> 00:20:29,763 line:-1
你可以在开发和测试过程中


414
00:20:29,830 --> 00:20:32,299 line:-1
使用这个性能测试


415
00:20:32,366 --> 00:20:34,868 line:-1
并同时作为后续的整合系统的一部分


416
00:20:34,935 --> 00:20:38,005 line:-2
并确保你的app没有发生
性能方面的倒退


417
00:20:38,872 --> 00:20:42,509 line:-2
这就是用XCTest
进行性能测试中的新功能


418
00:20:42,743 --> 00:20:44,211 line:-1
接下来我想邀请Ashish上台来


419
00:20:44,278 --> 00:20:47,080 line:-1
他会讲一下在实际情况中


420
00:20:47,181 --> 00:20:48,015 line:-1
测量你的app所产生的影响


421
00:20:59,560 --> 00:21:00,394 line:-1
谢谢Sastry


422
00:21:00,928 --> 00:21:03,664 line:-1
在初始测试和开发阶段之后


423
00:21:03,997 --> 00:21:06,066 line:-1
收集实际指标有许多好处


424
00:21:06,133 --> 00:21:07,801 line:-1
从而进一步优化电池寿命


425
00:21:07,868 --> 00:21:09,336 line:-1
和app的性能


426
00:21:10,404 --> 00:21:13,607 line:-2
这包含利用只有少数用户的
beta用户群


427
00:21:13,841 --> 00:21:15,943 line:-1
以及更广泛的客户群


428
00:21:17,411 --> 00:21:20,647 line:-2
在实际情况中 你的app
会经受许多不同的用户情境


429
00:21:20,714 --> 00:21:23,717 line:-1
比如不同的蜂窝网络、信号条件、


430
00:21:23,951 --> 00:21:26,854 line:-1
不同类型的设备以及不同的地理位置


431
00:21:27,321 --> 00:21:31,325 line:-2
这些帮助你识别在桌面测试过程中
可能没被发现的问题


432
00:21:32,960 --> 00:21:34,494 line:-1
你还可以使用这个实际指标


433
00:21:34,561 --> 00:21:36,463 line:-1
对比当前版本的app


434
00:21:36,530 --> 00:21:37,898 line:-1
和之前版本app的电池寿命和性能


435
00:21:38,131 --> 00:21:39,566 line:-1
你可以使用这个数据来发现


436
00:21:39,633 --> 00:21:42,402 line:-1
是否存在任何回归或异乎寻常的问题


437
00:21:43,804 --> 00:21:47,407 line:-2
这些现实指标还可以帮助你了解
新功能所产生的影响


438
00:21:47,708 --> 00:21:50,577 line:-2
通过在现实情况下让大量客户
进行A-B测试来实现


439
00:21:52,179 --> 00:21:56,183 line:-2
为了解决这个问题 我很高兴地宣布
我们要发布MetricKit


440
00:21:56,517 --> 00:21:59,052 line:-2
它是一个设备上的框架
用于收集你app的电池寿命


441
00:21:59,119 --> 00:22:01,188 line:-1
和性能指标


442
00:22:02,356 --> 00:22:04,758 line:-2
我们还在MetricKit中
添加了一个功能


443
00:22:04,892 --> 00:22:08,028 line:-2
用于收集你app中
关键区域的相关指标


444
00:22:09,096 --> 00:22:10,998 line:-2
我们已经把这些功能都嵌入
MetricKit中了


445
00:22:11,265 --> 00:22:13,033 line:-1
并在我们的数据收集汇总机制中


446
00:22:13,100 --> 00:22:15,636 line:-1
保护用户们的隐私权


447
00:22:17,871 --> 00:22:21,308 line:-2
采用MetricKit非常简单
接下来我会告诉你如何实现


448
00:22:23,043 --> 00:22:25,245 line:-2
此处代码采用MetricKit
所需要的一切


449
00:22:25,646 --> 00:22:27,848 line:-1
首先导入MetricKit框架


450
00:22:28,215 --> 00:22:29,917 line:-1
并在app中创建一个类


451
00:22:29,983 --> 00:22:32,686 line:-1
遵守指标管理器订阅者协议


452
00:22:34,588 --> 00:22:37,157 line:-1
你要在类内订阅指标


453
00:22:37,624 --> 00:22:40,294 line:-1
这就让设备了解你的app有兴趣


454
00:22:40,360 --> 00:22:41,929 line:-1
接收来自MetricKit的指标


455
00:22:42,296 --> 00:22:44,598 line:-1
从而它会开始在设备上收集指标


456
00:22:46,900 --> 00:22:48,402 line:-1
最后作为开发人员


457
00:22:48,468 --> 00:22:50,838 line:-2
你需要实施一个叫做
didReceive的委托方法


458
00:22:51,305 --> 00:22:52,406 line:-1
无论何时当在设备上


459
00:22:52,472 --> 00:22:54,541 line:-1
向你的app提交指标有效载荷时


460
00:22:54,608 --> 00:22:56,143 line:-1
都会涉及到这个方法


461
00:22:56,677 --> 00:22:58,512 line:-1
一旦在设备上收到此种有效载荷


462
00:22:58,579 --> 00:23:00,314 line:-1
由你决定采取哪些行动


463
00:23:00,747 --> 00:23:03,183 line:-1
比如你可以选择把它保存到文件中


464
00:23:03,517 --> 00:23:05,085 line:-1
或还可以上传到服务器


465
00:23:05,152 --> 00:23:07,654 line:-2
从而可以从多个用户那
收集现实数据


466
00:23:09,823 --> 00:23:12,125 line:-2
在使用指标之后
在采用MetricKit之后


467
00:23:12,326 --> 00:23:14,261 line:-1
因为你的app是在白天使用


468
00:23:14,528 --> 00:23:17,564 line:-1
我们将自动为app收集汇总指标


469
00:23:18,932 --> 00:23:21,068 line:-1
在24小时结束时


470
00:23:21,235 --> 00:23:24,872 line:-2
我们会生成一整天的指标摘要
过去的24小时


471
00:23:25,038 --> 00:23:26,907 line:-1
并在设备上返回这个有效载荷


472
00:23:28,876 --> 00:23:30,377 line:-1
现在让我们了解一下如何测量


473
00:23:30,444 --> 00:23:33,247 line:-1
app中关键代码段的影响


474
00:23:34,448 --> 00:23:37,951 line:-2
返回到Sastry刚才描述过的
Awesome Photo App示例


475
00:23:38,085 --> 00:23:40,053 line:-1
用户可以在app中实施多种活动


476
00:23:40,754 --> 00:23:43,056 line:-1
比如他们可以选择拍照


477
00:23:43,590 --> 00:23:45,926 line:-1
并在所拍照片上应用许多很酷的特效


478
00:23:46,693 --> 00:23:48,462 line:-1
如果他们喜欢他们所实施的特效


479
00:23:48,896 --> 00:23:50,697 line:-1
他们可以选择把照片保存在设备上


480
00:23:51,598 --> 00:23:53,367 line:-1
MetricKit提供捕捉


481
00:23:53,433 --> 00:23:55,369 line:-1
app中每个功能对电池寿命和性能


482
00:23:55,769 --> 00:23:57,838 line:-1
所产生的精确影响的功能


483
00:23:59,706 --> 00:24:01,041 line:-1
现在让我们了解一下如何实现


484
00:24:01,708 --> 00:24:05,512 line:-2
我们很高兴在MetricKit内
引入了一个新API 叫做mxSignposts


485
00:24:05,879 --> 00:24:08,615 line:-1
它作为环绕式OS标志牌实施


486
00:24:09,383 --> 00:24:12,920 line:-2
通过用mxSignpost
截断app中的关键部分


487
00:24:12,986 --> 00:24:14,688 line:-1
你可以捕捉精确的影响


488
00:24:15,055 --> 00:24:16,223 line:-1
让我们举个例子


489
00:24:17,724 --> 00:24:19,526 line:-1
那么要使用mxSignpost


490
00:24:19,660 --> 00:24:23,931 line:-2
你所要做的就是使用MetricKit的
生成日志处理生成器


491
00:24:24,198 --> 00:24:26,200 line:-1
并用它创建一个日志处理


492
00:24:26,800 --> 00:24:30,838 line:-2
并使用那个日志处理把mxSignpost
拖动到关键代码部分


493
00:24:31,738 --> 00:24:34,808 line:-2
在这个例子中 我想测量
Awesome Photo App中


494
00:24:34,875 --> 00:24:36,310 line:-1
保存照片功能的影响


495
00:24:36,610 --> 00:24:39,780 line:-2
我在这个app的代码之前和之后
都拖入了mxSignpost


496
00:24:40,714 --> 00:24:43,050 line:-2
MetricKit将在设备上
自动收集指标


497
00:24:43,116 --> 00:24:45,319 line:-1
并替你处理它们


498
00:24:47,054 --> 00:24:48,288 line:-1
现在让我们看一个演示


499
00:24:48,355 --> 00:24:50,891 line:-2
我会告诉你们如何在自己的app中
采用MetricKit


500
00:24:59,900 --> 00:25:03,470 line:-2
现在我返回到了我app的
Xcode项目中


501
00:25:04,037 --> 00:25:07,207 line:-2
我现在位于我app的
controller.swift视图文件中


502
00:25:07,541 --> 00:25:10,477 line:-2
你可以看到我已经在这里采用了
MetricKit框架


503
00:25:10,878 --> 00:25:14,348 line:-2
并创建了一个类
遵守指标管理器订阅者协议


504
00:25:15,449 --> 00:25:16,416 line:-1
在那个类内


505
00:25:16,483 --> 00:25:19,086 line:-2
我已经给didReceive方法
添加了一些代码


506
00:25:19,453 --> 00:25:22,322 line:-2
因此无论何时当有可用的
指标有效载荷时才涉及到这个方法


507
00:25:23,357 --> 00:25:25,926 line:-2
对于我的app来说
我决定把数据保存到一个文件中


508
00:25:25,993 --> 00:25:28,495 line:-1
从而稍后可以进行一些设备内处理


509
00:25:28,996 --> 00:25:30,497 line:-1
为了今天的演示


510
00:25:30,564 --> 00:25:32,699 line:-1
我还写了一个函数来打印这个数据


511
00:25:32,933 --> 00:25:35,068 line:-1
我可以让你看一下有效载荷的内容


512
00:25:35,836 --> 00:25:39,373 line:-2
最后我还写了这个函数
用于把数据上传到我自己的服务器上


513
00:25:39,706 --> 00:25:41,942 line:-1
因此它可以在beta测试过程中


514
00:25:42,009 --> 00:25:44,178 line:-2
从多个用户以及客户那里
收集这个数据


515
00:25:45,913 --> 00:25:49,483 line:-2
现在因为这个方法
每天最多只能使用一次


516
00:25:49,750 --> 00:25:52,052 line:-2
无论何时当有对我们的app可用的
有效载荷时


517
00:25:52,352 --> 00:25:55,088 line:-2
我们在Xcode中创建了新功能
可以帮助你测试一下这个


518
00:25:55,389 --> 00:25:56,757 line:-1
让我来给你演示那是如何运作的


519
00:25:57,524 --> 00:26:00,494 line:-2
我们首先在我的测试设备上
运行这个app


520
00:26:05,065 --> 00:26:06,767 line:-1
那么app现在正在运行


521
00:26:07,134 --> 00:26:10,804 line:-2
现在我要进入调试并点击选择
MetricKit有效载荷


522
00:26:11,605 --> 00:26:14,441 line:-1
它会向你的app发送虚拟有效载荷


523
00:26:14,508 --> 00:26:17,444 line:-2
从而你可以测试
didReceive方法内的代码


524
00:26:17,945 --> 00:26:20,247 line:-1
现在让我们看一下今日可用的


525
00:26:20,314 --> 00:26:21,448 line:-2
MetricKit
有效载荷中的内容


526
00:26:22,583 --> 00:26:23,650 line:-1
这里的第一个例子


527
00:26:23,717 --> 00:26:25,819 line:-1
显示了与app相关的一些元数据


528
00:26:25,886 --> 00:26:27,087 line:-1
比如版本号


529
00:26:27,354 --> 00:26:29,122 line:-1
设备类型和OS版本号


530
00:26:29,790 --> 00:26:33,060 line:-2
然后我们有一些与非常有用的
性能指标相关的频率分布图


531
00:26:33,160 --> 00:26:35,629 line:-1
比如app启动、恢复和挂起


532
00:26:36,630 --> 00:26:39,333 line:-1
然后我们有与app使用相关的指标


533
00:26:39,399 --> 00:26:41,034 line:-1
比如前台和后台时间


534
00:26:41,635 --> 00:26:44,705 line:-2
以及一些后台指标
比如CPU时间和GPU时间


535
00:26:45,305 --> 00:26:47,441 line:-1
然后有一些指标围绕定位使用、


536
00:26:48,008 --> 00:26:51,278 line:-1
以及网络、磁盘IO内存和显示


537
00:26:52,179 --> 00:26:55,249 line:-1
最后有一部分指标是


538
00:26:55,415 --> 00:26:56,416 line:-2
围绕你app的
mxSignpost汇总


539
00:26:56,884 --> 00:27:00,320 line:-2
你可看到现在MetricKit中
有大量指标可用


540
00:27:00,387 --> 00:27:02,789 line:-1
因此我强烈推荐你查看我们的文档


541
00:27:02,856 --> 00:27:04,525 line:-1
了解更多详情


542
00:27:05,158 --> 00:27:06,793 line:-1
让我们现在返回到幻灯片中


543
00:27:10,063 --> 00:27:12,432 line:-2
你可以看到
正如我们在演示中看到的那样


544
00:27:12,499 --> 00:27:14,601 line:-1
使用MetricKit非常简单


545
00:27:14,902 --> 00:27:17,304 line:-1
请立即开始在你的设备上获得指标


546
00:27:19,540 --> 00:27:21,408 line:-1
对于 同时对于app


547
00:27:21,475 --> 00:27:23,277 line:-1
我们决定开车去旅行


548
00:27:23,443 --> 00:27:26,046 line:-2
并收集一些现实的度量
以及一些有意思的照片


549
00:27:27,681 --> 00:27:29,750 line:-2
在我们的
Awesome Photo App上


550
00:27:29,816 --> 00:27:31,251 line:-2
实际使用
MetricKit的第二天


551
00:27:31,618 --> 00:27:33,620 line:-2
我们得到
我们得到了设备上的有效载荷


552
00:27:33,787 --> 00:27:35,389 line:-1
上传到了我自己的服务器中


553
00:27:35,455 --> 00:27:37,691 line:-2
通过我刚才展示给你的那段
app代码


554
00:27:39,560 --> 00:27:41,762 line:-2
现在让我们使用从现实使用中
收到的这个数据


555
00:27:41,962 --> 00:27:44,665 line:-2
来识别Awesome Photo App中的
一些热点


556
00:27:45,999 --> 00:27:47,234 line:-1
根据第一个示例


557
00:27:47,701 --> 00:27:49,570 line:-2
这个数据显示了
app的全部前台时间


558
00:27:49,636 --> 00:27:51,071 line:-1
和后台时间


559
00:27:51,505 --> 00:27:54,775 line:-1
以及不同精确度市场的全部定位使用


560
00:27:55,509 --> 00:27:58,045 line:-1
它显示了app的定位使用


561
00:27:58,111 --> 00:27:59,313 line:-1
大约是720秒


562
00:27:59,379 --> 00:28:02,816 line:-2
非常接近于前台时间
这非常出乎意料


563
00:28:03,283 --> 00:28:04,785 line:-1
我使用定位就是


564
00:28:04,852 --> 00:28:07,487 line:-2
无论何时当我拍照时
就给照片标记地理位置


565
00:28:08,622 --> 00:28:10,424 line:-1
返回到app中 我忘记…


566
00:28:10,490 --> 00:28:13,760 line:-1
我发现我在获取定位后忘记关闭它了


567
00:28:14,261 --> 00:28:16,797 line:-2
这是关于如何使用
MetricKit


568
00:28:16,864 --> 00:28:19,066 line:-2
来识别意料之外的app行为的
一个很好的例子


569
00:28:19,933 --> 00:28:21,935 line:-2
我们使用这个数据
可以优化的另一个功能是


570
00:28:22,002 --> 00:28:25,339 line:-2
减少定位使用 如果我们的用例中
可以使用定位的话


571
00:28:25,739 --> 00:28:28,609 line:-2
因为定位精确度越高
电池消耗量也越大


572
00:28:30,410 --> 00:28:33,647 line:-2
下一个例子显示了app挂起时长的
柱形图


573
00:28:34,181 --> 00:28:36,049 line:-1
数据表明有许多实例的


574
00:28:36,116 --> 00:28:37,951 line:-1
挂起时长多于5秒


575
00:28:38,185 --> 00:28:40,020 line:-1
这是一种非常糟糕的用户体验


576
00:28:40,954 --> 00:28:43,924 line:-2
Phil刚才讲过
其中一种解决方式就是


577
00:28:43,991 --> 00:28:45,926 line:-2
避免在主线程中
进行持久的模块化调用


578
00:28:46,260 --> 00:28:48,395 line:-1
从而减少任何挂起实例


579
00:28:49,863 --> 00:28:53,834 line:-2
最后一个例子显示了如何
在MetricKit中使用mxSignpost数据


580
00:28:54,168 --> 00:28:57,504 line:-1
识别指定app代码区域的热点


581
00:28:58,839 --> 00:29:02,409 line:-2
在我的app中 我决定在所有主要
功能上都放mxSignpost


582
00:29:02,476 --> 00:29:06,914 line:-2
比如加载照片、应用特效、
加时间戳、保存照片和上传照片


583
00:29:07,548 --> 00:29:09,917 line:-2
使用mxSignpost、
MetricKit可以计算


584
00:29:09,983 --> 00:29:12,920 line:-1
每个实例在实际情况中的运行次数


585
00:29:13,554 --> 00:29:15,822 line:-1
以及一些电池寿命和性能指标


586
00:29:15,889 --> 00:29:17,524 line:-1
比如整个app的累积的CPU时间


587
00:29:18,125 --> 00:29:20,861 line:-1
和全部CPU时间


588
00:29:22,229 --> 00:29:23,997 line:-1
这个数据表明有许多


589
00:29:24,064 --> 00:29:28,468 line:-2
应用特效功能的
CPU使用占50%以上


590
00:29:28,936 --> 00:29:32,339 line:-2
现在我知道如何进一步
优化我的app


591
00:29:32,573 --> 00:29:34,842 line:-1
从而减少整体的电池消耗量


592
00:29:37,177 --> 00:29:39,546 line:-1
接下来是这部分的主要内容


593
00:29:40,514 --> 00:29:44,017 line:-2
从iOS 13开始
你可以用MetricKit


594
00:29:44,084 --> 00:29:46,420 line:-2
收集你的app在实际使用时的
电池寿命和性能指标


595
00:29:48,355 --> 00:29:51,458 line:-2
你可以使用MetricKit
较早地识别你app中的热点


596
00:29:51,525 --> 00:29:54,228 line:-2
比如我今天展示的那个例子
通过beta测试人群


597
00:29:54,528 --> 00:29:56,697 line:-1
或你也可以通过客户群来做


598
00:29:58,432 --> 00:30:01,468 line:-2
并且在我们今天的例子中
我们了解了如何使用


599
00:30:01,535 --> 00:30:03,470 line:-2
来自单一用户的MetricKit
数据来识别热点


600
00:30:03,804 --> 00:30:05,939 line:-1
汇总来自多个用户的相同数据


601
00:30:06,006 --> 00:30:09,309 line:-2
可以为你提供有关改善你的app的
更深入的洞察力


602
00:30:11,211 --> 00:30:13,847 line:-2
现在我要把舞台交给Anshul
他会讲一下


603
00:30:13,914 --> 00:30:15,983 line:-1
Xcode中开箱即用的遥测方案


604
00:30:16,183 --> 00:30:17,050 line:-1
Anshul？


605
00:30:22,189 --> 00:30:23,390 line:-1
非常感谢Ashish


606
00:30:23,891 --> 00:30:25,058 line:-2
大家好
我是Anshul Dawra


607
00:30:25,125 --> 00:30:27,928 line:-1
我要讲Xcode指标核心管理器


608
00:30:27,995 --> 00:30:32,499 line:-2
这是我们今年在Xcode 11中
引入的一个很酷的新工具


609
00:30:33,767 --> 00:30:36,603 line:-2
Xcode指标管理器是一个
开箱即用的方案


610
00:30:36,670 --> 00:30:39,206 line:-2
是我们在Xcode 11中
为你们提供的


611
00:30:39,773 --> 00:30:43,177 line:-1
用于浏览电量和性能app分析


612
00:30:43,544 --> 00:30:47,014 line:-1
你可以了解app在客户设备上


613
00:30:47,080 --> 00:30:49,716 line:-1
在电池寿命和性能方面表现如何


614
00:30:50,817 --> 00:30:53,253 line:-1
你不需要对app进行任何修改


615
00:30:53,320 --> 00:30:56,423 line:-1
你可以在Xcode 11中使用它


616
00:30:57,224 --> 00:31:00,861 line:-1
我们在整个过程中都注意保护隐私权


617
00:31:00,928 --> 00:31:03,564 line:-1
从在设备上收集数据


618
00:31:03,864 --> 00:31:06,667 line:-1
一直到在服务器上汇总数据


619
00:31:06,934 --> 00:31:10,304 line:-2
因此你今天就可以开始使用
这个数据了


620
00:31:12,139 --> 00:31:17,110 line:-2
它的运作方式是
当有用户使用你的app时


621
00:31:17,778 --> 00:31:20,347 line:-1
我们围绕你的app收集指标


622
00:31:21,048 --> 00:31:23,383 line:-1
这些指标会在设备上进行汇总


623
00:31:23,450 --> 00:31:25,319 line:-1
然后发送到我们的服务器上


624
00:31:25,586 --> 00:31:26,620 line:-1
在服务器端


625
00:31:26,954 --> 00:31:30,190 line:-2
我们对这个数据进行分析
并提取相关见解


626
00:31:30,624 --> 00:31:34,094 line:-1
这些见解在指标管理器中显示


627
00:31:35,329 --> 00:31:38,599 line:-2
请注意这些见解只显示在
指标管理器中


628
00:31:38,665 --> 00:31:42,002 line:-2
如果你的app的使用足够达到
我们的临界值的话


629
00:31:43,136 --> 00:31:46,173 line:-1
这些功能都是开箱即用


630
00:31:46,440 --> 00:31:50,077 line:-1
不需要修改你的app或开发过程


631
00:31:50,244 --> 00:31:51,912 line:-1
今天你们就可以用


632
00:31:52,679 --> 00:31:56,216 line:-1
闲话少叙 让我们看一下演示


633
00:32:03,323 --> 00:32:07,694 line:-2
要打开指标管理器
请进入窗口 管理器


634
00:32:09,062 --> 00:32:11,398 line:-1
那会提出一个熟悉的管理器窗口


635
00:32:11,465 --> 00:32:16,170 line:-2
有存档、崩溃和电量标签
以及一个全新的指标标签


636
00:32:16,770 --> 00:32:18,405 line:-1
如果你点击指标


637
00:32:18,939 --> 00:32:21,508 line:-1
你会在左手边看到


638
00:32:21,742 --> 00:32:24,645 line:-2
你在iOS App Store中
所发布的所有app


639
00:32:25,379 --> 00:32:29,416 line:-2
假设我们发布的
Awesome Photo App在这里显示


640
00:32:29,483 --> 00:32:31,618 line:-2
当我们点击那个
Awesome Photo App时


641
00:32:32,286 --> 00:32:35,155 line:-2
这个app的相关指标
会在中间面板中显示


642
00:32:35,255 --> 00:32:39,459 line:-2
指标比如电池寿命、启动时间、
挂起率内存和磁盘写入


643
00:32:39,826 --> 00:32:42,329 line:-1
这些指标是我们认为


644
00:32:42,396 --> 00:32:45,065 line:-2
你要获取优秀的app体验
应该考虑的指标


645
00:32:46,266 --> 00:32:47,701 line:-1
当你点击其中一个指标时


646
00:32:47,768 --> 00:32:50,571 line:-1
右手边会显示关于该指标的详情


647
00:32:50,938 --> 00:32:53,841 line:-1
你可以任意版本的app的指标


648
00:32:54,441 --> 00:32:57,044 line:-2
或你可以把它与之前版本的指标
进行对比


649
00:32:57,110 --> 00:33:02,482 line:-2
这里的X轴代表app版本号
Y轴代表指标值


650
00:33:03,884 --> 00:33:06,820 line:-1
让我们先来看电池指标


651
00:33:08,288 --> 00:33:10,524 line:-1
电池有两种指标


652
00:33:10,591 --> 00:33:13,160 line:-1
第一种是屏幕上的电池使用


653
00:33:13,493 --> 00:33:16,463 line:-2
这是当用户在屏幕上
与你的app进行交互时


654
00:33:16,763 --> 00:33:20,901 line:-1
所消耗的电量


655
00:33:21,235 --> 00:33:24,538 line:-1
然后后台电池使用是


656
00:33:24,738 --> 00:33:27,341 line:-1
当app在后台运行时消耗的电量


657
00:33:27,941 --> 00:33:33,146 line:-2
现在每种指标都按照系统组件
进行了进一步的划分


658
00:33:33,480 --> 00:33:36,650 line:-1
比如处理、网络、显示定位


659
00:33:36,884 --> 00:33:39,753 line:-1
从而你可以了解哪些组件


660
00:33:39,820 --> 00:33:41,755 line:-1
最消耗电量


661
00:33:43,257 --> 00:33:46,093 line:-1
让我们从后台电池使用开始看


662
00:33:46,159 --> 00:33:49,863 line:-2
因为我们知道
Awesome Photo App只在前台使用


663
00:33:50,664 --> 00:33:52,399 line:-1
通过查看后台


664
00:33:52,533 --> 00:33:56,436 line:-1
看起来每天消耗大约10%电池电量


665
00:33:56,737 --> 00:33:57,938 line:-1
这个数值非常高


666
00:33:59,006 --> 00:34:03,143 line:-2
除了这个 看起来
处理消耗了5%电量


667
00:34:03,210 --> 00:34:06,313 line:-1
网络消耗了3.66%电量


668
00:34:06,613 --> 00:34:09,183 line:-2
这些数值都太高了
我们需要进一步调试


669
00:34:09,248 --> 00:34:13,286 line:-2
找出app为什么会在后台
消耗电量的原因


670
00:34:17,391 --> 00:34:20,494 line:-2
让我们查看当最新版app
处于前台时的数据


671
00:34:21,161 --> 00:34:23,664 line:-1
最新版app处于前台时


672
00:34:23,996 --> 00:34:26,900 line:-1
看起来最新版本


673
00:34:27,434 --> 00:34:30,237 line:-1
比上一个版本降低了10%


674
00:34:30,771 --> 00:34:33,340 line:-1
其中显示指标看起来比较稳定


675
00:34:34,641 --> 00:34:37,244 line:-2
网络指标稍有增加
其它指标都稍有降低


676
00:34:37,311 --> 00:34:40,179 line:-1
但这里的罪魁祸首是处理指标


677
00:34:40,914 --> 00:34:44,918 line:-1
我们可以查看90%用户群


678
00:34:45,252 --> 00:34:48,088 line:-1
和50%用户群时的这些数据


679
00:34:48,155 --> 00:34:52,426 line:-2
看用户群是否在电量消耗方面
发挥任何作用


680
00:34:53,159 --> 00:34:55,195 line:-1
我们还可以查看


681
00:34:55,661 --> 00:35:00,400 line:-2
全部iPhone类
或全部iPad类


682
00:35:00,634 --> 00:35:03,070 line:-1
或单一设备的数据


683
00:35:03,437 --> 00:35:06,840 line:-2
让我们 比如说
查看iPhone 6设备的数据


684
00:35:07,508 --> 00:35:12,112 line:-2
对于iPhone 6
看起来电量消耗非常稳定


685
00:35:12,346 --> 00:35:17,918 line:-2
1.0.8与1.0.7相比
稍有降低


686
00:35:18,719 --> 00:35:21,922 line:-2
让我们再看一个较新的设备
比如iPhone X


687
00:35:22,456 --> 00:35:24,992 line:-1
啊 iPhone X有一个大跳跃


688
00:35:25,092 --> 00:35:28,595 line:-2
请看这里 与先前的设备相比
有一个14.4%的跳跃


689
00:35:28,896 --> 00:35:32,900 line:-1
而罪魁祸首就是处理指标


690
00:35:33,700 --> 00:35:36,470 line:-1
对此进行进一步调试有许多方式


691
00:35:37,371 --> 00:35:39,206 line:-1
我们可以直接进入代码


692
00:35:39,506 --> 00:35:43,677 line:-2
或进入我们去年引入的
那个熟悉的电量标签


693
00:35:44,411 --> 00:35:48,382 line:-2
电量标签显示实际运行时的
电量异常报告


694
00:35:49,016 --> 00:35:51,285 line:-1
你可以查看堆栈帧


695
00:35:51,785 --> 00:35:54,087 line:-1
查找哪里最消耗电量


696
00:35:54,488 --> 00:35:57,925 line:-2
我知道Ashish讲了
一种新功能…


697
00:35:59,092 --> 00:36:01,695 line:-1
他只对较新的设备


698
00:36:01,762 --> 00:36:04,198 line:-2
和我们app的1.0.8版本
添加了新功能


699
00:36:05,199 --> 00:36:08,669 line:-2
applyFilter导致了这个
问题 因此我们可以对它进行调试


700
00:36:09,503 --> 00:36:12,873 line:-1
这是其中一种使用指标


701
00:36:13,407 --> 00:36:17,110 line:-2
和电量标签来找出问题
并修复问题的方式


702
00:36:19,179 --> 00:36:21,915 line:-1
现在让我们看一下其它可用的指标


703
00:36:22,549 --> 00:36:25,452 line:-2
启动时间对于我们的用户来说
非常重要


704
00:36:25,519 --> 00:36:29,456 line:-2
因为启动慢的app会让用户们
感到失望


705
00:36:29,790 --> 00:36:32,726 line:-1
理想情况下 启动时间应该在数秒内


706
00:36:33,126 --> 00:36:39,566 line:-2
我们的Awesome Photo App在所有
iPhone上的启动时间大约在6秒钟


707
00:36:39,800 --> 00:36:44,538 line:-2
你可以使用Sastry
在他之前的演示中所讲过的工具


708
00:36:44,872 --> 00:36:46,006 line:-1
进行进一步的调试


709
00:36:47,241 --> 00:36:50,444 line:-1
挂起时间是app的无响应时间


710
00:36:50,744 --> 00:36:52,212 line:-1
单位是秒每小时


711
00:36:52,613 --> 00:36:56,517 line:-2
理想情况下挂起时间应该为0
以避免用户失望


712
00:36:58,285 --> 00:37:02,289 line:-2
我们展示了两种内存——
峰值内存和平均内存


713
00:37:02,723 --> 00:37:04,658 line:-1
内存是一种资源 我们应该…


714
00:37:05,158 --> 00:37:07,928 line:-1
我们应该只在绝对需要时使用它


715
00:37:09,096 --> 00:37:13,433 line:-2
磁盘写入是你的app所执行的
逻辑写入


716
00:37:13,967 --> 00:37:16,703 line:-1
我们需要留意我们执行了多少写入


717
00:37:17,471 --> 00:37:21,775 line:-2
我们可使用Instruments
对它进行进一步调试


718
00:37:23,877 --> 00:37:26,880 line:-1
这就是Xcode指标管理器


719
00:37:27,080 --> 00:37:32,319 line:-2
一种开箱即用的工具
用于浏览电池和性能分析


720
00:37:32,586 --> 00:37:36,223 line:-2
并围绕高耗电量性能导致的问题
进行调试


721
00:37:37,624 --> 00:37:41,895 line:-1
比如启动时间长


722
00:37:42,763 --> 00:37:46,567 line:-2
你可以检测
你可以查看最新版app的数据


723
00:37:46,934 --> 00:37:50,170 line:-2
并与上一个版本的数据做比较
并创建一个基线


724
00:37:50,637 --> 00:37:53,473 line:-1
你今天就可以使用这个工具了


725
00:37:53,540 --> 00:37:57,411 line:-1
无需修改你的app或开发生命周期


726
00:37:57,678 --> 00:38:01,315 line:-2
因此请试着使用它
并给我们提供反馈


727
00:38:01,415 --> 00:38:03,584 line:-2
非常感谢你们的聆听
舞台交还给Phil


728
00:38:08,622 --> 00:38:09,456 line:-1
谢谢Anshul


729
00:38:10,757 --> 00:38:11,925 line:-1
我们了解了这些很棒的工具


730
00:38:12,559 --> 00:38:15,195 line:-2
我想快速总结一下
我们今天讲过的内容


731
00:38:16,396 --> 00:38:18,866 line:-2
我们讲了在Xcode 11之前
就可用的工具


732
00:38:19,233 --> 00:38:22,970 line:-2
用于调试和了解
设备上的电源和性能影响


733
00:38:24,171 --> 00:38:26,673 line:-2
然后我们给你展示了一些新功能
我们认为它们非常强大


734
00:38:26,740 --> 00:38:28,509 line:-1
并会帮助你把量化


735
00:38:28,842 --> 00:38:31,144 line:-2
性能和电池寿命影响
提升到下一个层级


736
00:38:31,845 --> 00:38:34,448 line:-2
以及可以从这些工具中收集的
一组指标


737
00:38:34,748 --> 00:38:37,384 line:-1
用于进一步了解并调试代码


738
00:38:38,852 --> 00:38:40,220 line:-1
如果你从这个演示中学到了什么


739
00:38:40,921 --> 00:38:43,924 line:-2
我希望你了解了我们为你们打造了
三个很不错的工具


740
00:38:44,358 --> 00:38:46,093 line:-1
我们非常想得到你们对它们的反馈


741
00:38:46,460 --> 00:38:49,096 line:-1
这些工具会帮助你量化


742
00:38:49,363 --> 00:38:51,632 line:-2
你的app对电池寿命和性能
所产生的影响


743
00:38:52,733 --> 00:38:54,601 line:-1
那种量化会


744
00:38:54,668 --> 00:38:56,670 line:-1
帮助你做出决策


745
00:38:56,970 --> 00:38:58,906 line:-1
为所有用户提供更好的体验


746
00:39:00,407 --> 00:39:03,877 line:-2
要获取更多信息
请上网查看我们演讲的相关文档


747
00:39:05,012 --> 00:39:07,948 line:-1
或参加我们明天的电量和性能演讲


748
00:39:09,216 --> 00:39:10,717 line:-1
我们很高兴明天在演讲上见到你们


749
00:39:10,784 --> 00:39:12,486 line:-2
我们会讲如何在你的app中
实施这些工具


750
00:39:12,553 --> 00:39:15,155 line:-2
以及如何使用这些工具
为用户打造优秀体验


751
00:39:15,722 --> 00:39:17,958 line:-2
别忘了参加明天的
优化app启动演讲


752
00:39:18,125 --> 00:39:20,394 line:-1
他们会深入地讲一下app启动性能


753
00:39:21,195 --> 00:39:23,564 line:-2
再次感谢你们的参与
请享受余下的WWDC时光

