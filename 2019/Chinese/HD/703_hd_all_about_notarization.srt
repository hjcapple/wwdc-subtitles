1
00:00:01,516 --> 00:00:08,516
[音乐]


2
00:00:09,516 --> 00:00:12,546
[掌声]


3
00:00:13,046 --> 00:00:13,886
>> 大家下午好


4
00:00:14,056 --> 00:00:15,106
感谢今天来到这里


5
00:00:16,065 --> 00:00:17,416
我是 Garrett


6
00:00:17,416 --> 00:00:18,656
我是 Apple 的信任与执行团队的一员


7
00:00:18,656 --> 00:00:20,236
今天我们在这里要


8
00:00:20,236 --> 00:00:21,756
一同探讨关于公证的问题


9
00:00:22,276 --> 00:00:25,346
以下是本次演讲的一个快速议程


10
00:00:25,346 --> 00:00:26,516
我们将会首先


11
00:00:26,516 --> 00:00:27,656
简单概述一下


12
00:00:27,656 --> 00:00:29,046
公证到底是什么 以及一些


13
00:00:29,046 --> 00:00:30,006
它能够提供的好处


14
00:00:30,986 --> 00:00:31,776
然后我们将会讨论


15
00:00:31,776 --> 00:00:33,076
为使你的软件公证


16
00:00:33,076 --> 00:00:34,466
所需的 App 要求


17
00:00:35,336 --> 00:00:36,256
最后我们会过一遍


18
00:00:36,256 --> 00:00:38,156
公证你的软件


19
00:00:38,226 --> 00:00:40,086
你所需要的


20
00:00:40,086 --> 00:00:40,656
工作流程和工具


21
00:00:43,616 --> 00:00:44,666
让我们开始吧


22
00:00:45,196 --> 00:00:46,746
到底什么是公证


23
00:00:47,666 --> 00:00:50,136
嗯 这是我们在


24
00:00:50,136 --> 00:00:52,356
去年的 WWDC 上提出一个流程


25
00:00:52,746 --> 00:00:54,106
来用于在分发之前


26
00:00:54,366 --> 00:00:56,666
识别和阻断恶意软件


27
00:00:57,326 --> 00:00:59,346
现在它已经是


28
00:00:59,346 --> 00:01:00,906
Developer ID 程序的一个扩展


29
00:01:00,906 --> 00:01:02,936
意味着你不需要注册或是


30
00:01:03,586 --> 00:01:04,796
使用任何不同的证书


31
00:01:05,786 --> 00:01:07,236
也就是说你可以


32
00:01:07,236 --> 00:01:08,986
控制你的软件的


33
00:01:08,986 --> 00:01:10,366
签名和分发


34
00:01:10,696 --> 00:01:12,886
正如在引入公证之前一样


35
00:01:15,606 --> 00:01:19,826
其关键是公证服务它对


36
00:01:19,826 --> 00:01:22,136
Developer ID 签名的内容


37
00:01:22,136 --> 00:01:22,966
执行自动安全检查


38
00:01:23,546 --> 00:01:26,926
那么让我们了解一下


39
00:01:26,926 --> 00:01:30,306
当你需要开始第一次公证你的软件时的工作流程


40
00:01:32,216 --> 00:01:35,696
下面的这个图标解释了开发流程


41
00:01:35,696 --> 00:01:37,636
并且本地开发


42
00:01:37,856 --> 00:01:39,266
完全保持不变


43
00:01:39,966 --> 00:01:41,366
你在你的桌面上


44
00:01:41,576 --> 00:01:42,656
使用你的 Apple 开发人员证书


45
00:01:42,656 --> 00:01:45,236
构建并签名 直到你有一个候选版本


46
00:01:45,776 --> 00:01:48,816
此时你只需要


47
00:01:48,816 --> 00:01:50,196
使用你的 Developer ID


48
00:01:50,196 --> 00:01:52,166
证书进行签名 然后你可以将其


49
00:01:52,166 --> 00:01:53,486
副本发送至 Apple 公证服务


50
00:01:53,486 --> 00:01:55,536
来进行公证


51
00:01:56,726 --> 00:01:58,376
当公证完成并


52
00:01:58,506 --> 00:02:00,346
成功后公证服务


53
00:02:00,346 --> 00:02:02,076
会发送回一个通行证


54
00:02:02,846 --> 00:02:03,726
你可以将此通行证


55
00:02:03,726 --> 00:02:05,696
在分发前加在你的软件上


56
00:02:06,266 --> 00:02:09,045
它一旦被加上


57
00:02:09,045 --> 00:02:11,746
软件就可以被分发 和之前一样


58
00:02:14,066 --> 00:02:15,746
值得一提的是


59
00:02:16,046 --> 00:02:17,256
这一工作流程


60
00:02:17,256 --> 00:02:19,296
自去年起就没有变化 因此这只算是一个复习


61
00:02:19,946 --> 00:02:24,446
我们去年没有谈到的是


62
00:02:24,446 --> 00:02:25,776
当有人首次下载和使用你的软件时


63
00:02:25,776 --> 00:02:26,996
会发生什么


64
00:02:28,426 --> 00:02:29,406
当一个用户下载你的


65
00:02:29,406 --> 00:02:30,426
加了通行证的软件并且


66
00:02:31,006 --> 00:02:32,096
双击它来启动时


67
00:02:32,556 --> 00:02:34,716
管理员会执行一次校验


68
00:02:35,966 --> 00:02:37,616
它将会检查本地通行证


69
00:02:37,616 --> 00:02:41,066
而且它也会通过 CloudKit 与公证服务联系


70
00:02:41,066 --> 00:02:42,006
来检查通行证


71
00:02:42,906 --> 00:02:44,246
只要通行证通过了检验


72
00:02:44,246 --> 00:02:45,456
而且通行证与


73
00:02:45,456 --> 00:02:47,586
你的 App 的内容相符


74
00:02:47,586 --> 00:02:48,696
管理者会允许这个 App 运行


75
00:02:49,096 --> 00:02:50,076
用户会看到正常的


76
00:02:50,076 --> 00:02:50,876
首次启动提示


77
00:02:52,096 --> 00:02:53,746
现在我想要提醒大家的是


78
00:02:54,296 --> 00:02:56,746
公证并不是一个 App 审查


79
00:02:57,706 --> 00:02:59,186
公证服务执行


80
00:02:59,186 --> 00:03:01,366
一系列自动化的安全检查


81
00:03:03,016 --> 00:03:05,866
去年我们设定了一个目标


82
00:03:05,866 --> 00:03:07,276
即在一小时内大部分提交从


83
00:03:07,276 --> 00:03:08,586
公证服务都能获得回应


84
00:03:10,026 --> 00:03:11,026
而事实证明


85
00:03:11,026 --> 00:03:13,616
在去年 99% 的


86
00:03:13,616 --> 00:03:15,306
提交都能在


87
00:03:15,306 --> 00:03:17,376
15 分钟内获得回应


88
00:03:18,636 --> 00:03:20,486
而且公证


89
00:03:20,486 --> 00:03:22,046
服务的状态现在位于


90
00:03:22,046 --> 00:03:22,816
Apple 公共状态页上


91
00:03:23,326 --> 00:03:24,626
因此你可以很轻松地查看


92
00:03:24,626 --> 00:03:27,686
是否有可能造成问题的服务问题


93
00:03:28,246 --> 00:03:32,066
那么公证能带来什么好处


94
00:03:32,866 --> 00:03:34,566
嗯 好处有很多


95
00:03:34,666 --> 00:03:35,786
因此我今天只强调


96
00:03:35,786 --> 00:03:37,476
其中的几点


97
00:03:37,586 --> 00:03:40,646
首先公证服务可以帮你防止


98
00:03:40,646 --> 00:03:42,566
无意中发送恶意依赖项


99
00:03:44,476 --> 00:03:47,366
其次 有强行运行的 App


100
00:03:47,496 --> 00:03:49,476
在默认情况下


101
00:03:49,476 --> 00:03:50,986
更安全 我们稍后会


102
00:03:50,986 --> 00:03:51,726
详细讨论这一点


103
00:03:52,256 --> 00:03:53,636
这可以防止你的 App


104
00:03:53,636 --> 00:03:55,166
被攻击者滥用


105
00:03:59,106 --> 00:04:00,906
第三 用户更有可能


106
00:04:00,906 --> 00:04:02,456
下载和尝试新的软件 


107
00:04:02,786 --> 00:04:04,066
当他们知道 Apple 已经


108
00:04:04,066 --> 00:04:05,526
针对可知的安全问题进行了扫描后


109
00:04:08,576 --> 00:04:10,666
最后 公证还可以


110
00:04:10,666 --> 00:04:11,806
为由你的 Developer ID 账户


111
00:04:11,806 --> 00:04:13,096
公证过的软件提供


112
00:04:13,096 --> 00:04:14,706
审计跟踪


113
00:04:14,706 --> 00:04:15,896
你可以使用它来检查


114
00:04:15,896 --> 00:04:17,245
提交历史记录 确保


115
00:04:17,245 --> 00:04:20,886
你不想要从你的账户发布的软件没有被发布


116
00:04:21,625 --> 00:04:23,386
这就是关于


117
00:04:23,386 --> 00:04:24,556
公证的一点概述


118
00:04:24,926 --> 00:04:26,096
现在让我们请出 Robert


119
00:04:26,096 --> 00:04:27,116
来谈谈关于


120
00:04:27,116 --> 00:04:28,936
公证你的软件所需的 App 要求


121
00:04:29,806 --> 00:04:37,826
Robert [掌声]


122
00:04:38,326 --> 00:04:40,016
>> 首先我想说的是


123
00:04:40,016 --> 00:04:41,846
对于任何


124
00:04:41,846 --> 00:04:43,536
你们之前发布的软件


125
00:04:43,666 --> 00:04:45,246
它们都不需要满足任何新要求


126
00:04:45,246 --> 00:04:47,876
你可以将现有的


127
00:04:47,926 --> 00:04:48,896
已经分发的软件


128
00:04:48,896 --> 00:04:50,766
按照原样提交公证


129
00:04:50,766 --> 00:04:53,256
但是对于新的软件


130
00:04:53,256 --> 00:04:54,646
你需要确保它能够


131
00:04:54,646 --> 00:04:56,186
满足几个安全要求


132
00:04:56,246 --> 00:04:57,736
特别是 它必须


133
00:04:57,736 --> 00:04:59,286
被完全地和正确地签名


134
00:04:59,696 --> 00:05:02,486
并且它需要采用强化运行


135
00:05:02,486 --> 00:05:03,686
所谓新软件 我指的是


136
00:05:03,686 --> 00:05:05,816
代码签名时间在


137
00:05:05,876 --> 00:05:07,696
2019 年 6 月 1 日之后的软件


138
00:05:08,806 --> 00:05:10,436
下面我们将会详细地介绍


139
00:05:10,436 --> 00:05:11,916
这两者的含义


140
00:05:11,916 --> 00:05:13,336
即正确的签名和


141
00:05:13,336 --> 00:05:15,276
强化运行


142
00:05:15,606 --> 00:05:19,716
因此首先 当你要完全签名时 


143
00:05:19,716 --> 00:05:21,236
你真的需要那么做


144
00:05:21,236 --> 00:05:22,556
这包括捆绑包 Macho-O


145
00:05:22,586 --> 00:05:24,496
程序安装包 无论它们在哪里 


146
00:05:24,496 --> 00:05:26,546
以及无论你的


147
00:05:26,546 --> 00:05:28,086
程序安装包中是否有 Mach-O


148
00:05:28,086 --> 00:05:29,576
是否在你的捆绑包中有安装包


149
00:05:30,036 --> 00:05:31,456
无论它们


150
00:05:31,456 --> 00:05:33,306
出现在你的产品中的任何地方


151
00:05:33,306 --> 00:05:34,876
它们都需要被签名


152
00:05:34,906 --> 00:05:36,856
它们都需要被正确地签名


153
00:05:38,166 --> 00:05:39,936
所以 要正确签名意味着


154
00:05:40,026 --> 00:05:42,756
你需要签署捆绑包


155
00:05:42,756 --> 00:05:45,346
Macho-O 和代码 我等一下会


156
00:05:45,346 --> 00:05:46,546
详细介绍代码


157
00:05:46,866 --> 00:05:50,226
和你的 Developer ID App 证书 


158
00:05:50,226 --> 00:05:51,556
并确保


159
00:05:51,556 --> 00:05:52,876
包含一个安全的时间戳


160
00:05:54,176 --> 00:05:56,056
对于可执行文件 它们需要


161
00:05:56,056 --> 00:05:57,526
打开强化运行


162
00:05:57,526 --> 00:05:58,836
你不需要为


163
00:05:58,836 --> 00:06:00,196
框架或动态库文件


164
00:06:00,196 --> 00:06:01,556
或捆绑包打开强化运行


165
00:06:01,556 --> 00:06:02,196
只是对可执行文件而言的


166
00:06:03,546 --> 00:06:05,386
对于安装包你需要


167
00:06:05,386 --> 00:06:07,516
使用你的


168
00:06:07,516 --> 00:06:09,316
Developer ID 安装证书来签名


169
00:06:09,316 --> 00:06:11,856
这与你的 Developer ID App


170
00:06:11,856 --> 00:06:12,906
证书是不同的 所以要注意


171
00:06:14,236 --> 00:06:16,036
另外 如果你选择


172
00:06:16,036 --> 00:06:17,926
签名磁盘映像来避免网守


173
00:06:17,926 --> 00:06:20,306
路径随机化 则必须


174
00:06:20,306 --> 00:06:21,686
使用你的 Developer ID


175
00:06:21,686 --> 00:06:23,086
App 证书来签名 而且


176
00:06:23,086 --> 00:06:24,346
包含一个安全的时间戳


177
00:06:24,886 --> 00:06:27,926
如果你使用 Xcode


178
00:06:27,926 --> 00:06:29,266
来构建你的软件包


179
00:06:29,266 --> 00:06:29,986
你的软件 这很容易


180
00:06:29,986 --> 00:06:32,186
如果你打开自动


181
00:06:32,286 --> 00:06:34,056
代码签名 Xcode 能够


182
00:06:34,056 --> 00:06:37,016
为你完成所有这些 但你必须要注意


183
00:06:37,016 --> 00:06:39,586
如果你使用的是脚本构建阶段


184
00:06:39,586 --> 00:06:41,666
或拷贝构建阶段


185
00:06:41,776 --> 00:06:43,486
它们可能会在你的软件中


186
00:06:43,486 --> 00:06:46,656
引入新的代码 而 Xcode


187
00:06:46,656 --> 00:06:48,026
并不知道这些代码 那么你就


188
00:06:48,026 --> 00:06:50,596
需要确保它们得到正确的签名


189
00:06:51,206 --> 00:06:55,176
我提到了代码文件


190
00:06:55,576 --> 00:06:58,996
当我们在几年前提出了代码签名后


191
00:06:58,996 --> 00:07:02,456
我们在技术说明中记录了这些


192
00:07:02,456 --> 00:07:03,396
叫做代码位置的内容


193
00:07:03,706 --> 00:07:05,336
因此任何在


194
00:07:05,336 --> 00:07:06,706
其捆绑包中出现的任何文件


195
00:07:06,706 --> 00:07:07,906
都会被代码签名的


196
00:07:07,906 --> 00:07:09,376
基础结构认为是代码


197
00:07:09,376 --> 00:07:11,726
也就是说它们需要有一个附加签名


198
00:07:12,246 --> 00:07:15,726
Mach-Os 在这方面是最好的


199
00:07:15,726 --> 00:07:16,966
你可以将签名


200
00:07:16,966 --> 00:07:18,726
嵌入到任何你放在


201
00:07:18,726 --> 00:07:19,906
这些位置的 Mach-O 和


202
00:07:19,906 --> 00:07:21,536
捆绑包中 但是如果你


203
00:07:21,536 --> 00:07:23,416
放置了其他种类的文件 比如


204
00:07:23,666 --> 00:07:27,536
JPEG 文件或者原始的二进制文件


205
00:07:27,536 --> 00:07:30,116
这些文件需要被签名 但是


206
00:07:30,116 --> 00:07:31,486
它们不会获取附加


207
00:07:31,486 --> 00:07:32,826
签名 反之附加签名会


208
00:07:32,826 --> 00:07:35,386
最终成为一种扩展属性


209
00:07:35,826 --> 00:07:37,886
而这意味着当你在打包你的代码时


210
00:07:37,886 --> 00:07:41,326
你必须确保扩展属性保持在那些位置中


211
00:07:41,786 --> 00:07:43,316
为了避免需要过度小心


212
00:07:43,316 --> 00:07:44,686
我们建议你


213
00:07:44,686 --> 00:07:46,236
将一切不是


214
00:07:46,236 --> 00:07:47,786
Macho-O 或是包含


215
00:07:47,786 --> 00:07:49,406
Macho-O 的捆绑包的任何东西放置于


216
00:07:49,406 --> 00:07:50,986
这些位置之外的地方


217
00:07:50,986 --> 00:07:51,946
当构建你的 App 时


218
00:07:52,646 --> 00:07:56,976
因此 当你在


219
00:07:56,976 --> 00:07:58,976
Xcode 之外签名时 我们推荐使用


220
00:07:58,976 --> 00:08:00,206
彻底性代码签名


221
00:08:00,486 --> 00:08:02,016
这意味着你首先


222
00:08:02,016 --> 00:08:05,096
在你的 App 中的


223
00:08:05,096 --> 00:08:07,826
最深层嵌套的包或代码段签名


224
00:08:08,366 --> 00:08:10,216
这种情况下 应该是


225
00:08:10,216 --> 00:08:11,876
Updater.app


226
00:08:11,876 --> 00:08:13,596
在 Sparkle 框架内


227
00:08:13,596 --> 00:08:17,116
在 WatchingGrassGrow.app 之下


228
00:08:17,116 --> 00:08:18,656
然后你向上移动一级


229
00:08:18,656 --> 00:08:20,686
然后分别对每一项进行签名


230
00:08:20,926 --> 00:08:21,966
请注意 当你签署


231
00:08:21,966 --> 00:08:24,046
Sparkle 框架 或者


232
00:08:24,046 --> 00:08:25,456
抓取 Sparkle 主要执行文件的


233
00:08:25,456 --> 00:08:27,356
Sparkle 框架 以及


234
00:08:27,356 --> 00:08:29,086
同时签署 updater.app 时


235
00:08:29,086 --> 00:08:32,966
你需要分别去 WatchingGrassGrow.saver


236
00:08:32,966 --> 00:08:35,846
growGrass.dylib 以及


237
00:08:35,846 --> 00:08:36,976
WatchingGrassGrowHelper


238
00:08:38,015 --> 00:08:39,515
最终当你完成签名


239
00:08:39,515 --> 00:08:40,756
所有这些后 你需要


240
00:08:40,756 --> 00:08:42,446
在最顶层的捆绑包签署所有内容


241
00:08:42,446 --> 00:08:44,285
这会签署最主要的


242
00:08:44,285 --> 00:08:45,846
可执行文件


243
00:08:45,846 --> 00:08:47,786
如你的 info. plist 所示


244
00:08:48,996 --> 00:08:50,616
你们中有些人在


245
00:08:50,716 --> 00:08:52,106
自定义工作流程中使用 -- Deep 标志


246
00:08:52,106 --> 00:08:54,406
但那样需要额外注意


247
00:08:54,586 --> 00:08:56,146
-- Deep 标志仅仅


248
00:08:56,146 --> 00:08:57,906
在代码位置中寻找代码


249
00:08:58,176 --> 00:09:01,346
而在这个案例中 growGrass.dylib


250
00:09:01,346 --> 00:09:03,046
WatchingGrassGrow.saver


251
00:09:03,046 --> 00:09:05,066
以及 Updater.app


252
00:09:05,526 --> 00:09:07,326
不会被当做是代码


253
00:09:07,326 --> 00:09:08,176
它们会被当做是


254
00:09:08,176 --> 00:09:09,876
资源来签名 而非


255
00:09:09,876 --> 00:09:12,566
作为代码被签名 因此他们会被


256
00:09:12,566 --> 00:09:13,846
拒绝公证 除非你愿意


257
00:09:13,846 --> 00:09:15,576
多费劲做彻底性签名


258
00:09:16,756 --> 00:09:19,856
可以在会后查看 Technote 2206


259
00:09:19,856 --> 00:09:20,976
获取更多关于


260
00:09:20,976 --> 00:09:24,686
彻底性签名和代码位置的信息


261
00:09:26,226 --> 00:09:29,296
当你完全正确地签名了你的


262
00:09:29,296 --> 00:09:30,996
软件 你需要确保


263
00:09:30,996 --> 00:09:32,676
你的签名不会失效顾客


264
00:09:32,886 --> 00:09:33,786
也就是说 你永远不应该


265
00:09:33,786 --> 00:09:35,396
更改你的数据包中的文件


266
00:09:35,396 --> 00:09:36,856
除非是安装或


267
00:09:36,856 --> 00:09:38,856
更新期间 而且当你更新软件时


268
00:09:38,856 --> 00:09:40,586
确保更新的结果


269
00:09:40,586 --> 00:09:42,526
是在顾客系统中


270
00:09:42,606 --> 00:09:44,916
正确的签名和公证过的


271
00:09:44,916 --> 00:09:48,356
那么接下来我们会深入地


272
00:09:48,356 --> 00:09:49,306
介绍强化运行


273
00:09:49,306 --> 00:09:50,476
我们去年在 WWDC


274
00:09:50,476 --> 00:09:53,696
已经介绍了强化运行


275
00:09:53,696 --> 00:09:55,166
现在我们将会


276
00:09:55,166 --> 00:09:57,076
提供更多细节 讨论它的


277
00:09:57,126 --> 00:09:59,316
优势和配置问题


278
00:09:59,776 --> 00:10:03,346
强化运行将


279
00:10:03,346 --> 00:10:04,676
很多我们在


280
00:10:04,676 --> 00:10:06,526
macOS 上所拥有的系统完整性保护


281
00:10:06,526 --> 00:10:08,286
扩展到了你的 App 中


282
00:10:08,696 --> 00:10:10,376
包括 运行代码签名执行


283
00:10:10,376 --> 00:10:12,296
库验证


284
00:10:12,646 --> 00:10:13,906
DYLD 环境变量保护


285
00:10:13,906 --> 00:10:15,716
和调试保护


286
00:10:16,146 --> 00:10:17,126
请注意 全部这些


287
00:10:17,206 --> 00:10:19,056
保护是默认配置的


288
00:10:19,056 --> 00:10:21,266
在 iOS 不能配置


289
00:10:21,266 --> 00:10:22,896
但是在 macOS 是可以


290
00:10:22,896 --> 00:10:24,216
通过任何开发人员都可以设置的


291
00:10:24,216 --> 00:10:25,656
权限进行配置的


292
00:10:26,106 --> 00:10:29,306
因此如果你在使用 Xcode


293
00:10:29,306 --> 00:10:31,276
配置强化运行很简单 


294
00:10:31,466 --> 00:10:34,096
只需要进入签名与功能选项卡 确保


295
00:10:34,096 --> 00:10:35,706
强化运行功能


296
00:10:35,706 --> 00:10:38,026
可用于你的目标即可


297
00:10:40,226 --> 00:10:41,886
然后你可以选择


298
00:10:41,886 --> 00:10:42,866
你所需要的权限


299
00:10:42,866 --> 00:10:44,566
来为你的项目


300
00:10:44,566 --> 00:10:47,146
配置强化运行 通过勾选以下复选框


301
00:10:47,856 --> 00:10:51,166
如果你正在使用


302
00:10:51,166 --> 00:10:52,836
Xcode 之外的自定义工作流程 你可以


303
00:10:52,836 --> 00:10:54,126
使用代码签名指令来


304
00:10:54,126 --> 00:10:55,576
配置强化运行


305
00:10:55,576 --> 00:10:57,426
为此你可以使用


306
00:10:57,426 --> 00:11:00,416
代码签名的 options runtime 指令


307
00:11:00,416 --> 00:11:02,176
确保你同时使用了 timestamp 选项


308
00:11:02,176 --> 00:11:06,126
来确保在你的 App 上有一个


309
00:11:06,126 --> 00:11:06,876
安全的时间戳


310
00:11:07,466 --> 00:11:11,076
为了确认你已经


311
00:11:11,076 --> 00:11:12,316
正确地配置了强化运行


312
00:11:12,616 --> 00:11:14,136
使用代码签名下的 display 选项


313
00:11:14,136 --> 00:11:15,526
设定 verbose


314
00:11:15,526 --> 00:11:17,636
数值为 2 然后


315
00:11:17,636 --> 00:11:19,836
在标志部分寻找 runtime 一词


316
00:11:20,466 --> 00:11:21,566
另外需要注意的是


317
00:11:21,596 --> 00:11:22,346
强化运行是版本化的


318
00:11:22,796 --> 00:11:24,076
当你使用强化运行来


319
00:11:24,076 --> 00:11:26,046
签名时 我们会记录下来


320
00:11:26,136 --> 00:11:27,706
你所签名使用的版本


321
00:11:27,706 --> 00:11:29,496
因此 如果我们想要


322
00:11:29,496 --> 00:11:30,476
在未来为强化运行


323
00:11:30,476 --> 00:11:31,656
添加更多保护


324
00:11:31,866 --> 00:11:33,366
我们会确保


325
00:11:33,366 --> 00:11:34,456
目前你的 App 已经测试过的那些


326
00:11:34,456 --> 00:11:36,356
才会在未来的系统中应用


327
00:11:39,386 --> 00:11:41,556
那么什么是运行代码签名执行呢


328
00:11:42,186 --> 00:11:44,906
它防止在没有一个相关的


329
00:11:44,906 --> 00:11:47,056
代码签名时 在你的进程中


330
00:11:47,056 --> 00:11:51,016
创建一个可执行内存


331
00:11:51,016 --> 00:11:52,556
通过首先确保


332
00:11:52,556 --> 00:11:54,196
映射到你的进程中的所有字节


333
00:11:54,196 --> 00:11:55,666
与其相关联的代码签名匹配


334
00:11:55,666 --> 00:11:57,146
当它们被从磁盘中读取时来实现此目的


335
00:11:57,146 --> 00:11:59,256
这不仅仅包括你的


336
00:11:59,256 --> 00:12:00,976
Mach-O 中的可执行区域 也包括


337
00:12:00,976 --> 00:12:02,436
非可执行映射


338
00:12:02,436 --> 00:12:03,476
比如只读部分


339
00:12:05,476 --> 00:12:07,316
并且防止执行


340
00:12:07,316 --> 00:12:08,866
与其签名不相符的


341
00:12:08,866 --> 00:12:09,786
已修改内存


342
00:12:10,456 --> 00:12:12,886
因此 通过确认


343
00:12:12,976 --> 00:12:14,496
我们正在从


344
00:12:14,496 --> 00:12:15,866
磁盘中读取的内存如


345
00:12:15,866 --> 00:12:17,176
它最初时一样 并且


346
00:12:17,176 --> 00:12:18,186
不能被更改


347
00:12:18,186 --> 00:12:19,436
我们能够确保你的


348
00:12:19,436 --> 00:12:20,386
进程在运行中的一致性


349
00:12:22,546 --> 00:12:24,116
那么其中一个


350
00:12:24,116 --> 00:12:25,336
可能在使用


351
00:12:25,336 --> 00:12:26,546
运行代码签名执行


352
00:12:26,546 --> 00:12:28,446
出现的问题是 如果你的代码使用


353
00:12:28,446 --> 00:12:31,066
JIT 来在你的 App 中


354
00:12:31,066 --> 00:12:31,896
快速运行非本机代码


355
00:12:32,526 --> 00:12:33,986
为此我们建议你


356
00:12:33,986 --> 00:12:35,486
使用允许 JIT 授权


357
00:12:35,886 --> 00:12:37,936
然后使用 MAP-JIT 标志


358
00:12:37,936 --> 00:12:39,306
当你分配你的


359
00:12:39,306 --> 00:12:40,926
你所编译代码的


360
00:12:40,926 --> 00:12:42,976
读/写/执行内存时


361
00:12:43,276 --> 00:12:45,096
这允许我们


362
00:12:45,096 --> 00:12:46,266
对系统中的其他内存


363
00:12:46,266 --> 00:12:47,586
保有其他的保护


364
00:12:47,586 --> 00:12:49,556
同时给你提供


365
00:12:49,556 --> 00:12:51,506
临时空间内存来


366
00:12:51,506 --> 00:12:52,996
让你完成需要使用 JIT 的操作


367
00:12:54,026 --> 00:12:57,586
如果你无法使用 MAP-JIT


368
00:12:57,586 --> 00:12:58,686
标志 是因为你没有


369
00:12:58,776 --> 00:13:01,506
你的 JIT 引擎的源代码访问权限


370
00:13:01,756 --> 00:13:02,946
你可以使用允许未签名


371
00:13:02,946 --> 00:13:04,466
可执行内存权限


372
00:13:04,936 --> 00:13:06,906
这一操作将会降低


373
00:13:06,906 --> 00:13:09,126
运行代码签名执行所提供的


374
00:13:09,126 --> 00:13:11,796
安全性预测


375
00:13:11,796 --> 00:13:13,396
仅确认对于每一个


376
00:13:13,396 --> 00:13:14,556
具有代码签名的内存


377
00:13:14,556 --> 00:13:16,686
所有你从磁盘读取的


378
00:13:16,686 --> 00:13:17,976
字节都能够


379
00:13:18,216 --> 00:13:20,586
实际上匹配 但是它会


380
00:13:20,586 --> 00:13:23,366
允许修改任何


381
00:13:23,366 --> 00:13:25,256
你的进程内的内存


382
00:13:25,426 --> 00:13:27,976
并且允许创建


383
00:13:28,476 --> 00:13:29,886
未签名的可执行区域


384
00:13:32,606 --> 00:13:33,446
另一个我们看到的


385
00:13:33,446 --> 00:13:34,636
一些开发人员遇到的挑战是


386
00:13:34,636 --> 00:13:39,086
他们试图去修补一些


387
00:13:39,086 --> 00:13:40,066
已经加载的系统框架


388
00:13:40,066 --> 00:13:43,106
在已经使用了强化运行之后


389
00:13:43,866 --> 00:13:45,656
我们不建议你这么做


390
00:13:45,656 --> 00:13:46,776
你应该查看


391
00:13:46,776 --> 00:13:47,666
是否有任何强化运行


392
00:13:47,736 --> 00:13:49,396
功能实际上


393
00:13:49,686 --> 00:13:51,846
解决了你这样做的原因


394
00:13:51,966 --> 00:13:53,746
不过 如果你需要


395
00:13:53,746 --> 00:13:54,916
允许未签名可执行内存权限


396
00:13:54,916 --> 00:13:56,676
会执行你所


397
00:13:56,676 --> 00:13:58,166
需要的操作 允许你修改


398
00:13:58,166 --> 00:14:00,636
已映射的那些内存页


399
00:14:01,606 --> 00:14:04,046
另外一个我们观察到的


400
00:14:04,046 --> 00:14:05,616
有关于允许代码签名执行


401
00:14:05,616 --> 00:14:07,986
的问题是


402
00:14:07,986 --> 00:14:09,796
有些人在更新


403
00:14:09,796 --> 00:14:11,486
App 时发生崩溃


404
00:14:11,916 --> 00:14:13,806
这是因为代码签名


405
00:14:13,806 --> 00:14:16,066
在内核中首次使用时


406
00:14:16,066 --> 00:14:17,966
被锁存在文件中


407
00:14:17,966 --> 00:14:20,206
这意味着如果你修改已经


408
00:14:20,206 --> 00:14:23,006
运行和被签名的文件


409
00:14:23,006 --> 00:14:23,986
它会不再匹配


410
00:14:23,986 --> 00:14:25,076
内核中已有的签名


411
00:14:25,076 --> 00:14:26,296
你就会看到


412
00:14:26,296 --> 00:14:27,816
代码签名错误


413
00:14:28,626 --> 00:14:30,216
我们的建议是


414
00:14:30,216 --> 00:14:31,916
不要直接修改


415
00:14:31,916 --> 00:14:33,146
磁盘中的已有文件


416
00:14:33,146 --> 00:14:35,626
而是始终创建一个


417
00:14:35,656 --> 00:14:37,306
具有更新内容的新文件


418
00:14:37,306 --> 00:14:38,376
并移除旧文件


419
00:14:38,696 --> 00:14:42,056
这会确保首次使用的新文件获取


420
00:14:42,056 --> 00:14:44,366
其代码签名而不会


421
00:14:44,366 --> 00:14:45,986
出现你所看到的代码签名错误


422
00:14:48,746 --> 00:14:50,226
那么下面我们来讨论一下库验证


423
00:14:52,746 --> 00:14:54,156
库验证可以保护


424
00:14:54,156 --> 00:14:55,586
你的 App 免受代码注入和


425
00:14:55,586 --> 00:14:56,586
动态库劫持


426
00:14:57,056 --> 00:14:58,736
通过确保你的 App


427
00:14:58,736 --> 00:15:00,406
仅加载由你的


428
00:15:00,406 --> 00:15:01,806
团队或是 Apple 签名的代码


429
00:15:01,806 --> 00:15:03,626
有的人或许会问


430
00:15:03,626 --> 00:15:05,436
为什么需要加载由


431
00:15:05,436 --> 00:15:05,896
Apple 签名的代码


432
00:15:06,036 --> 00:15:07,326
好吧 请记住


433
00:15:07,326 --> 00:15:08,906
所有的你从操作系统中


434
00:15:08,906 --> 00:15:09,676
加载的框架和库


435
00:15:09,676 --> 00:15:11,156
都是经过 Apple 签名的


436
00:15:11,156 --> 00:15:15,076
因此你需要能够调用


437
00:15:12,486 --> 00:15:14,616
它们并且将它们加载到你的进程中


438
00:15:16,156 --> 00:15:17,956
请注意 库验证


439
00:15:18,056 --> 00:15:19,746
可防止加载未签名的


440
00:15:19,746 --> 00:15:21,106
和临时签名的代码


441
00:15:21,706 --> 00:15:23,946
因此在开发过程中要保持小心


442
00:15:23,946 --> 00:15:25,396
确保你在使用 Apple 开发证书 


443
00:15:25,396 --> 00:15:28,416
而并非关闭代码签名或


444
00:15:28,646 --> 00:15:30,416
只是使用临时签名


445
00:15:33,946 --> 00:15:35,926
因此 库验证可能会


446
00:15:35,926 --> 00:15:38,806
对某些使用进程内插件


447
00:15:39,066 --> 00:15:40,856
或生态系统的 App 带来挑战


448
00:15:41,536 --> 00:15:42,606
我们建议你考虑


449
00:15:42,606 --> 00:15:44,546
迁移到一个进程外


450
00:15:44,546 --> 00:15:46,056
插件模型 因此你就不需要


451
00:15:46,306 --> 00:15:48,036
将未知的第三方代码


452
00:15:48,036 --> 00:15:50,746
加载到你的 App 中 但是假设你


453
00:15:50,746 --> 00:15:52,606
做不到 你可以使用禁用


454
00:15:52,606 --> 00:15:54,016
库验证权限


455
00:15:54,096 --> 00:15:55,816
这一操作会允许加载


456
00:15:55,816 --> 00:15:57,756
未签名和临时签名的插件


457
00:15:58,136 --> 00:15:59,336
请注意 你可以自行


458
00:15:59,336 --> 00:16:01,756
执行这个操作 不需要


459
00:16:01,996 --> 00:16:02,986
执行任何运行代码或


460
00:16:02,986 --> 00:16:04,796
选择执行相关权限


461
00:16:05,036 --> 00:16:06,226
只需把禁用


462
00:16:06,226 --> 00:16:07,896
库验证打开 当系统


463
00:16:07,896 --> 00:16:09,636
发现你正在加载一个


464
00:16:09,636 --> 00:16:11,486
临时签名或未签名的


465
00:16:11,486 --> 00:16:12,546
插件时 它会降低


466
00:16:12,546 --> 00:16:14,726
你进程的安全性


467
00:16:14,726 --> 00:16:15,966
来允许此发生 因为你已经


468
00:16:15,966 --> 00:16:18,666
告知系统想要加载未签名的插件


469
00:16:20,096 --> 00:16:22,536
下一个是 DYLD 环境


470
00:16:22,536 --> 00:16:23,306
变量保护


471
00:16:23,816 --> 00:16:26,256
DYLD 环境变量


472
00:16:26,256 --> 00:16:27,826
在你的开发过程中


473
00:16:27,826 --> 00:16:29,976
对于加载


474
00:16:29,976 --> 00:16:31,716
调试库到你的 App 中十分有用


475
00:16:31,806 --> 00:16:35,746
当你在测试或使用一些库


476
00:16:35,816 --> 00:16:36,856
或者一些正在构建


477
00:16:36,856 --> 00:16:38,176
和正在开发的的框架


478
00:16:38,176 --> 00:16:39,386
但还未准备好将它们


479
00:16:39,386 --> 00:16:40,536
置入你的 App 中 仅是测试时


480
00:16:40,956 --> 00:16:42,626
但是它们可能是危险的


481
00:16:42,676 --> 00:16:43,766
因为在你的构建和


482
00:16:43,766 --> 00:16:44,626
测试过程中可以做的


483
00:16:44,626 --> 00:16:46,316
任何操作 攻击者都可以


484
00:16:46,316 --> 00:16:48,996
在一个顾客系统中操作来


485
00:16:48,996 --> 00:16:51,176
利用你的 App 可用的


486
00:16:51,176 --> 00:16:52,256
权限或数据


487
00:16:53,466 --> 00:16:54,656
因为这个原因


488
00:16:54,656 --> 00:16:56,276
当你使用它时 强化运行会


489
00:16:56,276 --> 00:16:57,826
默认阻止这些变量


490
00:16:58,656 --> 00:17:01,916
如果你在调试过程中


491
00:17:01,916 --> 00:17:03,806
需要使用 DYLD 环境变量


492
00:17:03,806 --> 00:17:04,776
你可以在调试版本中


493
00:17:04,776 --> 00:17:06,256
使用获取任务允许权限


494
00:17:06,586 --> 00:17:07,866
请注意 Xcode


495
00:17:07,866 --> 00:17:09,236
会在你创建调试时


496
00:17:09,236 --> 00:17:10,906
自动为你启用


497
00:17:10,906 --> 00:17:11,796
而当你创建发布版本时


498
00:17:11,796 --> 00:17:14,656
自动为你关闭


499
00:17:15,296 --> 00:17:16,945
但是请注意 如果你在


500
00:17:16,945 --> 00:17:18,906
使用一个自定义工作流程


501
00:17:18,945 --> 00:17:20,336
大多数情况下公证服务


502
00:17:20,425 --> 00:17:21,786
无法接受具有


503
00:17:21,786 --> 00:17:22,776
获取任务允许权限的二进制文件


504
00:17:22,776 --> 00:17:25,806
因此在你向公证服务发送你的


505
00:17:25,965 --> 00:17:27,976
发布版本之前 请确保已经关闭此权限


506
00:17:30,246 --> 00:17:33,626
因此在少数情况下 我们看到


507
00:17:33,626 --> 00:17:37,066
开发人员需要使用


508
00:17:37,066 --> 00:17:39,326
DYLD 环境变量


509
00:17:39,326 --> 00:17:40,696
当他们向用户发布他们的 App 时


510
00:17:41,406 --> 00:17:42,886
同样 我们并不建议


511
00:17:42,886 --> 00:17:43,376
你这么做


512
00:17:43,376 --> 00:17:45,936
这可能非常危险


513
00:17:45,936 --> 00:17:47,136
容易在顾客系统上


514
00:17:47,136 --> 00:17:48,716
利用你的 App 但是如果你


515
00:17:48,716 --> 00:17:50,256
需要的话 有一个权限可以


516
00:17:50,306 --> 00:17:52,496
允许 DYLD 环境变量


517
00:17:52,496 --> 00:17:53,836
这会允许


518
00:17:53,886 --> 00:17:55,196
使用这些变量 并且被


519
00:17:55,196 --> 00:17:55,926
公证服务所接受


520
00:17:56,386 --> 00:17:59,506
下一个是调试保护


521
00:18:00,036 --> 00:18:03,916
我们都知道调试器


522
00:18:03,916 --> 00:18:05,956
允许开发人员来检视


523
00:18:05,956 --> 00:18:07,596
寄存器和内存状态


524
00:18:07,916 --> 00:18:09,466
修改进程内存


525
00:18:09,906 --> 00:18:11,606
这意味着它们允许黑客


526
00:18:12,476 --> 00:18:14,266
窃取敏感的用户数据


527
00:18:14,266 --> 00:18:15,306
和注入恶意代码


528
00:18:16,006 --> 00:18:17,146
因此在默认设置下


529
00:18:17,196 --> 00:18:19,096
强化运行不允许


530
00:18:19,096 --> 00:18:21,746
调试强化过程


531
00:18:21,746 --> 00:18:24,186
但是如果你需要


532
00:18:24,186 --> 00:18:25,666
在开发流中使用调试器


533
00:18:25,666 --> 00:18:26,986
同样 获取允许任务权限


534
00:18:26,986 --> 00:18:28,646
是你所需要的


535
00:18:28,646 --> 00:18:30,216
与 DYLD 环境变量一起


536
00:18:30,216 --> 00:18:31,376
获取任务允许权限


537
00:18:31,376 --> 00:18:34,036
会允许你的 App 被调试


538
00:18:35,226 --> 00:18:37,456
但是如果你使用


539
00:18:37,456 --> 00:18:39,426
附带的调试器进行所有测试 需要小心 


540
00:18:39,426 --> 00:18:40,996
这会掩盖一些


541
00:18:41,086 --> 00:18:42,536
其他你可能遇到的


542
00:18:42,536 --> 00:18:43,556
强化运行相关的问题


543
00:18:43,556 --> 00:18:45,866
尤其是有关运行代码签名执行的


544
00:18:46,066 --> 00:18:47,426
基本上 一旦调试器


545
00:18:47,426 --> 00:18:49,376
被附加 我们就不再能强制


546
00:18:49,696 --> 00:18:51,036
执行代码签名了


547
00:18:51,656 --> 00:18:53,266
因为调试器 例如设定一个断点


548
00:18:53,266 --> 00:18:57,086
会自动更改你的进程中的数据


549
00:18:57,086 --> 00:18:58,256
如果我们继续


550
00:18:58,256 --> 00:18:59,616
强制执行它们


551
00:18:59,616 --> 00:19:00,146
它们会立即崩溃


552
00:19:00,606 --> 00:19:01,956
因此请确保测试


553
00:19:01,956 --> 00:19:03,376
发布版本来查看


554
00:19:03,666 --> 00:19:04,626
运行代码签名执行


555
00:19:04,626 --> 00:19:07,216
可能具有的其他影响


556
00:19:07,216 --> 00:19:08,806
然后如果你需要


557
00:19:08,806 --> 00:19:10,676
构建一个调试版本


558
00:19:10,676 --> 00:19:12,176
而不通过 Xcode 的获取任务允许


559
00:19:12,176 --> 00:19:13,716
你可以将代码签名注入基础权限


560
00:19:13,716 --> 00:19:17,096
等于你的 Xcode 项目中的无选项


561
00:19:17,096 --> 00:19:18,456
来获取所有的调试设置 除了


562
00:19:18,456 --> 00:19:18,856
获取任务允许之外


563
00:19:21,216 --> 00:19:23,526
同样这在插件生态系统中


564
00:19:23,526 --> 00:19:26,006
也可能成为一个挑战


565
00:19:26,456 --> 00:19:27,926
因为插件开发人员需要在


566
00:19:27,926 --> 00:19:29,696
他们想要加载的 App 中


567
00:19:29,806 --> 00:19:30,716
调试他们的插件


568
00:19:31,436 --> 00:19:32,426
因此 我们同样建议你


569
00:19:32,586 --> 00:19:34,046
考虑进程外


570
00:19:34,046 --> 00:19:36,576
插件模型 或考虑


571
00:19:36,576 --> 00:19:38,666
将一个你的


572
00:19:39,186 --> 00:19:40,486
App 的调试版本发送给


573
00:19:40,486 --> 00:19:41,886
注册插件开发人员


574
00:19:42,096 --> 00:19:44,126
以便他们有能力进行


575
00:19:44,126 --> 00:19:45,416
测试 但你不需要将其发送给


576
00:19:45,416 --> 00:19:48,166
所有的顾客 但是如果


577
00:19:48,166 --> 00:19:50,776
绝对必要 公证服务


578
00:19:50,776 --> 00:19:51,826
将会接受


579
00:19:51,826 --> 00:19:53,446
获取任务允许权限


580
00:19:53,446 --> 00:19:55,066
和禁用


581
00:19:55,066 --> 00:19:56,506
库验证权的组合


582
00:19:56,506 --> 00:19:57,616
来允许此工作流程


583
00:20:00,816 --> 00:20:02,396
那么接下来我们简单谈谈


584
00:20:02,396 --> 00:20:03,706
受保护资源访问


585
00:20:05,036 --> 00:20:07,286
我们都知道


586
00:20:07,286 --> 00:20:08,406
你的顾客使用他们的 Mac 来


587
00:20:08,406 --> 00:20:10,946
存储大量的关于


588
00:20:10,946 --> 00:20:13,526
他们的生活的信息 而 Mac 则


589
00:20:13,526 --> 00:20:16,846
可以访问对安全性敏感传感器


590
00:20:17,746 --> 00:20:19,136
为了 或者 一旦你采用了


591
00:20:19,166 --> 00:20:20,376
强化运行


592
00:20:20,696 --> 00:20:21,936
你的 App 需要声明


593
00:20:21,936 --> 00:20:23,626
其需要访问其中任何


594
00:20:23,626 --> 00:20:24,626
受保护资源的意图


595
00:20:25,696 --> 00:20:27,696
我们提到了去年的


596
00:20:27,696 --> 00:20:30,516
内容 但是如果你需要访问


597
00:20:30,516 --> 00:20:32,616
这些资源中的任意一个 你需要


598
00:20:32,616 --> 00:20:34,416
在你的主捆绑包上


599
00:20:34,416 --> 00:20:37,716
获得授权 然后声明一个


600
00:20:37,716 --> 00:20:39,786
与授权有关的 usage 字符串


601
00:20:39,786 --> 00:20:41,016
以便当你的


602
00:20:41,016 --> 00:20:43,016
App 试图访问


603
00:20:43,016 --> 00:20:44,786
这些资源的其中一个时


604
00:20:44,786 --> 00:20:46,086
系统可以提供一个对话


605
00:20:46,086 --> 00:20:49,396
说明需要访问这一资源的原因


606
00:20:49,396 --> 00:20:50,586
以便你可以获取


607
00:20:50,586 --> 00:20:51,396
用户的同意


608
00:20:52,656 --> 00:20:54,826
下面是一些本部分的


609
00:20:54,826 --> 00:20:55,836
总结建议


610
00:20:55,956 --> 00:20:57,856
只使用你所需要的授权


611
00:20:57,986 --> 00:20:59,786
这一授权关闭了


612
00:20:59,786 --> 00:21:00,996
强化运行所提供的


613
00:21:00,996 --> 00:21:02,566
安全性 而且它们可以被


614
00:21:02,566 --> 00:21:04,176
任何查看你的


615
00:21:04,176 --> 00:21:05,936
App 并试图发现


616
00:21:06,256 --> 00:21:07,476
可以做点什么事情的人检视


617
00:21:07,476 --> 00:21:09,526
一旦它被发送给顾客


618
00:21:09,746 --> 00:21:11,106
因此要谨慎 只使用


619
00:21:11,106 --> 00:21:12,596
你所需要的授权 并把它们


620
00:21:12,596 --> 00:21:14,416
放在需要它们的进程中


621
00:21:14,416 --> 00:21:17,066
如果你在你的 App 中有多个进程


622
00:21:17,066 --> 00:21:18,526
多个可执行文件


623
00:21:18,526 --> 00:21:20,276
它们不太可能都需要


624
00:21:20,276 --> 00:21:21,536
同样的保护


625
00:21:21,536 --> 00:21:22,656
你可能不需要在每一个进程中


626
00:21:22,656 --> 00:21:23,446
都执行 JIT


627
00:21:23,446 --> 00:21:24,276
你可能不需要将


628
00:21:24,276 --> 00:21:25,536
插件加载到每一个进程中


629
00:21:25,806 --> 00:21:27,306
因此只使用你所需要的授权


630
00:21:27,306 --> 00:21:28,806
用于需要它们的进程


631
00:21:29,726 --> 00:21:31,306
而且当你声明


632
00:21:31,306 --> 00:21:32,866
资源访问时 确保


633
00:21:32,866 --> 00:21:34,266
那些授权仅用于


634
00:21:34,266 --> 00:21:35,696
你的 App 的主捆绑包


635
00:21:36,046 --> 00:21:38,686
那些为你的捆绑包中


636
00:21:38,686 --> 00:21:41,206
其他可执行文件所继承的包


637
00:21:41,206 --> 00:21:43,346
它们不需要出现


638
00:21:43,416 --> 00:21:44,276
只需要在主捆绑包上


639
00:21:44,716 --> 00:21:46,496
现在我要把话筒交还给


640
00:21:46,496 --> 00:21:48,686
Garrett 由他来介绍


641
00:21:48,686 --> 00:21:50,976
实际提交公证需要怎么做


642
00:21:51,516 --> 00:21:57,206
[掌声]


643
00:21:57,706 --> 00:21:58,196
>> 谢谢 Robert


644
00:21:59,036 --> 00:22:00,066
现在你们已经了解了


645
00:22:00,066 --> 00:22:00,886
在构建和设计


646
00:22:00,886 --> 00:22:02,046
App 时所要考虑的一切


647
00:22:02,046 --> 00:22:03,486
以便它为


648
00:22:03,486 --> 00:22:05,516
公证做好准备 那么你如何


649
00:22:05,516 --> 00:22:07,376
实际将它提交给公证服务呢


650
00:22:08,356 --> 00:22:11,276
我们先简单了解下


651
00:22:11,276 --> 00:22:12,846
公证的工作流程


652
00:22:12,846 --> 00:22:13,926
不管你使用的是


653
00:22:13,926 --> 00:22:15,166
Xcode 还是有一个


654
00:22:15,166 --> 00:22:17,276
自定义工作流程


655
00:22:17,406 --> 00:22:18,786
大概的工作流程是基本相同的


656
00:22:19,866 --> 00:22:20,776
你提交 App


657
00:22:20,776 --> 00:22:22,886
进行公证 检查


658
00:22:23,116 --> 00:22:25,036
公证服务的状态


659
00:22:25,336 --> 00:22:26,836
一旦公证完成


660
00:22:27,256 --> 00:22:28,936
你会获得一个标签


661
00:22:28,936 --> 00:22:31,276
你最终需要确认该标签


662
00:22:31,276 --> 00:22:32,606
和公证是否成功


663
00:22:32,606 --> 00:22:35,516
在我们进一步解释


664
00:22:35,516 --> 00:22:36,946
这个问题之前 我们应该先讨论一下


665
00:22:37,176 --> 00:22:39,636
何时应该提交什么


666
00:22:39,636 --> 00:22:40,926
你至少需要提交


667
00:22:40,926 --> 00:22:41,776
你所发行的全部软件


668
00:22:41,776 --> 00:22:45,286
但你其实也可以更频繁地


669
00:22:45,286 --> 00:22:46,616
上传提交


670
00:22:46,616 --> 00:22:47,806
让开发人员机器之外


671
00:22:47,806 --> 00:22:49,586
运行的一切


672
00:22:49,586 --> 00:22:50,676
都可以作为公证服务上传提交


673
00:22:51,076 --> 00:22:52,056
不过你也不需要


674
00:22:52,056 --> 00:22:54,126
上传所有 CI build


675
00:22:56,456 --> 00:22:58,266
团队中的任何人都可提交


676
00:22:58,266 --> 00:23:00,386
软件以供公证


677
00:23:00,926 --> 00:23:02,546
这和去年不同


678
00:23:02,876 --> 00:23:04,706
当时只有特定的成员才能这样做


679
00:23:07,076 --> 00:23:08,606
现在你已经做好准备


680
00:23:08,606 --> 00:23:09,366
提交给公证服务了


681
00:23:09,646 --> 00:23:11,596
如果你使用的是 Xcode


682
00:23:11,596 --> 00:23:12,896
那就非常容易 它已被集成到了


683
00:23:12,896 --> 00:23:14,356
档案与发行工作流程里


684
00:23:14,946 --> 00:23:16,136
所以一旦你构建了一份档案


685
00:23:16,176 --> 00:23:17,306
就可以打开 Xcode 管理器


686
00:23:17,306 --> 00:23:18,486
正如你所见的这样


687
00:23:19,306 --> 00:23:20,506
然后选择发行 App


688
00:23:20,566 --> 00:23:22,236
就像你之前使用 Developer ID 所做的那样


689
00:23:23,566 --> 00:23:27,246
选择 Developer ID 然后使用


690
00:23:27,246 --> 00:23:28,536
上传选项 把一份拷贝


691
00:23:28,536 --> 00:23:29,836
提交给公证服务


692
00:23:30,346 --> 00:23:33,306
你会在上传过程中


693
00:23:33,306 --> 00:23:35,626
看到进度条


694
00:23:35,626 --> 00:23:37,126
上传结束后


695
00:23:37,126 --> 00:23:38,586
你会回到管理器


696
00:23:38,586 --> 00:23:39,956
你会注意到


697
00:23:40,086 --> 00:23:41,566
状态已改为正在处理


698
00:23:45,086 --> 00:23:46,216
公证服务结束后


699
00:23:46,216 --> 00:23:48,386
你将把通知


700
00:23:48,386 --> 00:23:51,056
推送到 Xcode


701
00:23:51,056 --> 00:23:52,306
回到管理器后


702
00:23:52,656 --> 00:23:53,706
你会注意到状态


703
00:23:53,706 --> 00:23:55,856
已经变成了准备发行


704
00:23:55,856 --> 00:23:57,446
在屏幕的右下角


705
00:23:57,446 --> 00:23:59,826
导出已公证 App 的选项已经可用了


706
00:24:01,276 --> 00:24:02,586
点按导出已公证 App


707
00:24:02,586 --> 00:24:04,216
Xcode 将为你


708
00:24:04,216 --> 00:24:06,496
在 App 上附加通行证


709
00:24:06,496 --> 00:24:08,496
这样它就完全准备好可以发行了


710
00:24:09,926 --> 00:24:10,766
我们等一下会进一步说明


711
00:24:10,766 --> 00:24:12,026
你将如何自我核实


712
00:24:12,026 --> 00:24:15,086
因为那是自定义工作流程


713
00:24:15,086 --> 00:24:16,476
与 Xcode 之间的共享工作流程


714
00:24:17,766 --> 00:24:20,636
如果你不用 Xcode


715
00:24:21,266 --> 00:24:23,496
那么用自定义工作流程进行提交


716
00:24:23,556 --> 00:24:24,316
也一样的简单


717
00:24:24,956 --> 00:24:25,586
首先你需要考虑


718
00:24:25,586 --> 00:24:28,296
自己准备向公证服务提交什么


719
00:24:29,266 --> 00:24:31,146
公证服务接受三种


720
00:24:31,146 --> 00:24:33,466
主流格式 磁盘映像


721
00:24:33,726 --> 00:24:36,266
安装包和 zip 档案


722
00:24:36,946 --> 00:24:38,466
如果你的输出形式


723
00:24:38,466 --> 00:24:39,996
是这三种之外的格式


724
00:24:40,526 --> 00:24:41,706
那你就得先把它转换成


725
00:24:41,706 --> 00:24:42,956
这三种格式之一


726
00:24:42,956 --> 00:24:44,136
然后再发送到公证服务


727
00:24:44,666 --> 00:24:47,676
别忘了 在你创建


728
00:24:47,676 --> 00:24:49,196
zip 档案的时候


729
00:24:49,196 --> 00:24:51,026
一定要包含 macOS


730
00:24:51,026 --> 00:24:53,536
特定元数据 如扩展属性


731
00:24:54,126 --> 00:24:55,136
如果你不知道该用哪种工具


732
00:24:55,136 --> 00:24:56,456
可以在操作系统


733
00:24:56,456 --> 00:24:57,976
内置的 ditto 和 Archive Utility 中获取支持


734
00:25:01,776 --> 00:25:03,726
另外需要考虑的一个问题


735
00:25:03,726 --> 00:25:05,496
就是如果你使用


736
00:25:05,496 --> 00:25:07,266
自定义安装工具


737
00:25:07,266 --> 00:25:08,356
如果你的自定义安装工具


738
00:25:08,356 --> 00:25:10,116
要从网络上拉取内容


739
00:25:10,116 --> 00:25:11,386
作为安装的一部分


740
00:25:11,386 --> 00:25:13,556
或者如果你使用


741
00:25:13,556 --> 00:25:15,436
自定义打包格式 就会稍微麻烦一点


742
00:25:16,426 --> 00:25:17,816
如果你的自定义安装工具


743
00:25:17,816 --> 00:25:19,346
有上面的需要


744
00:25:19,736 --> 00:25:21,296
那么你也许要采取


745
00:25:21,296 --> 00:25:23,846
两步公证程序


746
00:25:23,846 --> 00:25:25,046
也就是把所有将要


747
00:25:25,046 --> 00:25:27,146
放进磁盘里的内容


748
00:25:27,146 --> 00:25:28,546
使用上面提到的三种支持格式之一


749
00:25:28,546 --> 00:25:29,856
提交公证


750
00:25:30,426 --> 00:25:32,296
对其附加通行证


751
00:25:32,296 --> 00:25:33,736
然后再单独提交你的安装 App


752
00:25:34,346 --> 00:25:37,206
现在你已经知道


753
00:25:37,206 --> 00:25:38,066
应该把哪些内容提交公证服务了


754
00:25:38,066 --> 00:25:40,453
那么具体该怎么操作呢


755
00:25:40,516 --> 00:25:42,606
Xcode 10 及更新版本


756
00:25:43,106 --> 00:25:44,336
包括一个命令行工具


757
00:25:44,336 --> 00:25:45,646
它叫做 altool


758
00:25:45,646 --> 00:25:47,336
它的作用就是和公证服务进行交互


759
00:25:47,906 --> 00:25:49,066
如果你在用多个版本的


760
00:25:49,066 --> 00:25:50,026
Xcode 那就要用


761
00:25:50,026 --> 00:25:51,186
Xcode select 以确保


762
00:25:51,186 --> 00:25:52,506
你选择了 Xcode 10 


763
00:25:52,506 --> 00:25:54,546
或更新版本 然后你就能用


764
00:25:54,726 --> 00:25:57,506
带公证 App 指令的 altool 工具了


765
00:25:58,496 --> 00:25:59,806
你需要用它提交


766
00:25:59,806 --> 00:26:02,146
主捆绑包 ID


767
00:26:02,496 --> 00:26:03,656
以及你想上传的文件


768
00:26:04,726 --> 00:26:05,916
你需要验证


769
00:26:05,916 --> 00:26:08,056
你的 Apple ID 如果你


770
00:26:08,056 --> 00:26:09,096
看一看主页面 你会看到


771
00:26:09,096 --> 00:26:10,046
使用钥匙串或者


772
00:26:10,046 --> 00:26:11,256
环境变量的选项


773
00:26:11,256 --> 00:26:12,476
这样一来你就不必


774
00:26:12,476 --> 00:26:13,446
每次都输入密码了


775
00:26:14,006 --> 00:26:16,736
公证上传完成后


776
00:26:16,736 --> 00:26:19,186
你将收到一个 UID 请求


777
00:26:20,066 --> 00:26:21,906
这个 UID 代表了


778
00:26:22,096 --> 00:26:24,206
你提交的内容


779
00:26:24,206 --> 00:26:26,526
你可以使用它和


780
00:26:26,526 --> 00:26:28,636
公证信息指令


781
00:26:28,636 --> 00:26:30,576
作为 altool 的一部分来


782
00:26:30,576 --> 00:26:32,886
查看处理状态


783
00:26:32,886 --> 00:26:34,006
你可以用这种方法来查看


784
00:26:34,286 --> 00:26:35,686
公证何时结束


785
00:26:35,686 --> 00:26:38,646
以及状态如何


786
00:26:39,766 --> 00:26:43,566
这里是一个公证成功的例子


787
00:26:43,566 --> 00:26:44,916
这里重要的是


788
00:26:44,916 --> 00:26:46,026
日志文件 URL


789
00:26:46,676 --> 00:26:47,446
无论公证是成功


790
00:26:47,446 --> 00:26:49,166
还是出了问题


791
00:26:49,166 --> 00:26:51,116
你都可以查看


792
00:26:51,116 --> 00:26:52,556
日志文件 URL


793
00:26:52,556 --> 00:26:53,416
了解更多信息


794
00:26:53,416 --> 00:26:56,676
日志文件 URL 不会


795
00:26:56,676 --> 00:26:57,376
长期存在


796
00:26:58,286 --> 00:26:59,656
它们大约只会存在一天


797
00:27:00,266 --> 00:27:01,446
所以你真的应该


798
00:27:01,446 --> 00:27:02,636
获取一个新的 UID


799
00:27:03,076 --> 00:27:04,456
这样当你需要公证信息时


800
00:27:04,456 --> 00:27:05,983
就能获取新的日志文件 URL 了


801
00:27:09,786 --> 00:27:11,646
这里的例子是一次


802
00:27:11,646 --> 00:27:12,806
成功处理的 Json 日志


803
00:27:13,726 --> 00:27:15,896
注意状态是已接受


804
00:27:16,906 --> 00:27:18,906
如果它失败了


805
00:27:18,906 --> 00:27:23,026
你就应该查看问题数组


806
00:27:23,026 --> 00:27:24,256
在成功的公证里


807
00:27:24,256 --> 00:27:25,286
这里应该是空白的


808
00:27:26,186 --> 00:27:27,906
但如果出现了失败


809
00:27:27,906 --> 00:27:29,566
这里就会出现对象


810
00:27:29,566 --> 00:27:31,116
每一个对象代表


811
00:27:31,316 --> 00:27:32,166
公证过程中的一个问题


812
00:27:32,166 --> 00:27:35,236
它会显示哪个二进制文件


813
00:27:35,236 --> 00:27:37,586
没有采用强化运行


814
00:27:37,886 --> 00:27:39,396
或者是否有什么没有被正确签署


815
00:27:40,356 --> 00:27:42,576
如果公证遭到拒绝 这里就是关键


816
00:27:43,086 --> 00:27:45,866
如果成功了


817
00:27:45,866 --> 00:27:47,166
你就应该查看


818
00:27:47,166 --> 00:27:49,176
通行证内容 特别是如果你想


819
00:27:49,176 --> 00:27:50,166
使用有趣的


820
00:27:50,166 --> 00:27:51,806
打包软件方式的话


821
00:27:52,656 --> 00:27:54,136
通行证内容应该列出


822
00:27:54,136 --> 00:27:55,936
公证服务所发现的


823
00:27:55,936 --> 00:27:57,816
每一个二进制文件


824
00:27:57,816 --> 00:27:59,116
因此每个二进制文件的信息


825
00:27:59,116 --> 00:28:00,816
都会被包含在通行证里


826
00:28:00,816 --> 00:28:01,826
以供附加


827
00:28:02,826 --> 00:28:03,906
如果你发现了


828
00:28:03,906 --> 00:28:04,836
通行证内容里缺了什么


829
00:28:04,836 --> 00:28:07,386
你就要尝试


830
00:28:07,576 --> 00:28:08,896
发现问题所在


831
00:28:08,896 --> 00:28:09,436
并再次尝试


832
00:28:10,476 --> 00:28:12,896
无论你使用的是


833
00:28:12,896 --> 00:28:14,966
Xcode 还是 altool


834
00:28:14,966 --> 00:28:16,006
处理的提交


835
00:28:16,006 --> 00:28:18,716
当公证服务完成后 你都会收到邮件


836
00:28:19,526 --> 00:28:20,746
这里的例子是


837
00:28:20,746 --> 00:28:22,646
一封代表公证成功的邮件


838
00:28:22,646 --> 00:28:24,286
说明软件已经可以附加通行证了


839
00:28:24,876 --> 00:28:28,466
然后就到了下一步


840
00:28:30,006 --> 00:28:32,106
使用 Xcode 10 及以上版本内置的


841
00:28:32,106 --> 00:28:34,606
一个叫 Stapler 的工具附加通行证


842
00:28:35,416 --> 00:28:36,656
在这里你看到的例子


843
00:28:36,656 --> 00:28:38,856
就是 Stapler 的附加指令


844
00:28:39,906 --> 00:28:40,946
你可以用它直接向


845
00:28:40,946 --> 00:28:43,726
安装包或磁盘映像附加通行证


846
00:28:44,206 --> 00:28:46,496
现在要注意的是


847
00:28:46,496 --> 00:28:48,156
你不能直接向 zip 文件附加通行证


848
00:28:48,156 --> 00:28:49,636
你需要解压 zip 文件


849
00:28:50,026 --> 00:28:51,376
向其内容附加通行证


850
00:28:51,376 --> 00:28:54,156
然后再将其打包压缩准备发行


851
00:28:57,486 --> 00:28:59,226
要注意的是


852
00:28:59,356 --> 00:29:01,856
向命令行工具和库附加通行证的功能


853
00:29:01,916 --> 00:29:03,966
目前还没有实现 虽然它们


854
00:29:03,966 --> 00:29:06,336
也都可以而且应该被公证


855
00:29:10,336 --> 00:29:12,326
附加通行证之后


856
00:29:12,326 --> 00:29:13,326
下一步就是验证


857
00:29:13,326 --> 00:29:14,226
一切都公证成功


858
00:29:14,226 --> 00:29:16,586
取决于你想验证的东西


859
00:29:16,586 --> 00:29:17,756
这一步会有小小的不同


860
00:29:17,756 --> 00:29:20,086
但首先要做的事很简单


861
00:29:20,086 --> 00:29:21,226
如果你只是想验证


862
00:29:21,226 --> 00:29:22,506
某些东西附加了通行证


863
00:29:23,136 --> 00:29:24,496
那你只需再次使用 Stapler 工具


864
00:29:25,106 --> 00:29:26,706
在这里你可以看到


865
00:29:26,706 --> 00:29:28,546
向 Stapler 工具输入了验证指令


866
00:29:29,046 --> 00:29:30,096
让它去验证一个项目


867
00:29:30,286 --> 00:29:33,566
正确地附加了通行证


868
00:29:33,566 --> 00:29:34,326
而如果你想验证


869
00:29:34,326 --> 00:29:36,146
某些未附加通行证


870
00:29:36,596 --> 00:29:38,636
或者不是由你亲自附加通行证的项目


871
00:29:38,816 --> 00:29:40,146
是否得到成功公证 该怎么做呢


872
00:29:40,706 --> 00:29:41,376
在这种情况下


873
00:29:41,376 --> 00:29:43,586
你就要用到 SPCTL 指令


874
00:29:44,026 --> 00:29:45,716
它是 macOS 中内置的


875
00:29:46,616 --> 00:29:48,396
运行把关评估的工具


876
00:29:48,936 --> 00:29:51,696
取决于你想验证的内容


877
00:29:51,696 --> 00:29:53,246
这一步也会有轻微的不同


878
00:29:53,246 --> 00:29:55,006
但如果你想验证


879
00:29:55,006 --> 00:29:56,416
一个 App 捆绑包


880
00:29:56,416 --> 00:29:58,856
你可以使用 SPCTL 指令的


881
00:29:58,856 --> 00:30:01,466
评估选项中的


882
00:30:02,316 --> 00:30:04,666
详细输出了解


883
00:30:04,826 --> 00:30:06,026
到 App 的路径


884
00:30:07,296 --> 00:30:08,786
source 会告诉你


885
00:30:08,786 --> 00:30:09,756
它是否得到了公证


886
00:30:10,656 --> 00:30:11,956
经公证的 Developer ID 意味着


887
00:30:11,956 --> 00:30:12,786
它成功地得到了公证


888
00:30:12,786 --> 00:30:13,986
而如果它显示出


889
00:30:13,986 --> 00:30:15,706
其它内容 那就说明


890
00:30:15,706 --> 00:30:16,566
它没有得到公证


891
00:30:17,036 --> 00:30:20,086
而如果你想验证


892
00:30:20,086 --> 00:30:21,046
安装包是否得到了公证


893
00:30:21,046 --> 00:30:24,616
你也可以像刚才那样


894
00:30:24,616 --> 00:30:26,446
使用 SPCTL 指令


895
00:30:26,446 --> 00:30:27,806
只不过再加上一个


896
00:30:27,866 --> 00:30:30,176
类型选项把路径改成安装包


897
00:30:31,446 --> 00:30:32,436
同样 这也会为你显示


898
00:30:32,436 --> 00:30:33,976
source 如果它得到了


899
00:30:33,976 --> 00:30:35,066
成功认证 你就会看到


900
00:30:35,066 --> 00:30:37,186
经公证的 Developer ID


901
00:30:39,856 --> 00:30:42,586
接下来 如果你想验证


902
00:30:42,586 --> 00:30:45,186
已签署的磁盘映像又该怎么做呢


903
00:30:46,796 --> 00:30:48,206
你也可以使用


904
00:30:48,206 --> 00:30:49,766
基本相同的指令


905
00:30:49,766 --> 00:30:52,186
只不过要换成 type open


906
00:30:52,186 --> 00:30:53,846
并输入幻灯片上


907
00:30:54,346 --> 00:30:55,596
列出的上下文


908
00:30:56,726 --> 00:30:57,866
这会显示出和刚才一样的


909
00:30:57,866 --> 00:31:00,366
输出 如果显示的是


910
00:31:00,366 --> 00:31:01,586
经公证的 Developer ID


911
00:31:01,946 --> 00:31:03,966
就说明已签署磁盘映像的公证成功了


912
00:31:05,546 --> 00:31:06,246
如果你想验证


913
00:31:06,246 --> 00:31:08,006
其它任何对象的公证状态


914
00:31:08,006 --> 00:31:09,736
你就需要使用


915
00:31:09,736 --> 00:31:11,766
代码签名指令


916
00:31:13,456 --> 00:31:14,726
这里的例子就是使用


917
00:31:14,726 --> 00:31:17,126
代码签名指令的验证功能


918
00:31:17,126 --> 00:31:21,316
详细输出 以验证


919
00:31:21,316 --> 00:31:22,706
一个非常特别的请求


920
00:31:23,226 --> 00:31:25,306
notarized 然后是到


921
00:31:25,306 --> 00:31:26,376
二进制文件的路径或者


922
00:31:26,376 --> 00:31:29,086
你想验证的东西


923
00:31:29,086 --> 00:31:30,126
输出的第三行会告诉你


924
00:31:30,126 --> 00:31:31,896
explicit requirements satisfied


925
00:31:32,276 --> 00:31:33,206
这说明你输入到


926
00:31:33,206 --> 00:31:34,506
命令行的请求


927
00:31:34,506 --> 00:31:35,976
已经成功得到满足


928
00:31:35,976 --> 00:31:37,586
在这个例子里就说明


929
00:31:37,586 --> 00:31:39,406
二进制文件得到了公证


930
00:31:40,536 --> 00:31:42,366
如果它说的是


931
00:31:42,366 --> 00:31:44,126
explicit requirement failed 


932
00:31:44,126 --> 00:31:45,936
那就说明二进制文件没有得到成功公证


933
00:31:46,546 --> 00:31:50,056
关于验证公证的方法


934
00:31:50,266 --> 00:31:51,366
就讲到这里


935
00:31:51,816 --> 00:31:53,176
我想再调回去


936
00:31:53,176 --> 00:31:55,586
讲一下 altool 的另一个用途


937
00:31:55,586 --> 00:31:57,226
我在这次演讲开始时提过它


938
00:31:58,636 --> 00:32:00,386
altool 还能通过


939
00:32:00,386 --> 00:32:02,506
公证历史指令


940
00:32:02,506 --> 00:32:04,646
为你显示你提交公证过的


941
00:32:04,646 --> 00:32:06,006
所有软件的


942
00:32:06,006 --> 00:32:08,226
公证历史


943
00:32:09,406 --> 00:32:10,446
在这里你会看到


944
00:32:10,446 --> 00:32:12,576
指令与输出的范例


945
00:32:13,156 --> 00:32:14,546
它还能接受页码标注


946
00:32:14,546 --> 00:32:17,666
你可以为所有的提交操作标注页码


947
00:32:19,906 --> 00:32:21,056
我明白要消化的信息


948
00:32:21,056 --> 00:32:26,316
对于这样一场短短的演讲来说是多了点


949
00:32:26,316 --> 00:32:27,586
但是有几件重要的事


950
00:32:27,586 --> 00:32:28,856
是我非常希望大家能够了解的


951
00:32:29,776 --> 00:32:31,916
首先 非常重要的是


952
00:32:31,916 --> 00:32:33,896
使用彻底性代码签名


953
00:32:34,286 --> 00:32:35,786
正确签署你的软件


954
00:32:36,576 --> 00:32:37,846
这很重要 不仅因为


955
00:32:37,846 --> 00:32:39,286
把关工具能够验证


956
00:32:39,286 --> 00:32:40,326
你的软件没有遭到篡改


957
00:32:40,326 --> 00:32:42,746
也是出于公证的需要


958
00:32:45,816 --> 00:32:48,036
第二 不要接受


959
00:32:48,036 --> 00:32:50,126
你不需要的强化运行授权


960
00:32:50,866 --> 00:32:52,266
想一想强化运行


961
00:32:52,266 --> 00:32:55,206
能为你的 App 和用户带来的好处


962
00:32:55,206 --> 00:32:56,546
记住你接受的每一次授权


963
00:32:56,546 --> 00:32:59,246
都会降低 App 的安全性


964
00:32:59,746 --> 00:33:01,866
所以要只接受你需要的授权


965
00:33:03,646 --> 00:33:05,996
最后 要公证你发行的


966
00:33:05,996 --> 00:33:07,166
所有软件 并为其附加通行证


967
00:33:07,566 --> 00:33:10,146
以便其通过 macOS Catalina 的把关工具


968
00:33:13,516 --> 00:33:15,296
感谢参加本次会议


969
00:33:15,296 --> 00:33:16,086
如果你对公证有


970
00:33:16,086 --> 00:33:17,536
进一步的兴趣


971
00:33:17,536 --> 00:33:18,796
请到公证实验室来


972
00:33:18,796 --> 00:33:19,596
它会紧接着本次会议


973
00:33:19,596 --> 00:33:21,096
于下午 4 点开始


974
00:33:21,586 --> 00:33:24,666
此外 本周还有其它的几个实验室


975
00:33:24,666 --> 00:33:25,856
会开放 我们将探讨


976
00:33:25,856 --> 00:33:27,726
安全 公证和签名相关的话题


977
00:33:28,516 --> 00:33:36,500
谢谢大家 [掌声]

