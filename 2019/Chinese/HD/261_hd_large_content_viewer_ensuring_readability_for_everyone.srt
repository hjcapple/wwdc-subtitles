1
00:00:00,506 --> 00:00:05,926
[音乐]


2
00:00:06,426 --> 00:00:08,396
>> 大家好我是 Sommer Panage 


3
00:00:08,396 --> 00:00:09,996
我是 Apple 辅助功能团队


4
00:00:09,996 --> 00:00:12,976
的工程经理


5
00:00:12,976 --> 00:00:15,486
接下来我将会谈及


6
00:00:15,486 --> 00:00:16,286
Large Content Viewer


7
00:00:16,566 --> 00:00:18,426
这一功能将帮助那些


8
00:00:18,426 --> 00:00:20,106
喜欢大号字体的用户


9
00:00:20,836 --> 00:00:22,456
在这次演讲中你将会学习到


10
00:00:22,456 --> 00:00:24,616
如何确保 App 内全部内容


11
00:00:24,616 --> 00:00:26,666
都能适于每个用户阅读的方法


12
00:00:28,216 --> 00:00:30,146
我们将首先概览一下


13
00:00:30,146 --> 00:00:32,856
Large Content Viewer 以及其为什么重要


14
00:00:33,626 --> 00:00:35,476
接下来我们将关注一些


15
00:00:35,916 --> 00:00:37,226
能够让你在你的 App 中


16
00:00:37,226 --> 00:00:38,016
使用这一功能的 API


17
00:00:38,876 --> 00:00:41,266
最后我们将查看在 App 中


18
00:00:41,266 --> 00:00:42,826
你可能会遇到的问题实例


19
00:00:42,826 --> 00:00:46,916
以及如何解决它们


20
00:00:47,176 --> 00:00:49,186
所以让我们先从一些背景说起


21
00:00:51,136 --> 00:00:52,906
在我们谈及 Large Content Viewer 前


22
00:00:52,906 --> 00:00:55,046
让我们先从动态类型


23
00:00:55,046 --> 00:00:57,206
这一相关话题开始


24
00:00:58,166 --> 00:01:00,366
动态类型是一个可以帮助你


25
00:01:00,366 --> 00:01:03,506
定制系统内字体尺寸的功能


26
00:01:04,096 --> 00:01:05,946
当你想在屏幕上显示更多内容


27
00:01:05,946 --> 00:01:07,336
你可以将字体的尺寸调小


28
00:01:07,336 --> 00:01:09,486
这一功能也可以帮助你


29
00:01:09,486 --> 00:01:10,866
让屏幕上的字体变得更大更可读


30
00:01:11,246 --> 00:01:13,226
默认状态下你可以


31
00:01:13,226 --> 00:01:14,876
在七种不同的尺寸中选择


32
00:01:16,116 --> 00:01:17,666
但当你进入辅助功能设置后


33
00:01:17,666 --> 00:01:21,696
你可以启用更大的尺寸


34
00:01:21,696 --> 00:01:23,246
会有五个额外的尺寸供选择


35
00:01:24,026 --> 00:01:26,026
这是非常重要的


36
00:01:26,026 --> 00:01:27,426
使用这一功能的人并不只因为


37
00:01:27,426 --> 00:01:29,996
他们想要不同的字体尺寸


38
00:01:30,546 --> 00:01:31,806
他们这样做的原因是


39
00:01:31,806 --> 00:01:34,046
需要更大的字体尺寸


40
00:01:34,046 --> 00:01:37,226
来让自己的文本可读性更高


41
00:01:37,746 --> 00:01:39,216
接下来让我们来看一下


42
00:01:39,216 --> 00:01:40,716
动态类型是如何改变


43
00:01:40,716 --> 00:01:42,796
iOS 的显示行为的


44
00:01:43,016 --> 00:01:44,636
这里展示了手机 App 在默认字体


45
00:01:44,736 --> 00:01:46,286
尺寸下的显示效果


46
00:01:47,886 --> 00:01:49,906
如果我现在将字体设置为


47
00:01:49,906 --> 00:01:51,586
辅助功能设置中的其中一个尺寸


48
00:01:51,886 --> 00:01:53,376
文本的大小变大了许多


49
00:01:54,006 --> 00:01:55,816
但你也许注意到了


50
00:01:55,896 --> 00:01:57,606
文本在屏幕上占据的部分


51
00:01:57,746 --> 00:01:58,846
并没有变得更大


52
00:02:00,346 --> 00:02:04,536
比如可以看底部左侧的按钮


53
00:02:04,536 --> 00:02:06,046
如果顾客将尺寸


54
00:02:06,046 --> 00:02:08,175
调节到与我们在内容区域看到的


55
00:02:08,175 --> 00:02:10,045
尺寸一样大时


56
00:02:10,045 --> 00:02:11,946
他们不太可能看到


57
00:02:12,066 --> 00:02:13,326
我们在标签栏中看到的字体


58
00:02:13,426 --> 00:02:14,596
因为该尺寸还是太小


59
00:02:15,466 --> 00:02:17,216
你可能也不能直接把图标


60
00:02:17,216 --> 00:02:18,926
放在上面做补偿


61
00:02:19,606 --> 00:02:21,526
然而我们并不想调大标签栏


62
00:02:21,526 --> 00:02:22,946
因为这会使得


63
00:02:22,946 --> 00:02:24,286
留给显示主要内容


64
00:02:24,286 --> 00:02:26,376
的面积变得非常小


65
00:02:26,376 --> 00:02:27,876
就像这一例子中的联系人名单


66
00:02:28,396 --> 00:02:30,856
所以如果你想使用


67
00:02:30,886 --> 00:02:32,856
更大的文本尺寸


68
00:02:32,856 --> 00:02:34,536
我们允许你长按需要调节的按钮


69
00:02:34,536 --> 00:02:35,626
来获得更大的版本


70
00:02:36,096 --> 00:02:38,256
这是它的显示效果


71
00:02:38,746 --> 00:02:40,226
你可以用手指在底部栏拖动


72
00:02:40,226 --> 00:02:42,916
以获取这些按钮的内容


73
00:02:43,456 --> 00:02:44,716
当你将手指拖动到


74
00:02:44,716 --> 00:02:46,216
你想要点击的按钮上时


75
00:02:46,216 --> 00:02:48,366
只需要松开手指


76
00:02:48,626 --> 00:02:50,126
Apple 设备就会执行


77
00:02:50,126 --> 00:02:50,926
点按按钮的操作


78
00:02:51,616 --> 00:02:53,366
这就是我们称作


79
00:02:53,366 --> 00:02:54,576
Large Content Viewer 的功能


80
00:02:55,196 --> 00:02:57,046
这一功能允许视力不佳的用户


81
00:02:57,246 --> 00:02:59,396
可以方便的使用像是标签栏


82
00:02:59,626 --> 00:03:00,666
或是其他尺寸较小的 UI 


83
00:03:01,566 --> 00:03:02,986
让你的 App 在合适的时候


84
00:03:02,986 --> 00:03:05,466
显示大功能内容查看器非常重要


85
00:03:06,206 --> 00:03:07,906
如果你使用标准的 UIKit 栏


86
00:03:07,906 --> 00:03:10,386
你就已经启用了 Large Content Viewer 功能


87
00:03:10,956 --> 00:03:12,226
在之前你可能没有注意到


88
00:03:12,226 --> 00:03:13,736
这是因为这一功能仅在


89
00:03:13,736 --> 00:03:15,316
辅助功能设置中的尺寸时


90
00:03:15,316 --> 00:03:16,296
才会体现出来


91
00:03:16,866 --> 00:03:18,896
但如果你使用自定义栏


92
00:03:19,276 --> 00:03:21,256
或者一些其他自定义的 UI


93
00:03:21,256 --> 00:03:22,926
并且他们的尺寸较小的话


94
00:03:22,926 --> 00:03:24,846
你可能需要在内部适配 API


95
00:03:24,846 --> 00:03:26,686
来使得你的 UI 功能


96
00:03:26,686 --> 00:03:28,326
与标准 UIKit 相符合


97
00:03:28,796 --> 00:03:30,596
需要注意的是


98
00:03:30,596 --> 00:03:32,636
这一功能只在你无法调大


99
00:03:32,636 --> 00:03:33,346
自定义 UI 时使用


100
00:03:34,736 --> 00:03:36,876
使用动态类型进行缩放时


101
00:03:36,926 --> 00:03:38,586
Large Content Viewer 功能


102
00:03:38,586 --> 00:03:39,616
将会被优先启用


103
00:03:40,186 --> 00:03:44,736
但有的时候我们的栏不能缩放


104
00:03:45,036 --> 00:03:46,956
让我们来看看如何在你的 App 中


105
00:03:46,956 --> 00:03:48,846
支持 Large Content Viewer


106
00:03:48,846 --> 00:03:51,226
这一功能


107
00:03:51,446 --> 00:03:53,446
早前我已经说明了


108
00:03:53,446 --> 00:03:54,806
如果你使用标准 UIKit 栏


109
00:03:54,916 --> 00:03:57,096
Large Content Viewer 功能就会开启


110
00:03:57,886 --> 00:03:59,406
但你可能还需要一些操作


111
00:03:59,406 --> 00:04:01,506
来确保界面的美观


112
00:04:02,736 --> 00:04:04,166
如果你的栏组件使用 PDF 图像


113
00:04:04,166 --> 00:04:06,606
确保你检查了素材目录中


114
00:04:06,706 --> 00:04:09,406
Preserve Vector 选择框


115
00:04:09,406 --> 00:04:11,306
处于启用状态


116
00:04:12,106 --> 00:04:13,466
这将确保你的图片


117
00:04:13,466 --> 00:04:15,836
顺畅地放大为更大的尺寸


118
00:04:16,435 --> 00:04:19,305
但如果你的图片按钮使用 PNG


119
00:04:19,305 --> 00:04:21,555
这样不具备矢量数据


120
00:04:21,555 --> 00:04:24,246
那在默认情况下


121
00:04:24,246 --> 00:04:25,716
图片在预览框中的显示


122
00:04:25,766 --> 00:04:27,616
就会变得模糊


123
00:04:28,316 --> 00:04:29,686
想要修复这一情况的话


124
00:04:29,686 --> 00:04:32,116
你需要提供更大尺寸的图像


125
00:04:33,366 --> 00:04:35,756
使用具有更放大尺寸


126
00:04:35,756 --> 00:04:38,616
性能的图像来建立 UI 栏项目


127
00:04:39,286 --> 00:04:41,006
如果你需要调整位置


128
00:04:41,006 --> 00:04:42,876
比如你想调节那些


129
00:04:42,876 --> 00:04:44,216
在预览器内看起来没有处于


130
00:04:44,216 --> 00:04:45,466
居中状态的图片位置时


131
00:04:45,466 --> 00:04:47,616
你可以调节选项中的


132
00:04:47,616 --> 00:04:50,506
大型内容图片尺寸


133
00:04:51,416 --> 00:04:53,516
那当你需要使用自定义 UI 的时候


134
00:04:53,516 --> 00:04:54,276
应该如何处理呢


135
00:04:55,166 --> 00:04:57,626
在 iOS 13 之前


136
00:04:57,626 --> 00:04:59,186
在 Large Content Viewer 中


137
00:04:59,186 --> 00:05:00,876
直接拖动即可


138
00:05:01,416 --> 00:05:03,586
现在我们添加了一些 API


139
00:05:03,586 --> 00:05:05,346
让你可以得到与标准 UIKit 栏


140
00:05:05,446 --> 00:05:07,396
相同显示方法的 UI 


141
00:05:08,016 --> 00:05:09,556
当你在自定义状态栏时


142
00:05:09,556 --> 00:05:12,076
你首先需要做的事


143
00:05:12,076 --> 00:05:13,766
是将状态栏里的按钮


144
00:05:13,766 --> 00:05:16,126
指定为需要被显示的对象


145
00:05:17,046 --> 00:05:18,936
接着 Large Content Viewer 就会


146
00:05:18,936 --> 00:05:21,256
为每个指定的按钮请求


147
00:05:21,256 --> 00:05:22,436
标题或是图片信息


148
00:05:22,776 --> 00:05:24,706
如果你为这些按钮选定的是


149
00:05:24,706 --> 00:05:26,516
标准 UIKit 类型


150
00:05:26,516 --> 00:05:28,086
你将会直接得到这些信息


151
00:05:29,126 --> 00:05:31,006
最后你还需要为


152
00:05:31,006 --> 00:05:32,316
你自定义的状态栏


153
00:05:32,316 --> 00:05:33,596
设定手势交互方式


154
00:05:35,196 --> 00:05:38,276
全新的 UILargeContentViewerItem


155
00:05:38,276 --> 00:05:40,746
协议指定了 Large Content Viewer 


156
00:05:40,746 --> 00:05:44,026
显示你的内容所需要的信息


157
00:05:45,306 --> 00:05:47,006
而 ShowsLargeContentViewer 


158
00:05:47,006 --> 00:05:49,186
属性是你需要


159
00:05:49,186 --> 00:05:50,726
用来标记你的状态栏按钮的属性


160
00:05:51,136 --> 00:05:53,496
将需要在查看器中


161
00:05:53,496 --> 00:05:54,566
显示的按钮的该属性设置为“true”值


162
00:05:55,686 --> 00:05:57,206
接着你就可以指定


163
00:05:57,206 --> 00:05:59,456
largeContentTitle 属性


164
00:05:59,456 --> 00:06:00,626
和 largeContentImage 属性


165
00:06:00,926 --> 00:06:02,576
你可以指定其中一项属性


166
00:06:02,876 --> 00:06:03,616
也可以指定两个属性


167
00:06:04,486 --> 00:06:07,226
如果你想要重复使用


168
00:06:07,226 --> 00:06:09,026
别的小图标上的 PDF 图片


169
00:06:09,026 --> 00:06:10,976
就将 scalesLargeContentImage


170
00:06:10,976 --> 00:06:11,966
属性设置为“true”值即可


171
00:06:12,656 --> 00:06:14,546
但正如我们早前在 UI 栏


172
00:06:14,546 --> 00:06:16,626
对象中所看到的一样


173
00:06:16,626 --> 00:06:19,186
你需要保存对应图像的矢量数据


174
00:06:19,696 --> 00:06:21,566
最后如果你想要居中图像


175
00:06:21,566 --> 00:06:23,096
你可以使用属性中的


176
00:06:23,096 --> 00:06:25,116
largeContentImageInsets 选项


177
00:06:27,216 --> 00:06:29,226
UIView 中已经预置了该协议


178
00:06:29,226 --> 00:06:31,756
并且提供了对齐标志


179
00:06:31,996 --> 00:06:34,116
所以在很多情况下


180
00:06:34,116 --> 00:06:35,656
你可以使用设置属性而不是


181
00:06:35,656 --> 00:06:37,396
建立子类来覆盖的方法


182
00:06:38,296 --> 00:06:39,966
正如我们之前提到的是


183
00:06:40,306 --> 00:06:42,256
确定的 UIKit 类


184
00:06:42,256 --> 00:06:44,376
像是 UI 按钮及标签


185
00:06:44,376 --> 00:06:47,126
将会返回其标题和图像的默认值


186
00:06:47,636 --> 00:06:50,416
那就是你注释标签栏中


187
00:06:50,416 --> 00:06:51,586
按钮的方法


188
00:06:52,496 --> 00:06:54,166
接下来你还需要增加


189
00:06:54,166 --> 00:06:56,446
标签栏本身的手势交互


190
00:06:56,806 --> 00:06:58,756
增加交互方式的方法是


191
00:06:58,756 --> 00:07:00,716
使用支持添加


192
00:07:00,846 --> 00:07:02,456
拖拽及丢弃指令


193
00:07:02,526 --> 00:07:03,556
相同的 addInteraction 方法


194
00:07:03,856 --> 00:07:06,906
这里展示了 Large Content Viewer 


195
00:07:06,906 --> 00:07:08,526
是如何实现交互的方法


196
00:07:08,846 --> 00:07:10,806
这里面有一些属性


197
00:07:11,276 --> 00:07:12,896
在一个简易的情况下


198
00:07:12,896 --> 00:07:14,356
你可以创建一个没有变元的实例


199
00:07:14,356 --> 00:07:15,936
并且不需要更改任何其他属性


200
00:07:16,156 --> 00:07:18,896
即可创建一个交互方法


201
00:07:19,416 --> 00:07:21,426
但如果你的 App 有任何其他的


202
00:07:21,426 --> 00:07:23,206
手势识别方法的话


203
00:07:23,206 --> 00:07:24,706
你可能需要调整其行为


204
00:07:25,866 --> 00:07:27,676
你可以为它提供委托


205
00:07:27,676 --> 00:07:30,306
来得到替代它的粒度控制


206
00:07:31,156 --> 00:07:32,396
你也可以利用


207
00:07:32,396 --> 00:07:34,516
gestureRecognizer 属性


208
00:07:34,516 --> 00:07:36,246
来设置与 App 内


209
00:07:36,246 --> 00:07:38,546
其他手势识别方法的关联


210
00:07:39,206 --> 00:07:41,806
最后如果你要检查


211
00:07:41,806 --> 00:07:43,606
是否开启了 Large Content Viewer


212
00:07:43,936 --> 00:07:46,006
你可以检查 isEnabled 属性


213
00:07:46,536 --> 00:07:48,096
当然你可以通过关注通知


214
00:07:48,096 --> 00:07:50,536
来查看其变化


215
00:07:52,356 --> 00:07:53,836
这里有一些使用委托


216
00:07:53,836 --> 00:07:56,136
来定制其行为的方式


217
00:07:57,836 --> 00:08:00,026
首先你可以指定


218
00:08:00,026 --> 00:08:01,616
用户将手指从部件上移开时


219
00:08:01,616 --> 00:08:03,756
视图中要进行的操作


220
00:08:04,146 --> 00:08:06,206
这一操作应该在用户


221
00:08:06,206 --> 00:08:07,176
点击对应部件时完成


222
00:08:07,826 --> 00:08:08,956
如果你不采用这一方法


223
00:08:08,956 --> 00:08:10,436
并且使用例如 UI 按钮的


224
00:08:10,436 --> 00:08:12,326
标准 UI 控制方式


225
00:08:12,326 --> 00:08:14,376
默认情况下这里的操作将会是


226
00:08:14,376 --> 00:08:16,306
发起一个内部弹起的事件


227
00:08:16,926 --> 00:08:18,556
但如果你在这里进行


228
00:08:18,556 --> 00:08:21,086
更多的自定义设置


229
00:08:21,086 --> 00:08:22,376
比如其自带的点击弹出视图


230
00:08:22,376 --> 00:08:24,136
你也可以采用这种方法


231
00:08:24,136 --> 00:08:26,376
来实现你想要执行的行为


232
00:08:27,206 --> 00:08:29,316
接下来介绍对


233
00:08:29,316 --> 00:08:31,426
对象中特定坐标进行设定的选项


234
00:08:31,946 --> 00:08:33,706
默认情况下对象


235
00:08:33,706 --> 00:08:35,366
通过在视图层次结构上


236
00:08:35,366 --> 00:08:37,236
递归调用事件内部的点


237
00:08:37,236 --> 00:08:38,106
的方式被查询到


238
00:08:38,765 --> 00:08:40,836
但如果你没有使用视图的话


239
00:08:40,876 --> 00:08:42,496
这个方法就可能无效


240
00:08:42,986 --> 00:08:45,356
所以这个方法让你


241
00:08:45,356 --> 00:08:47,136
返回到特定点


242
00:08:47,136 --> 00:08:48,816
所对应显示的对象


243
00:08:50,016 --> 00:08:52,346
最后你应该决定该由


244
00:08:52,346 --> 00:08:53,836
哪个 viewController 来控制


245
00:08:53,836 --> 00:08:54,916
Large Content Viewer 这一功能


246
00:08:55,456 --> 00:08:57,446
默认情况下 UIKit 将会尝试


247
00:08:57,446 --> 00:08:58,956
选取一个你添加到


248
00:08:58,956 --> 00:09:01,556
视图中的 viewController 交互


249
00:09:02,406 --> 00:09:03,796
但如果该默认设置


250
00:09:03,796 --> 00:09:05,166
在你的 App 上没有很好地工作


251
00:09:05,326 --> 00:09:06,536
你可以在这里指定你想要的


252
00:09:08,556 --> 00:09:10,236
至此我们讲解了 API 的内容


253
00:09:11,026 --> 00:09:12,616
现在让我们来看看一些


254
00:09:12,616 --> 00:09:14,206
说明其如何使用的例子


255
00:09:15,776 --> 00:09:18,136
让我们先从一个简单的例子说起


256
00:09:18,616 --> 00:09:20,446
你已经构建了一个自定义栏


257
00:09:20,446 --> 00:09:22,606
但在栏内你是用的是


258
00:09:22,606 --> 00:09:23,056
标准 UIKit 视图


259
00:09:23,426 --> 00:09:25,546
这里我们有一个带有


260
00:09:25,546 --> 00:09:27,096
UI 按钮和 UI 图标的栏


261
00:09:28,816 --> 00:09:30,446
因为我们使用标准视图


262
00:09:30,446 --> 00:09:32,856
我们需要做的是使用


263
00:09:32,856 --> 00:09:35,006
showsLargeContentViewer 属性


264
00:09:35,316 --> 00:09:37,786
来设定按钮和标签


265
00:09:38,166 --> 00:09:39,876
在这里不需要设置标题或是图片


266
00:09:39,876 --> 00:09:42,076
因为这些内容可以


267
00:09:42,076 --> 00:09:44,406
从属性页面中找到


268
00:09:45,336 --> 00:09:47,166
最后我们可以在不设定


269
00:09:47,166 --> 00:09:48,646
任何属性的情况下对自定义栏


270
00:09:48,906 --> 00:09:50,956
添加需要的手势交互


271
00:09:51,296 --> 00:09:52,296
这就可以了


272
00:09:53,556 --> 00:09:55,246
如果你的自定义栏除了


273
00:09:55,246 --> 00:09:56,806
按钮之外还使用别的组件


274
00:09:57,106 --> 00:09:59,076
你可能需要别的一些 API


275
00:09:59,826 --> 00:10:01,696
我们先把你的按钮称为


276
00:10:01,696 --> 00:10:04,786
MyButton 的自定义实例类


277
00:10:05,326 --> 00:10:08,406
你可以覆盖原有的


278
00:10:08,406 --> 00:10:10,086
Large Content Viewer 组件属性


279
00:10:10,176 --> 00:10:12,366
来返回你所需要的结果


280
00:10:13,136 --> 00:10:15,166
在这里我们将 
showsLargeContentViewer


281
00:10:15,166 --> 00:10:17,596
的返回值设置为“true”


282
00:10:17,736 --> 00:10:19,236
将标题属性的返回值设置为


283
00:10:19,236 --> 00:10:19,606
我们的文字


284
00:10:21,116 --> 00:10:23,226
如果你的每个按钮图片


285
00:10:23,226 --> 00:10:25,466
都有原始的矢量数据


286
00:10:25,466 --> 00:10:27,186
你可以将数据指定为 Large Content Viewer


287
00:10:27,186 --> 00:10:28,406
要显示的图像数据


288
00:10:29,266 --> 00:10:31,006
只要确保 scalesLargeContentImage


289
00:10:31,006 --> 00:10:33,406
的返回值为“true”


290
00:10:33,406 --> 00:10:35,226
就可以让图像放大到正确尺寸


291
00:10:36,656 --> 00:10:38,666
最后让我们来看


292
00:10:38,666 --> 00:10:40,436
当你想要使用另外的手势识别时


293
00:10:40,436 --> 00:10:42,036
应该如何处理的实例


294
00:10:42,036 --> 00:10:44,436
在 Apple 的 Safari 浏览器 App 中


295
00:10:44,436 --> 00:10:46,126
有这么一个经典例子


296
00:10:46,866 --> 00:10:48,366
当你轻击返回按钮时


297
00:10:48,596 --> 00:10:50,326
它会回到之前的页面


298
00:10:50,826 --> 00:10:52,356
但如果你长按返回按钮


299
00:10:52,716 --> 00:10:54,156
这一操作会打开


300
00:10:54,156 --> 00:10:55,396
查看浏览历史记录的页面


301
00:10:56,166 --> 00:10:57,956
Large Content Viewer 也可以


302
00:10:57,956 --> 00:10:59,436
利用长按手势来启用


303
00:11:00,056 --> 00:11:04,136
所以你应该如何使其同时工作


304
00:11:04,436 --> 00:11:06,936
你绝对应该让两者同时生效


305
00:11:07,546 --> 00:11:09,436
换种说法就是


306
00:11:09,436 --> 00:11:11,266
让 Large Content Viewer 生效


307
00:11:11,266 --> 00:11:12,876
来让用户知道按钮具有什么功能


308
00:11:13,486 --> 00:11:15,216
而当用户查看了这些功能之后


309
00:11:15,216 --> 00:11:17,006
此前长按按钮进行的操作


310
00:11:17,006 --> 00:11:18,586
依旧可以被唤醒


311
00:11:19,606 --> 00:11:21,386
要实现这一功能


312
00:11:21,386 --> 00:11:22,786
首先需要增加已有 longPressRecognizer


313
00:11:22,846 --> 00:11:24,866
属性的持续时间


314
00:11:25,466 --> 00:11:26,916
这样我们就在执行后续操作前


315
00:11:26,916 --> 00:11:28,576
给了用户额外的时间来查看


316
00:11:28,576 --> 00:11:31,106
Large Content Viewer 显示的内容


317
00:11:31,766 --> 00:11:34,036
你还应该确保持续时间


318
00:11:34,036 --> 00:11:35,586
在用户更改设置后


319
00:11:35,586 --> 00:11:36,566
进行更新


320
00:11:37,116 --> 00:11:39,026
如果它们开始或者停止使用


321
00:11:39,026 --> 00:11:40,766
辅助功能设置中的字体尺寸


322
00:11:41,076 --> 00:11:43,056
那么持续时间也应该更新


323
00:11:44,306 --> 00:11:45,676
接下来我们需要设置


324
00:11:45,676 --> 00:11:47,926
UIGestureRecognizer 委托


325
00:11:47,926 --> 00:11:48,706
给已有的


326
00:11:48,766 --> 00:11:49,886
longPressRecognizer 属性


327
00:11:51,366 --> 00:11:53,406
之后在你的委托回调里


328
00:11:53,766 --> 00:11:55,386
你就能确保


329
00:11:55,386 --> 00:11:55,966
已有的 longPressRecognizer


330
00:11:55,966 --> 00:11:58,106
和 gestureRecognizer 两个属性


331
00:11:58,106 --> 00:11:59,576
可以同时被


332
00:11:59,576 --> 00:12:02,216
Large Content Viewer 识别出来


333
00:12:02,466 --> 00:12:04,446
这样二者之间就不会


334
00:12:04,526 --> 00:12:06,156
导致另一个功能不工作了


335
00:12:07,456 --> 00:12:09,476
在这里我们可以看到


336
00:12:09,476 --> 00:12:10,976
在实施了 Large Content Viewer 之后


337
00:12:11,036 --> 00:12:11,866
我们的程序是如何表现的


338
00:12:12,606 --> 00:12:14,576
如果在 Large Content Viewer 显示期间


339
00:12:14,576 --> 00:12:16,156
我将手指松开


340
00:12:16,286 --> 00:12:17,806
就可以进行返回操作


341
00:12:18,336 --> 00:12:19,936
而当我长按一段时间之后


342
00:12:19,936 --> 00:12:21,676
我依旧能够进入


343
00:12:21,676 --> 00:12:22,746
浏览历史记录的页面


344
00:12:23,286 --> 00:12:25,836
这就是如何让你的 App


345
00:12:25,836 --> 00:12:27,306
适应那些喜欢大尺寸字体人群


346
00:12:27,306 --> 00:12:29,426
但 UI 元素又需要保持


347
00:12:29,656 --> 00:12:30,886
较小尺寸的方法


348
00:12:30,886 --> 00:12:33,176
要注意的是你只能在


349
00:12:33,176 --> 00:12:35,066
UI 元素无法缩放的时候


350
00:12:35,236 --> 00:12:36,136
使用 Large Content Viewer 功能


351
00:12:36,836 --> 00:12:38,436
为动态类型进行缩放


352
00:12:38,436 --> 00:12:39,846
总会是更好的选择


353
00:12:40,146 --> 00:12:41,936
所以如果你能使用这一功能的话


354
00:12:41,936 --> 00:12:42,386
不要将 Large Content Viewer 作为 API 使用


355
00:12:43,396 --> 00:12:45,696
最后如果你的自定义视图


356
00:12:45,696 --> 00:12:47,516
还有别的交互方式的话


357
00:12:47,656 --> 00:12:48,676
这些自定义视图


358
00:12:48,676 --> 00:12:50,656
对于使用 Large Content Viewer 的用户


359
00:12:50,656 --> 00:12:51,606
依旧可以生效


360
00:12:52,206 --> 00:12:54,026
用这样的方法所有人都能够使用


361
00:12:54,026 --> 00:12:55,516
你的 App 的这些功能了


362
00:12:55,966 --> 00:12:56,836
这就是我要说的全部内容


363
00:12:57,156 --> 00:12:57,966
感谢观看

