1
00:00:01,516 --> 00:00:06,546
[音乐]


2
00:00:07,046 --> 00:00:07,566
>> 大家好


3
00:00:07,866 --> 00:00:10,216
我是 Shiva Sundar 


4
00:00:10,216 --> 00:00:12,526
非常高兴能和大家讨论


5
00:00:12,806 --> 00:00:14,696
有 Alpha 通道 的 HEVC 视频


6
00:00:17,506 --> 00:00:19,116
你也许很熟悉


7
00:00:19,116 --> 00:00:21,216
图像文件中的 Alpha 通道


8
00:00:22,716 --> 00:00:24,716
Alpha 通道在图像文件 


9
00:00:24,856 --> 00:00:28,136
App 和网络中无处不在


10
00:00:29,576 --> 00:00:30,806
当图像文件中有 Alpha 通道时


11
00:00:30,886 --> 00:00:33,726
图像中的每个像素


12
00:00:33,726 --> 00:00:36,816
都会得到不透明度及其颜色


13
00:00:38,036 --> 00:00:40,706
这使得我们


14
00:00:40,706 --> 00:00:42,256
可以得到一个复杂的


15
00:00:42,256 --> 00:00:44,916
非矩形的图像


16
00:00:44,916 --> 00:00:47,786
但在许多不同的背景下


17
00:00:47,786 --> 00:00:49,066
合成时看起来很自然


18
00:00:52,556 --> 00:00:55,536
所以 Alpha 通道和透明度很常见


19
00:00:55,536 --> 00:00:58,336
主要通过像 PNG 这样的


20
00:00:59,136 --> 00:01:00,816
静止图像格式


21
00:01:00,816 --> 00:01:01,946
在网络上使用


22
00:01:05,135 --> 00:01:07,216
视频中的 Alpha 


23
00:01:07,216 --> 00:01:07,626
不太常见


24
00:01:09,176 --> 00:01:11,296
它是专业的


25
00:01:11,296 --> 00:01:13,456
视频工作流程工具


26
00:01:13,616 --> 00:01:15,466
专业视频工作流


27
00:01:15,466 --> 00:01:17,576
如 Apple ProRes 4444 中


28
00:01:17,576 --> 00:01:20,516
使用的格式数据速率非常高


29
00:01:20,516 --> 00:01:22,726
不适合传送


30
00:01:24,236 --> 00:01:26,776
2017 年 Apple 推出了


31
00:01:26,776 --> 00:01:28,906
对 HEIF 图像文件格式的支持


32
00:01:28,906 --> 00:01:31,286
这使我们可以


33
00:01:31,286 --> 00:01:33,816
利用 HEVC 中的


34
00:01:33,816 --> 00:01:34,476
高级有损压缩技术


35
00:01:34,476 --> 00:01:38,466
来压缩静止图像


36
00:01:39,996 --> 00:01:42,016
HEIF 还允许在图像文件中


37
00:01:42,016 --> 00:01:43,946
包含 Alpha 通道


38
00:01:45,366 --> 00:01:49,286
事实上 今年我们增加了


39
00:01:49,286 --> 00:01:51,816
对 HEIF 序列的支持


40
00:01:51,816 --> 00:01:53,536
允许你在一个文件中


41
00:01:53,536 --> 00:01:53,916
拥有多个图像


42
00:01:55,376 --> 00:01:57,536
HEIF 序列也支持


43
00:01:57,536 --> 00:01:58,336
Alpha 通道


44
00:02:00,106 --> 00:02:02,136
一段时间以来


45
00:02:02,196 --> 00:02:04,796
我们已经认识到


46
00:02:05,076 --> 00:02:06,696
采用较低比特率的方式


47
00:02:06,696 --> 00:02:07,076
将 Alpha 包含在动态视频当中的需求


48
00:02:08,226 --> 00:02:11,236
所以我们说


49
00:02:11,236 --> 00:02:12,656
让我们来使用


50
00:02:12,656 --> 00:02:14,796
先进的有损压缩技术


51
00:02:14,796 --> 00:02:16,876
来支持视频文件中的 Alpha 通道


52
00:02:19,286 --> 00:02:21,786
在所有支持的设备和计算机上


53
00:02:21,786 --> 00:02:24,616
iOS 13 tvOS 13  


54
00:02:24,946 --> 00:02:28,376
和 macOS Catalina


55
00:02:28,406 --> 00:02:29,976
都支持使用 Alpha


56
00:02:29,976 --> 00:02:30,676
播放 HEVC 视频


57
00:02:31,816 --> 00:02:34,566
所有具有 HEVC 编码器的


58
00:02:34,566 --> 00:02:36,446
设备和计算机


59
00:02:36,446 --> 00:02:37,836
都支持编码


60
00:02:39,556 --> 00:02:41,916
拥有 Alpha 格式的视频


61
00:02:42,606 --> 00:02:45,286
效果很好


62
00:02:45,286 --> 00:02:47,696
其比特率足够低可以分发


63
00:02:47,696 --> 00:02:48,796
这创造了许多机会


64
00:02:52,046 --> 00:02:53,046
你可以使用


65
00:02:53,126 --> 00:02:54,896
丰富的非矩形动态视频内容


66
00:02:54,896 --> 00:02:57,246
作为 App 


67
00:02:57,246 --> 00:03:00,716
表达体验的一部分


68
00:03:02,566 --> 00:03:04,136
它可以像动画一样


69
00:03:04,136 --> 00:03:04,856
预先渲染


70
00:03:05,786 --> 00:03:07,926
这样的元素


71
00:03:07,966 --> 00:03:09,446
可以在复杂的背景上移动


72
00:03:09,446 --> 00:03:11,476
甚至有几个元素


73
00:03:11,476 --> 00:03:13,276
可以给人一种


74
00:03:13,276 --> 00:03:16,116
深度或复杂交互的感觉


75
00:03:17,416 --> 00:03:19,416
因为这些是视频


76
00:03:19,416 --> 00:03:20,746
它们可以有同步的音轨 


77
00:03:20,746 --> 00:03:23,046
所以这样一来


78
00:03:23,046 --> 00:03:24,916
这些非矩形影片中的角色


79
00:03:24,916 --> 00:03:25,296
就可以说话了


80
00:03:26,436 --> 00:03:27,346
>> 超级专业的


81
00:03:27,826 --> 00:03:28,476
>> Alpha 通道


82
00:03:28,746 --> 00:03:29,176
>> 内容


83
00:03:29,406 --> 00:03:29,896
>> 为你而设


84
00:03:30,176 --> 00:03:31,336
>> Woo-hoo


85
00:03:32,056 --> 00:03:33,196
>> Woo-hoo


86
00:03:33,376 --> 00:03:34,826
>> 它们可以将


87
00:03:34,826 --> 00:03:37,866
SpriteKit SceneKit


88
00:03:38,176 --> 00:03:38,646
或 Metal 集成到游戏当中


89
00:03:39,806 --> 00:03:41,356
在本文中


90
00:03:41,356 --> 00:03:42,696
我们向你提供了一些示例代码


91
00:03:42,696 --> 00:03:45,376
介绍了如何用 Alpha 通道


92
00:03:45,376 --> 00:03:48,266
将 SceneKit 场景录制到 HEVC 视频中


93
00:03:48,266 --> 00:03:50,706
以及如何在 SpriteKit 场景


94
00:03:50,996 --> 00:03:52,036
中渲染另一个场景


95
00:03:53,236 --> 00:03:55,336
在网页上


96
00:03:55,336 --> 00:03:57,926
它们可使互动元素活跃起来


97
00:03:58,316 --> 00:04:00,926
iOS 13 和 macOS Catalina 中的


98
00:04:00,926 --> 00:04:03,806
Safari 支持带有 


99
00:04:04,016 --> 00:04:05,606
Alpha 的 HEVC 视频


100
00:04:06,746 --> 00:04:08,826
Safari 还可以告诉网页


101
00:04:08,826 --> 00:04:11,206
是否支持此功能


102
00:04:12,906 --> 00:04:15,016
想要获得有关 API 媒体功能的


103
00:04:15,016 --> 00:04:17,956
更多使用信息


104
00:04:17,956 --> 00:04:20,236
请务必查看这个视频


105
00:04:20,236 --> 00:04:23,746
《What's New in Authentication, Safari and WebKit》


106
00:04:26,396 --> 00:04:29,236
以低比特率分散


107
00:04:29,236 --> 00:04:32,166
带有 Alpha 的视频


108
00:04:32,166 --> 00:04:34,026
这种能力为创作 App 提供了机会


109
00:04:34,346 --> 00:04:35,726
以提供背景删除


110
00:04:37,986 --> 00:04:40,206
现在我站在一张


111
00:04:40,206 --> 00:04:42,006
挂在墙上的绿色幕布前


112
00:04:42,516 --> 00:04:43,826
这是用 iPhone 录制的


113
00:04:47,776 --> 00:04:53,366
我希望我在这里


114
00:04:53,486 --> 00:04:55,936
我使用了一个自定义的视频合成器


115
00:04:56,196 --> 00:04:58,356
和一个共同图像过滤器


116
00:04:58,356 --> 00:05:00,096
用透明来替换绿色像素


117
00:05:00,176 --> 00:05:02,786
并将其导出到一个


118
00:05:02,786 --> 00:05:03,856
带 Alpha 的影片当中


119
00:05:07,766 --> 00:05:10,096
我希望我在这里


120
00:05:13,046 --> 00:05:15,756
现在我可以


121
00:05:15,926 --> 00:05:17,186
在我喜欢的任何背景上


122
00:05:21,246 --> 00:05:23,606
叠加这个视频


123
00:05:25,736 --> 00:05:27,536
我们将提供示例代码


124
00:05:27,776 --> 00:05:30,066
显示了如何执行此操作


125
00:05:30,246 --> 00:05:32,366
并使用 Alpha 影片编写生成的 


126
00:05:32,366 --> 00:05:33,156
HEVC 视频


127
00:05:35,116 --> 00:05:36,656
那么这是如何工作的呢


128
00:05:37,906 --> 00:05:40,446
如你所知影片文件


129
00:05:40,446 --> 00:05:42,556
包含各种媒体类型的曲目


130
00:05:44,396 --> 00:05:47,196
视频轨道包含视频帧


131
00:05:48,406 --> 00:05:50,716
带有 Alpha 的 


132
00:05:50,716 --> 00:05:52,876
HEVC 视频包含在


133
00:05:52,876 --> 00:05:54,036
影片的单个视频轨道内


134
00:05:56,136 --> 00:05:58,486
在单轨中


135
00:05:58,606 --> 00:06:00,526
每个帧包含两个称为层的部分


136
00:06:01,186 --> 00:06:03,326
每个层使用 HEVC 编解码器


137
00:06:03,326 --> 00:06:04,896
进行压缩


138
00:06:06,776 --> 00:06:08,876
底层像往常一样


139
00:06:08,876 --> 00:06:11,066
包含帧的彩色图像


140
00:06:12,306 --> 00:06:14,716
Alpha 图层仅包含


141
00:06:14,716 --> 00:06:16,266
帧的 Alpha 通道


142
00:06:17,606 --> 00:06:20,076
这是使用特殊的


143
00:06:20,076 --> 00:06:22,286
HEVC 语法来完成的


144
00:06:22,286 --> 00:06:22,836
能识别出这两个层级


145
00:06:24,056 --> 00:06:26,506
该语法的 HEVC 规则


146
00:06:26,936 --> 00:06:29,326
意味着


147
00:06:29,326 --> 00:06:31,276
不知道如何处理


148
00:06:31,276 --> 00:06:33,956
Alpha 层的 HEVC 解码器 


149
00:06:33,956 --> 00:06:35,336
将忽略它并仅显示基本层


150
00:06:37,526 --> 00:06:39,826
我们来继续讨论


151
00:06:39,826 --> 00:06:40,696
如何使用它


152
00:06:42,066 --> 00:06:44,456
具有 Alpha 编码的 HEVC 


153
00:06:44,456 --> 00:06:46,926
被集成到众多


154
00:06:46,926 --> 00:06:48,236
AVFoundation API 中


155
00:06:49,066 --> 00:06:50,786
例如


156
00:06:50,786 --> 00:06:51,516
我们看看内容创建


157
00:06:53,086 --> 00:06:55,026
你可以在 App 中


158
00:06:55,026 --> 00:06:57,706
使用 Alpha 渲染视频帧


159
00:06:57,706 --> 00:07:00,506
并使用 AVAssetWriter 进行编码


160
00:07:00,686 --> 00:07:02,326
并将其写入影片文件


161
00:07:03,996 --> 00:07:05,516
你可以使用 


162
00:07:05,706 --> 00:07:06,516
AVAssetExportSession 


163
00:07:06,516 --> 00:07:08,896
提供的新预设


164
00:07:08,896 --> 00:07:10,926
将包含 Alpha


165
00:07:10,926 --> 00:07:13,716
包括 Apple ProRes 4444 的视频格式


166
00:07:13,716 --> 00:07:16,966
转码为带 Alpha 的 HEVC


167
00:07:18,706 --> 00:07:21,206
这些新的 HEVC 预设


168
00:07:21,206 --> 00:07:22,946
带有 WithAlpha 的后缀


169
00:07:26,676 --> 00:07:27,786
你还可以使用


170
00:07:27,786 --> 00:07:30,786
AVAssettExportSession 


171
00:07:31,016 --> 00:07:32,886
以特定的背景色刻录


172
00:07:33,246 --> 00:07:35,606
将具有 Alpha 的影片


173
00:07:35,876 --> 00:07:38,556
转换为不带 Alpha 的影片


174
00:07:38,556 --> 00:07:40,406
该影片将在不支持带有 Alpha 的


175
00:07:40,406 --> 00:07:42,026
播放器上播放


176
00:07:45,046 --> 00:07:48,586
或者你也可以


177
00:07:48,586 --> 00:07:50,376
通过 VTCompressionSession 


178
00:07:50,596 --> 00:07:51,996
将 HEVC 与 Alpha 


179
00:07:51,996 --> 00:07:53,256
视频编码器配合使用


180
00:07:57,246 --> 00:08:02,706
我们来看看 AVFoundation 的回放 API


181
00:08:02,956 --> 00:08:05,556
AVPlayer 和 AVPlayerLayer 支持带有 Alpha 的 HEVC 


182
00:08:05,556 --> 00:08:07,996
通过 Core Animation AppKit 和 UIKit


183
00:08:07,996 --> 00:08:13,016
显示在 App 视图层次结构中


184
00:08:14,676 --> 00:08:17,606
AvPlayerLayer 中的视频


185
00:08:17,606 --> 00:08:19,506
将以透明背景显示


186
00:08:19,506 --> 00:08:23,206
并与其他层和视图融为一体


187
00:08:25,076 --> 00:08:27,766
或者你可以使用


188
00:08:27,766 --> 00:08:29,916
AVPlayerItemVideoOutput


189
00:08:30,146 --> 00:08:32,856
直接访问一系列


190
00:08:32,976 --> 00:08:33,846
已解码的视频帧


191
00:08:35,056 --> 00:08:36,856
当你想要将这些视频帧


192
00:08:36,856 --> 00:08:38,616
合并到使用 Metal SpriteKit


193
00:08:38,616 --> 00:08:40,846
和其他基于 GPU 的


194
00:08:40,846 --> 00:08:42,546
渲染 API 的自定义渲染中时


195
00:08:42,905 --> 00:08:49,176
这是个很好的选择


196
00:08:49,206 --> 00:08:51,246
如果你需要


197
00:08:51,246 --> 00:08:54,746
为其他目的而解码帧


198
00:08:54,746 --> 00:08:57,266
可以直接使用 AVAssetImageGenerator


199
00:08:57,576 --> 00:08:59,436
和影片的单个帧


200
00:08:59,436 --> 00:09:02,156
作为带 Alpha 的 CGImage


201
00:09:03,766 --> 00:09:06,236
你可以使用 AVAssetReader 


202
00:09:06,276 --> 00:09:09,186
提取视频帧以用于


203
00:09:09,186 --> 00:09:10,496
非回放工作流


204
00:09:13,226 --> 00:09:15,856
你也可以直接通过 VTDecompressionSession


205
00:09:15,856 --> 00:09:18,886
将 HEVC 与 Alpha 视频解码器配合使用


206
00:09:18,886 --> 00:09:20,416
视频解码器配合使用


207
00:09:22,776 --> 00:09:25,776
简而言之 


208
00:09:26,166 --> 00:09:28,746
因为带有 Alpha 的 HEVC 


209
00:09:28,836 --> 00:09:31,196
在视频编解码器的级别


210
00:09:31,716 --> 00:09:33,796
集成到了 AVFoundation 中


211
00:09:33,896 --> 00:09:35,486
所以以它很适合所有熟悉的 API 工作流


212
00:09:38,576 --> 00:09:40,536
现在让我们看看


213
00:09:40,536 --> 00:09:42,106
如何在代码中实现这一点


214
00:09:43,476 --> 00:09:45,846
对影片进行编码时


215
00:09:45,846 --> 00:09:48,216
在配置 AVAssetWriter 输入


216
00:09:48,266 --> 00:09:50,776
或 VTCompressionSession 时


217
00:09:51,526 --> 00:09:55,036
使用带 Alpha 的


218
00:09:55,036 --> 00:09:55,716
视频编解码器类型 HEVC


219
00:09:56,816 --> 00:09:59,236
这是 Alpha 通道


220
00:09:59,236 --> 00:10:01,106
应编码的特殊信号


221
00:10:01,976 --> 00:10:04,336
编码文件将具有


222
00:10:04,336 --> 00:10:06,466
标准 HEVC 编解码器类型


223
00:10:07,286 --> 00:10:09,056
它将向后兼容


224
00:10:09,916 --> 00:10:12,216
不能读出 Alpha 的 


225
00:10:12,216 --> 00:10:14,286
HEVC 播放器


226
00:10:14,286 --> 00:10:15,756
将只显示基本视频层


227
00:10:16,396 --> 00:10:17,996
它将忽略 Alpha 部分


228
00:10:19,716 --> 00:10:21,306
如果使用 Alpha 通道


229
00:10:21,966 --> 00:10:23,606
你可能会明白


230
00:10:23,606 --> 00:10:25,576
有两种方法


231
00:10:25,576 --> 00:10:27,086
可以将视频数据写入文件


232
00:10:28,066 --> 00:10:30,636
Premultiplied Alpha


233
00:10:30,636 --> 00:10:32,206
Straight Alpha


234
00:10:32,206 --> 00:10:33,956
后者也被称为 Unassociated Alpha


235
00:10:33,956 --> 00:10:35,346
或 Non-premultiplied Alpha


236
00:10:36,416 --> 00:10:38,186
这些选择之间的权衡


237
00:10:38,186 --> 00:10:40,996
超出了本次讨论的范围


238
00:10:42,706 --> 00:10:44,086
如果你熟悉这些


239
00:10:44,756 --> 00:10:46,506
你要知道的是


240
00:10:46,506 --> 00:10:47,416
两者都能被支持


241
00:10:49,366 --> 00:10:50,716
假如与这些不相似


242
00:10:50,716 --> 00:10:52,996
我们建议使用默认值


243
00:10:53,446 --> 00:10:54,896
即 Premultiplied Alpha


244
00:10:55,536 --> 00:10:57,856
它是大多数基于 GPU 的


245
00:10:57,856 --> 00:10:59,906
渲染部件的自然选择


246
00:10:59,906 --> 00:11:00,736
并且具有更好的伸缩性


247
00:11:02,616 --> 00:11:05,036
现在查看代码


248
00:11:05,036 --> 00:11:07,606
你可以通过


249
00:11:07,606 --> 00:11:09,286
配置压缩会话


250
00:11:09,286 --> 00:11:11,676
或作为缓冲附件


251
00:11:11,676 --> 00:11:12,306
来指定 Alpha 模式


252
00:11:12,306 --> 00:11:15,606
作为一种安全机制


253
00:11:15,606 --> 00:11:17,206
如果设置和缓冲区附件


254
00:11:17,206 --> 00:11:19,256
都被指定并且


255
00:11:19,366 --> 00:11:21,246
它们不匹配败


256
00:11:21,246 --> 00:11:23,036
编码操作将失败


257
00:11:25,046 --> 00:11:26,996
我们的 API 


258
00:11:26,996 --> 00:11:29,556
要求 Alpha 通道


259
00:11:29,556 --> 00:11:32,006
以固定的质量进行编码


260
00:11:32,006 --> 00:11:34,176
因为 Alpha 通道中的


261
00:11:34,176 --> 00:11:36,126
视频编码失真可能很麻烦


262
00:11:36,326 --> 00:11:37,986
因为相同的失真


263
00:11:38,286 --> 00:11:39,636
不会出现在基础层中


264
00:11:40,746 --> 00:11:41,486
如果需要 我们的 API


265
00:11:41,836 --> 00:11:44,136
可让你分别控制


266
00:11:44,476 --> 00:11:46,026
基本层比特率


267
00:11:46,026 --> 00:11:49,876
和 Alpha 通道的质量


268
00:11:50,076 --> 00:11:52,426
现在我们来看看代码


269
00:11:52,426 --> 00:11:54,396
你可以使用 


270
00:11:54,896 --> 00:11:56,876
Alpha 参数的目标质量


271
00:11:56,876 --> 00:11:57,546
指定 Alpha 图层质量


272
00:11:59,376 --> 00:12:01,876
它的区间在 0 和 1 之间


273
00:12:02,436 --> 00:12:04,596
其中 1 表示它接近无损


274
00:12:05,746 --> 00:12:07,036
指定的比特率参数


275
00:12:07,036 --> 00:12:09,316
仅适用于基础层


276
00:12:09,316 --> 00:12:11,846
Alpha 图层将忽略该参数


277
00:12:13,546 --> 00:12:15,306
要检测 Alpha 通道的存在


278
00:12:15,306 --> 00:12:24,076
可以用 withMediaCharacteristic:.containsAlphaChannel 
来测试


279
00:12:24,076 --> 00:12:26,506
也可以查询


280
00:12:26,506 --> 00:12:28,496
formatDescription.extensions[.containsAlphaChannel] 
的布尔值


281
00:12:30,706 --> 00:12:33,286
如果你试图


282
00:12:33,286 --> 00:12:35,376
用 Alpha 影片导出 HEVC 


283
00:12:35,376 --> 00:12:37,876
请使用 determineCompatibility API 


284
00:12:37,876 --> 00:12:40,026
以验证源资源中


285
00:12:40,026 --> 00:12:40,886
是否存在 Alpha


286
00:12:43,866 --> 00:12:45,636
此验证只考虑源影片


287
00:12:45,636 --> 00:12:48,546
而不考虑视频合成


288
00:12:48,736 --> 00:12:51,046
因此如果使用视频合成


289
00:12:51,046 --> 00:12:53,126
从没有 Alpha 通道的源


290
00:12:53,126 --> 00:12:54,756
生成新的 Alpha 通道


291
00:12:55,206 --> 00:12:57,476
则必须跳过它


292
00:12:59,466 --> 00:13:01,386
当前生态中有很多


293
00:13:01,386 --> 00:13:02,426
视频播放器


294
00:13:03,676 --> 00:13:06,216
不支持 HEVC


295
00:13:06,736 --> 00:13:08,586
更不用说带 Alpha 通道的 HEVC 了


296
00:13:10,096 --> 00:13:11,716
可以通过以纯色背景颜色


297
00:13:12,466 --> 00:13:14,426
进行刻录来移除 


298
00:13:14,426 --> 00:13:14,896
Alpha 通道


299
00:13:15,936 --> 00:13:17,616
我们添加了一些方便的 API 


300
00:13:17,616 --> 00:13:19,906
和示例代码


301
00:13:19,906 --> 00:13:21,196
来帮助简化这种转换


302
00:13:22,766 --> 00:13:24,156
如果你希望


303
00:13:24,156 --> 00:13:26,766
在非 Apple 媒体框架中


304
00:13:26,766 --> 00:13:28,806
构建支持


305
00:13:28,806 --> 00:13:30,616
我们已经发布了


306
00:13:30,616 --> 00:13:32,506
应该阅读的互操作性配置文件的规范


307
00:13:32,506 --> 00:13:34,476
你们应该阅读一下


308
00:13:34,476 --> 00:13:36,316
但是如果你等不及了


309
00:13:36,316 --> 00:13:37,000
这里可以先睹为快


310
00:13:43,296 --> 00:13:45,756
总而言之带有 Alpha 的


311
00:13:45,756 --> 00:13:47,676
HEVC 视频是一个很酷的新功能


312
00:13:48,516 --> 00:13:50,596
它利用了 HEVC


313
00:13:50,596 --> 00:13:53,316
最先进的压缩技术


314
00:13:54,676 --> 00:13:57,866
iOS 13 tvOS 13


315
00:13:57,866 --> 00:13:59,916
和 macOS Catalina 都支持它


316
00:14:01,226 --> 00:14:03,416
它利用了最近


317
00:14:03,416 --> 00:14:05,496
设备上的硬件加速


318
00:14:06,886 --> 00:14:09,206
它很好地集成到 AVFoundation 中


319
00:14:09,206 --> 00:14:11,436
可以在你的 App 中使用


320
00:14:12,686 --> 00:14:15,206
它还集成在 Safari 中 


321
00:14:15,206 --> 00:14:17,166
用于你的 Web 体验


322
00:14:18,576 --> 00:14:21,526
带有 Alpha 的 HEVC


323
00:14:21,526 --> 00:14:23,276
为开发人员和用户


324
00:14:23,276 --> 00:14:25,286
带来了新的


325
00:14:25,286 --> 00:14:26,216
有创造性的表达机会


326
00:14:26,886 --> 00:14:28,616
我们已经迫不及待地


327
00:14:28,676 --> 00:14:30,376
想看看你在 App 中


328
00:14:30,376 --> 00:14:30,766
如何利用它


329
00:14:30,936 --> 00:14:31,976
感谢大家

