1
00:00:01,516 --> 00:00:04,500
[音乐]


2
00:00:11,776 --> 00:00:13,036
>> 欢迎来到 Delivering Intuitive


3
00:00:13,036 --> 00:00:14,916
Media Playback with AVKit


4
00:00:15,516 --> 00:00:17,756
[掌声]


5
00:00:18,256 --> 00:00:19,626
我叫 Jed Lewison 


6
00:00:19,626 --> 00:00:21,316
过会儿我的同事 Dan Wright


7
00:00:21,316 --> 00:00:22,416
也会上台


8
00:00:22,916 --> 00:00:24,206
我们将向大家介绍的是


9
00:00:24,206 --> 00:00:26,686
使用 AVKit 进行媒体播放


10
00:00:27,146 --> 00:00:29,756
以及在 iOS 和 tvOS 环境下


11
00:00:30,036 --> 00:00:31,786
AVPlayerViewController 有哪些


12
00:00:31,976 --> 00:00:33,706
最新功能和最佳实践


13
00:00:35,256 --> 00:00:37,326
AVKit 是一种跨平台媒体播放


14
00:00:37,326 --> 00:00:39,026
UI 框架 它是基于 CoreMedia


15
00:00:39,026 --> 00:00:41,356
和 AVFoundation 建立的


16
00:00:41,656 --> 00:00:43,176
我们的目标是


17
00:00:43,176 --> 00:00:45,746
让你轻松地显示和播放


18
00:00:45,746 --> 00:00:47,266
基于 AVPlayer 的媒体内容


19
00:00:47,646 --> 00:00:49,876
使用的用户界面与


20
00:00:50,436 --> 00:00:51,976
Apple 自带 App 相同


21
00:00:53,326 --> 00:00:55,506
对于 UIKit App


22
00:00:55,666 --> 00:00:56,966
我们提供 AVPlayerViewController


23
00:00:58,246 --> 00:01:00,236
对于 APKit App


24
00:01:00,236 --> 00:01:00,876
我们提供 AVPlayerView


25
00:01:01,316 --> 00:01:03,316
对于适用 UIKit 或 APKit 的所有 App


26
00:01:03,316 --> 00:01:04,406
我们提供 AVRoutePickerView


27
00:01:04,406 --> 00:01:05,906
它允许你


28
00:01:05,906 --> 00:01:07,546
添加无线路由选择器


29
00:01:07,806 --> 00:01:09,706
到自定义播放 UI


30
00:01:11,166 --> 00:01:12,266
那么让我们来看看代码


31
00:01:12,736 --> 00:01:14,086
在 iOS 上开始使用


32
00:01:14,086 --> 00:01:16,586
AVPlayerViewController 其实非常简单


33
00:01:16,586 --> 00:01:18,546
在 tvOS 上也是一样


34
00:01:19,226 --> 00:01:20,286
你要做的第一件事就是


35
00:01:20,286 --> 00:01:21,236
创建一个 AVPlayer


36
00:01:22,396 --> 00:01:23,846
然后你创建一个


37
00:01:23,846 --> 00:01:25,356
AVPlayerViewController


38
00:01:25,356 --> 00:01:26,566
并把它分配到你刚刚创建的


39
00:01:26,566 --> 00:01:27,346
播放器里


40
00:01:28,096 --> 00:01:29,976
最后 把它显示出来


41
00:01:29,976 --> 00:01:31,786
这就是要做到全部内容了


42
00:01:32,516 --> 00:01:33,556
以上就是得到一个


43
00:01:33,556 --> 00:01:35,176
内容丰富且功能齐全的


44
00:01:35,236 --> 00:01:37,026
媒体播放 UI 所需要做的


45
00:01:37,076 --> 00:01:39,216
你的用户会对它很熟悉


46
00:01:39,216 --> 00:01:41,136
因为它与 Apple 在 App 中


47
00:01:41,406 --> 00:01:42,676
使用的 UI 相同


48
00:01:43,356 --> 00:01:45,176
不过在这简单的表面之下


49
00:01:45,176 --> 00:01:45,906
蕴含有非常强大的功能


50
00:01:46,016 --> 00:01:48,066
这是因为当你


51
00:01:48,066 --> 00:01:50,726
使用 AVKit 时


52
00:01:50,776 --> 00:01:51,926
你掌控着媒体播放对象


53
00:01:52,366 --> 00:01:54,496
你可以创建


54
00:01:54,556 --> 00:01:55,576
并管理它们


55
00:01:55,906 --> 00:01:57,906
而视频渲染也是采用


56
00:01:57,906 --> 00:02:00,546
与 AVPlayerLayer 相同的


57
00:02:00,766 --> 00:02:02,286
核心技术


58
00:02:03,066 --> 00:02:03,946
这意味着你可以获得


59
00:02:03,946 --> 00:02:05,586
AVFoundation 和


60
00:02:05,586 --> 00:02:06,996
CoreMedia 播放 UI 的全部功能


61
00:02:07,576 --> 00:02:09,045
包括 AVPlayer


62
00:02:09,045 --> 00:02:10,186
AVPlayerItem 和 AVAsset


63
00:02:10,186 --> 00:02:12,746
提供的所有功能


64
00:02:12,926 --> 00:02:15,516
但由于 AVKit 也基于


65
00:02:15,516 --> 00:02:18,276
UIKit 和 AppKit 因此你能获得


66
00:02:18,276 --> 00:02:20,236
为 Apple 这些独一无二的平台


67
00:02:20,236 --> 00:02:22,586
所量身定制的用户体验


68
00:02:22,816 --> 00:02:25,456
所以 AVKit 为你提供了两全其美的体验


69
00:02:27,156 --> 00:02:28,936
你可以全方位控制


70
00:02:28,936 --> 00:02:30,276
媒体播放对象


71
00:02:30,686 --> 00:02:33,746
以及一个可以显示和播放这些对象的 API


72
00:02:33,746 --> 00:02:35,746
使用基于 UIKit 和


73
00:02:35,746 --> 00:02:37,246
APKit 的 API


74
00:02:38,576 --> 00:02:40,666
所以 以上是对 AVKit


75
00:02:40,666 --> 00:02:41,296
高度概括的介绍


76
00:02:41,296 --> 00:02:43,476
接下来 让我们深入了解


77
00:02:43,836 --> 00:02:45,296
iOS 环境下的 AVPlayerViewController 


78
00:02:45,406 --> 00:02:47,046
在 iOS 13 中的新功能


79
00:02:47,436 --> 00:02:49,936
我先来介绍一下


80
00:02:50,086 --> 00:02:51,936
我们新添加的全屏回调函数


81
00:02:51,936 --> 00:02:53,296
它能够告知你从嵌入式内联


82
00:02:53,296 --> 00:02:55,676
演示到


83
00:02:55,676 --> 00:02:58,096
全屏的过渡


84
00:02:58,096 --> 00:02:59,936
以及进入全屏和退出全屏


85
00:02:59,936 --> 00:03:02,746
所以 为了给大家演示


86
00:03:02,746 --> 00:03:05,096
在下面的视频中 我们将看到的是


87
00:03:05,256 --> 00:03:06,416
用户进入全屏模式


88
00:03:06,416 --> 00:03:08,156
然后进行


89
00:03:08,156 --> 00:03:09,626
小窗模式


90
00:03:10,206 --> 00:03:12,636
不过 用户会半途取消小窗模式


91
00:03:12,836 --> 00:03:14,366
所以现在我们又回到了全屏模式


92
00:03:14,686 --> 00:03:17,576
现在用户已经退出了全屏


93
00:03:17,686 --> 00:03:19,246
我们就回到了最初的


94
00:03:19,246 --> 00:03:22,386
AVPlayerViewController 内嵌在文本中的地方


95
00:03:23,336 --> 00:03:25,316
所以 我们在 iOS 13 中


96
00:03:25,316 --> 00:03:27,456
提供的新的 API


97
00:03:27,456 --> 00:03:29,136
通过扩展 AVPlayerViewControllerDelegate


98
00:03:29,136 --> 00:03:30,656
来告知你所有这些状态


99
00:03:32,056 --> 00:03:33,516
全屏演示开始


100
00:03:33,606 --> 00:03:35,636
或结束时


101
00:03:35,836 --> 00:03:36,456
你会得到通知


102
00:03:36,606 --> 00:03:37,766
它看起来是这样的


103
00:03:38,966 --> 00:03:40,246
两个新的代理方法


104
00:03:41,076 --> 00:03:42,646
如果你链接到 iOS 13 的 SDK


105
00:03:42,786 --> 00:03:44,366
这个从 iOS 12 开始


106
00:03:44,366 --> 00:03:48,096
可以获得


107
00:03:48,096 --> 00:03:49,136
一个用于开始全屏演示


108
00:03:49,136 --> 00:03:51,686
另一个


109
00:03:51,686 --> 00:03:52,516
用于在全屏演示结束时


110
00:03:52,516 --> 00:03:53,656
调用


111
00:03:54,386 --> 00:03:55,386
那么让我们来看看


112
00:03:55,386 --> 00:03:56,426
这里是怎么执行的


113
00:03:56,916 --> 00:03:58,356
这里的关键对象是


114
00:03:58,356 --> 00:04:00,316
UIViewControllerTransitionCoordinator


115
00:04:00,316 --> 00:04:01,896
它与 UIKit 中任一其他


116
00:04:02,186 --> 00:04:03,886
视图控制器转换的工作方式


117
00:04:03,886 --> 00:04:05,376
完全相同


118
00:04:05,376 --> 00:04:06,486
你可以了解所有这些


119
00:04:06,486 --> 00:04:07,446
细节和功能


120
00:04:07,446 --> 00:04:10,106
从 UIKit 文档中


121
00:04:10,106 --> 00:04:10,946
不过我在这里想要


122
00:04:10,946 --> 00:04:13,996
强调的一个重点是


123
00:04:13,996 --> 00:04:15,116
animate 方法 alongsideTransition 


124
00:04:15,116 --> 00:04:17,206
回调函数的完成处理器


125
00:04:17,206 --> 00:04:18,666
通过它你能够知道


126
00:04:18,666 --> 00:04:21,356
一个过渡是否成功了


127
00:04:21,596 --> 00:04:23,216
或者用户是否取消了它


128
00:04:23,216 --> 00:04:24,706
通过它才能知道从文本演示


129
00:04:24,766 --> 00:04:26,396
进入全屏模式的


130
00:04:26,396 --> 00:04:28,256
真实情况


131
00:04:29,306 --> 00:04:31,636
很显然人们有兴趣知道


132
00:04:31,636 --> 00:04:33,266
播放器视图控制器是


133
00:04:33,266 --> 00:04:35,366
处于全屏状态


134
00:04:35,476 --> 00:04:37,706
还是嵌入在文本里


135
00:04:37,706 --> 00:04:39,486
但为什么这很重要呢


136
00:04:40,066 --> 00:04:41,906
它很重要是因为


137
00:04:41,906 --> 00:04:43,646
我们来举例说明


138
00:04:43,646 --> 00:04:45,166
当你的播放器视图控制器


139
00:04:45,166 --> 00:04:46,116
处在滚动视图中


140
00:04:46,336 --> 00:04:48,376
然后用户进入了全屏模式


141
00:04:48,606 --> 00:04:50,056
当设备旋转的时候


142
00:04:50,056 --> 00:04:51,606
你知道 有时你的滚动视图


143
00:04:51,606 --> 00:04:52,866
会有偏移


144
00:04:52,866 --> 00:04:53,846
而且有可能


145
00:04:53,846 --> 00:04:55,356
播放器视图控制器


146
00:04:55,356 --> 00:04:56,216
会滚动至屏幕外


147
00:04:56,996 --> 00:04:59,696
当然在全屏演示时


148
00:04:59,696 --> 00:05:00,756
它滚到屏幕外是没问题的


149
00:05:00,756 --> 00:05:02,776
因为用户看不到它


150
00:05:03,266 --> 00:05:04,796
但是你需要确保


151
00:05:04,846 --> 00:05:07,056
播放器视图控制器是开启的状态


152
00:05:07,206 --> 00:05:08,806
如果它被释放关闭了


153
00:05:08,806 --> 00:05:11,046
全屏演示也将结束


154
00:05:11,736 --> 00:05:14,066
所以你可以使用新的 API


155
00:05:14,566 --> 00:05:16,366
来了解何时


156
00:05:16,366 --> 00:05:17,436
该对播放器视图控制器进行强引用


157
00:05:17,436 --> 00:05:20,096
如果遇到表视图控制器


158
00:05:20,096 --> 00:05:21,666
或集合视图


159
00:05:21,996 --> 00:05:24,296
碰巧移除了


160
00:05:24,296 --> 00:05:26,896
在屏幕外滚动的播放器视图控制器的情况


161
00:05:27,396 --> 00:05:28,356
不过还有一个未解难题


162
00:05:28,356 --> 00:05:29,766
就是当用户退出全屏后


163
00:05:29,766 --> 00:05:31,866
你如何把它


164
00:05:31,866 --> 00:05:32,746
归回原位


165
00:05:32,746 --> 00:05:35,036
解决办法是 你可以使用


166
00:05:35,036 --> 00:05:36,766
新 API 的 willEnd 变量


167
00:05:36,766 --> 00:05:38,646
而且要在动画开始前


168
00:05:38,646 --> 00:05:39,966
进行调出


169
00:05:40,226 --> 00:05:42,756
这样你才能在 UI 中


170
00:05:42,756 --> 00:05:44,486
重新设置播放器视图控制器


171
00:05:44,486 --> 00:05:45,596
的位置


172
00:05:45,596 --> 00:05:47,066
而用户对这一切将一无所知


173
00:05:47,066 --> 00:05:49,346
一切都会按照他们期待的那样复原


174
00:05:50,116 --> 00:05:51,756
所以这就是全屏回调了


175
00:05:53,536 --> 00:05:54,756
现在我们来看一下 Mac 系统下


176
00:05:54,756 --> 00:05:56,856
iPad App 中的 AVPlayerViewController


177
00:05:56,856 --> 00:05:58,886
如你所知 iPad 的 App


178
00:05:58,886 --> 00:06:00,146
现在可以在 Mac 中构建


179
00:06:00,596 --> 00:06:02,426
AVPlayerViewController 在这一过程中


180
00:06:02,426 --> 00:06:03,676
全面发挥作用


181
00:06:04,716 --> 00:06:05,686
它看起来就像这个样子


182
00:06:05,866 --> 00:06:07,516
你可以获得与 Apple 的


183
00:06:07,746 --> 00:06:09,916
播放 UI 相同的用户界面


184
00:06:09,916 --> 00:06:11,266
包括 AVPlayerViewController


185
00:06:11,266 --> 00:06:12,606
为 iPad App 提供的


186
00:06:12,606 --> 00:06:15,916
所有功能


187
00:06:15,966 --> 00:06:17,766
但同时你也能得到一些


188
00:06:17,926 --> 00:06:19,386
Mac 平台的特别功能


189
00:06:19,746 --> 00:06:22,176
比如触控栏支持


190
00:06:22,176 --> 00:06:23,066
这个是免费的


191
00:06:24,146 --> 00:06:25,296
还有键盘支持功能


192
00:06:27,246 --> 00:06:28,756
此外我们也加入了


193
00:06:29,086 --> 00:06:31,326
画中画支持


194
00:06:32,496 --> 00:06:34,206
也是对于 Mac 上的 iPad App


195
00:06:34,666 --> 00:06:35,926
事实上 我们对于


196
00:06:35,926 --> 00:06:37,296
所有基于 UIKit 和 AppKit 的 App


197
00:06:37,576 --> 00:06:40,256
都扩展了画中画的支持


198
00:06:40,256 --> 00:06:41,396
在这次发布中


199
00:06:42,696 --> 00:06:44,176
那么在 Mac 上构建 iPad App


200
00:06:44,176 --> 00:06:45,266
使用 AVPlayerViewController 


201
00:06:45,266 --> 00:06:47,266
需要用到多少行


202
00:06:47,266 --> 00:06:48,986
新代码呢


203
00:06:49,956 --> 00:06:51,206
你们猜对了 零


204
00:06:52,516 --> 00:06:55,776
[掌声]


205
00:06:56,276 --> 00:06:58,436
以上就是 AVPlayerViewController


206
00:06:58,436 --> 00:06:59,576
以及在 Mac 中构建 iPad App


207
00:07:00,506 --> 00:07:02,186
现在让我们来谈谈外部元数据


208
00:07:02,556 --> 00:07:05,056
作为演示


209
00:07:05,056 --> 00:07:06,906
想象你正在投屏一些内容


210
00:07:07,306 --> 00:07:09,446
在这个时候


211
00:07:09,706 --> 00:07:11,576
你锁住的屏幕看起来是这样的


212
00:07:11,576 --> 00:07:15,306
而不是这样的


213
00:07:15,856 --> 00:07:17,986
需要做两件事


214
00:07:18,116 --> 00:07:20,076
才有可能出现这样的用户界面


215
00:07:20,076 --> 00:07:20,966
第一 你需要处理


216
00:07:20,966 --> 00:07:22,816
远程控制命令


217
00:07:23,216 --> 00:07:24,846
而 AVKit 能够自动且免费地


218
00:07:24,846 --> 00:07:26,096
为你处理


219
00:07:26,096 --> 00:07:27,336
你什么都不用做


220
00:07:28,186 --> 00:07:29,616
但是有些时候 你的媒体


221
00:07:29,616 --> 00:07:31,166
缺乏你想要发布的


222
00:07:31,166 --> 00:07:32,816
完整的


223
00:07:32,816 --> 00:07:34,076
全部元数据


224
00:07:34,496 --> 00:07:38,296
对于这种情况 我们在 iOS 中添加了新 API


225
00:07:38,296 --> 00:07:41,946
它其实在 tvOS 中早已存在


226
00:07:42,226 --> 00:07:44,776
输入你的 AVPlayerItem


227
00:07:44,856 --> 00:07:47,136
然后你可以对元数据进行补充


228
00:07:47,136 --> 00:07:48,636
比如标题


229
00:07:48,796 --> 00:07:51,236
元数据 图案元数据


230
00:07:51,486 --> 00:07:52,406
超级简单的


231
00:07:52,406 --> 00:07:54,286
当你这么做的时候


232
00:07:54,286 --> 00:07:57,966
我们会帮你解决其他所有问题


233
00:07:58,236 --> 00:08:02,006
在 iOS 13 中 我们还改进了


234
00:08:02,006 --> 00:08:04,446
对于互动的支持


235
00:08:04,616 --> 00:08:06,236
对于 AVPlayerViewController 中的


236
00:08:06,236 --> 00:08:07,416
自定义控件的支持


237
00:08:07,596 --> 00:08:08,776
这个之前就可以实现


238
00:08:08,776 --> 00:08:10,746
只要使用 iOS 中 AVPlayerViewController


239
00:08:10,746 --> 00:08:13,146
的自定义控件就行


240
00:08:13,676 --> 00:08:15,456
不过当你这么做的时候


241
00:08:15,456 --> 00:08:16,726
你会丢失所有其他


242
00:08:16,726 --> 00:08:18,136
不在屏幕上的内容


243
00:08:18,656 --> 00:08:21,096
比如互动式小窗


244
00:08:21,416 --> 00:08:23,706
或者横屏支持


245
00:08:24,626 --> 00:08:25,996
再比如键盘


246
00:08:26,356 --> 00:08:27,296
还有在 Mac 中构建 iPad App 时


247
00:08:27,366 --> 00:08:30,066
用到的 AVPlayerViewController 


248
00:08:30,066 --> 00:08:31,696
触控栏支持


249
00:08:31,696 --> 00:08:35,265
那么现在在 iOS 13 环境下你能做的就是


250
00:08:35,265 --> 00:08:37,256
如果把


251
00:08:37,256 --> 00:08:38,706
showsPlaybackControls 设成 False


252
00:08:39,686 --> 00:08:41,426
那么你就以模块的方式显示


253
00:08:41,426 --> 00:08:43,096
AVPlayerViewController


254
00:08:44,176 --> 00:08:45,856
最后使用


255
00:08:45,856 --> 00:08:47,616
contentOverlayView 来放置


256
00:08:47,616 --> 00:08:49,266
你的自定义控件


257
00:08:50,026 --> 00:08:51,276
你可以拥有一个完全自定义的


258
00:08:51,276 --> 00:08:53,406
播放 UI 的同时


259
00:08:53,406 --> 00:08:55,416
使用诸如


260
00:08:55,506 --> 00:08:58,166
现在播放支持


261
00:08:58,166 --> 00:08:59,776
以及小窗播放支持


262
00:08:59,816 --> 00:09:01,426
不过如果你这么做的话


263
00:09:01,426 --> 00:09:02,706
有些注意事项


264
00:09:02,706 --> 00:09:04,486
你要记住


265
00:09:04,486 --> 00:09:05,486
你仍然需要注意状态栏


266
00:09:05,486 --> 00:09:08,046
以及底部横条


267
00:09:08,046 --> 00:09:09,686
的外观


268
00:09:09,916 --> 00:09:11,136
并且你应该一直将


269
00:09:11,136 --> 00:09:13,786
未处理的触摸手势


270
00:09:13,786 --> 00:09:15,546
通过视图层次结构传递下去


271
00:09:15,546 --> 00:09:17,006
以便让 AVKit 处理例如


272
00:09:17,006 --> 00:09:19,396
小窗播放或双击放大等类似的事情


273
00:09:19,396 --> 00:09:21,376
这些内容我们稍后再讨论


274
00:09:22,846 --> 00:09:24,846
好的 我们来看看在 iOS 中的


275
00:09:25,136 --> 00:09:27,816
AVPlayerViewController 有哪些新功能


276
00:09:28,246 --> 00:09:30,526
我们新增了不少新内容


277
00:09:31,406 --> 00:09:35,246
其中一项就是我们


278
00:09:35,246 --> 00:09:36,476
在改进 iOS 12 中的性能方面


279
00:09:36,476 --> 00:09:38,076
突飞猛进


280
00:09:38,466 --> 00:09:40,886
它在 iOS 13 中更是表现抢眼


281
00:09:40,886 --> 00:09:43,276
所以如果你对在滚动视图中


282
00:09:43,276 --> 00:09:44,486
使用 AVPlayerViewController 感兴趣的话


283
00:09:44,486 --> 00:09:46,466
改进后的它就像


284
00:09:46,466 --> 00:09:47,076
黄油般流畅丝滑


285
00:09:48,496 --> 00:09:49,976
那么 让我们来聊聊


286
00:09:50,026 --> 00:09:51,056
AVPlayerViewController 的


287
00:09:51,056 --> 00:09:52,146
最佳实践


288
00:09:54,416 --> 00:09:56,056
我想谈三种不同的


289
00:09:56,056 --> 00:09:59,486
在设备上播放视频的方式


290
00:09:59,956 --> 00:10:01,436
当然了 也有第四种


291
00:10:01,436 --> 00:10:03,196
播放视频的方式


292
00:10:03,196 --> 00:10:04,376
那就是从一个 iOS 设备上投屏


293
00:10:04,376 --> 00:10:06,226
周二早上 9 点


294
00:10:06,226 --> 00:10:08,046
有一场精彩讲座


295
00:10:08,046 --> 00:10:09,136
如果你没到场


296
00:10:09,136 --> 00:10:12,476
我强烈建议你观看相关视频


297
00:10:12,476 --> 00:10:13,806
不过今天我的重点还是放在


298
00:10:13,866 --> 00:10:15,096
设备播放上面


299
00:10:16,146 --> 00:10:18,866
让我们从全屏视频播放开始


300
00:10:18,866 --> 00:10:21,056
当然了 我的意思是说


301
00:10:21,056 --> 00:10:23,656
基于 UIKit 意义的全屏


302
00:10:23,946 --> 00:10:25,356
所以 我们讨论的是


303
00:10:25,356 --> 00:10:27,576
覆盖你的 UIWindowScene 坐标空间


304
00:10:27,726 --> 00:10:29,296
如果我们细想一下


305
00:10:29,296 --> 00:10:31,456
可能存在两个原因


306
00:10:31,456 --> 00:10:33,086
促使我们全屏播放一个视频


307
00:10:33,676 --> 00:10:35,046
它可能是一种


308
00:10:35,046 --> 00:10:36,376
在开屏时的


309
00:10:36,376 --> 00:10:37,186
背景视频


310
00:10:37,536 --> 00:10:39,146
或者这个视频是


311
00:10:39,146 --> 00:10:39,686
展示的亮点


312
00:10:39,686 --> 00:10:41,556
我们因此想要对其进行完全的播放控制


313
00:10:41,556 --> 00:10:43,306
我们来快速看一看


314
00:10:43,306 --> 00:10:44,976
开屏这种情况


315
00:10:45,426 --> 00:10:47,866
这些是你想要


316
00:10:47,866 --> 00:10:53,406
在 App 里实现的


317
00:10:54,136 --> 00:10:56,286
为了达到这一目标 你需要


318
00:10:56,626 --> 00:10:58,056
选择 playerViewController


319
00:10:58,426 --> 00:10:59,936
你需要把它作为子内容去嵌入


320
00:10:59,936 --> 00:11:01,006
因此它可以位于


321
00:11:01,006 --> 00:11:02,126
视图层次结构的底部


322
00:11:02,526 --> 00:11:03,356
你还需要做一些设定


323
00:11:03,446 --> 00:11:05,466
比如禁用播放控件和


324
00:11:05,646 --> 00:11:07,116
合理设置 videoGravity


325
00:11:07,116 --> 00:11:08,526
以便让视频缩放到


326
00:11:08,526 --> 00:11:09,446
填满整个屏幕的大小


327
00:11:10,296 --> 00:11:11,226
如果你打算用这次新发布的


328
00:11:11,226 --> 00:11:12,876
带有 alpha 通道 API 的新视频


329
00:11:12,876 --> 00:11:13,956
你需要将你的


330
00:11:13,956 --> 00:11:15,246
视图背景颜色


331
00:11:15,246 --> 00:11:17,296
设定为 clear 


332
00:11:17,296 --> 00:11:19,396
或其他颜色以衬托重点


333
00:11:21,016 --> 00:11:22,226
关于 AVFoundation 也有一些事项


334
00:11:22,226 --> 00:11:23,956
需要考虑


335
00:11:24,456 --> 00:11:25,356
你肯定希望确保避免


336
00:11:25,356 --> 00:11:27,436
开屏的内容


337
00:11:27,436 --> 00:11:29,396
作为外部播放来播放


338
00:11:29,716 --> 00:11:30,276
因为你不想干扰


339
00:11:30,276 --> 00:11:32,026
比如说 别人 Apple TV 上的


340
00:11:32,026 --> 00:11:33,086
音乐播放


341
00:11:33,306 --> 00:11:36,136
此外你也想要配置音频会话


342
00:11:36,136 --> 00:11:37,876
尤其是 AVAudioSession 的


343
00:11:37,986 --> 00:11:41,836
最后一个属性


344
00:11:42,066 --> 00:11:44,216
这个辅助音频应该被静音


345
00:11:44,216 --> 00:11:45,966
如果用户在其他的 App 上播放音频


346
00:11:46,026 --> 00:11:48,566
它就会通知你 


347
00:11:48,846 --> 00:11:50,206
他们希望那个 App 成为


348
00:11:50,206 --> 00:11:52,026
那个音频成为主要


349
00:11:52,656 --> 00:11:53,946
在这种情况下 如果你的


350
00:11:53,946 --> 00:11:55,056
开屏视频中有音频


351
00:11:55,216 --> 00:11:57,236
请确保将其静音


352
00:11:58,056 --> 00:11:59,546
然后我们来看看


353
00:11:59,546 --> 00:12:01,036
当视频作为展示亮点的情况下


354
00:12:01,036 --> 00:12:01,986
的全屏播放


355
00:12:01,986 --> 00:12:03,046
在这种情况下 当然


356
00:12:03,046 --> 00:12:06,456
我们想要播放 UI 能够


357
00:12:06,886 --> 00:12:08,446
完美地适应


358
00:12:08,446 --> 00:12:10,506
无论是像这样的纵向展示


359
00:12:10,506 --> 00:12:12,696
此时我们看到的是


360
00:12:12,816 --> 00:12:14,326
堆叠的播放传输控件


361
00:12:14,726 --> 00:12:16,696
还是在横向展示的情况下


362
00:12:16,696 --> 00:12:18,596
我们需要一个略有不同的布局


363
00:12:18,596 --> 00:12:20,086
但是同样的 但我们需要


364
00:12:20,196 --> 00:12:21,716
提供相同的功能


365
00:12:22,406 --> 00:12:23,806
那么 AVPlayerViewController


366
00:12:24,396 --> 00:12:26,446
能为你免费实现这些


367
00:12:26,916 --> 00:12:28,646
同时它还能做到其他一些事情


368
00:12:28,646 --> 00:12:31,266
你会注意到


369
00:12:31,336 --> 00:12:34,256
在刚才的两个屏幕截图中


370
00:12:34,806 --> 00:12:36,066
在纵向展示时 视频是没有被缩放调整的


371
00:12:36,066 --> 00:12:38,836
而在横向展示时 它是被缩放调整了的


372
00:12:39,566 --> 00:12:40,546
而且它被调整成填充满了整个屏幕


373
00:12:40,546 --> 00:12:42,096
因为在这种情况下 用户


374
00:12:42,096 --> 00:12:43,946
播放的视频的纵横比


375
00:12:44,006 --> 00:12:48,186
与设备的纵横比是相似的


376
00:12:48,186 --> 00:12:50,976
视频以缩放格式播放


377
00:12:51,286 --> 00:12:53,446
不过有些用户更喜欢


378
00:12:53,826 --> 00:12:56,856
不去缩放调整视频 就像这里


379
00:12:57,136 --> 00:12:58,406
当发生这种情况时


380
00:12:58,406 --> 00:13:00,836
我们希望确保视频不会


381
00:13:00,836 --> 00:13:04,116
被设备的任何物理特性遮挡


382
00:13:04,706 --> 00:13:07,036
AVKit 注意到了这些细节


383
00:13:07,036 --> 00:13:08,186
并在你使用 PlayerViewController 时


384
00:13:08,186 --> 00:13:10,756
进行相应的处理


385
00:13:10,816 --> 00:13:12,086
相比起逐一介绍我们提供的


386
00:13:12,496 --> 00:13:14,306
每一个新功能


387
00:13:14,306 --> 00:13:15,966
我只想放大强调两个


388
00:13:15,966 --> 00:13:17,816
非常小的细节


389
00:13:17,896 --> 00:13:18,856
是我们新增在 iOS 13 系统下的


390
00:13:19,416 --> 00:13:22,876
第一个 在这个视频中


391
00:13:23,096 --> 00:13:24,956
你将听到音频播放


392
00:13:24,956 --> 00:13:26,766
然后用户将点击静音按钮


393
00:13:26,996 --> 00:13:30,276
当它静音时请注意


394
00:13:30,366 --> 00:13:32,166
音频有一个微妙的下降


395
00:13:32,826 --> 00:13:36,256
在音量滑块中有动画出现


396
00:13:37,516 --> 00:13:40,546
[音乐]


397
00:13:41,046 --> 00:13:43,456
然后在这个示例中


398
00:13:43,456 --> 00:13:44,886
有一个小窗播放


399
00:13:44,886 --> 00:13:45,966
请注意 音频是随着用户的缩小


400
00:13:45,966 --> 00:13:49,146
柔和地逐渐消失的


401
00:13:49,146 --> 00:13:50,226
然后当用户取消小窗


402
00:13:50,226 --> 00:13:52,686
音频的音量又恢复了


403
00:13:53,516 --> 00:14:04,296
[音乐]


404
00:14:04,796 --> 00:14:06,726
所以上述就是这两个小细节了


405
00:14:06,726 --> 00:14:08,466
事虽小 但它们证明了


406
00:14:08,466 --> 00:14:09,706
我们对 AVPlayerViewController 


407
00:14:09,706 --> 00:14:10,746
各方面细节


408
00:14:10,746 --> 00:14:11,916
重视程度之高


409
00:14:11,916 --> 00:14:14,036
如果你将它放进你的 APP


410
00:14:14,036 --> 00:14:16,126
用户将能够免费使用它


411
00:14:17,816 --> 00:14:20,356
除此之外你还会得到很多其他的东西


412
00:14:20,356 --> 00:14:22,586
你可能会问的问题是


413
00:14:22,586 --> 00:14:24,466
如何获得所有这些


414
00:14:24,786 --> 00:14:26,736
让我们再看一下代码


415
00:14:28,566 --> 00:14:30,446
你看 这与我之前在演讲中


416
00:14:30,446 --> 00:14:32,506
展示的内容基本相同


417
00:14:33,126 --> 00:14:34,136
唯一需要补充的是这个


418
00:14:34,136 --> 00:14:35,216
外部元数据


419
00:14:35,396 --> 00:14:36,336
这行代码允许你


420
00:14:36,496 --> 00:14:38,916
对元数据进行补充


421
00:14:39,486 --> 00:14:42,006
而且它真的就这么容易上手


422
00:14:43,486 --> 00:14:45,056
但值得一提的是


423
00:14:45,056 --> 00:14:47,206
为什么你可以在 UI 方面


424
00:14:47,206 --> 00:14:50,416
几乎什么都不做 就能获得


425
00:14:50,416 --> 00:14:51,506
如此好的体验


426
00:14:51,846 --> 00:14:53,416
所以 为此我想谈谈


427
00:14:53,416 --> 00:14:55,906
这里的几个最佳实践


428
00:14:56,446 --> 00:14:57,696
当你使用


429
00:14:57,696 --> 00:14:59,246
AVPlayerViewController 


430
00:14:59,246 --> 00:15:00,276
进行全屏演示时


431
00:15:00,276 --> 00:15:01,396
你应该始终


432
00:15:01,396 --> 00:15:03,506
以模态方式呈现它 而不是


433
00:15:03,506 --> 00:15:05,566
作为其他视图控件的子视图控件


434
00:15:06,076 --> 00:15:07,226
有时你可能已经这样做了


435
00:15:07,226 --> 00:15:08,376
因为你想了解


436
00:15:08,376 --> 00:15:10,666
呈现状态


437
00:15:10,666 --> 00:15:14,016
现在你可以用我之前讨论过的回调函数来处理


438
00:15:14,866 --> 00:15:16,276
以模态方式呈现让我们


439
00:15:16,386 --> 00:15:18,656
可以处理状态栏可见性等


440
00:15:18,656 --> 00:15:20,436
让我们来优化屏幕的


441
00:15:20,716 --> 00:15:21,816
显示模式


442
00:15:22,066 --> 00:15:25,156
它允许我们处理视频的对齐方式


443
00:15:25,156 --> 00:15:28,496
视频缩放模式小窗播放


444
00:15:29,166 --> 00:15:30,776
当你以模态呈现全屏时


445
00:15:31,036 --> 00:15:33,166
你应该使用


446
00:15:33,166 --> 00:15:36,086
默认的模式演示样式


447
00:15:36,086 --> 00:15:38,676
你也许知道 在 iOS 13 中


448
00:15:38,676 --> 00:15:40,906
新的默认模式演示样式


449
00:15:40,906 --> 00:15:42,486
是自动的


450
00:15:43,076 --> 00:15:44,746
AVPlayerViewController


451
00:15:44,746 --> 00:15:46,836
对此的处理是


452
00:15:46,836 --> 00:15:47,826
全屏演示


453
00:15:48,856 --> 00:15:50,106
这里有两种


454
00:15:50,106 --> 00:15:51,456
全屏演示


455
00:15:51,456 --> 00:15:53,386
全屏和超全屏


456
00:15:53,966 --> 00:15:55,336
想要使用默认模式的原因是


457
00:15:55,486 --> 00:15:58,036
因为当你


458
00:15:58,036 --> 00:15:59,836
呈现视图控件时


459
00:15:59,836 --> 00:16:01,966
UIKit 是可以删除呈现的


460
00:16:01,966 --> 00:16:03,506
视图的


461
00:16:04,026 --> 00:16:06,706
这是因为你的


462
00:16:06,706 --> 00:16:09,676
视图覆盖了新呈现的


463
00:16:10,006 --> 00:16:12,206
视图层次结构 所以


464
00:16:12,206 --> 00:16:13,026
删除呈现视图是


465
00:16:13,026 --> 00:16:14,606
对旋转时进行的优化处理


466
00:16:14,606 --> 00:16:16,386
你不会想对视频重新布局


467
00:16:16,386 --> 00:16:17,486
当视图甚至都不可见的情况下


468
00:16:17,866 --> 00:16:19,526
不过 它也允许像横向播放


469
00:16:19,526 --> 00:16:21,306
这类的事情发生


470
00:16:21,306 --> 00:16:22,906
如果你的 App 是仅为纵向视图


471
00:16:22,906 --> 00:16:24,476
或者此视图控件的层次结构


472
00:16:24,476 --> 00:16:26,046
仅为纵向


473
00:16:27,746 --> 00:16:29,326
最好对视频对齐方式属性


474
00:16:29,326 --> 00:16:30,866
进行保留


475
00:16:30,896 --> 00:16:31,886
以便进行全屏播放


476
00:16:32,206 --> 00:16:34,146
这样我们就可以像


477
00:16:34,146 --> 00:16:35,606
我之前说明的那样


478
00:16:35,606 --> 00:16:36,766
进行自适应行为


479
00:16:37,196 --> 00:16:39,326
如果你设置了视频对齐方式属性


480
00:16:39,326 --> 00:16:40,886
我们会准确地为你提供所需内容


481
00:16:40,886 --> 00:16:42,376
我们可以缩放视频


482
00:16:42,376 --> 00:16:42,766
或取消缩放


483
00:16:42,766 --> 00:16:43,726
不过一旦你这样做了


484
00:16:43,726 --> 00:16:45,046
我们就不能


485
00:16:45,046 --> 00:16:46,416
再做其他自适应行为了


486
00:16:46,736 --> 00:16:48,236
因此 用户通常是


487
00:16:48,236 --> 00:16:49,466
更愿意拥有


488
00:16:49,906 --> 00:16:50,656
自适应行为


489
00:16:51,096 --> 00:16:52,496
当然 还有使用新的


490
00:16:52,576 --> 00:16:53,736
代理方法来


491
00:16:53,736 --> 00:16:55,076
跟踪全屏显示状态


492
00:16:56,176 --> 00:16:59,506
这里有一些与


493
00:16:59,506 --> 00:17:01,616
AVFoundation 最佳实践相关的技巧


494
00:17:02,206 --> 00:17:04,796
这是什么意思呢


495
00:17:04,796 --> 00:17:06,546
我对它的理解是


496
00:17:06,546 --> 00:17:08,356
如果你正要播放一段视频


497
00:17:08,356 --> 00:17:11,476
比如从视频的一半开始放


498
00:17:11,476 --> 00:17:14,046
应该把播放器中的播放项目


499
00:17:14,316 --> 00:17:15,425
放到继续播放的时间位置


500
00:17:15,425 --> 00:17:16,606
并确保你的播放器


501
00:17:16,606 --> 00:17:18,455
已经处于播放状态


502
00:17:18,455 --> 00:17:20,215
然后将它提供给


503
00:17:20,215 --> 00:17:21,316
AVPlayerViewController


504
00:17:21,316 --> 00:17:23,406
这会使 UI 看起来很正确


505
00:17:23,406 --> 00:17:24,465
更重要的是 它避免了


506
00:17:24,465 --> 00:17:28,676
加载最终不会被播放的内容


507
00:17:30,006 --> 00:17:32,426
你还应始终注意


508
00:17:32,426 --> 00:17:35,126
AVPlayer 和 AVPlayerItem


509
00:17:35,126 --> 00:17:36,106
的状态属性


510
00:17:36,906 --> 00:17:39,356
虽然你可以使用


511
00:17:39,356 --> 00:17:39,876
KVO 来观察它们


512
00:17:39,876 --> 00:17:41,766
当它们 fail 时


513
00:17:41,766 --> 00:17:43,156
当属性状态变成 fail 时


514
00:17:43,646 --> 00:17:45,286
在许多情况下 都有一个


515
00:17:45,286 --> 00:17:46,126
简单的恢复办法


516
00:17:46,386 --> 00:17:47,566
检查错误属性


517
00:17:47,916 --> 00:17:49,806
查看媒体服务是否已重置


518
00:17:49,806 --> 00:17:51,986
如果是这样 只需重建你的


519
00:17:51,986 --> 00:17:52,996
播放器 播放项目


520
00:17:52,996 --> 00:17:55,036
你的 AVFoundation 对象引用


521
00:17:55,036 --> 00:17:55,446
并在 PlayerViewController 上


522
00:17:55,446 --> 00:17:56,616
将其设置回去


523
00:17:56,896 --> 00:17:59,976
一切都应该没问题了


524
00:18:00,046 --> 00:18:02,576
此属性为你提供了一个


525
00:18:02,576 --> 00:18:04,356
优化过的视频渲染


526
00:18:04,706 --> 00:18:05,576
当你在进行镜像的时候


527
00:18:06,116 --> 00:18:10,716
当然 始终配置


528
00:18:10,716 --> 00:18:12,026
播放时的音频会话


529
00:18:12,776 --> 00:18:18,056
因此 当我们讨论文本中


530
00:18:18,256 --> 00:18:19,726
嵌入 AVPlayerViewController 时


531
00:18:19,886 --> 00:18:21,446
还需要考虑一些问题


532
00:18:22,266 --> 00:18:25,356
我们已经讨论了
 
00:18:25,356 --> 00:18:28,466
在 iOS 13 中新的


533
00:18:28,466 --> 00:18:31,516
全屏演示状态回调


534
00:18:32,376 --> 00:18:34,236
所以我不会再重复了


535
00:18:34,236 --> 00:18:35,976
但是 我想要提醒的一件事是


536
00:18:35,976 --> 00:18:37,156
如果你过去使用过


537
00:18:37,156 --> 00:18:38,326
AVPlayerViewController


538
00:18:38,326 --> 00:18:41,566
当我们从嵌入式演示


539
00:18:41,896 --> 00:18:42,926
进入全屏时


540
00:18:42,926 --> 00:18:44,246
模态转换风格


541
00:18:44,246 --> 00:18:46,296
为超全屏风格


542
00:18:46,296 --> 00:18:49,056
这意味着你的视图


543
00:18:49,296 --> 00:18:50,746
你正在呈现的视图 不会被移除


544
00:18:50,986 --> 00:18:53,326
如果你的 App 链接到 iOS 13


545
00:18:53,326 --> 00:18:55,206
则现在默认的演示样式


546
00:18:55,206 --> 00:18:57,316
将会是全屏显示


547
00:18:57,316 --> 00:18:58,426
这意味着呈现视图


548
00:18:58,426 --> 00:18:59,416
可能会被移除


549
00:18:59,416 --> 00:19:00,606
这就是我之前谈到的


550
00:19:00,646 --> 00:19:01,876
所有优点了


551
00:19:02,866 --> 00:19:04,566
因此 理想状态下


552
00:19:04,566 --> 00:19:07,216
你可以将此模态呈现风格


553
00:19:07,216 --> 00:19:08,946
定为全屏


554
00:19:09,086 --> 00:19:10,446
但如果你不这样做 也没关系


555
00:19:10,446 --> 00:19:12,126
你仍然可以将它


556
00:19:12,126 --> 00:19:12,696
设置为超全屏


557
00:19:12,976 --> 00:19:14,106
不过我的建议是


558
00:19:14,106 --> 00:19:15,096
最好跟着默认设置走


559
00:19:17,746 --> 00:19:19,036
另一件需要考虑的事情是


560
00:19:19,496 --> 00:19:20,696
当你有一个嵌入式演示


561
00:19:20,826 --> 00:19:23,596
你的视频


562
00:19:23,596 --> 00:19:25,506
你可能想要缩放视频


563
00:19:25,506 --> 00:19:26,946
这样就不会在


564
00:19:26,946 --> 00:19:28,286
顶部或底部出现黑条


565
00:19:28,976 --> 00:19:30,216
你还可能希望将


566
00:19:30,216 --> 00:19:32,926
给视频的播放窗口


567
00:19:32,926 --> 00:19:35,776
设置 cornerCurve


568
00:19:36,486 --> 00:19:38,736
而且 你可能想要


569
00:19:38,736 --> 00:19:40,656
设置视图的背景颜色


570
00:19:41,006 --> 00:19:42,656
你可以在


571
00:19:42,656 --> 00:19:44,106
AVPlayerViewController 的视图中设置


572
00:19:44,106 --> 00:19:45,736
或者赋予视频对齐方式


573
00:19:45,776 --> 00:19:46,806
当它被嵌入文本的时候


574
00:19:47,106 --> 00:19:48,446
我们将把它用于


575
00:19:48,706 --> 00:19:50,326
演示的嵌入部分


576
00:19:51,026 --> 00:19:52,486
如果用户决定全屏显示


577
00:19:52,486 --> 00:19:54,306
那么我们就在那里进行设置


578
00:19:54,306 --> 00:19:56,496
因此 相比之下


579
00:19:56,496 --> 00:19:57,426
如果你只是


580
00:19:57,426 --> 00:19:58,576
全屏呈现 AVPlayerViewController


581
00:19:58,576 --> 00:20:01,006
那么你可以


582
00:20:01,006 --> 00:20:03,676
更改演示嵌入部分的这些属性


583
00:20:03,886 --> 00:20:06,496
完全没问题


584
00:20:08,166 --> 00:20:09,616
我们还有几个属性


585
00:20:10,006 --> 00:20:11,966
这些属性可以


586
00:20:11,966 --> 00:20:14,336
在你有内嵌演示时


587
00:20:14,336 --> 00:20:15,636
提供自适应行为


588
00:20:15,906 --> 00:20:18,266
这样你就可以做一些事情 比如


589
00:20:18,266 --> 00:20:20,006
用户点击一个


590
00:20:20,006 --> 00:20:21,316
大的播放按钮


591
00:20:21,316 --> 00:20:23,166
PlayerViewController 将


592
00:20:23,166 --> 00:20:24,576
PlayerViewController 的内容将


593
00:20:24,576 --> 00:20:26,076
将自动进入全屏


594
00:20:26,806 --> 00:20:29,156
同样地 在视频结束时


595
00:20:29,156 --> 00:20:31,616
它将退出全屏


596
00:20:32,026 --> 00:20:34,696
对我们来说


597
00:20:34,906 --> 00:20:36,066
最好是能代你处理


598
00:20:36,066 --> 00:20:36,386
这些事情


599
00:20:36,486 --> 00:20:37,886
因为例如 假设用户


600
00:20:37,886 --> 00:20:41,476
正拖动到视频的末尾


601
00:20:42,316 --> 00:20:43,176
那么 播放时间将是处在


602
00:20:43,176 --> 00:20:44,776
视频的末尾 但你不想


603
00:20:44,776 --> 00:20:47,106
在那个时候关掉视频


604
00:20:47,106 --> 00:20:48,306
因为用户可能


605
00:20:48,306 --> 00:20:49,006
只是在随便看看


606
00:20:49,276 --> 00:20:50,586
我们会跟踪


607
00:20:50,586 --> 00:20:51,056
用户的行为


608
00:20:51,056 --> 00:20:52,946
只有在合适的时候


609
00:20:53,106 --> 00:20:53,726
我们才会退出


610
00:20:57,046 --> 00:20:58,566
当然了 你总是希望采用


611
00:20:58,756 --> 00:21:01,286
UIViewController 控制 API


612
00:21:01,806 --> 00:21:04,726
它看起来像这样


613
00:21:09,566 --> 00:21:10,786
要记住的另一件事是


614
00:21:10,786 --> 00:21:12,406
如果你有很多


615
00:21:12,406 --> 00:21:13,516
要浏览的视频


616
00:21:14,056 --> 00:21:15,946
你可能会觉得


617
00:21:15,946 --> 00:21:19,196
海报视图是个好主意


618
00:21:19,196 --> 00:21:21,246
这样可以显示视频的一帧画面


619
00:21:21,486 --> 00:21:24,716
而无需把视频全部下载


620
00:21:24,716 --> 00:21:26,556
这可能需要一点时间


621
00:21:27,236 --> 00:21:28,246
你可以使用


622
00:21:28,246 --> 00:21:29,066
AVPlayerViewController 中的


623
00:21:29,066 --> 00:21:30,656
contentOverlayView 来解决


624
00:21:31,086 --> 00:21:33,126
然后你就想知道


625
00:21:33,236 --> 00:21:35,886
什么时候视频


626
00:21:35,886 --> 00:21:37,106
什么时候视频的第一帧准备就绪


627
00:21:37,106 --> 00:21:39,706
这样你就可以删除


628
00:21:39,706 --> 00:21:41,696
刚刚放在叠加视图中的内容


629
00:21:42,966 --> 00:21:43,926
你可以通过


630
00:21:43,926 --> 00:21:45,836
在 AVPlayerViewController 上观察


631
00:21:45,836 --> 00:21:46,816
isReadyForDisplay 来做到这一点


632
00:21:46,816 --> 00:21:48,136
这个属性使你可以通过


633
00:21:48,136 --> 00:21:49,656
KVO 来进行观察


634
00:21:49,656 --> 00:21:51,106
这就是观察时


635
00:21:51,136 --> 00:21:51,836
的代码的样子


636
00:21:52,086 --> 00:21:52,766
你会希望获取


637
00:21:52,766 --> 00:21:53,916
初始值


638
00:21:53,916 --> 00:21:56,276
因为视频的那一帧可能已经被渲染了


639
00:22:00,506 --> 00:22:01,636
最后我想谈一点


640
00:22:01,636 --> 00:22:03,026
有关画中画的内容


641
00:22:03,026 --> 00:22:04,836
将它加到你的 App 中非常容易


642
00:22:04,836 --> 00:22:06,236
AVPlayerViewController 可以


643
00:22:06,266 --> 00:22:08,326
为你解决大部分的麻烦


644
00:22:08,326 --> 00:22:10,876
你必须对 App 进行配置


645
00:22:10,876 --> 00:22:11,526
以支持画中画


646
00:22:11,526 --> 00:22:12,266
它看起来像这样


647
00:22:12,266 --> 00:22:14,566
只需单击 Xcode 中的复选框即可


648
00:22:16,666 --> 00:22:20,066
有一点 无论你使用的是


649
00:22:20,066 --> 00:22:22,186
AVPictureInPictureController 还是


650
00:22:22,186 --> 00:22:23,206
AVPlayerViewController 这都适用


651
00:22:23,556 --> 00:22:26,206
当用户在 iPad 上向上滑动回到桌面


652
00:22:26,456 --> 00:22:29,566
画中画可能会


653
00:22:29,566 --> 00:22:30,636
自动启动


654
00:22:30,636 --> 00:22:33,116
这意味着当你的 App


655
00:22:33,116 --> 00:22:34,876
进入后台时 你不应该


656
00:22:34,876 --> 00:22:37,106
暂停任何正在播放的视频


657
00:22:37,646 --> 00:22:38,606
因为画中画


658
00:22:38,606 --> 00:22:39,066
可能刚刚开始


659
00:22:39,066 --> 00:22:40,276
你不会想暂停


660
00:22:40,276 --> 00:22:42,396
用户可能仍然在观看


661
00:22:42,396 --> 00:22:43,326
的视频


662
00:22:43,686 --> 00:22:45,606
所以 不要暂停


663
00:22:45,976 --> 00:22:48,006
并且 AVFoundation 将为你


664
00:22:48,006 --> 00:22:48,746
解决此问题


665
00:22:49,066 --> 00:22:50,286
但是如果你必须暂停


666
00:22:50,316 --> 00:22:51,806
你起码应该等待


667
00:22:52,176 --> 00:22:53,686
App 的后台状态


668
00:22:54,046 --> 00:22:56,266
App 状态


669
00:22:56,306 --> 00:22:57,526
窗口场景的状态达到后台


670
00:22:57,526 --> 00:22:58,856
来看看你该怎么做


671
00:23:01,556 --> 00:23:02,736
你可以对状态进行跟踪


672
00:23:02,736 --> 00:23:04,946
看看你是在画中画状态中


673
00:23:04,946 --> 00:23:06,036
还是要离开画中画状态


674
00:23:06,036 --> 00:23:09,746
使用 AVPlayerViewControllerDelegate 就可以


675
00:23:11,136 --> 00:23:12,106
而且可以一直切换


676
00:23:12,316 --> 00:23:13,486
画中画的播放


677
00:23:15,666 --> 00:23:16,966
请做好准备 你的视图控件


678
00:23:16,966 --> 00:23:18,576
会在在画中画开始时


679
00:23:18,576 --> 00:23:20,526
关闭


680
00:23:21,056 --> 00:23:22,466
与全屏情况不同


681
00:23:22,466 --> 00:23:23,576
我们将在


682
00:23:23,616 --> 00:23:24,466
画中画状态激活时


683
00:23:24,466 --> 00:23:26,876
阻止 AVPlayerViewController 


684
00:23:27,946 --> 00:23:30,266
释放关闭


685
00:23:30,826 --> 00:23:32,506
但是如果视图控件


686
00:23:32,506 --> 00:23:33,656
被解除 那么当用户


687
00:23:33,656 --> 00:23:35,446
想要返回到 App 时


688
00:23:35,446 --> 00:23:38,356
你将需要恢复 UI


689
00:23:38,356 --> 00:23:40,166
所以 做起来真的不难


690
00:23:40,636 --> 00:23:41,736
这是你要获得的


691
00:23:41,736 --> 00:23:42,516
回调函数


692
00:23:42,516 --> 00:23:43,786
即 AVPlayerViewControllerDelegate


693
00:23:44,086 --> 00:23:45,396
在这里 你所要做的


694
00:23:45,686 --> 00:23:47,526
就是让你的用户界面恢复到


695
00:23:47,526 --> 00:23:49,506
一个你想要的 能运行的状态


696
00:23:49,696 --> 00:23:50,486
在这种情况下 我们


697
00:23:50,566 --> 00:23:51,846
只是再次呈现视图控件而已


698
00:23:51,846 --> 00:23:53,606
然后 当你准备好时


699
00:23:53,606 --> 00:23:54,886
调用 completionHandler


700
00:23:54,886 --> 00:23:56,226
传递给回调函数


701
00:23:56,726 --> 00:23:58,376
让我们知道你已经准备好了


702
00:23:58,376 --> 00:23:59,846
我们将通过动画


703
00:23:59,846 --> 00:24:00,116
回到原位


704
00:24:00,116 --> 00:24:01,316
你需要相当快速地操作


705
00:24:01,316 --> 00:24:02,736
否则


706
00:24:02,736 --> 00:24:03,846
画中画窗口可能


707
00:24:03,846 --> 00:24:05,266
就出问题了


708
00:24:05,506 --> 00:24:07,576
并且你的用户


709
00:24:07,576 --> 00:24:08,126
也看不到画中画功能


710
00:24:08,126 --> 00:24:09,096
他们无法回到


711
00:24:09,096 --> 00:24:11,866
你的 App


712
00:24:13,456 --> 00:24:15,716
那么 以上就是对 iOS 中


713
00:24:15,876 --> 00:24:17,126
AVPlayerViewController 的


714
00:24:17,126 --> 00:24:18,656
最佳实践的新功能简要介绍


715
00:24:18,706 --> 00:24:20,096
在我们的会议网站上


716
00:24:20,096 --> 00:24:21,936
有说明这些概念的


717
00:24:21,936 --> 00:24:23,116
所有示例代码


718
00:24:23,506 --> 00:24:24,756
现在 我想把时间


719
00:24:24,756 --> 00:24:26,786
交给我的同事 Dan Wright


720
00:24:28,516 --> 00:24:31,656
[掌声]


721
00:24:32,156 --> 00:24:33,266
>> 好的


722
00:24:33,806 --> 00:24:35,786
让我们来谈谈 Apple TV 上的


723
00:24:35,786 --> 00:24:36,476
视频播放


724
00:24:40,956 --> 00:24:44,086
在 tvOS 上 AVPlayerViewController


725
00:24:44,086 --> 00:24:45,796
支持全屏交互式播放


726
00:24:45,796 --> 00:24:48,106
带有用于导航 信息 和设置的


727
00:24:48,106 --> 00:24:51,106
标准控件


728
00:24:52,166 --> 00:24:53,376
内置对升级版 Siri


729
00:24:53,376 --> 00:24:54,796
的支持功能


730
00:24:54,796 --> 00:24:55,386
例如 “她说了什么？”


731
00:24:56,116 --> 00:24:57,856
正在播放媒体信息的出版信息


732
00:24:58,456 --> 00:25:00,386
插播式广告


733
00:25:00,846 --> 00:25:02,526
内容摘要等等


734
00:25:04,946 --> 00:25:06,796
那么 tvOS 13 有哪些新东西呢


735
00:25:08,436 --> 00:25:10,806
从去年开始 我们已经升级了


736
00:25:10,806 --> 00:25:12,266
控件的外观


737
00:25:12,836 --> 00:25:14,896
从 tvOS 12.3 开始


738
00:25:14,896 --> 00:25:16,506
引入了精细的精确滑动


739
00:25:17,756 --> 00:25:19,406
今天我们将介绍


740
00:25:19,406 --> 00:25:21,496
自定义交互式叠层


741
00:25:21,496 --> 00:25:24,286
流直播的频道切换


742
00:25:24,286 --> 00:25:25,536
以及对家长控制内容


743
00:25:25,536 --> 00:25:26,976
的自动执行


744
00:25:30,066 --> 00:25:31,586
高精度的滑动让你


745
00:25:31,586 --> 00:25:32,786
可以更轻松地使用 Siri 遥控器


746
00:25:32,786 --> 00:25:34,346
来找到你正在寻找的


747
00:25:34,346 --> 00:25:36,356
视频中的精确时刻


748
00:25:37,966 --> 00:25:39,266
PlayerViewController 一直都支持


749
00:25:39,326 --> 00:25:41,546
在 PlayerViewController 中


750
00:25:41,546 --> 00:25:42,616
进行滑动


751
00:25:42,616 --> 00:25:44,546
可以让你轻松快速地


752
00:25:44,546 --> 00:25:46,166
找到在一大段视频中想要的位置


753
00:25:46,706 --> 00:25:48,766
但是现在 精细滑动可以让你


754
00:25:48,766 --> 00:25:51,566
在试图定位时 更容易找到一个


755
00:25:51,566 --> 00:25:53,746
非常精确的时刻 


756
00:25:53,846 --> 00:25:54,936
哪怕是在一秒的时间长度内找寻


757
00:25:56,046 --> 00:25:57,716
当然信息视图有一个


758
00:25:57,766 --> 00:25:59,336
新的外观来匹配


759
00:25:59,426 --> 00:26:01,966
TV App


760
00:26:03,736 --> 00:26:05,266
自定义交互式叠层


761
00:26:05,536 --> 00:26:07,486
支持 App 控件


762
00:26:08,076 --> 00:26:09,696
通常 自定义叠层


763
00:26:09,696 --> 00:26:10,106
是隐藏起来的


764
00:26:11,606 --> 00:26:13,766
屏幕上的提示会


765
00:26:13,896 --> 00:26:16,346
引导用户向上滑动


766
00:26:16,346 --> 00:26:16,726
以显示叠层


767
00:26:17,336 --> 00:26:19,646
叠层是


768
00:26:19,646 --> 00:26:21,196
完全交互式的 它可以包含


769
00:26:21,196 --> 00:26:23,366
按钮 收藏 或其他任何


770
00:26:23,366 --> 00:26:25,296
你喜欢的


771
00:26:25,296 --> 00:26:27,456
由视图控件定义的交互式元素


772
00:26:28,006 --> 00:26:31,516
然后 对于


773
00:26:31,846 --> 00:26:33,046
持久化的非交互式元素


774
00:26:33,046 --> 00:26:34,626
例如频道的标识


775
00:26:34,626 --> 00:26:35,856
你也应该继续


776
00:26:35,856 --> 00:26:37,753
使用 contentOverlayView


777
00:26:38,286 --> 00:26:41,776
让我们看看自定义叠层


778
00:26:41,776 --> 00:26:42,196
是什么样的


779
00:26:42,816 --> 00:26:46,536
当视频开始时 会在底部


780
00:26:46,536 --> 00:26:48,016
有一个提示 引导他们


781
00:26:48,016 --> 00:26:49,096
去向上滑动 以获取更多信息


782
00:26:49,506 --> 00:26:50,916
当他们向上滑动时 他们会看到


783
00:26:50,916 --> 00:26:51,376
你的叠层


784
00:26:51,446 --> 00:26:53,036
就像那样


785
00:26:53,226 --> 00:26:54,936
他们可以通过向下滑动


786
00:26:54,936 --> 00:26:56,336
或通过单击菜单按钮来解除


787
00:27:01,456 --> 00:27:03,606
这样 你的视图控件就呈现出来了


788
00:27:03,676 --> 00:27:04,596
你将得到所有常见的


789
00:27:04,596 --> 00:27:06,186
UIViewController 通知


790
00:27:06,466 --> 00:27:09,876
我们来处理解除动作和动画


791
00:27:10,176 --> 00:27:11,606
你的用户可以在不同的 App 中


792
00:27:12,116 --> 00:27:13,926
获得始终如一的体验


793
00:27:14,196 --> 00:27:15,676
想要使用它 你只需要


794
00:27:15,896 --> 00:27:17,276
要显示的内容


795
00:27:17,276 --> 00:27:19,116
去定义视图控件即可


796
00:27:19,526 --> 00:27:21,946
并在播放器视图控件上设置


797
00:27:21,946 --> 00:27:23,836
customOverlayViewController 的属性


798
00:27:29,326 --> 00:27:30,856
直播频道切换


799
00:27:32,706 --> 00:27:34,476
频道切换适用于流直播


800
00:27:34,476 --> 00:27:36,466
它支持在多个流直播之间


801
00:27:36,466 --> 00:27:38,196
进行切换


802
00:27:38,196 --> 00:27:39,886
例如 不同的频道


803
00:27:40,416 --> 00:27:43,366
用户进行水平滑动


804
00:27:43,366 --> 00:27:45,336
就可以转到下一个或上一个频道


805
00:27:46,136 --> 00:27:48,926
并且频道的插页式屏幕


806
00:27:48,966 --> 00:27:50,986
会在该频道加载时


807
00:27:51,386 --> 00:27:54,406
提供对频道内容的描述


808
00:27:54,526 --> 00:27:55,986
那么 让我们来看看频道切换


809
00:27:55,986 --> 00:27:56,776
是什么样子的


810
00:27:57,476 --> 00:28:02,036
当用户在频道间


811
00:28:02,036 --> 00:28:03,436
滑动时


812
00:28:03,436 --> 00:28:04,646
频道的插页式屏幕视图就会出现


813
00:28:05,456 --> 00:28:06,616
这里有一个简单的绿色背景


814
00:28:06,616 --> 00:28:08,536
一些文本和


815
00:28:08,536 --> 00:28:09,526
一个加载指示器


816
00:28:09,916 --> 00:28:11,526
这些完全处于你的


817
00:28:11,526 --> 00:28:11,956
掌控之中


818
00:28:11,956 --> 00:28:14,706
你可以把它们做成任何你


819
00:28:14,706 --> 00:28:15,836
喜欢的样子 包括


820
00:28:15,836 --> 00:28:18,446
图片 渐变背景


821
00:28:18,446 --> 00:28:19,596
你自定义的微调器


822
00:28:19,596 --> 00:28:20,606
随你喜欢


823
00:28:21,216 --> 00:28:24,506
最重要的是让用户


824
00:28:24,816 --> 00:28:26,276
清楚自己现在所在的位置


825
00:28:26,276 --> 00:28:26,676
并知道他们要去哪儿


826
00:28:30,046 --> 00:28:31,436
我要补充的另一件事是


827
00:28:31,436 --> 00:28:32,236
这是一个


828
00:28:32,236 --> 00:28:33,206
非交互式屏幕


829
00:28:33,206 --> 00:28:34,866
它的目的就是引导用户


830
00:28:34,866 --> 00:28:35,486
进入下一个频道


831
00:28:35,486 --> 00:28:36,656
所以你不要指望


832
00:28:36,656 --> 00:28:37,356
这里有控件


833
00:28:37,966 --> 00:28:40,366
为支持频道切换


834
00:28:40,656 --> 00:28:41,596
请扩展你的


835
00:28:41,596 --> 00:28:43,166
AVPlayerViewControllerDelegate


836
00:28:43,746 --> 00:28:45,506
以实现 playerViewController


837
00:28:45,506 --> 00:28:47,136
skipToNextChannel 和


838
00:28:47,176 --> 00:28:48,236
skipToPreviousChannel


839
00:28:49,616 --> 00:28:53,326
所有这些方法都是将


840
00:28:53,326 --> 00:28:54,396
播放器视图控件中的内容


841
00:28:54,396 --> 00:28:56,376
替换为新频道的内容


842
00:28:56,936 --> 00:29:01,086
如果你愿意


843
00:29:01,086 --> 00:29:02,196
可以等到内容准备就绪再播放


844
00:29:03,306 --> 00:29:04,926
播放结束后


845
00:29:04,926 --> 00:29:05,696
调用 completion 代码块


846
00:29:06,326 --> 00:29:07,786
如果成功就返回 True


847
00:29:07,786 --> 00:29:09,396
不然就返回 False


848
00:29:10,606 --> 00:29:11,836
但无论你做什么


849
00:29:11,836 --> 00:29:12,926
请确保最终调用 completion 块


850
00:29:12,926 --> 00:29:14,436
因为这样做才会


851
00:29:14,436 --> 00:29:15,856
消除频道的


852
00:29:15,856 --> 00:29:16,756
插页式屏幕


853
00:29:19,846 --> 00:29:21,206
现在还有两种补充方法


854
00:29:21,206 --> 00:29:22,506
nextChannelInterstitialView Controller


855
00:29:22,506 --> 00:29:23,206
以及


856
00:29:23,386 --> 00:29:25,396
previousChannelInterstitialView Controller


857
00:29:25,576 --> 00:29:27,926
这些方法负责提供


858
00:29:27,926 --> 00:29:30,466
在不同频道之间显示的


859
00:29:30,466 --> 00:29:32,266
视图控件


860
00:29:33,476 --> 00:29:36,076
因此 你需要实例化


861
00:29:36,076 --> 00:29:37,176
你的视图控件


862
00:29:37,176 --> 00:29:38,056
如果你有 如果你需要


863
00:29:38,506 --> 00:29:40,386
并用有关新频道的信息


864
00:29:40,386 --> 00:29:41,196
来填充它


865
00:29:42,326 --> 00:29:43,456
然后就返回


866
00:29:43,896 --> 00:29:45,006
在这个例子中 我们


867
00:29:45,006 --> 00:29:46,526
每次都要实例化一个


868
00:29:46,526 --> 00:29:47,626
新的视图控件


869
00:29:47,986 --> 00:29:50,106
但在许多情况下


870
00:29:50,136 --> 00:29:52,086
你可能只需将它


871
00:29:52,086 --> 00:29:53,766
实例化一次 然后重复使用它


872
00:29:58,316 --> 00:30:00,396
tvOS 有内置支持


873
00:30:00,396 --> 00:30:02,056
可使用密码或


874
00:30:02,316 --> 00:30:04,646
通过设备配置文件


875
00:30:04,646 --> 00:30:05,766
限制对内容的访问


876
00:30:06,066 --> 00:30:07,406
设备配置文件通常


877
00:30:07,406 --> 00:30:09,756
用于教室环境


878
00:30:09,756 --> 00:30:11,016
或商业环境


879
00:30:12,066 --> 00:30:14,766
在 tvOS 13 中 AVKit 提供自动支持 


880
00:30:14,766 --> 00:30:16,876
可帮助你的用户


881
00:30:16,876 --> 00:30:18,566
重新获得对


882
00:30:18,566 --> 00:30:19,896
受限制内容的控制


883
00:30:20,506 --> 00:30:23,766
因此 要测试内容限制


884
00:30:23,766 --> 00:30:25,866
进入设置


885
00:30:26,156 --> 00:30:26,976
再进入限制


886
00:30:30,076 --> 00:30:30,676
把它打开


887
00:30:31,316 --> 00:30:33,466
提供并确认密码


888
00:30:36,046 --> 00:30:37,346
然后更改电影或电视节目的


889
00:30:37,346 --> 00:30:41,166
内容分级


890
00:30:42,226 --> 00:30:43,406
在这里我们把它


891
00:30:43,406 --> 00:30:43,976
更改为 PG-13


892
00:30:49,046 --> 00:30:51,436
那么你需要做什么


893
00:30:51,436 --> 00:30:53,036
才能在你的 App 中支持它


894
00:30:53,426 --> 00:30:54,616
最重要的是


895
00:30:54,616 --> 00:30:55,806
你需要在所有的内容中


896
00:30:55,806 --> 00:31:00,466
明确规定媒体内容的评级


897
00:31:00,506 --> 00:31:02,006
如果你的素材不含有这类信息


898
00:31:02,006 --> 00:31:03,226
那你需要使用


899
00:31:03,226 --> 00:31:05,116
AVPlayerItem 的


900
00:31:05,116 --> 00:31:05,996
外部元数据属性


901
00:31:05,996 --> 00:31:06,756
来添加它


902
00:31:07,216 --> 00:31:08,676
而且你会想要使用


903
00:31:08,676 --> 00:31:09,566
iTunes 元数据内容


904
00:31:09,566 --> 00:31:10,646
分级标识符


905
00:31:13,536 --> 00:31:14,446
你需要在播放开始时提供


906
00:31:14,446 --> 00:31:15,956
此评级 


907
00:31:15,956 --> 00:31:18,866
以便 AVKit 能根据用户设置


908
00:31:18,866 --> 00:31:20,886
来判断它


909
00:31:20,886 --> 00:31:22,956
是否属于受限制的内容


910
00:31:24,126 --> 00:31:25,716
而且在必要时


911
00:31:25,716 --> 00:31:26,626
会在屏幕上要求输入密码


912
00:31:30,046 --> 00:31:31,016
现在 如果内容受


913
00:31:31,016 --> 00:31:32,486
密码限制


914
00:31:32,486 --> 00:31:34,446
将提示用户输入密码


915
00:31:36,756 --> 00:31:38,386
但是 如果内容受到设备配置文件


916
00:31:38,386 --> 00:31:39,566
的限制


917
00:31:39,566 --> 00:31:40,936
那它可能就完全不能播放


918
00:31:40,936 --> 00:31:42,206
用户可能没有


919
00:31:42,206 --> 00:31:43,636
别的选项


920
00:31:44,766 --> 00:31:46,676
现在 AVPlayerViewController


921
00:31:46,676 --> 00:31:48,326
将在播放开始时


922
00:31:48,376 --> 00:31:50,286
自动请求访问你的内容


923
00:31:50,836 --> 00:31:52,476
但你可以使用


924
00:31:52,476 --> 00:31:55,576
一个新的 API 请求


925
00:31:55,576 --> 00:31:56,906
播放限制授权


926
00:31:56,906 --> 00:31:57,626
请求更早访问


927
00:32:01,736 --> 00:32:03,416
当然 出现任何类型的失败


928
00:32:03,496 --> 00:32:04,636
例如用户


929
00:32:04,636 --> 00:32:06,346
不知道密码


930
00:32:06,346 --> 00:32:07,176
或者不想输入密码


931
00:32:07,176 --> 00:32:08,946
或者是设备配置文件


932
00:32:08,996 --> 00:32:11,116
禁止访问内容


933
00:32:11,366 --> 00:32:12,616
那么播放器视图控件


934
00:32:12,616 --> 00:32:14,256
将自动被解除


935
00:32:14,736 --> 00:32:17,626
最后如果你有


936
00:32:17,626 --> 00:32:19,266
自定义播放用户界面


937
00:32:19,266 --> 00:32:20,866
你还可以使用


938
00:32:21,146 --> 00:32:23,246
上述 API 请求访问


939
00:32:23,246 --> 00:32:23,946
限制内容


940
00:32:23,946 --> 00:32:27,876
现在让我们来看看


941
00:32:27,876 --> 00:32:29,436
用户在尝试播放受限内容时


942
00:32:29,436 --> 00:32:30,776
会看到什么


943
00:32:31,386 --> 00:32:35,176
现在 视频将进行加载


944
00:32:35,176 --> 00:32:36,236
一旦它准备好播放


945
00:32:36,296 --> 00:32:37,556
并且元数据可用


946
00:32:37,556 --> 00:32:38,996
要求输入密码的屏幕


947
00:32:38,996 --> 00:32:40,596
将立即出现


948
00:32:40,736 --> 00:32:41,856
一旦用户输入密码


949
00:32:41,856 --> 00:32:44,586
密码屏幕


950
00:32:44,586 --> 00:32:45,766
就会被解除


951
00:32:45,766 --> 00:32:46,696
视频开始播放


952
00:32:46,696 --> 00:32:51,836
那么让我们来看看


953
00:32:51,836 --> 00:32:53,186
如何提供媒体内容评级


954
00:32:54,456 --> 00:32:56,106
这些元数据有时是


955
00:32:56,106 --> 00:32:57,086
你的素材的一部分


956
00:32:57,266 --> 00:32:59,146
但通常情况下 并非如此


957
00:32:59,926 --> 00:33:01,146
因此你需要通过 AVPlayerItem 的


958
00:33:01,146 --> 00:33:02,546
外部元数据属性


959
00:33:02,576 --> 00:33:04,146
来提供给它


960
00:33:04,716 --> 00:33:07,766
我们之前的演讲中


961
00:33:07,766 --> 00:33:08,856
已经看到过这段代码


962
00:33:08,856 --> 00:33:10,086
但是我们这里只有一个


963
00:33:10,086 --> 00:33:11,496
辅助函数


964
00:33:11,496 --> 00:33:13,266
它以字符串的形式获取我们的评级


965
00:33:13,566 --> 00:33:15,206
并返回 AVMetadataItem


966
00:33:16,176 --> 00:33:18,236
返回值是该字符串


967
00:33:18,236 --> 00:33:19,706
扩展语言标记设置为 und


968
00:33:19,706 --> 00:33:21,796
代表着未定义的意思


969
00:33:22,056 --> 00:33:23,586
因为它不是任何特定语言


970
00:33:24,656 --> 00:33:26,296
你的标识符是


971
00:33:26,296 --> 00:33:27,706
iTunesMetadataContentRating


972
00:33:28,796 --> 00:33:30,086
最后 一旦我们创建了它


973
00:33:30,156 --> 00:33:31,576
在这个例子里


974
00:33:31,576 --> 00:33:32,906
评级为 PG-13


975
00:33:37,336 --> 00:33:40,306
我们将它添加到播放器项目的


976
00:33:40,306 --> 00:33:43,166
外部元数据属性中


977
00:33:43,246 --> 00:33:45,316
现在 如有必要


978
00:33:45,316 --> 00:33:47,176
AVPlayerViewController 将自动进行提示


979
00:33:47,506 --> 00:33:48,826
但是 假设你想要在


980
00:33:48,826 --> 00:33:51,366
呈现播放器视图控件前


981
00:33:51,366 --> 00:33:53,056
就提早进行提示 


982
00:33:53,056 --> 00:33:54,666
或者可能在更早的内容前提示


983
00:33:55,316 --> 00:33:57,876
你可以使用


984
00:33:57,876 --> 00:33:59,296
AVPlayerItem 中的


985
00:33:59,296 --> 00:34:00,616
requestPlaybackRestrictionsAuthorization


986
00:34:00,616 --> 00:34:01,736
这个 API 来完成操作


987
00:34:02,296 --> 00:34:05,176
当请求完成时


988
00:34:05,176 --> 00:34:06,976
将调用该闭包


989
00:34:06,976 --> 00:34:08,045
以显示该请求结果是成功


990
00:34:08,045 --> 00:34:10,235
还是失败


991
00:34:11,016 --> 00:34:13,266
如果返回结果是失败


992
00:34:13,266 --> 00:34:15,646
则会提供失败原因的相关信息


993
00:34:16,196 --> 00:34:18,176
如果返回结果是成功


994
00:34:18,176 --> 00:34:20,666
则会继续播放


995
00:34:20,775 --> 00:34:22,906
否则你应该取消关闭


996
00:34:23,386 --> 00:34:25,926
并返回菜单屏幕或其他操作


997
00:34:26,306 --> 00:34:27,556
除非用户明确提出要求


998
00:34:27,556 --> 00:34:28,906
否则不要继续尝试


999
00:34:28,906 --> 00:34:30,826
播放内容


1000
00:34:35,166 --> 00:34:38,356
好了 让我们做一个简短的演示


1001
00:34:38,516 --> 00:34:39,446
仔细看看其中的一些应用


1002
00:34:45,646 --> 00:34:47,306
好了 这就是我们的简单示例 App


1003
00:34:49,275 --> 00:34:52,025
对于已经使用过 HLS 进行测试的人来说


1004
00:34:52,025 --> 00:34:52,976
这些视频可能看着很眼熟


1005
00:34:54,926 --> 00:34:55,936
这是向上滑动的效果


1006
00:34:55,936 --> 00:34:57,286
从底部向上滑动 可获得更多提示


1007
00:34:57,376 --> 00:35:01,566
如果向上滑动 就会获得


1008
00:35:02,136 --> 00:35:03,326
自定义叠层


1009
00:35:03,326 --> 00:35:05,376
你能看到 它实际上是有效的


1010
00:35:05,586 --> 00:35:08,846
我还可以向下滑动 它就消失了


1011
00:35:09,376 --> 00:35:10,846
我们还能做什么呢


1012
00:35:12,426 --> 00:35:15,156
好吧 如果我按下并保持手指下压


1013
00:35:15,156 --> 00:35:16,586
我们会看到


1014
00:35:16,586 --> 00:35:18,316
屏幕左侧和右侧的提示


1015
00:35:18,316 --> 00:35:19,726
这些箭头是在提示用户


1016
00:35:19,726 --> 00:35:21,106
可进行频道切换


1017
00:35:21,376 --> 00:35:23,276
如果我只是横向滑动


1018
00:35:23,426 --> 00:35:25,266
看看隔壁在说什么


1019
00:35:26,786 --> 00:35:29,196
>> 采用一些伟大的设计模式


1020
00:35:29,346 --> 00:35:29,876
包括——


1021
00:35:29,876 --> 00:35:30,796
>> 它的底层使用了


1022
00:35:30,796 --> 00:35:32,586
一个列表展示——
 
00:35:33,056 --> 00:35:34,976
>> 在上个月——


1023
00:35:35,476 --> 00:35:36,006
>> 让我们看看


1024
00:35:36,006 --> 00:35:37,476
我们还有什么 是它吗


1025
00:35:37,476 --> 00:35:39,716
哦 这里发生了什么


1026
00:35:41,516 --> 00:35:44,706
[笑声]


1027
00:35:45,206 --> 00:35:51,786
好的 [掌声]


1028
00:35:52,286 --> 00:35:52,616
>> 好了


1029
00:35:52,736 --> 00:35:53,966
这就是我们的简单示例 App


1030
00:35:56,366 --> 00:35:57,066
>> 我在看我自己


1031
00:35:57,066 --> 00:35:58,916
让我们回去 让我们看看 
 
00:35:58,916 --> 00:36:00,826
回到


1032
00:36:01,576 --> 00:36:02,916
>> 这是向上滑动的效果


1033
00:36:02,916 --> 00:36:03,936
从底部向上滑动 可获得更多提示


1034
00:36:05,046 --> 00:36:08,396
如果向上滑动 就会获得


1035
00:36:08,886 --> 00:36:10,516
自定义叠层


1036
00:36:10,516 --> 00:36:10,976
看看它是否真的有效


1037
00:36:11,296 --> 00:36:12,466
>> 让我们暂停


1038
00:36:13,508 --> 00:36:15,508
[笑声]


1039
00:36:18,146 --> 00:36:18,556
好了


1040
00:36:18,556 --> 00:36:20,036
让我们花点时间来谈谈


1041
00:36:20,036 --> 00:36:22,196
tvOS 的一些最佳实践


1042
00:36:23,296 --> 00:36:25,116
你们中的一些人


1043
00:36:25,116 --> 00:36:27,156
已经在你的 App 中


1044
00:36:27,156 --> 00:36:28,276
设计了通过向上滑动显示的控件


1045
00:36:28,276 --> 00:36:30,116
通常 它是 Up Next 列表


1046
00:36:31,776 --> 00:36:32,946
一般来说 你是通过


1047
00:36:32,946 --> 00:36:34,376
在播放器视图或父视图上


1048
00:36:34,376 --> 00:36:36,676
安装自己的自定义向上滑动手势识别器


1049
00:36:36,676 --> 00:36:38,376
来实现此目的


1050
00:36:38,716 --> 00:36:40,516
然后你的视图控件就会出现


1051
00:36:41,086 --> 00:36:41,906
如果你正在这样做


1052
00:36:41,906 --> 00:36:44,056
那么我们希望你能转而使用


1053
00:36:44,056 --> 00:36:46,346
自定义的叠层


1054
00:36:47,366 --> 00:36:49,516
它会带给你


1055
00:36:49,516 --> 00:36:50,906
在未来有更好的兼容性


1056
00:36:50,906 --> 00:36:52,786
这是个暗示


1057
00:36:53,346 --> 00:36:56,086
并为用户在不同的 App 中


1058
00:36:56,086 --> 00:36:58,336
提供更好 更一致的的体验


1059
00:36:58,916 --> 00:37:03,566
如果你在菜单按钮上使用 


1060
00:37:03,566 --> 00:37:05,636
UI 点击手势识别器


1061
00:37:05,636 --> 00:37:08,326
来检测是否解除播放器视图控件


1062
00:37:08,326 --> 00:37:11,236
或者在某些情况下


1063
00:37:11,276 --> 00:37:14,786
提供解除动画


1064
00:37:14,786 --> 00:37:18,106
那你应该选择使用


1065
00:37:18,106 --> 00:37:19,136
代理解除通知


1066
00:37:19,136 --> 00:37:20,476
来取代识别器


1067
00:37:20,786 --> 00:37:22,726
我们在 tvOS 11 中介绍过那些功能


1068
00:37:23,036 --> 00:37:23,926
它们应该为你提供


1069
00:37:23,926 --> 00:37:24,996
所需的所有信息


1070
00:37:25,586 --> 00:37:27,196
这一点非常重要


1071
00:37:27,196 --> 00:37:28,676
因为用户点击菜单按钮


1072
00:37:28,676 --> 00:37:30,426
不再是解除


1073
00:37:30,426 --> 00:37:31,636
播放视图控件


1074
00:37:31,666 --> 00:37:33,176
的唯一办法


1075
00:37:33,566 --> 00:37:35,356
它现在可以自动解除


1076
00:37:39,456 --> 00:37:40,886
我之前说过这事


1077
00:37:40,886 --> 00:37:42,446
但是不应该滥用


1078
00:37:42,446 --> 00:37:44,026
showsPlaybackControls


1079
00:37:44,026 --> 00:37:44,966
来强制立即改变


1080
00:37:44,966 --> 00:37:46,386
控件的可见性


1081
00:37:46,786 --> 00:37:47,306
showsPlaybackControls 的目的是


1082
00:37:47,306 --> 00:37:48,896
对播放器视图控件进行配置


1083
00:37:48,896 --> 00:37:50,936
以表明你是否


1084
00:37:50,936 --> 00:37:52,536
希望用户


1085
00:37:52,536 --> 00:37:54,446
可以访问


1086
00:37:54,446 --> 00:37:56,546
播放控件


1087
00:37:59,786 --> 00:38:00,946
为你所有的内容


1088
00:38:00,946 --> 00:38:01,936
提供媒体内容评级


1089
00:38:02,686 --> 00:38:05,456
当然了 还有 


1090
00:38:05,816 --> 00:38:07,516
对启用家长内容限制的情况进行测试


1091
00:38:08,276 --> 00:38:09,566
大多数人都不会遇到问题


1092
00:38:09,566 --> 00:38:11,216
但你可能会发现


1093
00:38:11,216 --> 00:38:12,296
当出现密码流时


1094
00:38:12,296 --> 00:38:13,456
你正在做的事情


1095
00:38:13,456 --> 00:38:14,696
可能不能正常运行


1096
00:38:14,996 --> 00:38:16,506
例如 如果你在播放开始时


1097
00:38:16,506 --> 00:38:17,966
想显示一个几秒钟的提示


1098
00:38:17,966 --> 00:38:20,056
你肯定不希望密码


1099
00:38:20,056 --> 00:38:21,946
覆盖它


1100
00:38:21,946 --> 00:38:24,026
不然用户将


1101
00:38:24,026 --> 00:38:25,406
无法看到提示


1102
00:38:27,316 --> 00:38:29,476
总而言之


1103
00:38:29,476 --> 00:38:31,506
跨平台采用


1104
00:38:31,506 --> 00:38:32,126
AVPlayerViewController


1105
00:38:32,126 --> 00:38:34,816
你可以以非常低的成本


1106
00:38:34,966 --> 00:38:37,336
获得 iOS 和 tvOS 


1107
00:38:37,336 --> 00:38:37,936
的强大功能


1108
00:38:38,846 --> 00:38:41,216
以及遥控设备和其他功能


1109
00:38:41,216 --> 00:38:43,806
的广泛兼容性


1110
00:38:45,986 --> 00:38:47,536
使用 AVPlayerViewControllerDelegate 通知


1111
00:38:47,536 --> 00:38:49,026
来跟踪


1112
00:38:49,026 --> 00:38:50,456
演示状态


1113
00:38:50,456 --> 00:38:52,556
正如今天在 iOS 上所看到的那样


1114
00:38:52,556 --> 00:38:54,256
处理解除 正如在 tvOS 上


1115
00:38:54,676 --> 00:38:57,656
观察播放器项目状态


1116
00:38:57,656 --> 00:38:58,616
并处理错误


1117
00:39:00,476 --> 00:39:02,696
使用外部元数据


1118
00:39:02,696 --> 00:39:06,626
现在在 iOS 和 tvOS 上均可以使用


1119
00:39:06,626 --> 00:39:08,206
除了我们今天看到的


1120
00:39:08,206 --> 00:39:09,476
用于家长内容限制


1121
00:39:09,476 --> 00:39:11,076
和信息面板的一些用途以外


1122
00:39:11,386 --> 00:39:12,806
外部元数据还可用于


1123
00:39:12,806 --> 00:39:14,106
发布正在播放媒体的信息


1124
00:39:14,486 --> 00:39:15,656
这意味着如果你


1125
00:39:15,656 --> 00:39:16,746
在两个平台上使用外部元数据


1126
00:39:16,746 --> 00:39:18,546
你现在可以删除


1127
00:39:18,546 --> 00:39:20,886
所有正在播放的信息支持


1128
00:39:23,756 --> 00:39:26,426
如果你在向上滑动的操作中


1129
00:39:26,426 --> 00:39:27,966
有自定义叠层 请将其迁移


1130
00:39:28,136 --> 00:39:29,306
抱歉 如果你有向上滑动


1131
00:39:29,306 --> 00:39:31,056
显示叠层的操作


1132
00:39:31,056 --> 00:39:32,306
请转到自定义叠层


1133
00:39:33,106 --> 00:39:34,406
最后 支持家长


1134
00:39:34,406 --> 00:39:35,286
对内容设限


1135
00:39:37,076 --> 00:39:38,706
因此 相关更多信息


1136
00:39:38,706 --> 00:39:39,926
包括这次会议的示例代码


1137
00:39:39,926 --> 00:39:41,856
请访问屏幕上 URL


1138
00:39:41,856 --> 00:39:43,026
我们的会议页面


1139
00:39:43,666 --> 00:39:45,306
请带着你的疑问和代码


1140
00:39:45,306 --> 00:39:47,876
在今天下午 2 点


1141
00:39:47,876 --> 00:39:49,576
前往 AVKit 实验室


1142
00:39:49,576 --> 00:39:51,406
或是 4 点前往 AVFoundation 实验室


1143
00:39:52,116 --> 00:39:53,486
谢谢各位 请享受


1144
00:39:53,486 --> 00:39:53,896
会议的其他内容


1145
00:39:54,516 --> 00:39:57,500
[掌声]

