1
00:00:06,406 --> 00:00:10,544 line:0
（iOS上实施深色模式）


2
00:00:15,549 --> 00:00:16,450 line:-1
早上好


3
00:00:16,984 --> 00:00:19,553 line:-2
欢迎参加
在iOS中应用黑暗模式演讲


4
00:00:19,753 --> 00:00:21,455 line:-2
我是Kurt 我会和Tyler
一起为大家演讲


5
00:00:22,756 --> 00:00:25,459 line:-2
现在 当我们在iOS 13
添加黑暗模式


6
00:00:25,526 --> 00:00:27,361 line:-1
我们看到UI的各个部分


7
00:00:27,427 --> 00:00:30,330 line:-1
让它在新的深色外观中更好看


8
00:00:30,464 --> 00:00:32,031 line:-1
这是iOS的全新设计


9
00:00:32,799 --> 00:00:34,001 line:-1
现在 到你了


10
00:00:34,101 --> 00:00:36,837 line:-2
我们来帮你在你的app中
加入黑暗模式


11
00:00:37,437 --> 00:00:40,774 line:-2
很简单 我们将会在现场演示
一些示例


12
00:00:41,875 --> 00:00:45,212 line:-2
它也是在一个非常灵活和强大的
系统里创建的


13
00:00:45,612 --> 00:00:48,415 line:-2
所以不论你想要你的app
在黑暗模式中是什么样子


14
00:00:48,749 --> 00:00:49,683 line:-1
你都能实现它


15
00:00:51,051 --> 00:00:53,253 line:-1
首先 我们来聊一下黑暗模式的设计


16
00:00:53,654 --> 00:00:55,155 line:-1
现在 我来展示一个示例


17
00:00:56,089 --> 00:00:58,025 line:-1
这是设置 一个很熟悉的


18
00:00:58,792 --> 00:01:02,062 line:-2
你看到的是黑暗模式
一样的app 一样的布局


19
00:01:02,396 --> 00:01:03,564 line:-1
运作方式也相同


20
00:01:03,830 --> 00:01:05,265 line:-1
只是外观不一样


21
00:01:05,933 --> 00:01:10,070 line:-2
我们知道了iOS的设计系统
并为它增加了黑暗模式


22
00:01:10,804 --> 00:01:12,906 line:-1
当我们实现时 我们要考虑三件事


23
00:01:14,041 --> 00:01:16,643 line:-1
第一件 也是最重要的 颜色


24
00:01:17,177 --> 00:01:20,781 line:-2
iOS app传统上硬编码了
它们所有的颜色


25
00:01:20,914 --> 00:01:24,051 line:-1
你为UI的每个部分指定了RGB值


26
00:01:25,252 --> 00:01:26,553 line:-1
现在我们有了黑暗模式


27
00:01:26,620 --> 00:01:28,889 line:-1
几乎所有的颜色都需要改变


28
00:01:29,289 --> 00:01:32,125 line:-1
我们需要管理很多颜色


29
00:01:33,527 --> 00:01:35,796 line:-1
我们使用语义颜色来解决


30
00:01:35,929 --> 00:01:39,233 line:-1
这些颜色都有一个它们代表的名字


31
00:01:39,967 --> 00:01:42,469 line:-2
我们这里的文字标签
使用了颜色“label”


32
00:01:42,769 --> 00:01:44,638 line:-1
那是文字和标签的默认的颜色


33
00:01:45,772 --> 00:01:47,975 line:-2
我们的背景是
“systemGroupedBbackground”


34
00:01:48,041 --> 00:01:50,077 line:-1
那是因为我们在一个分组表视图


35
00:01:50,577 --> 00:01:52,479 line:-1
UI表视图给了我们默认设置


36
00:01:53,881 --> 00:01:56,350 line:-2
最后是这个图标
我们用了“systemBlue”


37
00:01:56,850 --> 00:01:58,252 line:-1
它不是纯粹的蓝色


38
00:01:58,652 --> 00:02:01,221 line:-1
但它被调整来适应剩下的颜色


39
00:02:02,055 --> 00:02:03,490 line:-1
所以 当我们设置UI时


40
00:02:04,024 --> 00:02:07,361 line:-2
我们为每个部分选择了一个合适
的语义颜色


41
00:02:08,794 --> 00:02:11,765 line:-2
当我们切换至浅色模式时
我们还是使用相同的颜色


42
00:02:12,132 --> 00:02:13,901 line:-1
但因为这些颜色是动态的


43
00:02:13,967 --> 00:02:16,503 line:-1
它们在浅色和暗色模式有不同的值


44
00:02:17,538 --> 00:02:21,208 line:-2
最棒的事情是
当你使用语义动态颜色时


45
00:02:21,275 --> 00:02:23,110 line:-1
UIKit会帮你实现


46
00:02:23,644 --> 00:02:25,512 line:-1
你不需要思考你处于哪种模式


47
00:02:25,846 --> 00:02:28,348 line:-1
切换模式时 你不必做任何修改


48
00:02:29,616 --> 00:02:32,419 line:-2
现在 我们的设计系统提供了一个
全新的调色板


49
00:02:32,686 --> 00:02:33,921 line:-1
我来展示一些例子


50
00:02:34,588 --> 00:02:36,456 line:-1
我们这有一些背景颜色


51
00:02:36,523 --> 00:02:37,758 line:-1
它们被设计一起工作


52
00:02:38,592 --> 00:02:41,361 line:-2
“systemBackground”
是默认的背景颜色


53
00:02:41,595 --> 00:02:43,163 line:-1
浅色模式下是纯白色


54
00:02:43,230 --> 00:02:46,033 line:-1
非常熟悉吧 在黑暗模式下纯黑色


55
00:02:47,234 --> 00:02:51,505 line:-2
最上面是
第二和第三级系统背景颜色


56
00:02:51,905 --> 00:02:55,375 line:-2
这些允许你构建你app的
信息层次结构


57
00:02:56,343 --> 00:02:59,847 line:-2
请留意黑暗模式不只是
一个浅色模式的简单翻转


58
00:03:00,013 --> 00:03:00,981 line:-1
它更为精妙


59
00:03:02,216 --> 00:03:04,818 line:-1
我们的文字也使用层次结构的方案


60
00:03:05,385 --> 00:03:07,120 line:-1
有四种层级的文字颜色


61
00:03:07,387 --> 00:03:08,522 line:-1
它们允许你突出


62
00:03:08,589 --> 00:03:11,058 line:-1
哪些元素和其他的最相关


63
00:03:11,925 --> 00:03:15,162 line:-2
比如 第一级颜色可能会被用于
标题之类的地方


64
00:03:15,696 --> 00:03:18,765 line:-1
第二级颜色被用于次标题等等


65
00:03:20,701 --> 00:03:24,071 line:-1
颜色的完整目录在人机界面指南里


66
00:03:24,338 --> 00:03:26,206 line:-2
你能从中知道它们是什么
什么时候使用它们


67
00:03:26,840 --> 00:03:30,244 line:-2
我们提供了很多颜色
但你需要自己实现


68
00:03:30,878 --> 00:03:32,446 line:-1
你可以制作你自己的动态颜色


69
00:03:32,513 --> 00:03:34,147 line:-1
我等会会向你展示如何实现


70
00:03:35,415 --> 00:03:38,719 line:-2
现在 我们来看看我们设计系统的
第二部分材质


71
00:03:39,119 --> 00:03:40,554 line:-1
这是Photos的一个例子


72
00:03:41,288 --> 00:03:43,690 line:-1
材质不仅仅是颜色


73
00:03:44,057 --> 00:03:47,261 line:-1
模糊效果看上去像是背景上面的


74
00:03:47,394 --> 00:03:48,595 line:-1
半透明的材质


75
00:03:49,396 --> 00:03:53,734 line:-1
上面有一个振动穿过了模糊脱颖而出


76
00:03:54,535 --> 00:03:57,171 line:-2
当然 它们在我们的图片上方
看上去很棒


77
00:03:57,771 --> 00:04:00,207 line:-1
它们能在深色和浅色模式下运行


78
00:04:01,975 --> 00:04:03,710 line:-1
设计系统的第三个部分是


79
00:04:03,944 --> 00:04:07,447 line:-2
由UIKit的提供的
内置视图和控制器


80
00:04:08,081 --> 00:04:11,018 line:-1
它们使用了相同的颜色和材质


81
00:04:11,185 --> 00:04:13,420 line:-1
所有的物件都被很好的适配了


82
00:04:15,656 --> 00:04:17,324 line:-2
所以 当你为你app
设计黑暗模式时


83
00:04:17,423 --> 00:04:19,259 line:-1
在你写代码之前


84
00:04:19,860 --> 00:04:24,097 line:-2
先学习设计系统和了解如何
利用它提供的功能


85
00:04:24,998 --> 00:04:27,768 line:-1
接下来 弄清楚你想要自定义的内容


86
00:04:28,502 --> 00:04:30,637 line:-1
iOS app各有不同


87
00:04:30,804 --> 00:04:32,673 line:-1
我们不能为你提供你需要的一切


88
00:04:33,073 --> 00:04:35,409 line:-1
但是我们提供给你需要的资源


89
00:04:37,311 --> 00:04:38,946 line:-1
那么 现在你想好了你的设计


90
00:04:39,012 --> 00:04:41,048 line:-1
我们来聊一下如何如何实现它


91
00:04:42,516 --> 00:04:45,686 line:-2
当你使用iOS 13的
SDK来创建


92
00:04:46,186 --> 00:04:48,555 line:-1
你app的浅色和深色外观


93
00:04:49,122 --> 00:04:53,327 line:-2
切换设备至黑暗模式
运行你的app 看看它是什么样子


94
00:04:53,760 --> 00:04:56,530 line:-1
你首先会发现你有事情要做了


95
00:04:57,130 --> 00:04:58,999 line:-1
我们不能自动为你实现


96
00:04:59,499 --> 00:05:01,502 line:-1
最后 让你的app在黑暗模式下


97
00:05:01,568 --> 00:05:02,803 line:-1
界面的外观好看与否


98
00:05:02,870 --> 00:05:05,272 line:-1
是你自己的责任


99
00:05:06,240 --> 00:05:08,742 line:-1
你需要做的第一件事是颜色


100
00:05:10,010 --> 00:05:13,480 line:-1
在过去 每个UI颜色只有一个值


101
00:05:13,647 --> 00:05:14,781 line:-1
它永远是一样的


102
00:05:15,549 --> 00:05:16,984 line:-1
现在它们能设置为动态的


103
00:05:17,918 --> 00:05:21,121 line:-2
在浅色和黑暗模式下颜色
会有不同的值


104
00:05:22,022 --> 00:05:24,424 line:-2
当你在视图上设置
其中一个动态的颜色时


105
00:05:24,491 --> 00:05:27,361 line:-1
比如 一个背景颜色或文字颜色


106
00:05:27,794 --> 00:05:30,330 line:-1
UIKit会自动使用正确的值


107
00:05:30,697 --> 00:05:32,666 line:-1
当模式改变时会更新


108
00:05:33,467 --> 00:05:35,102 line:-1
所以 你只需设置颜色一次


109
00:05:35,936 --> 00:05:39,373 line:-2
如果你熟悉macOS的黑暗模式
这就是NSColor如何工作的


110
00:05:39,439 --> 00:05:41,441 line:-1
我们会遵循一样的模式


111
00:05:42,976 --> 00:05:45,379 line:-2
所以 我们开始吧
我们在一个app里实现黑暗模式


112
00:05:45,612 --> 00:05:47,047 line:-1
Tyler会向大家演示一个例子


113
00:05:55,088 --> 00:05:55,989 line:-1
谢谢Kurt


114
00:05:58,725 --> 00:06:00,794 line:-1
我们有一个最开始在iOS 12上


115
00:06:00,861 --> 00:06:03,096 line:-1
开发的一个简单的示例app


116
00:06:03,263 --> 00:06:05,832 line:-1
我们想要向你展示在iOS 13的


117
00:06:05,899 --> 00:06:08,669 line:-1
黑暗模式下我们做的修改


118
00:06:10,504 --> 00:06:12,739 line:-2
这也许会给你一些
在自己的app里的类型


119
00:06:12,806 --> 00:06:14,308 line:-1
改动的建议


120
00:06:14,908 --> 00:06:17,010 line:-1
我们的app在右侧的模拟器运行


121
00:06:17,711 --> 00:06:18,579 line:-1
它非常简单


122
00:06:19,046 --> 00:06:22,449 line:-2
所以 我们为什么不切换到黑暗模式
看看它是什么样子


123
00:06:23,350 --> 00:06:26,954 line:-2
我们可以使用Xcode的
新的环境重写功能


124
00:06:27,187 --> 00:06:28,589 line:-1
那么 我们在Xcode中运行


125
00:06:28,956 --> 00:06:32,059 line:-1
我们可以点击切换按钮


126
00:06:32,125 --> 00:06:33,460 line:-1
切换至深色界面


127
00:06:33,927 --> 00:06:36,630 line:-2
你可能注意到
我们的app立刻做出了反应


128
00:06:36,697 --> 00:06:37,664 line:-1
它转背为黑暗模式了


129
00:06:38,665 --> 00:06:40,300 line:-1
现在 你可能注意到


130
00:06:40,367 --> 00:06:42,903 line:-1
比如 屏幕底部的标签栏改变了


131
00:06:43,437 --> 00:06:45,839 line:-2
那是因为我们使用了UIKit
标准的标签栏


132
00:06:45,906 --> 00:06:47,207 line:-1
所以我们免费获得了一切


133
00:06:48,008 --> 00:06:50,811 line:-2
但是我们的app颜色
并没有变得很深


134
00:06:50,878 --> 00:06:52,346 line:-1
那是因为我们还有其他事情要做


135
00:06:52,880 --> 00:06:54,014 line:-2
那么 我们为何不切回到
Storyboard


136
00:06:54,381 --> 00:06:57,317 line:-1
看看我的UI是如何被创建的


137
00:06:58,785 --> 00:07:00,554 line:-1
这里是我们app的主界面


138
00:07:01,355 --> 00:07:02,956 line:-1
我们应该做的第一件事是看看


139
00:07:03,023 --> 00:07:04,591 line:-1
为什么我们的这个白色背景


140
00:07:04,658 --> 00:07:05,726 line:-1
在一切物件的后面


141
00:07:06,793 --> 00:07:09,897 line:-2
我们能在Storyboard
选择这个视图


142
00:07:10,297 --> 00:07:12,332 line:-1
如果你查看右侧的属性检查器


143
00:07:12,399 --> 00:07:14,768 line:-1
你能发现你在设置一个硬编码的白色


144
00:07:15,235 --> 00:07:17,070 line:-1
之前它可能有效


145
00:07:17,304 --> 00:07:20,307 line:-2
但我们现在想要切换至使用
动态颜色的其中一个


146
00:07:20,374 --> 00:07:21,275 line:-1
Kurt前面提到过


147
00:07:21,775 --> 00:07:24,545 line:-2
那么 系统背景颜色是一个
很好的选择


148
00:07:25,179 --> 00:07:27,915 line:-2
你能在这个新列表上找到所有的
系统颜色


149
00:07:28,081 --> 00:07:29,449 line:-1
我们选择系统背景


150
00:07:30,217 --> 00:07:32,186 line:-1
操作后什么也没有改变


151
00:07:32,252 --> 00:07:35,422 line:-2
那是因为浅色模式下
系统背景颜色还是白色


152
00:07:35,989 --> 00:07:38,425 line:-2
但是我们能做的是
在Storyboard编辑器


153
00:07:38,492 --> 00:07:41,929 line:-2
切换我们的预览视图来看看
黑暗模式下是什么样子


154
00:07:42,396 --> 00:07:43,230 line:-1
所以 如果我们这样做


155
00:07:44,164 --> 00:07:47,734 line:-1
我们现在能在深色背景颜色下的样子


156
00:07:49,269 --> 00:07:51,705 line:-2
但是 我们的文字不见了
发生了什么？


157
00:07:52,873 --> 00:07:55,576 line:-2
因为我们的黑色文字
被绘制在了黑色背景上


158
00:07:56,276 --> 00:07:58,712 line:-2
那么 我们需要来看这里
我们可以选择


159
00:07:58,779 --> 00:08:00,380 line:-1
我们从标题标签开始


160
00:08:01,281 --> 00:08:02,583 line:-1
我们看到右侧


161
00:08:02,649 --> 00:08:06,587 line:-1
文字也被这个配置硬编码为黑色颜色


162
00:08:07,020 --> 00:08:09,790 line:-2
那么 再一次 我们需要切换至
动态颜色中的其中一个


163
00:08:10,390 --> 00:08:13,861 line:-2
这种情况下 我们可以选择一个
很棒的标签颜色


164
00:08:15,195 --> 00:08:16,897 line:-1
那会在黑暗模式中显示白色


165
00:08:18,131 --> 00:08:19,800 line:-1
类似地 我们选择我们的文字视图


166
00:08:20,501 --> 00:08:23,370 line:-2
它也被设置为黑色了
所以我们需要更新它


167
00:08:26,440 --> 00:08:27,641 line:-1
所以 现在我们已经做出了这些改变


168
00:08:27,708 --> 00:08:29,209 line:-1
关于如何在模拟器运行


169
00:08:29,276 --> 00:08:30,944 line:-1
以及物件将如何呈现


170
00:08:33,847 --> 00:08:35,649 line:-2
这是在浅色模式下运行
的我们的app


171
00:08:36,350 --> 00:08:38,519 line:-1
我们将再一次回到环境覆盖


172
00:08:38,818 --> 00:08:40,020 line:-1
将它转变为深色


173
00:08:41,621 --> 00:08:43,323 line:-1
现在我们看到了更多的更新


174
00:08:43,590 --> 00:08:44,892 line:-1
它看上去很棒


175
00:08:45,626 --> 00:08:47,094 line:-1
但如果我们要进一步优化呢？


176
00:08:47,761 --> 00:08:49,763 line:-1
上面是一张星星图片


177
00:08:49,830 --> 00:08:50,797 line:-1
那是我们app的标志


178
00:08:51,131 --> 00:08:54,668 line:-2
我们想要在黑暗模式下
自定义一个不同的颜色


179
00:08:55,769 --> 00:08:57,337 line:-1
这不难


180
00:08:57,771 --> 00:09:00,874 line:-2
我们在Storyboard
选择图片


181
00:09:01,241 --> 00:09:02,442 line:-1
你会看到这是一个图片视图


182
00:09:02,509 --> 00:09:05,412 line:-2
它配置了
来自我们资产目录的一张图片


183
00:09:05,979 --> 00:09:08,448 line:-1
这张图片被作为一张模版图片来渲染


184
00:09:08,515 --> 00:09:11,151 line:-2
它意味着任何出现在图片视图上的
颜色


185
00:09:11,718 --> 00:09:13,187 line:-1
都会给图片着色


186
00:09:13,720 --> 00:09:16,323 line:-2
那么 我们来用这个自定义的
我们已经在


187
00:09:16,390 --> 00:09:18,258 line:-1
资产目录定义过的图标颜色来着色


188
00:09:18,725 --> 00:09:22,029 line:-1
我们点击这个小箭头跳转到该颜色


189
00:09:22,663 --> 00:09:23,730 line:-1
来看如何设置它


190
00:09:24,531 --> 00:09:27,167 line:-1
这就是那个颜色 它是自定义的绿色


191
00:09:27,835 --> 00:09:30,304 line:-2
如果我们想要为黑暗模式
添加一个不同的外观


192
00:09:30,604 --> 00:09:33,473 line:-1
现在我们可以打开一个新的槽


193
00:09:33,540 --> 00:09:35,576 line:-1
指定深色外观


194
00:09:36,643 --> 00:09:37,477 line:-1
只要我们完成


195
00:09:37,744 --> 00:09:39,847 line:-1
我们就能选择深色外观改变它


196
00:09:39,913 --> 00:09:43,217 line:-1
一个很棒的黄色或者类似的


197
00:09:44,184 --> 00:09:47,020 line:-1
现在我们有一个颜色设置来自动


198
00:09:47,087 --> 00:09:48,989 line:-1
在浅色和深色两种外观中转换


199
00:09:50,023 --> 00:09:52,492 line:-2
如果我保存 然后回到
我们的Storyboard


200
00:09:54,428 --> 00:09:58,665 line:-2
我们看到当我们在预览图中切换
浅色和深色


201
00:09:59,266 --> 00:10:01,502 line:-1
它自动更新了 很棒


202
00:10:06,974 --> 00:10:07,808 line:-1
但还有更多


203
00:10:08,342 --> 00:10:10,644 line:-1
如果我们想要更新背景图片呢？


204
00:10:10,744 --> 00:10:13,280 line:-2
现在它是一张好看的白天热带海边
风景图片


205
00:10:13,480 --> 00:10:17,184 line:-1
如果我们要将它在黑暗模式中


206
00:10:17,518 --> 00:10:18,986 line:-1
换成一张日落的暗色风格的图片？


207
00:10:19,686 --> 00:10:20,821 line:-1
我们选择哪个图片视图


208
00:10:20,888 --> 00:10:23,323 line:-1
步骤和改变颜色的方式非常相似


209
00:10:23,724 --> 00:10:25,058 line:-1
这里的图片视图


210
00:10:25,125 --> 00:10:27,861 line:-1
配置了我们的资产目录的标题图片


211
00:10:27,928 --> 00:10:29,963 line:-1
我们点击箭头直接跳转到那


212
00:10:31,298 --> 00:10:32,399 line:-1
这就是图片被设置的地方


213
00:10:33,033 --> 00:10:36,103 line:-2
就像你之前看到的颜色一样
它们几乎一样


214
00:10:36,170 --> 00:10:39,273 line:-1
你能为深色外观打开一个新的槽


215
00:10:39,506 --> 00:10:45,179 line:-2
接着 我们要做的只是拿到日落图片
将它拖进来


216
00:10:46,013 --> 00:10:48,148 line:-1
保存 我们来运行一下


217
00:10:48,215 --> 00:10:49,950 line:-1
看看现在在模拟器是什么样子


218
00:10:53,287 --> 00:10:55,489 line:-1
那么 这是浅色模式 没有任何改变


219
00:10:55,556 --> 00:10:57,925 line:-2
这是我们开始的地方
在所有改变之前


220
00:10:58,292 --> 00:11:01,428 line:-2
但只要用环境覆盖
切换到深色


221
00:11:01,962 --> 00:11:06,200 line:-2
现在屏幕上的所有物件都更新了
来支持黑暗模式


222
00:11:10,838 --> 00:11:13,240 line:-1
所以你看到的最酷的事情是


223
00:11:13,774 --> 00:11:15,542 line:-1
使用了所有的动态颜色


224
00:11:15,609 --> 00:11:17,845 line:-1
和利用了这些动态图片


225
00:11:17,911 --> 00:11:19,847 line:-1
以及在支持目录自定义了颜色


226
00:11:20,147 --> 00:11:23,517 line:-2
我们不用写任何代码就能使用
黑暗模式


227
00:11:24,051 --> 00:11:25,786 line:-1
这就是利用Xcode和UIKit


228
00:11:25,853 --> 00:11:29,556 line:-1
为你提供的基础设施的好处


229
00:11:30,324 --> 00:11:33,994 line:-2
你也能在你app的启动
Storyboard做出这些变动


230
00:11:34,061 --> 00:11:36,763 line:-1
在你的app启动时支持黑暗模式


231
00:11:38,298 --> 00:11:41,602 line:-2
那么 现在我们来看一下
我们app的另一个屏幕


232
00:11:42,870 --> 00:11:44,171 line:-1
如果你点击了解更多按钮


233
00:11:44,238 --> 00:11:48,742 line:-2
我们在这个新的卡片样式
展示的一个视图控制器


234
00:11:49,343 --> 00:11:51,712 line:-1
我们也想在这里支持黑暗模式


235
00:11:52,412 --> 00:11:54,615 line:-1
有趣的是 在下半部分


236
00:11:54,681 --> 00:11:57,451 line:-1
你能看到我们利用了材料的优势


237
00:11:57,718 --> 00:12:00,220 line:-1
所以 有一个模糊覆盖了背景图片


238
00:12:00,387 --> 00:12:02,856 line:-1
接下来 上面有一个突显的标题


239
00:12:03,457 --> 00:12:06,193 line:-1
有请Kurt回来为大家继续讲解


240
00:12:06,260 --> 00:12:08,128 line:-1
如何使用这些视觉效果


241
00:12:08,395 --> 00:12:10,631 line:-1
来自动更新黑暗模式


242
00:12:14,468 --> 00:12:15,369 line:-1
谢谢Tyler


243
00:12:18,906 --> 00:12:21,441 line:-2
那么 我来给大家展示一些
材料的例子


244
00:12:21,942 --> 00:12:23,243 line:-1
这是一个新的模糊效果


245
00:12:24,011 --> 00:12:28,115 line:-1
这是厚 正常 薄和极薄样式


246
00:12:28,382 --> 00:12:30,884 line:-2
当然 这些样式能同时在浅色
和黑暗模式下运作


247
00:12:31,618 --> 00:12:32,786 line:-1
现在 我们来看如何使用它们


248
00:12:33,787 --> 00:12:36,223 line:-2
在我们的app中
我的背景有一些视图


249
00:12:36,623 --> 00:12:38,525 line:-1
我想在最上面模糊它们


250
00:12:39,159 --> 00:12:41,929 line:-2
第一件我要做的是创建一个
UIBlur效果


251
00:12:42,362 --> 00:12:43,797 line:-1
我们指定一个样式


252
00:12:44,097 --> 00:12:46,099 line:-1
在当前状况下 我会使用系统的材料


253
00:12:46,166 --> 00:12:47,601 line:-1
这是一个好的默认选择


254
00:12:48,569 --> 00:12:52,906 line:-2
接下来 我们使用这个效果
创建一个UIVisual效果视图


255
00:12:53,874 --> 00:12:56,343 line:-1
我们要保证它的尺寸和位置合适


256
00:12:56,710 --> 00:12:59,513 line:-2
接着我们把这个视觉效果
视图放入我们的视图层级中


257
00:13:00,714 --> 00:13:02,749 line:-1
你看 它模糊了下面所有的物件


258
00:13:02,950 --> 00:13:03,784 line:-1
非常简单


259
00:13:05,385 --> 00:13:08,455 line:-2
现在 在模糊效果上面
你能添加突显内容了


260
00:13:08,822 --> 00:13:11,792 line:-1
突出效果穿过了一些背景材料


261
00:13:12,659 --> 00:13:15,462 line:-1
以前 只有一种突显效果


262
00:13:15,529 --> 00:13:16,830 line:-1
但现在有好多种了


263
00:13:17,231 --> 00:13:18,866 line:-1
这是为文字设计的四种样式


264
00:13:19,399 --> 00:13:24,471 line:-2
其中三种样式是更大的覆盖区域
一种是为细的分割线设计的


265
00:13:25,138 --> 00:13:26,840 line:-2
当然 它们能在浅色
和黑暗模式下运行


266
00:13:28,242 --> 00:13:29,843 line:-1
那么 我们来看如何实现突显效果


267
00:13:30,677 --> 00:13:33,146 line:-2
现在 突显效果始终
添加在模糊效果之上


268
00:13:33,213 --> 00:13:35,382 line:-1
和之前开始设置的方式一样


269
00:13:36,350 --> 00:13:39,620 line:-2
我们来创建一个突显效果
我们指定一个样式


270
00:13:40,153 --> 00:13:43,156 line:-2
在当前状况下 我使用填充
因为我要展示一个大的填充区域


271
00:13:44,258 --> 00:13:46,493 line:-1
请留意 当你创建一个突显效果时


272
00:13:46,560 --> 00:13:48,495 line:-1
你给了模糊效果一个参考


273
00:13:48,629 --> 00:13:50,197 line:-1
两者协同工作


274
00:13:51,598 --> 00:13:54,468 line:-2
为了展示突显效果 我们创建了
另一个视觉效果视图


275
00:13:55,169 --> 00:13:57,404 line:-1
接下来我们将它加到模糊效果里面


276
00:13:57,871 --> 00:13:59,173 line:-1
现在 这里有一些不同


277
00:13:59,239 --> 00:14:03,877 line:-2
我们不在视觉效果视图上直接添加
子视图


278
00:14:04,111 --> 00:14:06,180 line:-1
取代的 我们穿过它的内容视图


279
00:14:07,514 --> 00:14:09,816 line:-1
现在我们添加这个突显视图


280
00:14:10,317 --> 00:14:12,019 line:-1
我获取到内容视图


281
00:14:12,452 --> 00:14:14,488 line:-1
接下来 我添加会突显的视图


282
00:14:14,555 --> 00:14:15,756 line:-1
你会看到效果


283
00:14:16,490 --> 00:14:19,726 line:-2
现在的情况是 我们的视图的
背景颜色不透明


284
00:14:20,194 --> 00:14:23,530 line:-2
但取代了它正常的颜色
你看到的是突显效果


285
00:14:24,164 --> 00:14:25,866 line:-1
那是因为这个突显样式的


286
00:14:26,366 --> 00:14:29,503 line:-2
颜色被忽视了
只有阿尔法值被使用了


287
00:14:30,404 --> 00:14:33,674 line:-2
那么 再次有请Tyler来完成
在我们的示例app中添加材料


288
00:14:45,252 --> 00:14:48,055 line:-1
好的 我们回到了解更多的屏幕


289
00:14:48,121 --> 00:14:51,925 line:-2
我们看到的这个屏幕和
上一个屏幕的区别


290
00:14:52,125 --> 00:14:54,695 line:-1
在于这一个完全是由代码创建的


291
00:14:55,495 --> 00:14:57,431 line:-1
我们现在看我们的视图控制器


292
00:14:57,497 --> 00:15:00,367 line:-2
你能看到所有的一切都在这个
loadView方法里面


293
00:15:00,834 --> 00:15:01,902 line:-1
在我们开始之前


294
00:15:01,969 --> 00:15:04,738 line:-2
我们先切换到黑暗模式看一下
是什么样子


295
00:15:05,939 --> 00:15:08,342 line:-1
我们找到环境覆盖


296
00:15:08,475 --> 00:15:10,911 line:-1
切换到深色 你可能看到


297
00:15:10,978 --> 00:15:12,646 line:-1
有些物件改变了


298
00:15:12,746 --> 00:15:14,948 line:-1
我们的导航栏自动变了


299
00:15:15,015 --> 00:15:16,283 line:-1
因为它来自UIKit


300
00:15:16,850 --> 00:15:19,820 line:-1
我们动态的自定义颜色


301
00:15:19,887 --> 00:15:21,622 line:-1
以及自定义图片也变了


302
00:15:21,755 --> 00:15:23,423 line:-1
它和我们之前更新过的一样


303
00:15:23,490 --> 00:15:24,992 line:-1
这些已经运行正确了


304
00:15:25,325 --> 00:15:27,594 line:-2
但当然 你能看到我们的
背景还是白色


305
00:15:27,895 --> 00:15:30,197 line:-1
这些材料在黑暗模式下


306
00:15:30,264 --> 00:15:31,632 line:-1
看上去还不太对


307
00:15:31,698 --> 00:15:32,766 line:-1
所以 我们来做一些改动


308
00:15:34,034 --> 00:15:35,802 line:-2
下面 我们来看一下这些是
如何被创建的


309
00:15:36,503 --> 00:15:39,907 line:-2
我们首先要在背景中
设置这个视图


310
00:15:39,973 --> 00:15:41,575 line:-1
这是白色来源的地方


311
00:15:41,842 --> 00:15:43,143 line:-2
就像你在Storyboard中
看到的一样


312
00:15:43,377 --> 00:15:46,480 line:-2
我们需要切换使用一个
新的系统背景颜色


313
00:15:46,747 --> 00:15:49,349 line:-2
像之前做过的
我们再来选择系统背景


314
00:15:50,817 --> 00:15:53,253 line:-1
接下来 我们设置星星图片


315
00:15:53,320 --> 00:15:55,622 line:-1
接下来 使用我们的资产目录颜色


316
00:15:55,689 --> 00:15:56,924 line:-1
所以这里不必做修改


317
00:15:58,292 --> 00:16:00,527 line:-1
这是你看到的了解更多标签


318
00:16:00,594 --> 00:16:02,062 line:-1
屏幕的标题


319
00:16:02,129 --> 00:16:03,263 line:-1
我们需要做一下改动


320
00:16:03,330 --> 00:16:06,133 line:-1
因为我们在这里将黑色硬编码了


321
00:16:06,700 --> 00:16:09,169 line:-2
我们切回到其他物件
比如标签


322
00:16:11,538 --> 00:16:13,207 line:-1
现在 我们看到的下半段


323
00:16:13,273 --> 00:16:16,677 line:-1
是处于黑色中的图片视图


324
00:16:17,578 --> 00:16:18,512 line:-1
就在这


325
00:16:18,946 --> 00:16:20,547 line:-1
在图片视图的上层


326
00:16:20,848 --> 00:16:23,684 line:-1
是一个模糊效果的视觉效果视图


327
00:16:24,518 --> 00:16:26,553 line:-1
那么 那是这个薄样式的模糊


328
00:16:27,354 --> 00:16:29,990 line:-2
接着 在上面
我们有另一个突显效果的


329
00:16:30,057 --> 00:16:31,658 line:-1
视觉效果视图


330
00:16:32,426 --> 00:16:33,293 line:-1
在这里


331
00:16:33,760 --> 00:16:37,364 line:-1
最后 在内容视图的突显视图里面


332
00:16:37,431 --> 00:16:38,732 line:-1
我们有标签


333
00:16:39,733 --> 00:16:42,336 line:-2
所以 我们需要做出更新这些材料
的改变


334
00:16:42,636 --> 00:16:45,472 line:-1
首先 切换到动态模糊效果


335
00:16:45,539 --> 00:16:48,041 line:-1
这个薄效果并不是动态的


336
00:16:48,108 --> 00:16:50,177 line:-2
当我们切换至黑暗模式
它不会为我们更新


337
00:16:50,844 --> 00:16:54,147 line:-1
所以 我们要利用iOS 13的


338
00:16:54,448 --> 00:16:55,782 line:-1
全新系统材料调色板


339
00:16:56,283 --> 00:17:00,454 line:-2
好选择 因为这个特殊用途的
系统薄材料


340
00:17:00,521 --> 00:17:02,356 line:-1
它看去和我们之前做过的很类似


341
00:17:03,257 --> 00:17:05,526 line:-1
接着 我们也想要利用新系统突显


342
00:17:05,826 --> 00:17:08,328 line:-1
效果样式更新我们的突显效果


343
00:17:08,595 --> 00:17:11,598 line:-2
这些突显样式现在
出现在了一个很棒的层级


344
00:17:11,698 --> 00:17:14,300 line:-1
所以 我们能添加一个样式参数


345
00:17:14,701 --> 00:17:16,936 line:-1
在当前情况 它是一种二级内容


346
00:17:17,003 --> 00:17:20,240 line:-1
所以我们能选择二级标签样式


347
00:17:20,907 --> 00:17:24,877 line:-2
做了这些改动
我们来运行看一下效果


348
00:17:26,246 --> 00:17:27,513 line:-1
我们打开展


349
00:17:28,348 --> 00:17:29,683 line:-1
现在我们处于浅色模式


350
00:17:29,750 --> 00:17:31,585 line:-1
和我们之前看到的几乎一样


351
00:17:32,719 --> 00:17:34,254 line:-1
但我们现在切换至黑暗模式


352
00:17:35,422 --> 00:17:39,893 line:-2
看吧 所有物件都更新为美观的
新的深色材料


353
00:17:44,698 --> 00:17:47,534 line:-2
这里要指出的一点是虽然我们
这次写了一些代码


354
00:17:47,935 --> 00:17:48,869 line:-1
这没什么错


355
00:17:49,236 --> 00:17:51,071 line:-1
我们实际上并不需要写一些代码


356
00:17:51,138 --> 00:17:53,540 line:-1
来显式检查我们所处的模式


357
00:17:53,740 --> 00:17:57,010 line:-2
或处理浅色到黑暗模式
转换的变化等等


358
00:17:57,845 --> 00:17:59,780 line:-1
这也是利用你app中的


359
00:17:59,913 --> 00:18:03,750 line:-1
这些动态系统颜色和材料的优势


360
00:18:04,418 --> 00:18:05,485 line:-1
我将舞台交给Kurt


361
00:18:05,552 --> 00:18:08,288 line:-2
他会向你解释
这个场景背后的是如何工作的


362
00:18:12,492 --> 00:18:13,327 line:-1
谢谢


363
00:18:16,463 --> 00:18:19,233 line:-2
那么 这里有一些你可能
没留意到的微妙的变化


364
00:18:19,833 --> 00:18:23,270 line:-2
我们使用系统背景颜色
作为我们app中主要的背景


365
00:18:23,337 --> 00:18:24,271 line:-1
它是黑色


366
00:18:24,705 --> 00:18:27,307 line:-2
接着 我们在展示视图中
再次使用了它


367
00:18:27,875 --> 00:18:30,811 line:-2
如果你支持查看
你能看到它是浅色调的灰色


368
00:18:31,945 --> 00:18:35,582 line:-2
那是因为黑暗模式的设计
有两种不同的级别


369
00:18:36,016 --> 00:18:38,318 line:-1
当视图填充了整个屏幕的边缘


370
00:18:38,385 --> 00:18:39,953 line:-1
我们称之为基本级别


371
00:18:40,654 --> 00:18:43,490 line:-2
接下来 当内容在一个
单独的层级出现时


372
00:18:43,857 --> 00:18:45,392 line:-1
我们称之为进阶级别


373
00:18:46,159 --> 00:18:49,162 line:-2
所以 在黑暗模式
系统提供的背景颜色


374
00:18:49,229 --> 00:18:51,698 line:-1
在进阶级别的颜色值更浅


375
00:18:51,932 --> 00:18:54,601 line:-2
这帮助我们从下面的黑色背景
区分它们


376
00:18:55,369 --> 00:18:57,271 line:-1
但是前景颜色不会改变


377
00:18:58,205 --> 00:19:01,108 line:-2
现在在iPhone上 就像你
在这看到的 展示时会出现


378
00:19:01,875 --> 00:19:05,579 line:-2
在iPad上 当app在多任务
分割视图中也会出现


379
00:19:05,712 --> 00:19:07,080 line:-1
所以它不会填充整个屏幕


380
00:19:08,549 --> 00:19:10,851 line:-2
我们已经知道实现黑暗模式的
重要事项了


381
00:19:12,519 --> 00:19:14,821 line:-1
我们都看到物件就这样工作了


382
00:19:14,888 --> 00:19:15,856 line:-1
它是自动的


383
00:19:16,190 --> 00:19:19,826 line:-2
那么 我们来深入了解动态颜色
和图片是如何工作的


384
00:19:20,093 --> 00:19:23,197 line:-2
这会帮你全面灵活的
使用好这个功能


385
00:19:24,431 --> 00:19:27,835 line:-2
我们已经看到动态颜色自动地
改变的它们的外观


386
00:19:28,101 --> 00:19:30,604 line:-2
但是颜色如何知道它是浅色
还是深色的？


387
00:19:31,405 --> 00:19:33,073 line:-1
特征集合能帮助实现


388
00:19:33,407 --> 00:19:36,977 line:-2
所以 你app的每个视图和
视图控制器都有一个特征集合


389
00:19:37,644 --> 00:19:41,181 line:-1
它帮助确认视图的外观


390
00:19:41,782 --> 00:19:44,151 line:-2
当前状况下 我们所有的视图
都有相同的特征集合


391
00:19:44,751 --> 00:19:48,488 line:-2
风格为手机设计 在手机上运行
而非iPad或CarPlay车载


392
00:19:49,356 --> 00:19:52,259 line:-2
用户界面的样式是黑色 因为我们
处于黑暗模式


393
00:19:52,759 --> 00:19:55,863 line:-2
用户界面是基本级别
因为我们处于全屏


394
00:19:56,797 --> 00:19:59,433 line:-2
所以 如果你想要
确定使用哪种外观


395
00:19:59,499 --> 00:20:00,801 line:-1
使用特征集合


396
00:20:00,868 --> 00:20:03,837 line:-1
查看用户界面样式和其他特征


397
00:20:05,672 --> 00:20:08,742 line:-2
现在 使用特征集合解决了
动态颜色


398
00:20:08,909 --> 00:20:12,412 line:-2
所以 它是一个动态颜色和一个
特征集合的结合


399
00:20:12,646 --> 00:20:14,581 line:-1
来确认最后的颜色


400
00:20:15,349 --> 00:20:16,817 line:-1
通常情况下这会自动发生


401
00:20:16,884 --> 00:20:20,387 line:-2
但如果你需要自己来确定颜色
你可以自己来做


402
00:20:21,221 --> 00:20:22,723 line:-1
假如我们有一个动态颜色


403
00:20:23,090 --> 00:20:25,058 line:-2
我们从一个视图那获取了
一个特征集合


404
00:20:25,993 --> 00:20:27,427 line:-1
如果我们想要确认那个颜色


405
00:20:27,494 --> 00:20:31,999 line:-2
我们只要使用特征集合和
动态颜色来决定颜色


406
00:20:32,232 --> 00:20:35,903 line:-1
它会返回一个确定的非动态的颜色


407
00:20:37,037 --> 00:20:38,839 line:-1
所以 调用任何颜色都是安全的


408
00:20:38,906 --> 00:20:41,642 line:-2
如果那个颜色不是动态的
它就会返回自己


409
00:20:42,976 --> 00:20:45,412 line:-1
你也能自定义动态颜色


410
00:20:45,712 --> 00:20:47,648 line:-1
我们在资产目录展示了如何操作


411
00:20:47,714 --> 00:20:49,316 line:-1
但是你也能在代码中实现


412
00:20:50,417 --> 00:20:55,022 line:-2
使用一个闭包来初始化一个颜色
参数是一个特征集合


413
00:20:55,789 --> 00:20:58,058 line:-1
接着我们的闭包会返回另一个颜色


414
00:20:58,692 --> 00:21:01,628 line:-2
所以 每次这个动态颜色
都需要被指定


415
00:21:01,695 --> 00:21:04,965 line:-1
那个闭包会被调用合适的特征集合


416
00:21:05,599 --> 00:21:08,035 line:-1
在闭包内 你能使用特征集合


417
00:21:08,235 --> 00:21:10,137 line:-1
来确定返回另一个颜色


418
00:21:10,771 --> 00:21:13,440 line:-1
这个例子实现了我们刚才看到的图表


419
00:21:15,209 --> 00:21:16,143 line:-1
另一个问题是


420
00:21:16,343 --> 00:21:18,312 line:-1
你可能会质疑动态颜色


421
00:21:18,378 --> 00:21:20,380 line:-1
能直接被用于其他颜色


422
00:21:20,814 --> 00:21:22,449 line:-1
它们是如何被自动指定的？


423
00:21:23,250 --> 00:21:26,587 line:-2
如果我有一个动态颜色
我要向它询问RGB组成


424
00:21:27,020 --> 00:21:28,222 line:-1
它会返回一个结果


425
00:21:28,589 --> 00:21:30,557 line:-2
如果我的颜色是黑色
我会得到000


426
00:21:31,291 --> 00:21:34,061 line:-2
当我问它时
我不用通过一个特征集合


427
00:21:34,394 --> 00:21:35,329 line:-1
那它是如何知道的呢？


428
00:21:36,830 --> 00:21:39,833 line:-2
是这样的 在UITrait Collection里
有一个新的属性叫做current


429
00:21:40,234 --> 00:21:42,236 line:-1
UIKit会为你设置它


430
00:21:43,136 --> 00:21:46,540 line:-2
使用当前特征集合
来指定颜色


431
00:21:47,307 --> 00:21:49,543 line:-1
再一次 我们遵循Mac一样的样式


432
00:21:49,710 --> 00:21:52,646 line:-2
这和NSAppearance.current
是一样的概念


433
00:21:54,047 --> 00:21:56,383 line:-2
现在 UIKit为你设置了
当前特征集合


434
00:21:56,450 --> 00:21:57,551 line:-1
当它调用确定的方法


435
00:21:58,051 --> 00:21:58,919 line:-1
这是一个例子


436
00:21:59,386 --> 00:22:02,623 line:-2
我有一个UIView的子类
我重写了它的draw方法


437
00:22:02,723 --> 00:22:04,424 line:-1
那么 这个视图会完成它所有的绘制


438
00:22:06,293 --> 00:22:07,928 line:-1
在我调用这个方法之前


439
00:22:08,328 --> 00:22:10,864 line:-1
UIKit会为视图特征集合设置


440
00:22:10,931 --> 00:22:12,432 line:-1
当前特征集合


441
00:22:13,100 --> 00:22:16,970 line:-2
在这段代码里面
当一个动态颜色需要被指定时


442
00:22:17,304 --> 00:22:19,106 line:-1
它会使用视图特征集合


443
00:22:20,307 --> 00:22:22,075 line:-1
事实上 当模式改变时


444
00:22:22,142 --> 00:22:24,511 line:-2
UIKit知道你重写了
draw方法


445
00:22:24,811 --> 00:22:27,781 line:-2
所以它会自动在你的视图
调用需要展示方法


446
00:22:27,881 --> 00:22:29,883 line:-1
用新的颜色再次绘制一遍


447
00:22:31,251 --> 00:22:33,654 line:-2
UIKit也为你设置当前
特征集合


448
00:22:33,720 --> 00:22:35,455 line:-1
在它调用其他一些方法之前


449
00:22:36,223 --> 00:22:41,895 line:-2
我是…视图的子类 视图控制器和
展示控制器 解释绘制


450
00:22:42,896 --> 00:22:45,933 line:-2
但UIKit也在布局的时候
设置当前特征集合


451
00:22:46,567 --> 00:22:49,603 line:-2
所以 在你的视图子类中重写
子视图布局


452
00:22:49,870 --> 00:22:52,072 line:-1
接着添加指定动态颜色的代码


453
00:22:52,673 --> 00:22:55,576 line:-2
当模式改变时
设置需要布局会被调用


454
00:22:55,742 --> 00:22:56,810 line:-1
布局会再次改变


455
00:22:57,477 --> 00:22:59,279 line:-1
这包含在视图控制器和展示控制器


456
00:22:59,346 --> 00:23:01,682 line:-1
相关的调用


457
00:23:03,350 --> 00:23:07,120 line:-2
最后 所有的这三种物件
当一个特征改变时


458
00:23:07,354 --> 00:23:08,422 line:-1
获得traitCollectionDidChange


459
00:23:08,589 --> 00:23:11,792 line:-2
视图会得到tintColorDidChange
当浅色改变时


460
00:23:12,259 --> 00:23:13,594 line:-1
所以 这些方法的内部


461
00:23:13,660 --> 00:23:16,396 line:-2
可以立刻使用动态颜色是
很方便的


462
00:23:17,631 --> 00:23:19,600 line:-1
现在 你要记住这些方法外的


463
00:23:20,467 --> 00:23:21,702 line:-1
重要的一点


464
00:23:21,768 --> 00:23:25,873 line:-2
当前的特征集合不能被保证
有任何特殊值


465
00:23:26,440 --> 00:23:30,010 line:-2
所以如果你需要在这些方法外部
制定一个动态颜色


466
00:23:30,077 --> 00:23:31,278 line:-1
你需要管理它


467
00:23:31,845 --> 00:23:33,714 line:-1
这是为什么你需要这么做的一个例子


468
00:23:35,015 --> 00:23:38,519 line:-2
低级别的类比如
CA Laye和CG Color


469
00:23:38,852 --> 00:23:41,622 line:-2
无法理解动态颜色
它是一个UIKit的概念


470
00:23:42,623 --> 00:23:45,759 line:-2
所以现在 我们创建一个层级
接着设置它的边界颜色


471
00:23:46,426 --> 00:23:49,596 line:-2
那让一个CG Color
无法成为动态


472
00:23:50,497 --> 00:23:54,801 line:-2
所以 在UIKit动态颜色调用
CG Color需要指定它


473
00:23:55,569 --> 00:23:58,405 line:-2
现在 我们想象一下
我们不在我之前提到的这些方法里


474
00:23:58,472 --> 00:24:01,675 line:-2
这意味着我们自己需要负责管理
这个过程


475
00:24:02,309 --> 00:24:04,011 line:-2
我们需要的第一个物件是一个
特征集合


476
00:24:04,378 --> 00:24:05,612 line:-1
我们会从一个视图获得它


477
00:24:06,446 --> 00:24:08,315 line:-1
现在我们需要使用那个特征集合


478
00:24:08,382 --> 00:24:09,816 line:-1
我会通过三种方式实现它


479
00:24:10,684 --> 00:24:12,519 line:-1
第一种方式我们之前已经看到过


480
00:24:12,853 --> 00:24:16,557 line:-1
使用特征集合来让颜色指定它自己


481
00:24:17,457 --> 00:24:19,693 line:-2
现在如果你只有一种颜色是可以
这么做的


482
00:24:19,893 --> 00:24:21,695 line:-2
但是如果你有多种颜色时
会发生诡异的状况


483
00:24:22,029 --> 00:24:23,964 line:-1
你必须每次都记得这么做


484
00:24:24,631 --> 00:24:25,866 line:-1
第二种方法要简单一点


485
00:24:26,533 --> 00:24:30,003 line:-2
直接在特征集合调用
performAsCurrent


486
00:24:30,804 --> 00:24:33,707 line:-2
那让特征集合成为了
当前特征集合


487
00:24:34,107 --> 00:24:36,710 line:-1
接下来它在你提供的闭包中执行代码


488
00:24:37,444 --> 00:24:39,680 line:-1
因为我们在那个闭包中指定了颜色


489
00:24:39,746 --> 00:24:40,981 line:-1
你得到了正确的值


490
00:24:42,549 --> 00:24:46,587 line:-2
最后 第三种方法
直接设置当前特征集合


491
00:24:47,354 --> 00:24:50,090 line:-2
这看上去有一点可怕
但它绝对是安全的


492
00:24:50,190 --> 00:24:52,659 line:-1
它是轻量级的 没有其他负面影响


493
00:24:53,193 --> 00:24:55,696 line:-1
它甚至可以安全地在后台的线程完成


494
00:24:55,929 --> 00:24:58,832 line:-1
它只会影响你当前运行的线程


495
00:24:59,266 --> 00:25:00,868 line:-1
所以它不会影响你的主线程


496
00:25:01,935 --> 00:25:02,903 line:-1
如果你将要使用这个方法


497
00:25:02,970 --> 00:25:05,472 line:-1
最好保存当前特征集合


498
00:25:05,539 --> 00:25:08,709 line:-2
为了防止有其他代码使用它
你接下来要在后面归还它


499
00:25:09,476 --> 00:25:11,745 line:-2
请注意
current为你实现的功能


500
00:25:11,812 --> 00:25:13,080 line:-1
它做了完全一样的事情


501
00:25:14,448 --> 00:25:16,283 line:-1
所以 如果你做了这些事情


502
00:25:16,350 --> 00:25:17,684 line:-1
你也会想知道


503
00:25:17,918 --> 00:25:20,354 line:-1
当动态颜色需要再一次被指定时


504
00:25:21,121 --> 00:25:23,357 line:-1
它通常发生在特征改变时


505
00:25:23,891 --> 00:25:26,760 line:-2
当特征改变时
traitCollectionDidChange会被调用


506
00:25:27,561 --> 00:25:30,364 line:-2
但不是所有的特征改变都会
影响到颜色


507
00:25:30,697 --> 00:25:33,233 line:-1
如果用户界面样式由浅色变为深色


508
00:25:33,400 --> 00:25:34,902 line:-1
那会显著的影响颜色


509
00:25:35,302 --> 00:25:38,805 line:-2
但是当一些改变比如当你app的
尺寸改变 一个尺寸类改变了


510
00:25:39,106 --> 00:25:40,407 line:-1
它不会影响颜色


511
00:25:41,208 --> 00:25:43,243 line:-1
那么 使用这个方法最好是


512
00:25:43,544 --> 00:25:47,381 line:-2
有不同的颜色外观来查看
是否相关的特征变化了


513
00:25:48,081 --> 00:25:50,717 line:-2
如果它是 接下来你需要再一次
指定这些动态颜色


514
00:25:52,619 --> 00:25:54,388 line:-1
所以 最后 我们来聊一下图片


515
00:25:54,922 --> 00:25:58,725 line:-2
如你所见 你可以在资产目录里创建
动态图片


516
00:25:59,359 --> 00:26:02,029 line:-2
当你使用UIImage视图
来展现这些图片中的其中一个时


517
00:26:02,396 --> 00:26:06,567 line:-2
它使用它自己的特征集合来决定
展示哪张图片


518
00:26:07,868 --> 00:26:10,103 line:-1
现在UIImage视图完成了工作


519
00:26:10,571 --> 00:26:11,805 line:-1
与UIColor不同


520
00:26:12,139 --> 00:26:15,042 line:-2
UIImage不会关注
当前的特征集合


521
00:26:15,943 --> 00:26:18,679 line:-2
所以 我们推荐大多数情况下使用
UIImage视图


522
00:26:19,413 --> 00:26:22,149 line:-2
但如果你需要自己指定颜色
你可以做到


523
00:26:23,250 --> 00:26:26,286 line:-2
提供一张图片
询问它的图片资产


524
00:26:26,486 --> 00:26:29,356 line:-1
那是所有不同图片的变量集合


525
00:26:31,024 --> 00:26:35,362 line:-2
接下来 询问符合一张符合特定
特征集合的的图片


526
00:26:36,830 --> 00:26:38,398 line:-1
你也能使用图片资产


527
00:26:38,465 --> 00:26:41,502 line:-1
在运行时注册新的变量


528
00:26:41,902 --> 00:26:43,237 line:-1
如果你自己绘制你的图片


529
00:26:43,303 --> 00:26:45,806 line:-1
你可以为浅色和黑暗模式添加变量


530
00:26:46,440 --> 00:26:47,941 line:-1
在图片视图添加它就好


531
00:26:48,141 --> 00:26:49,710 line:-1
它会自动展示正确的那个


532
00:26:50,844 --> 00:26:53,747 line:-2
当适配黑暗模式时 我们来聊一下
我们需要留意的一些事情


533
00:26:54,147 --> 00:26:55,048 line:-1
有请Tyler


534
00:27:03,223 --> 00:27:04,191 line:-1
谢谢Kurt


535
00:27:04,658 --> 00:27:05,859 line:-1
我们用几分钟时间来回忆下


536
00:27:05,926 --> 00:27:08,795 line:-1
特征集合时如何工作的


537
00:27:08,862 --> 00:27:12,533 line:-2
因为如你所见
它们在黑暗模式中至关重要


538
00:27:13,467 --> 00:27:15,802 line:-1
最重要的事情是在你整个app


539
00:27:15,869 --> 00:27:18,605 line:-1
记住特征集合中不止一个


540
00:27:19,640 --> 00:27:23,343 line:-2
特征集合实际上贯穿了
你整个app的层级


541
00:27:23,844 --> 00:27:26,280 line:-1
从屏幕的根级别开始


542
00:27:26,847 --> 00:27:30,317 line:-2
到窗口视图
这是今年iOS 13的新功能


543
00:27:30,651 --> 00:27:32,085 line:-1
从这里到窗口


544
00:27:33,320 --> 00:27:36,557 line:-2
在这一点上 特征开始进入
你app中任意的展示页面


545
00:27:36,757 --> 00:27:39,526 line:-1
接下来 是展示页面的视图控制器


546
00:27:40,894 --> 00:27:43,530 line:-1
最后 特征串联至你每一个的


547
00:27:43,597 --> 00:27:45,666 line:-1
视图控制器中视图层级


548
00:27:46,633 --> 00:27:47,701 line:-1
因为这个层级设计


549
00:27:47,768 --> 00:27:49,603 line:-1
你可以一直使用指定的视图


550
00:27:49,670 --> 00:27:53,040 line:-1
或视图管理器的特征集合


551
00:27:54,374 --> 00:27:56,043 line:-1
现在 当一个特征值改变时


552
00:27:56,310 --> 00:27:58,478 line:-2
你可以获得在你app中
所有的物件的


553
00:27:58,545 --> 00:28:00,848 line:-1
traitCollectionDidChange


554
00:28:00,914 --> 00:28:02,082 line:-1
当它们收到改变时


555
00:28:02,950 --> 00:28:05,419 line:-1
如果系统黑暗模式设置改变了 比如


556
00:28:05,786 --> 00:28:08,355 line:-1
你会看到特征改变马上穿过了


557
00:28:09,523 --> 00:28:12,259 line:-1
但我想深入聊一下特征改变


558
00:28:12,392 --> 00:28:15,662 line:-2
因为今年我们在iOS 13
新引入了一些功能


559
00:28:16,163 --> 00:28:18,432 line:-1
我们来放大下半部分的示意图


560
00:28:18,498 --> 00:28:20,634 line:-1
通过一个例子来了解什么改变了


561
00:28:22,503 --> 00:28:25,506 line:-2
那么 我们想要添加这个视图到
视图层级中


562
00:28:25,572 --> 00:28:26,807 line:-1
它会成为上面视图控制器中的


563
00:28:26,874 --> 00:28:28,709 line:-1
视图


564
00:28:30,377 --> 00:28:32,913 line:-1
首先 我们会创建这个视图


565
00:28:33,881 --> 00:28:35,582 line:-1
现在 当一个视图初始化后


566
00:28:35,782 --> 00:28:38,785 line:-1
它还没被添加至这个特征层级中


567
00:28:39,486 --> 00:28:42,289 line:-2
所以 当视图被创建
在iOS 13中


568
00:28:42,456 --> 00:28:46,827 line:-2
UIKit会预测这个视图
最终会在哪里


569
00:28:47,861 --> 00:28:51,398 line:-1
基于预测的目的地


570
00:28:51,465 --> 00:28:53,700 line:-1
从一开始就将视图的特征集合植入


571
00:28:54,801 --> 00:28:58,939 line:-2
现在我们添加这个视图 然后
非常酷[笑声]


572
00:29:01,542 --> 00:29:03,744 line:-2
那么 现在我们将这个视图
加入至层级中


573
00:29:04,811 --> 00:29:07,147 line:-1
我们先调用子视图


574
00:29:07,881 --> 00:29:08,916 line:-1
它移动至这里


575
00:29:09,483 --> 00:29:11,218 line:-1
只要视图被添加了


576
00:29:11,285 --> 00:29:14,988 line:-2
它会从它父辈的特征环境
继承它实际的特征


577
00:29:15,055 --> 00:29:16,757 line:-1
现在它继承的是上面的视图控制器


578
00:29:17,791 --> 00:29:19,893 line:-1
但是现在 因为特征集合在


579
00:29:19,960 --> 00:29:21,995 line:-1
这之前被预测了


580
00:29:22,362 --> 00:29:24,464 line:-2
当这个视图移动至这个
视图控制器和视图层级时


581
00:29:24,565 --> 00:29:27,534 line:-1
没有一个特征发生了变化


582
00:29:28,335 --> 00:29:31,004 line:-2
所以 你看到的是iOS13
的一些新变化


583
00:29:31,605 --> 00:29:35,576 line:-2
总结一下 特征现在
在初始化时被预测


584
00:29:36,910 --> 00:29:38,111 line:-1
视图控制器和视图都


585
00:29:38,178 --> 00:29:40,614 line:-1
会收到一个完整了前面的


586
00:29:40,681 --> 00:29:42,149 line:-1
特征视图 这非常有用


587
00:29:42,449 --> 00:29:45,385 line:-2
只有这些原始的特征改变时
traitCollectionDidChange


588
00:29:45,552 --> 00:29:47,588 line:-1
之后才会被调用


589
00:29:48,522 --> 00:29:51,525 line:-2
所以 当你更新iOS 13中
你已有的app时


590
00:29:52,326 --> 00:29:54,628 line:-2
留意下你已有的
traitCollectionDidChange


591
00:29:54,695 --> 00:29:57,064 line:-1
方法里的代码


592
00:29:57,464 --> 00:29:59,132 line:-1
在一个特征改变


593
00:29:59,299 --> 00:30:01,568 line:-1
你将它移入层级时


594
00:30:01,635 --> 00:30:02,903 line:-1
它可能使用的是旧方法


595
00:30:04,238 --> 00:30:05,906 line:-2
现在 为了在iOS 13中
更容易看到


596
00:30:05,973 --> 00:30:08,675 line:-1
一些特征值的变化


597
00:30:09,109 --> 00:30:11,645 line:-1
我们今年增加了一些新的调试功能


598
00:30:11,979 --> 00:30:13,747 line:-1
你可以启用这个启动参数


599
00:30:13,981 --> 00:30:17,184 line:-2
它会立刻告知你
traitCollectionDidChange


600
00:30:17,484 --> 00:30:19,720 line:-1
被调用的时机和变动的细节


601
00:30:19,786 --> 00:30:21,555 line:-1
它非常酷 你可以尝试一下


602
00:30:22,890 --> 00:30:24,558 line:-1
现在 当你更新完你的代码


603
00:30:24,825 --> 00:30:26,960 line:-1
或增加了使用特征的新代码


604
00:30:27,694 --> 00:30:29,963 line:-1
最好的实践就是等待布局


605
00:30:30,264 --> 00:30:33,400 line:-1
从视图或视图控制器获取特征集合


606
00:30:33,634 --> 00:30:34,968 line:-1
在此基础上开始工作


607
00:30:35,969 --> 00:30:38,939 line:-2
在布局出现之前 特征一直处于
更新状态


608
00:30:39,239 --> 00:30:42,176 line:-2
如果你从这些方法中获取到了
特征集合


609
00:30:42,342 --> 00:30:45,579 line:-1
你可以确信它不会再被预测了


610
00:30:45,646 --> 00:30:49,082 line:-1
它会反映它从父辈中继承的实际的值


611
00:30:50,584 --> 00:30:53,220 line:-2
只要记住如果你在代码中使用了
任意的这些布局方法


612
00:30:53,487 --> 00:30:56,256 line:-1
它们能在视图可见时被调用


613
00:30:56,823 --> 00:30:58,725 line:-2
任何时候有物件要调用
需要布局


614
00:30:58,992 --> 00:31:03,197 line:-1
请确保你没有重复处理它


615
00:31:04,731 --> 00:31:08,135 line:-2
这就是你使用特征集合时
需要注意的点


616
00:31:08,368 --> 00:31:12,072 line:-1
但我们也能在我们的app中


617
00:31:12,139 --> 00:31:13,273 line:-1
修改这些特征集合


618
00:31:14,474 --> 00:31:16,643 line:-1
这是你可能需要这么做的一个例子


619
00:31:17,644 --> 00:31:19,913 line:-1
这是我们的了解更多屏幕


620
00:31:19,980 --> 00:31:22,649 line:-1
展示给你的app一直是深色的


621
00:31:22,916 --> 00:31:25,385 line:-2
甚至我们app的剩余部分
都是浅色的设计


622
00:31:26,119 --> 00:31:29,156 line:-1
我们可以利用特征层级来实现它


623
00:31:30,591 --> 00:31:32,226 line:-2
一般情况下 这个示意图展示的
我们的app的


624
00:31:32,926 --> 00:31:34,661 line:-1
系统是浅色模式的


625
00:31:34,962 --> 00:31:37,264 line:-1
所有的物件都有浅色用户界面样式


626
00:31:37,331 --> 00:31:38,398 line:-1
就像你看到的这个


627
00:31:39,466 --> 00:31:41,034 line:-1
但我们只想要


628
00:31:41,101 --> 00:31:43,403 line:-1
在右下角的这个视图控制器


629
00:31:43,470 --> 00:31:45,272 line:-1
在它那边的一切都暗下去


630
00:31:46,039 --> 00:31:50,277 line:-2
我们可以通过重写
深色用户界面样式特征


631
00:31:50,944 --> 00:31:53,580 line:-2
现在视图控制器内部的物件
都会是深色的了


632
00:31:53,981 --> 00:31:56,817 line:-2
甚至是你app的剩余部分
或你的系统运行的还是浅色模式时


633
00:31:57,718 --> 00:31:59,219 line:-1
那么 你要如何重写呢？


634
00:32:00,420 --> 00:32:04,157 line:-2
我们今年在iOS 13上提供了
一些新的API 简化了实现步骤


635
00:32:04,925 --> 00:32:07,261 line:-1
这些是视图控制器和视图的新属性


636
00:32:07,327 --> 00:32:10,130 line:-2
这样你就能设置你想要的
用户界面样式


637
00:32:10,397 --> 00:32:13,734 line:-2
它会给它内部和子类提供所有的
需要的物件


638
00:32:14,835 --> 00:32:17,704 line:-2
现在 需要时 你要尽可能
使用这个视图控制器属性


639
00:32:18,138 --> 00:32:21,909 line:-2
这个视图只应该
在当你想要改变某个特定物件时


640
00:32:22,009 --> 00:32:24,111 line:-2
如果你没有一个视图控制器时的
情况下被使用


641
00:32:24,511 --> 00:32:26,914 line:-2
如果你使用那个视图属性
会有一些报错


642
00:32:26,980 --> 00:32:29,082 line:-1
所以使用时请阅读文档


643
00:32:30,250 --> 00:32:33,921 line:-2
最后 如果你的整个app需要一直
处于浅色或深色


644
00:32:34,154 --> 00:32:37,291 line:-2
你可以设置Info.plist的
一个关键字来简化操作


645
00:32:39,326 --> 00:32:42,462 line:-2
你也可以使用一些
已有的API来重写特征


646
00:32:43,497 --> 00:32:44,798 line:-1
这会让你重写一个视图控制器或


647
00:32:44,865 --> 00:32:46,967 line:-1
展示控制器的任意的特征


648
00:32:47,301 --> 00:32:49,236 line:-1
关键是记住当你使用它时


649
00:32:49,303 --> 00:32:51,672 line:-1
你重写的特征集合


650
00:32:51,872 --> 00:32:53,574 line:-1
应该只包含


651
00:32:53,640 --> 00:32:56,243 line:-1
你想重写的特定特征的值


652
00:32:56,777 --> 00:32:59,313 line:-1
不要改动其他不确定的特征


653
00:32:59,546 --> 00:33:00,414 line:-1
不要改动它们


654
00:33:00,614 --> 00:33:02,950 line:-1
这样UIKit就会自动为这些


655
00:33:03,016 --> 00:33:05,452 line:-1
特征填充通常的继承的值


656
00:33:06,486 --> 00:33:07,955 line:-1
那就是你需要知道的如何在


657
00:33:08,021 --> 00:33:10,791 line:-1
iOS 13中成功使用特征集合


658
00:33:12,125 --> 00:33:15,596 line:-2
我们来聊一下我们今年更新的
其他的一些API


659
00:33:15,863 --> 00:33:17,264 line:-1
当你更新你的app至黑暗模式时


660
00:33:17,331 --> 00:33:19,700 line:-1
你需要留意的其他事情


661
00:33:20,267 --> 00:33:22,035 line:-1
我们从状态栏开始


662
00:33:23,504 --> 00:33:27,241 line:-2
iOS 13之前 我们有两种
状态栏样式


663
00:33:27,574 --> 00:33:30,277 line:-1
默认样式和浅色内容


664
00:33:31,979 --> 00:33:35,415 line:-2
在iOS 13上
我们有了新的深色内容样式


665
00:33:35,916 --> 00:33:39,219 line:-1
它几乎是取代了之前默认的位置


666
00:33:39,686 --> 00:33:43,991 line:-2
我们将默认改变成一种
自动样式切换模式


667
00:33:45,259 --> 00:33:48,195 line:-1
现在 自动切换基于控制状态栏的


668
00:33:48,262 --> 00:33:51,231 line:-1
视图控制器的用户界面样式


669
00:33:51,532 --> 00:33:55,802 line:-2
一直以来 你能在视图控制器重写
一个特定的偏好状态栏样式


670
00:33:55,869 --> 00:33:58,906 line:-1
返回一个你想要的特定样式


671
00:34:00,174 --> 00:34:01,775 line:-1
最后 它不会在这展示


672
00:34:01,909 --> 00:34:05,946 line:-2
但请留意 我们也更新了
UIScroll视图指示符风格


673
00:34:06,180 --> 00:34:08,282 line:-1
来更适配这种风格


674
00:34:09,783 --> 00:34:12,553 line:-1
接下来 我们来聊一下活动的指示符


675
00:34:13,187 --> 00:34:16,422 line:-2
在iOS 13 我们不再
推荐使用这些已有的风格


676
00:34:17,024 --> 00:34:20,027 line:-2
因为它们被默默指定了
一个非常特定的颜色外观


677
00:34:20,092 --> 00:34:21,495 line:-1
这不再有用了


678
00:34:22,396 --> 00:34:25,098 line:-2
但在其他地方
基于活动指示符的尺寸


679
00:34:25,165 --> 00:34:28,001 line:-1
我们引入了一些新的样式


680
00:34:29,069 --> 00:34:32,306 line:-2
它们也默认使用了一个好看的
动态的灰色


681
00:34:32,472 --> 00:34:35,375 line:-2
所以不用做任何修改 它们在浅色
和黑暗模式都看上去很棒


682
00:34:35,943 --> 00:34:38,545 line:-1
但你能使用已知的颜色属性


683
00:34:38,712 --> 00:34:42,949 line:-2
来设置一个自定义的 动态颜色
或甚至一个静态的颜色 比如白色


684
00:34:43,016 --> 00:34:45,219 line:-1
如果你想要一个特定固定的外观


685
00:34:47,454 --> 00:34:50,123 line:-1
接下来 这是一些你要留意的事情


686
00:34:50,357 --> 00:34:52,259 line:-1
当你在app中处理文字时


687
00:34:53,360 --> 00:34:55,795 line:-2
现在 默认情况 文字类比如
UILabel


688
00:34:55,862 --> 00:34:59,833 line:-2
UIText文本域和
UIText视图使用标签颜色


689
00:35:00,567 --> 00:35:04,338 line:-2
所以 如果你只在新的文本域
文字视图或标签设置文字


690
00:35:05,239 --> 00:35:08,876 line:-2
你会在浅色和黑暗模式得到一个
默认的好看无误的外观


691
00:35:09,977 --> 00:35:12,012 line:-1
但如果你在app中使用属性字符串


692
00:35:12,446 --> 00:35:15,582 line:-1
你在文字类中的一个设置属性文字


693
00:35:15,983 --> 00:35:18,919 line:-1
或如果你自己手动绘制属性字符串


694
00:35:19,753 --> 00:35:22,789 line:-1
你需要指定一个前景颜色


695
00:35:23,690 --> 00:35:27,895 line:-2
没有前景颜色属性时
像这样绘制属性字符串


696
00:35:28,028 --> 00:35:30,831 line:-1
实际上是会被定义为产出黑色文字


697
00:35:32,099 --> 00:35:34,334 line:-2
所以 如果你在app的黑暗模式下
看到黑色的文字


698
00:35:34,668 --> 00:35:36,069 line:-1
你使用属性字符串


699
00:35:36,136 --> 00:35:39,072 line:-2
只是为了保证 你为比如标签
指定了一个动态的颜色


700
00:35:39,406 --> 00:35:42,142 line:-2
就像你在这看到的
为前景颜色属性


701
00:35:42,442 --> 00:35:43,410 line:-1
它真的非常简单


702
00:35:45,445 --> 00:35:49,716 line:-2
现在 你们中在app中
嵌入了网页内容的


703
00:35:50,384 --> 00:35:52,719 line:-1
你需应该知道黑暗模式是可选的


704
00:35:53,487 --> 00:35:56,390 line:-1
你可以通过配色方案风格属性


705
00:35:56,490 --> 00:35:58,158 line:-1
或一个相同名字的元标签来实现


706
00:35:58,926 --> 00:36:02,196 line:-2
接下来 你就能使用喜欢的
配色媒体查询


707
00:36:02,362 --> 00:36:05,866 line:-2
来在浅色和黑暗模式中
自定义不同颜色和图片


708
00:36:07,034 --> 00:36:08,769 line:-1
你可以在今年的WWDC了解到更多


709
00:36:08,836 --> 00:36:11,338 line:-1
关于在网页内容中支持黑暗模式


710
00:36:11,638 --> 00:36:13,006 line:-1
的视频


711
00:36:14,908 --> 00:36:17,277 line:-2
对于你们中已经在tvOS的app
支持黑暗模式来说


712
00:36:18,445 --> 00:36:20,914 line:-1
这是一个好机会


713
00:36:21,348 --> 00:36:23,450 line:-1
因为我们已经支持这个功能好几年了


714
00:36:24,418 --> 00:36:29,289 line:-2
今年 你的tvOS 13的app
将会和iOS一样


715
00:36:29,356 --> 00:36:30,657 line:-1
默认支持黑暗模式了


716
00:36:31,725 --> 00:36:33,694 line:-1
我们今天提到的多数新的API


717
00:36:33,794 --> 00:36:37,898 line:-2
比如所有的动态颜色和图片资产
都可以使用了


718
00:36:38,498 --> 00:36:40,934 line:-1
但比如新系统材料等物件


719
00:36:41,001 --> 00:36:42,569 line:-1
只在iOS上能使用


720
00:36:43,737 --> 00:36:46,940 line:-2
现在 如果你已经在你的tvOS
app上支持了黑暗模式


721
00:36:47,641 --> 00:36:48,909 line:-1
你可以适配你想要的


722
00:36:48,976 --> 00:36:52,112 line:-1
所有的新功能和新的API


723
00:36:53,013 --> 00:36:56,083 line:-2
但如果你已有的黑暗模式
已经很好用了


724
00:36:56,149 --> 00:36:57,651 line:-1
你无需重写所有功能


725
00:37:00,521 --> 00:37:03,223 line:-2
今年 如果你想要将
iPad app适配至Mac


726
00:37:03,790 --> 00:37:07,060 line:-2
你可以以同样的方式
在Mac上支持黑暗模式


727
00:37:07,160 --> 00:37:10,764 line:-2
使用所有相同的API
就像我们在iOS上介绍的那样


728
00:37:11,932 --> 00:37:14,401 line:-2
现在 你的Mac app会遵循
用户在系统偏好中


729
00:37:14,468 --> 00:37:16,737 line:-1
选择的黑暗模式设置


730
00:37:17,171 --> 00:37:18,772 line:-1
非常简单 就像在iOS上一样


731
00:37:19,940 --> 00:37:23,243 line:-2
但唯一的区别是你已经留意到的
在某些情况下


732
00:37:23,877 --> 00:37:26,647 line:-1
在Mac上 UIKit会自动提供


733
00:37:26,713 --> 00:37:30,484 line:-2
不太一样的系统颜色的
动态颜色


734
00:37:30,717 --> 00:37:32,119 line:-1
和一些材料的版本


735
00:37:32,486 --> 00:37:33,654 line:-1
为了更好地适配它们


736
00:37:33,720 --> 00:37:36,690 line:-2
你可能需要使用Mac提供的框架
比如AppKit


737
00:37:37,624 --> 00:37:38,759 line:-1
这样 你的app会变得更好


738
00:37:38,825 --> 00:37:41,995 line:-2
就像在Mac上其他
使用了AppKit的app一样


739
00:37:45,132 --> 00:37:47,334 line:-2
相不相信
这就是你需要了解的所有了


740
00:37:47,401 --> 00:37:48,802 line:-2
今天 你能在iOS 13上
为你所有的


741
00:37:49,102 --> 00:37:52,005 line:-1
app开适配黑暗模式了


742
00:37:53,640 --> 00:37:56,109 line:-1
只要你创建了iOS 13 SCK


743
00:37:56,510 --> 00:37:58,879 line:-1
你的app会默认适配黑暗模式


744
00:37:59,680 --> 00:38:02,216 line:-2
就像你在我们的示例中看到的
你可能还有其他事情要完善


745
00:38:03,750 --> 00:38:05,118 line:-1
现在 我们已经减少了你利用


746
00:38:05,185 --> 00:38:07,788 line:-1
这些新功能来快速让你的app


747
00:38:07,855 --> 00:38:10,524 line:-1
适配黑暗模式的工作量了


748
00:38:11,124 --> 00:38:12,893 line:-1
请确保你开始使用


749
00:38:12,960 --> 00:38:15,529 line:-1
我们今年提供的


750
00:38:15,596 --> 00:38:17,064 line:-1
所有的这些动态颜色和材料


751
00:38:17,564 --> 00:38:20,234 line:-2
接下来
是创建你自定义的外观


752
00:38:20,400 --> 00:38:22,636 line:-1
自定义颜色 自定义图片等等


753
00:38:23,604 --> 00:38:25,405 line:-1
最后 不要忘记好好利用UIKit


754
00:38:25,506 --> 00:38:30,210 line:-1
的强大的客制化功能和灵活性


755
00:38:30,544 --> 00:38:32,913 line:-1
来让你的app在黑暗模式下更好看


756
00:38:33,747 --> 00:38:36,617 line:-1
我们非常期待随后看到


757
00:38:36,683 --> 00:38:38,318 line:-1
你app在黑暗模式下的样子


758
00:38:40,120 --> 00:38:42,489 line:-1
在我们演讲的页面 你可以


759
00:38:42,556 --> 00:38:45,158 line:-1
了解更多信息和一些示例代码


760
00:38:45,592 --> 00:38:47,528 line:-1
非常感谢大家

