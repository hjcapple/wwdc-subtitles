1
00:00:06,139 --> 00:00:09,676 line:0
（RealityKit和
Reality Composer介绍）


2
00:00:16,817 --> 00:00:18,018 line:0
大家好


3
00:00:19,520 --> 00:00:20,387 line:-1
我是Cody


4
00:00:20,454 --> 00:00:22,256 line:-1
欢迎大家来到


5
00:00:22,322 --> 00:00:25,025 line:0
RealityKit和
Reality Composer介绍


6
00:00:27,928 --> 00:00:32,131 line:-2
现在App Store里有许多
形形色色的AR app


7
00:00:32,198 --> 00:00:34,334 line:-2
它们都充分利用了
ARKit的强大功能


8
00:00:34,801 --> 00:00:39,039 line:-2
这些app的开发者们
都有共同的需求


9
00:00:39,306 --> 00:00:42,609 line:-1
例如渲染 物理和动画


10
00:00:43,677 --> 00:00:47,581 line:-2
ARKit使创建
AR app更简单


11
00:00:47,648 --> 00:00:50,050 line:-1
但是我们要让它还要简单


12
00:00:52,819 --> 00:00:55,923 line:-1
开发AR app


13
00:00:55,989 --> 00:00:59,960 line:-1
会让你遇到一些其他领域没有的挑战


14
00:01:00,027 --> 00:01:03,363 line:-1
最主要的是你创建的虚拟内容


15
00:01:03,430 --> 00:01:05,399 line:-1
会与现实世界进行交互


16
00:01:05,465 --> 00:01:06,667 line:-1
反过来也是一样


17
00:01:08,135 --> 00:01:11,805 line:-2
所以如果你在一个
真实的房间中放一盏虚拟台灯


18
00:01:11,872 --> 00:01:14,541 line:-1
它应该要照亮周围的物体


19
00:01:14,608 --> 00:01:16,610 line:-1
不管是真实的还是虚拟的


20
00:01:17,144 --> 00:01:20,914 line:-1
而且放置在现实世界的东西


21
00:01:20,981 --> 00:01:23,350 line:-1
看起来要像它真的在那里一样


22
00:01:24,384 --> 00:01:28,455 line:-1
这在比如网购这样的情况下十分重要


23
00:01:28,522 --> 00:01:32,693 line:-2
如果你想看看该产品
放在你家中是什么样的


24
00:01:33,994 --> 00:01:36,964 line:-1
所以我们就非常需要


25
00:01:37,030 --> 00:01:39,099 line:-1
十分逼真的渲染


26
00:01:39,800 --> 00:01:44,004 line:-1
否则就无法增强现实


27
00:01:45,839 --> 00:01:47,574 line:-1
进入到RealityKit


28
00:01:47,641 --> 00:01:50,110 line:-1
这是Swift的一个新框架


29
00:01:50,611 --> 00:01:53,580 line:-1
是为了帮助你创建AR app


30
00:01:53,647 --> 00:01:56,783 line:-1
同时也能更轻松地利用ARKit


31
00:01:59,453 --> 00:02:02,222 line:-2
RealityKit是一个
AR优先的框架


32
00:02:02,289 --> 00:02:05,626 line:-1
这意味着它完全是从头开始设计的


33
00:02:05,692 --> 00:02:08,762 line:-1
而它的重点在于AR app的开发


34
00:02:10,130 --> 00:02:11,532 line:-1
所以该框架特别注重于


35
00:02:11,598 --> 00:02:14,168 line:-1
高度逼真的物理渲染


36
00:02:14,234 --> 00:02:18,138 line:-1
精确模拟现实生活环境对象


37
00:02:19,706 --> 00:02:22,509 line:-1
我们也充分利用Swift


38
00:02:22,943 --> 00:02:27,748 line:-2
创建出了一个有着
十分简单的API的框架


39
00:02:30,851 --> 00:02:32,419 line:-1
除了RealityKit


40
00:02:32,486 --> 00:02:35,155 line:-2
我们还会介绍
Reality Composer


41
00:02:35,622 --> 00:02:37,191 line:-1
这是一款Mac和iOS工具


42
00:02:37,257 --> 00:02:40,561 line:-1
能够简单基于AR的内容


43
00:02:41,361 --> 00:02:42,629 line:-1
它直观的设计


44
00:02:42,696 --> 00:02:46,300 line:-1
针对的是任何想让他们自己的内容


45
00:02:46,366 --> 00:02:48,635 line:-1
出现在现实世界中的人


46
00:02:49,603 --> 00:02:53,507 line:-1
甚至让你可以直接在AR中布景


47
00:02:54,541 --> 00:02:56,176 line:-1
但是在介绍这个功能之前


48
00:02:56,410 --> 00:02:59,613 line:-2
让我们先讲RealityKit
并看看它的实际效果


49
00:03:01,882 --> 00:03:04,651 line:-2
这是一个真实的房间
里面有沙发和桌子


50
00:03:04,718 --> 00:03:07,187 line:-1
桌子上还有一些小东西


51
00:03:08,288 --> 00:03:09,256 line:-1
它故意有点模糊


52
00:03:09,323 --> 00:03:12,893 line:-1
因为这里的相机焦点很浅


53
00:03:13,393 --> 00:03:17,598 line:-2
我们可以用RealityKit
在里面加上一些虚拟物品


54
00:03:17,998 --> 00:03:20,667 line:-1
让他们看起来真的像在这个环境里


55
00:03:23,237 --> 00:03:28,876 line:-1
请注意这里的照明 阴影和相机效果


56
00:03:28,942 --> 00:03:32,279 line:-1
让这个物体看起来像真的在里面一样


57
00:03:32,346 --> 00:03:34,548 line:-1
像这样奇思妙想的东西都可以


58
00:03:36,049 --> 00:03:37,784 line:-2
RealityKit可以帮助你
完成繁重的工作


59
00:03:37,851 --> 00:03:41,889 line:-1
并使你的内容自动适应环境


60
00:03:42,322 --> 00:03:46,326 line:-1
你只要告诉该框架你想展示的东西


61
00:03:46,393 --> 00:03:49,429 line:-2
然后它就会提供适用于
你的app的自定义逻辑


62
00:03:52,599 --> 00:03:55,536 line:-2
让你简单构建
和运行你的第一个app


63
00:03:55,602 --> 00:03:57,671 line:-1
实际上你刚刚看到的那个app


64
00:03:57,738 --> 00:04:00,240 line:-1
我只写了四行代码


65
00:04:01,275 --> 00:04:02,242 line:-1
所以在这里


66
00:04:03,177 --> 00:04:05,612 line:-1
我在这个环境中放置了一个水平锚


67
00:04:05,679 --> 00:04:09,249 line:-2
我从资产包中
加载一个叫flyer的模型


68
00:04:09,750 --> 00:04:12,619 line:-1
我再将该模型附加到锚点上


69
00:04:14,121 --> 00:04:15,155 line:-1
在这次演讲中


70
00:04:15,222 --> 00:04:17,724 line:-1
我会深入探讨每个概念的含义


71
00:04:19,259 --> 00:04:20,226 line:-1
（系统和框架基础）


72
00:04:20,293 --> 00:04:22,262 line:-1
你刚刚看到了该框架的运用


73
00:04:22,329 --> 00:04:25,265 line:-2
让我们进入构成
RealityKit的一些系统


74
00:04:26,033 --> 00:04:28,268 line:-1
以及帮助你立即开始的基础知识


75
00:04:31,705 --> 00:04:33,273 line:-1
为了帮助你创建app


76
00:04:33,674 --> 00:04:38,278 line:-2
RealityKit的内置系统
会大大帮助你


77
00:04:39,847 --> 00:04:42,916 line:-2
这些都与其他
Apple框架集成


78
00:04:42,983 --> 00:04:45,285 line:-1
比如ARKit和Metal


79
00:04:46,653 --> 00:04:47,621 line:-1
（渲染）


80
00:04:47,688 --> 00:04:48,722 line:-1
首先


81
00:04:49,223 --> 00:04:52,125 line:-1
渲染让你的内容


82
00:04:52,192 --> 00:04:56,230 line:-1
在真实环境中看起来更真


83
00:04:56,897 --> 00:04:59,833 line:-2
并且它使用基于物理的
着色系统来实现这一点


84
00:04:59,900 --> 00:05:03,537 line:-1
能够准确模拟照明和材料的相互作用


85
00:05:04,471 --> 00:05:06,406 line:-1
它建立在Metal上


86
00:05:06,473 --> 00:05:09,910 line:-2
也就是说它针对Apple设备
进行了高度优化


87
00:05:10,744 --> 00:05:13,647 line:-2
该系统充分利用了Metal
提供的所有功能


88
00:05:13,714 --> 00:05:17,551 line:-1
例如多线程渲染和其他低级功能


89
00:05:18,986 --> 00:05:22,089 line:-2
因为RealityKit
是为AR app设计的


90
00:05:22,155 --> 00:05:23,891 line:-1
所以渲染的功能


91
00:05:23,957 --> 00:05:26,326 line:-1
完全专注于让你的内容


92
00:05:26,393 --> 00:05:28,896 line:-1
在真实环境中看起来更真


93
00:05:31,331 --> 00:05:33,033 line:0
（动画）


94
00:05:33,100 --> 00:05:34,601 line:-1
在渲染的基础上


95
00:05:34,668 --> 00:05:37,905 line:0
动画可以为你的内容带来生命力


96
00:05:37,971 --> 00:05:39,473 line:-1
也能丰富你的场景


97
00:05:39,873 --> 00:05:42,976 line:0
RealityKit动画系统
就可以实现这一点


98
00:05:43,443 --> 00:05:47,314 line:0
通过支持骨架和变换动画的方式


99
00:05:48,015 --> 00:05:50,817 line:0
两者都可以直接从USDZ导入


100
00:05:51,685 --> 00:05:53,954 line:0
你甚至可以通过ARKit的
动作捕捉技术


101
00:05:54,021 --> 00:05:56,590 line:-1
在程序上为你的对象制作动画


102
00:05:56,657 --> 00:05:58,058 line:-1
（骨架 - 变换）


103
00:05:58,125 --> 00:06:00,727 line:0
（碰撞检测 刚体动力学
AR启用）


104
00:06:00,794 --> 00:06:04,698 line:0
物理系统负责模拟内容之间


105
00:06:04,765 --> 00:06:07,968 line:0
复杂的交互 包括现实世界中的物体


106
00:06:08,569 --> 00:06:11,104 line:0
它提供一个支持几种不同


107
00:06:11,572 --> 00:06:14,141 line:0
代理形状的碰撞检测系统


108
00:06:14,208 --> 00:06:17,878 line:0
如盒状 球体 甚至复合形状


109
00:06:18,812 --> 00:06:21,248 line:-1
它还可以模拟刚体动力学


110
00:06:21,315 --> 00:06:25,385 line:-1
例如质量 惯性 摩擦和恢复原状


111
00:06:31,458 --> 00:06:33,861 line:-2
RealityKit有网络的
内置支持


112
00:06:33,927 --> 00:06:37,798 line:-1
它可以跨设备同步整个场景


113
00:06:38,265 --> 00:06:41,401 line:-1
包括现实世界数据的共享表示


114
00:06:42,769 --> 00:06:46,406 line:-2
它全部建立在Apple的
多对等网络库之上


115
00:06:47,307 --> 00:06:49,676 line:-1
该系统开箱即用


116
00:06:49,743 --> 00:06:52,212 line:-1
它使构建连接的app


117
00:06:52,279 --> 00:06:53,714 line:-1
变得十分简单和自动


118
00:06:57,618 --> 00:06:59,820 line:-2
RealityKit使用
实体组件系统


119
00:06:59,887 --> 00:07:01,488 line:-1
来表示对象数据


120
00:07:01,555 --> 00:07:04,091 line:-1
对用户来说是非常有用的工具


121
00:07:04,157 --> 00:07:07,294 line:-1
可以通过组合属性轻松创建内容


122
00:07:07,361 --> 00:07:10,430 line:-1
而不是大对象继承层次结构


123
00:07:10,864 --> 00:07:13,567 line:-1
你也可以创建自己的自定义组件


124
00:07:13,634 --> 00:07:17,437 line:-1
将你的数据和功能添加到任何实体


125
00:07:18,305 --> 00:07:19,673 line:-1
还有


126
00:07:19,740 --> 00:07:22,643 line:-1
所有组件都会自动将它们的数据


127
00:07:22,709 --> 00:07:25,112 line:-1
在网络设置中与其他设备同步


128
00:07:26,280 --> 00:07:27,748 line:-1
甚至是自定义组件


129
00:07:27,814 --> 00:07:30,851 line:-1
所以共享数据非常简单


130
00:07:34,254 --> 00:07:36,723 line:-1
所以 我们现在看到的系统


131
00:07:36,790 --> 00:07:39,626 line:-1
强调的是AR的视觉方面


132
00:07:39,693 --> 00:07:41,995 line:-1
但这并不是全部


133
00:07:43,063 --> 00:07:45,299 line:-1
音频也是非常重要的


134
00:07:45,365 --> 00:07:47,467 line:-1
它能够帮你创建沉浸式内容


135
00:07:47,534 --> 00:07:49,736 line:-1
让你相信它在现实世界中是存在的


136
00:07:50,838 --> 00:07:54,241 line:-2
RealityKit的
音频系统理解3D空间


137
00:07:55,008 --> 00:07:58,178 line:-1
并且可以将音频置于动态内容上


138
00:07:59,179 --> 00:08:03,050 line:-1
所以它可以让离你较远的虚拟对象


139
00:08:03,116 --> 00:08:06,486 line:-1
听起来就离你很远 反之亦然


140
00:08:11,325 --> 00:08:12,292 line:-1
我还想提一提


141
00:08:12,359 --> 00:08:16,430 line:-2
RealityKit定义了一个
新的文件类型


142
00:08:16,496 --> 00:08:18,165 line:-1
也就是Reality File


143
00:08:18,899 --> 00:08:22,636 line:-2
它存储了可以加载到
app中的优化内容


144
00:08:23,704 --> 00:08:26,607 line:-2
而且该文件能够囊括
你的app需要的所有


145
00:08:27,307 --> 00:08:29,977 line:-1
例如 网格和材质以及物理属性


146
00:08:30,043 --> 00:08:31,512 line:-1
甚至音频资源


147
00:08:33,246 --> 00:08:37,618 line:-2
RealityKit还支持
直接从USDZ文件导入


148
00:08:37,683 --> 00:08:39,586 line:-1
类似于AR Quick Look


149
00:08:39,953 --> 00:08:43,690 line:-2
使用Reality File也能
缩短上传时间


150
00:08:43,756 --> 00:08:45,959 line:-1
也能让你更好地控制你的内容


151
00:08:47,394 --> 00:08:51,098 line:-2
你也可以直接从
Reality Composer导出这些文件


152
00:08:51,164 --> 00:08:53,000 line:-1
我们稍后也会说到


153
00:08:55,335 --> 00:08:56,837 line:-2
（框架基础 AR视图 - 锚
- 场景 - 实体）


154
00:08:56,904 --> 00:08:59,139 line:-2
在使用
RealityKit API时


155
00:08:59,206 --> 00:09:02,009 line:-1
你会用到四个主要领域


156
00:09:02,075 --> 00:09:05,078 line:-1
不管你要创建什么类型的app


157
00:09:05,345 --> 00:09:07,381 line:-1
包括AR视图


158
00:09:07,447 --> 00:09:10,551 line:-1
锚 场景和实体


159
00:09:12,085 --> 00:09:16,456 line:-2
我们先从视图或者叫AR视图开始
RealityKit中这么称呼


160
00:09:17,257 --> 00:09:19,226 line:-1
视图负责许多构建AR app中


161
00:09:19,293 --> 00:09:21,261 line:-1
繁杂的工作


162
00:09:21,328 --> 00:09:24,965 line:-1
这样你就能专注于提高体验


163
00:09:25,766 --> 00:09:28,769 line:-1
它也有许多有用的功能


164
00:09:29,036 --> 00:09:30,070 line:-1
比如


165
00:09:30,137 --> 00:09:32,806 line:-1
完整的手势支持 这样你就可以添加


166
00:09:33,407 --> 00:09:37,311 line:-2
这样你就可以响应
iOS设备上的任何手势


167
00:09:37,811 --> 00:09:41,882 line:-1
这允许实体更加轻松地响应用户输入


168
00:09:42,783 --> 00:09:45,452 line:-1
还有非常逼真的相机效果


169
00:09:45,519 --> 00:09:46,954 line:-1
这是由渲染支持的


170
00:09:47,020 --> 00:09:49,756 line:-1
这能够帮助你的虚拟内容集成到


171
00:09:49,823 --> 00:09:51,191 line:-1
现实世界中


172
00:09:51,959 --> 00:09:52,826 line:-1
实际上


173
00:09:52,893 --> 00:09:56,864 line:-2
ARView可以为你提供
和AS Quick Look


174
00:09:56,930 --> 00:09:59,433 line:-1
一样开箱即用的质量和功能集


175
00:10:00,000 --> 00:10:02,936 line:-1
让我们来看看其中一些相机效果


176
00:10:04,037 --> 00:10:06,039 line:-1
（阴影 AR视图）


177
00:10:06,106 --> 00:10:07,741 line:-1
为了让你的内容看起来像真的


178
00:10:07,808 --> 00:10:11,478 line:-1
最重要的效果之一


179
00:10:11,545 --> 00:10:13,680 line:-1
就是具有说服力的阴影


180
00:10:13,747 --> 00:10:15,048 line:-1
地上的阴影


181
00:10:15,949 --> 00:10:18,952 line:-1
看看该影片在没有加阴影的时候


182
00:10:19,019 --> 00:10:21,688 line:-1
很难说这个机器人


183
00:10:21,755 --> 00:10:23,824 line:-1
相对于下面的桌子在哪里


184
00:10:23,891 --> 00:10:26,426 line:-1
是漂在空中还是站在桌子上


185
00:10:26,493 --> 00:10:27,895 line:-1
很难说


186
00:10:27,961 --> 00:10:29,396 line:-1
但是一旦加上阴影


187
00:10:29,463 --> 00:10:33,200 line:-2
这个机器人在3D空间中
在什么地方就很容易辨认了


188
00:10:34,067 --> 00:10:35,302 line:-1
AR视图提供


189
00:10:35,369 --> 00:10:37,504 line:-1
两种不同的地面阴影技术


190
00:10:37,571 --> 00:10:38,438 line:-1
供你选择


191
00:10:38,505 --> 00:10:41,508 line:-1
使你的app更加出彩


192
00:10:41,575 --> 00:10:44,044 line:-1
所以要么是简单的投影


193
00:10:44,111 --> 00:10:46,747 line:-1
或者是更真实的阴影


194
00:10:46,813 --> 00:10:48,081 line:-1
也就是你在这里看到的


195
00:10:50,651 --> 00:10:52,986 line:-1
（动作模糊 AR视图）


196
00:10:53,053 --> 00:10:56,690 line:-1
AR视图能够自动读取相机曝光时间


197
00:10:56,757 --> 00:10:58,625 line:-1
这是ARKit提供的


198
00:10:58,692 --> 00:11:03,964 line:-2
它能在场景中的所有虚拟内容上
执行基于摄像头的运动模糊


199
00:11:04,031 --> 00:11:05,832 line:-1
这有助于匹配实时相机中


200
00:11:05,899 --> 00:11:08,302 line:-1
已经存在的模糊


201
00:11:09,303 --> 00:11:10,804 line:-1
我希望这不会让你们不舒服


202
00:11:12,139 --> 00:11:13,006 line:-1
好了


203
00:11:13,941 --> 00:11:16,810 line:-1
看看关闭动作模糊时


204
00:11:16,877 --> 00:11:20,480 line:-1
该内容看起来就是贴在视屏的表面


205
00:11:28,689 --> 00:11:29,523 line:-1
好了


206
00:11:31,124 --> 00:11:33,560 line:-1
我们构建了一个逼真的景深算法


207
00:11:33,627 --> 00:11:35,896 line:-1
来模拟不同的相机焦点


208
00:11:35,963 --> 00:11:39,066 line:-1
这也是ARKit提供的有用信息


209
00:11:39,733 --> 00:11:40,767 line:-1
所以当设备相机


210
00:11:40,834 --> 00:11:43,604 line:-1
聚焦在现实世界中特殊的一个点时


211
00:11:44,338 --> 00:11:47,407 line:-1
AR视图会确保虚拟内容


212
00:11:47,474 --> 00:11:49,710 line:-1
遵循相同的聚焦模式


213
00:11:50,077 --> 00:11:51,478 line:-1
在该视频中


214
00:11:51,545 --> 00:11:55,482 line:-1
视频焦点不断前后变换


215
00:11:56,216 --> 00:11:58,719 line:-1
为了聚焦到单独的每一列


216
00:11:58,785 --> 00:12:00,721 line:-1
（景深 AR视图）


217
00:12:10,230 --> 00:12:14,168 line:-2
最后 AR视图将数字胶片颗粒
添加到虚拟内容中


218
00:12:14,234 --> 00:12:16,570 line:-1
这是ARKit的新功能 相机颗粒


219
00:12:17,638 --> 00:12:20,307 line:-1
因为数码相机都有一定的噪音


220
00:12:20,374 --> 00:12:23,076 line:-1
特别是在低光环境下


221
00:12:23,143 --> 00:12:25,245 line:-1
在你的虚拟内容中加入颗粒


222
00:12:25,312 --> 00:12:27,447 line:-1
能够让用户感觉到


223
00:12:27,514 --> 00:12:30,017 line:-1
该内容真的是真实世界的一部分


224
00:12:30,083 --> 00:12:33,754 line:-1
而不是浮在相机的表面


225
00:12:33,820 --> 00:12:35,422 line:-1
（相机噪声 AR视图）


226
00:12:35,489 --> 00:12:38,659 line:-1
现在这个机器人没有加任何噪声


227
00:12:38,725 --> 00:12:41,328 line:-1
看起来就不像是真的在这个环境中


228
00:12:41,395 --> 00:12:42,763 line:-1
当你加上噪声


229
00:12:42,829 --> 00:12:45,832 line:-1
看起来就是相机下的图像


230
00:12:45,899 --> 00:12:47,434 line:-1
而不是在相机表面


231
00:12:50,771 --> 00:12:52,306 line:-1
（实体 建立每个对象的块）


232
00:12:52,372 --> 00:12:53,774 line:-1
（确定场景结构 提供层次变换）


233
00:12:53,841 --> 00:12:55,275 line:-1
现在我们来说说实体


234
00:12:55,342 --> 00:12:56,910 line:-1
它构成了你要创建的


235
00:12:56,977 --> 00:12:59,112 line:-1
任何体验的主要构建块


236
00:12:59,613 --> 00:13:02,216 line:-1
你场景中的所有虚拟内容


237
00:13:02,282 --> 00:13:04,885 line:-1
是由具有不同类型组件的一个实体


238
00:13:04,952 --> 00:13:07,054 line:-1
来为其提供特殊的功能


239
00:13:08,555 --> 00:13:11,859 line:-1
任何实体都可以作为其他实体的父级


240
00:13:12,826 --> 00:13:15,395 line:-1
这能够帮助我们创建场景结构


241
00:13:15,996 --> 00:13:17,531 line:-1
并构建一个层次变换


242
00:13:17,598 --> 00:13:20,634 line:-2
因此它更容易推理
其本地空间内的对象


243
00:13:21,568 --> 00:13:22,803 line:-1
例如


244
00:13:23,704 --> 00:13:26,139 line:-1
你有一个虚拟的桌子和虚拟的杯子


245
00:13:26,440 --> 00:13:28,442 line:-1
你想要杯子在桌子上


246
00:13:29,042 --> 00:13:32,079 line:-2
你可能会将桌子实体
作为杯子实体的父级


247
00:13:32,145 --> 00:13:34,248 line:-1
这样它们在空间里就可以同时移动


248
00:13:37,818 --> 00:13:39,820 line:-1
（AR锚固）


249
00:13:39,887 --> 00:13:41,655 line:-1
现在我们来讲讲锚固


250
00:13:41,722 --> 00:13:44,725 line:-1
以及它在AR中为何如此重要


251
00:13:45,325 --> 00:13:48,462 line:-2
在现实世界中
物体通常处于运动状态


252
00:13:48,795 --> 00:13:51,698 line:-2
如果我们将虚拟内容
投射到真实环境中


253
00:13:51,765 --> 00:13:56,570 line:-1
适应动作对于实际体验就至关重要


254
00:13:58,105 --> 00:14:00,741 line:-1
例如 如果你的内容已锚定到图像


255
00:14:00,807 --> 00:14:03,477 line:-1
比如桌子上的杂志


256
00:14:03,544 --> 00:14:04,945 line:-1
这样物体就应该固定在上面了


257
00:14:05,012 --> 00:14:08,582 line:-1
不管杂志在现实中是怎么移动的


258
00:14:10,184 --> 00:14:11,818 line:-1
RealityKit解决了该问题


259
00:14:11,885 --> 00:14:16,590 line:-2
ARKit锚作为API的
第一类对象


260
00:14:17,024 --> 00:14:19,359 line:-1
支持任何锚定类型


261
00:14:19,426 --> 00:14:22,196 line:-1
比如飞机 身体 脸部和相机


262
00:14:24,097 --> 00:14:28,402 line:-1
现实世界中的任何表面都能被锚定


263
00:14:28,468 --> 00:14:32,706 line:-2
我们将每一个锚点
都视为实体层次结构的本地根


264
00:14:33,607 --> 00:14:35,909 line:-2
因此 为了说明锚在
RealityKit中的工作原理


265
00:14:36,210 --> 00:14:39,513 line:-2
我们假设现实环境中
只有水平和垂直的平面


266
00:14:39,580 --> 00:14:41,415 line:-1
我们可以将内容锚定在上面


267
00:14:41,481 --> 00:14:43,183 line:-1
比如桌子或者墙


268
00:14:44,384 --> 00:14:47,087 line:-1
每一个都可以用作锚


269
00:14:49,223 --> 00:14:50,057 line:-1
所有的锚


270
00:14:50,123 --> 00:14:52,893 line:-1
都有附加到它们的实体的层次结构


271
00:14:53,293 --> 00:14:54,895 line:-1
这一点很重要


272
00:14:55,229 --> 00:14:58,632 line:-1
因为实体的层次结构在相应锚点


273
00:14:59,099 --> 00:15:03,136 line:-2
在现实世界中被ARKit
激活之前是不会活动的


274
00:15:04,171 --> 00:15:05,005 line:-1
例如


275
00:15:05,072 --> 00:15:07,774 line:-1
如果你要定义一个水平平面锚点


276
00:15:07,841 --> 00:15:09,209 line:-1
再附加实体


277
00:15:09,276 --> 00:15:11,778 line:-1
你在ARKit成功确认水平平面前


278
00:15:11,845 --> 00:15:15,716 line:-1
在现实世界是看不到这个实体的


279
00:15:15,782 --> 00:15:18,719 line:-1
这就防止了内容仅在空间浮动


280
00:15:18,785 --> 00:15:20,621 line:-1
直到锚点被确定


281
00:15:23,924 --> 00:15:25,225 line:-1
所以现在


282
00:15:25,292 --> 00:15:27,661 line:-1
你的场景中可以引入新锚点


283
00:15:27,728 --> 00:15:29,396 line:-1
比如图片锚点


284
00:15:29,997 --> 00:15:33,100 line:-2
可能会将用于显示虚拟框架的
新锚点引入到场景中


285
00:15:33,166 --> 00:15:36,203 line:-1
比如墙上的照片


286
00:15:36,737 --> 00:15:39,806 line:-1
所以如果你想移动照片


287
00:15:40,440 --> 00:15:42,576 line:-1
比如你想将照片移到不同的墙上


288
00:15:42,643 --> 00:15:44,745 line:-1
或者就想往左一点点


289
00:15:45,512 --> 00:15:47,948 line:-1
虚拟框架也会随之移动


290
00:15:52,753 --> 00:15:53,587 line:-1
最后


291
00:15:53,654 --> 00:15:56,123 line:-1
让我们一起来看看AR场景的构成


292
00:15:56,590 --> 00:15:59,626 line:-1
你们接下来都会看到


293
00:16:00,961 --> 00:16:02,863 line:-1
我们从AR视图开始


294
00:16:03,664 --> 00:16:06,300 line:-1
这是AR的开始


295
00:16:07,367 --> 00:16:09,369 line:-1
它包含了对场景的引用


296
00:16:10,737 --> 00:16:13,574 line:-2
并且是你可以手动添加
不同锚点的场景


297
00:16:13,640 --> 00:16:14,908 line:-1
就像你之前看到的那样


298
00:16:16,743 --> 00:16:18,979 line:-1
每一次你要加载新实体


299
00:16:19,680 --> 00:16:21,982 line:-1
你就可以将其附加至你选择的锚点


300
00:16:22,649 --> 00:16:27,187 line:-2
或者附加到先前加载的实体
以形成实体层次结构


301
00:16:28,722 --> 00:16:30,023 line:-1
在这个例子中


302
00:16:30,424 --> 00:16:31,758 line:-1
我们有两个锚点


303
00:16:31,825 --> 00:16:34,061 line:-1
每一个都形成了各自的层次结构


304
00:16:37,764 --> 00:16:40,033 line:-1
现在结合刚刚我们所说的全部


305
00:16:40,100 --> 00:16:42,536 line:-2
我们来看一个演示
看看如何实际操作


306
00:16:48,809 --> 00:16:50,177 line:-1
（演示）


307
00:16:50,244 --> 00:16:51,979 line:-1
我们要做的


308
00:16:52,546 --> 00:16:55,015 line:-1
是先检测我前面这个平面


309
00:16:55,549 --> 00:17:00,387 line:-1
再将虚拟内容添加到这个平面


310
00:17:00,454 --> 00:17:05,058 line:-1
利用RealityKit中的


311
00:17:05,125 --> 00:17:06,292 line:-1
程序网格生成库


312
00:17:07,895 --> 00:17:09,396 line:-1
所以我们把它调出来


313
00:17:09,463 --> 00:17:12,465 line:-1
我还要加一些虚拟玩具


314
00:17:13,200 --> 00:17:15,736 line:-1
让它们和这些盒子交互


315
00:17:16,303 --> 00:17:17,637 line:-1
好了


316
00:17:21,541 --> 00:17:22,976 line:-1
你可以看到物理系统


317
00:17:23,042 --> 00:17:26,246 line:-1
负责不同对象之间的交互


318
00:17:26,313 --> 00:17:28,682 line:-1
动画系统为这架飞机制作动画


319
00:17:28,749 --> 00:17:30,517 line:-1
让它朝我飞来


320
00:17:30,918 --> 00:17:34,955 line:-1
RealityKit自动处理光线


321
00:17:35,022 --> 00:17:37,558 line:-1
还有阴影 还有不同的相机效果


322
00:17:37,624 --> 00:17:40,227 line:-1
让这些内容尽可能


323
00:17:40,294 --> 00:17:41,595 line:-1
贴合实际


324
00:17:42,262 --> 00:17:44,464 line:-1
这整个app只需要几行代码


325
00:17:44,531 --> 00:17:48,068 line:-1
代码就只有加载方块盒子


326
00:17:48,135 --> 00:17:49,670 line:-1
加载网格


327
00:17:49,736 --> 00:17:52,840 line:-2
再告诉RealityKit
我想让它们在哪里


328
00:17:53,974 --> 00:17:54,908 line:-1
就结束了


329
00:18:02,449 --> 00:18:04,685 line:-1
接下来我想有请Tyler


330
00:18:04,751 --> 00:18:08,422 line:-2
来详细讲讲RealityKit
及其运作方式


331
00:18:12,392 --> 00:18:13,327 line:-1
谢谢Cody


332
00:18:14,995 --> 00:18:15,963 line:-1
我是Tyler Casella


333
00:18:16,029 --> 00:18:18,332 line:-2
我将为你们
介绍RealityKit


334
00:18:18,398 --> 00:18:20,667 line:-2
和Reality Composer
的可用功能


335
00:18:21,602 --> 00:18:24,471 line:-1
让我们先从


336
00:18:24,538 --> 00:18:28,108 line:-1
构建AR app需要什么开始


337
00:18:34,181 --> 00:18:35,516 line:-1
就像Cody向你们展示的那样


338
00:18:35,582 --> 00:18:38,452 line:-2
RealityKit使用
实体组件设计模式


339
00:18:38,519 --> 00:18:40,554 line:-1
来将对象创建到现实世界中


340
00:18:41,088 --> 00:18:43,156 line:-1
实体创建了你的场景结构


341
00:18:43,223 --> 00:18:44,825 line:-1
和层次结构


342
00:18:44,892 --> 00:18:46,860 line:-1
那么对你来说燥本地空间


343
00:18:46,927 --> 00:18:48,462 line:-1
推理对象就更简单了


344
00:18:48,929 --> 00:18:51,398 line:-1
现在如果你不熟悉实体组件设计模式


345
00:18:51,465 --> 00:18:52,299 line:-1
没关系


346
00:18:52,366 --> 00:18:54,368 line:-1
用起来其实很直观


347
00:18:55,502 --> 00:18:57,571 line:-1
实体本身


348
00:18:57,638 --> 00:19:01,041 line:-1
实际上由许多不同的组件组成


349
00:19:01,108 --> 00:19:04,912 line:-1
并且组件被定义为特定的行为和数据


350
00:19:04,978 --> 00:19:07,147 line:-1
可以添加至独立实体


351
00:19:07,948 --> 00:19:10,918 line:-1
与严格的继承模式不同


352
00:19:10,984 --> 00:19:12,452 line:-1
使用实体和组件


353
00:19:12,519 --> 00:19:17,658 line:-1
可以更好更灵活地运用代码


354
00:19:18,358 --> 00:19:21,528 line:-1
它还提供了巨大的性能优势


355
00:19:21,595 --> 00:19:24,831 line:-1
在内存布局和多线程两方面都有


356
00:19:24,898 --> 00:19:26,767 line:-1
为了更好地解释实体和组件


357
00:19:26,834 --> 00:19:28,302 line:-1
我们来看一个例子


358
00:19:29,803 --> 00:19:32,372 line:-1
比如我们有在app中经常使用的


359
00:19:32,439 --> 00:19:34,641 line:-1
不同的对象类型


360
00:19:34,708 --> 00:19:37,177 line:-1
比如球 台灯还有相机


361
00:19:37,811 --> 00:19:40,080 line:-1
现在还经常有许多


362
00:19:40,147 --> 00:19:42,249 line:-1
它们共有的行为


363
00:19:42,316 --> 00:19:44,184 line:-1
比如说锚定


364
00:19:44,918 --> 00:19:47,855 line:-1
这些对象要被锚定到现实世界中


365
00:19:47,921 --> 00:19:51,191 line:-2
所以我们可以对它们所有
都添加锚定组件


366
00:19:52,559 --> 00:19:56,430 line:-1
现在 因为球和灯都有视觉表现


367
00:19:56,496 --> 00:19:59,466 line:-1
所以我们对其添加模型组件


368
00:19:59,533 --> 00:20:02,503 line:-2
但是相机不添加
因为相机是不可见的


369
00:20:03,003 --> 00:20:05,806 line:-1
这正是实体组件设计的构成方面


370
00:20:05,873 --> 00:20:07,441 line:-1
变得强大的地方


371
00:20:08,141 --> 00:20:10,644 line:-1
现在 为了让对象相互碰撞


372
00:20:10,711 --> 00:20:12,946 line:-1
我们可以对其添加碰撞组件


373
00:20:13,347 --> 00:20:15,549 line:-1
之后我们继续操作


374
00:20:15,616 --> 00:20:17,985 line:-1
直到得到我们想要的活动为止


375
00:20:18,385 --> 00:20:20,554 line:-1
你可能注意到了这些对象


376
00:20:20,621 --> 00:20:22,756 line:-1
都有独特的表现方式


377
00:20:22,823 --> 00:20:24,892 line:-1
但是以这种方式构建代码


378
00:20:24,958 --> 00:20:28,395 line:-1
你可以避免重复代码和重用行为


379
00:20:30,030 --> 00:20:32,633 line:-1
我们来看看实体在代码中是怎样的


380
00:20:33,066 --> 00:20:36,370 line:-1
实体本身不会创建任何参数


381
00:20:36,436 --> 00:20:37,704 line:-1
但是如果你有实体


382
00:20:37,771 --> 00:20:41,241 line:-2
你就可以使用下标运算符
开始向其添加组件


383
00:20:42,309 --> 00:20:43,477 line:-1
同样的方法


384
00:20:43,544 --> 00:20:46,780 line:-1
你可以删除和修改这些实体上的组件


385
00:20:47,114 --> 00:20:49,683 line:-1
它允许你修改实体


386
00:20:49,750 --> 00:20:50,817 line:-1
动态行为


387
00:20:52,352 --> 00:20:54,588 line:-1
现在所有的实体都包含子项


388
00:20:54,655 --> 00:20:57,658 line:-2
你可以用addChild方法
来添加子项


389
00:20:58,292 --> 00:20:59,760 line:-1
有了这种层次结构


390
00:21:01,395 --> 00:21:02,996 line:-1
设置实体位置


391
00:21:03,063 --> 00:21:06,099 line:-2
你就是在定义它
相对于父级的位置


392
00:21:06,667 --> 00:21:09,002 line:-1
如果你想设置在现实世界中的位置


393
00:21:09,069 --> 00:21:12,439 line:-2
你可以使用
relativeto方法


394
00:21:12,706 --> 00:21:15,409 line:-1
将现实实体定义为无


395
00:21:15,475 --> 00:21:17,878 line:-2
这也就表明你也想要
现实世界中的空间


396
00:21:18,946 --> 00:21:20,414 line:-1
我们知道一些开发者


397
00:21:20,480 --> 00:21:22,950 line:-1
才刚刚开始创建他们的app


398
00:21:23,016 --> 00:21:25,853 line:-1
所以我们提供了许多有用的实体变体


399
00:21:25,919 --> 00:21:28,455 line:-1
它们已经预先配置好并可以使用


400
00:21:28,922 --> 00:21:33,060 line:0
它们包含了一般功能如确定锚点


401
00:21:33,126 --> 00:21:36,663 line:0
在场景中添加虚拟内容
或是动态灯光


402
00:21:37,064 --> 00:21:39,666 line:0
通过实例化任何这些实体


403
00:21:39,933 --> 00:21:43,904 line:0
所有必需的组件
都预先配置好并可以使用


404
00:21:44,238 --> 00:21:45,572 line:-1
我们来看看其中一些实体


405
00:21:45,639 --> 00:21:47,007 line:-1
以及如何使用


406
00:21:47,875 --> 00:21:49,977 line:-1
第一个是AnchorEntity


407
00:21:50,310 --> 00:21:51,945 line:-1
这是现实世界的粘合剂


408
00:21:52,012 --> 00:21:53,981 line:-1
这也通常是创建AR app


409
00:21:54,047 --> 00:21:55,682 line:-1
要做的第一件事


410
00:21:56,817 --> 00:22:00,354 line:-2
有了AnchorEntity
你就可以指定


411
00:22:00,420 --> 00:22:01,722 line:-1
现实世界的锚点


412
00:22:01,788 --> 00:22:03,991 line:-1
如果该对象在环境中移动


413
00:22:04,258 --> 00:22:06,593 line:-2
AnchorEntity
也会一直跟着


414
00:22:07,127 --> 00:22:07,961 line:-1
因此


415
00:22:08,028 --> 00:22:11,465 line:-2
AnchorEntity
经常是app的根基


416
00:22:11,532 --> 00:22:14,034 line:-1
之后在网上加特定组件


417
00:22:15,969 --> 00:22:18,772 line:-2
AnchorEntity
支持ARKit中


418
00:22:18,839 --> 00:22:20,040 line:-1
所有可用锚点类型


419
00:22:20,107 --> 00:22:22,809 line:-1
这可以快速将你的内容带入现实世界


420
00:22:23,110 --> 00:22:26,113 line:-1
例如 你可以指定内容锚定的


421
00:22:26,180 --> 00:22:28,248 line:-1
图片或对象


422
00:22:28,315 --> 00:22:31,518 line:-1
然后在检测到符合规格的锚时


423
00:22:31,585 --> 00:22:34,354 line:-1
它就会自动附加并在现实世界中出现


424
00:22:35,689 --> 00:22:39,426 line:-2
如果你已经有AR锚点或
AR光线投射结果


425
00:22:39,493 --> 00:22:41,895 line:-1
你也可以直接锚定


426
00:22:42,796 --> 00:22:45,933 line:-2
我们来看看如何在
代码中创建锚定实体


427
00:22:47,067 --> 00:22:48,902 line:-1
当你创建锚定实体时


428
00:22:48,969 --> 00:22:51,805 line:-1
你是在描述锚定对象


429
00:22:52,139 --> 00:22:53,173 line:-1
这里是我的描述


430
00:22:53,240 --> 00:22:56,777 line:-2
我想让AnchorEntity
锚定水平平面


431
00:22:56,844 --> 00:22:59,112 line:-1
类别是桌子


432
00:22:59,179 --> 00:23:02,749 line:-1
最小边界为半米乘半米


433
00:23:03,984 --> 00:23:07,287 line:-2
之后我们要将该锚
加入到AR视图场景


434
00:23:07,354 --> 00:23:08,989 line:-1
再加入场景后


435
00:23:09,056 --> 00:23:11,625 line:-1
锚并不会马上激活


436
00:23:12,059 --> 00:23:16,463 line:-2
记住 如果ARKit
没有检测到匹配锚点


437
00:23:16,530 --> 00:23:18,098 line:-1
它就不会被激活


438
00:23:18,565 --> 00:23:21,401 line:-1
一旦检测到匹配锚点


439
00:23:21,735 --> 00:23:24,137 line:-2
AnchorEntity
和其子实体


440
00:23:24,204 --> 00:23:25,606 line:-1
也会被激活


441
00:23:26,740 --> 00:23:28,242 line:-1
即使AnchorEntity


442
00:23:28,308 --> 00:23:30,410 line:-1
经常是你的app的子实体


443
00:23:30,477 --> 00:23:32,479 line:-1
在某些情况下你也


444
00:23:32,546 --> 00:23:33,981 line:-1
会想要多种操作


445
00:23:34,982 --> 00:23:36,149 line:-1
比如这个


446
00:23:36,216 --> 00:23:39,353 line:-1
我有一个想要锚定到桌子的内容


447
00:23:39,419 --> 00:23:40,687 line:-1
同时还想将单独的内容


448
00:23:40,754 --> 00:23:42,789 line:-1
锚定到图片


449
00:23:43,190 --> 00:23:45,492 line:-1
这样它们就能在同一场景中出现


450
00:23:45,559 --> 00:23:47,828 line:-1
但你的内容就可以固定在


451
00:23:47,895 --> 00:23:49,963 line:-1
两个现实世界的对象上


452
00:23:51,265 --> 00:23:52,099 line:-1
当你确定了你的内容


453
00:23:52,165 --> 00:23:54,168 line:-1
要附着在什么对象上时


454
00:23:54,234 --> 00:23:56,403 line:-1
下一步就是将内容附着上去


455
00:23:56,470 --> 00:23:58,672 line:-2
这时ModelEntity
就发挥作用了


456
00:23:58,739 --> 00:24:01,074 line:-2
这是RealityKit的
主要功能


457
00:24:01,508 --> 00:24:04,178 line:-1
你也会经常用到这个功能


458
00:24:04,678 --> 00:24:07,214 line:-2
ModelEntity附带了
在虚拟世界中集成


459
00:24:07,281 --> 00:24:11,451 line:-1
物理 动画和渲染所需的所有构建块


460
00:24:11,919 --> 00:24:13,453 line:-1
在实体组件术语中


461
00:24:13,520 --> 00:24:16,290 line:-1
是一个有着模型组件的实体


462
00:24:16,356 --> 00:24:19,393 line:-1
物理组件和碰撞组件


463
00:24:19,459 --> 00:24:21,895 line:-1
这些实体可以在代码中动态创建


464
00:24:21,962 --> 00:24:25,732 line:-2
或者直接从USDZ或
Reality File加载它们


465
00:24:27,301 --> 00:24:29,636 line:-2
这里我们从文件中
加载ModelEntity


466
00:24:30,103 --> 00:24:32,439 line:-2
你可你看到我们
通过loadModel调用


467
00:24:32,506 --> 00:24:33,941 line:-1
使负载非常明确


468
00:24:34,541 --> 00:24:36,043 line:-1
这点你要注意


469
00:24:36,109 --> 00:24:38,278 line:-1
特别是当你在做一些重要的事情


470
00:24:38,345 --> 00:24:40,314 line:-1
并且可能阻止渲染线程时


471
00:24:40,380 --> 00:24:43,717 line:-1
我们为你提供了异步变体来解决


472
00:24:43,784 --> 00:24:44,618 line:-1
这些问题


473
00:24:44,685 --> 00:24:46,854 line:-1
这在之后的演讲中会讲到


474
00:24:47,688 --> 00:24:49,423 line:-1
当你的模型加载完成


475
00:24:49,489 --> 00:24:52,359 line:-2
你就可以将其附加到锚点上
然后就可以继续下一步了


476
00:24:52,426 --> 00:24:53,827 line:-1
一旦锚点被检测到


477
00:24:53,894 --> 00:24:56,463 line:-2
你的模型就会在
现实生活中出现并且一直附着


478
00:24:58,398 --> 00:25:01,502 line:-2
现在让我们来看看
ModelEntity实际解剖结构


479
00:25:02,002 --> 00:25:04,371 line:-2
ModelEntity包含的
第一个项目是


480
00:25:04,438 --> 00:25:05,739 line:-1
网格资源


481
00:25:06,073 --> 00:25:08,275 line:-1
它提供了模型的


482
00:25:08,342 --> 00:25:09,510 line:-1
几何表示


483
00:25:10,511 --> 00:25:12,679 line:-1
网格资源可以直接作为


484
00:25:12,746 --> 00:25:13,814 line:-1
基元生成


485
00:25:13,881 --> 00:25:17,217 line:-2
或是USDZ或
Reality File的加载结果


486
00:25:18,285 --> 00:25:20,654 line:-1
因为网格通常是重量级的


487
00:25:20,721 --> 00:25:22,723 line:-1
所以它们可以在多个实体之间共享


488
00:25:22,789 --> 00:25:25,225 line:-1
这也允许我们优化渲染


489
00:25:25,292 --> 00:25:28,562 line:-1
进一步匹配绘制调用


490
00:25:28,629 --> 00:25:30,731 line:-1
如果你没有从文件中获取网格


491
00:25:30,797 --> 00:25:34,768 line:-2
你也可以直接从一组
简单的基元中生成


492
00:25:34,835 --> 00:25:37,304 line:-1
这包括块状 球状


493
00:25:37,371 --> 00:25:38,672 line:-1
平面和文字


494
00:25:38,739 --> 00:25:40,841 line:-1
同时支持平台上的所有字体


495
00:25:42,676 --> 00:25:45,879 line:-2
现在虽然网格定义了
模型的几何结构


496
00:25:45,946 --> 00:25:48,715 line:-1
你还需要一个方法来定义模型的外观


497
00:25:49,016 --> 00:25:50,918 line:-1
这时材料就发挥作用了


498
00:25:51,552 --> 00:25:54,154 line:-1
材料提供物体的外观和感觉


499
00:25:54,221 --> 00:25:56,323 line:-1
以及与周围的光如何交互


500
00:25:59,927 --> 00:26:02,596 line:-2
现在RealityKit提供
基于物理的渲染


501
00:26:02,663 --> 00:26:04,965 line:-1
也就是说我们可以模拟光线


502
00:26:05,032 --> 00:26:06,200 line:-1
在现实世界是怎样的


503
00:26:06,266 --> 00:26:07,901 line:-1
确保该物体在现实生活中可以


504
00:26:07,968 --> 00:26:08,836 line:-1
无缝融合


505
00:26:09,169 --> 00:26:11,839 line:-1
材料也自定义了对象


506
00:26:11,905 --> 00:26:13,307 line:-1
参与模拟的方式


507
00:26:14,141 --> 00:26:17,444 line:-2
材料可以在你加载
ModelEntity时进行预设


508
00:26:17,511 --> 00:26:19,046 line:-1
你也可以自己创建材料


509
00:26:19,112 --> 00:26:21,381 line:-2
使用我们在RealityKit中
提供的材料类型


510
00:26:21,448 --> 00:26:22,816 line:-1
我们待会儿可以看看


511
00:26:24,318 --> 00:26:26,587 line:-2
首先是
SimpleMaterial


512
00:26:26,954 --> 00:26:30,757 line:-1
通常基于物理的材料会包含很多参数


513
00:26:30,824 --> 00:26:32,326 line:-1
这是因为现实生活中的光线


514
00:26:32,392 --> 00:26:33,727 line:-1
十分复杂


515
00:26:34,228 --> 00:26:37,865 line:-2
现在SimpleMaterial
将其缩小为一组简洁的参数


516
00:26:37,931 --> 00:26:39,933 line:-1
这些参数可以采用标量输入


517
00:26:40,000 --> 00:26:43,470 line:-2
如果您想要改变
曲面上的输入也可以采用纹理


518
00:26:45,172 --> 00:26:48,609 line:-2
SimpleMaterial
可以让你创造有光泽的塑料


519
00:26:48,675 --> 00:26:51,845 line:-1
拉丝金属或有色玻璃


520
00:26:52,346 --> 00:26:55,249 line:-1
你可以通过三个主要属性来做到


521
00:26:55,315 --> 00:26:58,218 line:-1
基色 粗糙度和金属色


522
00:26:59,119 --> 00:27:00,187 line:-1
正如名字所说


523
00:27:00,254 --> 00:27:03,223 line:-1
基色确定材料的整体颜色


524
00:27:03,290 --> 00:27:06,827 line:-1
可以把对象从红色变成蓝色


525
00:27:08,028 --> 00:27:09,596 line:-1
金属参数本身


526
00:27:09,663 --> 00:27:12,533 line:-1
模拟了材料的导电性


527
00:27:12,599 --> 00:27:15,235 line:-1
也影响光线和表面的交互


528
00:27:16,103 --> 00:27:20,140 line:-2
因此 金属值为零表示
它是一个不良导体


529
00:27:20,207 --> 00:27:23,677 line:-1
也意味着光线会传播到表面


530
00:27:23,744 --> 00:27:26,880 line:-1
是的表面之下的光线占主导地位


531
00:27:27,848 --> 00:27:30,417 line:-1
如果我们将参数提升至1.0


532
00:27:30,884 --> 00:27:32,653 line:-1
就说明是良好导体


533
00:27:32,719 --> 00:27:35,722 line:-1
就使得表面的光线立即反射


534
00:27:35,789 --> 00:27:37,758 line:-1
就让物体看起来有金属感


535
00:27:38,659 --> 00:27:39,993 line:-1
粗糙度参数


536
00:27:40,060 --> 00:27:42,629 line:-1
影响物体的粗糙度


537
00:27:42,696 --> 00:27:45,199 line:-1
以及表面的反射程度


538
00:27:48,836 --> 00:27:50,504 line:-1
我们也提供无光材料


539
00:27:50,571 --> 00:27:53,006 line:-1
也能让物体着色


540
00:27:53,073 --> 00:27:54,775 line:-2
但不像
SimpleMaterial


541
00:27:54,842 --> 00:27:57,544 line:-1
它不参与基于物理的渲染


542
00:27:57,611 --> 00:27:59,813 line:-1
也不受场景中光线的影响


543
00:28:00,314 --> 00:28:02,749 line:-1
因此 这使它具有整体平面着色


544
00:28:03,217 --> 00:28:07,187 line:-1
这对保持问题或者内容的亮度很有用


545
00:28:07,254 --> 00:28:09,323 line:-1
即使是在黑暗的环境中


546
00:28:09,890 --> 00:28:12,492 line:-1
现在我们来看使用范例


547
00:28:12,893 --> 00:28:15,929 line:-1
我在该环境中放置了一台虚拟电视


548
00:28:15,996 --> 00:28:18,799 line:-2
电视机用的是
SimpleMaterial


549
00:28:18,866 --> 00:28:21,702 line:-1
屏幕用的是无光材料


550
00:28:22,002 --> 00:28:24,004 line:-1
如果我把灯光调暗


551
00:28:24,071 --> 00:28:26,874 line:-1
电视机暗下去了 但是屏幕还亮着


552
00:28:26,940 --> 00:28:29,710 line:-1
这是因为它不受环境光线影响


553
00:28:31,144 --> 00:28:33,313 line:-2
SimpleMaterial
和无光材料


554
00:28:33,380 --> 00:28:35,549 line:-1
都允许各种外观


555
00:28:35,616 --> 00:28:37,885 line:-2
但RealityKit
还提供第三种材料


556
00:28:37,951 --> 00:28:40,888 line:-1
它完全不一样 但是也同样的重要


557
00:28:40,954 --> 00:28:42,723 line:-2
这就是
OcclusionMaterial


558
00:28:43,690 --> 00:28:46,059 line:-2
OcclusionMaterial
不会影响对象的外观


559
00:28:46,126 --> 00:28:49,463 line:-1
是屏蔽其后面的任何对象


560
00:28:49,530 --> 00:28:51,732 line:-1
再将其传回相机中


561
00:28:52,232 --> 00:28:55,903 line:-2
这使得物体可以在
真实世界的后面移动


562
00:28:57,037 --> 00:28:58,539 line:-1
我们来看看用法


563
00:28:58,605 --> 00:29:01,742 line:-2
我在真实世界的桌子上
创建了一个平面


564
00:29:02,609 --> 00:29:05,045 line:-2
使用
OcclusionMaterial


565
00:29:05,546 --> 00:29:06,747 line:-1
这看起来


566
00:29:06,813 --> 00:29:09,082 line:-1
就像该对象是从桌子里面出来的一样


567
00:29:09,149 --> 00:29:12,219 line:-2
Cody的演示
也展示了这个效果


568
00:29:13,687 --> 00:29:14,955 line:-1
如果你不加这个效果


569
00:29:15,022 --> 00:29:17,724 line:-1
就很难评估对象的位置


570
00:29:17,791 --> 00:29:21,328 line:-1
也破坏了用户的沉浸式体验


571
00:29:23,130 --> 00:29:25,599 line:-2
这些内容涵盖了ModelEntity
的基本构建块


572
00:29:25,666 --> 00:29:26,500 line:-1
我们来快速看看


573
00:29:26,567 --> 00:29:30,003 line:-1
你怎么在代码中运用网格资源和材料


574
00:29:31,438 --> 00:29:33,640 line:-1
我们在这里生成一个盒子网格


575
00:29:33,707 --> 00:29:36,543 line:-2
以及我们动态生成
网格资源的所有调用


576
00:29:36,610 --> 00:29:38,745 line:-1
使用通用前缀约定


577
00:29:38,812 --> 00:29:41,081 line:-1
这是为了保证工作能够


578
00:29:41,148 --> 00:29:42,182 line:-1
正常进行


579
00:29:43,450 --> 00:29:46,286 line:-1
由于材料重量轻且初始化速度快


580
00:29:46,353 --> 00:29:48,789 line:-1
它们可以直接从初始化程序创建


581
00:29:49,923 --> 00:29:52,226 line:-1
当你同时有了网格和材料


582
00:29:52,292 --> 00:29:55,262 line:-2
你只需创建一个
ModelEntity并传递它们


583
00:29:56,797 --> 00:29:57,931 line:-1
有了这些


584
00:29:57,998 --> 00:29:59,533 line:-1
你就可以构建基本块


585
00:29:59,600 --> 00:30:01,468 line:-1
你就可以开始从中构建


586
00:30:01,535 --> 00:30:03,203 line:-1
AR体验的可视化内容


587
00:30:03,770 --> 00:30:05,539 line:-1
但是如果你真的想把它变成现实


588
00:30:05,606 --> 00:30:07,808 line:-1
你还要添加动画


589
00:30:08,542 --> 00:30:09,977 line:-1
就像Cody刚刚展示的


590
00:30:10,043 --> 00:30:13,247 line:-2
RealityKit支持
两种主要动画形式


591
00:30:13,313 --> 00:30:15,282 line:-1
骨架和变换动画


592
00:30:16,350 --> 00:30:18,085 line:-1
这些可以从文件中加载


593
00:30:18,151 --> 00:30:19,119 line:-1
但是变换动画


594
00:30:19,186 --> 00:30:21,822 line:-2
可以直接从
RealityKit创建


595
00:30:23,957 --> 00:30:27,427 line:-1
两种类型的动画都可以在所有实体上


596
00:30:27,494 --> 00:30:28,729 line:-2
从playAnimation
方法播放


597
00:30:28,795 --> 00:30:30,097 line:-1
当你播放动画时


598
00:30:30,163 --> 00:30:33,066 line:-1
动画控制器会给回你一个对象


599
00:30:33,634 --> 00:30:37,171 line:-1
该控制器允许你回放动画


600
00:30:37,738 --> 00:30:40,407 line:-1
所以你可以暂停播放动画


601
00:30:40,474 --> 00:30:42,309 line:-1
在正确的时间点维护你的动画


602
00:30:42,376 --> 00:30:44,211 line:-1
或者检查动画的当前状态


603
00:30:44,278 --> 00:30:45,312 line:-1
你可以重置


604
00:30:45,712 --> 00:30:47,848 line:-1
甚至可以停止动画


605
00:30:49,850 --> 00:30:52,819 line:-2
如果你没有在你的资产中
添加任何动画


606
00:30:52,886 --> 00:30:56,056 line:-2
你仍然可以通过移动功能
为你的实体设置动画


607
00:30:56,823 --> 00:31:00,227 line:-1
你首先需要提供想让动画做出的变化


608
00:31:00,294 --> 00:31:03,063 line:-1
在这种情况下我们向前移动五米


609
00:31:03,697 --> 00:31:08,302 line:-2
然后你可以选择定义变换
所在的相对空间


610
00:31:08,368 --> 00:31:10,871 line:-2
我们的情况中是现实世界
所以我设为无


611
00:31:12,272 --> 00:31:13,340 line:-1
接下来你要提供


612
00:31:13,407 --> 00:31:15,442 line:-1
动画持续时间


613
00:31:15,509 --> 00:31:16,643 line:-1
然后使用缓动函数


614
00:31:16,710 --> 00:31:18,946 line:-1
来定义动画从开始到结束的


615
00:31:19,012 --> 00:31:20,347 line:-1
平滑程度


616
00:31:20,414 --> 00:31:23,016 line:-1
这样你就可以创建简单的变换动画了


617
00:31:26,153 --> 00:31:27,821 line:-1
结合以上所有


618
00:31:27,888 --> 00:31:32,159 line:-2
RealityKit专注
构建AR体验


619
00:31:32,459 --> 00:31:34,761 line:-1
今年我们在新框架中


620
00:31:34,828 --> 00:31:36,296 line:-1
我们也引入了新工具


621
00:31:36,363 --> 00:31:38,799 line:-1
帮助你的AR开发流程


622
00:31:38,866 --> 00:31:40,434 line:-2
这就是
Reality Composer


623
00:31:42,603 --> 00:31:45,205 line:-2
我们为在Xcode 11中
可用的MacOS


624
00:31:45,272 --> 00:31:47,040 line:-2
引入了
Reality Composer


625
00:31:47,307 --> 00:31:50,511 line:-2
也为App Store中的
iPad和iPhone提供该功能


626
00:31:51,211 --> 00:31:52,145 line:-2
有了
Reality Composer


627
00:31:52,212 --> 00:31:54,815 line:-1
我们可以帮助iOS开发者


628
00:31:54,882 --> 00:31:58,585 line:-1
更加容易创建AR和3D体验


629
00:31:58,952 --> 00:32:01,655 line:-1
转向3D是一项很艰巨的任务


630
00:32:01,722 --> 00:32:02,689 line:-2
有了
Reality Composer


631
00:32:02,756 --> 00:32:05,926 line:-2
我们希望让你在构建
AR场景时能够更舒服


632
00:32:06,527 --> 00:32:08,729 line:-1
我们已经将许多功能集成到该工具中


633
00:32:08,795 --> 00:32:10,998 line:-1
现在我们来具体看看


634
00:32:12,566 --> 00:32:13,800 line:-1
当你在开始新项目时


635
00:32:13,867 --> 00:32:15,002 line:-1
你要解决的第一件事


636
00:32:15,068 --> 00:32:17,437 line:-1
只是把你的内容带到世界中


637
00:32:17,871 --> 00:32:19,473 line:-1
我们希望这个过程是简单的


638
00:32:19,540 --> 00:32:21,642 line:-1
我们已经为你提供了一组内容


639
00:32:21,708 --> 00:32:24,912 line:-1
你可以直接将其集成到场景中


640
00:32:24,978 --> 00:32:28,448 line:-2
或者你可以直接使用占位符
直到获得你想要的效果


641
00:32:28,916 --> 00:32:31,885 line:-1
该库的范围从简单形状到普通对象


642
00:32:31,952 --> 00:32:33,620 line:-1
甚至是大型建筑


643
00:32:35,189 --> 00:32:37,257 line:-1
而且它们不是静态资产


644
00:32:37,324 --> 00:32:38,959 line:-1
这里有一个螺旋形状


645
00:32:39,426 --> 00:32:41,128 line:-1
它提供许多参数


646
00:32:41,195 --> 00:32:43,297 line:-1
让你能够更加灵活创造


647
00:32:43,363 --> 00:32:46,633 line:-1
我们可以拉伸和挤压


648
00:32:46,700 --> 00:32:48,902 line:-1
我们也可加上铝材质


649
00:32:48,969 --> 00:32:51,538 line:-1
让它看起来像是金属质感


650
00:32:53,607 --> 00:32:55,142 line:-1
我们也提供丰富的模型


651
00:32:55,209 --> 00:32:57,711 line:-1
你也可以直接集成你的内容


652
00:32:57,778 --> 00:32:59,179 line:-1
比如图片帧


653
00:32:59,613 --> 00:33:02,783 line:-1
我选择了一张图片并将它放进去


654
00:33:02,850 --> 00:33:06,186 line:-1
然后挑选一个与我创建的体验风格


655
00:33:06,253 --> 00:33:07,187 line:-1
相匹配的框架


656
00:33:09,056 --> 00:33:10,424 line:-2
Reality Composer
能提供


657
00:33:10,490 --> 00:33:13,293 line:-1
所见即所得环境


658
00:33:13,360 --> 00:33:16,530 line:-1
可以让你轻松在创建时


659
00:33:16,597 --> 00:33:17,731 line:-1
预设和预显你的场景


660
00:33:18,232 --> 00:33:20,334 line:-1
在这里我可以复制一排棋子


661
00:33:20,400 --> 00:33:21,935 line:-1
换掉外表


662
00:33:22,002 --> 00:33:24,471 line:-1
来创建棋盘的另一面


663
00:33:27,841 --> 00:33:31,812 line:-2
预可视化的很大一部分
是在AR中看到你的内容


664
00:33:31,879 --> 00:33:34,047 line:-2
所以你就可以确保
它们的大小是正确的


665
00:33:34,114 --> 00:33:37,451 line:-1
并且与真实环境吻合


666
00:33:39,753 --> 00:33:42,823 line:-2
Reality Composer
还允许你在场景中添加行为


667
00:33:42,890 --> 00:33:44,324 line:-1
还能够支持简单交互


668
00:33:44,391 --> 00:33:46,793 line:-1
这样就就能使AR体验栩栩如生


669
00:33:46,860 --> 00:33:48,729 line:-1
让我们来看看这个例子


670
00:33:49,296 --> 00:33:53,033 line:-1
这里是我想要进行交互的棋盘


671
00:33:53,100 --> 00:33:54,168 line:-1
我想做的事情


672
00:33:54,234 --> 00:33:56,637 line:-1
我在点击黑子时


673
00:33:56,703 --> 00:33:59,373 line:-1
让它过去将军


674
00:33:59,940 --> 00:34:02,910 line:-1
所以第一步是打开行为面板


675
00:34:03,443 --> 00:34:05,112 line:-1
添加新行为


676
00:34:06,280 --> 00:34:08,916 line:-1
这里有很多预定行为


677
00:34:08,982 --> 00:34:11,083 line:-1
我选择轻拍翻转


678
00:34:12,018 --> 00:34:13,654 line:-1
现在该行为给了我敲击触发器


679
00:34:13,719 --> 00:34:16,056 line:-1
这可以出发一系列动作


680
00:34:16,356 --> 00:34:19,525 line:-1
可以在黑子播放动画


681
00:34:20,027 --> 00:34:20,893 line:-1
在我的交互中


682
00:34:20,960 --> 00:34:23,931 line:-1
我要修改运动类型为摇晃


683
00:34:23,996 --> 00:34:25,065 line:-1
而不是翻转


684
00:34:26,233 --> 00:34:30,637 line:-1
然后我要添加一个行动来实现移动


685
00:34:30,838 --> 00:34:33,072 line:-1
我就微调一下我们动作


686
00:34:33,940 --> 00:34:36,909 line:-1
现在我可以预览我的交互


687
00:34:37,344 --> 00:34:40,581 line:-1
现在我点击黑子 它就会摇晃


688
00:34:40,647 --> 00:34:43,083 line:-1
并且会移动到国王面前将军


689
00:34:49,022 --> 00:34:50,123 line:-1
所以 有了这些功能


690
00:34:50,190 --> 00:34:53,427 line:-2
创建看起来很棒的
AR视图和体验内容


691
00:34:53,493 --> 00:34:55,896 line:-1
就十分容易了


692
00:34:56,295 --> 00:34:58,966 line:-1
我在iPad上展示的这些功能


693
00:34:59,032 --> 00:35:02,102 line:-2
在macOS和
iPhone上也可用


694
00:35:03,704 --> 00:35:06,673 line:-2
现在 虽然Reality Composer
作为单独的app运行


695
00:35:06,740 --> 00:35:07,708 line:-1
它与Xcode的


696
00:35:07,774 --> 00:35:10,110 line:-1
开发和生态系统紧密集成


697
00:35:10,744 --> 00:35:12,379 line:-1
当你要构建Xcode项目


698
00:35:12,946 --> 00:35:14,715 line:-1
你项目中的内容


699
00:35:15,115 --> 00:35:18,118 line:-1
会集成并优化到你的app中


700
00:35:18,619 --> 00:35:22,189 line:-2
但是创建Xcode项目
和创建app间


701
00:35:22,256 --> 00:35:24,091 line:-1
也能发生一些小奇迹


702
00:35:24,157 --> 00:35:25,726 line:-1
这就是代码生成


703
00:35:26,560 --> 00:35:29,029 line:-2
作为该步骤的一部分
你项目中的内容


704
00:35:29,096 --> 00:35:32,299 line:-2
能够被编译
和优化为Reality File


705
00:35:32,566 --> 00:35:34,902 line:-1
接下来 我们会内省该文件


706
00:35:34,968 --> 00:35:37,604 line:-2
并生成用于访问你
在场景中创建的对象的


707
00:35:37,671 --> 00:35:39,640 line:-1
自定义代码


708
00:35:40,974 --> 00:35:42,042 line:-1
现在该代码生成步骤


709
00:35:42,109 --> 00:35:44,978 line:-1
由Xcode在幕后自动执行


710
00:35:45,045 --> 00:35:49,416 line:-1
并建立对场景中内容的强类型访问


711
00:35:49,783 --> 00:35:52,553 line:-2
这有一个很好的优势
如果你的场景中


712
00:35:52,619 --> 00:35:55,155 line:-1
对象的命名有任何的不匹配


713
00:35:55,222 --> 00:35:58,759 line:-1
你就会收到编译报错而不是运行崩溃


714
00:35:59,960 --> 00:36:02,129 line:-1
代码生成可以让你直接访问


715
00:36:02,196 --> 00:36:05,532 line:-1
场景行为中的调用触发器


716
00:36:05,599 --> 00:36:08,168 line:-1
还可以在代码中自定义行为


717
00:36:09,303 --> 00:36:12,773 line:-2
我们觉得凭借Reality Composer
在构建内容上的经验


718
00:36:12,840 --> 00:36:15,175 line:-1
Xcode中的编码是无缝的


719
00:36:16,910 --> 00:36:19,346 line:-2
我们来快速预览
Reality Composer


720
00:36:19,413 --> 00:36:21,682 line:-1
我还想向你们展示更多


721
00:36:22,015 --> 00:36:25,018 line:-1
因为我们今天说的只是冰山一角


722
00:36:25,085 --> 00:36:27,588 line:-1
还有很多东西我没有讲到 比如网络


723
00:36:27,654 --> 00:36:31,325 line:-1
物理团体 光线投射 手势等等


724
00:36:31,391 --> 00:36:33,961 line:-1
所以我建议你听听我们其他的演技


725
00:36:34,595 --> 00:36:35,762 line:0
明天早上10:00


726
00:36:35,829 --> 00:36:38,465 line:0
我们有用Reality Composer
创建app的演讲


727
00:36:38,532 --> 00:36:41,401 line:0
会告诉你如何创建AR app


728
00:36:41,468 --> 00:36:43,971 line:0
而这是RealityKit
的多人游戏


729
00:36:44,838 --> 00:36:46,440 line:0
周四早上11:00


730
00:36:46,507 --> 00:36:49,643 line:0
我们有用Reality Composer
创建AR体验


731
00:36:49,710 --> 00:36:52,579 line:0
该演讲将会探讨如何将
Reality Composer


732
00:36:52,646 --> 00:36:54,915 line:0
集成到您的AR app工作流程中


733
00:36:55,282 --> 00:36:57,784 line:0
明天中午请加入我们的实验室


734
00:36:57,851 --> 00:37:01,288 line:0
我们会进行答疑 可能会对你有帮助


735
00:37:01,355 --> 00:37:04,758 line:0
谢谢大家光临 希望大家在
WWDC过得开心

