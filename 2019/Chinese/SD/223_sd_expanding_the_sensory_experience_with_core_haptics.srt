1
00:00:06,173 --> 00:00:10,077 line:0
（设计音频力触觉体验）


2
00:00:10,143 --> 00:00:11,011 line:-1
欢迎大家参加我们的演讲


3
00:00:13,647 --> 00:00:18,018 line:-2
声音一直以来都是创建真正优秀的
app的一个非常重要的部分


4
00:00:18,252 --> 00:00:21,154 line:-1
无论是给游戏创建


5
00:00:21,221 --> 00:00:22,589 line:-1
空气声床


6
00:00:22,656 --> 00:00:26,026 line:-2
还是把用户的注意力吸引到
重要的警告或通知上


7
00:00:26,960 --> 00:00:28,061 line:-1
力触觉的出现


8
00:00:28,128 --> 00:00:32,031 line:-2
给这种体验添加了一种
全新的维度——触摸


9
00:00:32,366 --> 00:00:36,770 line:0
今天的演讲分为两个部分
设计和开发


10
00:00:37,104 --> 00:00:41,375 line:-2
首先我要向大家介绍
Hugo和Camille


11
00:00:41,441 --> 00:00:44,111 line:-1
他们会上台来跟大家讲关于


12
00:00:44,178 --> 00:00:47,614 line:-2
给app设计优秀的力触觉体验的
深刻见解和指导


13
00:01:08,101 --> 00:01:10,070 line:-1
我相信你们一定很熟悉那个声音


14
00:01:10,904 --> 00:01:12,906 line:-1
多年来它一直是我们生活的一部分


15
00:01:13,173 --> 00:01:16,076 line:-2
但在2019年
我认为我们可以做得更好


16
00:01:16,610 --> 00:01:18,045 line:-1
我是Camille Moussette


17
00:01:18,111 --> 00:01:20,814 line:-1
Apple设计团队的交互设计师


18
00:01:20,881 --> 00:01:24,084 line:-2
我是Hugo Verweij
是设计团队的声音设计师


19
00:01:25,118 --> 00:01:29,590 line:-2
这场演讲是关于
设计优秀的音频力触觉体验


20
00:01:29,656 --> 00:01:33,093 line:-1
我们的目标是激发你的灵感


21
00:01:33,727 --> 00:01:35,729 line:-1
并让你们了解一些实用的想法


22
00:01:35,796 --> 00:01:38,265 line:-1
关于如何设计很棒的声音和力触觉


23
00:01:38,332 --> 00:01:40,267 line:-2
当声音和力触觉同时使用时
如果用的合适的话


24
00:01:40,834 --> 00:01:43,103 line:-1
可以把你的app带到一个新的维度


25
00:01:45,606 --> 00:01:49,109 line:-2
在接下来的30分钟内
我们要讲三件事


26
00:01:49,376 --> 00:01:52,479 line:-2
第一件 我们将介绍什么是
音频-力触觉体验


27
00:01:53,814 --> 00:01:56,049 line:-1
然后我们要了解三个指导原则


28
00:01:56,116 --> 00:01:58,118 line:-1
用于帮助你设计那些优秀的体验


29
00:01:58,952 --> 00:02:02,556 line:-2
最后我们要了解
不同的技术和实用技巧


30
00:02:02,956 --> 00:02:06,126 line:-1
让那些体验变得既优秀又引人注目


31
00:02:07,394 --> 00:02:10,797 line:-1
那么什么是音频-力触觉体验？


32
00:02:10,864 --> 00:02:13,901 line:-1
嗯 让我们先听一个声音


33
00:02:16,603 --> 00:02:18,605 line:-1
好的 让我们把音量调低点


34
00:02:21,708 --> 00:02:23,911 line:-1
如果我再把音量调低点会怎么样呢？


35
00:02:27,147 --> 00:02:30,150 line:-1
哇哦 音量太低了 我听不见它了


36
00:02:30,317 --> 00:02:33,520 line:-2
你知道的 我们的耳朵再也不能识别
这个声音了


37
00:02:33,587 --> 00:02:35,989 line:-1
但如果你把手指放在音响上


38
00:02:36,056 --> 00:02:39,159 line:-1
你会感觉到它在前后移动


39
00:02:40,194 --> 00:02:45,432 line:-2
我们设计了一个触觉引擎
专门播放这些低频率的声音


40
00:02:45,499 --> 00:02:47,167 line:-1
你只能感觉到它们


41
00:02:47,968 --> 00:02:53,173 line:-2
这是iPhone
它旁边是音响模块


42
00:02:55,375 --> 00:02:57,444 line:-1
来自触觉引擎的力触觉感觉


43
00:02:57,511 --> 00:03:01,181 line:-1
与来自音响的声音同步


44
00:03:02,416 --> 00:03:06,186 line:-2
结果就是我们称之为
音频-力触觉体验的体验


45
00:03:06,553 --> 00:03:09,790 line:-1
但力触觉感觉是要被感觉到的


46
00:03:09,857 --> 00:03:14,862 line:-1
因为我们要在舞台上、在屏幕上呈现


47
00:03:14,928 --> 00:03:18,198 line:-2
我们需要你们的帮助
想象一下感觉起来是什么样的


48
00:03:18,632 --> 00:03:23,203 line:-2
我们会尽我们所能像这样帮助你们
可视化力触觉


49
00:03:26,306 --> 00:03:30,210 line:-1
或像这样播放一个代表力触觉的声音


50
00:03:34,948 --> 00:03:38,218 line:-1
我们还将可视化时间线上的这些体验


51
00:03:38,785 --> 00:03:41,121 line:-2
Camille将在
快速力触觉设计入门中


52
00:03:41,188 --> 00:03:44,224 line:-2
告诉你们关于它们是如何实现的
更多信息


53
00:03:46,393 --> 00:03:52,065 line:-2
iOS 13引入了一个新API
用于设计你自己的自定义力触觉


54
00:03:52,132 --> 00:03:54,234 line:-1
它叫做Core Hapitcs


55
00:03:55,569 --> 00:04:01,241 line:-2
这个新API可以让你们开发人员们
在iPhone上完全使用触觉引擎


56
00:04:04,878 --> 00:04:09,249 line:-1
触觉引擎可以渲染许多不同的体验


57
00:04:09,683 --> 00:04:12,819 line:-1
并可以生成像这样的自定义震动


58
00:04:13,453 --> 00:04:14,321 line:-1
跟这个类似


59
00:04:14,388 --> 00:04:16,290 line:-1
它听起来和感觉起来就像这样：


60
00:04:20,194 --> 00:04:21,562 line:-1
那么正如你所看到的


61
00:04:21,628 --> 00:04:24,932 line:-1
我们使用了波形和声音来表达力触觉


62
00:04:24,998 --> 00:04:25,899 line:-1
正如Hugo所说的


63
00:04:26,266 --> 00:04:30,270 line:-2
你需要自己在脑海中
把这个想象成一种沉默体验


64
00:04:31,038 --> 00:04:33,273 line:-1
这应该被感觉到 而不是听到


65
00:04:35,209 --> 00:04:38,078 line:0
我们可以播放这些连续的体验


66
00:04:38,645 --> 00:04:42,282 line:0
我们还有更短、更紧凑的声音


67
00:04:43,517 --> 00:04:47,821 line:0
是单一循环 我们把这种体验叫做
瞬时体验


68
00:04:48,622 --> 00:04:50,991 line:0
非常短暂


69
00:04:51,358 --> 00:04:56,296 line:0
感觉像是一个撞击声、一个打击声
或一个轻轻的敲打声


70
00:04:59,066 --> 00:05:00,634 line:0
非常短暂


71
00:05:00,701 --> 00:05:05,305 line:0
然后我们实际上可以进一步改善它


72
00:05:05,906 --> 00:05:08,075 line:0
接着我们将使用基本形状


73
00:05:08,141 --> 00:05:10,310 line:0
来代表不同模式的力触觉


74
00:05:10,644 --> 00:05:13,313 line:0
我们的瞬时体验是一个简单的矩形


75
00:05:14,081 --> 00:05:15,315 line:0
因为我们的触觉引擎


76
00:05:15,382 --> 00:05:18,685 line:0
是专门用于力触觉的


77
00:05:18,752 --> 00:05:21,321 line:0
我们可以用不同方式调整体验


78
00:05:21,822 --> 00:05:25,325 line:0
首先我们可以调整强度或振幅


79
00:05:26,760 --> 00:05:31,331 line:0
我们还可以让它感觉更圆润或柔和


80
00:05:32,399 --> 00:05:37,337 line:0
在另一个极端
我们可以让它更精确和更利落


81
00:05:38,071 --> 00:05:41,341 line:0
使用触觉引擎可以实现这种体验


82
00:05:45,445 --> 00:05:46,713 line:-1
最后


83
00:05:47,047 --> 00:05:50,384 line:-1
这就结束了我们对于力触觉设计


84
00:05:50,450 --> 00:05:53,754 line:-2
以及什么是Core Haptics API的
快速介绍


85
00:05:53,820 --> 00:05:56,857 line:-1
我们有一个你可以调节的强度


86
00:05:56,924 --> 00:05:59,426 line:-1
和另一个设计维度 力触觉锐度


87
00:05:59,493 --> 00:06:03,263 line:-1
你可以控制两种类型的事件


88
00:06:03,330 --> 00:06:05,365 line:-1
连续事件和瞬时事件


89
00:06:06,433 --> 00:06:09,903 line:-1
现在让我们看一下


90
00:06:09,970 --> 00:06:12,372 line:-2
我们今天要分享给你们的
三个指导准则


91
00:06:14,107 --> 00:06:16,376 line:-1
第一个是因果关系


92
00:06:17,077 --> 00:06:19,379 line:-1
然后是协调


93
00:06:20,047 --> 00:06:22,382 line:-1
最后是效用


94
00:06:23,317 --> 00:06:26,253 line:-1
这些概念或方法


95
00:06:28,021 --> 00:06:30,724 line:-2
我们在Apple的
所有工作中都用到了


96
00:06:30,791 --> 00:06:34,394 line:-2
我们认为它们也可以给你自己的
app体验提供帮助


97
00:06:34,661 --> 00:06:35,963 line:-1
对于其中每一个


98
00:06:36,029 --> 00:06:39,900 line:-2
我们都先了解概念
然后再通过例子解释


99
00:06:39,967 --> 00:06:41,034 line:-1
让我们开始吧


100
00:06:42,336 --> 00:06:43,403 line:-1
因果关系


101
00:06:44,204 --> 00:06:47,074 line:-1
因果关系是有用的反馈


102
00:06:47,140 --> 00:06:49,409 line:-1
必须明确表明是谁导致了因果关系


103
00:06:51,111 --> 00:06:54,414 line:-1
假如你是一名足球运动员正在踢球


104
00:06:54,882 --> 00:06:57,417 line:-1
踢球的体验是什么样的呢？


105
00:07:00,821 --> 00:07:04,324 line:-1
有一个明确的关系


106
00:07:04,391 --> 00:07:06,426 line:-1
在起因之间有个明确的关系


107
00:07:07,027 --> 00:07:08,662 line:-1
脚碰撞球


108
00:07:08,729 --> 00:07:09,563 line:-1
而结果是


109
00:07:09,630 --> 00:07:12,432 line:-1
冲击的声音和冲击的感觉


110
00:07:12,966 --> 00:07:16,904 line:-1
这种体验听起来和感觉到的感觉


111
00:07:16,970 --> 00:07:21,441 line:-1
由相交互的对象的品质决定


112
00:07:21,508 --> 00:07:24,444 line:-1
即鞋的材料和球的材料


113
00:07:26,280 --> 00:07:28,448 line:-1
然后是动作的力度


114
00:07:29,116 --> 00:07:31,451 line:-1
是狠狠的一脚还是温柔的一脚？


115
00:07:31,652 --> 00:07:32,886 line:-1
而环境


116
00:07:33,220 --> 00:07:36,456 line:-1
是体育场或足球场的声学效果


117
00:07:36,924 --> 00:07:40,460 line:-1
因为我们熟悉这些东西


118
00:07:40,694 --> 00:07:45,465 line:-2
如果我们使用一种完全不同的声音
是毫无意义的


119
00:07:45,766 --> 00:07:48,468 line:-1
让我们尝试一下 把它推到顶部


120
00:07:51,772 --> 00:07:54,007 line:-1
很奇怪 这样不行


121
00:07:54,408 --> 00:07:57,477 line:-1
当为你的体验设计声音时


122
00:07:57,544 --> 00:08:00,514 line:-2
考虑一下当你与一个物理对象
相交互时的


123
00:08:00,581 --> 00:08:04,251 line:-1
感觉和声音效果


124
00:08:06,687 --> 00:08:10,490 line:-2
举个例子 让我们看一下
Apple Pay确认功能


125
00:08:11,191 --> 00:08:14,628 line:-1
我们希望声音和力触觉能完美匹配


126
00:08:14,695 --> 00:08:17,497 line:-1
屏幕上的动画 即挑钩


127
00:08:20,367 --> 00:08:22,035 line:-1
我们从哪开始呢？


128
00:08:22,903 --> 00:08:26,507 line:-1
嗯 付款时你会想到哪种声音？


129
00:08:26,940 --> 00:08:28,876 line:-1
钱听起来是什么样的？


130
00:08:29,476 --> 00:08:32,846 line:-2
使用Apple Pay
付款时会发生哪些交互？


131
00:08:32,913 --> 00:08:36,517 line:-2
当然了 我们要看一下屏幕上的
挑钩动画


132
00:08:37,518 --> 00:08:42,523 line:-2
应该产生积极的感觉
就像确认交易成功一样


133
00:08:44,157 --> 00:08:45,759 line:-1
这里有一些声音的示例


134
00:08:45,826 --> 00:08:48,529 line:-1
可以用作这种确认的声音


135
00:08:51,298 --> 00:08:52,533 line:-1
这是第一个


136
00:08:53,600 --> 00:08:55,002 line:-1
这个声音令人愉悦


137
00:08:55,068 --> 00:08:58,539 line:-1
但听起来有点太欢快、太轻佻了


138
00:08:59,039 --> 00:09:03,544 line:-1
下一个声音与挑钩动画很相配


139
00:09:05,779 --> 00:09:08,448 line:-1
但我们感觉它的特征不太合适


140
00:09:08,515 --> 00:09:10,551 line:-1
有点太刺耳了


141
00:09:10,951 --> 00:09:12,719 line:-1
然后还有这个声音


142
00:09:12,786 --> 00:09:16,557 line:-2
这是我们最后选择的声音
你们都知道的


143
00:09:16,957 --> 00:09:20,394 line:-2
这个声音不是特别严肃
很明显是个确认的声音


144
00:09:22,162 --> 00:09:23,697 line:-1
好的 我们已经选好声音了


145
00:09:24,097 --> 00:09:25,566 line:-1
现在看看力触觉


146
00:09:26,567 --> 00:09:30,437 line:-1
我们的第一个想法是模拟声音的波形


147
00:09:30,504 --> 00:09:33,106 line:-1
因为它可以完美地匹配声音


148
00:09:33,173 --> 00:09:35,108 line:-1
但在做了一些试验之后


149
00:09:35,509 --> 00:09:39,580 line:-2
我们发现两次简单的轻触实际上
效果更好


150
00:09:40,547 --> 00:09:43,584 line:-1
我喜欢把这些看作是小作曲


151
00:09:43,650 --> 00:09:44,918 line:-1
我们有两种乐器


152
00:09:44,985 --> 00:09:49,156 line:-2
一种是你可以听到的
一种是你可以感觉到的 力触觉


153
00:09:49,723 --> 00:09:53,427 line:-1
它们不必总是播放同样的东西


154
00:09:53,493 --> 00:09:56,597 line:-1
但它们必须以同样的节奏播放


155
00:09:57,197 --> 00:09:58,065 line:-1
这是同时播放的效果


156
00:09:58,131 --> 00:10:01,602 line:-1
请注意较低的声音是力触觉


157
00:10:05,806 --> 00:10:09,610 line:-1
好的 然后这就是动画的最后体验


158
00:10:09,910 --> 00:10:13,580 line:-2
再一次 自己想象一下当你付款时
轻触的声音


159
00:10:19,853 --> 00:10:24,625 line:-2
接下来 让我们看第二个指导准则
协调


160
00:10:24,992 --> 00:10:29,463 line:-1
协调是关于看起来的感觉


161
00:10:29,530 --> 00:10:30,631 line:-1
听起来的感觉


162
00:10:32,699 --> 00:10:34,034 line:-1
在现实世界中


163
00:10:35,169 --> 00:10:39,006 line:-1
音频力触觉和视觉很自然地相协调


164
00:10:39,072 --> 00:10:41,642 line:-1
因为起因和结果有明确的关系


165
00:10:43,377 --> 00:10:47,648 line:-2
然而在数字世界中
我们必须手动完成这个工作


166
00:10:48,015 --> 00:10:52,653 line:-2
新体验是在加工处理过程中
创造出来的


167
00:10:54,188 --> 00:10:58,292 line:-1
输入和输出需要由你 开发者


168
00:10:58,358 --> 00:10:59,326 line:-1
进行特别设计


169
00:10:59,760 --> 00:11:04,364 line:-2
让我们从创建一个简单的可视化界面
开始


170
00:11:05,499 --> 00:11:07,734 line:0
我们让一个简单的球体


171
00:11:07,801 --> 00:11:10,671 line:0
下落并碰撞屏幕底部


172
00:11:11,905 --> 00:11:14,675 line:0
接下来让我们添加音频反馈


173
00:11:20,347 --> 00:11:22,216 line:0
现在我们选择了一个声音


174
00:11:22,749 --> 00:11:27,120 line:0
响应物理影响或球体的跳动


175
00:11:27,754 --> 00:11:30,457 line:0
这个声音要简短、精确和清晰


176
00:11:30,524 --> 00:11:34,695 line:0
但我们还要根据撞击的速度调整振幅


177
00:11:35,495 --> 00:11:39,199 line:0
现在让我们做一项额外的工作
引入第三种感觉


178
00:11:39,266 --> 00:11:40,701 line:-1
力触觉反馈


179
00:11:44,538 --> 00:11:48,709 line:-1
你们自己想象一下那种感觉


180
00:11:49,009 --> 00:11:52,246 line:0
再一次 我们尝试


181
00:11:52,312 --> 00:11:54,915 line:-2
让球体撞击屏幕底部的声音
听起来和谐


182
00:11:54,982 --> 00:11:58,151 line:0
因此我们选择了一个锐度很高的
瞬时事件


183
00:11:58,218 --> 00:12:02,723 line:0
我们还调整了声音强度
以匹配弹起的速度


184
00:12:03,290 --> 00:12:04,725 line:-1
我们还没有完成


185
00:12:05,859 --> 00:12:08,662 line:-1
因为考虑三种感觉之间的同步性


186
00:12:08,729 --> 00:12:11,732 line:0
非常重要


187
00:12:13,467 --> 00:12:15,335 line:0
这就是产生魔力的地方


188
00:12:15,402 --> 00:12:19,740 line:0
在这里你要想象一个真正的球与墙壁
发生了碰撞


189
00:12:20,407 --> 00:12:22,976 line:0
这有一个例子 我们打破了这个规则


190
00:12:23,043 --> 00:12:24,878 line:0
我们在视觉和其余的反馈之间


191
00:12:24,945 --> 00:12:26,747 line:0
引入了延迟


192
00:12:29,816 --> 00:12:30,984 line:0
很明显打破了协调


193
00:12:31,051 --> 00:12:34,755 line:-1
完全想象不到是一个真正弹跳的球


194
00:12:35,155 --> 00:12:38,759 line:-1
因此协调需要非常的谨慎和小心


195
00:12:39,526 --> 00:12:41,228 line:-1
但如果做得好的话


196
00:12:41,628 --> 00:12:44,765 line:0
可以打造令人非常愉悦和神奇的体验


197
00:12:46,767 --> 00:12:48,268 line:-1
让我们从


198
00:12:48,335 --> 00:12:51,872 line:-2
交互、视觉、音频
和力触觉之间的概念


199
00:12:51,939 --> 00:12:53,040 line:-1
来看不同的协调


200
00:12:53,106 --> 00:12:55,776 line:-2
从品质和整体行为方面来看
不同的协调


201
00:12:56,376 --> 00:12:59,980 line:-2
看一下屏幕上的小绿点
我们会让它动起来


202
00:13:00,047 --> 00:13:01,615 line:-1
想象一下哪种音频


203
00:13:01,682 --> 00:13:04,785 line:-1
哪种力触觉可以与那个绿点相匹配


204
00:13:06,286 --> 00:13:10,791 line:-2
如果我们添加一种轻快的弹动
或不同的跳动


205
00:13:12,059 --> 00:13:15,796 line:-2
哪种音频 哪种力触觉
可以与这些视觉相匹配？


206
00:13:16,029 --> 00:13:18,866 line:-1
如果屏幕上有一个大对象呢？


207
00:13:18,932 --> 00:13:19,967 line:-1
听起来是不是不一样？


208
00:13:20,033 --> 00:13:22,803 line:-1
感觉起来是不是与一个小点不一样？


209
00:13:24,738 --> 00:13:27,040 line:-1
如果我们添加不同的动态行为


210
00:13:27,107 --> 00:13:28,809 line:-1
不同的能量级


211
00:13:29,142 --> 00:13:32,179 line:-1
一个紧迫的、跳动的点


212
00:13:32,246 --> 00:13:34,314 line:-1
确实能吸引注意力


213
00:13:34,381 --> 00:13:36,149 line:-2
可能需要一种不同的声音
不同的力触觉


214
00:13:36,216 --> 00:13:39,920 line:-2
最后是一种感觉平静
或像是心跳一样的声音


215
00:13:39,987 --> 00:13:41,855 line:-1
代表一种不同的反馈类型


216
00:13:41,922 --> 00:13:45,058 line:-2
考虑一下你尝试在你的app中
传达的速度、能量级


217
00:13:45,125 --> 00:13:49,263 line:-1
以及不同的品质


218
00:13:49,329 --> 00:13:53,834 line:-1
设计反馈是关于一致性和统一性


219
00:13:57,404 --> 00:14:01,175 line:-1
我要举例说明协调准则如何帮助我们


220
00:14:01,241 --> 00:14:05,512 line:-2
针对Apple Watch
设计声音和力触觉


221
00:14:05,913 --> 00:14:08,215 line:-1
我们都习惯用手机


222
00:14:08,282 --> 00:14:10,784 line:-1
并习惯手机的保守氛围


223
00:14:10,851 --> 00:14:13,320 line:-2
当Apple Watch
横空出世时


224
00:14:13,387 --> 00:14:15,856 line:-1
作为第一种使用触觉引擎的设备


225
00:14:16,156 --> 00:14:19,092 line:-1
它是第一种可以精确地同步


226
00:14:19,159 --> 00:14:20,861 line:-1
声音和力触觉的设备


227
00:14:22,095 --> 00:14:23,630 line:-1
现在对于Series 4


228
00:14:23,697 --> 00:14:28,869 line:-2
给表冠的旋转添加了力触觉
和一种非常微妙的声音


229
00:14:30,571 --> 00:14:34,541 line:-2
还记得Camille刚才描述过的
尖锐并精确的力触觉吗？


230
00:14:34,608 --> 00:14:37,244 line:-1
我们就给表冠使用了那种力触觉


231
00:14:37,945 --> 00:14:42,883 line:-2
但我们对它进行了调整
从而匹配表冠的小尺寸


232
00:14:43,217 --> 00:14:46,553 line:-1
因此力触觉感觉像是手指在触摸表冠


233
00:14:46,620 --> 00:14:48,889 line:-1
而不是手腕


234
00:14:50,290 --> 00:14:54,261 line:-2
对于声音
我们参观了传统的手表制作


235
00:14:54,328 --> 00:14:55,829 line:-1
从中获得灵感


236
00:14:56,096 --> 00:14:59,733 line:-2
我们听了并记录了
各种各样不同的手表的声音


237
00:14:59,800 --> 00:15:02,903 line:-2
其中有一些听起来非常引人注意
比如这个声音


238
00:15:06,640 --> 00:15:07,641 line:-1
然后现实世界中还有一些


239
00:15:07,708 --> 00:15:12,112 line:-1
其它的物理机械对象


240
00:15:12,179 --> 00:15:15,182 line:-1
拥有类似的声音 比如自行车轮毂


241
00:15:17,117 --> 00:15:20,187 line:-2
我们想找到一种声音
听起来自然就感觉


242
00:15:20,254 --> 00:15:21,955 line:-1
来自这样一台设备


243
00:15:23,190 --> 00:15:26,927 line:-2
我们在开始制作我们自己的声音之前
聆听了这些声音作为灵感来源


244
00:15:28,562 --> 00:15:29,630 line:-1
然后就有了这个结果


245
00:15:29,696 --> 00:15:32,199 line:-1
在你的手腕上 听起来很安静


246
00:15:32,266 --> 00:15:34,968 line:-2
就像是你所期待的手表
发出的声音一样


247
00:15:42,509 --> 00:15:46,113 line:-1
声音和力触觉之间的完美协调


248
00:15:46,713 --> 00:15:49,950 line:-1
打造了对机械表冠的想象


249
00:15:51,385 --> 00:15:53,687 line:-1
然后与这种机械的感觉相匹配


250
00:15:53,754 --> 00:15:59,927 line:-2
我们的动作团队修改了动画
从而当使用表冠时


251
00:15:59,993 --> 00:16:01,728 line:-1
能捕捉到它的声音和力触觉


252
00:16:01,795 --> 00:16:02,963 line:-1
让我们看一下


253
00:16:05,566 --> 00:16:09,970 line:-2
我要再播放一遍
请看表冠把力触觉可视化了


254
00:16:12,639 --> 00:16:15,876 line:-1
结果是一种精确的机械感觉


255
00:16:15,943 --> 00:16:19,980 line:-1
你所看到的与你所听到的完美协调


256
00:16:24,451 --> 00:16:28,989 line:-1
接下来我们看第三个指导准则效用


257
00:16:29,189 --> 00:16:32,492 line:0
效用是仅当你可以提供明确的值


258
00:16:32,559 --> 00:16:36,997 line:0
并有利于你的app体验时添加
音频和力触觉反馈


259
00:16:37,931 --> 00:16:39,666 line:0
使用适度


260
00:16:39,733 --> 00:16:43,003 line:0
不要仅仅因为你可以添加声音
和力触觉就进行添加


261
00:16:43,904 --> 00:16:48,308 line:-2
让我们看简单的ARKit app
我们做了该app用于阐述这个观点


262
00:16:49,276 --> 00:16:53,013 line:-2
在这个app中 我们在环境中
添加了一个虚拟计时器


263
00:16:53,313 --> 00:16:57,784 line:-1
交互依赖于那个虚拟计时器的距离


264
00:16:57,851 --> 00:17:00,020 line:-1
让我们先看一下视频


265
00:17:14,067 --> 00:17:15,368 line:-1
在这个app中


266
00:17:15,435 --> 00:17:17,905 line:-2
我们有目的地设计了音频
和力触觉反馈


267
00:17:17,971 --> 00:17:20,207 line:-1
用于补充AR交互


268
00:17:20,273 --> 00:17:23,877 line:-1
和用户体验的最重要的部分


269
00:17:23,944 --> 00:17:26,046 line:-1
这是指靠近计时器


270
00:17:26,113 --> 00:17:30,717 line:-2
或远离计时器
从而调整音频力触觉体验


271
00:17:30,784 --> 00:17:34,054 line:-1
三种感觉是连贯和统一的


272
00:17:34,655 --> 00:17:38,792 line:-1
我们避免其它声音效果或力触觉反馈


273
00:17:38,859 --> 00:17:43,063 line:-2
与app中的不同元素进行交互
或其它的次要交互


274
00:17:44,431 --> 00:17:48,068 line:-1
不添加声音和力触觉通常个好主意


275
00:17:48,435 --> 00:17:52,072 line:-1
因此 从识别你的app中


276
00:17:52,406 --> 00:17:53,440 line:-2
用于音频-力触觉反馈的可能的
位置开始


277
00:17:53,507 --> 00:17:56,643 line:-1
然后仅注意那些


278
00:17:56,710 --> 00:18:00,080 line:-1
能改善体验或表达重要信息的元素


279
00:18:01,014 --> 00:18:03,083 line:-1
然后 你是否尝试添加更多？


280
00:18:03,383 --> 00:18:05,786 line:-2
但也许不要这样做
那会让人感觉应接不暇


281
00:18:05,853 --> 00:18:10,090 line:-1
并减少非常重要的元素的分量


282
00:18:13,126 --> 00:18:14,928 line:-1
总结一下


283
00:18:14,995 --> 00:18:18,098 line:-1
这还是指导准则


284
00:18:18,332 --> 00:18:20,100 line:-1
我们讲了因果关系


285
00:18:20,467 --> 00:18:23,303 line:-2
讲了它如何帮助我们思考
是什么发出了声音


286
00:18:23,370 --> 00:18:25,105 line:-1
以及是什么导致了力触觉


287
00:18:25,672 --> 00:18:29,776 line:-2
关于协调 我们讲了声音、力触觉
和视觉


288
00:18:29,843 --> 00:18:33,113 line:-1
如何共同打造优秀的用户体验


289
00:18:33,680 --> 00:18:34,781 line:-1
以及效用


290
00:18:35,582 --> 00:18:39,152 line:-2
讲了如何从使用
你的app的人的视角


291
00:18:39,219 --> 00:18:43,123 line:-1
来看使用体验


292
00:18:45,592 --> 00:18:49,696 line:-1
接下来让我们看一些技术和使用技巧


293
00:18:49,763 --> 00:18:52,599 line:-1
我们可以和这三个指导准则一起使用


294
00:18:53,066 --> 00:18:55,135 line:-1
打造优秀的音频-力触觉体验


295
00:18:56,570 --> 00:19:01,141 line:-2
首先简单回顾一下
Core Haptics中可用的基元


296
00:19:02,643 --> 00:19:05,212 line:-1
我们有两个创建代码块供你使用


297
00:19:05,279 --> 00:19:07,581 line:-1
第一个叫做瞬时


298
00:19:07,648 --> 00:19:12,319 line:-1
它是尖锐、紧凑的力触觉体验


299
00:19:12,386 --> 00:19:14,955 line:-1
感觉像是轻触或轻击


300
00:19:15,022 --> 00:19:17,958 line:-1
第二个是连续的力触觉体验


301
00:19:18,025 --> 00:19:19,526 line:-1
随时间延伸


302
00:19:19,593 --> 00:19:23,163 line:-2
你可以指定持续时间
它可以持续多久


303
00:19:24,364 --> 00:19:27,668 line:-1
对于瞬时 有两个可用的设计层面


304
00:19:27,734 --> 00:19:30,070 line:-1
你可以自己控制


305
00:19:30,137 --> 00:19:33,740 line:-1
分别是力触觉强度和力触觉锐度


306
00:19:33,807 --> 00:19:37,978 line:-2
从而在较低的值时
创建一些更圆润或柔和的声音


307
00:19:38,045 --> 00:19:42,182 line:-2
在较高的值时创建一种更精确、
更机械化和更清脆的声音


308
00:19:42,850 --> 00:19:46,086 line:-1
强度会如预期的那样


309
00:19:46,153 --> 00:19:47,187 line:-1
改变体验的幅度


310
00:19:48,488 --> 00:19:53,193 line:-1
对于连续性 有两种类似的设计层面


311
00:19:53,260 --> 00:19:55,696 line:-1
分别是锐度和强度


312
00:19:56,230 --> 00:20:00,534 line:-2
我们可以创建更有机的
或像是隆隆声一样的体验


313
00:20:00,601 --> 00:20:01,635 line:-1
随时间延伸


314
00:20:01,702 --> 00:20:04,271 line:-1
或一种更精确、更机械化的声音


315
00:20:04,338 --> 00:20:06,206 line:-1
当锐度的值较高时


316
00:20:07,407 --> 00:20:09,610 line:-1
在Core Haptics API中


317
00:20:09,676 --> 00:20:11,245 line:-1
还有更多细节和功能


318
00:20:11,311 --> 00:20:14,214 line:-1
请一定查看在线文档


319
00:20:15,382 --> 00:20:17,017 line:-1
当设计声音时


320
00:20:17,084 --> 00:20:21,221 line:-2
请记住哪些可以最好地体现
这些力触觉


321
00:20:21,555 --> 00:20:23,090 line:-1
对于尖锐的瞬时


322
00:20:23,156 --> 00:20:26,226 line:-1
很可能一声尖锐的钟声就很好


323
00:20:28,395 --> 00:20:31,231 line:-1
但如果我们有一个更平滑的声音


324
00:20:31,732 --> 00:20:35,235 line:-2
使用那些同样的力触觉
很可能不是个好主意


325
00:20:38,505 --> 00:20:40,240 line:-1
对于类似这样的东西来说


326
00:20:40,807 --> 00:20:45,245 line:-2
一种连续的上下起伏的力触觉
很可能效果更好


327
00:20:48,782 --> 00:20:50,417 line:-1
但这些不是硬性规定


328
00:20:50,484 --> 00:20:53,387 line:-1
还有许多试验空间


329
00:20:53,453 --> 00:20:55,155 line:-1
有时候


330
00:20:55,222 --> 00:20:58,258 line:-2
你可能会发现
与你所认为的效果相反的效果


331
00:20:58,559 --> 00:20:59,793 line:-1
其实效果更好


332
00:21:00,127 --> 00:21:03,931 line:-2
Apple Watch
警告就是这种情况


333
00:21:03,997 --> 00:21:05,265 line:-1
听起来是这样的


334
00:21:07,868 --> 00:21:11,438 line:-2
对于这样一个声音
你可能想添加一个这样的力触觉


335
00:21:11,505 --> 00:21:14,274 line:-1
因为它们是完美搭配


336
00:21:17,311 --> 00:21:19,279 line:-1
但我们是否可以做的更好？


337
00:21:19,913 --> 00:21:21,081 line:-1
我们可以一直试验吗？


338
00:21:21,148 --> 00:21:25,285 line:-1
也许把它反过来并修改时间？


339
00:21:28,956 --> 00:21:32,626 line:-1
这创建了预期 通过增加力触觉


340
00:21:32,693 --> 00:21:35,395 line:-1
然后快速切断它并播放声音实现


341
00:21:35,462 --> 00:21:37,564 line:-1
有一个清晰的动作反应


342
00:21:37,631 --> 00:21:40,100 line:-1
声音的播放作为力触觉的答案


343
00:21:41,368 --> 00:21:44,304 line:-2
这对于Apple Watch
警告来说很不错


344
00:21:46,707 --> 00:21:51,211 line:-1
接下来有一系列连续事件是很常见的


345
00:21:51,278 --> 00:21:53,313 line:-1
用于表达体验的不同类型


346
00:21:53,814 --> 00:21:57,317 line:-1
在这个例子中 我们有四种瞬时事件


347
00:21:57,818 --> 00:22:00,787 line:-2
我们注意到
当我们把这个呈现给不同的人时


348
00:22:00,854 --> 00:22:03,123 line:-1
他们不一定感觉到第一个


349
00:22:03,190 --> 00:22:05,325 line:-1
第一个是幽灵力触觉


350
00:22:07,928 --> 00:22:12,332 line:-2
四次轻触的序列实际上仅报告为
三次轻触


351
00:22:13,300 --> 00:22:17,337 line:-1
这可能是一个问题或一个机会


352
00:22:18,005 --> 00:22:22,009 line:-2
我们可以使用这种幽灵效果
或完全无察觉的第一个声音


353
00:22:22,075 --> 00:22:23,343 line:-1
作为准备效应


354
00:22:25,112 --> 00:22:26,680 line:-1
让我们看一个例子


355
00:22:26,747 --> 00:22:29,383 line:-2
是watchOS上的
一个第三方警告


356
00:22:29,449 --> 00:22:33,353 line:-1
这是那些第三方通知的声音和力触觉


357
00:22:35,656 --> 00:22:38,292 line:-1
这是一个非常重要的通知


358
00:22:38,358 --> 00:22:40,994 line:-1
我们想确保用户明确地感知到了


359
00:22:41,061 --> 00:22:42,362 line:-1
并确认了


360
00:22:42,796 --> 00:22:44,831 line:-1
在这个例子中


361
00:22:44,898 --> 00:22:49,636 line:-1
我们使用了幽灵效果或准备效应


362
00:22:49,703 --> 00:22:51,305 line:-1
用于唤醒皮肤


363
00:22:51,371 --> 00:22:54,374 line:-1
并确保它已经完全准备好


364
00:22:54,441 --> 00:22:55,375 line:-1
感觉即将到来的力触觉


365
00:22:56,210 --> 00:22:58,378 line:-1
让我们听一下和感觉一下


366
00:23:03,383 --> 00:23:04,384 line:-1
在这个例子中


367
00:23:04,451 --> 00:23:07,487 line:-1
我们有明确地呈现和识别


368
00:23:07,554 --> 00:23:09,389 line:-1
我们的主要通知体验


369
00:23:11,024 --> 00:23:15,963 line:-2
接下来我们还可以在非常类似的
体验之间创建明显的差异


370
00:23:17,631 --> 00:23:21,401 line:-2
这是watchOS上
左侧导航提示的声音


371
00:23:21,802 --> 00:23:23,403 line:-1
听起来是这样的


372
00:23:28,442 --> 00:23:31,211 line:-1
通过我们的协调指导准则


373
00:23:31,278 --> 00:23:33,947 line:-1
我们最终得到了一个非常好的力触觉


374
00:23:34,014 --> 00:23:36,283 line:-1
与那个声音完美配对


375
00:23:36,350 --> 00:23:40,420 line:-2
我们有一系列的双击
听起来和感觉起来是这样的


376
00:23:45,459 --> 00:23:48,028 line:-1
如果我们看右侧导航提示


377
00:23:48,095 --> 00:23:51,431 line:-1
声音类似 但稍微有些不同


378
00:23:54,968 --> 00:23:59,039 line:-1
我们可以注意到左右导航之间


379
00:23:59,106 --> 00:24:00,140 line:-1
在音频上的些微不同


380
00:24:00,207 --> 00:24:04,444 line:-1
如果我们继续并遵守我们的协调准则


381
00:24:04,778 --> 00:24:07,314 line:-1
通过力触觉 我们最终将得到


382
00:24:07,381 --> 00:24:09,449 line:-1
模式完全相同的左右导航体验


383
00:24:10,617 --> 00:24:11,985 line:-1
在这个例子中


384
00:24:12,753 --> 00:24:14,488 line:-1
我们想添加力触觉


385
00:24:14,555 --> 00:24:17,457 line:-1
我们加倍了双击的力触觉


386
00:24:17,524 --> 00:24:20,460 line:-2
然后我们在左右导航之间创建了
真正的差异


387
00:24:21,428 --> 00:24:26,099 line:-1
让我们听一下并感觉一下这种体验


388
00:24:29,837 --> 00:24:33,006 line:-1
再一次 左右导航之间形成了差异


389
00:24:33,073 --> 00:24:35,475 line:-1
是一种非常类似的音频体验


390
00:24:37,845 --> 00:24:42,482 line:-2
目前为止 有许多工具可以用于
创建你自己的体验


391
00:24:42,783 --> 00:24:45,252 line:-1
我们想再给你们展示一个例子


392
00:24:45,319 --> 00:24:47,020 line:-1
来阐述我们的观点


393
00:24:47,087 --> 00:24:50,224 line:-2
这是Messages的
一个全屏效果


394
00:24:54,795 --> 00:24:55,863 line:-1
声音和力触觉


395
00:24:55,929 --> 00:24:58,398 line:-1
与动画完美同步


396
00:24:58,465 --> 00:25:01,068 line:-2
这是一个特别场合的一个
令人愉悦的时刻


397
00:25:01,134 --> 00:25:03,504 line:-1
让我们再看一次


398
00:25:08,742 --> 00:25:10,344 line:-1
如果你还没有尝试过


399
00:25:10,410 --> 00:25:13,547 line:-2
我鼓励你们在你自己的
iPhone上尝试一下


400
00:25:13,614 --> 00:25:15,516 line:-1
自己体验一下力触觉


401
00:25:17,818 --> 00:25:20,220 line:-1
除了我们分享的指导准则外


402
00:25:20,287 --> 00:25:23,524 line:-1
还有几点要考虑


403
00:25:24,958 --> 00:25:31,331 line:-2
当声音、力触觉和视觉相协调时
效果最好


404
00:25:31,398 --> 00:25:32,399 line:-1
你是动画设计师吗？


405
00:25:33,000 --> 00:25:35,235 line:-1
与声音或交互设计师一起合作


406
00:25:35,302 --> 00:25:36,937 line:-1
反之亦然


407
00:25:37,004 --> 00:25:39,540 line:-1
这是打造统一体验的最佳方式


408
00:25:41,375 --> 00:25:45,546 line:-1
想象一下第一次使用自己的app时


409
00:25:46,747 --> 00:25:50,450 line:-1
你希望它听起来或感觉起来怎么样？


410
00:25:50,517 --> 00:25:53,320 line:-1
然后想象又使用了许多许多次


411
00:25:53,954 --> 00:25:57,191 line:-2
你听到或感觉到这些东西是否仍然
对你有帮助？


412
00:25:57,824 --> 00:25:59,560 line:-1
或者你觉得不堪重负了？


413
00:26:00,661 --> 00:26:04,898 line:-2
请体验它
并剔除所有感觉不强烈的东西


414
00:26:04,965 --> 00:26:06,533 line:-1
或没用的东西


415
00:26:07,734 --> 00:26:09,803 line:-1
并且不要害怕试验


416
00:26:09,870 --> 00:26:12,639 line:-1
请试一试 原型


417
00:26:12,706 --> 00:26:15,609 line:-1
我们已经看到你们通过尝试新东西


418
00:26:15,676 --> 00:26:17,578 line:-1
而偶然得到的一些很棒的东西


419
00:26:18,946 --> 00:26:22,316 line:-1
我们期待看到、听到和感觉到


420
00:26:22,382 --> 00:26:24,585 line:-1
你在自己的app中所实现的效果


421
00:26:25,652 --> 00:26:28,589 line:-2
请参看这个URL获取更多信息
非常感谢


422
00:26:37,164 --> 00:26:38,265 line:-1
好的


423
00:26:38,332 --> 00:26:39,600 line:-1
谢谢Hugo和Camille


424
00:26:40,300 --> 00:26:43,837 line:-2
现在关于如何给app设计
力触觉体验


425
00:26:43,904 --> 00:26:45,339 line:-1
我们有个更好的想法


426
00:26:45,405 --> 00:26:47,908 line:-2
现在让我们了解一下如何使用
这些准则


427
00:26:47,975 --> 00:26:50,344 line:-1
以及如何在代码中实现它们


428
00:26:50,410 --> 00:26:51,378 line:-1
为此


429
00:26:51,445 --> 00:26:53,347 line:-2
Michael和Doug
将为我们介绍


430
00:26:53,413 --> 00:26:57,050 line:-2
如何利用新的
Core Haptic API


431
00:26:57,117 --> 00:26:57,951 line:-1
开始


432
00:26:58,018 --> 00:27:00,354 line:-1
我要介绍Michael上台来


433
00:27:06,860 --> 00:27:08,161 line:-1
晚上好


434
00:27:08,228 --> 00:27:11,064 line:-2
我是Michael Diu
我来自交互性力触觉团队


435
00:27:11,131 --> 00:27:14,067 line:-1
我很期待与你们分享


436
00:27:14,134 --> 00:27:16,336 line:-2
iOS 13中
关于力触觉的一些改进


437
00:27:16,803 --> 00:27:18,639 line:-1
让我们看一下进度安排


438
00:27:20,073 --> 00:27:23,243 line:-2
首先我们要了解可以在哪里使用
Core Haptics


439
00:27:23,310 --> 00:27:27,648 line:-2
它如何与其它音频和力触觉API
相适应


440
00:27:29,416 --> 00:27:32,953 line:-1
我们要讲API中的两组类


441
00:27:33,020 --> 00:27:35,989 line:-2
以及我们用于描述力触觉
和音频内容的


442
00:27:36,056 --> 00:27:40,661 line:-1
基本层面和描述符


443
00:27:41,695 --> 00:27:43,530 line:-1
我们要讲


444
00:27:43,597 --> 00:27:45,666 line:-1
开始播放那些内容的基本知识


445
00:27:47,467 --> 00:27:51,238 line:-1
然后我们要介绍动态参数


446
00:27:51,305 --> 00:27:52,739 line:-1
动态参数


447
00:27:52,806 --> 00:27:57,477 line:-2
是你在播放时间自定义力触觉模式的
一种方式


448
00:27:57,544 --> 00:28:01,682 line:-1
从而响应你的用户或app的行为


449
00:28:02,816 --> 00:28:08,455 line:-1
我们要探索一种表达、存储和共享


450
00:28:08,522 --> 00:28:10,090 line:-1
你的音频-力触觉内容的新方式


451
00:28:10,157 --> 00:28:15,696 line:-2
一种新的文件格式 我们把它叫做
Apple力触觉音频模式或AHAP


452
00:28:16,530 --> 00:28:17,698 line:-1
让我们开始吧


453
00:28:22,769 --> 00:28:25,339 line:-2
首先什么是
Core Haptics？


454
00:28:26,206 --> 00:28:31,111 line:-2
我们可以把它看作是
基于事件的音频和力触觉渲染API


455
00:28:31,178 --> 00:28:32,145 line:-1
或iPhone的


456
00:28:32,846 --> 00:28:34,448 line:-1
合成器


457
00:28:35,849 --> 00:28:39,887 line:0
我们可以继续使用其它音频和力触觉
和反馈API


458
00:28:39,953 --> 00:28:41,788 line:0
比如
AV Audio Player


459
00:28:41,855 --> 00:28:46,727 line:0
和UIKit的UIFeedbackGenerator
可以与Core Haptics同时使用


460
00:28:47,995 --> 00:28:51,732 line:0
你可能在想 我可以在哪些
iPhone上使用这些呢？


461
00:28:53,600 --> 00:28:57,037 line:0
仅使用一个API和一种文件格式


462
00:28:57,104 --> 00:28:58,672 line:0
我们就可以访问


463
00:28:58,739 --> 00:29:02,676 line:0
许许多多配备触觉引擎的
iPhone


464
00:29:02,743 --> 00:29:05,245 line:0
从iPhone 8开始


465
00:29:05,746 --> 00:29:07,614 line:0
我们会替你实现


466
00:29:07,681 --> 00:29:10,250 line:0
让你的力触觉模式


467
00:29:10,317 --> 00:29:12,186 line:0
在所有这些产品上拥有相同的感觉


468
00:29:12,252 --> 00:29:15,522 line:0
到这样的程度以至于你只需要使用
一种产品


469
00:29:15,589 --> 00:29:18,759 line:0
就可以建立app原型并发布app


470
00:29:20,827 --> 00:29:27,134 line:0
并且这些iPhone没有配备任何
旧的产品控制器


471
00:29:27,201 --> 00:29:29,870 line:-2
它们都配备了
Apple设计的触觉引擎


472
00:29:29,937 --> 00:29:34,474 line:-1
为你提供独一无二的能量组合


473
00:29:34,541 --> 00:29:36,243 line:-1
表达范围很广


474
00:29:36,310 --> 00:29:40,781 line:-1
无与伦比的精确度以及控制和细节


475
00:29:42,516 --> 00:29:47,287 line:-2
接下来我要讲你们可能已经开始使用
UIKit的FeedbackGenerated API


476
00:29:47,354 --> 00:29:51,792 line:-1
在iPhone上采用力触觉


477
00:29:53,794 --> 00:29:57,798 line:-2
Core Haptics
并不会替代这个API


478
00:29:59,466 --> 00:30:00,467 line:-1
在绝大多数情况下


479
00:30:00,534 --> 00:30:03,003 line:-2
你都希望继续使用
FeedbackGenerator


480
00:30:03,070 --> 00:30:07,808 line:-2
特别是用于UIKit控制
并希望给它添加力触觉


481
00:30:08,242 --> 00:30:09,676 line:-1
通过那个API


482
00:30:09,743 --> 00:30:12,613 line:-1
你可以表明你的事件的设计意图


483
00:30:12,679 --> 00:30:16,583 line:-1
无论是选择、影响或通知


484
00:30:16,650 --> 00:30:19,152 line:-1
你可以让其他人 让Apple


485
00:30:19,219 --> 00:30:22,289 line:-1
来开发一个用于表达它的词汇


486
00:30:22,356 --> 00:30:26,960 line:-2
混合正确的形态
比如音频、力触觉、动画


487
00:30:27,027 --> 00:30:28,862 line:-1
从而表达那个信息


488
00:30:29,663 --> 00:30:32,633 line:-2
我们也在iOS 13中
改进了这个API


489
00:30:32,699 --> 00:30:35,836 line:-1
请查看相关文档获取更多详情


490
00:30:37,604 --> 00:30:40,807 line:-2
相对而言 当你想设计自己的
声音和力触觉时


491
00:30:40,874 --> 00:30:44,845 line:-2
Core Haptics
是个不错的选择


492
00:30:45,379 --> 00:30:47,981 line:-1
通过它 你可以开发你自己的模式


493
00:30:48,048 --> 00:30:52,519 line:-1
并且你可以更准确地控制播放时间


494
00:30:52,586 --> 00:30:57,991 line:-2
从而可以与其它API同步
比如来自Core Animation的动画


495
00:30:58,058 --> 00:31:00,861 line:-2
或来自
AV Audio Engine的音效


496
00:31:01,795 --> 00:31:05,866 line:-2
你还拥有一组更丰富的
播放和调整控制


497
00:31:06,166 --> 00:31:09,703 line:-2
UIKit是建立在
Core Haptics之上的


498
00:31:09,770 --> 00:31:15,576 line:-2
因此两组API
共享同样的低延迟性能


499
00:31:15,642 --> 00:31:21,982 line:-2
设计你自己的力触觉模式
可能要花一些时间


500
00:31:22,049 --> 00:31:25,652 line:-2
但它可以让你实现一些
你不能实现的效果


501
00:31:25,719 --> 00:31:30,257 line:-1
并可以让你的app与众不同


502
00:31:30,324 --> 00:31:31,892 line:-1
因此这是一件值得考虑的事


503
00:31:32,292 --> 00:31:35,896 line:-1
接下来我要稍微讲一下音频功能


504
00:31:37,831 --> 00:31:41,201 line:-2
Core Haptics
还是一个音频API


505
00:31:41,268 --> 00:31:48,141 line:-1
可以让你与力触觉同步 紧密同步


506
00:31:48,475 --> 00:31:51,912 line:-2
播放短的、合成的或自定义的
波形音频


507
00:31:52,713 --> 00:31:54,815 line:-1
这种音频力触觉的二重性


508
00:31:54,882 --> 00:31:58,185 line:-2
对于许多Apple自己的
力触觉体验来说至关重要


509
00:31:58,252 --> 00:32:00,921 line:-2
比如iPhone 7中的
力触觉主页按钮


510
00:32:02,155 --> 00:32:04,925 line:-2
Series 4 Watch中的
力触觉表冠


511
00:32:04,992 --> 00:32:06,426 line:-1
和UIDatePicker


512
00:32:06,493 --> 00:32:08,629 line:-1
你看到的那些


513
00:32:08,695 --> 00:32:11,932 line:-2
用于选择日期、时间、警告
和日历的滚动轮


514
00:32:12,466 --> 00:32:14,801 line:-1
你可能并没有意识到


515
00:32:14,868 --> 00:32:18,071 line:-2
你甚至可能都没有注意到
这些体验中包含音频


516
00:32:18,138 --> 00:32:21,575 line:-1
但如果你一旦把音频隐藏起来


517
00:32:21,642 --> 00:32:25,779 line:-2
你就会意识到
它是体验中不可分割的一部分


518
00:32:25,846 --> 00:32:30,317 line:-2
因此现在你可以使用Core Haptics
在你自己的app中实现同样的效果


519
00:32:30,384 --> 00:32:33,220 line:-1
我想讲一下app的一些分类


520
00:32:33,287 --> 00:32:35,489 line:-1
特别是其中有一大类


521
00:32:35,556 --> 00:32:37,858 line:-2
你可能会考虑使用
Core Haptics


522
00:32:37,925 --> 00:32:38,959 line:-1
即游戏


523
00:32:40,894 --> 00:32:43,096 line:-1
想象一下我们正在赛道上


524
00:32:43,163 --> 00:32:45,966 line:-1
我们即将进入加速模式 想象一下


525
00:32:50,437 --> 00:32:53,373 line:-1
当你提交那个暴力消息时


526
00:32:53,440 --> 00:32:57,110 line:-2
考虑一下在你的app中使用同步的
力触觉和音频


527
00:32:57,177 --> 00:33:00,981 line:-2
从而产生那些震撼心灵的
爆炸和隆隆声


528
00:33:01,615 --> 00:33:07,754 line:-1
另一种不错的方式是模拟物理接触


529
00:33:07,821 --> 00:33:10,958 line:-1
从而让你的app感觉更逼真


530
00:33:11,191 --> 00:33:13,093 line:-1
想象一下网球游戏


531
00:33:13,160 --> 00:33:15,495 line:-1
你可能会有音频和力触觉成分


532
00:33:15,562 --> 00:33:19,533 line:-1
音频的音高 力触觉的强度


533
00:33:19,600 --> 00:33:22,102 line:-1
都会潜在地表达挥球速度有多快


534
00:33:22,169 --> 00:33:25,105 line:-2
或表达球落在球拍上的位置
距离中心位置有多远


535
00:33:25,172 --> 00:33:26,473 line:-1
并且你甚至可以控制


536
00:33:26,540 --> 00:33:29,643 line:-1
在击中球之后


537
00:33:29,710 --> 00:33:31,011 line:-1
球拍上的弦能产生多长时间的共鸣


538
00:33:32,880 --> 00:33:35,716 line:-2
考虑使用Core Haptics
的另一个类别


539
00:33:35,782 --> 00:33:38,018 line:-1
是增强现实app


540
00:33:39,753 --> 00:33:41,755 line:-1
如果你正在开发这个空间


541
00:33:41,822 --> 00:33:46,226 line:-2
你已经很熟悉与3D音频相配对的
高保真视觉效果的好处了


542
00:33:46,293 --> 00:33:50,697 line:-1
它们共同发挥作用


543
00:33:50,764 --> 00:33:54,735 line:-1
我们可以达到复现的下一个层级


544
00:33:54,801 --> 00:34:01,041 line:-2
通过考虑自定义力触觉反馈会如何
匹配我们的用户手势


545
00:34:02,743 --> 00:34:07,748 line:-2
或如何响应app、设备
和AR对象事件


546
00:34:07,814 --> 00:34:14,788 line:-1
比如移动设备或移动用户群


547
00:34:16,924 --> 00:34:18,025 line:-1
作为启发


548
00:34:18,091 --> 00:34:21,460 line:-1
今年我们通过使用力触觉


549
00:34:21,527 --> 00:34:24,965 line:-1
改进了Swish示例代码


550
00:34:25,032 --> 00:34:29,069 line:-1
根据你向后拉动投石器的速度


551
00:34:29,303 --> 00:34:31,871 line:-1
以及向后拉动手机的速度


552
00:34:31,938 --> 00:34:35,576 line:-2
你会感觉到当你向后拉动它时
所产生的张力


553
00:34:35,641 --> 00:34:39,079 line:-2
以及当你释放它时所产生的
令人满足的形式转换


554
00:34:39,713 --> 00:34:41,648 line:-1
我想给你们展示一段相关视频


555
00:34:41,715 --> 00:34:45,219 line:-1
我要使用音频来表现


556
00:34:45,284 --> 00:34:46,587 line:-1
你感觉到的那个力触觉


557
00:34:46,652 --> 00:34:48,455 line:-1
听起来是这样的


558
00:34:52,159 --> 00:34:54,928 line:-1
现在我们要同时使用它们


559
00:34:54,995 --> 00:34:59,099 line:-1
视觉和力触觉 没有常规的音频


560
00:35:03,704 --> 00:35:06,640 line:-1
这是我们如何


561
00:35:06,707 --> 00:35:10,043 line:-1
同时同步使用力触觉、声音和视觉


562
00:35:10,110 --> 00:35:13,814 line:-1
来改善我们的AR体验的一个例子


563
00:35:13,881 --> 00:35:17,518 line:-1
还有一些类别的app、游戏和AR


564
00:35:17,584 --> 00:35:20,654 line:-1
已经准备好使用力触觉


565
00:35:20,721 --> 00:35:22,556 line:-2
及与之相对应的声音来进行
创新性探索了


566
00:35:22,623 --> 00:35:25,259 line:-1
我确定你一定会想到很多很多


567
00:35:28,595 --> 00:35:33,433 line:-2
现在让我们看一下如何使用
Core Haptics


568
00:35:33,500 --> 00:35:34,434 line:-1
表达我们的内容


569
00:35:37,437 --> 00:35:40,007 line:-2
在Core Haptics中
只有两组类


570
00:35:40,073 --> 00:35:45,445 line:-2
分别是表示内容的类
以及表示内容播放的类


571
00:35:46,980 --> 00:35:50,150 line:-1
让我们先看一下内容类


572
00:35:51,852 --> 00:35:56,356 line:-2
Core Haptics中
基本不可见的内容元素


573
00:35:56,423 --> 00:35:58,158 line:-1
叫做CHHapticEvent


574
00:35:58,792 --> 00:36:02,829 line:-1
每个事件都有类型和时间


575
00:36:02,896 --> 00:36:07,167 line:-2
视情况需要
参数可以自定义自己的感觉


576
00:36:08,368 --> 00:36:13,173 line:-2
这些事件可以相互覆盖
当相互覆盖时它们就融合在一起了


577
00:36:13,540 --> 00:36:17,177 line:-1
所有事件都属于一种模式


578
00:36:18,178 --> 00:36:22,683 line:-2
接下来我要讲一下
我们可以使用的事件的类型


579
00:36:24,151 --> 00:36:27,187 line:-2
第一种类型叫做
HapticTransient


580
00:36:27,554 --> 00:36:30,791 line:-2
我把HapticTransient
看作是一个小木槌


581
00:36:30,858 --> 00:36:32,359 line:-1
它是一个敲击动作


582
00:36:32,426 --> 00:36:35,028 line:-1
它是瞬时的和短暂的


583
00:36:35,095 --> 00:36:38,198 line:-1
然后我们有两个连续类型


584
00:36:38,765 --> 00:36:41,969 line:-2
分别是HapticContinuous
和AudioContinuous


585
00:36:42,035 --> 00:36:46,306 line:-1
我认为 比如说 就像是弹奏弦乐器


586
00:36:46,373 --> 00:36:49,376 line:-1
比瞬时要长一些


587
00:36:49,443 --> 00:36:52,045 line:-1
它可以是 比如说 用作背景纹理


588
00:36:52,112 --> 00:36:54,815 line:-1
你可以使用许多调节旋钮


589
00:36:54,882 --> 00:36:57,784 line:-1
比如调节它的共振


590
00:36:58,485 --> 00:37:01,855 line:-2
最后我们有
AudioCustom类型


591
00:37:01,922 --> 00:37:04,925 line:-2
AudioCustom
正如我之前提到过的那样


592
00:37:04,992 --> 00:37:10,230 line:-1
你可以在这里提供你自己的音频


593
00:37:11,131 --> 00:37:12,733 line:-1
用于与力触觉同步播放


594
00:37:13,600 --> 00:37:18,238 line:-1
接下来让我们讲几个可选参数


595
00:37:21,108 --> 00:37:25,112 line:-2
第一个EventParameter
叫做HapticIntensity


596
00:37:25,179 --> 00:37:28,515 line:-1
它有一个音频模拟 音频音量


597
00:37:28,582 --> 00:37:30,651 line:-1
你很可能已经很熟悉它了


598
00:37:31,451 --> 00:37:35,589 line:-1
通过这个参数 从没有输出开始


599
00:37:35,656 --> 00:37:38,926 line:-1
随着你把旋钮从零一直调到一


600
00:37:38,992 --> 00:37:41,261 line:-1
你将得到系统的最大输出


601
00:37:42,496 --> 00:37:45,799 line:-2
我们的下一个参数叫做
HapticSharpness


602
00:37:45,866 --> 00:37:48,902 line:-2
HapticSharpness
是一个新概念


603
00:37:48,969 --> 00:37:53,273 line:-2
没有相对应的物理模拟
也没有相对应的音频模拟


604
00:37:55,509 --> 00:37:57,244 line:-1
在这个世界中


605
00:37:57,311 --> 00:37:58,879 line:-1
我希望你


606
00:37:58,946 --> 00:38:02,015 line:-1
不要想象是在有感知的空间中前进


607
00:38:02,082 --> 00:38:07,287 line:-2
从值为零时的一种
非常圆润和有机的感觉


608
00:38:07,788 --> 00:38:11,291 line:-2
一直到值为一时的
更清脆和更精确的感觉


609
00:38:11,692 --> 00:38:14,294 line:-1
为了更进一步


610
00:38:14,928 --> 00:38:18,298 line:-2
我要使用来自
iOS 12的一些例子


611
00:38:19,233 --> 00:38:21,468 line:-1
锁屏上的手电筒按钮


612
00:38:21,535 --> 00:38:25,305 line:-1
是一个锐度很高的力触觉


613
00:38:27,374 --> 00:38:30,777 line:-1
而app切换器 那个向上滑动


614
00:38:30,844 --> 00:38:35,315 line:-1
是一个更圆润、锐度较低的力触觉


615
00:38:37,351 --> 00:38:38,519 line:-1
至于原因


616
00:38:38,585 --> 00:38:43,891 line:-1
为什么这两种体验是尖锐和不尖锐的


617
00:38:43,957 --> 00:38:48,629 line:-2
我推荐你参加我们的
音频-力触觉设计演讲


618
00:38:49,930 --> 00:38:53,333 line:-2
EventParameters
还有更多类型


619
00:38:53,400 --> 00:38:57,571 line:-2
比如应用到音频上的类型
比如捏合和拖拽


620
00:38:57,638 --> 00:38:58,805 line:-1
对于力触觉


621
00:38:58,872 --> 00:39:02,109 line:-1
我们还可以让你修改共振等等


622
00:39:02,176 --> 00:39:07,347 line:-2
但这两个：强度和锐度就足够
我们使用了


623
00:39:09,416 --> 00:39:12,886 line:-1
要开发那个动态范围


624
00:39:12,953 --> 00:39:16,356 line:-1
和精确的强度和锐度的感觉


625
00:39:16,857 --> 00:39:19,993 line:-1
我们有一段示例代码Palette


626
00:39:20,060 --> 00:39:24,598 line:-1
可以让你自己尝试一下这些体验


627
00:39:24,665 --> 00:39:25,699 line:-1
随着你的移动


628
00:39:25,766 --> 00:39:28,635 line:-1
随着你轻触或拖动手指


629
00:39:28,702 --> 00:39:33,473 line:-1
你可以访问锐度轴以及强度轴


630
00:39:33,540 --> 00:39:36,443 line:-1
随着你的操作


631
00:39:36,510 --> 00:39:37,711 line:-1
将实施相应的持续


632
00:39:38,045 --> 00:39:39,379 line:-1
或瞬时的力触觉


633
00:39:39,680 --> 00:39:43,383 line:-1
这将帮助你获得那种直观体验


634
00:39:46,987 --> 00:39:52,125 line:-2
这是对于我们可以在哪里使用
Core Haptics


635
00:39:52,192 --> 00:39:55,028 line:-1
以及如何指定我们的内容的介绍


636
00:39:55,095 --> 00:39:58,765 line:-2
现在我要邀请Doug Scott上台来
他是我们的Core Haptics架构师


637
00:39:58,832 --> 00:40:03,003 line:-2
他会帮助我们了解
Core Haptics


638
00:40:03,270 --> 00:40:04,605 line:-1
了解那些模式


639
00:40:04,671 --> 00:40:07,474 line:-2
并把Core Haptics
集成到我们的app中


640
00:40:07,541 --> 00:40:09,209 line:-1
请大家欢迎Doug


641
00:40:11,879 --> 00:40:12,846 line:-1
谢谢Michael


642
00:40:13,647 --> 00:40:14,681 line:-1
大家晚上好


643
00:40:14,748 --> 00:40:19,653 line:-1
今天能来到这里 我感到非常激动


644
00:40:19,720 --> 00:40:21,421 line:-2
我要与大家分享如何把
Core Haptics API整合到你的app中


645
00:40:23,223 --> 00:40:25,993 line:-1
在演示和深入查看代码之前


646
00:40:26,059 --> 00:40:29,263 line:-2
让我们了解一下
当你想播放力触觉模式时


647
00:40:29,329 --> 00:40:31,431 line:-1
你的app要遵循的基本步骤


648
00:40:33,934 --> 00:40:36,737 line:-1
第一个步骤是创建内容


649
00:40:36,803 --> 00:40:38,772 line:-1
因为这可以在任何时候实现


650
00:40:38,839 --> 00:40:41,341 line:-1
在你需要使用它之前实现


651
00:40:41,408 --> 00:40:42,809 line:-1
在这个例子中


652
00:40:42,876 --> 00:40:46,046 line:-2
我们在一个力触觉模式中加载了一个
NS字典


653
00:40:46,113 --> 00:40:48,815 line:-1
字典可能是我们存储在app中


654
00:40:48,882 --> 00:40:50,450 line:-1
作为资源的一部分


655
00:40:51,251 --> 00:40:52,686 line:-1
我们之后将了解到


656
00:40:52,753 --> 00:40:54,521 line:-1
我们也可以在播放模式之前


657
00:40:54,588 --> 00:40:56,223 line:-1
创建模式


658
00:40:56,290 --> 00:40:58,325 line:-1
如果它们需要发生交互变化


659
00:40:58,392 --> 00:41:01,461 line:-1
以响应app中的变化的话


660
00:41:02,963 --> 00:41:06,466 line:-2
下一个步骤是
创建力触觉引擎的一个实例


661
00:41:06,867 --> 00:41:07,701 line:-2
这应该是只要你的app
一知道它将使用力触觉时


662
00:41:07,768 --> 00:41:11,471 line:-1
就应该创建力触觉引擎的实例


663
00:41:13,607 --> 00:41:16,977 line:-2
接下来你要为力触觉模式创建一个
力触觉播放器


664
00:41:17,044 --> 00:41:20,047 line:-1
每个播放器都关联一个模式


665
00:41:20,113 --> 00:41:22,482 line:-1
和一个特定的力触觉引擎


666
00:41:24,718 --> 00:41:25,886 line:-1
启动力触觉引擎


667
00:41:25,953 --> 00:41:29,323 line:-1
告诉系统初始化音频和力触觉硬件


668
00:41:29,389 --> 00:41:32,492 line:-1
准备请求播放模式


669
00:41:34,795 --> 00:41:37,564 line:-1
当你的app想要播放模式时


670
00:41:37,631 --> 00:41:39,266 line:-1
就启动播放器


671
00:41:39,333 --> 00:41:41,301 line:-1
这可以通过两种方式实现


672
00:41:41,368 --> 00:41:44,771 line:-1
第一种 我们可以叫做立即方式


673
00:41:44,838 --> 00:41:48,041 line:-1
在最快的时刻 以最小的延迟


674
00:41:48,108 --> 00:41:51,445 line:-1
告诉系统你希望播放这个模式


675
00:41:51,512 --> 00:41:53,313 line:-1
第二种是预定方式


676
00:41:53,380 --> 00:41:55,983 line:-1
你上交一个绝对时间戳


677
00:41:56,049 --> 00:41:58,785 line:-1
告诉系统你想让这个事件


678
00:41:58,852 --> 00:41:59,853 line:-1
与某些其它系统同步


679
00:41:59,920 --> 00:42:05,526 line:-2
比如另一个音频播放器或游戏事件
或图形事件


680
00:42:09,329 --> 00:42:11,965 line:-1
如果你想了解模式何时完成播放


681
00:42:12,032 --> 00:42:14,935 line:-1
你可以在播放器完成时


682
00:42:15,002 --> 00:42:17,538 line:-1
让力触觉引擎通过回调通知你


683
00:42:18,872 --> 00:42:21,975 line:-1
在这里 引擎回调app


684
00:42:22,643 --> 00:42:25,479 line:-2
而app现在可以选择
停止力触觉引擎


685
00:42:25,546 --> 00:42:28,549 line:-1
或你可以打开下一个力触觉模式


686
00:42:29,950 --> 00:42:31,418 line:-1
这就是基本步骤


687
00:42:31,485 --> 00:42:35,556 line:-2
现在让我们看一个例子
是一个使用这种系统的一个app


688
00:42:37,424 --> 00:42:40,928 line:-1
在此之前 我们要告诉你一个秘密


689
00:42:41,495 --> 00:42:45,499 line:-1
演示API的使用会生成触觉反馈


690
00:42:45,566 --> 00:42:48,335 line:-1
呈现一个独特的问题


691
00:42:48,402 --> 00:42:50,304 line:-1
你们在观众席中感觉不到


692
00:42:50,737 --> 00:42:53,540 line:-2
我们的处理方式是给输出中的每一个
力触觉事件


693
00:42:53,607 --> 00:42:55,642 line:-1
都添加一个音频当量


694
00:42:55,709 --> 00:42:58,579 line:-1
那会让你听到力触觉的效果


695
00:43:01,849 --> 00:43:04,551 line:-2
这个app使用了
一个简单的物理引擎


696
00:43:04,618 --> 00:43:08,255 line:-1
在屏幕上移动球以响应加速度计


697
00:43:10,023 --> 00:43:12,326 line:-1
当球撞击屏幕边缘时


698
00:43:12,392 --> 00:43:15,195 line:-1
生成力触觉和音频反馈


699
00:43:15,262 --> 00:43:17,464 line:-1
用户有一种感觉到球撞击墙壁的感觉


700
00:43:17,531 --> 00:43:20,000 line:-1
并且也能听到撞击的声音


701
00:43:20,067 --> 00:43:21,935 line:-1
球撞击边缘的力度越大


702
00:43:22,002 --> 00:43:25,606 line:-1
力触觉的强度越大 音频的音量越大


703
00:43:27,241 --> 00:43:30,244 line:-1
好的 让我们看一下这个示例的代码


704
00:43:30,310 --> 00:43:32,412 line:-2
看看如何把
Core Haptics API


705
00:43:32,479 --> 00:43:33,847 line:-1
集成到你的app中


706
00:43:33,914 --> 00:43:39,620 line:-2
我们要了解如何使用EventParameters
来修改力触觉和音频


707
00:43:39,953 --> 00:43:40,988 line:-1
这个例子


708
00:43:41,054 --> 00:43:43,991 line:-2
所有代码都是从网站上的示例代码中
拿过来的


709
00:43:44,057 --> 00:43:47,628 line:-2
但我们稍微修改了一下
用于突出显示重点


710
00:43:49,229 --> 00:43:51,899 line:-2
首先我们导入了
Core Haptics模块


711
00:43:51,965 --> 00:43:55,636 line:-2
以及我们需要在app中使用的
其它模块


712
00:43:58,372 --> 00:44:00,874 line:-2
已声明
CHHapticEngine


713
00:44:00,941 --> 00:44:02,142 line:-1
是视图控制器的一个成员变量


714
00:44:02,209 --> 00:44:04,278 line:-1
因为我们希望能完全控制它


715
00:44:04,344 --> 00:44:07,681 line:-2
让它存在于在app的
整个生命周期中


716
00:44:09,149 --> 00:44:11,285 line:-1
正如在之前的流程图中所讨论的那样


717
00:44:11,351 --> 00:44:14,788 line:-2
在我们使用力触觉引擎之前
我们提前把它设置好


718
00:44:14,855 --> 00:44:18,659 line:-2
在这里 当视图加载完成后
我们调用helper方法


719
00:44:21,228 --> 00:44:22,062 line:-1
在helper方法中


720
00:44:22,129 --> 00:44:25,699 line:-1
我们先创建力触觉引擎的实例


721
00:44:25,766 --> 00:44:27,668 line:-1
并检查可能会发生的错误


722
00:44:27,935 --> 00:44:30,003 line:-1
引擎被分配给我们的成员变量


723
00:44:30,070 --> 00:44:31,672 line:-1
从而我们可以随时使用它


724
00:44:33,440 --> 00:44:35,843 line:-1
这是可选的 但非常有用


725
00:44:35,909 --> 00:44:40,347 line:-2
可以给引擎的已停止处理器属性
分配一个闭包


726
00:44:40,414 --> 00:44:43,217 line:-2
如果引擎由于某些操作而停止
而不是app要求引擎停止的话


727
00:44:43,283 --> 00:44:46,720 line:-1
将调用这个闭包


728
00:44:46,787 --> 00:44:48,589 line:-1
有些原因可能会导致这种情况


729
00:44:48,655 --> 00:44:53,694 line:-1
比如音频会话中断或app被挂起


730
00:44:55,095 --> 00:44:57,798 line:-1
我们通过启动力触觉引擎


731
00:44:57,865 --> 00:44:59,733 line:-2
并检查可能发生的错误
来完成这个方法


732
00:45:00,334 --> 00:45:03,036 line:-1
引擎将继续运行直到app


733
00:45:03,103 --> 00:45:05,706 line:-1
或某个可能的外在动作停止它


734
00:45:06,840 --> 00:45:08,742 line:-1
请注意 app追踪


735
00:45:08,809 --> 00:45:11,712 line:-1
引擎是否需要被重启


736
00:45:12,246 --> 00:45:14,481 line:-1
一般来说 当屏幕上有任意可见视图


737
00:45:14,548 --> 00:45:18,552 line:-1
且视图包含力触觉交互时


738
00:45:18,619 --> 00:45:20,721 line:-1
你可能会一直保持引擎运行


739
00:45:25,425 --> 00:45:28,629 line:-1
这是app中简单物理引擎


740
00:45:28,695 --> 00:45:31,798 line:-1
告诉我们球与墙壁发生碰撞的地方


741
00:45:31,865 --> 00:45:35,502 line:-2
在这个例子中 我们想生成我们的
力触觉和音频模式


742
00:45:35,569 --> 00:45:38,272 line:-1
用于交互性地追踪球的速度


743
00:45:38,338 --> 00:45:40,174 line:-1
因此在需要模式播放器及其模式时


744
00:45:40,240 --> 00:45:43,177 line:-1
就创建它们


745
00:45:44,978 --> 00:45:47,981 line:-1
这个方法用于创建要播放的模式


746
00:45:48,048 --> 00:45:50,551 line:-1
响应球的碰撞


747
00:45:50,617 --> 00:45:53,387 line:-1
在这里我们要创建两个事件的模式


748
00:45:53,453 --> 00:45:55,756 line:-1
一个是力触觉 一个是音频


749
00:45:57,224 --> 00:46:00,427 line:-2
我们创建HapticTransient
类型的力触觉事件


750
00:46:00,494 --> 00:46:02,763 line:-1
用于生成有效的感觉


751
00:46:05,399 --> 00:46:06,934 line:-2
我们要赋予它两个
EventParameters


752
00:46:07,000 --> 00:46:09,503 line:-2
这将根据球的速度配置事件的
锐度和强度


753
00:46:09,570 --> 00:46:13,774 line:-1
你已经听到过了


754
00:46:16,243 --> 00:46:18,011 line:-1
然后我们创建音频事件


755
00:46:18,078 --> 00:46:20,781 line:-1
音频类型是连续音频


756
00:46:21,582 --> 00:46:25,385 line:-2
使用一组EventParameters
用于音量和包络衰减


757
00:46:25,452 --> 00:46:28,322 line:-1
也根据球的速度进行计算


758
00:46:28,388 --> 00:46:30,057 line:-1
这里的持续参数


759
00:46:30,123 --> 00:46:32,993 line:-1
可以保证事件的强度


760
00:46:33,060 --> 00:46:34,928 line:-1
将一直缩减到零


761
00:46:34,995 --> 00:46:38,799 line:-1
而不是在整个事件长度中一直持续


762
00:46:40,701 --> 00:46:43,270 line:-1
我们创建一个包含这两个事件的模式


763
00:46:43,337 --> 00:46:44,805 line:-1
并在时间上同步


764
00:46:46,874 --> 00:46:49,843 line:-1
最后我们创建这个模式的模式播放器


765
00:46:49,910 --> 00:46:53,013 line:-1
并把它返回到这个层中


766
00:46:53,080 --> 00:46:55,816 line:-1
返回到响应碰撞的方法中


767
00:46:56,383 --> 00:46:59,419 line:-2
最后一步是
当CHHapticTimeImmediate时


768
00:46:59,486 --> 00:47:02,322 line:-1
启动模式播放器


769
00:47:02,389 --> 00:47:04,992 line:-1
那表明以最小延迟


770
00:47:05,058 --> 00:47:06,827 line:-1
尽快播放它


771
00:47:07,995 --> 00:47:11,832 line:-2
请注意app并没有一直持有
这个播放器的实例


772
00:47:12,232 --> 00:47:14,902 line:-1
它的模式保证了连续播放


773
00:47:14,968 --> 00:47:16,270 line:-1
直到完成


774
00:47:16,336 --> 00:47:19,840 line:-2
因此app可以轻松地启动它
然后就不需要再关注它了


775
00:47:21,909 --> 00:47:24,144 line:-1
这是使用在app的代码内


776
00:47:24,211 --> 00:47:26,480 line:-1
以编程方式创建的模式


777
00:47:26,547 --> 00:47:27,848 line:-1
播放内容的基本步骤


778
00:47:28,782 --> 00:47:31,718 line:-1
因为这个app是持续交互的


779
00:47:31,785 --> 00:47:33,520 line:-1
我们不会停止力触觉引擎


780
00:47:33,587 --> 00:47:36,857 line:-1
除非游戏屏幕已经不再可见了


781
00:47:39,126 --> 00:47:40,894 line:-1
现在让我们花点时间谈一谈


782
00:47:40,961 --> 00:47:43,897 line:-2
Core Haptics的
其中一个最强大的功能


783
00:47:43,964 --> 00:47:45,732 line:-1
动态参数


784
00:47:47,501 --> 00:47:48,569 line:-1
动态参数


785
00:47:48,969 --> 00:47:53,106 line:-2
可以让你增加或减少现有的
EventParameters值


786
00:47:53,173 --> 00:47:57,878 line:-2
对于它所播放的模式中
全部活跃的和即将到来的事件


787
00:47:59,546 --> 00:48:03,617 line:-2
动态参数按照你所提供的时间戳
起作用


788
00:48:03,684 --> 00:48:07,221 line:-1
你可以同时调整多个不同的参数


789
00:48:07,287 --> 00:48:10,891 line:-1
或使用任意的时间关系


790
00:48:12,192 --> 00:48:15,429 line:-2
当你创建你自己的模式时
你可以包含动态参数


791
00:48:15,495 --> 00:48:19,900 line:-2
或在播放时把动态参数实时
发送给播放器


792
00:48:21,101 --> 00:48:23,604 line:-1
这就可以让你使用单一模式


793
00:48:23,670 --> 00:48:28,242 line:-1
来产生无限数量的力触觉和音频变量


794
00:48:28,308 --> 00:48:30,911 line:-1
通过动态地调整模式实现


795
00:48:32,946 --> 00:48:35,048 line:-1
让我们看一个例子


796
00:48:35,115 --> 00:48:36,483 line:-1
在底部的这个图表中


797
00:48:36,550 --> 00:48:37,751 line:-1
我们有一个力触觉模式


798
00:48:37,818 --> 00:48:41,355 line:-2
使用了全部力触觉
EventIntensities


799
00:48:41,421 --> 00:48:43,323 line:-1
并都设置为它们的最大值


800
00:48:43,390 --> 00:48:45,759 line:-2
上半部分是
HapticTransients


801
00:48:45,826 --> 00:48:47,928 line:-2
下半部分是
HapticContinuous


802
00:48:48,962 --> 00:48:52,833 line:-2
我们想暂时缩减所有游戏的
力触觉强度


803
00:48:52,900 --> 00:48:56,937 line:-1
比如 如果某个角色在游戏中说话了


804
00:48:59,206 --> 00:49:03,544 line:-2
我要发送一个强度的动态参数
值为0.3


805
00:49:03,610 --> 00:49:06,747 line:-1
需要0.5秒生效


806
00:49:06,813 --> 00:49:09,416 line:-1
你可以看到它在那时


807
00:49:09,483 --> 00:49:10,884 line:-1
把事件的强度减少到了


808
00:49:10,951 --> 00:49:13,954 line:-1
未修改之前的三分之一


809
00:49:17,424 --> 00:49:21,962 line:-2
最后让我们看看创建模式的
另一种方式


810
00:49:23,530 --> 00:49:26,967 line:-1
即AHAP


811
00:49:28,836 --> 00:49:31,538 line:-1
Apple力触觉音频模式


812
00:49:31,605 --> 00:49:35,075 line:-1
是以基于文本的格式


813
00:49:35,142 --> 00:49:36,977 line:-2
描述Core Haptics Pattern
的一种规范


814
00:49:37,344 --> 00:49:40,247 line:-1
它是从嵌套的键值对中创建的


815
00:49:40,314 --> 00:49:45,085 line:-2
一旦你开始处理
构成Core Haptics API的类时


816
00:49:45,152 --> 00:49:47,988 line:-1
你一定会对它非常熟悉


817
00:49:49,423 --> 00:49:50,257 line:-1
它是广泛建立的


818
00:49:50,324 --> 00:49:53,427 line:-1
JSON文件格式的模式


819
00:49:53,493 --> 00:49:57,598 line:-1
意思是你已经有大量不同的框架


820
00:49:57,664 --> 00:49:59,633 line:-1
可以读写并编辑这些AHAP了


821
00:49:59,700 --> 00:50:03,003 line:-2
包括比如
Swift Codable Framework


822
00:50:05,405 --> 00:50:08,876 line:-2
AHAP使共享和编辑力触觉模式
变得很简单


823
00:50:08,942 --> 00:50:13,013 line:-2
因为它是一种所有开发人员
都能认同的格式


824
00:50:14,982 --> 00:50:17,651 line:-2
从外部AHAP文件中
加载力触觉模式


825
00:50:17,718 --> 00:50:22,022 line:-1
可以让你把内容与app代码分离开


826
00:50:25,092 --> 00:50:26,960 line:-1
使用滑动平台的魔力


827
00:50:27,027 --> 00:50:30,030 line:-2
我们可以在这里创建一个简单的
AHAP文件


828
00:50:31,732 --> 00:50:34,034 line:-1
从版本号字符串开始


829
00:50:34,101 --> 00:50:36,403 line:-1
那表明了这个模式


830
00:50:36,470 --> 00:50:38,038 line:-1
可以在哪个版本的系统上使用


831
00:50:40,240 --> 00:50:42,576 line:-1
接下来我们给模式添加键


832
00:50:42,643 --> 00:50:45,045 line:-1
那是一个字典数组


833
00:50:47,514 --> 00:50:50,584 line:-2
我们向模式数组中添加第一个
事件字典


834
00:50:50,651 --> 00:50:54,121 line:-1
这个事件有两个必需键值对


835
00:50:54,188 --> 00:50:57,057 line:-2
以秒为单位的时间表明相对于
模式的开始时间和事件类型


836
00:50:57,658 --> 00:51:01,061 line:-1
事件应该何时发生


837
00:51:01,361 --> 00:51:05,065 line:-2
这是一个HapticTransient事件
只要模式开启就开始


838
00:51:07,434 --> 00:51:12,039 line:-2
对于这个事件 我们要添加事件参数
仅会影响这一个事件


839
00:51:12,105 --> 00:51:15,075 line:-1
这些存储在它们自己的字典数组中


840
00:51:16,243 --> 00:51:19,713 line:-2
我们要添加一个EventParameter
控制事件的强度


841
00:51:19,780 --> 00:51:22,082 line:-2
并添加另一个EventParameter
控制它的锐度


842
00:51:25,118 --> 00:51:27,855 line:-2
我们可以以同样的方式添加
第二个事件


843
00:51:27,921 --> 00:51:30,991 line:-2
第二个事件的开始时间比第一个事件
推后0.5秒


844
00:51:31,058 --> 00:51:33,727 line:-2
并且是
HapticContinuous类型


845
00:51:33,794 --> 00:51:35,028 line:-2
对于
EventParameters


846
00:51:35,095 --> 00:51:38,098 line:-2
我们使用我们在第一个事件中
所使用的同一个EventParameters


847
00:51:40,000 --> 00:51:43,437 line:-2
HapticContinuous类型
和AudioContinuous类型的事件


848
00:51:43,504 --> 00:51:47,875 line:-2
除时间和事件类型外
还需要事件持续时间


849
00:51:47,941 --> 00:51:51,111 line:-1
这个持续时间值总是以秒为单位


850
00:51:53,447 --> 00:51:57,417 line:-2
这是我们刚刚所创建的模式的
可视化呈现


851
00:51:57,484 --> 00:51:59,686 line:-1
你可以看到两种时间类型


852
00:51:59,753 --> 00:52:02,923 line:-2
最开始的
HapticTransient


853
00:52:02,990 --> 00:52:04,358 line:-1
以及稍后的Continuous


854
00:52:04,424 --> 00:52:06,360 line:-1
以及它们相对的时间和持续时间


855
00:52:06,426 --> 00:52:10,130 line:-1
以及它们的强度和锐度参数值


856
00:52:12,366 --> 00:52:14,368 line:-1
这是对AHAP的快速介绍


857
00:52:14,434 --> 00:52:18,105 line:-1
这个图表是AHAP文件结构的概述


858
00:52:18,172 --> 00:52:22,142 line:-1
一个模式包含一个事件字典的数组


859
00:52:22,843 --> 00:52:25,312 line:-1
可选的动态参数


860
00:52:25,379 --> 00:52:27,714 line:-1
以及对参数曲线的选择性使用


861
00:52:27,781 --> 00:52:30,651 line:-1
参数曲线是动态参数的一个扩展


862
00:52:30,717 --> 00:52:35,622 line:-1
你可以从网站上获得更多信息


863
00:52:36,190 --> 00:52:39,126 line:-1
你可以在我们的演讲页面上


864
00:52:39,193 --> 00:52:41,161 line:-1
找到AHAP规范的完整链接


865
00:52:43,897 --> 00:52:45,098 line:-1
同时 在我们的演讲页面上


866
00:52:45,165 --> 00:52:48,802 line:-2
你可以找到一段代码示例
用于展示如何创建、加载和播放


867
00:52:48,869 --> 00:52:51,205 line:-1
由AHAP文件描述的模式


868
00:52:51,271 --> 00:52:54,508 line:-2
这个力触觉示例app
包含一系列模式


869
00:52:54,575 --> 00:52:58,779 line:-2
特别使用Core Haptics API
所可能拥有的


870
00:52:58,846 --> 00:53:01,181 line:-1
敏锐度、动态范围和音频力触觉同步


871
00:53:02,616 --> 00:53:04,818 line:-1
非常感谢大家 现在我要把舞台


872
00:53:04,885 --> 00:53:06,787 line:-1
交还给我的同事Michael


873
00:53:13,961 --> 00:53:15,262 line:-1
谢谢Doug


874
00:53:15,329 --> 00:53:18,165 line:-1
虽然我们今天讲了许多内容


875
00:53:18,232 --> 00:53:22,202 line:-2
但还有更多关于
Core Haptics的内容要了解


876
00:53:23,036 --> 00:53:26,206 line:-1
请查看在线引用文档获取更多详情


877
00:53:27,274 --> 00:53:30,844 line:-1
一旦你准备好并开始尝试


878
00:53:30,911 --> 00:53:32,079 line:-1
指定内容并播放内容


879
00:53:32,145 --> 00:53:35,215 line:-1
你很可能会思考


880
00:53:35,282 --> 00:53:37,651 line:-2
这些相连接的力触觉音频模式的
设计准则


881
00:53:39,152 --> 00:53:43,090 line:-2
你会思考 这些准则
这些用于声音设计的准则


882
00:53:43,156 --> 00:53:45,058 line:-1
是否能迁到力触觉设计中？


883
00:53:45,125 --> 00:53:48,195 line:-1
我应该注意哪些常见的陷阱？


884
00:53:48,262 --> 00:53:52,866 line:-2
好消息是我们的音频和力触觉
设计团队


885
00:53:52,933 --> 00:53:54,601 line:-1
数年来一直在做这项工作


886
00:53:54,668 --> 00:53:57,504 line:-2
他们已经在最新的人机界面指南
或叫做HIG中


887
00:53:57,571 --> 00:54:01,241 line:-1
提供了一些关于力触觉的建议和指导


888
00:54:01,308 --> 00:54:06,246 line:-2
并在今年的WWDC的这场演讲中
也给出了一些建议和指导


889
00:54:06,747 --> 00:54:08,248 line:-1
请参看


890
00:54:09,583 --> 00:54:11,018 line:-1
让我们快速回顾一下


891
00:54:11,084 --> 00:54:13,887 line:-2
今天我们讲了力触觉可以从哪些方面
帮助你


892
00:54:13,954 --> 00:54:16,356 line:-1
达到复现的下一层级


893
00:54:16,423 --> 00:54:19,259 line:-1
并让你的app在更轻松地进行交互


894
00:54:20,160 --> 00:54:25,566 line:-2
同时具有同步的和互补的
音频和力触觉


895
00:54:25,632 --> 00:54:28,635 line:-1
是一种特别有效的组合


896
00:54:28,702 --> 00:54:32,372 line:-1
但还没有API可以让你这样做


897
00:54:33,073 --> 00:54:37,077 line:-2
通过iOS 13
我们现在有必要的API


898
00:54:37,144 --> 00:54:40,280 line:-1
可以创建这些丰富的多模式的体验


899
00:54:40,814 --> 00:54:45,285 line:-2
我们有用于描述力触觉和音频事件的
词汇了


900
00:54:46,119 --> 00:54:48,288 line:-1
还有一个文件格式AHAP


901
00:54:48,956 --> 00:54:52,726 line:-2
我们有一种新的平台
API Core Haptics


902
00:54:52,793 --> 00:54:56,296 line:-1
用于低延迟和实时调整


903
00:54:57,965 --> 00:55:02,302 line:-1
我们结合了示例代码、示例模式、


904
00:55:02,369 --> 00:55:05,539 line:-1
设计指南和Apple的支持


905
00:55:05,606 --> 00:55:08,742 line:-1
最后你得到了非常好的观众


906
00:55:08,809 --> 00:55:10,110 line:-1
非常好的硬件


907
00:55:10,177 --> 00:55:12,913 line:-1
你可以感觉到你想要的那种力触觉


908
00:55:12,980 --> 00:55:16,517 line:-1
安装巨大的触觉引擎


909
00:55:16,583 --> 00:55:18,619 line:-1
可以给你提供最强大、


910
00:55:18,685 --> 00:55:22,322 line:-1
最有表现力的、最精准的力触觉硬件


911
00:55:23,590 --> 00:55:27,361 line:0
请大家参加我们在周四和周五
举办的演讲


912
00:55:27,427 --> 00:55:31,098 line:0
你可以在演讲上


913
00:55:31,164 --> 00:55:32,332 line:0
查看我们今天所演示的这些
力触觉示例


914
00:55:33,133 --> 00:55:35,836 line:0
并讨论你对于你的app的想法


915
00:55:35,903 --> 00:55:40,407 line:0
你还可以从我们的演讲页面上


916
00:55:40,474 --> 00:55:42,342 line:-1
找到全部指导和引用


917
00:55:43,544 --> 00:55:48,115 line:-2
我知道你一定会通过在app中
创建和使用这些力触觉模式中


918
00:55:48,182 --> 00:55:49,116 line:-1
获得很多乐趣


919
00:55:49,183 --> 00:55:51,952 line:-2
我们几乎已经迫不及待地要看到
你们会做出什么样的成果


920
00:55:52,019 --> 00:55:53,620 line:-1
谢谢大家 晚安

