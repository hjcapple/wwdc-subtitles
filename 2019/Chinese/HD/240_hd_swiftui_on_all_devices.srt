1
00:00:06,807 --> 00:00:09,843 line:0
（所有设备上的SwiftUI）


2
00:00:09,910 --> 00:00:13,380 line:0
好的 谢谢大家 欢迎


3
00:00:14,114 --> 00:00:15,382 line:-1
很高兴在这里见到你们


4
00:00:15,449 --> 00:00:18,785 line:-2
我很高兴大家对
SwiftUI很感兴趣


5
00:00:19,286 --> 00:00:20,487 line:-1
我是Jeff Nadeau


6
00:00:20,554 --> 00:00:23,056 line:-2
我在macOS的架构团队工作
我将和同事Ada Turner


7
00:00:23,123 --> 00:00:26,026 line:-2
Meghna Sapre为大家
带来演讲


8
00:00:27,027 --> 00:00:28,996 line:-2
现在 我们希望你通过这周的演讲
已经了解过SwiftUI


9
00:00:29,062 --> 00:00:32,266 line:-2
但如果你需要一个总结
那么我们开始吧


10
00:00:32,633 --> 00:00:36,270 line:-2
SwiftUI是在任何设备上
创建优质app最简单的方式


11
00:00:36,336 --> 00:00:38,005 line:-2
（在任何设备上创建优质app
最简单的方式）


12
00:00:38,071 --> 00:00:41,742 line:-2
我们今天关注的焦点是
“每个” 在每个设备上


13
00:00:42,910 --> 00:00:44,578 line:-2
现在 当我们想到
为我们Apple的


14
00:00:44,645 --> 00:00:45,779 line:-1
所有设备创建app


15
00:00:45,846 --> 00:00:47,714 line:-1
我们会想到这些技术


16
00:00:48,015 --> 00:00:49,416 line:-1
我们在Mac上使用AppKit


17
00:00:49,716 --> 00:00:51,952 line:-2
在iPhone和iPad上
使用UIKit


18
00:00:52,019 --> 00:00:55,422 line:-2
使用UIKit的TVUIKit为
Apple TV创建app


19
00:00:55,489 --> 00:00:57,224 line:-2
接下来是 在Watch上使用
WatchKit


20
00:00:58,425 --> 00:01:01,628 line:-1
依照每种设备的强项和性能


21
00:01:01,695 --> 00:01:03,297 line:-2
这些UI框架是针对
每种设备来设计的


22
00:01:03,363 --> 00:01:05,732 line:-2
自然地 它们之间
有会有一些差别


23
00:01:06,266 --> 00:01:09,203 line:-2
以前 我们无法将其中一个
设备特有的代码


24
00:01:09,269 --> 00:01:11,805 line:-1
不做修改就移到其他设备上


25
00:01:13,574 --> 00:01:16,510 line:-2
但是 这一次
我们将介绍的一个UI框架


26
00:01:16,577 --> 00:01:18,712 line:-1
可以让你在任何设备上使用了


27
00:01:19,246 --> 00:01:21,548 line:-1
对app开发者来说


28
00:01:21,615 --> 00:01:23,116 line:-1
这是一个空前的好机会


29
00:01:24,318 --> 00:01:25,586 line:-1
但是这些设备都很不一样


30
00:01:25,652 --> 00:01:27,554 line:-1
我们如何使用UI框架创建一个


31
00:01:27,621 --> 00:01:28,956 line:-1
就能适配所有的呢？


32
00:01:29,022 --> 00:01:30,023 line:-1
（为所有平台设计）


33
00:01:30,090 --> 00:01:32,125 line:-1
SwiftUI从开始就为适配


34
00:01:32,192 --> 00:01:34,628 line:-1
许多不同的UI范例而创建的


35
00:01:34,895 --> 00:01:37,197 line:-1
所以无论你是使用键盘和鼠标


36
00:01:37,264 --> 00:01:39,833 line:-2
或是一个多点触摸设备
又或是Siri Remote


37
00:01:40,100 --> 00:01:42,035 line:-2
甚至是Apple Watch上的
数码表冠


38
00:01:42,102 --> 00:01:45,372 line:-1
或辅助工具比如旁白和切换控制


39
00:01:45,639 --> 00:01:48,175 line:-2
SwiftUI被设计为
适配所有的这些


40
00:01:49,142 --> 00:01:50,377 line:-1
它为我们的平台设计惯例


41
00:01:50,444 --> 00:01:52,913 line:-1
提供了很大以及有创造性的支持


42
00:01:53,413 --> 00:01:55,649 line:-1
我们邀请了不同平台的专家们


43
00:01:55,716 --> 00:01:56,583 line:-1
来确保


44
00:01:57,050 --> 00:02:01,588 line:-2
当你在某个设备上
使用一个SwiftUI的元素时


45
00:02:01,655 --> 00:02:03,957 line:-1
会非常合适


46
00:02:05,025 --> 00:02:05,959 line:-2
这个系统可以允许你在
多个平台之间


47
00:02:06,026 --> 00:02:08,794 line:-1
运用你有限的知识


48
00:02:09,263 --> 00:02:11,198 line:-2
每个物件都能以相同的方式
适配良好


49
00:02:11,532 --> 00:02:15,536 line:-2
甚至当你为了支持一些
特殊的硬件时


50
00:02:15,602 --> 00:02:19,239 line:-2
比如MacBook Pro的Touch Bar
或是Apple Watch上的数码表冠


51
00:02:19,306 --> 00:02:20,607 line:-1
又或是Siri Remote


52
00:02:20,874 --> 00:02:23,043 line:-1
用来实现的工具具有连贯性


53
00:02:23,110 --> 00:02:26,113 line:-1
以及使用起来非常相似和简单


54
00:02:27,147 --> 00:02:30,918 line:-1
现在 通常的设计理念中


55
00:02:30,984 --> 00:02:33,887 line:-1
我们也在SwiftUI为一些元素


56
00:02:33,954 --> 00:02:35,689 line:-1
做了跨平台的统一支持


57
00:02:35,756 --> 00:02:36,790 line:-1
比如


58
00:02:37,291 --> 00:02:40,060 line:-1
每个平台都有切换控制


59
00:02:40,127 --> 00:02:41,395 line:-1
（通用元素）


60
00:02:41,461 --> 00:02:43,030 line:-1
你已经获得了一些布尔状态值


61
00:02:43,096 --> 00:02:44,398 line:-1
你想要切换


62
00:02:44,831 --> 00:02:48,168 line:-1
以及 你有一个切换的描述标签


63
00:02:49,436 --> 00:02:50,838 line:-1
所以 虽然


64
00:02:51,471 --> 00:02:54,341 line:-2
这个控制在每个设备上
表现形式都很不一样


65
00:02:54,408 --> 00:02:57,277 line:-2
它可能是一个切换键 一个复选框
或一个切换按钮


66
00:02:57,578 --> 00:03:01,248 line:-2
我们能提供一个单独的API
在任何设备上使用它


67
00:03:03,750 --> 00:03:06,453 line:-2
SwiftUI也用一套通用的
布局系统


68
00:03:06,820 --> 00:03:09,756 line:-2
所以当你使用一个栈
一个空间隔或一个填充


69
00:03:09,823 --> 00:03:11,992 line:-2
这些工具在每个设备上使用
起来都一样


70
00:03:12,059 --> 00:03:13,660 line:-1
那意味着你只要知道


71
00:03:13,727 --> 00:03:15,863 line:-1
在一个设备上为app布局


72
00:03:15,929 --> 00:03:18,265 line:-1
你就能适配所有的设备了


73
00:03:21,435 --> 00:03:24,605 line:-2
我们也有一些更高端的控制
比如选择器


74
00:03:24,671 --> 00:03:27,107 line:-2
选择器能从一个列表中
选择一个元素


75
00:03:27,774 --> 00:03:30,577 line:-1
它在不同设备上的UI设计不一


76
00:03:30,644 --> 00:03:33,013 line:-2
在macOS上 它可能是
一个弹窗按钮


77
00:03:33,080 --> 00:03:36,083 line:-2
在iOS或watchOS上
它会是滚轮风格的选择器


78
00:03:37,084 --> 00:03:39,019 line:-1
不管它们区别多大


79
00:03:39,086 --> 00:03:41,221 line:-1
你可能不会完全在


80
00:03:41,288 --> 00:03:42,589 line:-1
设备之间交替使用它们


81
00:03:42,923 --> 00:03:46,293 line:-1
但是你绑定的数据是一直不变的


82
00:03:47,060 --> 00:03:49,863 line:-2
当你使用其中的一个控制器
来适配你的模型工作


83
00:03:49,930 --> 00:03:53,133 line:-1
你可以很简单地在设备之间转移


84
00:03:53,867 --> 00:03:55,202 line:-1
现在我们没有时间来了解


85
00:03:55,269 --> 00:03:57,738 line:-1
SwiftUI上所有不同的元素


86
00:03:57,804 --> 00:03:59,740 line:-1
想要了解更多信息


87
00:03:59,806 --> 00:04:01,275 line:-1
你可以查阅SwiftUI基础演讲


88
00:04:02,709 --> 00:04:05,913 line:-2
现在 这是否意味着我能
完全依赖SwiftUI


89
00:04:05,979 --> 00:04:08,081 line:-1
设计一个app就能


90
00:04:08,148 --> 00:04:09,883 line:-1
在所有设备良好运行呢


91
00:04:10,784 --> 00:04:15,022 line:-2
我为4k电视设计的代码
是否就能完美无缺地


92
00:04:15,088 --> 00:04:17,891 line:-1
在44毫米的表盘上顺利运行呢


93
00:04:20,093 --> 00:04:21,394 line:-1
当然不能


94
00:04:21,461 --> 00:04:23,230 line:-1
（当然不能）


95
00:04:23,297 --> 00:04:27,367 line:-2
你知道的 一个尺寸的app
不可能适用于所有的设备


96
00:04:28,202 --> 00:04:31,371 line:-1
如果我们只想要在所有设备中


97
00:04:31,438 --> 00:04:32,739 line:-1
都坚持使用相同的设计方案


98
00:04:33,106 --> 00:04:36,343 line:-2
我们会错过app在每个设备上
的最佳展示


99
00:04:37,177 --> 00:04:39,880 line:-1
不会有奇迹发生


100
00:04:39,947 --> 00:04:41,849 line:-1
你必须为你的app在各个平台


101
00:04:41,915 --> 00:04:44,117 line:-1
做出正确的设计


102
00:04:45,252 --> 00:04:47,087 line:-1
现在 SwiftUI能帮你


103
00:04:47,421 --> 00:04:50,524 line:-1
运用你知道的技能栈和工具集


104
00:04:50,591 --> 00:04:53,460 line:-1
分散到各个设备


105
00:04:54,461 --> 00:04:56,730 line:-1
你的代码也一定能有机会


106
00:04:56,797 --> 00:05:00,100 line:-1
运用到多平台中


107
00:05:01,468 --> 00:05:03,470 line:-1
因此 我们认为写少量的代码


108
00:05:03,537 --> 00:05:05,873 line:-1
就能运用到多处运行


109
00:05:06,406 --> 00:05:09,543 line:-2
以及学习一种运用多处的方式
很重要


110
00:05:09,610 --> 00:05:11,078 line:-1
（一次学习 到处应用）


111
00:05:11,144 --> 00:05:13,113 line:-1
现在 我们将概念运用到实践中


112
00:05:13,447 --> 00:05:14,882 line:-1
我们需要创建一个app


113
00:05:14,948 --> 00:05:15,949 line:-1
（我们创建一个app）


114
00:05:16,016 --> 00:05:16,917 line:-1
但


115
00:05:17,484 --> 00:05:21,455 line:-2
它更像是我们创建了4个app
每个对应不同的平台


116
00:05:21,522 --> 00:05:22,689 line:-1
（我们创建4个app）


117
00:05:22,756 --> 00:05:25,125 line:-2
我们创建的app
叫做Landmarks


118
00:05:25,792 --> 00:05:28,028 line:-2
Landmarks的
作用是在整个国家


119
00:05:28,095 --> 00:05:29,096 line:-1
搜索和访问地标


120
00:05:29,162 --> 00:05:30,631 line:-1
（Landmarks）


121
00:05:30,697 --> 00:05:32,032 line:-1
想必大家都想看照片


122
00:05:32,099 --> 00:05:34,301 line:-1
以及获取这些地方的游客信息


123
00:05:35,969 --> 00:05:39,640 line:-2
我认为能获取目的地的地图和方向
会很棒


124
00:05:40,941 --> 00:05:43,644 line:-2
如果我们计划了一次旅行
为喜欢的内容做标记会是很棒的设计


125
00:05:44,778 --> 00:05:47,681 line:-2
当我们想要在所有设备上支持
我们的app时


126
00:05:47,748 --> 00:05:51,251 line:-1
我们要了解我们的app


127
00:05:51,318 --> 00:05:52,686 line:-1
在不同平台应该如何展示


128
00:05:53,921 --> 00:05:54,888 line:-1
所以 比如


129
00:05:55,422 --> 00:05:56,456 line:-1
在Apple TV上


130
00:05:57,157 --> 00:05:59,793 line:-1
很适合搜寻要去的景点


131
00:06:01,328 --> 00:06:02,796 line:-1
因为它的屏幕很大


132
00:06:02,863 --> 00:06:05,899 line:-2
你可以和家人 朋友或室友
一同查看


133
00:06:05,966 --> 00:06:07,768 line:-2
（为Apple TV设计的
Landmarks）


134
00:06:07,835 --> 00:06:10,504 line:-2
我们也想为我们喜欢的内容做标记
之后就可以再次查看了


135
00:06:12,506 --> 00:06:15,042 line:-1
Mac会是一个搜索的好平台


136
00:06:15,108 --> 00:06:16,677 line:-2
（为Mac设计的
Landmarks）


137
00:06:16,743 --> 00:06:18,946 line:-2
这是一个对比和获取对比信息
的好平台


138
00:06:19,746 --> 00:06:22,716 line:-2
可能还有一些更高级的整理和
过滤的功能


139
00:06:23,817 --> 00:06:25,619 line:-1
也适合阅读细节的内容


140
00:06:26,486 --> 00:06:27,921 line:-2
（为iOS设计的
Landmarks）


141
00:06:27,988 --> 00:06:28,856 line:-1
在iPhone上


142
00:06:29,289 --> 00:06:31,892 line:-1
我们会很想获取每个地标的简介


143
00:06:32,759 --> 00:06:35,062 line:-2
但使用图片的方式
来浏览太常见了


144
00:06:35,395 --> 00:06:37,564 line:-1
我们也需要获取抵达目的地的信息


145
00:06:38,966 --> 00:06:40,701 line:-1
当然 iPhone也是手机


146
00:06:40,767 --> 00:06:42,903 line:-2
那么 如果我们想要提前
打电话


147
00:06:42,970 --> 00:06:44,371 line:-1
自然也能做到


148
00:06:46,807 --> 00:06:48,075 line:-1
最后在Apple Watch上


149
00:06:48,375 --> 00:06:50,077 line:-1
我们能查看我们需要知道


150
00:06:50,143 --> 00:06:51,879 line:-1
的最重要的信息


151
00:06:51,945 --> 00:06:53,180 line:-2
（为Apple Watch
设计的Landmarks）


152
00:06:53,247 --> 00:06:56,683 line:-1
当有信息变动时


153
00:06:56,750 --> 00:06:58,018 line:-1
它是接收重要信息的绝佳平台


154
00:07:00,287 --> 00:07:01,121 line:-1
现在 最酷的


155
00:07:01,522 --> 00:07:03,290 line:-1
是app的iOS版本


156
00:07:03,357 --> 00:07:05,292 line:-1
你现在就能使用了


157
00:07:06,193 --> 00:07:10,097 line:-2
它是教你如何使用SwiftUI
新文档的一部分


158
00:07:10,898 --> 00:07:12,432 line:-1
你从最开始


159
00:07:12,499 --> 00:07:15,469 line:-1
你可以按步骤创建这个app


160
00:07:15,536 --> 00:07:16,970 line:-1
（学习体验）


161
00:07:17,037 --> 00:07:18,872 line:-1
今天就可以下载了


162
00:07:19,139 --> 00:07:21,675 line:-2
它是学习创建
iOS app的好方式


163
00:07:22,109 --> 00:07:24,845 line:-2
作为一个结果
我们今天将更关注


164
00:07:24,912 --> 00:07:29,082 line:-2
如何在Apple TV、Mac
和Apple Watch创建这个app


165
00:07:30,551 --> 00:07:31,818 line:-1
在开始之前


166
00:07:31,885 --> 00:07:33,820 line:-1
有请我的同事Ada Turner


167
00:07:33,887 --> 00:07:36,557 line:-2
来为大家介绍如何在AppleTV
上使用SwiftUI


168
00:07:36,957 --> 00:07:40,294 line:-2
（在Apple TV上
使用SwiftUI）


169
00:07:43,797 --> 00:07:44,631 line:-1
谢谢Jeff


170
00:07:45,132 --> 00:07:47,768 line:-1
大家好 我是Ada Turner


171
00:07:47,835 --> 00:07:50,404 line:-1
今天 我非常高兴能为大家


172
00:07:50,470 --> 00:07:53,006 line:-2
介绍关于在Appe TV上
使用SwiftUI


173
00:07:54,675 --> 00:07:56,777 line:-1
为TV设计app


174
00:07:56,844 --> 00:08:01,615 line:-2
意味着要考虑到Apple TV
独特的挑战


175
00:08:01,682 --> 00:08:06,119 line:-1
为家里最宽大的屏幕来设计app


176
00:08:06,520 --> 00:08:10,858 line:-2
幸运的是
你为Apple其他设备学习的


177
00:08:10,924 --> 00:08:15,395 line:-1
的技术和工具集


178
00:08:15,462 --> 00:08:18,565 line:-2
使用SwiftUI
就已经优化了在TV上优质的体验


179
00:08:20,000 --> 00:08:23,403 line:-1
今天 我会主要讲在宽大屏幕


180
00:08:23,470 --> 00:08:27,508 line:-1
设计良好用户体验的三个关键点


181
00:08:28,308 --> 00:08:32,578 line:-2
tvOS是一个10英尺的用户体验
而不是一个手机上的用户体验


182
00:08:33,179 --> 00:08:36,416 line:-2
人们使用Siri Remote
来与你的app交互


183
00:08:36,482 --> 00:08:39,019 line:-2
而不是一个触碰屏幕或一个鼠标
和键盘


184
00:08:39,520 --> 00:08:42,823 line:-1
有流线型的导航


185
00:08:42,890 --> 00:08:44,825 line:-1
对tvOS的app尤其重要


186
00:08:44,892 --> 00:08:47,694 line:-2
这样人们可以直接
进入你app的内容


187
00:08:48,629 --> 00:08:52,032 line:-2
现在 什么是10英尺的
用户体验呢？


188
00:08:53,233 --> 00:08:54,201 line:-1
是这个


189
00:08:55,302 --> 00:08:56,470 line:-1
而不是这个


190
00:08:57,571 --> 00:09:01,775 line:-2
你的app应该强调丰富沉浸式
的用户体验


191
00:09:01,842 --> 00:09:06,547 line:-2
比如美丽的图像或视频l
而不仅仅只是完成像是


192
00:09:06,613 --> 00:09:09,149 line:-1
做笔记或获取方向的任务


193
00:09:09,483 --> 00:09:10,317 line:-1
（10英尺用户体验）


194
00:09:10,384 --> 00:09:14,888 line:-2
从其他设备分享SwiftUI代码
给你的Apple TV app时


195
00:09:15,455 --> 00:09:19,226 line:-1
在房间长时间


196
00:09:19,526 --> 00:09:23,964 line:-1
以及可能多人同时观看大屏幕时


197
00:09:24,765 --> 00:09:26,900 line:-1
需要小心考虑


198
00:09:27,534 --> 00:09:30,604 line:-1
哪种用户体验最好


199
00:09:32,172 --> 00:09:35,108 line:-1
我们来看在TV上 我们决定


200
00:09:35,175 --> 00:09:36,610 line:-1
为Landmarks支持


201
00:09:36,877 --> 00:09:39,413 line:-1
以及去掉哪些功能


202
00:09:40,581 --> 00:09:44,218 line:-2
最简单的方式是
引入Landmarks上


203
00:09:44,284 --> 00:09:47,454 line:-1
在大屏幕上看起来非常好看的照片


204
00:09:47,521 --> 00:09:48,488 line:-2
（Landmarks -
什么需要去除呢？）


205
00:09:48,555 --> 00:09:51,391 line:-1
在客厅里一起挑选最爱的那个


206
00:09:51,458 --> 00:09:55,462 line:-2
是我们要记住的tvOS app
最核心的功能之一


207
00:09:56,630 --> 00:09:59,833 line:-1
我们也包含了基本的游客信息


208
00:09:59,900 --> 00:10:02,336 line:-1
比如时长信息和费用


209
00:10:02,402 --> 00:10:04,638 line:-2
这样人们在浏览他们要去
参观的地方时


210
00:10:04,705 --> 00:10:07,174 line:-1
就能做出正确的选择


211
00:10:08,408 --> 00:10:10,911 line:-1
现在 虽然我们的数据支持它


212
00:10:10,978 --> 00:10:14,414 line:-1
我们还是决定不去包含


213
00:10:14,481 --> 00:10:16,450 line:-1
很长的每个地标历史具体信息


214
00:10:16,517 --> 00:10:20,320 line:-2
因为在TV上展示
这样的内容不太合适


215
00:10:21,088 --> 00:10:22,055 line:-1
我们也决定


216
00:10:22,122 --> 00:10:24,791 line:-1
不包含相对高级的整理和过滤功能


217
00:10:24,858 --> 00:10:26,894 line:-2
因为这样的功能
在Mac和iPad上


218
00:10:26,960 --> 00:10:28,629 line:-1
使用更为合理


219
00:10:29,296 --> 00:10:33,667 line:-2
最后 虽然我们的数据包含了
地理坐标位置


220
00:10:33,734 --> 00:10:37,104 line:-1
我们决定不实现地理围栏通知功能


221
00:10:37,171 --> 00:10:41,942 line:-2
因为旅行时使用tvOS app
是非常罕见的用户用例


222
00:10:44,444 --> 00:10:46,713 line:-1
接下来 我们来了解一下焦点


223
00:10:48,582 --> 00:10:52,052 line:-2
人们使用Siri Remote
来与tvOS app产生交互


224
00:10:52,319 --> 00:10:54,922 line:-1
它已被优化 你能在app界面


225
00:10:54,988 --> 00:10:56,490 line:-1
毫不费劲地滑动


226
00:10:57,090 --> 00:11:00,427 line:-1
你要谨慎在你整个app的界面中


227
00:11:00,494 --> 00:11:03,330 line:-1
使用焦距来直观地导航


228
00:11:03,897 --> 00:11:07,968 line:-2
幸运的是 许多SwiftUI的
标准用户元素


229
00:11:08,035 --> 00:11:12,206 line:-1
比如列表 按钮 文字域和切换键


230
00:11:12,472 --> 00:11:14,908 line:-1
都能在tvOS上良好地使用


231
00:11:14,975 --> 00:11:17,878 line:-1
能适应不同的外观和用户操作行为


232
00:11:17,945 --> 00:11:22,316 line:-2
它在大屏幕和使用焦点交互时
看上去很赞


233
00:11:23,450 --> 00:11:25,986 line:-1
如果你实现了你自己的自定义控制


234
00:11:26,053 --> 00:11:31,425 line:-2
SwiftUI提供了一个
可聚焦的视图修饰符


235
00:11:31,491 --> 00:11:35,762 line:-1
在你的视图获得或失去焦点时


236
00:11:35,829 --> 00:11:37,931 line:-2
它允许你控制你的视图是否
能聚焦和执行一段代码


237
00:11:38,398 --> 00:11:41,468 line:-2
你也能使用
onPlayPauseCommand


238
00:11:41,535 --> 00:11:45,572 line:-2
onExitCommand
视图修饰符来回应用户


239
00:11:45,639 --> 00:11:49,276 line:-1
当你的视图聚焦时


240
00:11:49,343 --> 00:11:50,844 line:-2
在Siri Remote点击
播放暂停和菜单按钮


241
00:11:51,945 --> 00:11:52,946 line:-1
（流水线导航）


242
00:11:53,013 --> 00:11:53,881 line:-1
谢谢


243
00:11:58,352 --> 00:12:03,257 line:-2
最后 我们来深入了解一下
tvOS上最棒的导航实践


244
00:12:04,958 --> 00:12:07,794 line:-2
在Mac或iPhone上的
深层嵌套的导航上


245
00:12:07,861 --> 00:12:13,000 line:-2
操作长的 垂直地可滚动的表单内容
体验很好


246
00:12:13,066 --> 00:12:15,335 line:-1
但在tvOS上


247
00:12:15,402 --> 00:12:19,973 line:-2
人们想要一个轻松地
着重于内容浏览体验


248
00:12:20,574 --> 00:12:24,645 line:-2
使用SwiftUI简单的
组合堆栈视图


249
00:12:24,711 --> 00:12:29,183 line:-2
列表视图和滚动视图
我们就能在为Landmarks


250
00:12:29,249 --> 00:12:31,018 line:-2
在TV上
创建一个像这样的用户界面


251
00:12:31,084 --> 00:12:34,454 line:-1
有垂直堆栈的水平滚动的架子


252
00:12:34,521 --> 00:12:38,592 line:-1
它充分利用了TV宽频的优点


253
00:12:38,659 --> 00:12:42,129 line:-1
允许人们不用在页面间切换


254
00:12:42,196 --> 00:12:44,932 line:-1
就能浏览不同类别


255
00:12:46,200 --> 00:12:49,269 line:-2
首先 我们来看一下
我们要如何为Apple TV构建


256
00:12:49,336 --> 00:12:53,407 line:-2
一个SwiftUI app的
顶层导航


257
00:12:54,374 --> 00:12:59,213 line:-2
标签视图是实现许多tvOS
app导航的主要的方式


258
00:12:59,580 --> 00:13:03,617 line:-2
它允许你将你app内容
归类到明确的类别


259
00:13:03,684 --> 00:13:05,586 line:-1
它们非常容易切换


260
00:13:05,652 --> 00:13:09,623 line:-2
在顶层的每个视图
提供了连续的指示符


261
00:13:09,690 --> 00:13:12,092 line:-1
允许用户知道他们在app中的位置


262
00:13:13,260 --> 00:13:17,097 line:-1
导航视图允许你包含页面的内容


263
00:13:17,164 --> 00:13:21,502 line:-2
不用一个标题或按钮就能
选择性地展示一个导航栏


264
00:13:22,769 --> 00:13:24,304 line:-1
我想简洁地说明一下


265
00:13:24,571 --> 00:13:29,510 line:-2
在tvOS和iOS构建
你app顶层导航的区别


266
00:13:30,511 --> 00:13:33,347 line:-2
在iOS上
如果你使用一个标签视图


267
00:13:33,413 --> 00:13:36,383 line:-1
它通常会在你app的顶层视图


268
00:13:36,950 --> 00:13:40,854 line:-2
它的每个子视图
可能会是一个的导航视图


269
00:13:41,288 --> 00:13:44,758 line:-2
包含你app内容的
导航视图的根视图


270
00:13:45,192 --> 00:13:46,460 line:-1
基于这个架构


271
00:13:46,527 --> 00:13:49,496 line:-1
当人们深入了解你app的内容时


272
00:13:49,563 --> 00:13:51,532 line:-1
标签栏仍保持可见


273
00:13:51,598 --> 00:13:54,735 line:-2
允许人们在任何时候都可以
简单地切换标签


274
00:13:56,069 --> 00:13:57,471 line:-1
这里 Photos中


275
00:13:57,838 --> 00:14:01,008 line:-1
在跳转至详情页面后


276
00:14:01,708 --> 00:14:04,211 line:-1
标签栏在屏幕底部一直处于可见状态


277
00:14:05,546 --> 00:14:10,484 line:-2
这样用户就不用返回导航
简单地切换标签就可以了


278
00:14:12,819 --> 00:14:13,654 line:-1
然而


279
00:14:14,922 --> 00:14:18,525 line:-1
如果你在tvOS上使用标签视图


280
00:14:19,026 --> 00:14:21,862 line:-1
你会想要让导航视图


281
00:14:21,929 --> 00:14:26,667 line:-2
出现在你app的顶层视图
并将它的根视图设为你app的内容


282
00:14:27,067 --> 00:14:30,704 line:-1
的是标签视图的直接子类的标签视图


283
00:14:31,138 --> 00:14:32,239 line:-1
使用这个架构


284
00:14:32,306 --> 00:14:35,042 line:-2
当人们通过导航深入
了解你app的内容时


285
00:14:35,576 --> 00:14:39,947 line:-2
我们想要顶层栏消失
因为tvOS其实


286
00:14:40,013 --> 00:14:44,518 line:-1
是强调你app内容的全屏幕体验


287
00:14:44,585 --> 00:14:45,986 line:-2
（tvOS和iOS的
导航层级的不同点）


288
00:14:46,353 --> 00:14:50,057 line:-2
这是TV的Photos
当我们从导航


289
00:14:50,123 --> 00:14:52,826 line:-2
跳转到相册详情页时
标签栏消失了


290
00:14:52,893 --> 00:14:55,863 line:-1
这样用户就能专注于相册的内容


291
00:14:58,765 --> 00:15:01,869 line:-1
SwiftUI视图是高复合型的


292
00:15:01,935 --> 00:15:05,806 line:-1
所以在tvOS上重组你app的


293
00:15:05,873 --> 00:15:07,007 line:-1
导航架构非常容易


294
00:15:07,941 --> 00:15:11,378 line:-1
标签视图


295
00:15:12,346 --> 00:15:13,747 line:-1
导航视图


296
00:15:14,982 --> 00:15:16,250 line:-1
和内容视图之间的嵌套关系


297
00:15:16,617 --> 00:15:21,121 line:-2
都是你代码中
固有结构的可视化展现


298
00:15:22,890 --> 00:15:26,326 line:-2
现在 我们来实践一下
这些概念


299
00:15:26,393 --> 00:15:28,362 line:-2
为TV来调整
Landmarks的设计


300
00:15:28,428 --> 00:15:29,396 line:-1
（演示）


301
00:15:30,230 --> 00:15:34,201 line:-2
首先 我们不再需要
导航栏按钮标题


302
00:15:40,841 --> 00:15:41,675 line:-1
接下来


303
00:15:42,309 --> 00:15:44,244 line:-1
我们去掉这个导航按钮和


304
00:15:45,212 --> 00:15:46,146 line:-1
数据标题标签


305
00:15:48,916 --> 00:15:50,117 line:-1
我们来看看是什么样子


306
00:16:05,199 --> 00:16:08,435 line:-1
这是我们做出的一个优化


307
00:16:09,036 --> 00:16:14,341 line:-2
这个长的垂直滚动列表
在tvOS上不怎么好看


308
00:16:14,842 --> 00:16:19,680 line:-2
那么 我们来用一个嵌套的
HStack滚动视图取代一个列表


309
00:16:30,457 --> 00:16:34,461 line:-1
我们在一行内使用一个类别


310
00:16:35,095 --> 00:16:36,230 line:-1
来展示所有地标


311
00:16:40,167 --> 00:16:41,835 line:-1
我们来仔细看一下行


312
00:16:44,171 --> 00:16:48,976 line:-2
它和使用额外地一个包含了标题标签
以及一个包含了forEach landmarks


313
00:16:49,042 --> 00:16:54,815 line:-2
的HStack的VStack
类别地标很相似


314
00:16:55,682 --> 00:16:59,686 line:-2
在纯文本视图内
有一点需要留意


315
00:16:59,953 --> 00:17:02,956 line:-2
我使用了一个自定义视图
叫做landmarkCard


316
00:17:03,023 --> 00:17:05,259 line:-1
它是导航按钮的标签


317
00:17:05,626 --> 00:17:08,662 line:-2
我将这个视图直接分享到
iOS app


318
00:17:09,530 --> 00:17:10,664 line:-1
我们来运行一下


319
00:17:22,075 --> 00:17:24,077 line:-1
只改变了几行代码


320
00:17:24,377 --> 00:17:26,613 line:-1
它看上去比之前好多了


321
00:17:26,680 --> 00:17:28,080 line:-1
我现在有个好看的


322
00:17:28,749 --> 00:17:32,853 line:-2
含有图片和垂直滚动视图的
邀请大按钮


323
00:17:32,920 --> 00:17:35,155 line:-1
它充分利用了宽频的优点


324
00:17:36,256 --> 00:17:38,091 line:-1
这里 我要指出的一点是


325
00:17:38,358 --> 00:17:42,129 line:-2
当我们仍在地标行内
使用相同的导航按钮视图时


326
00:17:42,196 --> 00:17:45,365 line:-1
它的外观变化了


327
00:17:45,699 --> 00:17:48,735 line:-1
右侧的V形标志不见了


328
00:17:48,802 --> 00:17:50,571 line:-1
背景也不一样了


329
00:17:50,938 --> 00:17:53,040 line:-1
这是因为导航按钮


330
00:17:53,106 --> 00:17:55,676 line:-1
不再在列表视图显示了


331
00:17:55,742 --> 00:17:58,545 line:-1
它自动地适配了它的外观


332
00:17:59,446 --> 00:18:03,884 line:-2
现在 当水平滚动内容
在大屏幕中看上去美观了


333
00:18:03,951 --> 00:18:06,119 line:-1
但它有点太过于水平了


334
00:18:06,553 --> 00:18:08,722 line:-2
我们通过将主视图的
HStack改为VStack


335
00:18:08,789 --> 00:18:11,992 line:-1
来垂直地排列这些类别


336
00:18:19,132 --> 00:18:23,103 line:-2
接下来 在行的HStack周围
添加一个嵌套的滚动视图


337
00:18:31,879 --> 00:18:32,913 line:-1
我们来运行一下


338
00:18:40,654 --> 00:18:42,990 line:-1
这感觉很棒


339
00:18:43,390 --> 00:18:46,593 line:-1
在不同类别和在一个类别中的


340
00:18:46,894 --> 00:18:50,163 line:-2
地标之间来回浏览
非常容易了


341
00:18:51,398 --> 00:18:54,001 line:-1
最后 我们来看一下详情页面


342
00:18:55,602 --> 00:18:59,173 line:-1
这个好看的无边框地标图片


343
00:18:59,239 --> 00:19:00,707 line:-1
如果没有被高密度的文字遮挡


344
00:19:00,774 --> 00:19:03,710 line:-1
会更加好看


345
00:19:04,311 --> 00:19:07,281 line:-2
我们来看看如何为
Apple TV优化


346
00:19:09,082 --> 00:19:11,051 line:-1
我们先看一下详情页面


347
00:19:12,119 --> 00:19:13,420 line:-1
这是一个非常简单的视图


348
00:19:13,854 --> 00:19:16,990 line:-1
我们有一个展示了地标图片的背景


349
00:19:17,391 --> 00:19:20,594 line:-1
一个最爱按钮和一些历史详情介绍


350
00:19:21,461 --> 00:19:23,764 line:-1
我们来试着展示游览详情介绍


351
00:19:24,464 --> 00:19:25,666 line:-1
最后试一下


352
00:19:33,507 --> 00:19:35,509 line:-1
它看上去好多了


353
00:19:35,843 --> 00:19:40,180 line:-2
只展现了有着美观大字体
的最相关的详情内容


354
00:19:40,247 --> 00:19:42,482 line:-1
我们能在房间里轻松观看阅读


355
00:19:43,417 --> 00:19:45,853 line:-1
我们可以标记一些地标为最爱


356
00:19:45,919 --> 00:19:50,057 line:-2
方便我们在macOS的
Landmarks上搜寻更多详细信息


357
00:19:52,492 --> 00:19:54,061 line:-1
现在 有请Jeff回到舞台


358
00:19:57,197 --> 00:19:58,065 line:-1
谢谢Ada


359
00:19:58,799 --> 00:20:02,903 line:-2
我很喜欢Ada美观的
列表式UI设计


360
00:20:03,270 --> 00:20:06,006 line:-1
只需将她已有的一些内容重新布局


361
00:20:06,073 --> 00:20:09,076 line:-2
就让我感觉像是
在家里使用Apple TV


362
00:20:09,142 --> 00:20:11,778 line:-1
我认为这充分展示了框架的强大


363
00:20:12,446 --> 00:20:14,681 line:-1
那么现在我们来看看macOS


364
00:20:15,349 --> 00:20:18,285 line:-2
创建一个好的Mac app需要
留意很多方面


365
00:20:18,352 --> 00:20:20,787 line:-2
如果可能的话
我很想用一个小时来讲解


366
00:20:21,054 --> 00:20:23,357 line:-1
但我只会介绍SwiftUI


367
00:20:23,423 --> 00:20:25,359 line:-1
能帮你的几个关键部分


368
00:20:25,859 --> 00:20:28,996 line:-1
高信息密度 多窗口支持


369
00:20:29,296 --> 00:20:32,766 line:-2
键盘捷径和
MacBook Pro的触控栏支持


370
00:20:34,468 --> 00:20:36,737 line:-1
我们从高信息密度开始介绍


371
00:20:36,803 --> 00:20:39,239 line:-1
（高信息密度）


372
00:20:39,306 --> 00:20:42,342 line:-1
我们一般在Mac上会开很多窗口


373
00:20:42,409 --> 00:20:45,646 line:-2
所以我们可以使用它
来提供一眼能看到的更多信息


374
00:20:46,113 --> 00:20:48,882 line:-1
如果你在一个地方有所有的信息


375
00:20:48,949 --> 00:20:50,017 line:-1
那会让我们更容易做出


376
00:20:50,083 --> 00:20:52,886 line:-1
好决定和更好的对比


377
00:20:54,855 --> 00:20:57,357 line:-2
因为我们在Mac上有一个精确地
定点设备


378
00:20:57,724 --> 00:21:01,028 line:-2
我们能容忍更小的
点击目标和密度控制


379
00:21:01,361 --> 00:21:04,331 line:-2
但那并不意味着你的app看上去
要像一个飞行驾驶舱


380
00:21:04,398 --> 00:21:07,234 line:-2
但它代表你能在一个地方
提供更多的功能


381
00:21:07,301 --> 00:21:09,169 line:-1
为你的内容留出更多空间


382
00:21:11,004 --> 00:21:11,839 line:-1
以及


383
00:21:12,272 --> 00:21:14,875 line:-1
如果你有文字内容的话


384
00:21:14,942 --> 00:21:16,410 line:-1
Mac适用于阅读大量文字内容


385
00:21:17,277 --> 00:21:20,447 line:-2
所以 app会话时长
在Mac上通常会更长


386
00:21:20,514 --> 00:21:22,816 line:-2
你通常需要坐下来使用它
所以用它来预览和阅读


387
00:21:22,883 --> 00:21:24,751 line:-1
一些文字内容是非常舒适的


388
00:21:27,321 --> 00:21:30,991 line:-1
现在SwiftUI自动地为Mac


389
00:21:31,058 --> 00:21:33,827 line:-1
调整了元素之间的合适间距和填充


390
00:21:35,128 --> 00:21:35,963 line:-1
以及


391
00:21:36,363 --> 00:21:38,198 line:-2
你可以使用controlSize
修饰符


392
00:21:38,265 --> 00:21:40,501 line:-1
在macOS系统中


393
00:21:40,567 --> 00:21:42,769 line:-1
来进行小且迷你的尺寸控制


394
00:21:43,103 --> 00:21:46,106 line:-1
如果你想要使用更小的控制器


395
00:21:46,373 --> 00:21:47,708 line:-1
来创建一完整的检查器会很好


396
00:21:50,644 --> 00:21:52,012 line:-1
接下来 多窗口


397
00:21:52,646 --> 00:21:56,350 line:-2
多年以前 多窗口已经就是
MacUI的主要功能之一了


398
00:21:57,251 --> 00:21:59,086 line:-1
用户喜欢使用多窗口


399
00:21:59,152 --> 00:22:01,288 line:-1
他们喜欢同时使用多个窗口


400
00:22:01,355 --> 00:22:02,956 line:-1
来比较内容


401
00:22:04,491 --> 00:22:08,262 line:-2
将单个物件拖出来成为
一个单独的窗口通常是很棒的


402
00:22:08,328 --> 00:22:10,030 line:-1
这样你就能专注于它的细节内容了


403
00:22:11,598 --> 00:22:14,368 line:-1
许多用户喜欢在他们的桌面和空间


404
00:22:14,434 --> 00:22:16,537 line:-1
管理他们的窗口的空间大小


405
00:22:16,603 --> 00:22:18,539 line:-1
如果你支持多窗口的话


406
00:22:18,605 --> 00:22:20,174 line:-1
你就能解锁这些功能


407
00:22:20,607 --> 00:22:22,442 line:-2
SwiftUI让一切
都变得很简单了


408
00:22:22,509 --> 00:22:24,478 line:-1
我会向你展示一个例子的一小部分


409
00:22:26,947 --> 00:22:27,881 line:-1
（键盘捷径）


410
00:22:27,948 --> 00:22:29,583 line:-1
接下来 键盘捷径


411
00:22:30,584 --> 00:22:33,720 line:-1
键盘捷径是MacUI重要的一部分


412
00:22:33,787 --> 00:22:37,791 line:-2
Mac用户 特别是高级用户喜欢
使用键盘捷径


413
00:22:37,858 --> 00:22:39,459 line:-1
来操纵控制一般的命令


414
00:22:39,526 --> 00:22:41,828 line:-2
或只是在你的app的
导航快速来回切换


415
00:22:42,863 --> 00:22:45,632 line:-2
在SwiftUI中
支持键盘捷径非常简单


416
00:22:45,699 --> 00:22:47,034 line:-1
我来给你展示一个例子


417
00:22:48,001 --> 00:22:49,636 line:-1
我们有一个标签视图


418
00:22:49,703 --> 00:22:52,673 line:-2
我们有三个标签“explore”
“hikes”和“tours”


419
00:22:53,207 --> 00:22:55,375 line:-1
我们要做的是将这几个标签


420
00:22:55,442 --> 00:22:57,244 line:-1
绑定至命令一 二 三


421
00:22:57,311 --> 00:22:59,479 line:-1
这样我们就能快速切换它们


422
00:23:00,480 --> 00:23:02,783 line:-2
现在 当我们想要在Mac上设置
一则键盘捷径


423
00:23:02,850 --> 00:23:05,786 line:-2
我们要去的一个地方是
Mac的菜单栏


424
00:23:06,320 --> 00:23:09,122 line:-2
我们想要在Mac的菜单栏添加
键盘捷径


425
00:23:09,189 --> 00:23:11,158 line:-1
因为它让它们更容易被发现


426
00:23:11,225 --> 00:23:14,094 line:-1
它确保了我们在这里匹配的动作行为


427
00:23:14,161 --> 00:23:17,364 line:-1
也是可以用鼠标操作的


428
00:23:18,599 --> 00:23:19,766 line:-1
现在你可以在代码中实现它


429
00:23:19,833 --> 00:23:22,302 line:-2
我已经在Storyboard中
设置了它


430
00:23:23,103 --> 00:23:24,104 line:-1
接下来 我完成的是


431
00:23:24,471 --> 00:23:27,608 line:-2
为这些键盘捷径的每一个都
指定了一些命令


432
00:23:27,674 --> 00:23:31,578 line:-2
一条命令就是一条能通过
SwiftUI层级被


433
00:23:31,645 --> 00:23:34,548 line:-1
发送的命令名字


434
00:23:35,048 --> 00:23:39,152 line:-2
我们可以使用它们来包装选择器
通过每一个菜单物件来发送


435
00:23:42,256 --> 00:23:43,357 line:-1
总结一下


436
00:23:43,857 --> 00:23:46,627 line:-2
我们所要做的只是
使用我们想要在视图中使用的命令


437
00:23:46,693 --> 00:23:49,129 line:-1
的onCommand修饰符


438
00:23:50,297 --> 00:23:53,600 line:-2
当前情况下
我们传递刚才定义的命令


439
00:23:53,667 --> 00:23:56,603 line:-1
当命令出现时 这段代码就会执行


440
00:23:57,905 --> 00:24:00,107 line:-2
在这里 我们设置了我们标签
视图已经绑定的


441
00:24:00,174 --> 00:24:02,109 line:-1
selectedTab变量


442
00:24:02,509 --> 00:24:05,779 line:-2
所以当我们使用这些命令中的一个时
selectedTab变量会更新


443
00:24:05,846 --> 00:24:08,882 line:-1
标签视图也会收到通知更新它自己


444
00:24:12,586 --> 00:24:15,455 line:-2
如果你想了解关于
识别键盘捷径


445
00:24:15,522 --> 00:24:17,624 line:-2
和像这样的其他系统级
集成的更多内容


446
00:24:17,691 --> 00:24:19,593 line:-1
你可以参加今年的


447
00:24:19,660 --> 00:24:20,594 line:-1
集成SwiftUI演讲


448
00:24:22,629 --> 00:24:24,198 line:-1
最后 是触控栏


449
00:24:25,265 --> 00:24:28,135 line:-1
触控栏是另一个在你的Mac上


450
00:24:28,202 --> 00:24:29,169 line:-1
快速执行命令的方式


451
00:24:29,636 --> 00:24:31,738 line:-1
它为你的指尖


452
00:24:32,072 --> 00:24:33,674 line:-1
带来了最常用的上下文行为操作


453
00:24:35,108 --> 00:24:38,145 line:-2
现在SwiftUI中支持触控栏
是前所未有的简单


454
00:24:39,279 --> 00:24:40,414 line:-1
我会给你展示一个例子


455
00:24:40,948 --> 00:24:42,482 line:-1
我们在代码中定义一个触控栏


456
00:24:42,850 --> 00:24:45,719 line:-2
接下来 就像我们我们创建一个列表
或一个堆栈


457
00:24:46,119 --> 00:24:49,223 line:-2
我们只需在TouchBar中
一个接一个的添加我们需要的元素


458
00:24:50,557 --> 00:24:55,896 line:-2
当我们想要将它添加到一个视图时
我们只需使用.touchBar修饰符


459
00:24:56,730 --> 00:24:58,832 line:-2
将它传给
我们定义过的TouchBar


460
00:24:59,466 --> 00:25:00,467 line:-1
就这么简单


461
00:25:01,034 --> 00:25:02,803 line:-1
无论这个视图是否被选中


462
00:25:02,870 --> 00:25:05,005 line:-1
或是选中视图的最近的祖先视图


463
00:25:05,072 --> 00:25:07,374 line:-1
触控栏硬件上会出现这些控制


464
00:25:10,344 --> 00:25:11,712 line:-1
现在 我们回到我们的示例


465
00:25:11,778 --> 00:25:15,015 line:-2
我们在macOS的Landmarks
上实践了其中的一些功能


466
00:25:15,082 --> 00:25:18,852 line:-1
（演示）


467
00:25:18,919 --> 00:25:20,521 line:-1
好的 我们现在在Xcode中


468
00:25:21,588 --> 00:25:23,457 line:-2
我们来构建运行一下macOS
上的Landmarks


469
00:25:23,524 --> 00:25:24,791 line:-1
这样我们就能知道怎么开始了


470
00:25:27,628 --> 00:25:28,462 line:-1
好


471
00:25:29,463 --> 00:25:31,965 line:-2
我们这里有一个
相当标准的主详情视图


472
00:25:32,399 --> 00:25:35,936 line:-2
我们的左边有一个地标列表
右边是详细信息


473
00:25:37,304 --> 00:25:41,708 line:-2
我们添加了一些过滤控制
这样我们就能通过类别来过滤


474
00:25:41,775 --> 00:25:43,844 line:-1
或是只选择看我们的最爱


475
00:25:45,312 --> 00:25:46,880 line:-1
现在 最有条理的是


476
00:25:46,947 --> 00:25:49,349 line:-1
左边的列表


477
00:25:49,416 --> 00:25:52,586 line:-2
实际上是我完全从iOS上
挪用过来的


478
00:25:52,886 --> 00:25:53,720 line:-1
相当好


479
00:25:53,787 --> 00:25:56,156 line:-2
它给了我开始创建这个app
很大的一个优势


480
00:25:56,490 --> 00:25:58,258 line:-1
我并不需要做任何适配


481
00:25:58,325 --> 00:26:00,093 line:-1
我不需要为它匹配一个新的数据源


482
00:26:00,160 --> 00:26:02,429 line:-1
或代理协议 或其他类似的事情


483
00:26:02,496 --> 00:26:03,697 line:-1
我什么都没有做就获取了这些


484
00:26:05,065 --> 00:26:08,101 line:-2
但我觉得这个列表在Mac上
可以更好看一点


485
00:26:08,569 --> 00:26:11,371 line:-2
我希望我可以在滚动视图中看到
更多的元素


486
00:26:11,438 --> 00:26:13,807 line:-1
我想要在每一行获取更多的细节


487
00:26:16,276 --> 00:26:18,178 line:-2
我们从这个是如何定义的
开始了解吧


488
00:26:20,047 --> 00:26:21,215 line:-1
在我们的地标清单


489
00:26:21,715 --> 00:26:24,484 line:-2
我已经定义了一个
MacLandmarksList


490
00:26:24,551 --> 00:26:27,087 line:-2
包装这个landmarkList
的是一个通用元素


491
00:26:27,154 --> 00:26:28,488 line:-1
我之前介绍过


492
00:26:29,489 --> 00:26:31,625 line:-2
为我们的项目实现
这样的架构非常方便


493
00:26:31,692 --> 00:26:34,127 line:-1
因为它让我还是可以


494
00:26:34,194 --> 00:26:35,662 line:-1
使用这个列表的大部分功能


495
00:26:35,729 --> 00:26:38,832 line:-2
但我也可以为我的Mac
做一些特殊的自定义


496
00:26:40,334 --> 00:26:42,336 line:-1
我们继续来看它是如何被定义的


497
00:26:43,704 --> 00:26:46,740 line:-2
我们有一些描述了
我们早些时候看过的过滤控制


498
00:26:46,807 --> 00:26:48,742 line:-1
配置的过滤标准


499
00:26:49,209 --> 00:26:51,345 line:-1
我们有一个绑定了被选择的地标列表


500
00:26:51,411 --> 00:26:53,614 line:-2
这样我们就可以查看
和修改这个列表了


501
00:26:54,114 --> 00:26:57,451 line:-2
我们有一些用户数据 这样我们就
知道哪些地标被我们标为了最爱


502
00:26:58,819 --> 00:26:59,820 line:-1
这个列表相当简单


503
00:26:59,887 --> 00:27:01,788 line:-1
你之前一定见过它很多次了


504
00:27:01,855 --> 00:27:02,756 line:-1
我们有一个列表


505
00:27:03,123 --> 00:27:06,293 line:-2
我们使用forEach
来遍历展示我们所有的地标


506
00:27:06,760 --> 00:27:09,029 line:-2
接下来 我们为每一个
创建了一个landmarkRow


507
00:27:10,497 --> 00:27:12,666 line:-1
这是一个硬编码类型


508
00:27:13,033 --> 00:27:15,035 line:-1
这是我们正在使用的行类型


509
00:27:15,636 --> 00:27:18,805 line:-2
现在 我们可以开始做一些
类似用if语句


510
00:27:18,872 --> 00:27:22,376 line:-1
使用每一个OS交换地标


511
00:27:22,442 --> 00:27:24,378 line:-2
但 我很不想用诡异的方式
来实现这个功能


512
00:27:24,444 --> 00:27:26,780 line:-1
我想要创建一个可以复用的工具


513
00:27:27,748 --> 00:27:29,416 line:-1
我来向你展示我接下来如何实现


514
00:27:34,454 --> 00:27:35,756 line:-1
那么 我会


515
00:27:38,258 --> 00:27:39,660 line:-1
重新定义这个列表


516
00:27:43,697 --> 00:27:44,765 line:-1
让它成为我们将要使用的


517
00:27:44,831 --> 00:27:46,967 line:-1
地标行的通用类


518
00:27:49,102 --> 00:27:49,937 line:-1
接下来


519
00:27:51,205 --> 00:27:52,472 line:-1
我会添加一个属性


520
00:27:56,476 --> 00:27:58,812 line:-1
它是地标的一个闭包


521
00:27:59,646 --> 00:28:02,149 line:-2
是我们刚才定义行的类型
为一个通用类


522
00:28:04,451 --> 00:28:07,421 line:-1
接下来 取代硬编码的方式


523
00:28:07,487 --> 00:28:09,256 line:-1
我将委托


524
00:28:11,358 --> 00:28:13,760 line:-1
行的创建到我的块中


525
00:28:16,363 --> 00:28:18,765 line:-2
现在 为了在我的Mac的
地标列表中适配它


526
00:28:19,132 --> 00:28:20,100 line:-1
我要做的是


527
00:28:20,834 --> 00:28:24,171 line:-1
在这里更新我的类定义


528
00:28:26,139 --> 00:28:28,609 line:-2
添加我刚声明过的闭包
行的提供方


529
00:28:30,777 --> 00:28:32,846 line:-1
和返回一个行类型


530
00:28:34,948 --> 00:28:38,552 line:-2
幸运的是 像其他好的TV示例一样
我已经有一个成品可以使用


531
00:28:38,619 --> 00:28:40,053 line:-1
那么 我们就用它


532
00:28:44,024 --> 00:28:46,326 line:-1
我们来看一下现在是什么样子


533
00:28:49,530 --> 00:28:50,664 line:-1
现在更棒了


534
00:28:51,198 --> 00:28:53,100 line:-1
我的行比之前更紧密了


535
00:28:53,166 --> 00:28:55,169 line:-1
我为每一个添加了更多的信息


536
00:28:55,235 --> 00:28:57,804 line:-1
我能一眼看到哪一个被标为了最爱


537
00:28:58,639 --> 00:28:59,640 line:-1
非常好


538
00:29:00,307 --> 00:29:02,576 line:-1
最棒的是我的列表的实践


539
00:29:02,643 --> 00:29:04,211 line:-1
还是分享公用的


540
00:29:04,478 --> 00:29:09,650 line:-2
所以 如果我已经有高级过滤
排列或按需分组功能


541
00:29:09,950 --> 00:29:11,818 line:-1
或更棒的


542
00:29:11,885 --> 00:29:14,688 line:-1
比如我有一些异步的数据


543
00:29:14,755 --> 00:29:15,856 line:-1
或网络操作


544
00:29:15,923 --> 00:29:18,659 line:-1
你知道的 我只想写一次代码


545
00:29:18,725 --> 00:29:19,660 line:-1
现在 我们能做到了


546
00:29:19,960 --> 00:29:22,563 line:-1
我们无需向原有的设计妥协


547
00:29:24,831 --> 00:29:26,266 line:-1
接下来 我想要做的是


548
00:29:26,333 --> 00:29:29,670 line:-1
双击其中的一行来打开它自己的窗口


549
00:29:30,404 --> 00:29:32,840 line:-1
这非常简单 我告诉你怎么做


550
00:29:33,507 --> 00:29:36,476 line:-1
首先 我们需要创建一个窗口


551
00:29:36,543 --> 00:29:37,544 line:-1
在Mac上


552
00:29:37,611 --> 00:29:40,147 line:-2
甚至当我们使用SwiftUI定义
我们的视图时


553
00:29:40,214 --> 00:29:42,449 line:-2
我们还是要使用AppKit来
定义我们的窗口


554
00:29:45,352 --> 00:29:47,120 line:-2
现在 我可以
在Storyboard里实现


555
00:29:47,187 --> 00:29:50,224 line:-2
不过 代码也很短
我来告诉你怎么写


556
00:29:50,858 --> 00:29:52,759 line:-1
我们有一个窗口控制器


557
00:29:53,493 --> 00:29:55,395 line:-2
接下来 我定义了一个
convenience初始化方法


558
00:29:55,462 --> 00:29:56,864 line:-1
它需要一个SwiftUI视图


559
00:29:57,631 --> 00:29:59,333 line:-2
将它放入一个
hostingController


560
00:29:59,833 --> 00:30:02,402 line:-2
接下来 创建一个环绕
hostingController的窗口


561
00:30:03,770 --> 00:30:06,173 line:-1
我也在这里写了便捷代码


562
00:30:06,240 --> 00:30:10,043 line:-1
它用来追踪已有的地标所属的窗口


563
00:30:10,110 --> 00:30:12,880 line:-1
如果我双击已有窗口的一行


564
00:30:12,946 --> 00:30:17,017 line:-2
它会将已有的窗口挪到前面
而不是每次再创建一个新的


565
00:30:20,120 --> 00:30:22,589 line:-1
我们回到我们的列表来集成这个


566
00:30:23,524 --> 00:30:24,358 line:-1
那么


567
00:30:26,927 --> 00:30:27,828 line:-1
细节


568
00:30:29,563 --> 00:30:30,831 line:-1
我们添加一个快速


569
00:30:32,032 --> 00:30:33,166 line:-1
方便的方法


570
00:30:38,605 --> 00:30:39,439 line:-1
分享


571
00:30:40,674 --> 00:30:43,076 line:-1
为一个已有的地标展示一个窗口


572
00:30:44,244 --> 00:30:45,846 line:-1
接下来 绑定到一行


573
00:30:46,313 --> 00:30:49,216 line:-1
我可以只添加一个两次点击的行为


574
00:30:49,283 --> 00:30:51,518 line:-1
因为我只想识别双击


575
00:30:53,086 --> 00:30:53,921 line:-1
接下来


576
00:30:54,488 --> 00:30:55,622 line:-1
在这个tapAction中


577
00:30:55,889 --> 00:30:58,025 line:-2
我为landmark调用
showDetail方法


578
00:31:06,800 --> 00:31:09,236 line:-1
现在 当我双击我的行


579
00:31:10,704 --> 00:31:12,539 line:-2
我就能单独为它们打开它们自己的
新窗口了


580
00:31:12,606 --> 00:31:14,975 line:-2
我可以将它们放在一边
按我的喜好排列它们


581
00:31:15,342 --> 00:31:17,277 line:-1
因为这些都还是AppKit窗口


582
00:31:17,344 --> 00:31:19,746 line:-1
我能使用所有内置的窗口功能


583
00:31:19,813 --> 00:31:21,982 line:-2
比如我喜欢标签
我能将它们合并成标签


584
00:31:22,049 --> 00:31:22,950 line:-1
就像这样


585
00:31:23,016 --> 00:31:25,652 line:-1
我毫不费力实现了 很棒


586
00:31:31,458 --> 00:31:33,327 line:-1
我觉得Mac版本的app


587
00:31:33,393 --> 00:31:35,829 line:-2
开始变得好看了
所以我决定继续


588
00:31:35,896 --> 00:31:37,431 line:-1
回到我们的幻灯片


589
00:31:37,497 --> 00:31:38,332 line:-1
（演示）


590
00:31:38,699 --> 00:31:42,202 line:-2
现在 我们了解了AppleTV
和Mac上的SwiftUI


591
00:31:43,303 --> 00:31:45,172 line:-2
下面我们来看
Apple Watch


592
00:31:45,506 --> 00:31:47,808 line:-2
SwiftUI是第一个为
Apple Watch


593
00:31:47,875 --> 00:31:49,109 line:-1
创建app设计的完全原生的框架


594
00:31:49,176 --> 00:31:52,946 line:-1
我认为它会带来更多的可能性


595
00:31:53,013 --> 00:31:55,349 line:-1
以及带我们认识到这些可能性


596
00:31:55,415 --> 00:31:57,284 line:-1
我想有请我的同事Meghna


597
00:31:57,351 --> 00:32:00,988 line:-2
（Apple Watch上的
SwiftUI）


598
00:32:01,054 --> 00:32:01,922 line:-1
谢谢


599
00:32:06,793 --> 00:32:07,895 line:-1
谢谢Jeff


600
00:32:08,362 --> 00:32:12,332 line:-2
你已经看到了使用SwiftUI
创建的令人叹服的种种


601
00:32:12,399 --> 00:32:14,868 line:-1
你一定能按照步骤创建一个


602
00:32:14,935 --> 00:32:18,438 line:-1
在所有平台都体验很棒的app


603
00:32:18,939 --> 00:32:22,042 line:-2
大家好 我是Meghna
我将为你介绍


604
00:32:22,109 --> 00:32:25,512 line:-2
如何为你的Apple Watch app
带来良好的用户体验


605
00:32:27,314 --> 00:32:30,617 line:-1
你的用户体验可能基于你的app


606
00:32:30,884 --> 00:32:33,654 line:-1
在watchOS上的体验更是如此


607
00:32:34,955 --> 00:32:39,159 line:-1
并发、Siri捷径和通知


608
00:32:39,226 --> 00:32:42,162 line:-2
都用来在你的
Apple Watch


609
00:32:42,229 --> 00:32:44,498 line:-1
屏幕上展示实时信息


610
00:32:45,299 --> 00:32:49,336 line:-2
Apple Watch为在正确的
时间展示正确的信息所设计的


611
00:32:50,103 --> 00:32:51,939 line:-1
本次演讲的目的


612
00:32:52,005 --> 00:32:54,908 line:-1
我会重点介绍app与通知


613
00:32:55,576 --> 00:32:56,677 line:-1
（watchOS app）


614
00:32:56,743 --> 00:32:58,946 line:-1
我们以SwiftUI是如何允许你


615
00:32:59,012 --> 00:33:02,516 line:-2
展示元素以及布局你app的UI
开始介绍


616
00:33:02,583 --> 00:33:04,117 line:-1
这是前所未有的


617
00:33:04,184 --> 00:33:05,018 line:-1
（3次或更少点击）


618
00:33:05,085 --> 00:33:06,587 line:-1
首先 最重要的第一件事


619
00:33:07,321 --> 00:33:10,390 line:-2
在设计Apple Watch
用户体验时 需要了解


620
00:33:10,657 --> 00:33:14,695 line:-1
使用2次或3次点击就能


621
00:33:14,761 --> 00:33:17,297 line:-2
获取到最重要的信息或关键操作
是一个好的规则


622
00:33:18,098 --> 00:33:19,933 line:-1
在设计用户体验时


623
00:33:20,000 --> 00:33:23,237 line:-2
目标并不是缩减你iPhone上
的app功能


624
00:33:23,303 --> 00:33:26,340 line:-1
而是在你的手腕上


625
00:33:26,406 --> 00:33:28,041 line:-1
带来最实时和相关的内容操作


626
00:33:28,809 --> 00:33:29,643 line:-1
（watchOS app）


627
00:33:29,710 --> 00:33:33,280 line:-2
那么 我们来深入了解一些
SwiftUI简单的概念


628
00:33:33,981 --> 00:33:36,984 line:-1
如果你的内容会超出全屏的边界


629
00:33:37,251 --> 00:33:39,887 line:-2
你可以使用SwiftUI的
滚动视图来包装你的内容


630
00:33:41,421 --> 00:33:46,126 line:-2
SwiftUI也为你带来了这个很好用的
全新的digitalCrownRotation API


631
00:33:46,193 --> 00:33:49,496 line:-1
它让你能完全控制旋转和触感


632
00:33:49,997 --> 00:33:54,334 line:-2
这个API也为数码表冠
打开了一扇门


633
00:33:54,401 --> 00:33:57,571 line:-1
带来了修改界面元素的全新方式


634
00:33:57,638 --> 00:34:00,274 line:-1
这是前所未有的功能


635
00:34:02,309 --> 00:34:05,879 line:-2
你可能也熟悉WatchKit
的分组


636
00:34:06,280 --> 00:34:09,416 line:-2
SwiftUI现在提供了
很多强大的方式


637
00:34:09,483 --> 00:34:13,487 line:-2
来通过水平和垂直的堆栈
来管理你的内容


638
00:34:14,588 --> 00:34:17,524 line:-1
使用列表和列表部分


639
00:34:17,591 --> 00:34:20,293 line:-1
展示列表信息比之前更简单了


640
00:34:21,261 --> 00:34:22,496 line:-1
（可交互的通知）


641
00:34:22,563 --> 00:34:26,199 line:-1
最后 了解你的用户


642
00:34:26,266 --> 00:34:27,701 line:-2
在你的Apple Watch
app最关注的是什么


643
00:34:28,001 --> 00:34:30,938 line:-2
会帮你判断决定在屏幕展示
哪一类的数据


644
00:34:31,271 --> 00:34:34,074 line:-2
使用SwiftUI提供的
视图和控制器


645
00:34:34,141 --> 00:34:35,775 line:-1
首先 你能轻易地创建一个


646
00:34:35,842 --> 00:34:38,645 line:-1
展示最重要的信息的界面


647
00:34:40,112 --> 00:34:43,884 line:-1
通知是更新实时消息的最好方式


648
00:34:44,318 --> 00:34:48,554 line:-2
然而 如果展示了过多的
无用信息或内容


649
00:34:48,621 --> 00:34:51,024 line:-1
用户可能就会直接关掉你的app


650
00:34:52,359 --> 00:34:56,196 line:-1
SwiftUI为你提供了便捷


651
00:34:56,263 --> 00:34:57,698 line:-1
有利的控制器


652
00:34:57,998 --> 00:35:03,270 line:-2
这样用户就能在你的app中回复
不会错过通知了


653
00:35:03,971 --> 00:35:07,207 line:-1
让你的通知变得可操作


654
00:35:07,274 --> 00:35:10,077 line:-1
你可以让用户快速回复


655
00:35:12,646 --> 00:35:15,749 line:-1
你发送通知的时机和


656
00:35:15,816 --> 00:35:17,317 line:-1
你发送的内容同样重要


657
00:35:17,818 --> 00:35:20,821 line:-1
试着了解你的用户使用你的app时


658
00:35:21,121 --> 00:35:23,390 line:-1
发送你能提供的可发送的信息


659
00:35:23,457 --> 00:35:26,660 line:-1
在最合适的时机发送实时消息


660
00:35:27,027 --> 00:35:28,662 line:-2
（为Apple Watch设计的
Landmarks）


661
00:35:28,729 --> 00:35:32,633 line:-2
利用全新强大的SwiftUI概念
和一个对在Apple Watch上


662
00:35:32,699 --> 00:35:35,035 line:-2
怎样的用户体验是优秀的
有更好的理解


663
00:35:35,302 --> 00:35:36,937 line:-1
我们来看一下添加了一些概念后的


664
00:35:37,004 --> 00:35:39,339 line:-1
Landmarks app


665
00:35:41,241 --> 00:35:45,579 line:-2
使用SwiftUI
为所有平台创建app时


666
00:35:45,646 --> 00:35:47,648 line:-2
你会有一个有用的
Apple Watch app


667
00:35:48,081 --> 00:35:51,485 line:-2
不过 它并不代表这会是
Apple Watch的最佳用户体验


668
00:35:51,985 --> 00:35:54,888 line:-1
我将会为你展示如何稍微调整和更新


669
00:35:55,789 --> 00:35:58,091 line:-1
这样你的app在手腕上


670
00:35:58,158 --> 00:35:59,626 line:-1
会有更好的用户体验


671
00:36:02,329 --> 00:36:06,533 line:-2
那么 你这里看到的是
首先 我们来创建一个地标列表


672
00:36:07,067 --> 00:36:08,368 line:-2
为Watch上的
Landmarks


673
00:36:08,435 --> 00:36:11,305 line:-1
我们自定义了详情单元格


674
00:36:13,006 --> 00:36:15,609 line:-1
我们为一些上下文加入了一张图片


675
00:36:16,009 --> 00:36:17,711 line:-1
我们加入了一些工具的细节


676
00:36:17,778 --> 00:36:20,581 line:-1
我们也添加了一些联系功能


677
00:36:21,281 --> 00:36:23,717 line:-1
其中的一些功能比如联系功能


678
00:36:23,784 --> 00:36:27,287 line:-2
不需过多说明
一个Apple TV app


679
00:36:27,354 --> 00:36:30,190 line:-2
但它们在Apple Watch
app运作体验非常棒


680
00:36:32,693 --> 00:36:35,729 line:-2
不过 这里还是有太多
需要滚动的内容


681
00:36:36,063 --> 00:36:38,432 line:-1
所以我们要做的是删减它


682
00:36:38,498 --> 00:36:40,000 line:-1
只展示我们的最爱


683
00:36:40,467 --> 00:36:43,403 line:-2
为了实现 我们创建一个
简单的Swift过滤器


684
00:36:44,638 --> 00:36:46,740 line:-1
虽然我们已经减少了内容


685
00:36:46,807 --> 00:36:51,278 line:-2
我们也想要我们的用户能有机会看到
所有他们选中的地标


686
00:36:52,045 --> 00:36:54,481 line:-1
添加这个按钮就能实现


687
00:36:55,115 --> 00:36:57,985 line:-2
这个按钮简单地基于你当前的视图
在显示所有和


688
00:36:58,051 --> 00:37:01,221 line:-1
最爱之间切换


689
00:37:02,055 --> 00:37:04,358 line:-1
SwiftUI为你的app提供了


690
00:37:04,424 --> 00:37:06,960 line:-2
选择你感兴趣的内容
的特别的功能


691
00:37:07,027 --> 00:37:10,664 line:-2
以及为你的app
组织最适合的用户界面


692
00:37:13,300 --> 00:37:17,504 line:-2
我们想要专注于我们当前滚动时
出现的单元格


693
00:37:18,172 --> 00:37:22,476 line:-2
使用SwiftUI 我们可以用
carousel列表样式来实现


694
00:37:23,243 --> 00:37:26,947 line:-2
当你单元格比较少或
当你的单元格具备交互功能时


695
00:37:27,214 --> 00:37:30,083 line:-1
这个列表样式会非常适用


696
00:37:30,584 --> 00:37:35,956 line:-2
这里 我们的单元格有联系方式
能打电话


697
00:37:36,456 --> 00:37:39,059 line:-1
从最爱列表里添加和移除地标


698
00:37:39,126 --> 00:37:42,162 line:-2
以及一些导航功能
的功能按钮


699
00:37:42,763 --> 00:37:44,698 line:-1
（可以交互的通知）


700
00:37:44,765 --> 00:37:46,800 line:-1
最后 通知


701
00:37:47,267 --> 00:37:48,702 line:-1
当一个新的旅行被添加时


702
00:37:48,769 --> 00:37:51,538 line:-2
我们想要在
Landmarks app通知你


703
00:37:51,972 --> 00:37:54,842 line:-2
我们想要加入一些图片
这样你就能判断


704
00:37:54,908 --> 00:37:56,677 line:-1
你是否对这个旅行感兴趣


705
00:37:56,977 --> 00:38:01,114 line:-1
你也能在通知中预订它


706
00:38:02,115 --> 00:38:03,784 line:-1
利用Swift的强大功能


707
00:38:04,151 --> 00:38:07,254 line:-1
你不仅有文本信息


708
00:38:07,321 --> 00:38:11,525 line:-2
你也有这个美丽的
具有丰富动画效果的图片


709
00:38:12,326 --> 00:38:16,330 line:-2
我想要向你展示我们是如何创建的
而不只是单纯介绍一下


710
00:38:24,338 --> 00:38:26,673 line:-1
你看到的是我为一则新的通知


711
00:38:27,608 --> 00:38:30,477 line:-1
创建的一个结构体


712
00:38:31,044 --> 00:38:34,281 line:-1
现在 我已经关联了


713
00:38:34,348 --> 00:38:36,049 line:-1
这则通知到我的通知控制器


714
00:38:36,483 --> 00:38:39,786 line:-1
这意味着你看到的主体的内容


715
00:38:39,853 --> 00:38:43,090 line:-2
就是我运行这个计划之后
通知里的内容


716
00:38:44,358 --> 00:38:47,461 line:-1
这个结构体将一个地标作为一个参数


717
00:38:47,895 --> 00:38:50,631 line:-1
通知将要合适地传递它


718
00:38:52,466 --> 00:38:54,735 line:-1
接下来


719
00:38:56,069 --> 00:38:56,970 line:-1
我们来加入一些文字


720
00:39:08,415 --> 00:39:10,050 line:-1
好的 我们在这创建了


721
00:39:10,684 --> 00:39:12,419 line:-1
一个包含了


722
00:39:13,253 --> 00:39:15,322 line:-1
一些文本信息堆栈


723
00:39:15,789 --> 00:39:17,424 line:-1
我在这使用一个堆栈的原因只是


724
00:39:17,491 --> 00:39:20,360 line:-2
因为我将在这里面
加入更多的一些数据


725
00:39:29,603 --> 00:39:32,372 line:-2
在这里 我们创建了一个结构体
叫做slideshow


726
00:39:32,439 --> 00:39:34,808 line:-1
它存储了一个字符串数组


727
00:39:35,142 --> 00:39:37,077 line:-1
这些字符是图片的名字


728
00:39:40,314 --> 00:39:42,850 line:-2
我们有一个
currentIndex变量


729
00:39:42,916 --> 00:39:47,154 line:-2
它用来追踪你当前看的是
第几张图片


730
00:39:49,289 --> 00:39:53,193 line:-2
我创建的TourImage是一个
自定义的结构体 也是一个视图


731
00:39:53,627 --> 00:39:55,162 line:-1
它存储图片的名字


732
00:39:55,562 --> 00:39:58,632 line:-1
它会在我的app里将图片排列整齐


733
00:39:59,633 --> 00:40:03,203 line:-1
我们来看一下在预览中是什么样子


734
00:40:17,451 --> 00:40:20,587 line:-1
接下来 我要在这里添加的是


735
00:40:22,456 --> 00:40:24,825 line:-1
每个图片的ID


736
00:40:25,192 --> 00:40:27,194 line:-1
我们让它展示动画效果的方式


737
00:40:27,261 --> 00:40:30,731 line:-1
我们会关注哪一个视图需要被插入


738
00:40:30,797 --> 00:40:32,666 line:-1
哪一个视图需要被移除


739
00:40:39,039 --> 00:40:42,409 line:-2
它现在是这样
好的 我们的文字在这 好棒！


740
00:40:42,476 --> 00:40:44,378 line:-1
它现在是这样 我们继续


741
00:40:44,444 --> 00:40:48,382 line:-2
在我们通知主体里添加这个
slideshow结构体


742
00:40:50,918 --> 00:40:54,688 line:-2
好的 当它更新完成后
我们就能在这里看到视图


743
00:40:54,755 --> 00:40:56,023 line:-1
这看上去很棒


744
00:40:56,890 --> 00:40:58,225 line:-1
就像我们之前聊过的


745
00:40:58,292 --> 00:41:01,595 line:-2
我们应该能够在这个结构体里支持
多张图片


746
00:41:01,995 --> 00:41:05,699 line:-1
所以 我们需要计算下一张的序列号


747
00:41:06,700 --> 00:41:08,468 line:-1
我们来实现它


748
00:41:10,838 --> 00:41:13,941 line:-2
现在 我在这简单地计算了
下一张的序列号


749
00:41:14,308 --> 00:41:16,577 line:-1
我更新了当前的序列号


750
00:41:17,678 --> 00:41:20,547 line:-1
我还想将改动添加动画效果


751
00:41:23,016 --> 00:41:27,688 line:-2
每次当我的当前序列号改变时
就会有一个简单的动画效果


752
00:41:27,754 --> 00:41:31,091 line:-2
它会展示fluidString的
动画效果看上去很棒


753
00:41:34,194 --> 00:41:36,029 line:-1
现在 我们将它创建完了


754
00:41:36,096 --> 00:41:38,699 line:-1
但我们还没有将它关联到其他物件


755
00:41:41,001 --> 00:41:43,370 line:-1
在我们的Zstack


756
00:41:43,437 --> 00:41:46,006 line:-1
间隔一段时间后


757
00:41:46,073 --> 00:41:49,676 line:-1
我们想要切换到下一张图片


758
00:41:52,279 --> 00:41:57,251 line:-2
所以 我在一个视图上创建了
一个扩展 它有一个视图修饰符


759
00:41:58,318 --> 00:42:00,654 line:-2
展示下一张图片是一个简单
的视图扩展


760
00:42:00,721 --> 00:42:05,325 line:-1
它具备了一个两秒钟的定时器


761
00:42:05,893 --> 00:42:08,295 line:-1
每两秒后 它会切换到下一张图片


762
00:42:11,131 --> 00:42:15,836 line:-2
现在 我要添加的最后一件事是这个
好看的滑动变换


763
00:42:17,137 --> 00:42:20,207 line:-1
就是这里简单的命令


764
00:42:22,709 --> 00:42:25,312 line:-1
好的 我们来看一下效果


765
00:42:42,696 --> 00:42:45,799 line:-1
好的 我们滑动这些图片


766
00:42:46,200 --> 00:42:50,370 line:-2
我们之前为通知控制器关联了一些
操作行为


767
00:42:51,505 --> 00:42:52,506 line:-1
如你所见


768
00:42:53,907 --> 00:42:54,741 line:-1
谢谢


769
00:42:58,078 --> 00:43:00,647 line:-1
如你所见 只需小小的改动


770
00:43:00,714 --> 00:43:04,151 line:-1
我们就创建了这个美丽丰富的消息


771
00:43:04,418 --> 00:43:07,888 line:-2
这是watchOS之前
不可能实现的


772
00:43:08,455 --> 00:43:10,424 line:-1
我们有请Jeff回到舞台


773
00:43:16,897 --> 00:43:18,165 line:-1
好的 谢谢Meghna


774
00:43:18,699 --> 00:43:21,668 line:-1
通知里的这些丰富的上下文交互行为


775
00:43:21,735 --> 00:43:24,171 line:-1
非常酷


776
00:43:24,605 --> 00:43:26,740 line:-1
我认为SwiftUI将会


777
00:43:26,807 --> 00:43:28,809 line:-1
为watchOS带来更多的可能性


778
00:43:30,644 --> 00:43:32,579 line:-1
现在 经过短暂的旅途


779
00:43:32,646 --> 00:43:37,818 line:-1
我们来回顾和总结一下今天的演讲


780
00:43:39,319 --> 00:43:40,821 line:-1
首先 当我们思考


781
00:43:40,888 --> 00:43:43,557 line:-1
为一台设备设计一个app时


782
00:43:43,857 --> 00:43:45,792 line:-1
首先是设计


783
00:43:46,193 --> 00:43:48,228 line:-1
这并不意味着我有了代码


784
00:43:48,295 --> 00:43:50,397 line:-1
我要试着让它在这里运行


785
00:43:50,764 --> 00:43:52,799 line:-2
思考我的app应该怎样
在这台设备上正确展现


786
00:43:52,866 --> 00:43:56,303 line:-1
以及这里开始的逆向工作


787
00:43:56,370 --> 00:43:58,872 line:-1
（总结）


788
00:43:58,939 --> 00:44:01,308 line:-1
不过 你有时可以分享一些代码


789
00:44:01,642 --> 00:44:05,879 line:-2
比如 我们虽然没有明确指出
但你今天看到的每个例子


790
00:44:05,946 --> 00:44:07,948 line:-1
都是很轻松地利用了模型代码


791
00:44:08,015 --> 00:44:10,984 line:-2
每个目标中都被编制了
相同的模型代码


792
00:44:12,252 --> 00:44:14,755 line:-1
你也可以分享视图代码


793
00:44:14,821 --> 00:44:17,291 line:-1
你只需要使用时好好判断


794
00:44:17,624 --> 00:44:21,228 line:-1
SwiftUI也能帮你简单地


795
00:44:21,295 --> 00:44:24,198 line:-1
重构可多次使用的小组件


796
00:44:24,264 --> 00:44:27,067 line:-1
它能合理地在多个设备上使用


797
00:44:29,136 --> 00:44:29,970 line:-1
最后


798
00:44:30,737 --> 00:44:33,073 line:-2
我们并不单单只是编写一次
多处运行


799
00:44:33,407 --> 00:44:35,542 line:-1
你要好好运用自己的头脑


800
00:44:35,843 --> 00:44:39,146 line:-2
当你学过一次 你就能在多个
设备上实现了


801
00:44:39,213 --> 00:44:40,981 line:-1
我觉得那才是真正厉害


802
00:44:43,250 --> 00:44:44,918 line:-1
一如既往 你能在网上看到这个演讲


803
00:44:44,985 --> 00:44:48,121 line:-1
你可以重看视频和获取到相关资源


804
00:44:48,589 --> 00:44:49,723 line:-1
谢谢你的聆听


805
00:44:49,790 --> 00:44:52,059 line:-2
我们期待你使用SwiftUI
来创建app


806
00:44:52,125 --> 00:44:53,227 line:-1
（WWDC19）

