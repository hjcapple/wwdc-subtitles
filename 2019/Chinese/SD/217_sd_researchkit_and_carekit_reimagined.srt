1
00:00:08,909 --> 00:00:10,677 line:-2
（ResearchKit
和CareKit新概念）


2
00:00:17,050 --> 00:00:17,951 line:-1
大家好


3
00:00:18,385 --> 00:00:22,990 line:-2
欢迎参加ResearchKit
和CareKit新概念演讲


4
00:00:23,690 --> 00:00:24,591 line:-1
我是Srinath


5
00:00:24,858 --> 00:00:26,627 line:-1
我是援助团队的一名软件工程师


6
00:00:27,394 --> 00:00:29,897 line:-1
今天我们要讲许多方面的内容


7
00:00:30,397 --> 00:00:31,732 line:-1
让我们直接来看内容


8
00:00:32,399 --> 00:00:35,269 line:-1
首先看今天的整体流程


9
00:00:36,436 --> 00:00:39,173 line:-2
跟以往一样
我们要从社区更新开始讲


10
00:00:39,907 --> 00:00:43,277 line:-2
然后我们讲一下
ResearchKit框架的更新


11
00:00:44,011 --> 00:00:46,280 line:-1
然后我们有一些非常激动人心的消息


12
00:00:46,613 --> 00:00:48,782 line:-1
我们想分享一下CareKit框架


13
00:00:51,485 --> 00:00:52,920 line:-1
关于社区更新


14
00:00:53,353 --> 00:00:57,591 line:-1
我们主要想讲一下去年发布或更新的


15
00:00:57,658 --> 00:01:01,395 line:-2
利用了ResearchKit和
CareKit框架的一些app


16
00:01:02,362 --> 00:01:05,132 line:-2
其中一个例子就是
FocalView app


17
00:01:05,199 --> 00:01:06,867 line:-1
它是由Novartis发布的


18
00:01:07,134 --> 00:01:11,872 line:-2
它的主要功能是
在数字平台上进行眼科临床试验


19
00:01:13,340 --> 00:01:17,211 line:-2
另一个值得一提的例子是FDA
MyStudies app


20
00:01:18,011 --> 00:01:20,914 line:-1
这个app面向患者


21
00:01:20,981 --> 00:01:25,586 line:-2
它是兼容平台的一部分
用于临床试验


22
00:01:25,652 --> 00:01:27,387 line:-1
或现实证据研究


23
00:01:28,155 --> 00:01:31,725 line:-2
FDA继续开放
MyStudies app源代码


24
00:01:31,792 --> 00:01:35,596 line:-1
供其它组织重新包装、发布和使用


25
00:01:36,997 --> 00:01:39,600 line:-1
今年除了讲app之外


26
00:01:40,000 --> 00:01:43,003 line:-1
我们还想讲一下发布


27
00:01:43,804 --> 00:01:47,040 line:-2
对于情境 ResearchKit
和CareKit框架


28
00:01:47,107 --> 00:01:48,976 line:-1
已经发布了大约三到四年


29
00:01:49,610 --> 00:01:52,212 line:-1
我们达到了一种地步 我们开始看到


30
00:01:52,279 --> 00:01:55,682 line:-1
涌入了许多发布


31
00:01:55,749 --> 00:01:57,584 line:-2
这些发布均源自过去几年
所进行的研究


32
00:01:58,952 --> 00:02:02,089 line:-1
绝大部分发布都在谈


33
00:02:02,356 --> 00:02:05,959 line:-2
基于移动设备的研究设计
在某些事情方面有多么成功


34
00:02:06,026 --> 00:02:07,327 line:-1
比如参与者注册


35
00:02:07,928 --> 00:02:10,663 line:-1
招募不同参与者的能力


36
00:02:10,731 --> 00:02:13,500 line:-1
从地理和人口的角度来看


37
00:02:13,834 --> 00:02:18,639 line:-1
以及随着更多参与者的注册


38
00:02:18,705 --> 00:02:20,874 line:-1
每个参与者的成本的整体降低


39
00:02:21,909 --> 00:02:24,444 line:-1
现在让我们看一下其中一些发布


40
00:02:26,847 --> 00:02:30,083 line:-2
Pride Study
讲述了他们在


41
00:02:30,150 --> 00:02:35,422 line:-1
招募和接洽大量被忽视的参与者


42
00:02:35,789 --> 00:02:37,925 line:-1
进行临床研究方面有多么成功


43
00:02:42,763 --> 00:02:44,364 line:-1
Healthy Pregnancy


44
00:02:44,698 --> 00:02:46,800 line:-1
讲了低消耗率


45
00:02:47,201 --> 00:02:50,537 line:-1
以及如何让参与者定期填写


46
00:02:50,838 --> 00:02:54,341 line:-1
基于移动设备的研究和问卷


47
00:02:58,712 --> 00:03:01,481 line:-2
Personal Touch
的发布很有意思


48
00:03:01,748 --> 00:03:05,152 line:-1
因为它的发布发生在2019年五月


49
00:03:05,586 --> 00:03:08,088 line:-1
我们大约在一周前才开始了解它


50
00:03:08,455 --> 00:03:11,658 line:-2
其中一个作者在GitHub上
提交了一份民意调查请求


51
00:03:12,025 --> 00:03:14,828 line:-1
提出他们为此次发布


52
00:03:15,128 --> 00:03:18,031 line:-1
所做的一些现行任务


53
00:03:18,098 --> 00:03:20,667 line:-1
以便社区中的其他人也可以利用它


54
00:03:23,003 --> 00:03:24,104 line:-1
关于这一点


55
00:03:24,404 --> 00:03:25,672 line:-1
我们所有的健康框架…


56
00:03:26,039 --> 00:03:28,308 line:-2
ResearchKit、
CareKit和HealthKit


57
00:03:28,642 --> 00:03:31,545 line:-1
都是为了让开发人员


58
00:03:31,612 --> 00:03:34,181 line:-2
能够创建一些很优秀的
研究和护理app


59
00:03:35,182 --> 00:03:38,218 line:-1
另外 我们还有一些很强大的设备


60
00:03:38,285 --> 00:03:39,386 line:-1
配有传感器


61
00:03:39,820 --> 00:03:42,089 line:-1
从加速度计和陀螺仪


62
00:03:42,155 --> 00:03:46,627 line:-2
一直到可以让你的用户
做心电图检查的电极


63
00:03:49,530 --> 00:03:51,365 line:-1
继续下去你会震惊于…


64
00:03:51,798 --> 00:03:55,636 line:-1
我们社区中的开发人员、研究人员


65
00:03:55,702 --> 00:03:58,472 line:-1
和健康专家


66
00:03:58,539 --> 00:04:01,041 line:-2
能够利用我们的产品和平台
所完成的工作


67
00:04:02,576 --> 00:04:03,844 line:-1
但每年


68
00:04:03,911 --> 00:04:08,715 line:-2
我们仍收到大量邮件
提出各种各样的问题


69
00:04:08,782 --> 00:04:10,417 line:-2
如“什么是ResearchKit
和CareKit？”


70
00:04:10,751 --> 00:04:13,153 line:-2
或“我该如何创建一个
研究或护理app？”


71
00:04:13,620 --> 00:04:17,624 line:-1
我们还收到了来自科研机构的提案


72
00:04:18,024 --> 00:04:19,793 line:-1
关于设备授权请求


73
00:04:20,793 --> 00:04:22,029 line:-1
这也就是为什么今年


74
00:04:22,095 --> 00:04:24,398 line:-2
我们目前正在开发一些
新计划的原因


75
00:04:24,798 --> 00:04:28,836 line:-2
现在我想让你们简单地预览
其中一些新计划


76
00:04:30,637 --> 00:04:34,074 line:-1
第一个是调查员支持计划


77
00:04:34,141 --> 00:04:35,075 line:-1
我们正在对它进行试验


78
00:04:35,642 --> 00:04:37,644 line:-1
我们正在开发这个计划


79
00:04:37,945 --> 00:04:40,013 line:-1
并将于今年下半年发布它


80
00:04:40,614 --> 00:04:43,851 line:-2
这将是仅限于
Apple Watch的计划


81
00:04:44,151 --> 00:04:48,121 line:-1
它的提案提交过程非常简单明了


82
00:04:48,188 --> 00:04:49,256 line:-2
（调查员支持试验
简单的提交过程）


83
00:04:49,323 --> 00:04:51,124 line:-1
我们将优先考虑研究…


84
00:04:51,792 --> 00:04:56,163 line:-1
通过独特地利用我们的生态系统


85
00:04:57,064 --> 00:04:59,733 line:-2
研究推进科学进步
并帮助人们过更健康的生活…


86
00:05:01,735 --> 00:05:04,671 line:-1
我们想让你们预览的第二个计划


87
00:05:05,172 --> 00:05:07,107 line:-1
是一个重新设计的网站


88
00:05:07,174 --> 00:05:08,008 line:-1
（重新设计的网站）


89
00:05:08,075 --> 00:05:11,545 line:-2
这个网站将包含关于ResearchKit
和CareKit框架的明确信息


90
00:05:11,912 --> 00:05:15,182 line:-2
每个想要了解这两个框架的
更多信息的人都可以访问这个网站


91
00:05:15,849 --> 00:05:19,520 line:-1
你还可以获得来自利用这些框架的


92
00:05:19,586 --> 00:05:22,589 line:-1
其他研究员和开发人员的深刻见解


93
00:05:22,656 --> 00:05:25,192 line:-1
从而创建优秀的研究和护理app


94
00:05:25,792 --> 00:05:28,495 line:-1
这个网站将包含


95
00:05:28,795 --> 00:05:30,898 line:-1
关于调查员支持计划的大量信息


96
00:05:31,532 --> 00:05:35,335 line:-1
网站和调查员支持计划本身


97
00:05:35,669 --> 00:05:38,238 line:-1
此计划将于2019年秋季上线


98
00:05:38,305 --> 00:05:40,140 line:-1
我们对此感到非常激动


99
00:05:41,742 --> 00:05:44,878 line:-1
现在让我们换个话题


100
00:05:44,945 --> 00:05:46,613 line:-2
谈谈我们对ResearchKit
框架所做出的更新


101
00:05:47,447 --> 00:05:52,186 line:-2
我们主要讲两个话题
UI更新和现行任务


102
00:05:53,420 --> 00:05:55,189 line:-1
让我们从UI更新开始讲


103
00:05:56,190 --> 00:06:01,061 line:-2
今年我们的主要重点围绕
改善用户体验


104
00:06:01,628 --> 00:06:03,830 line:-1
围绕回答调查问卷


105
00:06:04,298 --> 00:06:07,968 line:-2
因为我们意识到
有些经过验证的医学问卷


106
00:06:08,035 --> 00:06:10,370 line:-1
和入职培训流程可能会非常长


107
00:06:12,940 --> 00:06:15,142 line:-1
你在这里可以看到我们已更新了


108
00:06:15,209 --> 00:06:19,780 line:-2
卡片样式 从而使你可以为用户
提供更多的情境信息


109
00:06:20,747 --> 00:06:24,184 line:-1
这包含步骤内进度指示器


110
00:06:24,651 --> 00:06:26,653 line:-1
以及一个了解更多按钮


111
00:06:27,354 --> 00:06:30,057 line:-1
这个按钮可用于


112
00:06:30,123 --> 00:06:34,061 line:-1
当提问或答案选项包含


113
00:06:34,127 --> 00:06:36,096 line:-1
并不完全一目了然的术语时


114
00:06:36,697 --> 00:06:39,733 line:-2
因此在这个例子中
如果你的用户没有意识到


115
00:06:39,800 --> 00:06:41,668 line:-1
嗜睡症到底是什么意思


116
00:06:42,269 --> 00:06:44,204 line:-1
他们只需要轻触了解更多按钮


117
00:06:44,505 --> 00:06:48,909 line:-1
拉出一个表单 就可以获得


118
00:06:48,976 --> 00:06:50,344 line:-1
有关提问和答案选项自身的更多信息


119
00:06:52,513 --> 00:06:55,649 line:-2
现在你会注意到我们已经添加了
顶部内容图像视图


120
00:06:56,149 --> 00:06:59,553 line:-2
该样式在ResearchKit上
自始至终保持一致


121
00:07:00,254 --> 00:07:04,725 line:-1
因此我们的所有步骤现在都可以


122
00:07:04,992 --> 00:07:06,460 line:-2
通过顶部内容图像视图
显示丰富的媒体内容


123
00:07:08,262 --> 00:07:09,429 line:-1
如果你接着向下滚动


124
00:07:09,496 --> 00:07:12,266 line:-2
我们还添加了一个
类型主体项的新对象


125
00:07:12,566 --> 00:07:14,535 line:-1
用于编写列表


126
00:07:15,235 --> 00:07:17,337 line:-1
列表会自动应用格式


127
00:07:18,505 --> 00:07:22,409 line:-1
现在让我们看一下如何把这些变更


128
00:07:22,476 --> 00:07:23,844 line:-1
合并到你现有的app中


129
00:07:26,313 --> 00:07:28,982 line:-1
你要做的第一件事就是创建一个


130
00:07:29,049 --> 00:07:31,652 line:-2
带有唯一标识符的
ORK learnMoreStep实例


131
00:07:33,654 --> 00:07:36,056 line:-2
现在我们所有的步骤
都有这个图像属性


132
00:07:36,123 --> 00:07:38,592 line:-1
它将作为顶部内容图像视图显示


133
00:07:39,293 --> 00:07:43,497 line:-2
你还可以自定义其它属性
比如标题和文本


134
00:07:44,798 --> 00:07:49,303 line:-2
你需要做的另一件事就是
创建ORKBodyItem实例


135
00:07:49,803 --> 00:07:52,906 line:-2
它接受以下参数
比如文本、详情文本


136
00:07:52,973 --> 00:07:53,941 line:-1
以及样式


137
00:07:54,007 --> 00:07:57,377 line:-2
你可以在项目符号图像
和纯文本之间进行选择


138
00:07:58,245 --> 00:08:01,849 line:-2
现在我们所有的步骤都接受
许多主体项


139
00:08:02,382 --> 00:08:05,319 line:-2
让我们把这个主体项分配给
learnMoreStep


140
00:08:06,520 --> 00:08:09,423 line:-2
接下来你要做的就是创建
learnMoreItem实例


141
00:08:09,690 --> 00:08:12,860 line:-1
并绕过步骤


142
00:08:13,560 --> 00:08:16,396 line:-1
因此这个对象实质上是创建


143
00:08:16,463 --> 00:08:18,732 line:-1
屏幕上的详情披露按钮的对象


144
00:08:19,466 --> 00:08:21,902 line:-2
我们还有另一个初始化程序
它接受文本


145
00:08:22,402 --> 00:08:25,405 line:-2
因此其中一个将作为超链接
在步骤中显示


146
00:08:27,508 --> 00:08:31,378 line:-2
我们还向ORK表单项中
添加了另一个初始化程序


147
00:08:31,778 --> 00:08:34,448 line:-1
以便帮助你自定义分段标题


148
00:08:34,748 --> 00:08:38,619 line:-2
这会让你在同一个分段内
归类多个表单项


149
00:08:39,285 --> 00:08:43,123 line:-2
这个初始化工具接受这样的属性
比如sectionTitle、detailText、


150
00:08:43,190 --> 00:08:44,157 line:-1
learnMoreItem


151
00:08:44,224 --> 00:08:46,360 line:-1
以及表明你是否希望


152
00:08:46,727 --> 00:08:49,263 line:-1
显示步骤内进度指示器的切换开关


153
00:08:50,631 --> 00:08:53,400 line:-2
现在你已经把这些变更
合并到了你的app中


154
00:08:54,334 --> 00:08:59,306 line:-2
你的用户可以在回答
你的任何提问之前做出知情决策


155
00:09:02,342 --> 00:09:04,511 line:-1
现在让我们继续讲现行任务


156
00:09:05,179 --> 00:09:06,680 line:-1
与去年类似


157
00:09:06,747 --> 00:09:10,517 line:-2
今年我们主要关注
健康的三个主要方面：


158
00:09:11,185 --> 00:09:14,521 line:-1
视力、听力和语音


159
00:09:15,956 --> 00:09:17,891 line:-1
当测量视力健康时


160
00:09:18,525 --> 00:09:21,862 line:-1
有两个关键指标被认为是金标准


161
00:09:23,063 --> 00:09:25,732 line:-1
视敏度和对比敏感度


162
00:09:27,234 --> 00:09:31,371 line:-1
视敏度主要是区分


163
00:09:31,672 --> 00:09:34,708 line:-1
和识别物体及其特征的能力


164
00:09:37,277 --> 00:09:39,413 line:-1
它有两种刺激


165
00:09:39,680 --> 00:09:40,848 line:-1
一个是Landolt C


166
00:09:41,415 --> 00:09:44,184 line:-2
另一个是Snellen
或Tumbling E


167
00:09:44,718 --> 00:09:48,121 line:-2
现在我们在视敏度方面的第一个
现行任务


168
00:09:48,522 --> 00:09:51,758 line:-2
是由Novartis从他们的
FocalView app中提出


169
00:09:52,492 --> 00:09:55,762 line:-1
这个app请求用户


170
00:09:55,829 --> 00:09:59,032 line:-1
把外刻度盘对准字母C的开口处


171
00:10:00,534 --> 00:10:01,969 line:-1
Landolt C刺激


172
00:10:02,369 --> 00:10:05,739 line:-1
保持固定对比度 但持续递减尺寸


173
00:10:06,106 --> 00:10:08,108 line:-1
并向随机方向弹出


174
00:10:09,276 --> 00:10:10,944 line:-1
一旦用户完成这个任务


175
00:10:11,011 --> 00:10:15,549 line:-1
开发者将收到该用户的视敏度评分


176
00:10:17,918 --> 00:10:19,520 line:-1
要向你的app中合并这个功能


177
00:10:19,586 --> 00:10:22,756 line:-1
你要创建一个


178
00:10:22,823 --> 00:10:24,157 line:-2
附带唯一标识符的
ORKLandoltCStep实例


179
00:10:25,025 --> 00:10:27,427 line:-1
然后把testType设为敏度


180
00:10:28,295 --> 00:10:29,696 line:-1
然后跟以往一样


181
00:10:29,763 --> 00:10:33,033 line:-2
你可以创建一个排序任务
通过传递一些步骤


182
00:10:33,534 --> 00:10:36,403 line:-2
然后传递任务以创建
TaskViewController实现


183
00:10:36,470 --> 00:10:37,971 line:-2
你可以在你的app内呈现
TaskViewController


184
00:10:42,142 --> 00:10:45,078 line:-1
我们在视敏度方面的第二个现行任务


185
00:10:45,979 --> 00:10:49,283 line:-1
以Tumbling E作为刺激


186
00:10:50,284 --> 00:10:51,552 line:-1
现在作为这个任务的一部分


187
00:10:51,618 --> 00:10:54,388 line:-1
用户要滑动到


188
00:10:54,454 --> 00:10:56,256 line:-1
字母E开口一侧的方向


189
00:10:57,191 --> 00:10:58,458 line:-1
类似于Landolt C


190
00:10:58,525 --> 00:11:01,595 line:-2
Tumbling E
将保持固定对比度


191
00:11:02,162 --> 00:11:04,865 line:-1
但会递减尺寸并从随机方向弹出


192
00:11:05,532 --> 00:11:09,002 line:-1
但有意思的是测试距离


193
00:11:09,069 --> 00:11:12,940 line:-1
和刺激大小都由原深感摄像头控制


194
00:11:14,741 --> 00:11:16,476 line:-1
一旦用户完成这个任务


195
00:11:16,777 --> 00:11:18,712 line:-1
你将接收多得多的值


196
00:11:18,779 --> 00:11:22,316 line:-1
其中MAR代表最小分辨角


197
00:11:24,218 --> 00:11:25,853 line:-1
要向你的app中合并这个功能


198
00:11:25,919 --> 00:11:30,691 line:-2
你要创建一个带有唯一标识符的
ORKTumblingEStep实例


199
00:11:31,258 --> 00:11:34,728 line:-1
你还要针对你的试验


200
00:11:35,028 --> 00:11:36,730 line:-1
指定最小和最大观察距离


201
00:11:38,665 --> 00:11:40,901 line:-2
与以往一样 你要创建一个
OrderedTask


202
00:11:41,201 --> 00:11:43,570 line:-2
把它传给
ViewController并呈现它


203
00:11:45,839 --> 00:11:49,109 line:-1
现在让我们继续下一个大类


204
00:11:49,443 --> 00:11:50,511 line:-1
对比敏感度


205
00:11:51,111 --> 00:11:53,247 line:-1
这实际上是指从物体背景中


206
00:11:53,313 --> 00:11:55,649 line:-1
区分出物体的能力


207
00:11:56,483 --> 00:11:58,018 line:-1
并且它有…


208
00:11:58,352 --> 00:12:01,421 line:-1
也有两个最常用的


209
00:12:01,488 --> 00:12:04,091 line:-1
测试这个特定对比敏感度的刺激


210
00:12:04,825 --> 00:12:08,161 line:-2
一个是Landolt C
另一个是Gabor Patch


211
00:12:09,062 --> 00:12:10,197 line:-2
（对比敏感度- Landolt C
Novartis FocalView的贡献）


212
00:12:10,797 --> 00:12:13,367 line:-1
对比敏感度的第一个现行任务


213
00:12:13,433 --> 00:12:16,803 line:-2
还是由Navartis从他们的
FocalView app中提出


214
00:12:17,604 --> 00:12:20,474 line:-1
这与视敏度任务非常一致


215
00:12:20,841 --> 00:12:24,044 line:-1
但主要不同点是Landolt C


216
00:12:24,111 --> 00:12:27,814 line:-1
保持固定尺寸


217
00:12:28,148 --> 00:12:30,617 line:-2
但随着在随机方向的呈现
递减对比度


218
00:12:31,618 --> 00:12:33,420 line:-1
一旦用户完成这个任务


219
00:12:33,754 --> 00:12:36,723 line:-1
你将收到该用户的视敏度评分


220
00:12:39,193 --> 00:12:40,460 line:-1
要把这个功能添加到你的app中


221
00:12:40,527 --> 00:12:43,197 line:-1
与视敏度任务的添加方式一样


222
00:12:43,630 --> 00:12:44,798 line:-1
只有一个关键的不同点


223
00:12:44,865 --> 00:12:47,968 line:-1
就是要把测试类型修改为对比敏感度


224
00:12:49,102 --> 00:12:50,337 line:-2
（对比敏感度功能
Gabor Patch）


225
00:12:51,038 --> 00:12:52,573 line:-1
作为我们下一个任务的一部分


226
00:12:52,639 --> 00:12:54,041 line:-1
我们将尝试为用户生成…


227
00:12:54,541 --> 00:12:56,510 line:-1
对比敏感度功能


228
00:12:56,577 --> 00:13:00,447 line:-2
通过为他们呈现一种被称为
Gabor Patch刺激来实现


229
00:13:00,981 --> 00:13:02,216 line:-1
这就是Gabor Patch刺激


230
00:13:03,016 --> 00:13:06,286 line:-1
你会注意到刺激上有一些线条


231
00:13:06,353 --> 00:13:08,789 line:-1
向右倾斜


232
00:13:09,423 --> 00:13:10,757 line:-1
特别是顶部倾转


233
00:13:11,592 --> 00:13:12,893 line:-1
在另一个刺激中


234
00:13:12,960 --> 00:13:15,929 line:-1
你会注意到顶部倾转或向上的倾转


235
00:13:16,196 --> 00:13:17,231 line:-1
是向左倾斜


236
00:13:17,764 --> 00:13:20,834 line:-1
你的用户要识别


237
00:13:21,235 --> 00:13:22,402 line:-1
倾转的倾斜方向


238
00:13:22,736 --> 00:13:25,572 line:-1
并选择适当的方向作为任务的一部分


239
00:13:28,842 --> 00:13:30,911 line:-1
现在Gabor Patch刺激


240
00:13:31,211 --> 00:13:35,148 line:-1
由程序使用适应性算法生成


241
00:13:35,482 --> 00:13:37,317 line:-1
使空间频率不同


242
00:13:38,785 --> 00:13:42,322 line:-2
现在Gabor Patch
将在屏幕内以随机方向


243
00:13:42,623 --> 00:13:44,791 line:-1
在不同位置显示


244
00:13:45,993 --> 00:13:46,960 line:-1
再一次


245
00:13:47,227 --> 00:13:50,297 line:-1
测试距离和刺激尺寸


246
00:13:50,364 --> 00:13:53,333 line:-1
由原深感摄像头实时控制


247
00:13:54,902 --> 00:13:56,570 line:-1
一旦用户完成这个任务


248
00:13:56,904 --> 00:14:00,240 line:-1
开发人员将使用结果为该用户生成


249
00:14:00,541 --> 00:14:04,344 line:-1
一条敏感度VS空间频率曲线


250
00:14:06,680 --> 00:14:08,415 line:-1
要在你的app中合并这个功能


251
00:14:08,482 --> 00:14:11,518 line:-1
你要创建一个


252
00:14:11,785 --> 00:14:13,120 line:-2
带有唯一标识符的
ORKCSFStep实例


253
00:14:13,987 --> 00:14:17,124 line:-1
你要针对你的试验


254
00:14:17,191 --> 00:14:18,759 line:-1
设置最小和最大观察距离


255
00:14:20,160 --> 00:14:21,461 line:-1
你要创建OrderedTask


256
00:14:21,762 --> 00:14:23,463 line:-2
把它传给
TaskViewController


257
00:14:23,830 --> 00:14:25,566 line:-1
并在你的app内呈现它


258
00:14:28,802 --> 00:14:32,873 line:-2
现在对比敏感度功能
和Tumbling E现行任务


259
00:14:33,273 --> 00:14:34,942 line:-1
利用了原深感摄像头


260
00:14:35,008 --> 00:14:38,745 line:-2
这两个功能很快将通过
Apple示例代码许可证


261
00:14:38,812 --> 00:14:40,447 line:-2
发布到
developer.apple.com上


262
00:14:41,582 --> 00:14:44,451 line:-1
现在让我们继续下一个类 听力


263
00:14:45,385 --> 00:14:48,589 line:-1
去年我们发布了


264
00:14:48,655 --> 00:14:50,224 line:-1
关于听力健康的三个新现行任务


265
00:14:50,824 --> 00:14:53,927 line:-2
我们有调测听力、语音和噪音
以及声压计


266
00:14:55,062 --> 00:14:57,564 line:-1
今年我们全面增强了


267
00:14:57,965 --> 00:14:58,799 line:-1
它们的算法


268
00:14:59,366 --> 00:15:02,703 line:-1
更棒的是你现在可以直接


269
00:15:02,769 --> 00:15:05,439 line:-2
把这些现行任务的结果
写到HealthKit中了


270
00:15:06,440 --> 00:15:08,642 line:-1
要了解关于新数据类型的更多信息


271
00:15:08,709 --> 00:15:11,178 line:-2
我建议你参加
HealthKit演讲


272
00:15:11,245 --> 00:15:13,013 line:-1
时间是今天下午2点


273
00:15:13,847 --> 00:15:15,048 line:-1
（听力任务更新）


274
00:15:16,383 --> 00:15:17,885 line:-1
现在让我们继续讲语音


275
00:15:18,552 --> 00:15:21,522 line:-2
去年我们引入了一个
语音识别现行任务


276
00:15:22,055 --> 00:15:23,857 line:-1
当用户完成这个任务后


277
00:15:24,324 --> 00:15:26,693 line:-1
你会收到一堆信息


278
00:15:27,094 --> 00:15:29,630 line:-1
其中包含原生音频文件、转录


279
00:15:29,696 --> 00:15:31,932 line:-2
以及一个
SFTranscription对象


280
00:15:32,232 --> 00:15:34,168 line:-1
由语音识别框架进行渲染


281
00:15:34,635 --> 00:15:36,703 line:-1
今年语音识别团队


282
00:15:36,770 --> 00:15:39,773 line:-1
向SF转录对象中添加了更多功能


283
00:15:40,240 --> 00:15:42,976 line:-1
因此你可以提取信息 比如讲话频率


284
00:15:43,043 --> 00:15:44,278 line:-1
和平均暂停时长


285
00:15:44,678 --> 00:15:49,183 line:-2
另外还有一个叫做
SFVoiceAnalytics的新对象


286
00:15:49,483 --> 00:15:50,851 line:-1
要了解更多相关信息


287
00:15:51,218 --> 00:15:54,888 line:-1
请查看“语音识别的改进”演讲


288
00:15:57,157 --> 00:15:59,359 line:-1
这些就是我们对现行任务扩展库的


289
00:15:59,426 --> 00:16:03,397 line:-1
全部更新和添加


290
00:16:04,665 --> 00:16:06,867 line:-1
现在你可能注意到了其中有些任务


291
00:16:07,134 --> 00:16:10,003 line:-1
在底层利用了一些系统框架


292
00:16:11,238 --> 00:16:12,606 line:-1
我们想提醒你一下


293
00:16:12,873 --> 00:16:16,443 line:-1
我们的SDK中


294
00:16:16,510 --> 00:16:17,711 line:-1
有许多其它强大的iOS系统框架


295
00:16:18,579 --> 00:16:20,614 line:-1
我们非常鼓励开发人员


296
00:16:20,981 --> 00:16:23,517 line:-1
利用这些框架真正的潜力


297
00:16:23,784 --> 00:16:27,654 line:-2
若你考虑向ResearchKit中
添加新现行任务


298
00:16:27,721 --> 00:16:30,691 line:-1
或甚至考虑添加


299
00:16:30,991 --> 00:16:32,326 line:-1
与健康有关的新颖体验的话


300
00:16:34,528 --> 00:16:35,495 line:-1
接下来


301
00:16:35,762 --> 00:16:38,065 line:-1
让我们转向CareKit的更新


302
00:16:39,299 --> 00:16:42,970 line:-1
CareKit框架于2016年


303
00:16:43,604 --> 00:16:45,272 line:-1
作为开源框架被重新引入


304
00:16:45,839 --> 00:16:48,442 line:-1
我们希望开发人员


305
00:16:48,509 --> 00:16:50,244 line:-1
执行三件主要的事情：


306
00:16:50,911 --> 00:16:54,381 line:-1
轻松地把药方数字化；


307
00:16:55,449 --> 00:16:58,519 line:-1
向用户提供有意义的数据和动态；


308
00:16:58,785 --> 00:17:02,189 line:-2
并让用户与他们的护理机构
轻松地取得联系


309
00:17:03,724 --> 00:17:04,958 line:-1
通过过去几年的努力


310
00:17:05,025 --> 00:17:07,895 line:-1
我们一直对框架进行递增更新


311
00:17:09,730 --> 00:17:10,763 line:-1
今年


312
00:17:10,830 --> 00:17:14,401 line:-2
我很高兴地向大家发布
CareKit 2.0


313
00:17:15,169 --> 00:17:17,003 line:-1
这就是CareKit 2.0


314
00:17:17,771 --> 00:17:22,342 line:-2
你可以看到我们完全颠覆了
这个框架的UI


315
00:17:23,644 --> 00:17:25,811 line:-1
但更好的是


316
00:17:25,878 --> 00:17:28,415 line:-1
我们从根本上完全使用Swift


317
00:17:28,482 --> 00:17:31,652 line:-1
重新架构和重写了框架


318
00:17:32,653 --> 00:17:35,088 line:-1
那意味着CareKit在底层


319
00:17:35,355 --> 00:17:38,458 line:-2
可以利用某些最强大的
Swift语言功能


320
00:17:38,525 --> 00:17:41,328 line:-1
包括新发布的合并框架


321
00:17:42,896 --> 00:17:44,498 line:-1
现在让我们具体看一些细节


322
00:17:45,365 --> 00:17:49,036 line:-1
现在CareKit框架在底层


323
00:17:49,102 --> 00:17:50,037 line:-1
由两个其它框架组成


324
00:17:50,671 --> 00:17:53,040 line:-2
CareKit UI
和CareKit Store


325
00:17:54,641 --> 00:17:58,478 line:-2
CareKit UI是CareKit
存储库中的一个独立对象


326
00:17:58,912 --> 00:18:03,383 line:-2
你可以把它作为独立框架
进行编译和暴露


327
00:18:05,085 --> 00:18:10,157 line:-2
CareKit UI就是
预包装好的UI视图子类


328
00:18:10,691 --> 00:18:12,426 line:-1
那实际上意味着


329
00:18:12,492 --> 00:18:15,662 line:-1
你在屏幕上所看到的每一个视图


330
00:18:15,929 --> 00:18:20,067 line:-2
你都可以在你的app中
通过CareKit UI使用


331
00:18:21,068 --> 00:18:23,804 line:-1
我们把它们分成了三大类


332
00:18:24,404 --> 00:18:25,239 line:-1
或三个组成部分


333
00:18:25,639 --> 00:18:28,342 line:-1
我们把它们叫做任务、图表和联系人


334
00:18:29,076 --> 00:18:32,012 line:-1
这些名称反映出了


335
00:18:32,079 --> 00:18:34,081 line:-1
每个视图所提供的功能


336
00:18:36,250 --> 00:18:37,251 line:-1
我提到过


337
00:18:37,317 --> 00:18:41,622 line:-2
CareKit UI中的所有视图
都只是简单的UI视图


338
00:18:41,688 --> 00:18:43,690 line:-1
本质上是UI视图的子类


339
00:18:44,758 --> 00:18:47,394 line:-1
因此我想从任务中


340
00:18:47,461 --> 00:18:48,929 line:-1
所有可用的视图开始讲


341
00:18:48,996 --> 00:18:51,064 line:-1
今天我们想强调其中五个


342
00:18:53,433 --> 00:18:56,003 line:-1
在这里 你可以看到我们有一个视图


343
00:18:56,069 --> 00:18:58,472 line:-1
因为它只是UI视图的一个子类


344
00:18:58,539 --> 00:19:00,908 line:-2
你可以在你的app内的任意位置
对它进行约束


345
00:19:00,974 --> 00:19:02,176 line:-1
通过把它添加为子视图实现


346
00:19:03,210 --> 00:19:04,444 line:-1
要创建这个视图


347
00:19:05,045 --> 00:19:07,181 line:-2
你所要做的就是
导入CareKit UI


348
00:19:07,915 --> 00:19:10,984 line:-1
创建OCKSimpleTaskView实例


349
00:19:11,552 --> 00:19:14,521 line:-1
并设置这个对象上可用的一些参数


350
00:19:15,689 --> 00:19:16,590 line:-1
就是那么简单


351
00:19:17,291 --> 00:19:20,894 line:-1
现在让我们看一下我们说过的


352
00:19:20,961 --> 00:19:23,797 line:-2
在这个任务的组成部分内可用的
其余四个UI


353
00:19:26,233 --> 00:19:27,935 line:-1
我们要讲的下一个…


354
00:19:29,436 --> 00:19:31,939 line:-1
是OCKInstructionsTaskView


355
00:19:32,472 --> 00:19:34,341 line:-1
当你创建这种类型的对象时


356
00:19:34,775 --> 00:19:36,643 line:-2
你会得到一个
看起来跟这个有点像的视图


357
00:19:37,211 --> 00:19:40,180 line:-1
你所要做的就是添加一个额外的参数


358
00:19:40,714 --> 00:19:42,015 line:-1
用于查看正确的值


359
00:19:43,450 --> 00:19:44,751 line:-1
顺着同一条线


360
00:19:45,419 --> 00:19:50,490 line:-2
我要讲的下一个视图是
OCKGridTaskView


361
00:19:50,824 --> 00:19:52,326 line:-1
看起来跟这个有点像


362
00:19:52,960 --> 00:19:54,428 line:-1
这个视图很有意思


363
00:19:54,494 --> 00:19:57,464 line:-1
因为你在这里看到的所有钩号和按钮


364
00:19:57,531 --> 00:19:59,366 line:-1
都是药物视图的标准元素


365
00:19:59,800 --> 00:20:02,436 line:-2
作为这个视图的一部分
我们实质上是


366
00:20:02,703 --> 00:20:04,371 line:-2
直接给你暴露了
collectionView


367
00:20:04,771 --> 00:20:07,274 line:-1
因此你可以选择把自己作为委托


368
00:20:07,574 --> 00:20:11,211 line:-2
并传递任何你想要传递给
collectionView视图


369
00:20:11,745 --> 00:20:13,780 line:-1
因此你可以选择使用OCK按钮


370
00:20:14,081 --> 00:20:15,883 line:-1
或你甚至可以提供任意自定义UI


371
00:20:16,350 --> 00:20:18,452 line:-1
它的自定义程度也很高


372
00:20:20,554 --> 00:20:22,489 line:-1
我们的下一个视图类型


373
00:20:23,123 --> 00:20:25,559 line:-1
是OCKChecklistTaskView


374
00:20:25,993 --> 00:20:27,294 line:-1
看起来跟这个有点像


375
00:20:28,328 --> 00:20:30,531 line:-1
你在屏幕上看到的所有按钮


376
00:20:30,597 --> 00:20:32,900 line:-1
现在都在堆栈视图中生成


377
00:20:33,333 --> 00:20:35,802 line:-2
因此通过简单地调用一个
appendItem方法


378
00:20:35,869 --> 00:20:39,373 line:-2
你就可以向你的勾选列表中
添加一个新角色作为新的一项


379
00:20:41,608 --> 00:20:44,178 line:-1
最后一个视图类型


380
00:20:44,645 --> 00:20:46,947 line:-1
是OCKSimpleLogTaskView


381
00:20:47,648 --> 00:20:48,882 line:-1
它看起来跟这个有点像


382
00:20:48,949 --> 00:20:53,187 line:-2
它可用于记录随机事件
比如头痛或恶心


383
00:20:53,620 --> 00:20:56,256 line:-1
每次用户轻触记录按钮时


384
00:20:56,323 --> 00:20:59,426 line:-2
我们都为他们显示一个他们记录
最后一个事件的时间的时间戳


385
00:21:00,093 --> 00:21:03,063 line:-2
并且再一次
时间戳在堆栈视图内生成


386
00:21:03,430 --> 00:21:05,465 line:-2
通过简单地调用
appendItem方法


387
00:21:05,532 --> 00:21:07,434 line:-1
你可以根据由按钮生成的行动


388
00:21:07,701 --> 00:21:10,771 line:-1
附加更多记录


389
00:21:12,873 --> 00:21:15,843 line:-2
现在让我们转到下一个组成部分
图表


390
00:21:17,744 --> 00:21:19,847 line:-2
要在CareKit UI中
创建一个图表


391
00:21:20,113 --> 00:21:22,015 line:-2
你只需要简单地导入
CareKit UI


392
00:21:22,082 --> 00:21:26,119 line:-2
你要创建一个
OCKCartesianChartCardView实例


393
00:21:26,420 --> 00:21:27,387 line:-1
并制定一个类型


394
00:21:27,921 --> 00:21:30,157 line:-1
然后你就可以继续设置标题、文本


395
00:21:30,424 --> 00:21:32,292 line:-1
甚至是值 作为部分数据序列


396
00:21:33,026 --> 00:21:34,761 line:-1
通过切换类型


397
00:21:35,863 --> 00:21:38,899 line:-1
你可以轻松地在同一组数据点的


398
00:21:39,233 --> 00:21:41,201 line:-1
不同图表类型之间切换


399
00:21:43,537 --> 00:21:45,739 line:-1
我们今天要讲的最后一个组成部分


400
00:21:46,306 --> 00:21:47,341 line:-1
是联系人


401
00:21:48,842 --> 00:21:51,612 line:-2
你可以创建一个
OCKContactCardView实例


402
00:21:51,912 --> 00:21:53,514 line:-1
并填充内容


403
00:21:53,847 --> 00:21:55,782 line:-1
我们将确保正确应用


404
00:21:56,116 --> 00:21:57,718 line:-1
所有约束


405
00:22:00,287 --> 00:22:03,090 line:-2
这就是我们对CareKit UI
所做出的全部更新


406
00:22:03,724 --> 00:22:05,092 line:-1
我们的真正目的是


407
00:22:05,425 --> 00:22:08,629 line:-1
继续向每个组成部分中添加更多视图


408
00:22:08,896 --> 00:22:11,798 line:-1
同时扩展我们所拥有的组件库


409
00:22:12,966 --> 00:22:15,536 line:-2
我们认为这对用户来说
是一个非常强大的工具


410
00:22:15,602 --> 00:22:20,340 line:-2
CareKit 2.0
框架高度可定制


411
00:22:20,407 --> 00:22:23,343 line:-2
因为我们给你提供了所有的
新视图类型


412
00:22:23,610 --> 00:22:25,379 line:-1
并替你处理所有约束


413
00:22:27,781 --> 00:22:29,850 line:-2
现在让我们谈谈
CareKit Store


414
00:22:30,751 --> 00:22:32,753 line:-2
CareKit Store与
CareKit UI类似


415
00:22:33,086 --> 00:22:35,556 line:-2
是它自己在CareKit
框架内的项目


416
00:22:36,957 --> 00:22:41,195 line:-2
因此你可以把它作为一个独立框架
在你的app中对它进行编译并导出


417
00:22:41,261 --> 00:22:43,096 line:-1
并以一种完全不相关的方式使用它


418
00:22:43,864 --> 00:22:47,100 line:-2
CareKit Store
实质上是核心数据的包装器


419
00:22:47,167 --> 00:22:52,406 line:-2
允许你坚持Care Plans
并在本地设备上


420
00:22:52,472 --> 00:22:54,341 line:-1
在你的app约束内做出反应


421
00:22:55,242 --> 00:22:57,110 line:-1
因为它实际上是个数据库


422
00:22:57,511 --> 00:22:59,980 line:-2
我们为你提供了一种
Cookie Cutter机制


423
00:23:00,547 --> 00:23:02,249 line:0
让我们看看这种机制


424
00:23:04,117 --> 00:23:08,722 line:0
对于任何护理app来说
最基本的实体是患者


425
00:23:09,756 --> 00:23:13,393 line:0
现在让我们看看如何初始化
CareKit Store


426
00:23:14,661 --> 00:23:18,065 line:0
如何创建患者对象并把患者对象
插入CareKit Store


427
00:23:20,033 --> 00:23:23,837 line:-2
从把CareKitStore
作为独立框架导入开始讲


428
00:23:24,638 --> 00:23:28,442 line:-2
然后你要创建一个带有唯一标识符
的OCKStore实例


429
00:23:28,809 --> 00:23:31,578 line:-2
以在你的app容器内
创建核心数据数据库


430
00:23:33,614 --> 00:23:35,649 line:-1
然后继续创建患者对象


431
00:23:35,916 --> 00:23:38,018 line:-2
通过使用其中一个便利的
初始化程序实现


432
00:23:38,085 --> 00:23:39,720 line:-1
这个初始化程序接受一些基本参数


433
00:23:41,088 --> 00:23:43,991 line:-2
然后你要在Store上调用
addPatientMethod


434
00:23:44,391 --> 00:23:48,495 line:-1
这将异步接受对象并把它


435
00:23:48,562 --> 00:23:49,396 line:-1
插入到数据库中


436
00:23:50,297 --> 00:23:51,665 line:-1
一旦完成后


437
00:23:51,932 --> 00:23:53,700 line:-1
你将得到一个完成回调


438
00:23:54,301 --> 00:23:57,704 line:-2
这将返回一个可以打开的
Swift结果类型


439
00:24:00,340 --> 00:24:03,076 line:0
现在我们护理计划中
第二个关键的实体


440
00:24:04,044 --> 00:24:05,345 line:0
是护理计划自身


441
00:24:05,846 --> 00:24:09,883 line:0
每位患者可以有多个
相关联的护理计划


442
00:24:10,751 --> 00:24:14,488 line:0
现在让我们看看
如何创建新的护理计划


443
00:24:14,922 --> 00:24:17,758 line:0
并把它与特定患者相关联


444
00:24:20,194 --> 00:24:22,629 line:-2
那么跟以往一样
你要创建对Store的引用


445
00:24:23,197 --> 00:24:24,264 line:-1
有一件事要注意


446
00:24:24,331 --> 00:24:27,301 line:-1
就是如果你提供已经可用的标识符


447
00:24:27,634 --> 00:24:30,604 line:-2
我们将采用带有该标识符的
现有Store


448
00:24:30,671 --> 00:24:31,672 line:-1
并把它返回给你


449
00:24:33,841 --> 00:24:37,277 line:-1
然后如果你没有对患者对象的引用


450
00:24:37,344 --> 00:24:38,645 line:-1
你要做的第一件事


451
00:24:39,046 --> 00:24:41,181 line:-1
就是从Store中查询患者对象


452
00:24:42,216 --> 00:24:44,751 line:-1
一旦完成异步查询


453
00:24:45,018 --> 00:24:45,986 line:-1
你会得到一个回调


454
00:24:46,053 --> 00:24:47,087 line:-1
在回调内


455
00:24:47,154 --> 00:24:49,189 line:-1
你可以继续创建护理计划


456
00:24:49,256 --> 00:24:51,792 line:-2
通过给它提供参数实现
比如标识符


457
00:24:51,859 --> 00:24:55,062 line:-2
护理计划的名称
以及最重要的患者ID


458
00:24:55,596 --> 00:24:58,332 line:-1
这样会帮助你创建患者…


459
00:24:58,699 --> 00:25:01,368 line:-1
护理计划与患者自身之间的关联


460
00:25:01,935 --> 00:25:04,404 line:-2
然后你可以调用
addCarePlan方法


461
00:25:04,471 --> 00:25:06,840 line:-2
把这个新护理计划
插入到你的数据库中


462
00:25:09,343 --> 00:25:13,447 line:0
每个护理计划都可以有与之相关联的
一组联系人


463
00:25:13,881 --> 00:25:17,384 line:0
这些可以是与这个护理计划相关联的


464
00:25:17,451 --> 00:25:19,520 line:0
私人护理机构的联系人


465
00:25:21,455 --> 00:25:24,224 line:0
这里还有另外一件有意思的事


466
00:25:24,291 --> 00:25:25,893 line:0
就是任务的概念


467
00:25:26,360 --> 00:25:29,696 line:0
现在任务实体实质上是


468
00:25:29,763 --> 00:25:34,301 line:0
用户每天请求实施的动作


469
00:25:34,368 --> 00:25:35,602 line:0
这些动作是他们的护理计划的一部分


470
00:25:36,270 --> 00:25:39,940 line:0
每个任务都有与之相关联的
时间表对象


471
00:25:40,407 --> 00:25:44,077 line:0
现在时间表决定用户何时


472
00:25:44,144 --> 00:25:45,212 line:0
预计实施某个特定任务


473
00:25:46,380 --> 00:25:47,915 line:0
现在让我们看一下


474
00:25:48,182 --> 00:25:52,019 line:0
如何给用户开某种特定的药物


475
00:25:52,419 --> 00:25:54,388 line:0
以及如何把它插入到你的
Care Store中


476
00:25:58,425 --> 00:26:00,260 line:-1
那么在这里 我们创建了一个时间表


477
00:26:00,327 --> 00:26:03,630 line:-1
表明你每天早上7:00服药


478
00:26:04,598 --> 00:26:06,300 line:-1
我们创建了另一个时间表元素


479
00:26:06,633 --> 00:26:08,902 line:-1
表明你要在隔天中午12:00


480
00:26:08,969 --> 00:26:11,071 line:-1
服用同一种药物


481
00:26:11,471 --> 00:26:13,874 line:-1
我们把前边那个时间表叫做早餐剂量


482
00:26:14,141 --> 00:26:16,276 line:-1
把后边这个叫做午餐剂量


483
00:26:17,144 --> 00:26:19,980 line:-2
你可以简单地把多个时间表
组合到一起


484
00:26:20,047 --> 00:26:24,685 line:-2
创建一个统一的时间表
然后再传给任务


485
00:26:25,886 --> 00:26:27,788 line:-1
那么OCKTaskObject


486
00:26:27,855 --> 00:26:30,224 line:-1
接受诸如标识符这样的参数


487
00:26:30,290 --> 00:26:32,559 line:-1
这里的标题是一种多西拉敏药物


488
00:26:32,860 --> 00:26:34,695 line:-1
你可以给它提供时间表对象


489
00:26:35,596 --> 00:26:39,533 line:-2
并且你可以直接向
CareKit Store中添加这个任务


490
00:26:42,035 --> 00:26:45,172 line:0
每次用户完成特定任务后


491
00:26:45,772 --> 00:26:47,608 line:0
我们都生成一个结果


492
00:26:48,342 --> 00:26:51,778 line:0
并且每个结果
都有一个与之相关联的值


493
00:26:52,846 --> 00:26:55,749 line:0
现在让我们看一下
如何在数据库中查询


494
00:26:55,816 --> 00:26:57,484 line:0
所有的结果


495
00:26:57,818 --> 00:27:02,256 line:0
从而创建可以呈现给用户的
有意义的数据和动态


496
00:27:06,393 --> 00:27:08,595 line:-1
那么在这里我们创建了一个综合查询


497
00:27:08,662 --> 00:27:11,965 line:-2
它会查询过去七天
数据库中的所有元素


498
00:27:13,166 --> 00:27:16,937 line:-2
然后我们在任务上调用
fetchInsights方法


499
00:27:17,371 --> 00:27:21,308 line:-1
并且我们给它传递特定任务的标识符


500
00:27:21,742 --> 00:27:23,277 line:-2
就是包含你所感兴趣的事件的
特定任务


501
00:27:23,677 --> 00:27:25,846 line:-1
那么在这个例子中


502
00:27:25,913 --> 00:27:28,215 line:-2
我只对为多西拉敏药物任务
生成的事件感兴趣


503
00:27:29,183 --> 00:27:33,153 line:-2
现在这个API
有两个部分非常有意思


504
00:27:33,787 --> 00:27:36,190 line:-1
第一个是每日聚合部分


505
00:27:36,256 --> 00:27:38,559 line:-1
可被多次调用


506
00:27:38,625 --> 00:27:42,729 line:-1
每一次你都会得到那一天的一组事件


507
00:27:42,996 --> 00:27:45,399 line:-1
可以用于计算高阶度量


508
00:27:47,000 --> 00:27:49,670 line:-1
然后你会得到完成部分


509
00:27:49,736 --> 00:27:51,071 line:-1
只能被调用一次


510
00:27:51,138 --> 00:27:54,041 line:-1
它会为你提供一组经过计算的值


511
00:27:54,107 --> 00:27:57,611 line:-1
可以用于进一步分析或用于图表


512
00:28:00,414 --> 00:28:03,016 line:0
CareKit Store中的
每一个实体


513
00:28:03,083 --> 00:28:06,220 line:0
都可以有一个与之相关联的注释对象


514
00:28:06,787 --> 00:28:09,156 line:0
注释对象实际上就是元数据


515
00:28:09,456 --> 00:28:11,992 line:0
比如 如果护理机构


516
00:28:12,059 --> 00:28:14,628 line:0
出于某些原因决定更新护理计划


517
00:28:14,695 --> 00:28:17,164 line:0
并且他们为你提供自由文本


518
00:28:17,531 --> 00:28:19,666 line:0
你可以把那段自由文本
添加到注释对象中去


519
00:28:21,068 --> 00:28:22,402 line:0
另一件有意思的事


520
00:28:22,769 --> 00:28:26,607 line:0
是有些关键实体现在版本可控了


521
00:28:27,608 --> 00:28:30,577 line:0
因此当你更新药物任务时


522
00:28:30,644 --> 00:28:31,979 line:0
或当你升级时间表时


523
00:28:32,045 --> 00:28:34,114 line:0
我们会在CareKit Store中
进行存留


524
00:28:34,381 --> 00:28:36,283 line:0
你可以在它们之间来回切换


525
00:28:39,019 --> 00:28:41,555 line:-2
那么这就是我们对
CareKit Store的更新


526
00:28:41,822 --> 00:28:43,524 line:-1
CareKit Store框架中


527
00:28:43,590 --> 00:28:45,692 line:-1
还有许多强大的API可用


528
00:28:46,026 --> 00:28:47,594 line:-1
我们建议你们了解一下


529
00:28:48,662 --> 00:28:51,999 line:-2
现在让我们关注一下
CareKit框架自身


530
00:28:52,833 --> 00:28:55,969 line:-2
CareKit其实就是
自始至终引入同步


531
00:28:56,303 --> 00:28:59,306 line:-1
从UI层级到底层数据库


532
00:29:00,140 --> 00:29:04,344 line:-2
我们的实现方式是
通过使用一个同步器对象


533
00:29:05,045 --> 00:29:06,346 line:-1
现在这个对象


534
00:29:06,413 --> 00:29:11,585 line:-1
在底层大量使用合并框架


535
00:29:11,852 --> 00:29:14,454 line:-2
从而在UI层和数据存储层之间
传播事件


536
00:29:15,923 --> 00:29:18,358 line:-2
现在CareKit的
另一个主要功能


537
00:29:18,425 --> 00:29:21,028 line:-1
是它的模块性和可定制性


538
00:29:21,662 --> 00:29:24,565 line:-1
我的意思是这里的数据库


539
00:29:24,631 --> 00:29:26,500 line:-2
既可以是
CareKit Store


540
00:29:26,800 --> 00:29:29,636 line:-1
还可以是你所偏好的任意数据库


541
00:29:29,970 --> 00:29:33,407 line:-2
只要它遵守
我们的OCKStore协议即可


542
00:29:33,473 --> 00:29:36,577 line:-2
OCKStore协议
会使同步器与它进行无缝交互


543
00:29:38,078 --> 00:29:41,882 line:-2
你在这里看到的UI元素
可以来自CareKit UI


544
00:29:42,349 --> 00:29:44,918 line:-1
或甚至可以来自你的自定义UI视图


545
00:29:44,985 --> 00:29:48,789 line:-2
只要你告诉我们如何把视图
绑定到特定对象上即可


546
00:29:50,224 --> 00:29:53,093 line:-1
现在让我们看一下


547
00:29:53,160 --> 00:29:55,929 line:-2
当用户在屏幕上与UI元素
进行交互时会发生什么


548
00:29:56,463 --> 00:29:57,497 line:-1
对于这个例子


549
00:29:57,564 --> 00:29:59,666 line:-1
让我们主要关注左上角的


550
00:29:59,733 --> 00:30:00,901 line:-1
多西拉敏药物


551
00:30:01,768 --> 00:30:03,770 line:-1
当用户轻触这个按钮时


552
00:30:03,837 --> 00:30:06,206 line:-1
会向同步器传播一个事件


553
00:30:07,407 --> 00:30:09,810 line:-1
然后同步器把这个信息


554
00:30:09,877 --> 00:30:11,211 line:-1
转发到底层的数据存储中


555
00:30:11,945 --> 00:30:13,714 line:-1
一旦数据库


556
00:30:13,780 --> 00:30:18,185 line:-1
确认成功接收这个对象


557
00:30:18,785 --> 00:30:21,555 line:-1
同步器会充当发布器的角色


558
00:30:22,289 --> 00:30:25,559 line:-1
它把数据流传播给


559
00:30:25,626 --> 00:30:28,395 line:-1
订阅了那个数据流的所有UI元素


560
00:30:28,962 --> 00:30:30,030 line:-1
在这个例子中


561
00:30:30,330 --> 00:30:31,698 line:-1
只有三张卡


562
00:30:31,765 --> 00:30:35,102 line:-1
订阅了来自药物任务的更新


563
00:30:36,036 --> 00:30:37,571 line:-1
一旦数据流抵达这三张卡


564
00:30:37,638 --> 00:30:40,507 line:-1
它们就可以各自进行自我更新


565
00:30:41,909 --> 00:30:45,479 line:-1
这非常令人激动 因为UI视图


566
00:30:45,746 --> 00:30:48,015 line:-1
相互独立


567
00:30:48,348 --> 00:30:51,218 line:-1
并且它们还以一种异步方式进行更新


568
00:30:51,485 --> 00:30:54,988 line:-2
那会在你的护理app内打造一种
非常强大的体验


569
00:30:58,258 --> 00:31:01,828 line:-1
现在让我们看一下


570
00:31:01,895 --> 00:31:04,097 line:-2
如何在代码中把CareKit
端对端合并到你的app


571
00:31:04,865 --> 00:31:07,367 line:-2
那么你要做的第一件事就是
导入CareKit


572
00:31:07,734 --> 00:31:10,971 line:-2
这样做会自动导入
CareKit UI


573
00:31:11,038 --> 00:31:12,306 line:-1
和CareKit Store框架


574
00:31:13,540 --> 00:31:16,577 line:-2
接下来跟以往一样
你要创建OKCStore实例


575
00:31:18,178 --> 00:31:22,883 line:-2
然后继续创建
OCKSynchronizedStoreManager实例


576
00:31:22,950 --> 00:31:24,051 line:-1
并把它传给Store


577
00:31:24,651 --> 00:31:28,155 line:-2
这将使同步器在数据库周围
进行自我包装


578
00:31:29,590 --> 00:31:33,560 line:-2
最后你可以选择使用
我们预先包装好的


579
00:31:33,827 --> 00:31:35,162 line:-1
其中一个独立的视图控制器


580
00:31:35,796 --> 00:31:36,630 line:-1
在这个例子中


581
00:31:36,697 --> 00:31:40,067 line:-2
我们展示的是
OCKTaskListView控制器


582
00:31:40,334 --> 00:31:42,970 line:-1
它接受storeManager资产参数


583
00:31:44,438 --> 00:31:48,976 line:-2
这样实质上会建立管线
从UI层一直到


584
00:31:49,042 --> 00:31:50,210 line:-1
底层的数据库


585
00:31:50,577 --> 00:31:53,280 line:-1
在此之后你所要做的就是


586
00:31:53,547 --> 00:31:56,083 line:-2
根据你为Store所提供的数据
呈现视图控制器


587
00:31:56,149 --> 00:31:58,585 line:-1
你可以看到一个类似这个的UI


588
00:32:00,020 --> 00:32:01,021 line:-1
类似地


589
00:32:01,088 --> 00:32:04,725 line:-2
你还可以利用我们的一些
预先打包好的视图控制器


590
00:32:05,158 --> 00:32:08,262 line:-1
从而创建动态视图和联系人视图


591
00:32:09,363 --> 00:32:10,564 line:-1
你可以在这里看到


592
00:32:10,631 --> 00:32:15,536 line:-2
CareKit 2.0
让框架的使用变得非常简单


593
00:32:16,737 --> 00:32:19,640 line:-1
但那还并不是全部


594
00:32:20,240 --> 00:32:23,877 line:-2
因此我想邀请Erik上台
来做一个演示


595
00:32:24,278 --> 00:32:29,249 line:-2
我们会演示如何使用CareKit 2.0
创建自定义护理app


596
00:32:33,887 --> 00:32:34,988 line:-1
好的


597
00:32:35,422 --> 00:32:37,424 line:-1
太棒了 谢谢Srinath


598
00:32:38,592 --> 00:32:40,260 line:-1
大家下午好 我是Erik


599
00:32:40,794 --> 00:32:42,262 line:-2
我是CareKit团队的
一名软件工程师


600
00:32:42,829 --> 00:32:45,699 line:-2
今天我有幸能带大家
看一个示例app


601
00:32:46,166 --> 00:32:48,302 line:-2
这个app会演示
有关CareKit 2.0的


602
00:32:48,368 --> 00:32:50,404 line:-1
一些很棒的新功能


603
00:32:51,305 --> 00:32:53,874 line:-1
我们今天要一起创建一个app


604
00:32:54,408 --> 00:32:56,109 line:-1
完全从头开始创建


605
00:32:56,643 --> 00:32:58,512 line:-1
它有一个虚构的患者


606
00:32:59,646 --> 00:33:04,384 line:-2
是一位怀孕的准妈妈
她每天早晨都会发生严重的孕吐反应


607
00:33:04,451 --> 00:33:05,352 line:-1
也就是恶心


608
00:33:05,652 --> 00:33:06,887 line:-1
我们为她做的这个app


609
00:33:07,221 --> 00:33:09,022 line:-1
会让她追踪她的服药情况


610
00:33:10,324 --> 00:33:13,093 line:-1
并记录她何时感到恶心


611
00:33:14,094 --> 00:33:15,462 line:-1
并且我们会给她显示一个图表


612
00:33:15,829 --> 00:33:17,998 line:-1
让她了解


613
00:33:18,398 --> 00:33:20,267 line:-1
她坚持服药和她的症状之间的相关性


614
00:33:20,968 --> 00:33:24,338 line:-2
最后我们要让她快速与联系人
取得联系


615
00:33:24,705 --> 00:33:27,941 line:-1
从而在有突发情况时


616
00:33:28,008 --> 00:33:29,142 line:-2
获得去办公室的路线
或给她的医生打电话


617
00:33:30,511 --> 00:33:31,945 line:-2
当我们开发
CareKit app时


618
00:33:32,246 --> 00:33:34,548 line:-1
有两个重要的步骤


619
00:33:35,148 --> 00:33:37,050 line:-1
第一个是我们需要创建Store


620
00:33:37,351 --> 00:33:38,585 line:-1
我们需要给它填充数据


621
00:33:39,086 --> 00:33:40,354 line:-1
这是我们要处理的第一件事


622
00:33:40,988 --> 00:33:42,990 line:-1
之后我们需要创建UI


623
00:33:43,423 --> 00:33:45,759 line:-2
并告诉CareKit
我们希望如何显示数据


624
00:33:46,226 --> 00:33:47,694 line:-1
我们将在下半场讲这个


625
00:33:48,762 --> 00:33:49,663 line:-1
让我们开始吧


626
00:33:51,465 --> 00:33:52,299 line:-1
哎呀


627
00:33:57,471 --> 00:33:58,372 line:-1
好的


628
00:33:59,773 --> 00:34:01,241 line:-2
你可以在这里看到
我们有一个空app


629
00:34:01,308 --> 00:34:02,743 line:-1
这是我们的起点


630
00:34:03,310 --> 00:34:04,745 line:-1
当你使用CareKit时


631
00:34:04,811 --> 00:34:06,680 line:-1
你要做的第一件事就是导入它


632
00:34:06,747 --> 00:34:08,549 line:-1
如果你不这样做 你不会成功的


633
00:34:10,317 --> 00:34:11,284 line:-1
一旦成功导入


634
00:34:11,351 --> 00:34:13,387 line:-2
我们要做的下一件事
就是创建Store


635
00:34:13,453 --> 00:34:14,521 line:-1
更确切地说


636
00:34:14,588 --> 00:34:16,089 line:-1
是SynchronizedStoreManager


637
00:34:16,156 --> 00:34:17,891 line:-1
它会替我们实施同步


638
00:34:18,824 --> 00:34:19,826 line:-1
当我们创建Store时


639
00:34:20,293 --> 00:34:22,329 line:-1
我们要从创建OCKStore开始


640
00:34:23,163 --> 00:34:26,166 line:-2
然后我们把它传递到
SynchronizedStoreManager中


641
00:34:27,100 --> 00:34:28,202 line:-1
我想在这里暂停一会


642
00:34:28,268 --> 00:34:30,603 line:-2
我想强调一些关于
CareKit 2.0很重要的事


643
00:34:32,105 --> 00:34:33,373 line:-1
在这里我们使用了OCKStore


644
00:34:33,440 --> 00:34:34,975 line:-1
它是核心数据的包装器


645
00:34:35,509 --> 00:34:36,543 line:-1
但是…


646
00:34:36,810 --> 00:34:40,714 line:-1
OCKSynchronizedStoreManager


647
00:34:40,781 --> 00:34:42,716 line:-2
可以与实施我们的OCKStore
协议的任意对象相连接


648
00:34:43,583 --> 00:34:46,286 line:-1
那意味着你可以包装web服务器、


649
00:34:47,321 --> 00:34:48,589 line:-1
第三方数据库


650
00:34:49,121 --> 00:34:51,992 line:-2
或甚至是简单的JSON文件
并把它们作为你的数据库使用


651
00:34:53,994 --> 00:34:56,263 line:-2
为了达成我们今天的目的
我们坚持使用核心数据


652
00:34:57,764 --> 00:35:00,067 line:-2
我们要做的下一件事是
在Store中填充一些数据


653
00:35:00,133 --> 00:35:02,836 line:-2
我们只需要写一个便利的扩展
来替我们实现


654
00:35:03,670 --> 00:35:05,906 line:-2
在实际情况中 你可以
从网络服务器上把数据扒下来


655
00:35:05,973 --> 00:35:07,174 line:-1
或从app捆绑中加载数据


656
00:35:07,774 --> 00:35:09,576 line:-1
但今天我们要用代码实现


657
00:35:11,545 --> 00:35:12,779 line:-1
我们要创建两个任务


658
00:35:12,846 --> 00:35:14,882 line:-1
一个用于获取药物 一个用于检查


659
00:35:15,582 --> 00:35:17,217 line:-1
或一个用于记录何时感觉恶心


660
00:35:17,818 --> 00:35:19,853 line:-1
为此 我们需要创建一个时间表


661
00:35:22,456 --> 00:35:23,590 line:-1
我们要创建一些日期


662
00:35:23,657 --> 00:35:24,791 line:-1
不要太担心这些


663
00:35:24,858 --> 00:35:27,127 line:-1
重要的部分在下边 就是创建时间表


664
00:35:27,461 --> 00:35:29,763 line:-2
我们通过把元素组合起来
创建时间表


665
00:35:30,430 --> 00:35:32,833 line:-1
我们已经有一个每天重复的早餐元素


666
00:35:32,900 --> 00:35:35,369 line:-1
那么每天 我们都要在早餐时服药


667
00:35:35,936 --> 00:35:37,204 line:-1
然后在午餐时再服一次


668
00:35:37,804 --> 00:35:39,439 line:-1
然后隔天的晚餐时服第三次药


669
00:35:40,274 --> 00:35:42,509 line:-1
你实际上很可能不会像这样安排服药


670
00:35:42,943 --> 00:35:45,479 line:-2
但CareKit允许我们实现
非常灵活的时间表


671
00:35:45,546 --> 00:35:47,181 line:-1
我们只想稍微炫耀一下


672
00:35:48,882 --> 00:35:51,418 line:-2
有了时间表 我们现在可以
创建我们的任务了


673
00:35:52,986 --> 00:35:55,923 line:-1
为此 我们需要指定一个唯一标识符


674
00:35:56,190 --> 00:35:57,324 line:-1
我们要使用多西拉敏


675
00:35:57,391 --> 00:36:00,060 line:-1
这是一种治疗恶心的常用药物


676
00:36:01,562 --> 00:36:03,230 line:-1
当然 我们会添加到时间表上


677
00:36:03,764 --> 00:36:05,199 line:-1
我们会提供一些说明


678
00:36:05,265 --> 00:36:07,568 line:-1
从而让虚拟患者了解具体该如何做


679
00:36:09,837 --> 00:36:11,939 line:-2
让我们再创建一个任务
这次是针对恶心


680
00:36:12,573 --> 00:36:15,242 line:-2
在这个例子中
我们要创建一个更简单的时间表


681
00:36:15,642 --> 00:36:19,012 line:-1
这个时间表每天运行 全天运行


682
00:36:19,613 --> 00:36:22,282 line:-1
因为你可能感到恶心的时间不固定


683
00:36:22,349 --> 00:36:23,884 line:-2
我们希望你在任何时候
都能记录下来


684
00:36:25,619 --> 00:36:28,555 line:-2
最后我们要给它创建任务
与我们之前所做的方式非常相似


685
00:36:29,223 --> 00:36:32,326 line:-1
主要不同点是这个任务的


686
00:36:32,593 --> 00:36:34,494 line:-1
影响黏附属性为假


687
00:36:35,462 --> 00:36:37,130 line:-2
你会注意到 在绝大多数
CareKit app顶部


688
00:36:37,197 --> 00:36:39,099 line:-1
你会看到一大堆…


689
00:36:39,166 --> 00:36:41,468 line:-2
比如周日历
其中有一些表示完成的圆圈


690
00:36:42,402 --> 00:36:43,871 line:-1
通过把这个标志设为假


691
00:36:43,937 --> 00:36:46,173 line:-1
我们会排除这个恶心任务


692
00:36:46,707 --> 00:36:49,142 line:-1
使其不影响那些表示完成的圆圈


693
00:36:52,346 --> 00:36:53,814 line:-1
现在我们有两个任务对象


694
00:36:53,881 --> 00:36:55,148 line:-1
我们需要把它们添加到Store中


695
00:36:55,949 --> 00:36:56,950 line:-1
非常直截了当


696
00:36:57,818 --> 00:36:58,685 line:-1
我们已经做了这么多了


697
00:36:58,752 --> 00:37:01,755 line:-1
我们有了服药任务 有了恶心任务


698
00:37:02,289 --> 00:37:04,124 line:-1
我们还想添加一些联系人


699
00:37:04,491 --> 00:37:07,794 line:-2
从而当患者需要帮助时
可以联系这些联系人


700
00:37:09,796 --> 00:37:12,666 line:-2
联系人的创建与其它
CareKit实体的创建方式相同


701
00:37:13,133 --> 00:37:14,535 line:-1
你必须赋予它们一个唯一标识符


702
00:37:14,968 --> 00:37:16,803 line:-1
你可以在联系人上设置许多属性


703
00:37:16,870 --> 00:37:20,374 line:-2
在这例子中 我们要设置一张图片、
一个标题和一个角色


704
00:37:21,842 --> 00:37:23,043 line:-1
然后我们还可以提供…


705
00:37:24,745 --> 00:37:26,046 line:-1
联系信息


706
00:37:26,947 --> 00:37:29,149 line:-2
在这里我们提供一个电子邮箱地址、
一个电话号码


707
00:37:29,416 --> 00:37:30,450 line:-1
和一个消息


708
00:37:32,386 --> 00:37:33,954 line:-1
最后我们要附加一个地址


709
00:37:34,521 --> 00:37:37,891 line:-2
患者可以根据这个地址
从Maps上查看路线


710
00:37:37,958 --> 00:37:39,026 line:-1
如果他们需要去护理机构办公室的话


711
00:37:40,093 --> 00:37:41,528 line:-1
我们再添加一个联系人…


712
00:37:43,096 --> 00:37:44,598 line:-1
跟添加第一个联系人的方式基本相同


713
00:37:45,799 --> 00:37:48,969 line:-2
最后我们要把两个联系人
添加到Store中


714
00:37:51,538 --> 00:37:53,974 line:-2
好的 Store中
已经有两个任务了


715
00:37:54,041 --> 00:37:55,609 line:-1
我们在Store中有两个联系人


716
00:37:56,376 --> 00:37:58,679 line:-1
那把我们带到了第一步的终点


717
00:37:58,745 --> 00:37:59,913 line:-1
我们创建了一个Store


718
00:37:59,980 --> 00:38:02,282 line:-1
我们也在Store中添加了数据


719
00:38:02,983 --> 00:38:06,253 line:-1
那意味着第二步是生成UI


720
00:38:06,320 --> 00:38:08,555 line:-1
我们得写代码告诉CareKit


721
00:38:08,622 --> 00:38:09,823 line:-1
我们希望如何显示这些


722
00:38:11,491 --> 00:38:12,626 line:-1
我们的实现方式是


723
00:38:13,293 --> 00:38:14,561 line:-2
写一个
ViewController


724
00:38:16,930 --> 00:38:18,899 line:-2
那么在这里 我们要创建我们的
careViewController


725
00:38:18,966 --> 00:38:20,300 line:-1
我们马上就会讲到这个


726
00:38:20,701 --> 00:38:22,536 line:-2
但你要注意
我传入了storeManager


727
00:38:23,237 --> 00:38:24,805 line:-1
它将用于同步处理


728
00:38:26,807 --> 00:38:29,510 line:-2
最后我们要把ViewController
设置为我们的根视图


729
00:38:29,576 --> 00:38:30,577 line:-1
因此当我们运行app时


730
00:38:31,411 --> 00:38:32,713 line:-1
这就是我们要开始的地方


731
00:38:32,980 --> 00:38:34,114 line:-1
让我们具体看一下


732
00:38:34,181 --> 00:38:35,182 line:-1
看看我们有什么


733
00:38:36,850 --> 00:38:38,218 line:-1
这个目前是一个空类


734
00:38:38,685 --> 00:38:42,489 line:-2
你可以看到它继承自
OCKDailyPageViewController


735
00:38:43,090 --> 00:38:44,424 line:-2
如果你正在创建一个
CareKit app


736
00:38:44,858 --> 00:38:46,793 line:-1
并且你想获得一些强大的定制能力


737
00:38:47,561 --> 00:38:50,998 line:-2
OCKDailyPageViewController
是一个非常不错的起点


738
00:38:52,099 --> 00:38:54,067 line:-1
当你从这个类中继承时 你将获得…


739
00:38:55,335 --> 00:38:58,138 line:-2
一个viewController
它顶部有日历


740
00:38:58,205 --> 00:38:59,373 line:-1
其中含有标记完成的圆圈


741
00:39:00,207 --> 00:39:01,775 line:-1
用户可以进行翻阅


742
00:39:01,842 --> 00:39:03,410 line:-1
并选择他们喜欢的日期


743
00:39:03,477 --> 00:39:06,246 line:-2
在它下边是第二个
pageViewController


744
00:39:06,980 --> 00:39:09,550 line:-1
每次用户通过滑动或轻触


745
00:39:09,616 --> 00:39:11,151 line:-1
修改日期后


746
00:39:11,552 --> 00:39:12,619 line:-1
你都会得到一个回调


747
00:39:14,588 --> 00:39:16,023 line:-1
这个回调 事实上


748
00:39:16,590 --> 00:39:18,292 line:-1
在这个函数内


749
00:39:19,026 --> 00:39:21,094 line:-1
你将收到这两个参数


750
00:39:21,161 --> 00:39:22,896 line:-2
listViewController
和日期


751
00:39:23,864 --> 00:39:25,999 line:-1
这个日期就是用户刚才所选择的日期


752
00:39:26,466 --> 00:39:30,103 line:-2
listViewController
是一个空页面


753
00:39:30,737 --> 00:39:33,707 line:-2
作为开发人员 你的工作就是
针对用户所选择的日期


754
00:39:33,774 --> 00:39:35,876 line:-1
填充你希望用户看到的内容


755
00:39:37,177 --> 00:39:38,612 line:-1
实现方式非常直截了当


756
00:39:41,114 --> 00:39:44,685 line:-2
在这里我们要创建一个
OCKChecklistTaskViewController


757
00:39:45,419 --> 00:39:48,121 line:-2
我们可以把它附加到
listViewController上


758
00:39:48,188 --> 00:39:50,457 line:-1
那会把它添加到所选日期的内容中


759
00:39:51,592 --> 00:39:53,393 line:-1
让我们快速看一下这个类


760
00:39:54,194 --> 00:39:56,129 line:-1
OCKChecklistTaskViewController


761
00:39:56,663 --> 00:39:59,466 line:-2
现在你会注意到
根据Srinath刚才所讲的内容


762
00:40:00,167 --> 00:40:02,002 line:-2
有CareKit UI
和CareKit


763
00:40:02,569 --> 00:40:05,305 line:-2
在CareKit UI中
我们有任务视图


764
00:40:05,973 --> 00:40:07,007 line:-1
有四个或五个视图


765
00:40:07,541 --> 00:40:08,609 line:-1
嗯 在CareKit中


766
00:40:09,343 --> 00:40:10,344 line:-1
有同等数量的视图


767
00:40:10,410 --> 00:40:12,412 line:-2
并且其中每个视图
都有与之相匹配的视图控制器


768
00:40:13,480 --> 00:40:17,584 line:-2
主要不同点是CareKit UI
中的视图是本地的


769
00:40:18,118 --> 00:40:19,119 line:-1
并且不是同步的


770
00:40:19,453 --> 00:40:23,023 line:-2
而CareKit中的视图控制器
会自动更新


771
00:40:24,191 --> 00:40:26,260 line:-2
当我们实例化这个时
我们需要把它传给Store


772
00:40:26,727 --> 00:40:29,329 line:-2
我们需要告诉它
我们想让哪个任务显示数据


773
00:40:30,130 --> 00:40:31,398 line:-1
最后我们要提供一个事件查询


774
00:40:31,465 --> 00:40:33,767 line:-1
指定它应该只显示今天的事件


775
00:40:35,369 --> 00:40:36,637 line:-1
那么这就是我们的药物卡


776
00:40:37,137 --> 00:40:40,240 line:-1
它会要求患者服用多西拉敏


777
00:40:41,074 --> 00:40:42,075 line:-1
我们要再添加一个


778
00:40:43,143 --> 00:40:46,079 line:-2
SimpleLogTaskViewController
获取完全相同的参数


779
00:40:46,480 --> 00:40:48,949 line:-1
它会要求用户记录何时感觉恶心


780
00:40:50,350 --> 00:40:51,485 line:-1
我们写了许多代码


781
00:40:52,386 --> 00:40:54,922 line:-2
但我们终于已经准备好运行app
并看看它看起来怎么样了


782
00:41:00,194 --> 00:41:01,261 line:-1
好的 让我们运行一下


783
00:41:01,662 --> 00:41:03,197 line:-1
这就是我们目前实现的东西


784
00:41:03,530 --> 00:41:05,966 line:-1
你可以看到我们有添加的两个任务


785
00:41:07,000 --> 00:41:09,136 line:-2
用户可以在日历上的日期之间
来回滑动


786
00:41:10,737 --> 00:41:12,072 line:-1
他们可以像这样回到今天


787
00:41:13,140 --> 00:41:16,443 line:-2
你还要注意在某些日期上
我们有两个事件


788
00:41:16,510 --> 00:41:17,911 line:-1
在其它日期上 我们有三个事件


789
00:41:17,978 --> 00:41:19,713 line:-2
这是由于我们给任务所安排的时间表
不同


790
00:41:21,048 --> 00:41:22,649 line:-1
当用户核对任务时


791
00:41:23,417 --> 00:41:25,152 line:-1
会自动填充表示完成的圆圈


792
00:41:26,186 --> 00:41:28,021 line:-1
任务之间的这种同步


793
00:41:28,589 --> 00:41:30,924 line:-2
任务是指
TaskViewController


794
00:41:30,991 --> 00:41:32,826 line:-2
和顶部的
CalendarViewController


795
00:41:33,694 --> 00:41:35,796 line:-2
刚好是自动发生的
通过Store同步器实现


796
00:41:36,997 --> 00:41:39,499 line:-1
你还要注意当我们记录恶心事件时


797
00:41:39,900 --> 00:41:41,702 line:-1
它们不会出现在表示完成的圆圈中


798
00:41:41,969 --> 00:41:45,672 line:-1
因为当我们创建任务时


799
00:41:45,739 --> 00:41:46,840 line:-2
我们已经明确地把那些影响黏附属性
设为假


800
00:41:48,842 --> 00:41:49,776 line:-1
在我们继续之前


801
00:41:49,843 --> 00:41:54,248 line:-2
我想指出两个可以非常简便地自定义
CareKit app的地方


802
00:41:54,314 --> 00:41:55,649 line:-1
我认为你们一定会非常喜欢


803
00:41:56,984 --> 00:41:59,620 line:-1
第一个 如果我们…


804
00:41:59,686 --> 00:42:01,221 line:-1
跳回我们的app委托…


805
00:42:03,757 --> 00:42:05,526 line:-1
我们可以在窗口上设置一种着色


806
00:42:06,226 --> 00:42:08,962 line:-2
这个着色将在我们的
整个app中传播


807
00:42:09,363 --> 00:42:12,165 line:-2
这样可以非常简单地应用样式
或给你的app打品牌


808
00:42:15,936 --> 00:42:19,840 line:-2
第二个是换掉我们正在使用的那种
任务视图


809
00:42:20,607 --> 00:42:22,409 line:-2
因此请记住
CareKit UI中的任务


810
00:42:22,476 --> 00:42:23,944 line:-1
有许多不同的视图


811
00:42:24,878 --> 00:42:26,513 line:-1
我们可以切换到一个不同的视图…


812
00:42:28,348 --> 00:42:30,584 line:-2
只需要切换 我们所使用的
ViewController即可


813
00:42:30,651 --> 00:42:32,019 line:-1
它们的初始化程序都相同


814
00:42:34,288 --> 00:42:36,490 line:-2
我们要重新运行一下app
看看发生了哪些变化


815
00:42:37,591 --> 00:42:39,793 line:-1
非常棒 你可以看到颜色不一样了


816
00:42:40,260 --> 00:42:45,532 line:-1
还有完全不同的任务卡


817
00:42:46,066 --> 00:42:47,668 line:-1
现在对于这张卡 非常有意思的是


818
00:42:48,402 --> 00:42:51,338 line:-1
它显示了用户应该服用药物的时间


819
00:42:51,905 --> 00:42:53,540 line:-1
但当我们核对其中一个时


820
00:42:54,107 --> 00:42:55,542 line:-1
它所显示的时间…


821
00:42:56,276 --> 00:42:59,546 line:-1
改为了用户轻触按钮的时间


822
00:42:59,613 --> 00:43:01,682 line:-1
这非常有用 因为它允许患者


823
00:43:01,748 --> 00:43:03,951 line:-1
查看她最后一次服药的时间


824
00:43:08,155 --> 00:43:09,456 line:-1
好的 我认为我们可以继续


825
00:43:09,523 --> 00:43:10,757 line:-1
创建一些图表了


826
00:43:11,091 --> 00:43:12,059 line:-1
我认为我们要做的是


827
00:43:12,125 --> 00:43:14,828 line:-1
在我们的两张卡之间创建一个图表


828
00:43:14,895 --> 00:43:15,996 line:-1
也许是一个条形图


829
00:43:16,296 --> 00:43:17,497 line:-1
让我们假定它要显示


830
00:43:18,298 --> 00:43:20,801 line:-1
患者的服药次数VS


831
00:43:20,868 --> 00:43:22,936 line:-1
她感到恶心的次数


832
00:43:26,106 --> 00:43:28,909 line:-2
我们把图表放在我们已经创建好的
两张卡之间


833
00:43:29,510 --> 00:43:31,712 line:-1
我们需要创建两个数据序列


834
00:43:32,713 --> 00:43:34,581 line:-2
一个是服药数据序列
一个是恶心数据序列


835
00:43:34,848 --> 00:43:35,983 line:-1
我们要从创建恶心的数据序列开始


836
00:43:36,483 --> 00:43:37,684 line:-1
当我们创建这个数据序列时


837
00:43:38,352 --> 00:43:39,586 line:-1
我们必须给它赋予一个标识符


838
00:43:39,653 --> 00:43:41,722 line:-1
我想显示这个任务的数据


839
00:43:41,788 --> 00:43:42,956 line:-1
我们可以给它一个图例标题


840
00:43:43,023 --> 00:43:44,424 line:-1
用于绘图的一对颜色


841
00:43:44,758 --> 00:43:46,226 line:-1
以及标记大小 在这个例子中


842
00:43:46,293 --> 00:43:47,728 line:-1
是指条形图的宽度


843
00:43:48,529 --> 00:43:49,630 line:-1
还有事件聚合器


844
00:43:49,997 --> 00:43:53,000 line:-1
事件聚合器决定y轴值


845
00:43:53,333 --> 00:43:55,102 line:-1
在这个例子中 我们只计算


846
00:43:55,369 --> 00:43:57,437 line:-1
患者感到恶心的次数


847
00:43:58,605 --> 00:43:59,673 line:-1
我们再做一次同样的操作


848
00:43:59,740 --> 00:44:01,241 line:-1
这次是服药数据序列


849
00:44:02,242 --> 00:44:03,477 line:-1
操作基本相同


850
00:44:04,845 --> 00:44:06,046 line:-1
有了这两个数据序列


851
00:44:06,446 --> 00:44:09,583 line:-2
我们就可以创建
OCKCartesianChartViewController


852
00:44:11,418 --> 00:44:13,020 line:-2
初始化程序获取
storeManager


853
00:44:13,086 --> 00:44:15,055 line:-1
再一次 这是为了提供同步


854
00:44:15,122 --> 00:44:16,356 line:-1
同步是CareKit中很棒的功能


855
00:44:16,857 --> 00:44:18,692 line:-1
我们还传入数据序列


856
00:44:18,759 --> 00:44:21,662 line:-2
每个数据序列都是我们想在图表上
显示的数据序列


857
00:44:22,663 --> 00:44:25,232 line:-2
我们还传入日期
我们想显示的数据的日期


858
00:44:25,966 --> 00:44:26,800 line:-1
以及绘图类型


859
00:44:27,067 --> 00:44:28,502 line:-1
在这里我们要使用条形图


860
00:44:28,569 --> 00:44:31,438 line:-1
但你可以简便地使用散点图或折线图


861
00:44:32,673 --> 00:44:34,308 line:-1
最后在我们再一次运行app之前


862
00:44:34,875 --> 00:44:36,443 line:-1
我们要测试一些标签


863
00:44:36,944 --> 00:44:40,848 line:-2
以便患者可以理解
我们对她显示的数据


864
00:44:42,916 --> 00:44:44,651 line:-2
让我们再次运行app
并看一下图表


865
00:44:47,387 --> 00:44:49,523 line:-2
非常棒 你可以在这里看到
我们有图表了


866
00:44:49,590 --> 00:44:50,691 line:-1
图表上有数据显示


867
00:44:51,091 --> 00:44:53,060 line:-1
但关于这个图表 非常奇妙的是


868
00:44:53,126 --> 00:44:56,730 line:-1
当我们核对数据时


869
00:44:57,264 --> 00:44:58,232 line:-1
它通过漂亮的动画进行实时更新


870
00:44:59,800 --> 00:45:01,001 line:-1
也许第一天


871
00:45:01,435 --> 00:45:03,036 line:-1
我们的用户没有服药


872
00:45:04,271 --> 00:45:05,372 line:-1
她感到非常不舒服


873
00:45:06,507 --> 00:45:07,541 line:-1
第二天


874
00:45:08,342 --> 00:45:09,243 line:-1
她开始服药


875
00:45:09,877 --> 00:45:11,345 line:-1
她感到稍微好点了


876
00:45:13,180 --> 00:45:14,414 line:-1
第三天…


877
00:45:15,282 --> 00:45:16,416 line:-1
她服用了所有该服用的药物


878
00:45:16,483 --> 00:45:19,219 line:-2
今天她也服用了所有该服用的药物
她一点也没感到不舒服


879
00:45:20,220 --> 00:45:22,723 line:-2
因此你可以看到我们已经得到了
非常好的患者体验


880
00:45:22,789 --> 00:45:25,459 line:-1
但我们还可以利用另一个功能


881
00:45:25,526 --> 00:45:26,727 line:-1
我认为你们一定非常喜欢


882
00:45:27,761 --> 00:45:31,064 line:-1
现在你可以在CareKit的


883
00:45:31,532 --> 00:45:33,033 line:-2
这个listViewController中的
任意位置添加任意内容


884
00:45:33,433 --> 00:45:34,635 line:-1
让我来演示一下如何实现


885
00:45:37,004 --> 00:45:38,071 line:-1
让我们回到最顶部


886
00:45:38,138 --> 00:45:39,373 line:-1
我认为我们想添加一个横幅


887
00:45:40,874 --> 00:45:42,776 line:-2
我们可以通过创建
这个tipView实现


888
00:45:44,578 --> 00:45:45,979 line:-2
我们要在tipView上
设置一些文本


889
00:45:46,046 --> 00:45:47,581 line:-1
我们还要给它附加一张图片


890
00:45:48,282 --> 00:45:49,550 line:-1
但重点是


891
00:45:50,184 --> 00:45:52,586 line:-1
我们把它作为视图附加


892
00:45:53,820 --> 00:45:54,955 line:-1
现在我想让你注意的是


893
00:45:55,289 --> 00:45:57,658 line:-2
这个tipView不是
CareKit的一部分


894
00:45:59,593 --> 00:46:01,595 line:-1
我们只是为这个演示创建了它


895
00:46:02,029 --> 00:46:03,964 line:-1
它可以是来自你app的视图


896
00:46:04,031 --> 00:46:06,700 line:-1
或来自第三方库的视图


897
00:46:10,637 --> 00:46:11,805 line:-1
当我们现在运行app时


898
00:46:12,372 --> 00:46:14,508 line:-1
你会看到顶部有漂亮的横幅


899
00:46:14,575 --> 00:46:15,809 line:-1
那会鼓励患者


900
00:46:15,876 --> 00:46:19,112 line:-1
了解锻炼和健康怀孕之间的关系


901
00:46:26,119 --> 00:46:28,388 line:-1
你可以想象得到这个功能


902
00:46:28,922 --> 00:46:29,823 line:-1
有大量的用途


903
00:46:30,090 --> 00:46:31,358 line:-2
你可以根据患者的
护理计划商店中的已有内容


904
00:46:31,692 --> 00:46:34,928 line:-1
填充这个数据


905
00:46:35,195 --> 00:46:36,563 line:-1
你可以把它从服务器上扒下来


906
00:46:37,030 --> 00:46:38,599 line:-1
或你可以根据日期对它进行设置


907
00:46:39,132 --> 00:46:40,701 line:-1
真的有无限可能


908
00:46:41,835 --> 00:46:44,071 line:-2
在我结束演示之前
我要做的最后一件事


909
00:46:44,571 --> 00:46:47,174 line:-2
是让我们的用户可以快速访问
她的联系人


910
00:46:47,708 --> 00:46:50,377 line:-2
我认为我们要做的就是
在这里添加一个护理团队按钮


911
00:46:51,278 --> 00:46:54,181 line:-2
显示模态呈现
其中包含她所有的联系人


912
00:46:54,648 --> 00:46:56,383 line:-2
CareKit让这个过程
变得非常简单


913
00:46:58,085 --> 00:46:59,219 line:-1
在顶部


914
00:46:59,286 --> 00:47:02,623 line:-1
我们要创建我们的UI栏按钮项


915
00:47:02,689 --> 00:47:04,992 line:-1
我们要让它调用这里的这个函数


916
00:47:06,159 --> 00:47:08,462 line:-1
我们要在这个函数内


917
00:47:08,529 --> 00:47:10,797 line:-2
创建
OCKContactsListViewController实例


918
00:47:11,365 --> 00:47:13,233 line:-2
这是我们为你提供的一个
非常便利的类


919
00:47:13,767 --> 00:47:15,936 line:-2
你所需要做的就是
把它传给Store管理员


920
00:47:16,537 --> 00:47:18,972 line:-2
它将自动查询
你Store中的所有联系人


921
00:47:19,406 --> 00:47:20,507 line:-1
并显示出来


922
00:47:24,511 --> 00:47:27,080 line:-2
让我们最后再运行一次app
看它看起来怎么样


923
00:47:28,315 --> 00:47:29,383 line:-1
好了


924
00:47:29,449 --> 00:47:31,652 line:-1
那么轻触这个会显示我们的联系人


925
00:47:32,386 --> 00:47:34,521 line:-2
如果患者需要
去护理机构办公室的路线


926
00:47:35,055 --> 00:47:36,723 line:-1
她只需要轻触一下Maps即可


927
00:47:38,692 --> 00:47:40,627 line:-1
看起来有4.9英里


928
00:47:42,029 --> 00:47:43,564 line:-1
还不算太远 好的


929
00:47:44,198 --> 00:47:45,732 line:-1
我们得到了联系人


930
00:47:46,033 --> 00:47:47,534 line:-1
并且我们的app看起来很不错


931
00:47:48,368 --> 00:47:50,404 line:-1
我想我要在这里结束演示了


932
00:47:50,470 --> 00:47:51,572 line:-1
我们就到此为止


933
00:47:52,372 --> 00:47:53,674 line:-2
但在我把舞台
交还给Srinath之前


934
00:47:53,740 --> 00:47:56,076 line:-1
我想总结一下我们做了什么


935
00:47:57,244 --> 00:48:01,114 line:-2
我们大概花了15分钟
写了大约200行代码


936
00:48:01,381 --> 00:48:05,052 line:-2
我们完成了一个漂亮的
患者护理app


937
00:48:05,118 --> 00:48:06,253 line:-1
还带有华丽的动画


938
00:48:07,354 --> 00:48:09,790 line:-1
但对于这个app最重要的是


939
00:48:10,190 --> 00:48:11,825 line:-1
它非常模块化


940
00:48:12,492 --> 00:48:14,027 line:-1
每个视图之间彼此没有关系


941
00:48:15,062 --> 00:48:17,130 line:-2
所有的viewControllers
完全不挂钩


942
00:48:17,965 --> 00:48:19,967 line:-1
没有任何委托把它们绑到一起


943
00:48:20,701 --> 00:48:23,337 line:-1
随着用户需求的发展


944
00:48:23,737 --> 00:48:26,473 line:-1
这个app的更新和修改非常简单


945
00:48:28,275 --> 00:48:32,379 line:-2
我们认为CareKit 2.0
有无限可能性


946
00:48:32,880 --> 00:48:35,682 line:-1
我们非常期待看到我们的开发人员们


947
00:48:36,083 --> 00:48:37,718 line:-1
用它创造出很棒的app


948
00:48:38,819 --> 00:48:40,020 line:-1
好的 舞台交还给你Srinath


949
00:48:46,627 --> 00:48:48,695 line:-1
哇哦 谢谢Erik的演示 特别棒


950
00:48:50,764 --> 00:48:53,534 line:-1
现在总结一下整场演讲


951
00:48:55,035 --> 00:48:59,506 line:-2
CareKit是对框架的
基本重写和重构


952
00:48:59,907 --> 00:49:01,608 line:-1
它仍然保存了它的核心价值


953
00:49:01,675 --> 00:49:04,945 line:-1
但现在它是一个非常强大的工具


954
00:49:05,279 --> 00:49:09,316 line:-2
可以为你的用户
创建非常棒的护理app体验


955
00:49:11,185 --> 00:49:12,519 line:-1
我们提到了ResearchKit


956
00:49:12,586 --> 00:49:15,956 line:-2
我们讲了我们通过框架对UI
所做出的更新


957
00:49:16,356 --> 00:49:20,961 line:-2
以及在现有现行任务库上新添加的
现行任务


958
00:49:21,862 --> 00:49:25,866 line:-1
最后我们还讲了对社区的更新


959
00:49:26,133 --> 00:49:28,669 line:-1
包括两个主要计划：


960
00:49:28,735 --> 00:49:30,404 line:-1
调查员支持计划；


961
00:49:30,737 --> 00:49:32,940 line:-2
和即将于今年秋季上线的
重新设计的网站计划


962
00:49:34,141 --> 00:49:35,209 line:-1
（在GitHub上可用！）


963
00:49:35,275 --> 00:49:39,213 line:-2
一如既往 ResearchKit
和CareKit都是开源框架


964
00:49:39,279 --> 00:49:41,715 line:-1
你现在就可以在GitHub上使用


965
00:49:44,351 --> 00:49:45,786 line:-1
在接下来的几个月里


966
00:49:45,853 --> 00:49:47,421 line:-1
我们会非常努力地


967
00:49:47,721 --> 00:49:50,190 line:-1
向这些框架中添加更多功能


968
00:49:50,757 --> 00:49:52,526 line:-1
我们将支持暗黑模式


969
00:49:52,593 --> 00:49:54,895 line:-1
我们将添加可访问性、地理位置


970
00:49:54,962 --> 00:49:57,164 line:-1
以及更多的文档支持


971
00:49:57,798 --> 00:50:01,535 line:-2
在我们继续改善和扩展
我们的框架过程中


972
00:50:01,602 --> 00:50:05,205 line:-2
我们非常鼓励
我们社区中的所有开发人员


973
00:50:05,272 --> 00:50:08,842 line:-1
为我们提供反馈和建议


974
00:50:08,909 --> 00:50:10,310 line:-1
（请提出你们的建议！）


975
00:50:11,044 --> 00:50:13,914 line:0
要获取更多关于本场演讲的信息
请访问这个链接


976
00:50:14,581 --> 00:50:17,384 line:0
我们明天中午会举办一场


977
00:50:17,451 --> 00:50:20,387 line:0
ResearchKit
和CareKit演讲


978
00:50:20,687 --> 00:50:21,855 line:0
我们会在那里回答你的所有疑问


979
00:50:23,824 --> 00:50:25,959 line:-1
感谢你们来参加我们的演讲


980
00:50:26,260 --> 00:50:27,961 line:-1
祝你们度过一个愉快的WWDC

