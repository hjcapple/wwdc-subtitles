1
00:00:18,085 --> 00:00:22,289 line:-2
大家好 欢迎参加
Swift Playgrounds 3演讲


2
00:00:23,156 --> 00:00:24,591 line:-1
我是Grace Kendall


3
00:00:24,992 --> 00:00:26,393 line:-1
我是Joy Forbes


4
00:00:26,460 --> 00:00:27,928 line:-1
我叫Jonathan Penn


5
00:00:27,995 --> 00:00:29,997 line:-2
我们都是Swift Playgrounds的
软件工程师


6
00:00:30,063 --> 00:00:32,665 line:-1
今天能来到这里 我们感到非常激动


7
00:00:33,000 --> 00:00:36,403 line:-2
我们要与你们分享使用Swift的
新功能在iPad上创建新想法


8
00:00:36,703 --> 00:00:39,039 line:-1
我们会演示一些技巧


9
00:00:39,106 --> 00:00:41,775 line:-1
关于创建更具吸引力的体验


10
00:00:43,343 --> 00:00:46,313 line:-2
Swift Playgrounds
是一款app 你可以编写Swift代码


11
00:00:46,380 --> 00:00:49,316 line:-1
并了解其他作者所创建的内容


12
00:00:50,384 --> 00:00:52,519 line:-1
你所编写的代码是真正的Swift


13
00:00:52,586 --> 00:00:56,023 line:-2
由app进行编译
并在iPad上运行


14
00:00:57,791 --> 00:00:59,593 line:-2
你所创建或下载的
Playgrounds


15
00:00:59,660 --> 00:01:02,129 line:-1
显示在你的文档列表中 如图所示


16
00:01:03,397 --> 00:01:05,498 line:-2
底部的
“更多Playgrounds”


17
00:01:05,732 --> 00:01:08,869 line:-2
显示与你所创建的内容相似的
其它Playgrounds


18
00:01:09,469 --> 00:01:11,104 line:-1
如果你轻触“查看全部”按钮


19
00:01:12,172 --> 00:01:15,342 line:-2
你会看到可以
从Apple下载的全部内容


20
00:01:15,909 --> 00:01:17,911 line:-1
以及你所订阅的其它feeds


21
00:01:18,412 --> 00:01:20,414 line:-1
你还可以在底部的“其它发布商”中


22
00:01:20,480 --> 00:01:23,183 line:-1
浏览特色订阅


23
00:01:24,885 --> 00:01:28,755 line:-2
Apple在Swift Playgrounds 3中
发布了六个新内容


24
00:01:29,990 --> 00:01:33,193 line:-2
Learn to Code家族又扩展了
Lights、Camera、Code、


25
00:01:33,460 --> 00:01:35,696 line:-2
Assemble Your Camera
和Flashy Photos


26
00:01:36,196 --> 00:01:38,365 line:-2
这些与起初的
Camera Create一起


27
00:01:39,099 --> 00:01:41,535 line:-1
介绍了用组件进行创建的概念


28
00:01:41,735 --> 00:01:44,004 line:-2
从而创建比如摄像头
和照片编辑器一样的功能


29
00:01:45,339 --> 00:01:48,442 line:-2
Sonic Workshop挑战
和Sonic Create起点


30
00:01:48,509 --> 00:01:53,280 line:-2
在iPad上使用触摸事件来作曲
并创建可视化声音图


31
00:01:55,148 --> 00:01:57,951 line:-2
今天我们将了解
Swift Playgrounds 3中的


32
00:01:58,018 --> 00:01:59,319 line:-1
一些很棒的新功能


33
00:01:59,953 --> 00:02:03,657 line:-2
我将介绍你在iPad上
所能做的开发


34
00:02:03,957 --> 00:02:06,226 line:-1
然后Joy再讲Mac上


35
00:02:06,293 --> 00:02:08,328 line:-1
对作者们可用的一些新功能


36
00:02:08,628 --> 00:02:10,731 line:-2
但首先Jonathan
会给我们做演示


37
00:02:10,797 --> 00:02:14,868 line:-2
举例说明Swift Playgrounds 3
为开发者们所提供的功能


38
00:02:14,935 --> 00:02:15,802 line:-1
Jonathan？


39
00:02:16,069 --> 00:02:16,904 line:-1
谢谢Grace


40
00:02:23,777 --> 00:02:26,280 line:-2
我要演示作为想法的暂存器的
这个工具有多么强大


41
00:02:26,346 --> 00:02:29,783 line:-1
还带点乐趣


42
00:02:30,083 --> 00:02:31,552 line:-1
这些设备非常漂亮


43
00:02:31,952 --> 00:02:34,888 line:-1
我个人非常喜欢它的传感器


44
00:02:34,955 --> 00:02:36,290 line:-1
比如加速度计


45
00:02:36,623 --> 00:02:41,161 line:-2
我个人是那些使用加速度计来实现
很酷的操作的游戏的狂热粉丝


46
00:02:41,228 --> 00:02:44,831 line:-2
那可以带来一种真实的感觉
关于屏幕上正在发生的事


47
00:02:45,465 --> 00:02:48,669 line:-1
我要给你演示


48
00:02:48,735 --> 00:02:53,707 line:-2
我从零开始在iPad上创建
无限滚动大理石障碍赛的一些步骤


49
00:02:54,141 --> 00:02:56,543 line:-1
完全在Swift Playgrounds中实现


50
00:02:57,077 --> 00:02:59,012 line:-2
不知道你是否玩过其中一种
解谜小游戏


51
00:02:59,079 --> 00:03:01,982 line:-2
就是你得滚动大理石
不要让它掉进任何洞里


52
00:03:02,049 --> 00:03:03,116 line:-1
就是类似那样的游戏


53
00:03:04,051 --> 00:03:05,819 line:-1
我们需要一些东西才能实现这种功能


54
00:03:05,886 --> 00:03:10,724 line:-1
比如响应iPad倾转动作的大理石


55
00:03:11,892 --> 00:03:14,194 line:-1
我们需要程序性的生成洞的地图


56
00:03:14,261 --> 00:03:16,296 line:-1
从而玩家可以引导大理石绕过


57
00:03:16,697 --> 00:03:17,831 line:-1
为了让事情简单一些


58
00:03:17,898 --> 00:03:19,766 line:-1
我们的目标是尽可能远


59
00:03:19,833 --> 00:03:23,937 line:-2
尽可能快 而不会掉进洞里
或落到路线外面


60
00:03:25,606 --> 00:03:27,207 line:-2
创建类似这样的功能
需要好多步骤才能实现


61
00:03:27,274 --> 00:03:30,210 line:-1
我主要讲其中的几个步骤


62
00:03:30,277 --> 00:03:32,746 line:-2
当然了 我要使用
Swift Playgrounds


63
00:03:34,214 --> 00:03:36,250 line:-1
读取原生加速度计数据


64
00:03:36,316 --> 00:03:38,452 line:-1
试验在线结果


65
00:03:38,852 --> 00:03:42,556 line:-2
使用实时视图了解物理引擎中的
SpriteKit


66
00:03:43,123 --> 00:03:45,125 line:-1
并试验如何在整个跑道上实现这个


67
00:03:45,192 --> 00:03:48,128 line:-1
程序化的生成和布局洞


68
00:03:48,662 --> 00:03:51,865 line:-2
然后我们要把它们组合在一起
并查看完整的原型


69
00:03:52,399 --> 00:03:53,333 line:-1
让我们开始吧


70
00:03:57,304 --> 00:04:00,340 line:-1
好吧 让我们从空白页开始


71
00:04:00,641 --> 00:04:02,976 line:-2
Swift Playgrounds
文档中的每一页


72
00:04:03,043 --> 00:04:05,279 line:-1
都是自己的执行输入点


73
00:04:05,345 --> 00:04:06,647 line:-1
是个main.swf文件


74
00:04:06,880 --> 00:04:08,949 line:-1
我喜欢使用独立的页面


75
00:04:09,183 --> 00:04:10,918 line:-1
就像是我的旅行日记一样


76
00:04:10,984 --> 00:04:13,253 line:-1
我要尝试解决问题


77
00:04:13,320 --> 00:04:15,689 line:-2
或学习新API
只是为了把东西做出来


78
00:04:16,156 --> 00:04:17,658 line:-1
我要从一个子系统开始


79
00:04:17,724 --> 00:04:20,093 line:-1
或从一个函数开始 或从这里开始


80
00:04:20,293 --> 00:04:22,029 line:-1
然后在移到新页面上


81
00:04:22,095 --> 00:04:23,463 line:-1
这是一张完全空白的页面


82
00:04:23,530 --> 00:04:24,965 line:-1
我可以继续下一个想法


83
00:04:25,199 --> 00:04:27,868 line:-1
留下一条我可以返回去


84
00:04:27,935 --> 00:04:29,203 line:-1
进行进一步实验的线索


85
00:04:29,636 --> 00:04:32,840 line:-2
现在我们的首席技师是
iPad的倾转动作


86
00:04:32,906 --> 00:04:35,943 line:-2
我们很可能应该
从导入CoreMotion开始


87
00:04:37,110 --> 00:04:39,213 line:-2
我们要创建
CMMotionManager


88
00:04:39,446 --> 00:04:41,915 line:-1
现在我使用硬件键盘上的Tab键


89
00:04:42,549 --> 00:04:46,854 line:-2
从底部的这个快捷方式中
选择不同的选项


90
00:04:46,920 --> 00:04:47,788 line:-1
用于代码完成


91
00:04:48,021 --> 00:04:50,724 line:-1
然后我要按回车键选中它


92
00:04:51,825 --> 00:04:55,929 line:-2
我们通过startAccelerometerUpdates
启动管理器


93
00:04:57,030 --> 00:04:59,933 line:-1
现在我不知道你是谁 但我从未记得


94
00:05:00,234 --> 00:05:03,804 line:-1
加速度计的哪些xyz坐标


95
00:05:03,871 --> 00:05:07,674 line:-2
响应iPad
应该要如何在这个方向移动


96
00:05:07,741 --> 00:05:09,276 line:-1
我总是感到很困惑


97
00:05:09,610 --> 00:05:11,845 line:-1
但 嘿 让我们就在这里解决它


98
00:05:12,846 --> 00:05:15,849 line:-1
在我们开始之前 我们要等一小会儿


99
00:05:16,149 --> 00:05:18,385 line:-1
加速度计需要一些时间才能运转起来


100
00:05:18,952 --> 00:05:22,523 line:-2
我们担心稍后要定期读取
加速度计的数据


101
00:05:22,589 --> 00:05:25,492 line:-1
目前我们只想试验


102
00:05:25,559 --> 00:05:27,361 line:-1
看我们是否能取出它的值


103
00:05:27,561 --> 00:05:29,863 line:-1
因此我要告诉管理器


104
00:05:30,430 --> 00:05:32,399 line:-1
我想获取加速度计数据、


105
00:05:32,666 --> 00:05:35,035 line:-1
加速度属性和x坐标


106
00:05:35,435 --> 00:05:38,939 line:-2
把它放在它自己的行上
这个行就被记录在案


107
00:05:39,006 --> 00:05:42,943 line:-2
表达式也被记录在案
并在右手边返回内联结果


108
00:05:43,010 --> 00:05:45,078 line:-2
我们可以在这里看到
当我轻触“运行我的代码”时


109
00:05:46,513 --> 00:05:48,081 line:-1
全部四行代码得到了一个内联结果


110
00:05:48,148 --> 00:05:50,984 line:-2
我要轻触代表最后一行的
最后一个图标


111
00:05:51,285 --> 00:05:54,721 line:-1
嘿 我们看到了一个值 负0.78


112
00:05:55,422 --> 00:05:57,124 line:-1
那代表了-某些东西


113
00:05:57,457 --> 00:05:58,425 line:-1
嗯 让我在这里试一下这个


114
00:05:58,492 --> 00:06:00,360 line:-1
我要倾转iPad并尝试再次运行它


115
00:06:00,427 --> 00:06:02,462 line:-1
看看现在有什么值


116
00:06:03,430 --> 00:06:06,900 line:-1
它说 嘿 负0.061


117
00:06:07,201 --> 00:06:08,769 line:-1
数值不一样了


118
00:06:09,236 --> 00:06:12,072 line:-2
在这里的某个地方
我们得到了某种反应


119
00:06:12,139 --> 00:06:14,107 line:-1
我认为这与iPad的移动相关


120
00:06:14,174 --> 00:06:15,008 line:-1
这是一个开始


121
00:06:15,375 --> 00:06:18,278 line:-1
但我很想获得某种实时反馈


122
00:06:18,345 --> 00:06:20,614 line:-1
告诉我正在发生什么


123
00:06:21,114 --> 00:06:25,485 line:-2
因此让我们快速进入下一页
我准备了一个例子


124
00:06:27,921 --> 00:06:30,123 line:-2
通常当你运行
Playground页面时


125
00:06:30,190 --> 00:06:33,961 line:-2
程序计数器到达最末端后
执行就会停止


126
00:06:34,127 --> 00:06:36,730 line:-2
无论何时你都可以轻触
“运行我的代码”重新执行代码


127
00:06:36,964 --> 00:06:38,498 line:-1
这在很多情况下都很有用


128
00:06:38,565 --> 00:06:41,435 line:-1
但在这个例子中 我希望能继续执行


129
00:06:41,502 --> 00:06:43,403 line:-1
从而我可以随时间收集值


130
00:06:43,637 --> 00:06:44,538 line:-1
为此


131
00:06:44,738 --> 00:06:46,773 line:-2
我要使用
Playground Support API


132
00:06:46,940 --> 00:06:50,444 line:-1
告诉当前页面我需要无限执行


133
00:06:51,345 --> 00:06:53,714 line:-2
我们像以往一样创建
CMMotionManager


134
00:06:53,947 --> 00:06:55,482 line:-1
我们启动加速度计


135
00:06:56,016 --> 00:06:57,618 line:-1
我在这里写了一个简单的函数


136
00:06:57,851 --> 00:07:00,254 line:-2
只是个helper函数
叫做repeatEvery


137
00:07:00,320 --> 00:07:02,122 line:-1
它接受一个后置闭包


138
00:07:02,422 --> 00:07:03,790 line:-1
立即调用闭包


139
00:07:03,857 --> 00:07:06,059 line:-1
然后在给定的时间间隔之后


140
00:07:06,126 --> 00:07:07,461 line:-1
安排再次调用它


141
00:07:07,628 --> 00:07:10,631 line:-2
通过在主调度队列上使用
asyncAfter方法实现


142
00:07:11,098 --> 00:07:13,166 line:-1
这是一种简单的重复方式 我知道


143
00:07:13,233 --> 00:07:16,436 line:-2
但你知道吗 我们只是在试验
它用起来很棒


144
00:07:16,503 --> 00:07:18,739 line:-2
无论在这个页面上的任何位置
只要我需要 我就可以重新使用它


145
00:07:19,239 --> 00:07:20,407 line:-1
并且我要在这里使用它


146
00:07:21,074 --> 00:07:22,009 line:-1
每隔半秒钟


147
00:07:22,242 --> 00:07:23,877 line:-1
就调用这个后置闭包


148
00:07:23,944 --> 00:07:26,647 line:-1
并且只要加速度计数据不为无


149
00:07:27,147 --> 00:07:31,118 line:-2
我们就使用这行上的表达式
来记录x坐标


150
00:07:31,518 --> 00:07:34,188 line:-2
让我们看一下当我轻触
“运行我的代码”时会发生什么


151
00:07:34,521 --> 00:07:37,291 line:-1
好吧 屏幕上正在进行


152
00:07:37,357 --> 00:07:39,426 line:-2
让我轻触内联结果
看看这里会发生什么


153
00:07:40,160 --> 00:07:43,130 line:-1
自动为我们选择了图表呈现


154
00:07:43,197 --> 00:07:45,933 line:-1
因为这是一系列简单的数值


155
00:07:46,200 --> 00:07:47,734 line:-1
我要拿起它并四处移动


156
00:07:48,335 --> 00:07:51,371 line:-1
哇哦 我们有值了 有东西了 好吧


157
00:07:51,672 --> 00:07:53,006 line:-1
我要尝试在这里获取一个基线


158
00:07:53,073 --> 00:07:57,444 line:-1
我要把它平放 然后我再垂直倾转它


159
00:07:58,512 --> 00:08:00,714 line:-1
我要把它向下倾转


160
00:08:00,781 --> 00:08:03,417 line:-1
好的 我认为我们已经搞定了


161
00:08:03,483 --> 00:08:04,685 line:-1
加速度计的x坐标


162
00:08:05,319 --> 00:08:08,689 line:-1
响应iPad沿这个轴


163
00:08:09,022 --> 00:08:10,958 line:-1
在这个方向上的移动


164
00:08:11,124 --> 00:08:11,992 line:-1
好吧 我们开始吧


165
00:08:12,159 --> 00:08:15,729 line:-2
我可以做同样的操作来了解
y轴和z轴是如何运作的


166
00:08:15,796 --> 00:08:17,097 line:-1
这非常有用


167
00:08:17,931 --> 00:08:19,633 line:-1
这个repeatEvery函数-


168
00:08:20,767 --> 00:08:21,602 line:-1
谢谢


169
00:08:23,537 --> 00:08:25,772 line:-2
这个repeatEvery
函数很好


170
00:08:25,839 --> 00:08:28,675 line:-1
虽然很粗糙 但很简洁 很清楚


171
00:08:28,742 --> 00:08:30,277 line:-1
我要把它用在其它地方


172
00:08:30,344 --> 00:08:31,945 line:-1
直到我了解如何正确处理它


173
00:08:32,011 --> 00:08:32,846 line:-1
没关系


174
00:08:33,179 --> 00:08:38,251 line:-2
因为我在Swift Playgrounds 3中
把它创建为一个空白的Playgound


175
00:08:38,318 --> 00:08:41,421 line:-1
我可以使用新的选项卡式编辑


176
00:08:41,621 --> 00:08:42,456 line:-1
让我来演示一下


177
00:08:42,823 --> 00:08:45,526 line:-2
我要轻触上边导航栏中的
“文件”图标


178
00:08:46,026 --> 00:08:48,295 line:-1
然后我要轻触“实用程序模块”


179
00:08:48,462 --> 00:08:50,864 line:-1
这会打开用户模块和源文件选择器


180
00:08:50,931 --> 00:08:53,000 line:-1
你可以看到因为我要实现这个想法


181
00:08:53,066 --> 00:08:54,401 line:-1
我已经在这里克隆了许多东西


182
00:08:54,835 --> 00:08:57,538 line:-2
嗯 在“实用程序模块”中
我要把那个函数放在这里


183
00:08:57,838 --> 00:08:59,640 line:-2
做一个
Timing.swift文件


184
00:09:01,074 --> 00:09:04,411 line:-2
我要轻触“选项卡”
返回页面的主文件


185
00:09:04,878 --> 00:09:07,414 line:-2
我要轻触repeatEvery
函数以选中它


186
00:09:07,981 --> 00:09:09,917 line:-1
如果我轻触并按住 我可以拿起它


187
00:09:10,350 --> 00:09:13,420 line:-1
我用另一只手轻触“计时选项卡”


188
00:09:13,687 --> 00:09:19,193 line:-2
然后松开手 那会复制这段代码
并把它释放到这个文件中


189
00:09:20,160 --> 00:09:21,428 line:-1
因为这是个新文件


190
00:09:21,628 --> 00:09:24,431 line:-2
Swift不知道什么是时间间隔
或调度队列


191
00:09:24,698 --> 00:09:25,632 line:-2
我要通过导入
Foundation来告诉它


192
00:09:26,333 --> 00:09:29,136 line:-1
从而它就了解如何处理那些符号


193
00:09:29,770 --> 00:09:32,706 line:-2
因为我想在每个页面上的任何地方
使用这个函数


194
00:09:32,773 --> 00:09:34,942 line:-1
甚至可能在其它模块上使用它


195
00:09:35,242 --> 00:09:38,078 line:-2
我需要把这个函数标记为公共函数
因此它总是可见


196
00:09:38,712 --> 00:09:40,681 line:-1
现在我可以返回到主文件


197
00:09:40,948 --> 00:09:43,784 line:-1
轻触以选择函数、删除它


198
00:09:44,651 --> 00:09:47,287 line:-1
如果我做的对 一切都应该没问题


199
00:09:47,354 --> 00:09:48,488 line:-1
好吧 我们开始吧


200
00:09:48,722 --> 00:09:52,526 line:-1
耶 现在我可以按需要打开文件了


201
00:09:52,593 --> 00:09:54,094 line:-1
从而试验不同的想法


202
00:09:54,161 --> 00:09:56,830 line:-2
比如让我们在这里尝试一下这个
Math.swift


203
00:09:57,030 --> 00:09:59,399 line:-2
当我正在执行的时候我要丢掉
一堆东西


204
00:09:59,466 --> 00:10:00,667 line:-1
只是为了帮我试验


205
00:10:00,734 --> 00:10:04,404 line:-2
这些是数学helper函数
和对系统类型的一些扩展


206
00:10:04,738 --> 00:10:08,041 line:-1
可以让编写代码变得更流畅


207
00:10:08,108 --> 00:10:09,843 line:-1
当我把它作为过程的一部分使用时


208
00:10:10,777 --> 00:10:15,015 line:-1
我可以轻触并拖动以重排序选项卡


209
00:10:15,549 --> 00:10:17,284 line:-1
轻触“关闭”按钮以关闭选项卡


210
00:10:17,451 --> 00:10:21,154 line:-2
所有这些代码
在这个文档中的任何地方都可用


211
00:10:21,622 --> 00:10:22,456 line:-1
非常方便


212
00:10:22,956 --> 00:10:26,393 line:-1
现在让我们加快一些进度


213
00:10:26,560 --> 00:10:28,262 line:-2
我一直在用
SpriteKit四处查看


214
00:10:28,328 --> 00:10:30,097 line:-1
从而回顾它是如何运作的


215
00:10:30,163 --> 00:10:33,300 line:-1
让我们看看我的下一页进展怎么样了


216
00:10:34,368 --> 00:10:36,837 line:-2
我需要为
SpriteKit提出文档


217
00:10:36,904 --> 00:10:39,606 line:-2
我通过轻触导航栏中的
“工具菜单”图标


218
00:10:39,673 --> 00:10:42,075 line:-1
并选择“文档”来实现


219
00:10:42,576 --> 00:10:45,612 line:-1
我通过轻触放大镜搜索文档


220
00:10:45,679 --> 00:10:46,980 line:-1
并搜索SpriteKit


221
00:10:47,748 --> 00:10:50,884 line:-2
通过阅读这些内容
我就可以回想起来这个是如何运作的


222
00:10:51,185 --> 00:10:54,621 line:-1
如何创建屏幕左手边的代码主体的


223
00:10:54,988 --> 00:10:58,058 line:-2
我了解了
SpriteKit的场景和节点


224
00:10:58,125 --> 00:11:03,163 line:-2
SpriteKit通过在游戏中
安排一切并在屏幕上进行渲染


225
00:11:03,430 --> 00:11:04,798 line:-1
我了解了物理引擎


226
00:11:04,865 --> 00:11:06,800 line:-1
以及如何对节点施加力


227
00:11:06,867 --> 00:11:09,937 line:-2
从而使物理机制随时间的推移
开始运作


228
00:11:10,304 --> 00:11:12,105 line:-1
并且我了解了SpriteKit


229
00:11:12,339 --> 00:11:15,375 line:-1
在每帧上回调我的代码时的游戏循环


230
00:11:15,442 --> 00:11:17,678 line:-1
从而我可以影响环境的变化


231
00:11:17,911 --> 00:11:19,279 line:-1
最后一点非常重要


232
00:11:19,713 --> 00:11:25,018 line:-2
让我关闭侧边面板并打开底部的
“执行控制菜单”


233
00:11:25,519 --> 00:11:28,388 line:-2
因为SpriteKit在每一帧上
都回调我的代码


234
00:11:28,455 --> 00:11:31,258 line:-1
我必须得快点 我要关闭内联结果


235
00:11:31,525 --> 00:11:33,894 line:-2
正如我们所看到的
它们在许多情况下都很有用


236
00:11:33,961 --> 00:11:37,297 line:-1
但记录那些表达式却需要时间


237
00:11:37,531 --> 00:11:39,733 line:-2
我不想在这种情况下减慢
SpriteKit的进度


238
00:11:39,933 --> 00:11:41,068 line:-1
并且我甚至都不需要它们


239
00:11:41,134 --> 00:11:44,004 line:-2
因为你可以看到
当我轻触“运行我的代码”时


240
00:11:44,404 --> 00:11:46,640 line:-2
我把SpriteKit
设置为实时视图


241
00:11:46,707 --> 00:11:50,644 line:-2
SpriteKit自身会给我提供
我处理这部分时所需要的反馈


242
00:11:51,078 --> 00:11:55,082 line:-2
就是这样 我们有一个圆形的物质
正在四处移动


243
00:11:55,582 --> 00:11:57,918 line:-1
以响应iPad的倾转 好吧


244
00:11:58,285 --> 00:12:00,521 line:-1
现在重点来了 因为…


245
00:12:01,388 --> 00:12:02,589 line:-1
谢谢…


246
00:12:03,991 --> 00:12:05,592 line:-1
一旦你得到了这样的东西


247
00:12:05,659 --> 00:12:08,095 line:-2
一旦你在屏幕上得到了正在运行的
这种内容


248
00:12:08,161 --> 00:12:10,030 line:-1
你会拿着它去做用户测试 对吗？


249
00:12:10,464 --> 00:12:11,765 line:-1
因此我要把它拿给我的孩子们


250
00:12:12,132 --> 00:12:14,334 line:-2
我告诉他们说
嘿 你想看一些很酷的东西吗


251
00:12:14,401 --> 00:12:17,638 line:-2
他们打断了我 从我手上
拿走iPad 然后开始看它


252
00:12:18,005 --> 00:12:20,240 line:-1
倾转iPad看它在屏幕上四处移动


253
00:12:20,307 --> 00:12:21,575 line:-1
他们觉得有意思


254
00:12:21,742 --> 00:12:23,810 line:-1
他们说“这很棒 爸爸 这非常棒


255
00:12:25,913 --> 00:12:26,847 line:-1
但好像缺点东西


256
00:12:27,581 --> 00:12:29,683 line:-1
你看屏幕上并没有足够多的大理石


257
00:12:30,184 --> 00:12:32,986 line:-2
我们需要更多大理石
许多许多大理石”


258
00:12:34,388 --> 00:12:36,356 line:-1
他们有做项目管理的天赋 好吧


259
00:12:38,892 --> 00:12:41,028 line:-1
这和我的最终目标没有任何关系


260
00:12:41,495 --> 00:12:42,696 line:-1
但那听起来确实很酷


261
00:12:42,763 --> 00:12:43,797 line:-1
我们应该有更多的大理石


262
00:12:43,864 --> 00:12:46,466 line:-2
因此我增加了轻触 只是为了识别她
和他们坐在一起


263
00:12:46,533 --> 00:12:47,367 line:-1
我们一起实现了这个功能


264
00:12:47,434 --> 00:12:49,269 line:-1
每次你在屏幕上轻触时


265
00:12:49,336 --> 00:12:52,406 line:-2
我们都向场景中插入一个
新SpriteKit节点


266
00:12:52,472 --> 00:12:54,241 line:-1
并把它添加到物理引擎中


267
00:12:54,308 --> 00:12:56,944 line:-2
从而它可以加入这里正在进行的
有意思的比赛


268
00:12:57,211 --> 00:12:58,612 line:-1
通常是这样的


269
00:12:59,313 --> 00:13:01,882 line:-2
孩子的年龄越小
他们的轻触就越猛烈


270
00:13:01,949 --> 00:13:03,684 line:-1
从而尝试尽快把屏幕填满


271
00:13:03,750 --> 00:13:05,752 line:-2
并且他们想看看它是否会崩溃
它没有崩溃


272
00:13:05,986 --> 00:13:08,889 line:-2
然后他们就会把这东西弄走
然后各种摇晃


273
00:13:08,956 --> 00:13:12,893 line:-2
我不说谎
我真的觉得这非常有吸引力


274
00:13:12,960 --> 00:13:14,228 line:-1
我可以看一下全部…


275
00:13:19,466 --> 00:13:20,367 line:-1
我稍后再做


276
00:13:27,107 --> 00:13:28,909 line:-1
我建议你们也这样做 很放松


277
00:13:29,243 --> 00:13:31,512 line:-2
那么无论如何
我们现在有SpriteKit了


278
00:13:31,678 --> 00:13:34,448 line:-1
它正在执行某些操作以响应加速度计


279
00:13:34,715 --> 00:13:37,050 line:-2
这些操作就是倾转iPad
已经很接近了


280
00:13:37,117 --> 00:13:39,453 line:-1
我们了解了一些这个游戏的运作方式


281
00:13:39,520 --> 00:13:40,754 line:-1
并且它会变得越来越刺激


282
00:13:41,421 --> 00:13:44,958 line:-2
但现在我需要了解如何实现
这个程序性的洞的生成


283
00:13:45,025 --> 00:13:48,295 line:-1
请记住 这是一个分布着洞的路线


284
00:13:48,362 --> 00:13:50,364 line:-1
大理石应该穿过路线并绕过洞口


285
00:13:50,697 --> 00:13:54,001 line:-2
我们很可能希望记住
我们放置洞口的位置


286
00:13:54,067 --> 00:13:57,271 line:-2
因此如果用户恰好由于某些原因
向后滚动


287
00:13:57,538 --> 00:13:59,540 line:-2
他们可以重新路过
他们之前见到过的洞口


288
00:14:00,474 --> 00:14:03,043 line:-1
让我们继续看一个试验


289
00:14:03,610 --> 00:14:05,112 line:-1
当创建这个页面时


290
00:14:05,179 --> 00:14:07,848 line:-1
我决定进入我的游戏模型模块


291
00:14:10,484 --> 00:14:12,553 line:-1
并创建MapStruct


292
00:14:12,619 --> 00:14:15,889 line:-1
这个类型的目标是


293
00:14:16,156 --> 00:14:18,258 line:-1
随着你穿过路线


294
00:14:18,525 --> 00:14:20,260 line:-1
计算并记住洞的位置


295
00:14:20,327 --> 00:14:23,397 line:-1
它其实是把地图分成了几个栏


296
00:14:23,463 --> 00:14:24,932 line:-1
然后再把洞口安置在栏里边


297
00:14:25,165 --> 00:14:25,999 line:-1
非常简单


298
00:14:26,233 --> 00:14:27,501 line:-1
如果我想


299
00:14:27,568 --> 00:14:29,636 line:-1
我可以用一些更复杂的东西来交换它


300
00:14:29,803 --> 00:14:31,004 line:-1
额 它现在能用


301
00:14:32,072 --> 00:14:33,974 line:-1
同时在游戏引擎模块中


302
00:14:34,241 --> 00:14:37,578 line:-2
我创建了一个MapNode
它接受一个地图


303
00:14:37,845 --> 00:14:42,082 line:-2
并了解如何沿着路线在不同的点上
布局洞口节点


304
00:14:42,149 --> 00:14:44,017 line:-1
你所要做的就是给它传递一个长方形


305
00:14:44,251 --> 00:14:46,386 line:-1
代表摄像头所在位置


306
00:14:46,587 --> 00:14:49,189 line:-1
和用户所看到的视区的长方形


307
00:14:49,389 --> 00:14:50,524 line:-1
一旦你这样做了


308
00:14:50,824 --> 00:14:54,294 line:-2
它就会渲染那个点中的洞口
如果必要的话就重复使用节点


309
00:14:54,361 --> 00:14:56,363 line:-1
它有点像UI表视图之类的东西


310
00:14:56,997 --> 00:14:59,399 line:-2
让我运行这里的代码
看看这是如何运作的


311
00:14:59,967 --> 00:15:02,002 line:-1
右手边有一些内联结果


312
00:15:02,069 --> 00:15:04,538 line:-1
我要轻触以浏览预览


313
00:15:04,605 --> 00:15:06,974 line:-2
我在MathNode上
自己编写了这个预览方法


314
00:15:07,040 --> 00:15:10,744 line:-1
因为我想生成SKView


315
00:15:10,811 --> 00:15:13,981 line:-2
UIView子类显示
SpriteKit场景


316
00:15:14,047 --> 00:15:15,382 line:-1
我想生成它并把它放在这里


317
00:15:15,449 --> 00:15:17,618 line:-1
从而它只显示为静态内联结果


318
00:15:17,784 --> 00:15:19,786 line:-2
我不需要创建任何额外的东西
来显示它


319
00:15:19,853 --> 00:15:21,688 line:-1
它就在那儿 已经准备好了


320
00:15:21,989 --> 00:15:25,325 line:-2
现在我们看到
如果整个直径的宽度为20点


321
00:15:25,759 --> 00:15:28,529 line:-2
并且我们正处于路线中的这个点上
这是你将得到的地图密度


322
00:15:29,129 --> 00:15:31,598 line:-1
我可以按我的意愿试验这个密度


323
00:15:31,899 --> 00:15:34,968 line:-2
并调整这里的值
进入其它文件并调整那些值


324
00:15:35,135 --> 00:15:38,238 line:-2
内联结果为我提供了我在这个点上
所需要的这个反馈


325
00:15:40,107 --> 00:15:40,941 line:-1
现在我已经准备好了


326
00:15:41,008 --> 00:15:44,011 line:-1
让我们再往进一步 跳到最后一步


327
00:15:45,078 --> 00:15:46,079 line:-1
我们可以看到这个游戏


328
00:15:46,280 --> 00:15:49,750 line:-2
在我开始之前
我必须再次关掉内联结果


329
00:15:49,816 --> 00:15:52,252 line:-2
和之前一样
我们在每一帧上都做大量的工作


330
00:15:52,319 --> 00:15:55,489 line:-2
我们不需要记录表达式
我们不想减慢我们的进度


331
00:15:56,190 --> 00:15:59,126 line:-2
我要轻触“运行我的代码”
就在那儿


332
00:15:59,526 --> 00:16:02,329 line:-2
我们有个看起来像是大理石一样的
东西


333
00:16:02,396 --> 00:16:06,033 line:-2
在看起来像是墙壁一样的东西的顶部
有视差


334
00:16:06,099 --> 00:16:07,367 line:-1
看起来就像这样 很漂亮


335
00:16:07,801 --> 00:16:09,536 line:-1
当我在实现这个想法时


336
00:16:09,603 --> 00:16:12,806 line:-1
Joy提醒我说我可以从模板中


337
00:16:12,873 --> 00:16:14,575 line:-1
取出大量纹理


338
00:16:14,641 --> 00:16:16,844 line:-1
你可以直接从app中下载


339
00:16:16,910 --> 00:16:18,579 line:-2
你知道的
取出那些资源并充分利用它们


340
00:16:18,946 --> 00:16:20,747 line:-1
因此我拉出传感器


341
00:16:21,248 --> 00:16:22,449 line:-1
使用资产选择器创建模板


342
00:16:22,749 --> 00:16:25,018 line:-2
取出其中一些纹理
并把它释放到我的app中


343
00:16:25,085 --> 00:16:25,919 line:-1
它们在这里


344
00:16:26,119 --> 00:16:28,388 line:-1
我甚至还查看了…


345
00:16:28,589 --> 00:16:30,457 line:-1
一个图像编辑app以查找…


346
00:16:30,524 --> 00:16:33,360 line:-1
做一些看起来模糊的洞口形状的东西


347
00:16:33,427 --> 00:16:34,394 line:-1
哦 没关系


348
00:16:35,128 --> 00:16:36,897 line:-1
径向渐变看起来很不错


349
00:16:36,964 --> 00:16:37,798 line:-1
很酷


350
00:16:38,065 --> 00:16:40,467 line:-2
在这里 让我轻触屏幕中央
让它变成全屏


351
00:16:40,534 --> 00:16:43,737 line:-1
通过把中心点一直拖动到左边实现


352
00:16:44,338 --> 00:16:45,272 line:-1
我要再试一下这个


353
00:16:45,472 --> 00:16:47,508 line:-1
我添加了轻触识别器 如果游戏结束


354
00:16:48,175 --> 00:16:49,309 line:-1
可以重新开始


355
00:16:49,376 --> 00:16:50,878 line:-1
让我们看看我目前进度怎么样


356
00:16:51,211 --> 00:16:52,579 line:-1
你的速度越快


357
00:16:53,213 --> 00:16:55,449 line:-1
分数增加的也越快


358
00:16:55,516 --> 00:16:58,151 line:-1
给这里的乐趣增加了一些鲁莽的因素


359
00:16:58,218 --> 00:16:59,152 line:-1
哇哦 好的


360
00:17:01,121 --> 00:17:03,824 line:-2
在这么多人面前实现这个想法
很困难


361
00:17:04,391 --> 00:17:05,325 line:-1
但 嘿 你知道吗


362
00:17:05,559 --> 00:17:07,027 line:-1
你在这里所看到的一切


363
00:17:07,094 --> 00:17:11,798 line:-2
到达这一点的每一个步骤都完全是在
这台iPad上实现的


364
00:17:12,199 --> 00:17:13,300 line:-1
这非常有意思


365
00:17:13,500 --> 00:17:15,301 line:-1
我的家人玩这个玩得很好


366
00:17:15,736 --> 00:17:17,104 line:-1
我更加了解了SpriteKit


367
00:17:17,271 --> 00:17:19,406 line:-1
我有机会在app中使用新用户模块


368
00:17:19,473 --> 00:17:21,008 line:-1
和源文件支持


369
00:17:21,074 --> 00:17:23,676 line:-2
从而把我要实现的东西
分成不同的步骤实现


370
00:17:23,877 --> 00:17:25,212 line:-1
这是非常奇妙的体验


371
00:17:25,811 --> 00:17:27,079 line:-2
iPad上的
Swift Playgrounds


372
00:17:27,146 --> 00:17:29,816 line:-2
是一个非常好用的暂存器
用于尝试实现你的想法


373
00:17:30,350 --> 00:17:33,654 line:-2
也许甚至了解并使用我们的API
从而了解它们是如何运作的


374
00:17:34,254 --> 00:17:36,190 line:-1
或甚至是增加你生活中的压力


375
00:17:36,256 --> 00:17:38,392 line:-2
通过创建速度运行游戏
并和你的朋友们一起玩


376
00:17:39,459 --> 00:17:42,529 line:-1
现在我要邀请Grace返回舞台


377
00:17:42,596 --> 00:17:44,698 line:-1
她会讲这是如何运作的


378
00:17:44,765 --> 00:17:47,768 line:-1
并深入地讲如何使用这些新功能


379
00:17:47,835 --> 00:17:50,237 line:-2
来充分利用
Swift Playgrounds 3


380
00:17:50,604 --> 00:17:51,471 line:-1
谢谢


381
00:17:59,780 --> 00:18:00,747 line:-1
谢谢Jonathan


382
00:18:02,216 --> 00:18:04,685 line:-2
如果你已经熟悉
Swift Playgrounds了


383
00:18:04,751 --> 00:18:07,855 line:-2
你可能已经在Jonathan
的演示中注意到了一些新功能


384
00:18:08,155 --> 00:18:09,356 line:-1
现在让我们看一下那些新功能


385
00:18:11,325 --> 00:18:14,127 line:-1
最显著的是模块的添加


386
00:18:14,194 --> 00:18:17,564 line:-2
可以让你把你的代码分成多个
Swift文件


387
00:18:19,066 --> 00:18:21,768 line:-1
模块表示为Swift代码目录


388
00:18:21,835 --> 00:18:24,171 line:-1
可以在书中的任意页面使用


389
00:18:24,438 --> 00:18:28,141 line:-2
你不需要担心设置目标
或开发新创建设置


390
00:18:30,143 --> 00:18:34,114 line:-2
用户可以向书中添加模块
并向任意模块中添加Swift文件


391
00:18:35,382 --> 00:18:37,651 line:-1
然而请注意 如果你重设了文档


392
00:18:37,985 --> 00:18:40,187 line:-1
那么所有用户编辑也会被重设


393
00:18:40,354 --> 00:18:43,557 line:-1
这确实包含所添加的任意文件或模块


394
00:18:46,493 --> 00:18:49,329 line:-1
所以通过所有这些新文件


395
00:18:49,630 --> 00:18:51,865 line:-2
我们可以了解一下
Playground的结构


396
00:18:52,366 --> 00:18:54,668 line:-1
我要使用“形状”模板作为例子


397
00:18:56,670 --> 00:18:58,739 line:-1
每本书都有许多页


398
00:18:59,940 --> 00:19:02,843 line:-1
每本书还可以有多个模块


399
00:19:04,478 --> 00:19:08,048 line:-2
这些模块中的每一个也都可以
有多个源文件


400
00:19:09,850 --> 00:19:12,619 line:-1
让我快速讲一下


401
00:19:12,686 --> 00:19:14,922 line:-2
这些不同的Swift
文件之间的访问级


402
00:19:16,990 --> 00:19:20,661 line:-2
每本书内一张页面上的代码
不与其它页面共享


403
00:19:21,094 --> 00:19:23,564 line:-1
也就是说“画布”页面上的代码


404
00:19:23,630 --> 00:19:26,333 line:-1
与“创建”页面上的代码不共享


405
00:19:27,568 --> 00:19:31,905 line:-2
然而每个模块都自动导入到
每个页面中


406
00:19:32,339 --> 00:19:36,009 line:-2
这意味着每个页面上都能访问
你模块中的代码


407
00:19:36,076 --> 00:19:38,178 line:-1
只要那个代码被标记为公共代码即可


408
00:19:41,048 --> 00:19:43,917 line:-1
同一个模块中的文件可以相互访问


409
00:19:43,984 --> 00:19:45,986 line:-1
而不需要把代码标记为公共代码


410
00:19:46,453 --> 00:19:48,522 line:-1
然而如果代码被标记为私有代码


411
00:19:48,589 --> 00:19:52,726 line:-2
它将对其它模块或页面中的其它文件
不可见


412
00:19:52,893 --> 00:19:54,461 line:-1
它仅为那个文件所私有


413
00:19:57,297 --> 00:20:00,300 line:-1
默认情况下 模块之间的代码不共享


414
00:20:01,101 --> 00:20:04,471 line:-1
但假如我在“图形”模块有一些代码


415
00:20:04,538 --> 00:20:07,241 line:-2
我想在我的
Calculus.swift文件中引用


416
00:20:07,307 --> 00:20:08,809 line:-1
那个文件在我的“数学”模块中


417
00:20:09,610 --> 00:20:12,846 line:-2
我所要做的就是确保“图形”代码
被标记为公共代码


418
00:20:13,213 --> 00:20:16,950 line:-2
然后把“图形”模块导入到我的
Calculus.swift文件中


419
00:20:19,953 --> 00:20:24,291 line:-2
通过模块 你仍然可以访问内联结果
和分步执行


420
00:20:24,591 --> 00:20:28,195 line:-2
因此你可以观察代码在全部文件中
所采取的路径


421
00:20:28,896 --> 00:20:30,497 line:-1
当app分步执行代码时


422
00:20:30,564 --> 00:20:34,168 line:-1
它会自动切换正在执行代码的文件


423
00:20:36,403 --> 00:20:38,238 line:-1
你还可以关掉内联结果


424
00:20:38,305 --> 00:20:41,275 line:-2
那会加速执行速度 我们已经在
Jonathan的演示中看到了


425
00:20:42,109 --> 00:20:45,212 line:-2
你可以从“执行控制菜单”
找到这个控制


426
00:20:45,279 --> 00:20:47,881 line:-2
以及“分步执行我的代码”
和“缓慢分步执行”


427
00:20:50,884 --> 00:20:54,688 line:-2
新的“问题”弹出框可在一个文档中
给你显示所有文件中的错误


428
00:20:54,755 --> 00:20:57,724 line:-2
并可以让你轻松地
在这些错误之间导航


429
00:20:59,393 --> 00:21:01,061 line:-1
如果你轻触任何一个错误


430
00:21:01,261 --> 00:21:03,530 line:-1
它会把你带到相应的代码行


431
00:21:03,897 --> 00:21:07,100 line:-1
既包含创建错误 又包含运行时错误


432
00:21:09,970 --> 00:21:14,408 line:-2
Swift Playgrounds支持Swift 5
和iOS 12.2 SDK


433
00:21:15,008 --> 00:21:18,846 line:-2
这可以让你使用这样的框架
比如Core ML 2和ARKit 2


434
00:21:19,146 --> 00:21:22,482 line:-1
直接在iOS上做iOS开发


435
00:21:24,518 --> 00:21:26,987 line:-2
一切都来自一个空白的
Playground


436
00:21:27,821 --> 00:21:30,757 line:-1
你可以通过“目录”弹出框添加页面


437
00:21:32,259 --> 00:21:33,193 line:-1
添加模型


438
00:21:34,194 --> 00:21:37,164 line:-1
并向那些模块中添加源代码文件


439
00:21:37,231 --> 00:21:39,166 line:-1
而不需要离开app


440
00:21:41,935 --> 00:21:44,905 line:-1
还有许多自定义你的内容的方式


441
00:21:45,372 --> 00:21:49,009 line:-2
比如设置模块模式、
添加可本地化的代码注释


442
00:21:49,076 --> 00:21:52,379 line:-2
并当用户打开你的文档时
修改用户所能看到的文件


443
00:21:52,980 --> 00:21:55,616 line:-1
接下来我想邀请我的同事Joy上台


444
00:21:55,682 --> 00:21:56,550 line:-1
为大家讲如何实现


445
00:22:01,788 --> 00:22:02,656 line:-1
谢谢Grace


446
00:22:06,260 --> 00:22:08,195 line:-1
接下来让我们讲一下作者们


447
00:22:08,262 --> 00:22:10,197 line:-2
可以在Xcode中
进行自定义的新功能


448
00:22:10,564 --> 00:22:12,266 line:-2
无论你是直接共享
你的Playground


449
00:22:12,332 --> 00:22:13,800 line:-1
或是通过订阅实现


450
00:22:15,335 --> 00:22:18,605 line:-2
当我在教学时
重点是我给学生们所提供的工具


451
00:22:18,672 --> 00:22:22,109 line:-1
要选择恰当并尽可能具有用户友好性


452
00:22:23,544 --> 00:22:26,713 line:-2
为了给拥有不同知识储备的你们
创建合适的工具


453
00:22:26,880 --> 00:22:30,717 line:-2
在Swift Playgrounds 3中
有一些功能


454
00:22:31,151 --> 00:22:33,353 line:-2
你可以用于突显你的
Playground中最重要的部分


455
00:22:33,687 --> 00:22:35,789 line:-1
并移除不必要的复杂的东西


456
00:22:36,523 --> 00:22:39,660 line:-2
这些新功能可以帮助你们创建
更吸引人的内容


457
00:22:40,060 --> 00:22:42,196 line:-1
并为初学者在实际的开发工具中


458
00:22:42,262 --> 00:22:43,597 line:-1
提供一种非常友好的体验


459
00:22:45,332 --> 00:22:47,134 line:-1
首先让我们看一下模块模式


460
00:22:47,367 --> 00:22:49,670 line:-2
你已经听到许多关于app中的
模块模式了


461
00:22:50,003 --> 00:22:51,538 line:-2
Jonathan和Grace
都提到过


462
00:22:52,239 --> 00:22:56,109 line:-2
作为作者 你可以决定哪个模块模式
适合你的书


463
00:22:57,010 --> 00:22:59,413 line:-1
因为所有模块都是一个新功能


464
00:22:59,713 --> 00:23:01,982 line:-1
并不是所有的书都受益于模块的使用


465
00:23:02,482 --> 00:23:05,118 line:-1
为此 我们有三种模块模式


466
00:23:05,619 --> 00:23:07,154 line:-1
分别是无、受限和全部


467
00:23:07,621 --> 00:23:08,822 line:-1
你所选择的模块模式


468
00:23:08,889 --> 00:23:11,158 line:-1
将从根本上改变你的书的性质


469
00:23:11,592 --> 00:23:14,561 line:-1
应该被视为用户体验的基础


470
00:23:15,996 --> 00:23:18,065 line:-1
让我们先看一下“无”模块模式


471
00:23:20,000 --> 00:23:23,403 line:-2
这种模式为学生们提供了一种
原始Playground体验


472
00:23:23,770 --> 00:23:26,206 line:-1
不允许访问用户模块


473
00:23:26,874 --> 00:23:29,610 line:-1
这种模式完全依赖于页面和章节


474
00:23:29,676 --> 00:23:31,011 line:-1
用代码推进故事


475
00:23:31,545 --> 00:23:34,014 line:-1
每个页面都完全独立


476
00:23:34,181 --> 00:23:36,984 line:-2
因此在页面之间不会以任何方式
共享用户代码


477
00:23:39,319 --> 00:23:40,621 line:-1
在“无”模块模式中


478
00:23:40,854 --> 00:23:43,590 line:-2
你书中的所有代码都将进入
模块文件夹


479
00:23:44,558 --> 00:23:46,393 line:-1
这将创建私有模块


480
00:23:46,560 --> 00:23:48,629 line:-2
并在Playground
书中引用它


481
00:23:48,996 --> 00:23:50,731 line:-1
而你的学生们不能编辑它


482
00:23:51,598 --> 00:23:54,067 line:-2
你可以在三种模式的任意一种模式中
使用私有模块


483
00:23:54,368 --> 00:23:56,336 line:-1
然而“无”模块模式的区别在于


484
00:23:56,637 --> 00:23:59,339 line:-1
你的全部代码都将进入私有模块


485
00:24:01,375 --> 00:24:02,476 line:-1
在你创建书时


486
00:24:02,643 --> 00:24:06,680 line:-2
请记住对页面和章节的体验
应该是线性体验


487
00:24:07,347 --> 00:24:10,684 line:-2
作为作者 你应该考虑
每一个页面的目标


488
00:24:11,051 --> 00:24:15,289 line:-2
并让每个页面都实现一些你能实现的
新功能或在能实时视图中看到它们


489
00:24:16,156 --> 00:24:18,292 line:-2
这将为学习者提供一个紧密的
反馈循环


490
00:24:18,525 --> 00:24:20,761 line:-1
确保他们了解他们已经完成了任务


491
00:24:21,228 --> 00:24:22,396 line:-1
他们已经准备好继续了


492
00:24:24,264 --> 00:24:27,334 line:-2
要浏览这本模块模式书的
模块模式的示例库


493
00:24:27,534 --> 00:24:30,838 line:-2
请查看
Learn to Code 1、


494
00:24:31,138 --> 00:24:35,042 line:-2
Learn to Code 2、Lights、
Camera、Code和各种挑战


495
00:24:37,611 --> 00:24:41,582 line:-2
“受限”模式是你初次涉足用户模块
和共享文件的模式


496
00:24:42,282 --> 00:24:44,651 line:-1
“受限”模式只限于单一用户模块


497
00:24:44,985 --> 00:24:50,023 line:-2
与私有模块不同
你的学生们完全可以编辑用户模块


498
00:24:52,192 --> 00:24:55,229 line:-2
用户模块中共享的文件
在整本书中都可用


499
00:24:55,495 --> 00:24:57,531 line:-2
并且随着时间的推移
共享文件可以用来构建代码


500
00:24:58,498 --> 00:25:00,133 line:-1
访问单一模块


501
00:25:00,434 --> 00:25:02,970 line:-1
你的学生们可以学习如何管理


502
00:25:03,570 --> 00:25:06,840 line:-2
来自他们不一定打开过的文件中的
多个文件和错误


503
00:25:08,775 --> 00:25:10,010 line:-1
在你的一个模块内


504
00:25:10,277 --> 00:25:12,713 line:-2
你可以想提供多少共享文件
就提供多少共享文件


505
00:25:13,380 --> 00:25:15,749 line:-2
你的学生们可以在他们的用户模块内
编辑、创建或删除


506
00:25:16,016 --> 00:25:18,318 line:-1
任意共享文件


507
00:25:20,287 --> 00:25:22,890 line:-1
作为作者 你还可以使用私有模块


508
00:25:24,024 --> 00:25:27,194 line:-1
在模块目录中


509
00:25:27,361 --> 00:25:28,629 line:-1
包含你不想让学生们编辑的API


510
00:25:30,330 --> 00:25:31,932 line:-2
正如你在Jonathan的演示中
所看到的那样


511
00:25:32,232 --> 00:25:35,869 line:-2
他向单一Math.swift
文件中添加了一些数学函数


512
00:25:36,803 --> 00:25:39,873 line:-1
添加新的共享文件是学习的好机会


513
00:25:39,940 --> 00:25:42,543 line:-2
学习如何教学生们
如何以逻辑方式管理代码


514
00:25:43,544 --> 00:25:44,611 line:-1
你可以教你的学生们


515
00:25:44,678 --> 00:25:48,248 line:-2
把代码移动到一个共享文件中
他们会在多个页面上建立起来


516
00:25:48,882 --> 00:25:51,218 line:-1
或移到不经常更改的代码旁边


517
00:25:52,853 --> 00:25:55,923 line:-1
要浏览受限模式书的示例库


518
00:25:55,989 --> 00:25:58,659 line:-2
你可以查看Blu's Adventure、
Assemble Your Camera


519
00:25:59,092 --> 00:26:01,428 line:-2
Flashy Photos
和各种挑战


520
00:26:01,495 --> 00:26:02,829 line:-1
你在这里看到了其中一些挑战


521
00:26:04,998 --> 00:26:06,900 line:-1
如果你想要全部附加功能


522
00:26:06,967 --> 00:26:08,535 line:-1
你可以用“全部”模块模式


523
00:26:09,269 --> 00:26:11,405 line:-1
这个模式为你提供全部可用的工具


524
00:26:11,672 --> 00:26:15,909 line:-2
包括创建多个模块以及在这些模块内
创建新文件


525
00:26:17,678 --> 00:26:21,114 line:-1
这个模块适合教代码架构和管理


526
00:26:21,648 --> 00:26:22,950 line:-1
在“全部”模块模式中


527
00:26:23,417 --> 00:26:25,986 line:-1
你不仅可以教如何管理多个文件


528
00:26:26,153 --> 00:26:27,287 line:-1
还可以教如何管理多个模块


529
00:26:27,654 --> 00:26:30,591 line:-2
以及如何把模块导入到其它模块中
如果必要的话


530
00:26:32,759 --> 00:26:35,729 line:-2
在“全部”模块模式
你仍可以使用私有模块


531
00:26:35,929 --> 00:26:38,665 line:-2
并可以拥有许多预创建的用户模块
你想要有多少就有多少


532
00:26:39,766 --> 00:26:42,936 line:-2
“全部”模块模式也为学生们提供了
一定的自由度


533
00:26:43,003 --> 00:26:47,040 line:-2
他们可以扩展那些用户模块
并创建他们自己的用户模块


534
00:26:48,342 --> 00:26:49,877 line:-1
当你创建模块时


535
00:26:50,043 --> 00:26:52,646 line:-1
你应该考虑何时想要使用私有模块


536
00:26:53,180 --> 00:26:54,214 line:-1
以及何时使用用户模块


537
00:26:55,816 --> 00:26:58,285 line:-1
通过把全部代码放到用户模块中


538
00:26:58,519 --> 00:27:01,788 line:-2
你的学生们可以轻松地在你的
Playground中四处浏览


539
00:27:02,222 --> 00:27:03,557 line:-1
从而了解它是如何创建的


540
00:27:04,258 --> 00:27:07,661 line:-2
这还可以让他们完全控制修补工具
和混合工具


541
00:27:08,195 --> 00:27:10,464 line:-2
可以让你的学生们超越
作为学生的身份


542
00:27:11,665 --> 00:27:14,601 line:-1
更加靠近他们的目标


543
00:27:14,668 --> 00:27:16,770 line:-1
即成为一名app开发人员


544
00:27:18,839 --> 00:27:21,742 line:-1
要浏览“全部”模块模式书的示例库


545
00:27:21,975 --> 00:27:23,644 line:-1
请查看任意起点


546
00:27:24,978 --> 00:27:28,248 line:-2
要指明你想让你的书归入哪个
模块模式


547
00:27:28,448 --> 00:27:32,519 line:-2
你必须在书一级的清单中编辑
UserModuleMode密钥


548
00:27:34,922 --> 00:27:36,990 line:-1
你可以实现的另一个自定义是


549
00:27:37,057 --> 00:27:40,127 line:-2
当在“受限”和“全部”模式下
使用模块时


550
00:27:40,494 --> 00:27:44,798 line:-2
会按页面自动打开并激活
页面上的文件


551
00:27:46,633 --> 00:27:50,404 line:-2
你可以在选项卡式编辑器中
暴露多个文件


552
00:27:50,871 --> 00:27:53,240 line:-1
你可以指明要打开哪个文件


553
00:27:53,507 --> 00:27:56,176 line:-1
以及当你到达页面时要激活哪个文件


554
00:27:58,178 --> 00:28:01,782 line:-2
要添加开放文件意味着
main.swift将作为激活文件


555
00:28:02,015 --> 00:28:04,818 line:-2
但编辑器中可能有其它文件
作为选项卡打开了


556
00:28:05,786 --> 00:28:09,022 line:-2
当用户到达页面时
为他们提供打开的共享文件


557
00:28:09,223 --> 00:28:11,425 line:-2
可以帮助他们了解他们要编辑
哪个文件


558
00:28:11,792 --> 00:28:12,893 line:-1
或需要引用哪个文件


559
00:28:13,126 --> 00:28:16,697 line:-2
而他们不需要自己在文件弹出框中
定位那些文件


560
00:28:19,032 --> 00:28:22,569 line:-1
你可以在页面级的清单中


561
00:28:23,170 --> 00:28:24,705 line:-1
按页面指定所打开的文件


562
00:28:26,340 --> 00:28:27,374 line:-1
在清单中


563
00:28:27,441 --> 00:28:30,477 line:-2
使用UserModuleSourceFilesToOpen
密钥


564
00:28:31,678 --> 00:28:33,647 line:-1
接着是共享文件的数组


565
00:28:34,314 --> 00:28:37,618 line:-2
每一项的值都应该是所共享的
文件的相对路径


566
00:28:40,187 --> 00:28:42,256 line:-1
在任何情况下 你有开放文件时


567
00:28:42,422 --> 00:28:44,558 line:-1
默认动作是main.swift


568
00:28:44,892 --> 00:28:47,361 line:-1
为最前面的文件或激活文件


569
00:28:48,695 --> 00:28:50,397 line:-1
然而如果其中一个共享文件


570
00:28:50,464 --> 00:28:52,432 line:-1
是你的用户要处理的


571
00:28:52,499 --> 00:28:53,834 line:-1
第一个或最主要的文件


572
00:28:54,201 --> 00:28:57,337 line:-2
当用户到达这个页面时
你可以把这个文件设置为激活文件


573
00:28:59,072 --> 00:29:01,041 line:-1
要声明共享文件为激活文件


574
00:29:01,408 --> 00:29:06,680 line:-2
要在页面级的清单中再次使用
UserModuleSourceFileToActivate密钥


575
00:29:07,414 --> 00:29:10,417 line:-2
这个密钥的值是
到单一共享文件的路径


576
00:29:12,886 --> 00:29:16,323 line:-1
你总是会在主文件中执行代码完成


577
00:29:16,890 --> 00:29:18,625 line:-1
在Swift Playgrounds 3中


578
00:29:18,825 --> 00:29:22,029 line:-2
让我们看一下如何对共享文件
扩展了代码完成


579
00:29:24,431 --> 00:29:28,435 line:-2
代码完成指令决定了
在快捷方式栏中所暴露的API


580
00:29:29,203 --> 00:29:32,472 line:-2
快捷方式栏是一个很有帮助的工具
可以追踪学习者


581
00:29:32,940 --> 00:29:34,575 line:-1
最小化他们必须键入的时间


582
00:29:34,842 --> 00:29:36,777 line:-1
并确保他们总是知道下一步要做什么


583
00:29:37,744 --> 00:29:39,046 line:-1
在介绍性内容中


584
00:29:39,246 --> 00:29:40,948 line:-1
你想减少录入的障碍


585
00:29:41,114 --> 00:29:43,884 line:-2
通过让学生们
轻触他们的大部分代码实现


586
00:29:44,518 --> 00:29:45,853 line:-1
在更高级的内容中


587
00:29:46,053 --> 00:29:48,422 line:-1
你想在何时的时候暴露API


588
00:29:49,857 --> 00:29:53,427 line:-2
作为作者 你可以按页面控制在
主文件和共享文件中的


589
00:29:53,493 --> 00:29:57,497 line:-1
快捷方式栏中显示哪些API


590
00:29:59,600 --> 00:30:01,535 line:-1
为了管理这些完成


591
00:30:01,602 --> 00:30:04,071 line:-2
Swift Playgrounds
提供了两个地方


592
00:30:04,304 --> 00:30:06,507 line:-2
你可以在这两个地方提供
代码完成指令


593
00:30:07,774 --> 00:30:11,378 line:-2
先看一下你可能熟悉的一个地方
即在main.swift文件中


594
00:30:14,014 --> 00:30:16,116 line:-2
如果你在新内容中没有任何
代码完成指令


595
00:30:16,483 --> 00:30:18,685 line:-1
这就是你首先会看到的内容


596
00:30:18,919 --> 00:30:20,888 line:-1
Assemble Your Camera


597
00:30:22,322 --> 00:30:25,425 line:-2
为了确保你可以完全控制
在快捷方式栏中显示什么


598
00:30:25,959 --> 00:30:28,395 line:-2
你可以先从这个指令开始
everything hide


599
00:30:29,029 --> 00:30:30,063 line:-1
正如它的名字所暗示的那样


600
00:30:30,130 --> 00:30:32,366 line:-1
这会隐藏快捷方式栏中的一切


601
00:30:32,566 --> 00:30:34,334 line:-1
这会为你提供一个白板


602
00:30:36,170 --> 00:30:39,173 line:-1
要把创建建议放回到快捷方式栏中


603
00:30:39,239 --> 00:30:40,908 line:-2
你可以使用
currentmodule show


604
00:30:41,341 --> 00:30:43,911 line:-1
这是一个特殊关键字


605
00:30:44,144 --> 00:30:48,015 line:-2
用于确保在主文件中显示
你或你的学生们所创建的一切


606
00:30:50,350 --> 00:30:51,752 line:-1
指令模块后面


607
00:30:52,085 --> 00:30:54,188 line:-1
是一个用逗号分隔的模块列表


608
00:30:54,454 --> 00:30:58,025 line:-2
那会显示用户模块文件中
一切被标记为公共的内容


609
00:30:58,425 --> 00:31:01,595 line:-2
以及用户在使用Playground时
所编写的任何新代码


610
00:31:02,829 --> 00:31:04,631 line:-2
这与你用来暴露库
比如UIKit的


611
00:31:04,698 --> 00:31:06,667 line:-1
指令是同一个指令


612
00:31:07,634 --> 00:31:09,670 line:-1
要获取关于各种指令的更多信息


613
00:31:09,736 --> 00:31:12,206 line:-2
请查看
Swift Playgrounds文档


614
00:31:14,775 --> 00:31:16,810 line:-2
在Swift Playgrounds 3中
新添加的功能是


615
00:31:17,177 --> 00:31:20,214 line:-1
如何在页面级清单中向共享文件中


616
00:31:21,215 --> 00:31:22,716 line:-1
添加代码完成指令


617
00:31:23,851 --> 00:31:26,019 line:-1
这意味着就像


618
00:31:26,086 --> 00:31:28,355 line:-1
当学生们翻阅你的书时


619
00:31:28,422 --> 00:31:29,890 line:-2
你如何指定在主文件中
暴露哪个API一样


620
00:31:30,457 --> 00:31:32,392 line:-2
你也可以在共享文件中
实现同样的操作


621
00:31:32,826 --> 00:31:35,863 line:-2
确保你不会让学习者们
在旅程开始时负担过重


622
00:31:38,065 --> 00:31:39,900 line:-1
为此你可以使用密钥


623
00:31:40,167 --> 00:31:42,469 line:-2
UserModule
CodeCompletionDirectives


624
00:31:43,036 --> 00:31:45,405 line:-1
然后是代码完成指令的一个数组


625
00:31:45,472 --> 00:31:48,008 line:-1
类似于你在主文件中的操作一样


626
00:31:50,110 --> 00:31:51,812 line:-2
如果使用
everything hide


627
00:31:51,879 --> 00:31:54,648 line:-2
你将可以使用currentmodule show
和module show


628
00:31:55,215 --> 00:31:58,051 line:-2
在主文件和共享文件中显示
所创建的一切内容


629
00:31:59,620 --> 00:32:03,757 line:-2
此外你还可以添加关键字作为标识符
比如公共和私有


630
00:32:04,157 --> 00:32:05,392 line:-1
从而当学生们开始在共享文件中


631
00:32:05,459 --> 00:32:08,896 line:-2
学习新函数、新类和新结构时
把这些呈现给它们


632
00:32:11,732 --> 00:32:14,368 line:-2
接下来让我们谈谈在Swift中
制作过场动画


633
00:32:16,603 --> 00:32:18,805 line:-2
Swift Playgrounds
书库中的一些书


634
00:32:19,006 --> 00:32:24,011 line:-2
使用过场动画来介绍新技术、
吸引用户或总结概念


635
00:32:25,212 --> 00:32:30,384 line:-2
之前只能用HTML实现
现在你可以在Swift中编写了


636
00:32:36,690 --> 00:32:39,326 line:-1
这就为你 为开发者提供了许多好处


637
00:32:40,160 --> 00:32:43,664 line:-2
你可以利用一些框架 比如SpriteKit、
UIKit和CoreAnimation


638
00:32:44,731 --> 00:32:47,734 line:-2
通过使用Swift
你不需要切换工具来创建过场动画


639
00:32:49,002 --> 00:32:51,004 line:-1
那意味着你可以使用界面创建器


640
00:32:52,005 --> 00:32:53,874 line:-2
来创建Storyboard
和自动布局


641
00:32:55,209 --> 00:32:57,244 line:-1
你可以本地化你的过场动画


642
00:32:57,311 --> 00:32:59,947 line:-2
所使用的工具与你本地化你的内容
所使用的工具相同


643
00:33:02,349 --> 00:33:04,985 line:-2
你可以使用Swift
向你的书中添加过场动画


644
00:33:05,052 --> 00:33:06,887 line:-1
与添加新页面的方式类似


645
00:33:08,222 --> 00:33:09,356 line:-1
在页面文件夹中


646
00:33:09,523 --> 00:33:12,059 line:-2
你仍需要一个以.cutscenepage
结尾的文件夹


647
00:33:12,459 --> 00:33:15,696 line:-2
只有现在你才既需要
.swift文件 又需要清单


648
00:33:16,363 --> 00:33:19,867 line:-2
你所包含的.swift文件
与liveview.swift文件一样


649
00:33:20,234 --> 00:33:22,202 line:-1
应该运行并呈现一个实时视图


650
00:33:24,571 --> 00:33:27,374 line:-1
为了让你的过场动画在目录中显示


651
00:33:27,441 --> 00:33:29,443 line:-1
你要把它添加到章节级的清单中


652
00:33:30,344 --> 00:33:31,912 line:-1
就像添加新页面一样


653
00:33:34,381 --> 00:33:36,650 line:-1
最后我要非常激动地给你们介绍


654
00:33:36,717 --> 00:33:38,752 line:-1
本地化代码注释


655
00:33:40,554 --> 00:33:43,624 line:-2
如果你把Playground书
分发到多个地方


656
00:33:43,690 --> 00:33:48,729 line:-2
你现在可以在任意主文件
或共享文件中本地化代码注释了


657
00:33:49,429 --> 00:33:52,900 line:-2
这意味着你的书将对学生们进行
完全本地化


658
00:34:00,574 --> 00:34:03,744 line:-2
对于代码注释
你可以在可本地化区域


659
00:34:04,211 --> 00:34:05,612 line:-1
包装单一或多个注释


660
00:34:05,946 --> 00:34:09,248 line:-2
每个可本地化区域都应该有一个
唯一标识符


661
00:34:10,650 --> 00:34:15,022 line:-2
你还可以使用内联可本地化区域
让字符串从字面上可本地化


662
00:34:16,822 --> 00:34:18,859 line:-1
你的本地化代码注释的输出


663
00:34:18,926 --> 00:34:22,161 line:-2
将被存储在
LocalizableCode.strings文件中


664
00:34:22,228 --> 00:34:24,531 line:-2
这个文件位于书一级的
私有资源文件夹中


665
00:34:26,600 --> 00:34:28,635 line:-1
这只是Swift Playgrounds 3中


666
00:34:28,702 --> 00:34:30,469 line:-1
为作者提供的强大的新功能中的几个


667
00:34:31,038 --> 00:34:33,774 line:-1
接下来让我们结合Grace的演示


668
00:34:33,841 --> 00:34:35,842 line:-1
看看所有这些新的作者和app功能


669
00:34:44,284 --> 00:34:46,420 line:-1
通过所有这些新功能


670
00:34:46,485 --> 00:34:47,821 line:-1
我真的很想炫耀一下


671
00:34:47,888 --> 00:34:50,958 line:-1
你可以在iPad上创建


672
00:34:51,024 --> 00:34:52,893 line:-2
超级强健和有意思的
Swift Playgrounds


673
00:34:54,228 --> 00:34:55,094 line:-1
你们都知道


674
00:34:55,161 --> 00:34:59,633 line:-2
在iPad上创建集成iOS
摄像头的app的一般流程


675
00:34:59,700 --> 00:35:02,503 line:-2
是从Mac上的Xcode中的
空白app开始


676
00:35:02,903 --> 00:35:05,105 line:-2
编写一些代码
在iPad上运行代码


677
00:35:05,172 --> 00:35:06,173 line:-1
看是否生效


678
00:35:06,240 --> 00:35:09,276 line:-1
然后在两台设备之间来回迭代


679
00:35:09,877 --> 00:35:11,945 line:-1
但你可以更迅速地迭代


680
00:35:12,012 --> 00:35:13,113 line:-1
如果你就在iPad上


681
00:35:13,180 --> 00:35:15,582 line:-2
使用Swift Playgrounds
编写代码的话


682
00:35:16,750 --> 00:35:20,120 line:-1
我想使用Vision框架


683
00:35:20,354 --> 00:35:23,824 line:-2
它使用摄像头和Core ML
来执行对象检测和实时捕捉


684
00:35:24,191 --> 00:35:27,327 line:-2
Swift Playgrounds
实际上是我创建这个功能的完美场所


685
00:35:29,429 --> 00:35:31,899 line:-1
在美式手语中有一个概念


686
00:35:31,965 --> 00:35:36,136 line:-2
是名字手语
是唯一标识某个人的特殊手语


687
00:35:37,337 --> 00:35:40,707 line:-2
我小时候
我妈妈给了我这个名字手语


688
00:35:40,774 --> 00:35:42,676 line:-1
是字母G和一个微笑


689
00:35:43,310 --> 00:35:45,479 line:-1
但左边那个不笑的人是我


690
00:35:45,546 --> 00:35:47,314 line:-1
也许应该更像这样


691
00:35:48,782 --> 00:35:50,584 line:-1
为了实现这个想法


692
00:35:50,651 --> 00:35:52,886 line:-1
我创建了一些内容


693
00:35:52,953 --> 00:35:55,589 line:-1
集成了一些涂鸦和一些手语识别


694
00:35:55,889 --> 00:35:56,857 line:-1
我现在想展示给你们看


695
00:36:04,131 --> 00:36:06,366 line:-1
好吧 这就是我的内容


696
00:36:06,800 --> 00:36:09,403 line:-2
打包到了一本书中
书名是《Sign Me Up》


697
00:36:09,970 --> 00:36:11,905 line:-1
我想要做的就是


698
00:36:11,972 --> 00:36:14,041 line:-1
让Jonathan、Joy和我


699
00:36:14,107 --> 00:36:16,577 line:-1
给自己创建独特的面部彩绘


700
00:36:16,643 --> 00:36:19,213 line:-1
然后用手语触发那些绘画


701
00:36:19,980 --> 00:36:23,717 line:-2
我正在做触摸识别
从而绘制实时视频输出


702
00:36:23,951 --> 00:36:27,955 line:-2
然后我要使用Vision框架
来追踪绘制用于检测面部


703
00:36:28,555 --> 00:36:31,959 line:-2
然后我要使用Core ML来执行
对象识别和实时捕捉


704
00:36:32,025 --> 00:36:35,195 line:-1
从而根据手势切换绘制


705
00:36:37,497 --> 00:36:38,665 line:-1
我创建了我的书


706
00:36:38,999 --> 00:36:40,400 line:-1
并把它放在“受限”模式下


707
00:36:40,467 --> 00:36:43,270 line:-1
因此我可以隐藏某些实施细节


708
00:36:43,504 --> 00:36:46,240 line:-1
我其实只想让我的用户关注


709
00:36:46,306 --> 00:36:48,108 line:-2
我在用户模块中所创建的
某些Swift文件


710
00:36:49,776 --> 00:36:54,481 line:-2
我在Mac上培训了一个
Core ML模型来识别三个手势


711
00:36:54,548 --> 00:36:57,017 line:-1
分别是G、Y和N


712
00:36:57,618 --> 00:37:01,722 line:-2
然后我把模型导入到iPad上的
这个Playground中


713
00:37:02,689 --> 00:37:04,258 line:-1
G代表Grace


714
00:37:04,591 --> 00:37:07,628 line:-2
而我的搭档
Jonathan和Joy


715
00:37:07,694 --> 00:37:10,197 line:-1
他们的名字头两个字母一样


716
00:37:10,464 --> 00:37:11,832 line:-1
所以我选择了第三个字母


717
00:37:11,899 --> 00:37:15,135 line:-2
Y代表Joy
而N代表Jonathan


718
00:37:16,036 --> 00:37:18,372 line:-1
我想邀请他们俩上台来做演示


719
00:37:30,651 --> 00:37:33,320 line:-1
好吧 在第一页上


720
00:37:33,387 --> 00:37:36,056 line:-1
我添加了一些描述 告诉用户做什么


721
00:37:36,723 --> 00:37:38,625 line:-1
当Joy轻触源文件编辑器时


722
00:37:39,026 --> 00:37:41,428 line:-2
你会看到我已经添加了一个
代码完成指令


723
00:37:41,495 --> 00:37:43,463 line:-1
用于推荐setColors函数


724
00:37:44,698 --> 00:37:47,000 line:-2
只需要轻触
她就可以通过在代码完成栏中


725
00:37:47,067 --> 00:37:51,071 line:-1
选择颜色文字占位符来填写这个函数


726
00:37:51,605 --> 00:37:54,007 line:-1
这个快速编辑器使这样查看


727
00:37:54,074 --> 00:37:55,843 line:-1
UI的不同颜色变得超级简单


728
00:37:57,211 --> 00:38:00,047 line:-2
setColors函数设置了
一些不同的绘制颜色


729
00:38:00,113 --> 00:38:02,082 line:-1
一旦她运行代码就会变得可用


730
00:38:02,149 --> 00:38:03,383 line:-1
让我们继续并操作一下


731
00:38:06,787 --> 00:38:10,324 line:-2
太棒了 让我们把实时视图展开为
全屏显示 从而更好地查看它


732
00:38:11,692 --> 00:38:14,027 line:-1
她会循环通过底部 左下角


733
00:38:14,094 --> 00:38:15,596 line:-1
设置Y代表Joy


734
00:38:16,063 --> 00:38:18,031 line:-1
然后她可以轻触右下角


735
00:38:18,098 --> 00:38:19,366 line:-1
选择要绘制的颜色


736
00:38:20,067 --> 00:38:22,035 line:-1
然后她可以做一些面部彩绘


737
00:38:24,271 --> 00:38:26,240 line:-1
她所绘制的内容


738
00:38:26,306 --> 00:38:27,441 line:-2
会通过Vision框架
追踪到她的面部


739
00:38:27,508 --> 00:38:31,245 line:-1
那会返回面部轮廓以及一些面部特征


740
00:38:31,678 --> 00:38:34,214 line:-1
我要使用左侧瞳孔把所有这些点


741
00:38:34,281 --> 00:38:35,682 line:-1
都映射到它们的正确位置上去


742
00:38:36,416 --> 00:38:39,786 line:-2
一旦她满意了 她可以轻触完成
然后就轮到Jonathan了


743
00:38:41,388 --> 00:38:43,257 line:-1
然后这些绘制就被呈现为


744
00:38:43,323 --> 00:38:46,560 line:-2
一组颜色和距离
左侧瞳孔的x-y距离


745
00:38:46,627 --> 00:38:47,794 line:-1
然后被映射到一个字母


746
00:38:48,562 --> 00:38:50,163 line:-1
然后把这个信息保存到


747
00:38:50,230 --> 00:38:52,599 line:-2
这个Playground的
Playground键值存储中


748
00:38:53,066 --> 00:38:56,603 line:-2
用于映射的所有代码都在
FaceView.swift文件中


749
00:38:56,670 --> 00:39:00,340 line:-1
并对用户可用 可以让用户细读


750
00:39:00,407 --> 00:39:02,509 line:-1
而不会弄乱主页面


751
00:39:03,310 --> 00:39:05,245 line:-2
看起来Jonathan已经完成了
我也照着做


752
00:39:17,024 --> 00:39:17,858 line:-1
酷


753
00:39:22,496 --> 00:39:24,398 line:-1
太棒了 现在让我们进入下一个页面


754
00:39:24,464 --> 00:39:26,967 line:-2
这个页面指导我们运行代码
并查看会发生什么


755
00:39:29,136 --> 00:39:31,305 line:-1
让我们再次全屏显示实时视图


756
00:39:31,371 --> 00:39:32,306 line:-1
从而可以更好地查看它


757
00:39:33,140 --> 00:39:36,310 line:-1
目前 除了面部识别什么都没发生


758
00:39:36,577 --> 00:39:38,745 line:-1
但请试着比划字母Y


759
00:39:40,180 --> 00:39:42,883 line:-2
太棒了 Swift Playgrounds
正在识别


760
00:39:44,451 --> 00:39:45,285 line:-1
是的！


761
00:39:48,755 --> 00:39:51,625 line:-2
Swift Playgrounds
识别手势Y代表Joy


762
00:39:51,692 --> 00:39:54,027 line:-1
并把她的绘制投射到她的脸上


763
00:39:54,361 --> 00:39:56,496 line:-2
让我们看一下如果我们尝试比划
不同的字母怎么样 试试字母G


764
00:39:57,965 --> 00:39:59,733 line:-2
-哦 我不知道
-稍微旋转一下


765
00:40:01,635 --> 00:40:04,471 line:-2
我们马上就成功了 也许试试代表
Jonathan的字母N


766
00:40:04,771 --> 00:40:05,839 line:-1
这就对了


767
00:40:06,473 --> 00:40:07,341 line:-1
酷 酷


768
00:40:07,574 --> 00:40:09,576 line:-1
它甚至可以切换面部


769
00:40:11,778 --> 00:40:13,780 line:-1
完美 你看起来从没这么漂亮过


770
00:40:18,552 --> 00:40:21,788 line:-2
所有这些代码完全都是
在iPad上的


771
00:40:21,855 --> 00:40:23,457 line:-2
Swift Playgrounds中
编写并运行的


772
00:40:23,790 --> 00:40:25,726 line:-1
并且你可以对学生们、


773
00:40:25,792 --> 00:40:28,295 line:-2
朋友们或Mac上的搭档
自定义这些代码


774
00:40:28,362 --> 00:40:31,098 line:-1
制作独一无二并且非常有意思的内容


775
00:40:31,164 --> 00:40:32,666 line:-2
那可以让Swift Playgrounds
更易于接受


776
00:40:39,706 --> 00:40:43,043 line:-2
你可以在线下载Jonathan的
和我的Playgrounds


777
00:40:43,110 --> 00:40:48,248 line:-2
wwdcswiftplaygrounds2019.github.io
订阅中有


778
00:40:49,049 --> 00:40:53,954 line:-2
要获取更多信息 请查看
developer.apple.com上的文档


779
00:40:54,321 --> 00:40:56,723 line:-1
欢迎参加明早举办的演讲


780
00:40:57,090 --> 00:40:58,759 line:-1
时间是早上9点


781
00:40:58,825 --> 00:41:00,527 line:-2
我们都会参加演讲
我们期待与你们交谈


782
00:41:01,962 --> 00:41:04,398 line:-2
非常感谢你们的参与
祝你们好好享受余下的大会时光

