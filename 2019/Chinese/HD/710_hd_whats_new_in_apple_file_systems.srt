1
00:00:01,176 --> 00:00:04,500
[音乐]


2
00:00:10,516 --> 00:00:14,996
[掌声]


3
00:00:15,496 --> 00:00:17,416
>> 女士们 先生们下午好


4
00:00:18,106 --> 00:00:19,746
欢迎来到 Filesystem 的会议


5
00:00:20,666 --> 00:00:22,556
在本次会议中


6
00:00:22,556 --> 00:00:25,676
我们将介绍与 Filesystem 相关的几个主题


7
00:00:25,866 --> 00:00:27,946
首先 我们将了解


8
00:00:27,946 --> 00:00:30,306
文件系统在保护 macOS 上的


9
00:00:30,376 --> 00:00:33,106
系统软件中


10
00:00:33,106 --> 00:00:34,616
所起的作用


11
00:00:36,336 --> 00:00:38,876
我们将描述卷复制


12
00:00:38,876 --> 00:00:41,766
在 APFS 中的工作原理


13
00:00:42,636 --> 00:00:45,426
最后 我们将讨论


14
00:00:45,946 --> 00:00:47,936
即将迎来的 


15
00:00:47,936 --> 00:00:49,566
运行 iOS 和 iPadOS 设备的


16
00:00:49,566 --> 00:00:52,736
新的和非常令人兴奋的功能


17
00:00:53,376 --> 00:00:55,516
即访问外部媒体上


18
00:00:55,916 --> 00:00:57,326
的外部文件


19
00:00:57,846 --> 00:01:03,146
但在我们开始之前


20
00:01:03,706 --> 00:01:06,166
让我们回顾最近 APFS 发生的事情


21
00:01:06,536 --> 00:01:09,426
APFS 一直是默认的文件系统


22
00:01:09,546 --> 00:01:12,556
-- 自 10.3 以来在 iOS 和 tvOS 上


23
00:01:12,556 --> 00:01:17,766
以及自 High Sierra 


24
00:01:17,846 --> 00:01:18,736
以来的 macOS 上


25
00:01:22,576 --> 00:01:24,316
APFS 引入的功能之一是


26
00:01:24,316 --> 00:01:28,546
内置卷管理器


27
00:01:30,436 --> 00:01:32,506
卷的概念对 APFS 来说


28
00:01:32,506 --> 00:01:33,836
并不陌生 


29
00:01:34,326 --> 00:01:36,626
它们存在于 HFS Plus 中


30
00:01:37,876 --> 00:01:41,206
HFS Plus 卷是此分区上的


31
00:01:41,206 --> 00:01:44,336
一对一映射


32
00:01:45,006 --> 00:01:49,426
它占用磁盘上连续的块范围


33
00:01:50,756 --> 00:01:52,236
由于这种


34
00:01:52,236 --> 00:01:55,736
一对一映射到分区


35
00:01:55,736 --> 00:01:58,756
和 HFS Plus 卷无法轻松添加


36
00:01:59,106 --> 00:02:02,266
要将新卷添加到分区磁盘


37
00:02:02,266 --> 00:02:05,576
你们首先需要


38
00:02:05,576 --> 00:02:08,156
缩小现有卷


39
00:02:08,395 --> 00:02:12,346
然后你们可以添加新卷


40
00:02:12,346 --> 00:02:14,386
APFS 卷更灵活


41
00:02:14,386 --> 00:02:17,496
因为它们与兄弟卷


42
00:02:17,816 --> 00:02:19,466
共享自己的


43
00:02:20,256 --> 00:02:21,506
磁盘分区空间


44
00:02:22,816 --> 00:02:26,486
而且这种灵活性


45
00:02:27,406 --> 00:02:30,686
允许更高级别的


46
00:02:31,766 --> 00:02:33,386
系统实现无法


47
00:02:33,386 --> 00:02:35,546
用旧式卷


48
00:02:35,546 --> 00:02:38,316
实现的功能


49
00:02:39,876 --> 00:02:41,966
我们要介绍中的一个 - 我们


50
00:02:42,006 --> 00:02:44,426
将实施的功能之一是


51
00:02:44,816 --> 00:02:47,236
保护系统软件免受


52
00:02:47,466 --> 00:02:49,806
恶意或意外更新


53
00:02:52,716 --> 00:02:54,626
你们可能还记得


54
00:02:54,816 --> 00:02:57,376
在 macOS El Capitan 时代


55
00:02:57,376 --> 00:03:01,966
我们介绍了系统完整性保护的概念


56
00:03:03,596 --> 00:03:08,126
它用于控制对目录层次结构的


57
00:03:08,436 --> 00:03:11,656
一部分的访问


58
00:03:12,816 --> 00:03:14,556
某些目录将被写保护


59
00:03:14,836 --> 00:03:16,716
而文件系统的其他部分


60
00:03:16,716 --> 00:03:19,816
将被允许更改


61
00:03:20,466 --> 00:03:23,616
今年 我们更进一步


62
00:03:23,616 --> 00:03:29,306
我们将整个根文件系统设为只读


63
00:03:30,516 --> 00:03:35,936
[欢呼和掌声]


64
00:03:36,436 --> 00:03:38,796
显然 无法安装


65
00:03:38,846 --> 00:03:41,176
新软件或用户无法


66
00:03:41,176 --> 00:03:43,906
保存数据的系统


67
00:03:43,906 --> 00:03:45,536
并不是特别有用


68
00:03:47,996 --> 00:03:49,346
为了实现我们


69
00:03:49,346 --> 00:03:50,666
如何协调这两个


70
00:03:50,666 --> 00:03:53,516
相互冲突的目标


71
00:03:53,516 --> 00:03:54,916
同时只读和可写


72
00:03:55,606 --> 00:03:57,186
让我们来看看


73
00:03:57,276 --> 00:03:59,026
当我们从 macOS Mojave 升级到


74
00:03:59,266 --> 00:04:01,166
macOS Catalina 时会发生什么


75
00:04:01,706 --> 00:04:06,196
macOS Mojave 上的


76
00:04:06,196 --> 00:04:08,596
一个典型容器具有一个主卷


77
00:04:08,596 --> 00:04:11,906
并且服务量很少


78
00:04:11,906 --> 00:04:13,996
例如 VM


79
00:04:14,406 --> 00:04:17,146
主卷用于存储


80
00:04:17,146 --> 00:04:20,736
用户的数据和系统软件


81
00:04:22,436 --> 00:04:24,436
当我们开始升级时 --


82
00:04:30,126 --> 00:04:32,036
当我们开始升级到 


83
00:04:32,426 --> 00:04:36,566
macOS Catalina 时


84
00:04:36,566 --> 00:04:38,596
我们首先更改主卷的职能


85
00:04:38,596 --> 00:04:40,286
并将其标记为数据卷


86
00:04:41,776 --> 00:04:44,956
然后 我们可以修剪


87
00:04:44,956 --> 00:04:46,806
仅包含系统软件的


88
00:04:46,806 --> 00:04:48,946
指令层次结构的某些部分


89
00:04:50,426 --> 00:04:53,986
一经完成后


90
00:04:54,206 --> 00:04:56,216
我们就可以进入下一个阶段


91
00:04:56,216 --> 00:04:58,696
我们将创建一个新的空卷


92
00:04:58,696 --> 00:05:02,456
该卷仅用于存储系统软件


93
00:05:02,666 --> 00:05:05,396
我们将使用系统


94
00:05:05,396 --> 00:05:06,406
内容填充该卷


95
00:05:06,986 --> 00:05:09,026
一旦这个过程完成


96
00:05:09,836 --> 00:05:11,706
我们就可以在保护方面宣布成功


97
00:05:12,056 --> 00:05:13,696
我们是只读的 我们受到保护


98
00:05:14,016 --> 00:05:16,976
这很好 但还不够


99
00:05:19,256 --> 00:05:21,846
我们仍然需要以某种方式


100
00:05:21,846 --> 00:05:25,406
将新系统内容与用户内容联系起来


101
00:05:25,866 --> 00:05:27,896
为此 我们介绍了


102
00:05:27,896 --> 00:05:29,286
卷组的概念


103
00:05:30,046 --> 00:05:32,626
卷组是由一个数据卷


104
00:05:32,626 --> 00:05:34,846
和一个系统卷组成的


105
00:05:35,196 --> 00:05:36,586
他们将其视为一个


106
00:05:36,586 --> 00:05:37,616
单一的实体


107
00:05:38,746 --> 00:05:42,496
UI 将其显示为单个磁盘


108
00:05:43,126 --> 00:05:45,036
它们共享加密状态


109
00:05:45,796 --> 00:05:48,016
如果你们的卷已加密


110
00:05:48,016 --> 00:05:50,086
则可以使用相同的密码


111
00:05:50,086 --> 00:05:51,766
来解锁这两个卷


112
00:05:52,566 --> 00:05:55,516
几乎所有东西看起来


113
00:05:55,516 --> 00:05:58,726
都是一个统一的实体


114
00:05:59,936 --> 00:06:01,946
有一件事是 我们还没做的


115
00:06:02,186 --> 00:06:04,326
我们仍然需要以某种方式提供


116
00:06:04,326 --> 00:06:07,066
单个目录层次结构的错觉


117
00:06:08,026 --> 00:06:10,916
传统上 


118
00:06:11,406 --> 00:06:14,666
它是通过在根文件系统中的


119
00:06:14,666 --> 00:06:16,866
目录之上安装文件系统来完成的


120
00:06:18,226 --> 00:06:20,266
由于我们需要引入


121
00:06:20,266 --> 00:06:21,636
许多交叉点


122
00:06:21,636 --> 00:06:24,946
以及文件系统中


123
00:06:25,026 --> 00:06:26,246
所需的卷数之多


124
00:06:26,246 --> 00:06:28,176
这种方法变得


125
00:06:28,246 --> 00:06:29,426
相当具有消耗性


126
00:06:29,916 --> 00:06:32,296
因此 为了解决这个问题


127
00:06:32,296 --> 00:06:34,926
我们引入了一个名为 Firmlink 的新概念


128
00:06:35,416 --> 00:06:39,616
Firmlink 是一个新的文件系统对象


129
00:06:40,776 --> 00:06:42,316
它与 Symlink 类似


130
00:06:42,876 --> 00:06:46,136
但与 Symlink 不同


131
00:06:46,526 --> 00:06:50,426
Firmlink 支持向后和


132
00:06:51,046 --> 00:06:53,326
向前路径反转


133
00:06:53,936 --> 00:06:57,246
这在其表示中是一致的


134
00:06:58,036 --> 00:07:00,886
而且这种一致性非常重要


135
00:07:00,926 --> 00:07:02,476
如果你曾经不得不处理一个 App


136
00:07:02,476 --> 00:07:04,966
而绝对需要它


137
00:07:04,966 --> 00:07:06,936
必须存在于


138
00:07:06,936 --> 00:07:08,416
特定的目录中


139
00:07:08,416 --> 00:07:09,686
比如在 App 目录下


140
00:07:10,096 --> 00:07:12,066
你们知道 


141
00:07:12,096 --> 00:07:15,096
你们必须能够


142
00:07:15,096 --> 00:07:16,676
从文件系统的顶部或者从道路


143
00:07:16,676 --> 00:07:18,586
向下走到支路上


144
00:07:18,586 --> 00:07:21,186
并且能够得到相同的路径


145
00:07:21,736 --> 00:07:22,976
我们可以用 Firmlink 做到这一点


146
00:07:29,216 --> 00:07:34,116
Firmlink 是从


147
00:07:34,116 --> 00:07:36,436
系统卷上的目录到数


148
00:07:36,436 --> 00:07:40,866
据卷上的目录的遍历点


149
00:07:42,246 --> 00:07:44,916
它们只有一对一的映射 一个来源


150
00:07:45,036 --> 00:07:45,716
一个目标的映射


151
00:07:47,066 --> 00:07:48,896
你们不能使用 Firmlink


152
00:07:48,896 --> 00:07:50,976
跨越卷组的边界


153
00:07:54,256 --> 00:07:56,116
Firmlink 对于


154
00:07:56,116 --> 00:07:58,336
用户和 App 非常易懂


155
00:07:58,726 --> 00:08:00,436
它们是在安装时


156
00:08:00,436 --> 00:08:01,426
通过 install 创建的 


157
00:08:01,946 --> 00:08:03,976
它们一般不会被注意到


158
00:08:08,256 --> 00:08:10,246
一旦我们得到这个新工具


159
00:08:10,246 --> 00:08:13,426
我们就可以用它来拼凑卷


160
00:08:13,426 --> 00:08:16,976
安装程序将在系统卷上创建条目


161
00:08:22,426 --> 00:08:24,446
并将它们指向


162
00:08:24,446 --> 00:08:27,976
数据卷上的相应卷


163
00:08:31,576 --> 00:08:34,346
一旦完成后 


164
00:08:34,346 --> 00:08:36,976
我们就有了统一的目录层次结构


165
00:08:37,686 --> 00:08:40,155
我们可以重新启动


166
00:08:40,155 --> 00:08:42,006
以只读方式挂载 root


167
00:08:42,006 --> 00:08:42,976
并享受它给我们的保护


168
00:08:49,686 --> 00:08:50,726
生活很美好


169
00:08:51,446 --> 00:08:52,496
一切都受到保护了


170
00:08:53,066 --> 00:08:53,986
一切都在运行


171
00:08:54,726 --> 00:08:56,556
但你们仍需记住


172
00:08:58,026 --> 00:09:01,356
在安装过程中拆分卷


173
00:09:01,726 --> 00:09:03,446
没有办法避免它


174
00:09:03,786 --> 00:09:04,516
它会发生的


175
00:09:05,116 --> 00:09:09,626
在开发人员的预览中 


176
00:09:09,626 --> 00:09:12,166
我们选择保留


177
00:09:12,296 --> 00:09:14,606
根文件系统可写


178
00:09:14,606 --> 00:09:16,736
以便你们更轻松地测试 App 


179
00:09:17,596 --> 00:09:19,026
如果你们想模仿


180
00:09:19,026 --> 00:09:21,796
将来实现的行为


181
00:09:22,966 --> 00:09:24,636
你们则可以


182
00:09:24,636 --> 00:09:26,586
在根目录中创建


183
00:09:26,586 --> 00:09:30,026
一个特殊文件 并在重新启动时


184
00:09:30,026 --> 00:09:32,256
你们的卷将会以只读方式挂载


185
00:09:33,506 --> 00:09:35,066
这将在下一个种子的


186
00:09:35,066 --> 00:09:37,786
下一次构建中发生变化


187
00:09:42,256 --> 00:09:45,496
在发布版本中 


188
00:09:45,496 --> 00:09:48,196
如果禁用系统完整性保护


189
00:09:48,196 --> 00:09:51,516
你们仍然可以


190
00:09:51,516 --> 00:09:53,426
将根文件系统挂载为读写


191
00:09:54,896 --> 00:09:57,616
但这不是一个持久的变化


192
00:09:58,016 --> 00:10:00,566
在重新启动时 


193
00:10:00,566 --> 00:10:03,296
它将恢复为只读状态


194
00:10:03,866 --> 00:10:06,216
你们可以再一次将其重新安装为只读


195
00:10:06,216 --> 00:10:07,806
读写状态


196
00:10:08,886 --> 00:10:10,116
同样的 它将在重新启动时


197
00:10:10,116 --> 00:10:11,686
恢复到相同的状态


198
00:10:13,306 --> 00:10:14,906
你们可以想象 


199
00:10:14,906 --> 00:10:17,366
这是 macOS 形状和安装方式


200
00:10:17,516 --> 00:10:20,016
的一个相当大的变化


201
00:10:20,886 --> 00:10:23,986
它可以捕获一些 App


202
00:10:24,816 --> 00:10:25,806
例如 如果你们的 App 


203
00:10:25,806 --> 00:10:27,946
在文件系统上


204
00:10:27,946 --> 00:10:30,536
使用复杂布局


205
00:10:30,736 --> 00:10:32,666
或附带安装程序包


206
00:10:32,666 --> 00:10:35,576
请确保它适用于


207
00:10:35,576 --> 00:10:38,976
新的只读根分区


208
00:10:42,046 --> 00:10:43,376
如果你们正在编写备份实用程序


209
00:10:43,376 --> 00:10:47,246
该实用程序关注 inode 编号


210
00:10:47,246 --> 00:10:49,996
文件系统 ID 等


211
00:10:49,996 --> 00:10:52,286
请确保对其进行测试


212
00:10:52,286 --> 00:10:53,896
因为你们之前


213
00:10:53,896 --> 00:10:56,836
可能具有的假设也许不正确


214
00:10:57,276 --> 00:11:01,006
所以底线是测试 测试 测试


215
00:11:01,946 --> 00:11:03,846
接下来 


216
00:11:03,846 --> 00:11:06,426
我将交给 Jon Becker 由他来说说卷复制


217
00:11:08,516 --> 00:11:12,500
[掌声]


218
00:11:16,166 --> 00:11:19,576
>> 谢谢你 Max 大家下午好


219
00:11:20,436 --> 00:11:21,556
我的名字是 Jon


220
00:11:21,556 --> 00:11:22,646
我将讨论使用 APFS 


221
00:11:22,646 --> 00:11:24,326
进行卷复制


222
00:11:24,836 --> 00:11:26,306
不妨让我们直接进入


223
00:11:26,796 --> 00:11:28,276
什么是卷复制


224
00:11:29,296 --> 00:11:31,606
嗯 基本的想法很简单


225
00:11:31,606 --> 00:11:34,296
我们想要将一个卷 复制到另一个卷


226
00:11:35,366 --> 00:11:39,536
这听起来很简单 但这一点的重要方面


227
00:11:39,806 --> 00:11:41,286
是我们希望这个副本的


228
00:11:41,286 --> 00:11:42,966
保真度尽可能高


229
00:11:43,756 --> 00:11:45,946
通常 只进行


230
00:11:45,946 --> 00:11:48,016
逐个文件复制是不够的


231
00:11:48,306 --> 00:11:52,046
我们希望复制所有卷内容


232
00:11:52,456 --> 00:11:56,036
复制所有数据 所有元数据 卷属性


233
00:11:56,326 --> 00:11:58,056
如果源卷包含可启动的 OS 


234
00:11:58,056 --> 00:12:00,126
我们希望复制


235
00:12:00,126 --> 00:12:01,666
使该卷可启动的元数据


236
00:12:01,666 --> 00:12:03,356
以便我们的


237
00:12:03,396 --> 00:12:06,086
副本目标也可以启动


238
00:12:06,086 --> 00:12:08,156
现在 我将讨论


239
00:12:08,156 --> 00:12:10,586
Apple 软件在 Restore 命令行实用程序


240
00:12:10,586 --> 00:12:12,346
或 ASR 环境中


241
00:12:12,346 --> 00:12:14,186
的复制


242
00:12:14,186 --> 00:12:17,486
ASR 已经存在了很长时间


243
00:12:17,486 --> 00:12:19,406
你们中的许多人可能都熟悉它


244
00:12:19,406 --> 00:12:20,906
它的主要功能是


245
00:12:20,906 --> 00:12:22,266
进行卷复制


246
00:12:23,646 --> 00:12:25,206
现在 有了 ASR 对于我们的


247
00:12:25,206 --> 00:12:26,606
复制源而言很常见的


248
00:12:26,606 --> 00:12:29,096
是磁盘映像


249
00:12:29,096 --> 00:12:30,986
在这种情况下


250
00:12:30,986 --> 00:12:33,216
我们经常会参考执行


251
00:12:33,216 --> 00:12:34,786
此复制的过程 - 将目标卷


252
00:12:34,786 --> 00:12:37,656
恢复(Restore)为目标卷


253
00:12:38,056 --> 00:12:39,786
这就是 Apple Software Restore 名字的由来


254
00:12:40,156 --> 00:12:41,966
但你会听到我使用的


255
00:12:42,026 --> 00:12:44,026
恢复和复制的专业术语


256
00:12:44,026 --> 00:12:45,036
几乎可以互换


257
00:12:46,696 --> 00:12:50,796
那么谁想要这个呢


258
00:12:50,796 --> 00:12:52,336
谁需要这个功能呢


259
00:12:53,576 --> 00:12:56,186
好吧 如果你在教育


260
00:12:56,186 --> 00:12:58,436
或企业 IT 如果你做的事情


261
00:12:58,436 --> 00:13:00,866
类似配置有大量机器的大型实验室


262
00:13:00,866 --> 00:13:02,636
或者如果你编写


263
00:13:02,636 --> 00:13:04,156
备份实用程序


264
00:13:04,156 --> 00:13:06,166
那么复制是一个


265
00:13:06,206 --> 00:13:08,526
你可能需要或想要定期


266
00:13:08,526 --> 00:13:09,576
使用的功能


267
00:13:10,296 --> 00:13:12,816
正如我们将看到的


268
00:13:12,816 --> 00:13:14,496
APFS 的一些新功能


269
00:13:14,526 --> 00:13:15,756
对我们如何进行复制


270
00:13:15,756 --> 00:13:16,396
提出了挑战


271
00:13:17,536 --> 00:13:19,406
另一方面 同样也看到 


272
00:13:19,406 --> 00:13:21,486
这些新功能还


273
00:13:21,486 --> 00:13:23,586
提供了使复制


274
00:13:23,586 --> 00:13:25,596
成为更强大 更灵活的


275
00:13:25,596 --> 00:13:26,656
操作的可能


276
00:13:27,706 --> 00:13:29,416
所以我想稍微备份一下


277
00:13:29,416 --> 00:13:32,096
然后再谈谈复制


278
00:13:32,096 --> 00:13:33,446
在过去 APFS 之前


279
00:13:33,446 --> 00:13:35,066
看起来如何


280
00:13:35,566 --> 00:13:37,596
现在正如 Max 所展示的那样


281
00:13:38,136 --> 00:13:40,886
对于以前的文件系统 


282
00:13:41,636 --> 00:13:43,656
如 HFS Plus 文件系统


283
00:13:43,656 --> 00:13:45,176
或者我应该说的卷


284
00:13:45,176 --> 00:13:46,706
与包含它的分区是


285
00:13:46,706 --> 00:13:48,056
一对一的关系


286
00:13:48,536 --> 00:13:49,896
这意味着该卷


287
00:13:49,896 --> 00:13:52,936
由一个连续的块设备支持


288
00:13:53,496 --> 00:13:55,886
因此 复制实际上


289
00:13:55,886 --> 00:13:58,366
只涉及对整个分区


290
00:13:58,846 --> 00:14:00,256
进行块复制


291
00:14:00,896 --> 00:14:04,476
当然 如果我们要


292
00:14:04,476 --> 00:14:06,986
复制整个块设备


293
00:14:06,986 --> 00:14:08,416
我们将复制该卷中的


294
00:14:08,416 --> 00:14:09,556
所有文件系统信息


295
00:14:09,556 --> 00:14:11,386
现在可能会出现


296
00:14:11,386 --> 00:14:12,866
一些复杂情况


297
00:14:12,866 --> 00:14:13,436
如图中所示


298
00:14:13,766 --> 00:14:16,826
我们的源和目标分区的大小不同


299
00:14:17,066 --> 00:14:18,686
但有一些方法可以解决这个问题


300
00:14:18,686 --> 00:14:20,856
总的来说 块复制是


301
00:14:20,856 --> 00:14:23,546
一种非常有效且


302
00:14:23,546 --> 00:14:25,656
相对简单的复制方式


303
00:14:26,636 --> 00:14:30,236
但是 当然 有了 APFS


304
00:14:30,236 --> 00:14:31,976
就有一些新功能 使这张图片复杂化


305
00:14:34,416 --> 00:14:36,626
因此 正如 Max 告诉你们的那样


306
00:14:36,726 --> 00:14:38,156
APFS 具有一些功能


307
00:14:38,156 --> 00:14:39,336
如卷管理和空间共享


308
00:14:39,336 --> 00:14:42,886
正如我们所看到的


309
00:14:42,886 --> 00:14:44,766
如果我们看一下


310
00:14:44,766 --> 00:14:46,556
图中的第 1 卷 它就会


311
00:14:46,556 --> 00:14:47,536
分散在容器分区周围


312
00:14:47,836 --> 00:14:49,966
所以它不是一个连续的块设备


313
00:14:51,166 --> 00:14:52,536
它可能是 - 它的数据可能


314
00:14:52,536 --> 00:14:56,216
散布在同一容器中


315
00:14:56,216 --> 00:14:57,306
另一个卷的数据中


316
00:14:57,306 --> 00:14:59,396
如本例中的第 2 卷


317
00:15:00,616 --> 00:15:02,076
此外 我们当然关心


318
00:15:02,076 --> 00:15:03,496
安全和隐私


319
00:15:04,116 --> 00:15:05,736
所以我们必须考虑加密


320
00:15:06,556 --> 00:15:08,356
现在使用 APFS 


321
00:15:08,356 --> 00:15:10,016
加密会在文件系统级别完成


322
00:15:10,526 --> 00:15:12,996
而且 在拥有用于


323
00:15:12,996 --> 00:15:15,736
内部存储设备的 


324
00:15:16,286 --> 00:15:18,276
T2 安全芯片的 Mac 上


325
00:15:18,276 --> 00:15:19,686
加密始终处于开启状态


326
00:15:20,396 --> 00:15:22,316
它直接与硬件绑定


327
00:15:22,316 --> 00:15:23,926
这意味着它


328
00:15:23,926 --> 00:15:27,316
特定于该 Mac 中的存储设备


329
00:15:28,106 --> 00:15:29,366
因此 如果我们尝试


330
00:15:29,366 --> 00:15:31,346
复制该卷的块


331
00:15:31,346 --> 00:15:32,236
并将其带到其他地方


332
00:15:32,236 --> 00:15:33,176
它们将无法被解密


333
00:15:34,206 --> 00:15:36,166
所以这里的结果是


334
00:15:36,166 --> 00:15:37,456
块拷贝实际上不是


335
00:15:37,456 --> 00:15:39,986
一种用 APFS 卷进行复制的可能方式


336
00:15:40,566 --> 00:15:44,136
那么我们如何将这与


337
00:15:44,136 --> 00:15:46,906
我们的需求相协调呢


338
00:15:47,106 --> 00:15:48,846
好吧 在 macOS Catalina 上一同更新的 


339
00:15:48,946 --> 00:15:51,116
我们正在推出


340
00:15:51,116 --> 00:15:52,846
带 ASR 的 APFS 卷复制


341
00:15:53,576 --> 00:15:55,176
带 ASR 和 APFS 的


342
00:15:56,176 --> 00:15:57,086
是这样 谢谢


343
00:15:57,086 --> 00:15:59,336
ASR 和 APFS 紧密集成


344
00:15:59,566 --> 00:16:02,296
并且 ASR 可以让 APFS 


345
00:16:02,296 --> 00:16:03,966
从源卷生成流


346
00:16:03,966 --> 00:16:06,506
然后该流被写入目标卷


347
00:16:07,066 --> 00:16:10,266
现在因为 APFS 正在


348
00:16:10,266 --> 00:16:11,636
生成此流


349
00:16:11,636 --> 00:16:13,126
它知道在何处需要读取


350
00:16:13,126 --> 00:16:13,856
源卷的各个部分


351
00:16:15,276 --> 00:16:16,626
因此 源卷不是


352
00:16:16,626 --> 00:16:17,646
连续的块设备


353
00:16:17,646 --> 00:16:18,976
也不是问题


354
00:16:22,376 --> 00:16:24,276
就加密而言


355
00:16:24,276 --> 00:16:25,376
如果卷的源是加密的


356
00:16:25,376 --> 00:16:28,606
那么它将是 --


357
00:16:28,756 --> 00:16:30,366
来自它的数据


358
00:16:30,366 --> 00:16:32,106
将在生成流时


359
00:16:32,106 --> 00:16:33,116
被动态解密


360
00:16:33,776 --> 00:16:34,996
当然 如果源卷


361
00:16:34,996 --> 00:16:35,786
受 FileVault 保护


362
00:16:35,786 --> 00:16:37,516
则它需要在


363
00:16:37,516 --> 00:16:39,276
进行此复制之前


364
00:16:39,276 --> 00:16:40,766
通过用户操作解锁


365
00:16:41,536 --> 00:16:43,726
如果目标卷本身已加密


366
00:16:43,726 --> 00:16:45,976
则数据处于 - 或者


367
00:16:45,976 --> 00:16:47,776
数据在从流


368
00:16:47,776 --> 00:16:49,926
写入目标卷时被加密


369
00:16:50,356 --> 00:16:52,616
因此 在这种情况下 


370
00:16:52,616 --> 00:16:54,286
该数据在到达


371
00:16:54,286 --> 00:16:55,836
目标卷时从 get go 加密


372
00:16:56,546 --> 00:16:59,606
懂了吗


373
00:16:59,606 --> 00:17:01,766
此复制的另一个不错的功能是


374
00:17:01,766 --> 00:17:03,466
在生成流时


375
00:17:03,466 --> 00:17:05,636
会立即对卷数据进行碎片整理


376
00:17:05,636 --> 00:17:07,705
元数据被压缩


377
00:17:07,705 --> 00:17:09,486
因此生成的流


378
00:17:09,486 --> 00:17:10,935
以及由此产生的


379
00:17:10,935 --> 00:17:12,465
目标卷得到了非常好的优化


380
00:17:12,766 --> 00:17:17,066
这可能是一个很好的方法 --


381
00:17:17,066 --> 00:17:18,896
例如去掌握图像


382
00:17:19,856 --> 00:17:20,986
如果你们正在掌握图像


383
00:17:21,266 --> 00:17:22,445
并且最后一步是


384
00:17:22,445 --> 00:17:24,126
执行复制操作


385
00:17:24,126 --> 00:17:25,976
那么你们的图像卷将得到非常好的优化


386
00:17:30,076 --> 00:17:31,436
因此 当我们进行恢复 


387
00:17:32,736 --> 00:17:34,596
复制时 无论你们想说什么


388
00:17:34,596 --> 00:17:37,376
我们都可以使用多种选项


389
00:17:37,696 --> 00:17:39,676
我只是想说出其中几个


390
00:17:39,826 --> 00:17:41,306
第一个真的非常像


391
00:17:41,306 --> 00:17:43,456
我们习惯的恢复


392
00:17:43,916 --> 00:17:46,076
我们可以指定一个源卷


393
00:17:46,306 --> 00:17:48,276
你们可以指定一个目标卷


394
00:17:48,866 --> 00:17:50,546
并且我们的想法是目标卷


395
00:17:50,546 --> 00:17:53,206
将被完全擦除和替换


396
00:17:53,436 --> 00:17:55,086
或者其内容由


397
00:17:55,086 --> 00:17:56,166
源卷的内容替换


398
00:17:56,396 --> 00:17:58,456
现在在这种情况下


399
00:17:58,456 --> 00:18:00,646
我们将第 2 卷作为目标卷


400
00:18:00,646 --> 00:18:01,696
所以我们的恢复


401
00:18:01,696 --> 00:18:02,526
看起来像这样


402
00:18:02,716 --> 00:18:03,806
你会在这里看到一个


403
00:18:03,806 --> 00:18:04,446
示例命令行


404
00:18:05,526 --> 00:18:08,056
结果是第 2 卷的


405
00:18:08,056 --> 00:18:09,546
内容被删除


406
00:18:09,966 --> 00:18:11,316
取而代之的是源卷的内容


407
00:18:11,316 --> 00:18:12,306
因此恢复的卷


408
00:18:12,306 --> 00:18:14,526
和源卷是相同的


409
00:18:14,526 --> 00:18:15,666
顺便提一下


410
00:18:15,666 --> 00:18:17,666
请注意 在此示例中 


411
00:18:17,666 --> 00:18:18,986
目标容器中还包含另一个卷


412
00:18:19,076 --> 00:18:20,836
而且这个数量是独一无二的


413
00:18:20,836 --> 00:18:21,976
它的内容得以保留


414
00:18:22,206 --> 00:18:23,926
它不以任何方式


415
00:18:24,016 --> 00:18:25,726
形成复制操作的一部分


416
00:18:26,766 --> 00:18:28,566
但是我们还有另一个选择


417
00:18:28,566 --> 00:18:30,816
即不必指定


418
00:18:30,876 --> 00:18:35,366
目标卷和删除它


419
00:18:35,366 --> 00:18:37,796
我们可以生成


420
00:18:37,796 --> 00:18:39,736
一个全新的卷作为动态目标


421
00:18:40,146 --> 00:18:42,596
我们通过将整个容器指定为


422
00:18:42,596 --> 00:18:44,516
目标来完成此操作


423
00:18:44,956 --> 00:18:46,646
这告诉 ASR 我们


424
00:18:46,646 --> 00:18:48,446
真正想要的是


425
00:18:48,446 --> 00:18:50,356
生成一个全新的卷并恢复到那个


426
00:18:50,416 --> 00:18:51,866
你们可以看到另一个示例命令行


427
00:18:51,866 --> 00:18:53,706
结果是创建并恢复了


428
00:18:53,706 --> 00:18:55,766
一个新卷


429
00:18:56,026 --> 00:18:57,306
因此 在这种情况下


430
00:18:57,306 --> 00:18:57,976
第 1 卷和第 2 卷都是独立的


431
00:19:02,186 --> 00:19:03,836
现在我想移步复制


432
00:19:03,836 --> 00:19:07,696
一会儿 我想谈谈


433
00:19:08,086 --> 00:19:09,726
APFS 中的快照


434
00:19:10,176 --> 00:19:12,016
那么 快照只是


435
00:19:12,056 --> 00:19:14,496
所有卷状态的时间点捕获


436
00:19:15,256 --> 00:19:16,466
例如 我们可能有


437
00:19:16,466 --> 00:19:17,986
一个包含大量文件的卷


438
00:19:18,266 --> 00:19:20,416
我们可以拍摄该卷的快照


439
00:19:21,126 --> 00:19:24,366
结果是一次捕获


440
00:19:24,366 --> 00:19:25,706
一个冻结帧


441
00:19:25,706 --> 00:19:27,226
表示在拍摄快照时


442
00:19:27,226 --> 00:19:28,366
该卷的样子


443
00:19:28,676 --> 00:19:30,146
如果我们对卷


444
00:19:30,146 --> 00:19:31,666
进行后续更改


445
00:19:31,756 --> 00:19:33,696
例如 删除文件或


446
00:19:33,696 --> 00:19:36,576
添加一些新文件


447
00:19:36,576 --> 00:19:38,796
则快照仍然包含


448
00:19:38,796 --> 00:19:40,686
创建时存在的所有状态


449
00:19:41,816 --> 00:19:43,456
因此 在这种情况下 


450
00:19:43,456 --> 00:19:45,276
如果我们查看实时卷


451
00:19:45,276 --> 00:19:47,466
则看起来已删除的文件不存在


452
00:19:47,796 --> 00:19:49,016
但从某种意义上说 它仍然存在


453
00:19:49,016 --> 00:19:50,886
因为它是快照的一部分


454
00:19:52,016 --> 00:19:53,276
所以你可能会好奇


455
00:19:53,276 --> 00:19:54,656
“嗯 这与复制有什么关系？”


456
00:19:55,416 --> 00:19:57,156
那么 再一次 


457
00:19:57,156 --> 00:19:59,386
有了 macOS Catalina 的新功能


458
00:20:00,486 --> 00:20:02,796
我们现在可以对快照


459
00:20:02,796 --> 00:20:06,043
进行恢复 复制 所以要理解这意味着什么 --


460
00:20:06,043 --> 00:20:07,346
[掌声] 谢谢你们


461
00:20:09,056 --> 00:20:10,236
要了解这意味着什么


462
00:20:10,236 --> 00:20:12,236
请在左侧考虑此卷


463
00:20:12,236 --> 00:20:14,876
它里面有两个快照 Snap 1 和 Snap 2


464
00:20:15,436 --> 00:20:16,596
它们包含一些共同的文件


465
00:20:16,596 --> 00:20:19,926
那些黄颜色的文件一些快照


466
00:20:19,926 --> 00:20:21,066
而不是另一个快照的文件


467
00:20:21,066 --> 00:20:22,066
一些文件在另一个文件中


468
00:20:22,066 --> 00:20:24,286
而不是在这个 以及该文件不是任何一个快照


469
00:20:24,886 --> 00:20:30,416
我可以将此卷恢复到


470
00:20:30,416 --> 00:20:32,646
右侧的目标卷


471
00:20:32,646 --> 00:20:33,626
它目前是空的


472
00:20:34,376 --> 00:20:35,536
当然 在那里的想法是


473
00:20:35,536 --> 00:20:37,326
在恢复结束时


474
00:20:37,326 --> 00:20:39,836
目标卷看起来像源卷


475
00:20:40,036 --> 00:20:42,456
但是 不是恢复排序


476
00:20:42,456 --> 00:20:44,356
-- 源卷的实时版本


477
00:20:44,356 --> 00:20:45,526
而是当前的样式


478
00:20:45,526 --> 00:20:48,236
我可以改为恢复快照


479
00:20:48,526 --> 00:20:49,716
因此 例如 如果


480
00:20:49,716 --> 00:20:53,296
我想恢复 Snap 1


481
00:20:53,456 --> 00:20:54,946
我可以指定我想恢复的快照


482
00:20:55,966 --> 00:20:58,436
结果是我的目标


483
00:20:58,436 --> 00:20:59,996
现在看起来像 Snap 1


484
00:21:00,726 --> 00:21:02,546
特别注意那两个


485
00:21:02,546 --> 00:21:03,836
从源卷中


486
00:21:03,836 --> 00:21:05,646
删除的文件


487
00:21:05,646 --> 00:21:07,676
他们已经在目标卷中起死回生了


488
00:21:10,216 --> 00:21:12,336
完成后


489
00:21:12,336 --> 00:21:13,556
我可能想在目标卷中


490
00:21:13,556 --> 00:21:14,326
添加一些新文件


491
00:21:14,696 --> 00:21:17,306
但是 也许现在


492
00:21:17,306 --> 00:21:20,056
我想将 Snap 2 恢复到目标卷


493
00:21:20,586 --> 00:21:23,366
当然 同样的想法是 


494
00:21:23,366 --> 00:21:24,306
在该操作结束时


495
00:21:24,306 --> 00:21:25,596
实时目标卷


496
00:21:25,596 --> 00:21:28,246
应该看起来像源卷中的 Snap 2


497
00:21:29,276 --> 00:21:31,756
但请注意 


498
00:21:31,756 --> 00:21:33,206
源卷和目标卷上


499
00:21:33,386 --> 00:21:35,216
都已有 Snap 1


500
00:21:35,456 --> 00:21:37,726
如果不需要


501
00:21:37,726 --> 00:21:39,436
复制 Snap 2 中的一切


502
00:21:39,436 --> 00:21:40,636
我只需要复制 Snap 1 


503
00:21:40,636 --> 00:21:42,336
和 Snap 2 之间不同的东西


504
00:21:42,336 --> 00:21:43,096
那难道不是很好吗


505
00:21:44,036 --> 00:21:44,836
嗯 我确实可以做到


506
00:21:45,076 --> 00:21:46,456
我们将两个快照之间的区别


507
00:21:46,456 --> 00:21:48,296
称为快照增量


508
00:21:49,076 --> 00:21:51,646
我的想法是当我恢复


509
00:21:51,646 --> 00:21:53,906
快照增量时


510
00:21:53,906 --> 00:21:55,016
我正在指定我想要


511
00:21:55,016 --> 00:21:57,466
采取的两个快照


512
00:21:57,676 --> 00:21:58,806
我执行还原


513
00:21:59,486 --> 00:22:00,506
当然最后 


514
00:22:00,506 --> 00:22:02,146
实时目标卷从源头


515
00:22:02,886 --> 00:22:04,296
看起来像 Snap 2


516
00:22:04,556 --> 00:22:05,716
但是我想让你


517
00:22:05,716 --> 00:22:07,796
注意到有关这个


518
00:22:07,796 --> 00:22:08,386
目标卷的三件事


519
00:22:08,386 --> 00:22:10,986
第一 所有那些


520
00:22:10,986 --> 00:22:11,926
不属于目标快照的


521
00:22:11,926 --> 00:22:13,826
文件都被丢弃了


522
00:22:15,156 --> 00:22:17,286
第二个 在 Snap 1 中


523
00:22:17,286 --> 00:22:20,416
但不在 Snap 2 中的文件


524
00:22:20,456 --> 00:22:23,146
已从实时目标卷中丢弃


525
00:22:23,146 --> 00:22:24,556
当然 它们仍然


526
00:22:24,556 --> 00:22:25,946
存在于目标卷上的 Snap 1 中


527
00:22:26,966 --> 00:22:28,416
第三 我们需要


528
00:22:28,416 --> 00:22:30,026
复制的唯一内容


529
00:22:30,566 --> 00:22:31,656
是那些属于 Snap 2


530
00:22:31,656 --> 00:22:33,836
但不属于 Snap 1 的文件


531
00:22:35,246 --> 00:22:37,096
好了吗 现在这是一个


532
00:22:37,096 --> 00:22:38,026
非常强大的功能


533
00:22:38,026 --> 00:22:39,746
这是增加发布的


534
00:22:39,746 --> 00:22:40,856
一个好方法


535
00:22:41,046 --> 00:22:42,846
想象一下 你们正在更新一个


536
00:22:42,846 --> 00:22:44,446
装满 100 台机器的实验室


537
00:22:44,446 --> 00:22:45,856
如果你们只是复制


538
00:22:45,856 --> 00:22:47,566
源图像上几个


539
00:22:47,566 --> 00:22:48,636
快照之间的差异


540
00:22:48,636 --> 00:22:49,816
则可以节省大量时间


541
00:22:49,816 --> 00:22:51,696
和大量网络带宽


542
00:22:55,146 --> 00:22:56,076
这就是我对


543
00:22:56,076 --> 00:22:57,146
复制的看法


544
00:22:57,326 --> 00:22:58,496
在这里做点笔记


545
00:22:59,126 --> 00:23:02,556
一个更复杂的文件系统


546
00:23:02,556 --> 00:23:03,776
需要更复杂的


547
00:23:03,776 --> 00:23:04,976
复制机制


548
00:23:10,046 --> 00:23:11,066
APFS 卷复制


549
00:23:11,066 --> 00:23:12,986
最好使用 ASR 完成 


550
00:23:12,986 --> 00:23:14,636
因为它提供


551
00:23:14,736 --> 00:23:15,986
最高保真度的副本


552
00:23:16,346 --> 00:23:18,146
它会将加密作为必需处理


553
00:23:18,596 --> 00:23:20,746
最后 我们现在可以


554
00:23:20,746 --> 00:23:23,506
使用 ASR 恢复快照增量中的快照


555
00:23:24,196 --> 00:23:25,586
那么有了这一点之后 


556
00:23:25,586 --> 00:23:26,716
我将把话筒转交给 Bill 


557
00:23:26,716 --> 00:23:28,976
他将讨论 iOS 的外部文件访问 谢谢


558
00:23:29,516 --> 00:23:34,376
[掌声]


559
00:23:34,876 --> 00:23:35,396
>> 谢谢你 Jon


560
00:23:36,006 --> 00:23:37,046
大家下午好


561
00:23:37,856 --> 00:23:40,196
你们可能记得两年前


562
00:23:40,196 --> 00:23:42,276
我们介绍了文件 App 和一个新的


563
00:23:42,276 --> 00:23:43,316
文件提供程序 API


564
00:23:44,396 --> 00:23:45,726
它们共同为


565
00:23:45,726 --> 00:23:47,106
基于云的文档


566
00:23:47,106 --> 00:23:48,376
提供了出色的体验


567
00:23:49,576 --> 00:23:51,516
今年 我们认为我们可以做得更多


568
00:23:52,706 --> 00:23:54,186
所以今年


569
00:23:54,186 --> 00:23:57,296
我们很高兴宣布


570
00:23:57,296 --> 00:23:59,916
支持 iOS 访问网络共享


571
00:23:59,916 --> 00:24:03,106
和 USB 存储上的文件


572
00:24:04,516 --> 00:24:08,500
[欢呼和鼓掌]


573
00:24:10,926 --> 00:24:13,546
对于 USB 存储


574
00:24:13,546 --> 00:24:15,936
我们支持从紧凑型闪存和 CF


575
00:24:16,216 --> 00:24:19,766
卡和棒 再到 


576
00:24:19,866 --> 00:24:21,466
USB raid 盒的所有功能


577
00:24:22,906 --> 00:24:24,616
我们支持许多文件系统


578
00:24:25,026 --> 00:24:27,576
我们支持未加密的 APFS


579
00:24:28,766 --> 00:24:32,356
未加密的 HFS Plus


580
00:24:32,356 --> 00:24:34,976
我们支持 FAT 和 ExFAT


581
00:24:35,516 --> 00:24:39,086
[掌声]


582
00:24:39,586 --> 00:24:41,926
所有 iOS 和 iPadOS 设备


583
00:24:41,926 --> 00:24:44,126
均提供此功能


584
00:24:44,976 --> 00:24:47,296
它可以在带有 USB-C 的 


585
00:24:47,296 --> 00:24:47,936
iPad Pro 上使用


586
00:24:48,726 --> 00:24:50,586
对于闪电设备


587
00:24:50,586 --> 00:24:52,666
可以使用适当的适配器


588
00:24:56,746 --> 00:24:59,156
继续使用网络共享


589
00:24:59,156 --> 00:25:02,416
我们支持连接到 


590
00:25:02,416 --> 00:25:02,966
SMB 3.0 服务器


591
00:25:05,476 --> 00:25:06,886
我们支持通过 WiFi


592
00:25:06,886 --> 00:25:10,346
蜂窝和以太网连接


593
00:25:11,426 --> 00:25:13,346
这里有很多令人兴奋的功能


594
00:25:13,346 --> 00:25:15,266
但我们想要提到的


595
00:25:15,266 --> 00:25:18,186
是我们的 iOS 设备


596
00:25:18,186 --> 00:25:19,306
和 iPadOS 设备


597
00:25:19,626 --> 00:25:21,786
我们支持使用 


598
00:25:21,786 --> 00:25:23,166
Windows 搜索协议进行搜索


599
00:25:24,446 --> 00:25:26,156
因此 如果它支持 WSP 协议


600
00:25:26,156 --> 00:25:27,766
所有这些设备都可以


601
00:25:28,536 --> 00:25:29,636
搜索你们的 SMB 服务器


602
00:25:30,896 --> 00:25:32,926
我们也非常高兴地


603
00:25:32,926 --> 00:25:34,266
宣布它包括


604
00:25:34,546 --> 00:25:36,636
SMB 服务器和 macOS Catalina


605
00:25:41,526 --> 00:25:43,186
在继续之前


606
00:25:43,186 --> 00:25:44,486
我想谈谈安全问题


607
00:25:45,296 --> 00:25:47,126
安全性是用户期望


608
00:25:47,126 --> 00:25:48,966
从 iOS 获得的功能


609
00:25:49,856 --> 00:25:51,956
我们用于帮助


610
00:25:51,956 --> 00:25:54,366
实现此安全性的


611
00:25:54,706 --> 00:25:56,806
两个工具是进程


612
00:25:56,806 --> 00:25:57,436
分离和权限分离


613
00:25:57,986 --> 00:26:00,196
在开发此功能时


614
00:26:00,296 --> 00:26:01,446
我们始终牢记这一点


615
00:26:01,446 --> 00:26:03,206
并将其从头开始合并


616
00:26:04,446 --> 00:26:06,756
因此 对于我们


617
00:26:06,756 --> 00:26:08,306
所有的卷和共享


618
00:26:08,306 --> 00:26:10,586
文件系统操作


619
00:26:10,636 --> 00:26:12,466
不是发生在内核上


620
00:26:12,496 --> 00:26:13,456
而是发生在专用的进程空间中


621
00:26:14,226 --> 00:26:16,906
这种分离有助于


622
00:26:17,126 --> 00:26:19,746
我们提供 iOS 用户期望的安全性


623
00:26:22,616 --> 00:26:23,976
现在 让我们在一个实际操作中看到它


624
00:26:27,196 --> 00:26:28,976
好的 我有一台 iPad


625
00:26:35,206 --> 00:26:37,936
那么我不知道 - 你们可能看不到它


626
00:26:37,936 --> 00:26:39,326
但我连接了 USB


627
00:26:40,546 --> 00:26:41,566
我有邮件


628
00:26:42,266 --> 00:26:46,356
在文件的左侧


629
00:26:46,356 --> 00:26:48,066
你们可以看到它的位置


630
00:26:48,676 --> 00:26:49,786
iCloud Drive


631
00:26:50,316 --> 00:26:51,676
如果我们有第三方云提供商


632
00:26:51,676 --> 00:26:53,486
我们也会在那里把他们列出


633
00:26:53,486 --> 00:26:57,336
我们看到了我们的 USB 设备的目的地


634
00:26:57,926 --> 00:27:01,316
当我们选择它时


635
00:27:01,506 --> 00:27:04,146
我们会看到我们的照片


636
00:27:04,146 --> 00:27:05,906
文档 所有文件和目录


637
00:27:06,516 --> 00:27:10,866
我们可以像文件 App 中的


638
00:27:10,866 --> 00:27:13,246
任何其他文件一样操纵它们


639
00:27:13,246 --> 00:27:16,516
因此 要复制一个 你们只需选择它


640
00:27:16,516 --> 00:27:18,846
准备拖放 


641
00:27:18,846 --> 00:27:21,316
选择目的地


642
00:27:21,986 --> 00:27:23,966
拖动它 然后放下它


643
00:27:24,436 --> 00:27:25,356
你现在可以看到它


644
00:27:25,356 --> 00:27:25,916
已经在文件夹中了


645
00:27:28,826 --> 00:27:30,016
我们喜欢用设备做的


646
00:27:30,016 --> 00:27:33,266
另一件事就是让照片复制


647
00:27:33,766 --> 00:27:35,016
到它们上面


648
00:27:35,226 --> 00:27:37,136
照片 我有一张


649
00:27:37,136 --> 00:27:38,726
我朋友在印度吃西红柿的照片


650
00:27:40,366 --> 00:27:43,146
我们将它保存到 USB 中


651
00:27:43,406 --> 00:27:44,986
为此 我们只需选择文档


652
00:27:44,986 --> 00:27:50,156
转到“分享”


653
00:27:50,156 --> 00:27:52,196
然后在列表中下载以“保存到文件”


654
00:27:53,056 --> 00:27:55,106
你们可以看到 作为目的地


655
00:27:55,106 --> 00:27:56,836
我们列出了 USB


656
00:27:57,436 --> 00:27:59,226
我们只是选择了它


657
00:27:59,226 --> 00:27:59,986
它已经是了


658
00:28:00,036 --> 00:28:00,806
我们点击了保存


659
00:28:01,496 --> 00:28:02,856
然后它就被复制了


660
00:28:03,516 --> 00:28:08,666
[欢呼和掌声]


661
00:28:09,166 --> 00:28:10,906
我希望你们很多人


662
00:28:10,906 --> 00:28:12,176
都是 App 开发人员


663
00:28:12,226 --> 00:28:13,216
而且你们想知道 


664
00:28:13,216 --> 00:28:15,026
你们的 App 如何利用这一点


665
00:28:15,946 --> 00:28:17,776
此功能适用于


666
00:28:17,776 --> 00:28:19,556
在 iOS 13 上或之后链接的


667
00:28:19,616 --> 00:28:21,266
任何所有 App


668
00:28:22,326 --> 00:28:23,706
因此 请重新构建 App


669
00:28:24,116 --> 00:28:25,166
你可以开始利用


670
00:28:26,626 --> 00:28:28,636
为了实现这一点


671
00:28:28,636 --> 00:28:29,356
我们来看看 Numbers 表格


672
00:28:29,986 --> 00:28:32,926
当我打开 Numbers 表格时


673
00:28:32,926 --> 00:28:34,146
它就开始了 -- 它是从我的


674
00:28:34,146 --> 00:28:34,796
iCloud Drive 开始的


675
00:28:35,966 --> 00:28:37,736
USB 被列为目的地


676
00:28:38,396 --> 00:28:39,976
我们选择它


677
00:28:43,166 --> 00:28:44,446
在那里 我们可以看到


678
00:28:44,446 --> 00:28:45,066
我们所有的文件


679
00:28:45,146 --> 00:28:47,846
我们可以看到我们的照片变暗


680
00:28:48,056 --> 00:28:49,596
因为它们不是 Numbers 表格


681
00:28:49,876 --> 00:28:51,586
然后我们看到我们在这个驱动器上


682
00:28:51,896 --> 00:28:54,126
有两个 Numbers 表格


683
00:28:55,266 --> 00:28:56,806
让我们打开其中一个


684
00:28:56,806 --> 00:28:59,186
这是一项贷款比较


685
00:28:59,186 --> 00:29:00,616
比较两种不同的贷款金额


686
00:29:00,616 --> 00:29:01,656
和两种不同的利率


687
00:29:02,836 --> 00:29:03,976
仅仅为了比较


688
00:29:03,976 --> 00:29:04,546
让我们看看如果我们


689
00:29:04,546 --> 00:29:09,246
提高利率会发生什么 不 Oh


690
00:29:10,016 --> 00:29:11,056
[笑声]


691
00:29:11,056 --> 00:29:11,976
把它设置为 20 而不是 200


692
00:29:18,046 --> 00:29:21,856
哦 不 好吧 这太疯狂了


693
00:29:22,508 --> 00:29:24,508
[笑声]


694
00:29:27,056 --> 00:29:28,926
你可以看到 - 


695
00:29:28,926 --> 00:29:30,956
现场可以看到利率正在变化


696
00:29:38,396 --> 00:29:42,246
那么这对开发者来说意味着什么呢


697
00:29:43,306 --> 00:29:46,546
正如我所说的 如果你们在 


698
00:29:46,546 --> 00:29:47,966
iOS 13 上或之后进行链接


699
00:29:47,966 --> 00:29:48,526
则可以使用它


700
00:29:48,686 --> 00:29:50,586
因此 请重新构建 App 并进行测试


701
00:29:55,346 --> 00:29:56,726
我们在 iOS 中添加了


702
00:29:56,726 --> 00:29:58,956
五种不同的文件系统类型


703
00:29:59,836 --> 00:30:01,636
这些文件系统


704
00:30:01,636 --> 00:30:03,876
与内部闪存存储上的


705
00:30:03,876 --> 00:30:05,216
APFS 略有不同


706
00:30:07,216 --> 00:30:09,836
一个区别是 iOS 总是有


707
00:30:09,836 --> 00:30:11,896
区分大小写的文件系统


708
00:30:12,796 --> 00:30:14,076
FAT 和 ExFAT 


709
00:30:14,366 --> 00:30:15,636
不区分大小写


710
00:30:16,716 --> 00:30:18,816
并且可以以任何方式


711
00:30:18,816 --> 00:30:19,996
配置 HFS 和 APFS


712
00:30:21,636 --> 00:30:24,056
克隆系统调用


713
00:30:24,056 --> 00:30:24,876
可能并不总是可用的


714
00:30:26,246 --> 00:30:28,206
因此 这些差异是 -- 


715
00:30:28,326 --> 00:30:29,386
如果这些差异对你们或


716
00:30:29,386 --> 00:30:30,926
确实很重要


717
00:30:31,646 --> 00:30:33,676
请注意卷功能


718
00:30:34,656 --> 00:30:37,106
有两种不同的 API 或


719
00:30:37,106 --> 00:30:38,966
几种 API 可以为你们提供


720
00:30:39,746 --> 00:30:41,826
我想要调用的是


721
00:30:41,826 --> 00:30:44,406
NSURL 中的 resourceValues


722
00:30:45,576 --> 00:30:47,726
这些可以为你们


723
00:30:47,726 --> 00:30:48,976
正在使用的文件系统提供参数


724
00:30:52,296 --> 00:30:53,756
另一个重点是


725
00:30:54,176 --> 00:30:58,006
文件移动可能需要一些时间


726
00:30:58,186 --> 00:31:00,006
所以请将临时文件


727
00:31:00,006 --> 00:31:02,066
放在工作文件附近


728
00:31:02,696 --> 00:31:05,226
如果你不这么做


729
00:31:05,226 --> 00:31:09,706
这很有帮助 因为保存 -- 保存


730
00:31:09,946 --> 00:31:12,136
在最后使用重命名 以便用户


731
00:31:12,136 --> 00:31:13,496
总能看到一个好的文件


732
00:31:13,666 --> 00:31:15,456
他们要么看到


733
00:31:15,456 --> 00:31:17,216
他们开始的文件


734
00:31:17,276 --> 00:31:18,046
要么看到新的保存


735
00:31:19,356 --> 00:31:21,146
为此 我们需要重命名


736
00:31:21,496 --> 00:31:22,466
只有当它们都在同一个


737
00:31:22,466 --> 00:31:23,936
文件系统上时才有效


738
00:31:25,466 --> 00:31:26,806
此外 如果你们对


739
00:31:26,806 --> 00:31:28,036
临时文件不小心


740
00:31:28,036 --> 00:31:29,986
它们可能会在内部存储的


741
00:31:29,986 --> 00:31:31,116
容器中结束


742
00:31:31,766 --> 00:31:32,686
这将导致许多


743
00:31:32,686 --> 00:31:33,976
不必要的 IO


744
00:31:38,016 --> 00:31:39,786
文件管理器可以帮助你们解决此问题


745
00:31:40,286 --> 00:31:42,796
如果你们要求提供


746
00:31:42,796 --> 00:31:44,496
适合你们的文档的


747
00:31:44,766 --> 00:31:46,456
itemReplacementDirectory 的 URL


748
00:31:46,706 --> 00:31:48,106
它将在同一文件系统上


749
00:31:48,106 --> 00:31:49,976
为你们提供一个临时目录


750
00:31:55,406 --> 00:31:56,856
另一件事是


751
00:31:56,856 --> 00:31:58,016
外部设备可能会消失


752
00:31:59,416 --> 00:32:01,206
网络可能超出范围


753
00:32:02,226 --> 00:32:03,876
文件服务器可能会关闭


754
00:32:04,486 --> 00:32:05,826
甚至一只猫可能会咬开电缆


755
00:32:07,236 --> 00:32:08,556
这些事情都可能发生


756
00:32:08,916 --> 00:32:10,106
并且你们的 App 需要


757
00:32:10,106 --> 00:32:12,126
在面对它时是结实的


758
00:32:12,666 --> 00:32:13,886
我特别想指出的一点


759
00:32:13,886 --> 00:32:16,656
是 mmap 可能很危险


760
00:32:17,366 --> 00:32:18,666
它真的很强大


761
00:32:18,986 --> 00:32:20,826
但是如果文件消失了


762
00:32:20,826 --> 00:32:22,096
内核可以告诉你的唯一方法


763
00:32:22,096 --> 00:32:23,666
就是报告 BUS 错误


764
00:32:25,536 --> 00:32:28,586
所以有一件事


765
00:32:28,646 --> 00:32:31,066
如果你正在使用 NSData 你可以


766
00:32:31,066 --> 00:32:33,606
提供一个提示 如果它是安全的


767
00:32:33,636 --> 00:32:34,966
你可以从文件中读出 mmap 这个数据


768
00:32:40,086 --> 00:32:41,346
最后一点是外部设备


769
00:32:41,346 --> 00:32:42,796
所有这些设备


770
00:32:42,886 --> 00:32:44,626
在内部闪存存储器上


771
00:32:44,666 --> 00:32:46,376
具有比 APFS 更高的延迟


772
00:32:47,566 --> 00:32:50,236
因此 如果你们正在进行大规模的 IO 


773
00:32:50,236 --> 00:32:53,226
请立即保留多个操作


774
00:32:53,396 --> 00:32:53,976
未完成状态


775
00:32:58,336 --> 00:33:00,206
因此 为了总结今天的演讲


776
00:33:01,696 --> 00:33:03,116
Max 与我们讨论了


777
00:33:03,116 --> 00:33:06,086
如何使根卷只读


778
00:33:06,456 --> 00:33:07,376
以增强安全性


779
00:33:08,046 --> 00:33:12,296
Jon 与我们讨论了 ASR 以及


780
00:33:12,296 --> 00:33:14,246
如何使用 ASR 复制卷


781
00:33:14,246 --> 00:33:16,506
包括快照增量


782
00:33:17,106 --> 00:33:19,926
我和你们谈了


783
00:33:19,926 --> 00:33:20,846
我们如何在 iOS 和 


784
00:33:20,846 --> 00:33:22,856
iPadOS 上添加对外部文件的支持


785
00:33:22,856 --> 00:33:25,206
以及如何让你


786
00:33:25,546 --> 00:33:28,316
访问 USB 存储和网络共享上的文件


787
00:33:30,346 --> 00:33:32,356
有关更多信息 我们在


788
00:33:32,356 --> 00:33:34,126
本次会议后有一次实验室


789
00:33:34,726 --> 00:33:37,286
另外明天 有一个


790
00:33:38,906 --> 00:33:40,656
Foundation 中的 Combine 和 Advances


791
00:33:40,696 --> 00:33:41,866
的演讲 他们将


792
00:33:41,866 --> 00:33:43,456
更多地谈论你可以在


793
00:33:43,456 --> 00:33:45,736
外部媒体上做什么


794
00:33:45,876 --> 00:33:48,046
此外 还有一个视频会话


795
00:33:48,046 --> 00:33:52,606
文件管理和 Quick Look 的新内容


796
00:33:52,746 --> 00:33:57,406
将更多地讨论本演讲 UI 文档方面的内容 谢谢大家


797
00:33:58,516 --> 00:34:04,500
[掌声]

