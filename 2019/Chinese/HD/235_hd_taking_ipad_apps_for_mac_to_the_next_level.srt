1
00:00:06,907 --> 00:00:10,878 line:0
（把对Mac引入iPad app
提升到一个新层级）


2
00:00:10,943 --> 00:00:12,112 line:-1
下午好


3
00:00:16,750 --> 00:00:18,185 line:-1
我是Jamie Montgomerie


4
00:00:18,252 --> 00:00:19,553 line:-1
我来自UIKit团队


5
00:00:19,620 --> 00:00:22,322 line:-2
我将和我的同事Glen、Nils
和Chris一起


6
00:00:23,056 --> 00:00:24,625 line:-1
与大家分享


7
00:00:24,691 --> 00:00:27,194 line:-2
把对Mac引入iPad app
提升到一个新层级


8
00:00:29,263 --> 00:00:31,965 line:-2
在我们的第一场演讲关于对Mac
引入iPad app的介绍中


9
00:00:32,432 --> 00:00:33,534 line:-1
我们讲了一些基本知识


10
00:00:33,600 --> 00:00:35,269 line:-1
我们讲了如何创建app


11
00:00:35,335 --> 00:00:37,671 line:-1
并讨论了一些你应该引起注意的


12
00:00:37,738 --> 00:00:38,572 line:-1
主要的API的不同点


13
00:00:39,573 --> 00:00:41,775 line:-2
在这场演讲中
我们会讲如何更进一步


14
00:00:42,075 --> 00:00:43,610 line:-2
并让你的app更好地
在Mac上运作


15
00:00:44,077 --> 00:00:45,579 line:-1
包括多平台之间的区别


16
00:00:46,046 --> 00:00:48,048 line:-1
再提一下设计注意事项


17
00:00:48,949 --> 00:00:51,652 line:-2
讲一下Mac上的app生命周期
有什么不用


18
00:00:52,085 --> 00:00:54,221 line:-1
讨论如何分配你的app


19
00:00:54,288 --> 00:00:55,923 line:-2
（让你的app更进一步
app生命周期）


20
00:00:55,989 --> 00:00:56,857 line:-2
（让你的UIKit app
成为更好的Mac app）


21
00:00:56,924 --> 00:01:00,127 line:-2
让我们讲一下让UIKit app
成为更好的Mac app


22
00:01:01,128 --> 00:01:02,796 line:-1
要记住的第一件事


23
00:01:03,297 --> 00:01:06,800 line:-2
就是iPad版app越好
Mac版app也越好


24
00:01:08,035 --> 00:01:09,803 line:-1
我们会讲你可以采取的一些措施


25
00:01:09,870 --> 00:01:12,673 line:-2
从而使你的app在iPad
和Mac上都变得更好


26
00:01:12,739 --> 00:01:14,141 line:-2
（iPad app越好
Mac app也越好）


27
00:01:15,909 --> 00:01:18,312 line:-2
在iPad上 你的app
可以在所有型号的设备上运行


28
00:01:18,378 --> 00:01:22,583 line:-2
从iPad Mini中侧拉到漂亮
的12.9英寸iPad Pro


29
00:01:23,951 --> 00:01:25,853 line:-2
但现在要在Mac上运行
还不止这些


30
00:01:25,919 --> 00:01:28,822 line:-2
你的app可以在27英寸的
iMac上全屏运行


31
00:01:30,390 --> 00:01:32,292 line:-1
它的屏幕尺寸比例因子是77%


32
00:01:33,660 --> 00:01:37,431 line:-2
事实上 27英寸显示屏
更像是一台35英寸的iPad


33
00:01:38,465 --> 00:01:40,434 line:-1
因此app非常适合那个窗口


34
00:01:41,468 --> 00:01:42,769 line:-1
因此使用最佳范例


35
00:01:42,836 --> 00:01:44,771 line:-1
支持动态类型并使用自动布局


36
00:01:45,239 --> 00:01:48,909 line:-2
最后请记住 app在Mac上
重新调整尺寸的速度很快


37
00:01:49,576 --> 00:01:51,879 line:-2
你的布局代码的运行速度
能达到每秒60帧吗？


38
00:01:52,679 --> 00:01:55,782 line:-2
如果不能 你应该使用我们的
仪器性能工具来检查一下


39
00:01:57,384 --> 00:01:58,752 line:-1
（实施强大的键盘支持）


40
00:01:58,819 --> 00:02:00,988 line:-1
接下来实施强大的键盘支持


41
00:02:01,655 --> 00:02:04,958 line:-2
所有Mac都配有键盘
且Mac用户的双手总放在键盘附近


42
00:02:05,425 --> 00:02:08,228 line:-2
现在iPad配有键盘的情况
越来越常见了


43
00:02:09,196 --> 00:02:12,332 line:-2
你可以用我们的UIKeyCommand类
来响应键盘捷径


44
00:02:13,534 --> 00:02:16,503 line:-2
你可以在你的视图控制器中
响应标准的响应器动作


45
00:02:16,570 --> 00:02:19,406 line:-1
比如剪切、复制和粘贴方法


46
00:02:20,774 --> 00:02:22,609 line:-1
并注意你的响应器ping


47
00:02:23,544 --> 00:02:26,380 line:-1
设置第一响应器 从而容纳键盘命令


48
00:02:26,446 --> 00:02:27,781 line:-1
这对于iPad也有帮助


49
00:02:29,316 --> 00:02:30,717 line:-1
如果你的app是个游戏app


50
00:02:30,784 --> 00:02:33,720 line:-1
对于你的iOS和Mac用户来说


51
00:02:33,787 --> 00:02:35,489 line:-2
考虑支持游戏控制器会让体验变得
更优秀


52
00:02:37,224 --> 00:02:38,525 line:-1
（充分利用拖放）


53
00:02:39,960 --> 00:02:41,161 line:-1
那么几年前


54
00:02:41,228 --> 00:02:43,764 line:-2
我们在UIKit中引入了
一些很棒的拖放API


55
00:02:44,598 --> 00:02:46,667 line:-1
现在iPad用户期待能使用拖放


56
00:02:47,034 --> 00:02:49,369 line:-1
而且Mac用户也期待很久了


57
00:02:50,838 --> 00:02:53,841 line:-2
充分利用UI拖拽交互
和UI释放交互


58
00:02:53,907 --> 00:02:55,976 line:-1
将取悦你的Mac和iPad用户


59
00:02:58,245 --> 00:02:59,346 line:-1
（使用最新的API）


60
00:03:00,314 --> 00:03:01,748 line:-1
这总是一个好建议


61
00:03:02,082 --> 00:03:03,650 line:-1
使用最新的API


62
00:03:04,518 --> 00:03:05,752 line:-1
如果你暂时还没有这样做


63
00:03:06,053 --> 00:03:07,821 line:-1
现在是时候检验你的app了


64
00:03:08,088 --> 00:03:10,290 line:-1
看看是否使用了弃用的API


65
00:03:11,692 --> 00:03:14,862 line:-2
我说过这总是一个好建议
但今年更是如此


66
00:03:15,462 --> 00:03:17,297 line:-1
正如我们在介绍演讲中所讨论的那样


67
00:03:17,364 --> 00:03:21,134 line:-2
许多弃用的iOS API
只是在Mac上不可用


68
00:03:22,269 --> 00:03:24,738 line:-2
因此请使用WKWebView
而不是UIWebView


69
00:03:25,138 --> 00:03:26,874 line:-2
使用Metal
而不是OpenGL ES


70
00:03:27,674 --> 00:03:30,143 line:-2
我们一直在努力开发这些
先进的替代方案


71
00:03:30,210 --> 00:03:32,579 line:-2
使用它们可以
让你在iPad和Mac上


72
00:03:32,646 --> 00:03:34,548 line:-1
充分利用我们所做出的努力


73
00:03:38,752 --> 00:03:41,722 line:-2
最后请支持我们的
新iOS 13功能


74
00:03:42,990 --> 00:03:43,857 line:-1
比如


75
00:03:43,924 --> 00:03:46,226 line:-2
如果你在iPad app中
支持多窗口


76
00:03:46,660 --> 00:03:49,329 line:-2
每个UI窗口场景在Mac上
都是一个窗口


77
00:03:50,831 --> 00:03:55,769 line:-2
在iPad上支持暗黑模式
那你在Mac上也同样支持暗黑模式


78
00:03:56,937 --> 00:04:00,440 line:-2
我本可以把它作为单独的一场演讲
但今年有太多场演讲了


79
00:04:00,741 --> 00:04:03,377 line:-2
请浏览一下演讲目录
并参加一些你感兴趣的演讲


80
00:04:03,810 --> 00:04:06,747 line:-2
请记住iPad版app越好
Mac版app也越好


81
00:04:08,448 --> 00:04:09,850 line:-2
（好的Mac app包含
针对MAC所做出的改善）


82
00:04:10,717 --> 00:04:12,786 line:-2
那么iPad版app越好
Mac版app也越好


83
00:04:12,853 --> 00:04:15,722 line:-2
但好的Mac app同时也包含
仅针对Mac所做出的改善


84
00:04:17,089 --> 00:04:19,993 line:-1
我们要了解一下你可以采取哪些措施


85
00:04:20,060 --> 00:04:22,029 line:-2
让你的UIKit app
在Mac上性能更好


86
00:04:23,363 --> 00:04:25,165 line:-1
这里包含很多东西


87
00:04:25,232 --> 00:04:29,369 line:-2
他们耗费了大量的精力
充分利用现有UIKit API


88
00:04:29,436 --> 00:04:31,038 line:-1
来实现独一无二的Mac功能


89
00:04:32,105 --> 00:04:34,608 line:-2
其中一些API
在Mac上是全新的功能


90
00:04:34,675 --> 00:04:37,177 line:-2
或至少对于UIKit开发人员来说
是全新的功能


91
00:04:38,712 --> 00:04:42,015 line:-2
我们要快速看一下
现在有多少API可用


92
00:04:43,550 --> 00:04:46,520 line:-2
那么提到Mac独有功能
你想到的第一件事是什么？


93
00:04:47,487 --> 00:04:49,590 line:-1
对我来说 是菜单栏


94
00:04:50,958 --> 00:04:52,526 line:-1
全局菜单栏是Mac所独有的功能


95
00:04:53,193 --> 00:04:55,529 line:-2
它们存储用户在一个地方可以采取的
所有可能的行动


96
00:04:55,596 --> 00:04:57,965 line:-1
并把它们在屏幕顶部整洁地隐藏起来


97
00:04:58,966 --> 00:05:00,167 line:-1
它们对于app来说是全局性的


98
00:05:00,934 --> 00:05:03,871 line:-1
并且其中的菜单项根据用户的行动


99
00:05:04,137 --> 00:05:05,239 line:-1
被启用或禁用


100
00:05:06,607 --> 00:05:07,975 line:-2
因此对于Mac上的
iPad app来说


101
00:05:08,442 --> 00:05:09,877 line:-1
你可以接受默认菜单栏


102
00:05:09,943 --> 00:05:11,311 line:-1
不需要任何额外的工作


103
00:05:13,413 --> 00:05:16,116 line:-1
你还可以在界面创建器中组建菜单栏


104
00:05:16,183 --> 00:05:17,618 line:-2
就像我们在第一场演讲中
所看到的那样


105
00:05:18,886 --> 00:05:21,321 line:-2
或者对于字段控件
你可以在代码中进行自定义


106
00:05:23,056 --> 00:05:24,892 line:-2
那么我之前讲过
UIKeyCommand了


107
00:05:24,958 --> 00:05:27,528 line:-1
如果你是个眼尖的API开发人员


108
00:05:27,594 --> 00:05:30,864 line:-2
你会注意到
今年出现了一个新的UI命令超类


109
00:05:32,132 --> 00:05:36,603 line:-2
与它一起的还有UIMenu
和UIMenuBuilder


110
00:05:37,171 --> 00:05:39,673 line:-1
功能是让你全权控制Mac菜单栏


111
00:05:40,474 --> 00:05:41,842 line:-2
我们一会将看到一个
与此有关的演示


112
00:05:43,410 --> 00:05:44,878 line:-1
关于这个API的一个好消息


113
00:05:45,345 --> 00:05:49,316 line:-2
就是你在菜单中使用的
UIKeyCommands也将在iPad上可用


114
00:05:49,383 --> 00:05:51,652 line:-1
当你按下Command键时


115
00:05:51,718 --> 00:05:53,187 line:-2
将在发现生成器中显示
UIKeyCommand


116
00:05:54,254 --> 00:05:57,157 line:-2
因此如果你使用这个API
以获得更好的Mac版app


117
00:05:57,691 --> 00:05:59,426 line:-2
你也可以用它来让你的
iPad版app变得更好


118
00:06:00,827 --> 00:06:02,095 line:-1
（情境菜单）


119
00:06:03,063 --> 00:06:05,199 line:-2
现在Mac中还有另一种菜单
情境菜单


120
00:06:05,732 --> 00:06:07,534 line:-1
点Control或右击显示


121
00:06:08,368 --> 00:06:09,336 line:-1
与主菜单不同


122
00:06:09,403 --> 00:06:10,470 line:-1
它的内容是动态的


123
00:06:10,971 --> 00:06:12,372 line:-1
它们基于鼠标指示下的内容


124
00:06:13,574 --> 00:06:17,144 line:-2
在iOS 2中我们有一个强大的
新UIKit API可用


125
00:06:17,511 --> 00:06:18,912 line:-1
UIContextMenuInteraction


126
00:06:19,947 --> 00:06:22,816 line:-2
它使用UICommand
以及它的兄弟UIAction


127
00:06:23,350 --> 00:06:26,386 line:-2
UIAction是基于区块的
所以也许更适合这种菜单


128
00:06:27,654 --> 00:06:30,324 line:-2
这个跨平台API在Mac上的功能
独一无二


129
00:06:30,390 --> 00:06:32,326 line:-1
显示我们都经常使用的情境菜单


130
00:06:33,794 --> 00:06:35,095 line:-1
要了解更多关于这个API的信息


131
00:06:35,162 --> 00:06:36,163 line:-1
你应该查看我们的


132
00:06:36,230 --> 00:06:39,099 line:-2
针对iOS 13对你的UI
进行现代化处理演讲


133
00:06:41,869 --> 00:06:43,003 line:-1
（侧边栏）


134
00:06:43,837 --> 00:06:45,706 line:-1
我们讲了一些新UIKit API


135
00:06:45,772 --> 00:06:47,441 line:-1
这是一个老UIKit API


136
00:06:47,841 --> 00:06:48,809 line:-1
UISplitViewController


137
00:06:50,043 --> 00:06:53,981 line:-2
Mac上的侧边栏
与iOS分屏中的非常类似


138
00:06:54,314 --> 00:06:56,650 line:-1
它们通常用于掌握UI的详情类型


139
00:06:57,951 --> 00:07:00,354 line:-2
在Mac上UISplitViewController
管理视图


140
00:07:00,420 --> 00:07:03,590 line:-2
自动调整拖动尺寸
从最小栏宽到最大栏宽


141
00:07:04,258 --> 00:07:07,327 line:-2
你可以使用我们的新
primaryBackgroundStyle属性


142
00:07:07,394 --> 00:07:10,397 line:-1
让左边的栏拥有Mac侧边栏的外观


143
00:07:11,865 --> 00:07:13,634 line:-1
当你使用侧边栏背景样式时


144
00:07:14,034 --> 00:07:16,870 line:-2
所嵌入的使用任意一个
群样式的表视图


145
00:07:16,937 --> 00:07:20,240 line:-2
将呈现一个源列表 比如外观
就像在Mac上一样


146
00:07:20,974 --> 00:07:22,910 line:-1
我们马上会在演示中看到这个


147
00:07:27,181 --> 00:07:28,882 line:-1
iPad上不存在悬停


148
00:07:29,149 --> 00:07:31,385 line:-1
但对于Mac用户来说却非常熟悉


149
00:07:32,452 --> 00:07:34,655 line:-2
我们添加了一个
使用手势识别器的新方式


150
00:07:34,721 --> 00:07:36,190 line:-1
UIHoverGestureRecognizer


151
00:07:36,857 --> 00:07:39,126 line:-2
它允许你在UIKit app中
使用悬停


152
00:07:39,893 --> 00:07:41,128 line:-1
在这个屏幕上


153
00:07:41,195 --> 00:07:43,530 line:-2
你可以看到我们的股票app
很好地利用了悬停


154
00:07:44,164 --> 00:07:48,035 line:-1
当用户在价格表上移动时显示价格


155
00:07:51,638 --> 00:07:53,040 line:-1
（Mac工具栏）


156
00:07:54,341 --> 00:07:56,577 line:-1
对于在Mac上完全不同的东西来说


157
00:07:56,643 --> 00:07:58,245 line:-2
我们已经有了一些
很棒的Mac API


158
00:07:59,012 --> 00:08:00,647 line:-1
其中一个例子就是工具栏


159
00:08:01,281 --> 00:08:03,851 line:-2
Mac app通常
在窗口顶部显示工具栏


160
00:08:05,252 --> 00:08:06,620 line:-1
因为这是只有Mac才拥有的功能


161
00:08:06,920 --> 00:08:10,357 line:-2
我们披露了仅适用于Mac的API
NSToolbar


162
00:08:11,291 --> 00:08:14,728 line:-2
你可以通过UIWindowScene的
titlebar属性获取它


163
00:08:15,829 --> 00:08:17,364 line:-1
稍后也会有相关演示


164
00:08:19,433 --> 00:08:20,601 line:-1
（触控栏）


165
00:08:21,335 --> 00:08:23,804 line:-1
另一个Mac独有的栏是触控栏


166
00:08:24,705 --> 00:08:26,340 line:-1
触控栏在Mac上


167
00:08:26,673 --> 00:08:28,642 line:-2
在MacBook Pro上
它们位于键盘上方


168
00:08:28,709 --> 00:08:29,910 line:-1
与情境菜单不同


169
00:08:30,277 --> 00:08:32,446 line:-1
其中的内容取决于用户正在做的操作


170
00:08:33,847 --> 00:08:35,349 line:-1
为了让你支持触控栏


171
00:08:35,414 --> 00:08:38,485 line:-2
我们对UIKit app披露了
现有的NSTouchBar类


172
00:08:39,186 --> 00:08:42,923 line:-2
它通过新的UIResponder
和UIViewController API可用


173
00:08:44,825 --> 00:08:46,026 line:-1
（其它Mac功能）


174
00:08:46,827 --> 00:08:50,063 line:-2
当然还有其它
你可以采用的Mac功能


175
00:08:50,898 --> 00:08:53,000 line:-1
你可以控制窗口的尺寸调整


176
00:08:53,734 --> 00:08:57,104 line:-2
你可以使用iOS打印API
在Mac上实施打印支持


177
00:08:58,338 --> 00:08:59,506 line:-1
你可以出版一本帮助手册


178
00:08:59,573 --> 00:09:02,476 line:-1
让你的用户直接从帮助菜单访问帮助


179
00:09:03,277 --> 00:09:04,978 line:-2
并且你可以自定义
自己的资产和字符串


180
00:09:05,379 --> 00:09:08,682 line:-2
使你的app看起来
更像是Mac版的app


181
00:09:10,984 --> 00:09:12,219 line:-1
（Mac app图标）


182
00:09:12,286 --> 00:09:13,287 line:-1
现在 最后但并不是最不重要的


183
00:09:13,353 --> 00:09:15,088 line:-1
我要提一下app图标


184
00:09:16,256 --> 00:09:18,592 line:-1
如果你什么也不做 Mac版app


185
00:09:18,659 --> 00:09:19,793 line:-1
将使用你iPad版app的图标


186
00:09:20,360 --> 00:09:22,396 line:-2
但Mac的样式与
iPad的样式不同


187
00:09:22,663 --> 00:09:25,933 line:-2
因此你还可以给Mac版
创建一个app图标


188
00:09:27,100 --> 00:09:30,370 line:-2
这听起来很微不足道
但这是你用户看到的第一个元素


189
00:09:30,704 --> 00:09:32,873 line:-2
因此我鼓励你们花点时间和努力
创建Mac版图标


190
00:09:35,309 --> 00:09:36,476 line:-1
（演示）


191
00:09:36,543 --> 00:09:38,278 line:-2
现在我要向大家介绍
我的同事Glen


192
00:09:38,545 --> 00:09:42,049 line:-2
他会给大家演示如何让iPad版
app成为更好的Mac版app


193
00:09:46,253 --> 00:09:47,487 line:-1
谢谢Jaime


194
00:09:49,289 --> 00:09:50,624 line:-1
正如我的同事刚说过的


195
00:09:51,325 --> 00:09:53,827 line:-2
iPad版app越好
Mac版app也越好


196
00:09:54,194 --> 00:09:55,829 line:-1
让我们来看个例子


197
00:09:56,864 --> 00:09:59,466 line:-2
在这里我们有一个叫做
ChocolateChip的app


198
00:09:59,766 --> 00:10:02,402 line:-2
它是一款iPad app
显示美味的菜谱


199
00:10:03,504 --> 00:10:04,705 line:-1
在之前的演示中


200
00:10:06,507 --> 00:10:07,474 line:-1
我们所做的一切就是…


201
00:10:10,310 --> 00:10:11,378 line:-1
好的 让我们等待它加载出来


202
00:10:12,279 --> 00:10:16,550 line:-2
在之前的演示中
我们只勾选了这里的Mac复选框


203
00:10:17,885 --> 00:10:22,389 line:-2
修复所有的创建问题
并创建和运行app 就像这样


204
00:10:26,360 --> 00:10:27,494 line:-1
好的 要花一点时间


205
00:10:28,829 --> 00:10:29,897 line:-1
正如你所看到的


206
00:10:29,963 --> 00:10:31,732 line:-1
我们有了一个全新的Mac app


207
00:10:31,798 --> 00:10:34,168 line:-2
拥有你所期待的
Mac app的所有细节


208
00:10:34,768 --> 00:10:38,839 line:-2
比如 你可以四处拖动
窗口中所显示的所有内容


209
00:10:40,040 --> 00:10:43,844 line:-1
并且如果你支持不同的屏幕尺寸


210
00:10:43,911 --> 00:10:46,547 line:-2
以及优化绘制
就像Jamie所建议的那样


211
00:10:46,947 --> 00:10:51,985 line:-2
你也会获得窗口快速、
流畅地重调尺寸的功能 就像这样


212
00:10:53,720 --> 00:10:55,189 line:-1
现在如果你实施它


213
00:10:55,255 --> 00:10:58,625 line:-1
将在表视图控制器中回调现有移动


214
00:10:59,059 --> 00:11:03,830 line:-2
你还可以在表视图控制器中
进行重新排序 就像这样


215
00:11:04,698 --> 00:11:06,834 line:-1
而不需要进入单独的编辑模式


216
00:11:07,367 --> 00:11:08,435 line:-1
那么这是个Mac功能


217
00:11:10,204 --> 00:11:15,042 line:-2
接下来我们使用了新的
UIContextMenuInteraction API


218
00:11:15,108 --> 00:11:16,310 line:-1
是我们今年引入的API


219
00:11:17,377 --> 00:11:20,480 line:-2
给它配置正确的UIAction
和UICommand


220
00:11:21,515 --> 00:11:25,152 line:-2
然后就可以完美地把你的情境菜单
迁到Mac上


221
00:11:26,320 --> 00:11:28,322 line:-1
因此在这里我得到了添加到收藏夹


222
00:11:29,056 --> 00:11:32,159 line:-2
我可以把甜甜圈作为我的收藏
或我也可以取消收藏


223
00:11:34,194 --> 00:11:35,429 line:-1
现在谈谈菜单


224
00:11:36,697 --> 00:11:41,668 line:-2
你还可以得到一个默认菜单栏
拥有所有


225
00:11:44,438 --> 00:11:45,339 line:-1
你惯用的默认菜单项


226
00:11:45,405 --> 00:11:48,141 line:-1
比如剪切、复制、粘贴、取消和重做


227
00:11:48,742 --> 00:11:52,145 line:-1
这些项 菜单项的启用或禁用


228
00:11:52,212 --> 00:11:54,014 line:-1
取决于响应器链上的东西


229
00:11:56,683 --> 00:12:02,289 line:-2
最后如果你使用iOS中的
新暗黑模式API


230
00:12:02,923 --> 00:12:06,093 line:-2
并使用这些系统颜色
指定你自己的颜色


231
00:12:07,127 --> 00:12:10,097 line:-1
那么暗黑模式效果也会很不错


232
00:12:11,231 --> 00:12:13,200 line:-1
正如你所看到的 一切都变暗了


233
00:12:14,268 --> 00:12:15,502 line:-1
并且你所有的颜色都已经设置好了


234
00:12:15,569 --> 00:12:18,405 line:-2
而且你所有的突显
也都进行了正确的设置


235
00:12:19,339 --> 00:12:21,742 line:-2
而所有这一切
都不需要添加任何一行代码


236
00:12:25,846 --> 00:12:26,914 line:-1
是的 谢谢


237
00:12:30,617 --> 00:12:35,289 line:-2
但如果你想把你的app
提升到下一个层级该怎么做呢？


238
00:12:36,123 --> 00:12:39,393 line:-2
如果你想让它在Mac上看起来
或感觉起来更像是Mac app


239
00:12:40,294 --> 00:12:41,228 line:-1
我们要怎么做呢？


240
00:12:41,595 --> 00:12:43,830 line:-1
嗯 今天让我们修复三个功能


241
00:12:44,965 --> 00:12:47,601 line:-1
侧边栏、工具栏和菜单栏


242
00:12:48,769 --> 00:12:51,839 line:-2
那么看起来
今天我将是你们友好的酒保


243
00:12:55,976 --> 00:12:57,244 line:-1
是的 谢谢


244
00:13:00,914 --> 00:13:02,916 line:-1
好的 第一件事是…


245
00:13:03,784 --> 00:13:06,353 line:-1
请看这里的这个主视图


246
00:13:06,420 --> 00:13:10,190 line:-1
这是常规的分屏控制器的主视图


247
00:13:10,958 --> 00:13:14,061 line:-2
但它确实应该看起来像一个
Mac工具栏


248
00:13:14,561 --> 00:13:15,596 line:-1
那么让我们设置…


249
00:13:15,996 --> 00:13:17,865 line:-1
让我们看看如何设置工具栏的样式


250
00:13:19,666 --> 00:13:22,836 line:-2
首先我们进入
RecipeSplitViewController


251
00:13:22,903 --> 00:13:28,909 line:-2
我们需要钩住viewDidLoad…
委托调用


252
00:13:29,910 --> 00:13:33,714 line:-2
在这里 我们的调用必须针对Mac
对UIKit进行条件化


253
00:13:34,715 --> 00:13:37,518 line:-1
从而它只应用于Mac创建


254
00:13:38,719 --> 00:13:43,390 line:-2
我们只需要插入一个
primaryBackgroundStyle


255
00:13:44,558 --> 00:13:47,661 line:-1
以及你知道的 侧边栏的一个新枚举


256
00:13:48,562 --> 00:13:51,865 line:-1
那么通过这一行代码 我们现在有…


257
00:13:54,234 --> 00:13:55,536 line:-1
我们进行了快速重新创建


258
00:13:57,471 --> 00:13:59,339 line:-1
我们现在有侧边栏样式了


259
00:14:00,340 --> 00:14:04,444 line:-2
只是为了给你展示它的样子
并让你确信


260
00:14:04,511 --> 00:14:05,946 line:-1
它真的看起来像是个侧边栏


261
00:14:06,280 --> 00:14:08,715 line:-1
当我四处移动它时


262
00:14:09,149 --> 00:14:10,083 line:-1
你可以看到它有侧边栏的半透明性


263
00:14:11,785 --> 00:14:14,588 line:-1
你还可以设置侧边栏的其它特性


264
00:14:14,922 --> 00:14:17,758 line:-1
在通用偏好中 设置侧边栏图标尺寸


265
00:14:18,425 --> 00:14:19,993 line:-1
在这里我把它设置为小图标


266
00:14:20,394 --> 00:14:22,429 line:-1
你可以看到它进行了动态更新


267
00:14:23,163 --> 00:14:24,198 line:-1
你还可以把它设为大图标


268
00:14:25,599 --> 00:14:26,533 line:-1
我要把它设为中图标


269
00:14:27,267 --> 00:14:28,402 line:-1
跟以前一样


270
00:14:29,303 --> 00:14:31,605 line:-1
重排序…跟以前一样


271
00:14:34,508 --> 00:14:35,409 line:-1
好的


272
00:14:37,778 --> 00:14:39,713 line:-1
抱歉 返回到app中


273
00:14:42,082 --> 00:14:44,051 line:-1
接下来 我们应该有一个工具栏


274
00:14:44,618 --> 00:14:47,888 line:-1
我们有整合到标题栏中的许多小工具


275
00:14:48,488 --> 00:14:49,523 line:-1
因此…


276
00:14:51,325 --> 00:14:53,760 line:-1
用户可以点击他们常用的命令


277
00:14:54,528 --> 00:14:56,530 line:-1
现在这与iOS不同


278
00:14:56,597 --> 00:15:00,300 line:-1
工具栏一般处于app底部


279
00:15:01,335 --> 00:15:03,904 line:-1
我们有一个用于筛选菜谱的小工具


280
00:15:04,605 --> 00:15:07,207 line:-2
我们还有一个
用于添加新菜谱的小工具


281
00:15:07,808 --> 00:15:08,909 line:-1
因此让我们看看该如何实现


282
00:15:11,612 --> 00:15:13,247 line:-1
我们要进入场景委托


283
00:15:13,881 --> 00:15:15,649 line:-1
在这里在场景委托中


284
00:15:16,149 --> 00:15:19,119 line:-2
我们要钩住场景
willConnect回调


285
00:15:20,888 --> 00:15:25,325 line:-2
我们要对UIKitForMac
也进行条件化


286
00:15:25,692 --> 00:15:26,960 line:-1
从而使它只在Mac中应用


287
00:15:28,295 --> 00:15:32,366 line:-2
我们要深入到场景的对象模型中…
这里的windowScene


288
00:15:33,166 --> 00:15:35,802 line:-2
并获取这个叫做
titlebar的对象


289
00:15:36,069 --> 00:15:37,671 line:-1
Titlebar允许我们设置


290
00:15:38,472 --> 00:15:42,209 line:-1
工具栏以及修改标题栏是否可见


291
00:15:42,843 --> 00:15:46,146 line:-1
因此让我们创建一个新工具栏


292
00:15:49,917 --> 00:15:54,087 line:-2
请注意
现在我正在使用NS前缀


293
00:15:54,154 --> 00:15:55,956 line:-1
这实际上是一个AppKit对象


294
00:15:58,458 --> 00:15:59,893 line:-1
我需要给它赋予一个标识符


295
00:16:01,195 --> 00:16:05,499 line:-1
之前我已经设置好一个标识符了


296
00:16:06,900 --> 00:16:09,102 line:-1
现在我所需要做的就是标题栏


297
00:16:09,536 --> 00:16:12,573 line:-2
我想把工具栏设置到
我刚创建的工具栏


298
00:16:13,407 --> 00:16:14,608 line:-1
那么通过这两行代码


299
00:16:15,075 --> 00:16:16,443 line:-1
我现在已经创建了一个


300
00:16:17,110 --> 00:16:18,445 line:-1
附加到标题栏上的工具栏


301
00:16:20,147 --> 00:16:22,316 line:-1
但这个代码并不是特别有意思


302
00:16:22,382 --> 00:16:24,484 line:-1
或者结果并不是特别有意思 因为


303
00:16:25,085 --> 00:16:27,521 line:-1
我们实际上需要配置实际项的工具栏


304
00:16:28,021 --> 00:16:29,223 line:-1
让我们看看如何实现


305
00:16:35,896 --> 00:16:37,397 line:-1
我要让你来分配这个代码


306
00:16:38,599 --> 00:16:41,602 line:-2
首先 我们要获取…我们需要获取
rootViewController


307
00:16:42,703 --> 00:16:46,540 line:-2
然后我们把它传给
ToolbarDelegate的初始化工具


308
00:16:46,607 --> 00:16:47,975 line:-1
它是我们创建的一个类


309
00:16:49,443 --> 00:16:50,511 line:-1
然后我们设置委托


310
00:16:51,278 --> 00:16:54,648 line:-1
我们想让用户自定义工具栏


311
00:16:55,482 --> 00:16:58,252 line:-2
我们还想使
navigationItem居中


312
00:16:58,318 --> 00:17:00,153 line:-2
navigationItem
就是我刚才讲过的筛选器


313
00:17:01,121 --> 00:17:06,393 line:-2
最后我想把
titleVisibility设置为隐藏


314
00:17:06,460 --> 00:17:08,862 line:-1
从而标题不会覆盖…


315
00:17:10,329 --> 00:17:12,833 line:-1
我刚才所创建的导航项


316
00:17:14,134 --> 00:17:18,739 line:-1
通过迅速重编译和创建


317
00:17:19,573 --> 00:17:20,840 line:-1
我们现在有工具栏了


318
00:17:22,175 --> 00:17:26,646 line:-2
你可以看到工具栏有
针对各种膳食的筛选器


319
00:17:26,713 --> 00:17:30,450 line:-2
因此 你知道的 对于早餐
我觉得我想吃甜甜圈


320
00:17:32,252 --> 00:17:33,453 line:-1
对于午餐 我想吃披萨


321
00:17:34,655 --> 00:17:36,089 line:-1
对于晚餐 我想吃意面


322
00:17:36,723 --> 00:17:38,926 line:-1
对于甜点 我很可能不想再吃意面了


323
00:17:40,827 --> 00:17:41,962 line:-1
哇哦 是巧克力片饼干


324
00:17:44,932 --> 00:17:47,868 line:-1
是的 我们还有一个加号小工具


325
00:17:47,935 --> 00:17:49,469 line:-1
或添加菜谱项小工具


326
00:17:50,070 --> 00:17:53,807 line:-1
允许我们添加新菜谱


327
00:17:55,609 --> 00:17:56,577 line:-1
好的


328
00:17:58,145 --> 00:18:02,015 line:-1
最后我们实际上还应该自定义菜单栏


329
00:18:02,082 --> 00:18:06,753 line:-2
从而使用户们可以在便利的位置
找到他们想要的全部命令


330
00:18:07,387 --> 00:18:10,457 line:-2
你可以在菜单栏中放置
你想要放置的全部命令


331
00:18:10,524 --> 00:18:13,026 line:-1
系统会相应地启用或禁用它们


332
00:18:13,694 --> 00:18:17,865 line:-2
与此相对的是在工具栏中
你可能只想放一些常用的命令


333
00:18:19,433 --> 00:18:20,701 line:-1
在介绍演讲中


334
00:18:21,034 --> 00:18:22,769 line:-1
我们讲了如何在工具栏中放常用命令


335
00:18:23,303 --> 00:18:26,573 line:-2
通过从Xcode界面创建器中
拖出菜单栏实现


336
00:18:27,207 --> 00:18:30,911 line:-2
但有时你想在运行时
更好地控制你的菜单


337
00:18:31,278 --> 00:18:32,946 line:-1
因此我要告诉你如何通过代码实现


338
00:18:34,481 --> 00:18:35,616 line:-1
我们要做什么？


339
00:18:35,682 --> 00:18:37,317 line:-1
我们要移除格式按钮


340
00:18:37,584 --> 00:18:41,188 line:-1
因为格式按钮看起来用处不大


341
00:18:42,422 --> 00:18:43,957 line:-2
因为这个app没有
任何可编辑的文本


342
00:18:44,625 --> 00:18:49,630 line:-2
因此在字体菜单或甚至是文本对齐
用处都不大


343
00:18:51,098 --> 00:18:54,801 line:-2
我们还要向文件菜单中
添加两个菜单项


344
00:18:55,502 --> 00:18:59,840 line:-2
那么在这里
我想添加一个新菜谱命令


345
00:18:59,907 --> 00:19:03,110 line:-1
类似于这里的添加菜谱小工具


346
00:19:05,012 --> 00:19:09,183 line:-2
我们还要添加一个命令
用于添加或移除收藏状态


347
00:19:09,249 --> 00:19:12,920 line:-1
类似于这里的情境菜单


348
00:19:14,755 --> 00:19:16,523 line:-1
好了 让我们看看要如何实现


349
00:19:20,294 --> 00:19:21,628 line:-1
我们要进入app委托


350
00:19:22,396 --> 00:19:25,532 line:-2
在这里在app委托中
我们需要重写一个方法


351
00:19:30,304 --> 00:19:33,473 line:-2
这个方法是带有创建器的
buildCommands


352
00:19:34,041 --> 00:19:35,776 line:-2
它传递一个
UICommandBuilder


353
00:19:36,410 --> 00:19:37,811 line:-1
在后续的种子中


354
00:19:37,878 --> 00:19:40,848 line:-2
这将被叫做buildMenu
并且…


355
00:19:41,748 --> 00:19:45,986 line:-2
buildMenu带有创建器
系统会给它传递一个UIMenuBuilder


356
00:19:46,053 --> 00:19:50,858 line:-2
因此请注意
如果你正在使用当前的种子


357
00:19:52,092 --> 00:19:55,128 line:-2
你需要做的第一件事就是
确保我们当前是在


358
00:19:55,195 --> 00:19:56,330 line:-1
创建主菜单


359
00:19:56,930 --> 00:20:00,968 line:-1
在这里我们要检查系统是否为主系统


360
00:20:01,602 --> 00:20:04,071 line:-2
有时候你会得到
一个.context


361
00:20:04,137 --> 00:20:06,173 line:-1
如果你创建的是情境菜单


362
00:20:08,041 --> 00:20:09,977 line:-1
于是我们需要与创建器沟通


363
00:20:10,577 --> 00:20:14,081 line:-1
那么创建器 我想移除


364
00:20:16,049 --> 00:20:17,117 line:-1
一个特定菜单


365
00:20:18,085 --> 00:20:21,088 line:-2
在这里我想要移除的这个菜单
是一个格式菜单


366
00:20:21,154 --> 00:20:24,124 line:-2
正如你所看到的
代码完成给你提供了许多帮助


367
00:20:24,625 --> 00:20:29,296 line:-1
并建议你实际上可以移除哪种菜单


368
00:20:32,065 --> 00:20:35,636 line:-1
快速创建和运行


369
00:20:36,236 --> 00:20:38,338 line:-2
你可以看到
我们已经从编辑和浏览中间


370
00:20:38,605 --> 00:20:39,840 line:-1
移除了格式菜单


371
00:20:41,842 --> 00:20:43,877 line:-1
让我们返回去看这个


372
00:20:44,778 --> 00:20:46,613 line:-1
创建器实际上非常灵活


373
00:20:46,680 --> 00:20:49,950 line:-2
你可以实现一切操作
从替换整个菜单结构


374
00:20:50,350 --> 00:20:52,619 line:-2
到做出选择性编辑
比如我所做的操作


375
00:20:56,223 --> 00:20:59,026 line:-2
好的 我要做的下一件事是
我实际上想插入内容


376
00:20:59,793 --> 00:21:04,097 line:-2
让我们与创建器沟通一下
比如说在开始插入一个子菜单


377
00:21:04,898 --> 00:21:09,903 line:-1
插入到这里的文件菜单中


378
00:21:12,206 --> 00:21:13,707 line:-1
这个内容怎么样？


379
00:21:16,777 --> 00:21:21,248 line:-1
在这里我有一些


380
00:21:21,748 --> 00:21:23,417 line:-1
要添加的命令


381
00:21:24,051 --> 00:21:25,786 line:-2
第一个是
newRecipeCommand


382
00:21:26,453 --> 00:21:33,293 line:-2
它是一个关键命令
钩住createRecipe方法


383
00:21:34,895 --> 00:21:39,733 line:-2
它是一个关键命令
因此它会取出输入


384
00:21:39,800 --> 00:21:41,001 line:-1
和命令及选项


385
00:21:41,068 --> 00:21:44,571 line:-2
因此如果你按命令选项f
你还可以调用


386
00:21:44,638 --> 00:21:45,672 line:-1
这个UIKeyCommand


387
00:21:46,240 --> 00:21:49,109 line:-2
拥有UIKeyCommand
的一个好处是


388
00:21:50,310 --> 00:21:51,578 line:-1
它是一个完美的跨平台命令


389
00:21:51,645 --> 00:21:53,413 line:-1
它还将出现在 你知道的


390
00:21:53,480 --> 00:21:57,918 line:-2
在iPad上可暴露性视图
或不可暴露性视图也有这个命令


391
00:21:58,352 --> 00:22:00,921 line:-1
因此不需要条件化任何代码


392
00:22:00,988 --> 00:22:03,323 line:-1
它在Mac和iOS上都能用


393
00:22:05,893 --> 00:22:09,096 line:-2
接下来我们可以创建
makeFavoriteCommand


394
00:22:09,763 --> 00:22:12,499 line:-2
这只是一个常规的命令
没有任何密钥等效


395
00:22:13,667 --> 00:22:18,472 line:-2
它会进入toggleSelected
RecipeFavoriteState


396
00:22:20,574 --> 00:22:21,808 line:-1
最后我们要做一个菜单


397
00:22:21,875 --> 00:22:25,879 line:-1
它是一个结构 把新命令…


398
00:22:25,946 --> 00:22:27,881 line:-2
newRecipeCommand和
makeFavoriteCommand聚集在一起


399
00:22:28,949 --> 00:22:32,386 line:-2
这里要突出一件事
就是我们传递displayInline的选项


400
00:22:32,886 --> 00:22:36,423 line:-1
因此菜单将被显示…


401
00:22:36,890 --> 00:22:39,459 line:-2
菜单中的内容将
与父菜单项的内容一起显示


402
00:22:40,594 --> 00:22:42,129 line:-1
如果你漏掉了这些选项


403
00:22:42,763 --> 00:22:45,966 line:-1
菜单项将被作为分层菜单显示


404
00:22:46,033 --> 00:22:48,168 line:-1
你可能会在Mac上使用分层菜单


405
00:22:49,803 --> 00:22:52,239 line:-1
好的 让我们看看它是什么样子的


406
00:22:55,042 --> 00:22:56,577 line:-1
我们把这个插入到…


407
00:22:56,643 --> 00:22:57,744 line:-1
插入文件菜单的开端


408
00:22:59,780 --> 00:23:01,982 line:-1
好的 我们进行了迅速的创建并运行


409
00:23:04,218 --> 00:23:07,821 line:-2
你可以看到
它现在有一个新菜谱命令


410
00:23:07,888 --> 00:23:10,090 line:-1
与那个加号小工具的功能一样


411
00:23:11,592 --> 00:23:13,060 line:-1
它还有一个添加收藏


412
00:23:13,861 --> 00:23:18,198 line:-1
它会给巧克力片添加一个心形


413
00:23:18,966 --> 00:23:20,534 line:-1
我们也可以移除收藏


414
00:23:21,268 --> 00:23:26,740 line:-1
总之 我给你们展示的是


415
00:23:27,674 --> 00:23:31,044 line:-2
仅通过在Mac上重新创建iPad app
你可以免费获得的东西


416
00:23:31,545 --> 00:23:34,381 line:-1
我还会给你们展示侧边栏、


417
00:23:34,681 --> 00:23:38,752 line:-2
工具栏和菜单栏
让你们都能把你们的app


418
00:23:39,052 --> 00:23:39,887 line:-1
提升到下一个层级


419
00:23:40,487 --> 00:23:43,891 line:-2
那么舞台交还给Jamie
讲一些设计考量


420
00:23:48,161 --> 00:23:49,363 line:-1
谢谢Glen


421
00:23:53,233 --> 00:23:55,702 line:-1
那么现在我们要讲一些技术细节


422
00:23:55,769 --> 00:23:57,504 line:-2
关于让你的iPad app
适应Mac


423
00:23:58,138 --> 00:24:00,874 line:-1
让我们先来看一些设计考量


424
00:24:03,644 --> 00:24:04,912 line:-1
首先是导航


425
00:24:05,779 --> 00:24:08,715 line:-2
思考一下用户如何在你的app中
进行导航


426
00:24:09,683 --> 00:24:12,219 line:-2
如果你还没有考虑过在Mac上
使用侧边栏


427
00:24:12,519 --> 00:24:14,421 line:-2
也许还没考虑过在iPad上
使用分屏显示


428
00:24:15,756 --> 00:24:17,758 line:-1
请重新考虑标签栏的使用


429
00:24:18,225 --> 00:24:20,661 line:-1
在Mac上 你应该考虑在工具栏中


430
00:24:20,727 --> 00:24:21,862 line:-1
使用分段控制来代替


431
00:24:25,399 --> 00:24:26,300 line:-1
（布局）


432
00:24:26,366 --> 00:24:29,503 line:-2
接下来是布局
我们已经讲过屏幕尺寸了


433
00:24:30,070 --> 00:24:33,207 line:-2
它在你的布局中应该具有灵活性
充分利用大窗口的优势


434
00:24:34,408 --> 00:24:36,643 line:-2
你还可以重新排版和重新设计
你的用户界面


435
00:24:36,977 --> 00:24:40,113 line:-2
并且你可以使用自定义资产
来改写硬件相关的内容


436
00:24:40,414 --> 00:24:41,949 line:-1
或只是为了利用空间


437
00:24:44,184 --> 00:24:45,452 line:-1
（排版）


438
00:24:46,486 --> 00:24:49,089 line:-1
iPad设计比Mac设计要大得多


439
00:24:49,156 --> 00:24:50,224 line:-1
它针对触摸进行了优化


440
00:24:51,091 --> 00:24:52,693 line:-1
因此基础字号不一样


441
00:24:52,960 --> 00:24:55,462 line:-1
在iOS上 大部分文本是17点


442
00:24:55,963 --> 00:24:57,464 line:-1
而在Mac上是13点


443
00:24:58,565 --> 00:25:01,969 line:-2
因此相对于它在
AppKit app上的显示来说


444
00:25:02,269 --> 00:25:04,204 line:-2
我们替你把UIKit内容缩小为
原来的77%


445
00:25:05,405 --> 00:25:09,243 line:-2
这意味着在屏幕上
UIKit点比AppKit点小


446
00:25:09,877 --> 00:25:13,780 line:-2
即使是UIKit app中的位图
也应该显示为


447
00:25:14,114 --> 00:25:15,983 line:-2
AppKit app
中位图尺寸的77%


448
00:25:17,317 --> 00:25:19,486 line:-1
因为缩放对于app来说是全局性的


449
00:25:19,553 --> 00:25:21,088 line:-1
在绝大部分情况下 你不需要担心它


450
00:25:22,422 --> 00:25:25,792 line:-2
如果你真的想要更直接的控制
特别是针对字体缩放


451
00:25:26,326 --> 00:25:29,329 line:-2
你应该了解一下
字体管理和文本缩放演讲


452
00:25:29,696 --> 00:25:30,697 line:-1
并学习如何去实现


453
00:25:32,366 --> 00:25:33,500 line:-1
（菜单栏）


454
00:25:33,834 --> 00:25:34,801 line:-1
菜单栏


455
00:25:35,068 --> 00:25:37,971 line:-2
我们讲了如何做菜单栏
但你应该在菜单栏中放什么呢？


456
00:25:39,373 --> 00:25:41,842 line:-2
我提到过菜单把所有可能的动作
都放在一个地方


457
00:25:42,209 --> 00:25:45,646 line:-1
对于app来说它是全局性的


458
00:25:45,712 --> 00:25:47,681 line:-2
并且根据用户正在执行的动作
启用或禁用菜单项


459
00:25:48,615 --> 00:25:50,951 line:-2
这意味着菜单中的内容
应该不会发生改变


460
00:25:51,518 --> 00:25:53,520 line:-1
你只需要在启动时进行一次性创建


461
00:25:54,555 --> 00:25:57,324 line:-1
你真的应该考虑你app的所有功能


462
00:25:57,691 --> 00:25:59,893 line:-1
并确保它们均可通过菜单栏可用


463
00:26:01,628 --> 00:26:02,863 line:-1
（输入）


464
00:26:04,231 --> 00:26:06,366 line:-2
我们刚讲了iPad
如何针对触摸进行优化


465
00:26:07,201 --> 00:26:09,803 line:-2
iPad所特有的一个功能是
直接多点触控


466
00:26:10,604 --> 00:26:11,872 line:-1
Mac并没有这个功能


467
00:26:11,939 --> 00:26:14,675 line:-1
但它却总是配有键盘和鼠标或触控板


468
00:26:15,943 --> 00:26:17,578 line:-1
你应该考虑要如何把


469
00:26:17,644 --> 00:26:20,180 line:-2
你app中所使用的手势
映像到这些输入设备中


470
00:26:21,048 --> 00:26:23,717 line:-2
在Mac上针对鼠标和触控板
进行重新实施


471
00:26:24,618 --> 00:26:27,154 line:-2
当你这样做时
请一定要考虑可访问性


472
00:26:29,723 --> 00:26:32,159 line:-1
那对于设计话题来说只是冰山一角


473
00:26:32,459 --> 00:26:34,628 line:-1
在Mac人机界面指南中


474
00:26:34,695 --> 00:26:36,597 line:-1
还有大量关于设备上的有用信息


475
00:26:37,164 --> 00:26:39,032 line:-2
当你设计你的app时
你应该参考它


476
00:26:39,867 --> 00:26:43,237 line:-2
并且我鼓励你们观看
Mac上iPad app设计演讲


477
00:26:43,937 --> 00:26:46,974 line:-2
它包含许多很不错的建议
关于如何让你的UIKit app


478
00:26:47,040 --> 00:26:48,008 line:-1
成为一个不错的Mac app


479
00:26:48,775 --> 00:26:49,943 line:-1
（更多设计资源）


480
00:26:51,044 --> 00:26:54,848 line:-2
现在我们讲了把iPad app
变成一个更好的Mac app


481
00:26:55,148 --> 00:26:56,517 line:-1
我要向大家介绍Nils


482
00:26:56,884 --> 00:26:59,586 line:-2
他会讲Mac上UIKit app
的另一个独特功能


483
00:27:00,087 --> 00:27:01,154 line:-1
App生命周期


484
00:27:01,855 --> 00:27:02,990 line:-1
（app生命周期）


485
00:27:04,658 --> 00:27:05,759 line:-1
谢谢Jamie


486
00:27:06,393 --> 00:27:08,695 line:-2
大家下午好
我是Nils Beck


487
00:27:09,296 --> 00:27:11,164 line:-1
我是AppKit框架团队的工程师


488
00:27:11,431 --> 00:27:13,066 line:-1
今天我很激动


489
00:27:13,567 --> 00:27:16,737 line:-2
我要跟大家分享Mac版iPad
app的app生命周期


490
00:27:18,839 --> 00:27:22,242 line:-2
当我们把iOS上app生命周期
与MacOS上app生命周期比较


491
00:27:22,743 --> 00:27:24,011 line:-1
我们发现它们有不同之处


492
00:27:24,578 --> 00:27:26,446 line:-1
一些iOS专有的行为


493
00:27:26,513 --> 00:27:28,348 line:-1
在UIKit API中有所体现


494
00:27:29,550 --> 00:27:32,619 line:-2
在Mac上运行iPad app时
这产生了一种挑战


495
00:27:33,754 --> 00:27:37,891 line:-2
我们要如何把macOS app
状态映像到iOS API中？


496
00:27:41,328 --> 00:27:43,964 line:-1
让我们首先回顾一下


497
00:27:44,031 --> 00:27:45,265 line:-1
iOS上的app生命周期状态


498
00:27:46,133 --> 00:27:47,568 line:-1
你可以顺着图表看


499
00:27:47,634 --> 00:27:49,336 line:-1
它会在右手边显示


500
00:27:49,403 --> 00:27:50,537 line:-1
（app生命周期状态）


501
00:27:51,004 --> 00:27:52,306 line:-1
当你的app出现在屏幕上时


502
00:27:52,372 --> 00:27:55,108 line:-2
人们通常会在iPad上
与你的app进行交互


503
00:27:55,509 --> 00:27:57,511 line:-1
它既处于前台又是激活状态


504
00:27:59,746 --> 00:28:02,149 line:-1
当有东西遮盖它时


505
00:28:02,616 --> 00:28:05,719 line:-2
你app是非激活状态但仍处于前台
因此它不会接收事件


506
00:28:06,920 --> 00:28:08,288 line:-1
这通常是暂时情况


507
00:28:08,655 --> 00:28:11,391 line:-2
比如当控制中心
在你app的上一层可见时


508
00:28:14,161 --> 00:28:15,429 line:-1
一旦你的app处于后台


509
00:28:15,829 --> 00:28:17,464 line:-1
用户就不再与之进行交互


510
00:28:18,298 --> 00:28:20,567 line:-1
比如他们可能使用了任务切换器


511
00:28:20,634 --> 00:28:22,169 line:-1
并侧滑到一个不同的app


512
00:28:23,270 --> 00:28:26,173 line:-1
但你仍然可以实施后台任务完成


513
00:28:26,573 --> 00:28:29,142 line:-2
并且当没有任何残余的后台任务时
你的app会被暂停使用


514
00:28:31,078 --> 00:28:32,145 line:-1
一旦被暂停使用


515
00:28:32,479 --> 00:28:34,848 line:-2
你的app就被冻住了
不再获得更多的CPU周期


516
00:28:35,782 --> 00:28:36,717 line:-1
此时


517
00:28:36,783 --> 00:28:40,220 line:-2
它可能在任一时刻就被系统终止
而不需要进一步的通知


518
00:28:42,055 --> 00:28:43,156 line:-1
最后


519
00:28:43,223 --> 00:28:46,026 line:-2
当它甚至都不处于内存中时
你的app就不再运行了


520
00:28:49,029 --> 00:28:50,130 line:-1
把这些总结在一起


521
00:28:50,197 --> 00:28:52,299 line:-2
让我们看看你能看到的
可能的状态变更


522
00:28:52,599 --> 00:28:55,169 line:-2
无论是在iOS或是
在macOS上运行


523
00:28:56,069 --> 00:28:57,504 line:-1
我马上会带你们具体看这些


524
00:28:57,938 --> 00:29:00,607 line:-1
但首先我要请你们注意…


525
00:29:00,674 --> 00:29:01,808 line:-2
但首先我要讲
对你们来说相对容易的事


526
00:29:02,142 --> 00:29:06,747 line:-2
Mac上的iPad app
将获得与iOS上


527
00:29:06,813 --> 00:29:07,681 line:-1
相同的委托调用和通知


528
00:29:10,350 --> 00:29:12,419 line:-1
你可能习惯在app委托方法中


529
00:29:12,486 --> 00:29:13,720 line:-1
处理这些状态变更


530
00:29:13,987 --> 00:29:16,723 line:-2
但它们还存在于这里所显示的
NSNotification


531
00:29:18,425 --> 00:29:20,360 line:-1
我们推荐使用这些通知


532
00:29:20,794 --> 00:29:24,531 line:-2
因为它们甚至当你
选择添加新的多窗口API时也可用


533
00:29:24,965 --> 00:29:27,100 line:-2
而在多窗口API中
会漏掉一些app委托调用


534
00:29:28,135 --> 00:29:29,203 line:-1
顺便提一下 这与iOS上相同


535
00:29:30,604 --> 00:29:33,974 line:-2
同时 多窗口app中
app的整体状态


536
00:29:34,374 --> 00:29:37,077 line:-1
取决于单个场景的激活状态


537
00:29:38,078 --> 00:29:40,981 line:-2
因此你很可能想按场景
处理状态变更


538
00:29:42,115 --> 00:29:45,352 line:-2
但在此演讲中
我们只关注app的整体生命周期


539
00:29:47,387 --> 00:29:49,923 line:-1
除了委托调用和通知


540
00:29:50,324 --> 00:29:53,060 line:-1
在macOS上这些状态变更的顺序


541
00:29:53,126 --> 00:29:54,628 line:-1
也与iPad上一样


542
00:29:56,330 --> 00:29:57,631 line:-1
我刚刚承诺过


543
00:29:58,031 --> 00:30:01,602 line:-2
让我们具体看看
状态变更通知的顺序


544
00:30:03,303 --> 00:30:04,505 line:-1
启动时


545
00:30:04,571 --> 00:30:07,708 line:-2
你会看到didFinishLaunching
和didBecomeActive


546
00:30:10,911 --> 00:30:13,313 line:-2
退出时你会看到
willResignActive


547
00:30:13,580 --> 00:30:14,648 line:-1
和didEnterBackground


548
00:30:17,518 --> 00:30:19,119 line:-2
你还会得到
willTerminate


549
00:30:19,586 --> 00:30:21,688 line:-1
如果我们确定app正在退出


550
00:30:22,089 --> 00:30:23,757 line:-2
并且你的app
还没有被暂停使用的话


551
00:30:25,826 --> 00:30:26,760 line:-1
最后


552
00:30:26,827 --> 00:30:28,829 line:-1
在从后台状态返回时


553
00:30:28,896 --> 00:30:31,832 line:-2
你会看到willEnterForeground
和didBecomeActive


554
00:30:34,368 --> 00:30:37,838 line:-1
因为通知和顺序在两个平台上都相同


555
00:30:38,272 --> 00:30:41,175 line:-2
当这些转换发生在macOS上时
我们确实发生了改变


556
00:30:42,376 --> 00:30:43,544 line:-1
我们稍后再讲这个


557
00:30:45,746 --> 00:30:47,214 line:-1
现在返回到iOS中


558
00:30:47,548 --> 00:30:50,751 line:-1
我们建议你的代码应该


559
00:30:50,817 --> 00:30:51,718 line:-1
以某种方式响应这些状态变更


560
00:30:52,252 --> 00:30:55,522 line:-2
比如当你通过
willResignActiveNotification


561
00:30:55,856 --> 00:30:57,824 line:-1
了解你的app的钝化时


562
00:30:58,525 --> 00:31:00,627 line:-1
你希望在其它东西之间


563
00:31:01,128 --> 00:31:03,730 line:-1
减少在屏幕上的内容的帧频


564
00:31:04,698 --> 00:31:06,900 line:-1
停止各种不必要的工作


565
00:31:07,301 --> 00:31:10,304 line:-1
比如计时器、队列和查询


566
00:31:11,371 --> 00:31:12,973 line:-1
可能还有其它副作用


567
00:31:13,473 --> 00:31:16,443 line:-1
比如你可能希望暂停游戏


568
00:31:16,510 --> 00:31:17,911 line:-1
（响应状态变更）


569
00:31:18,846 --> 00:31:21,548 line:-1
类似地 当你的app


570
00:31:21,615 --> 00:31:23,350 line:-2
通过didEnterBackgroundNotification
进入后台状态时


571
00:31:23,884 --> 00:31:27,721 line:-2
在iOS上 你的app
会停止所有的渲染


572
00:31:28,288 --> 00:31:31,358 line:-1
把CPU的使用减少为最小


573
00:31:31,892 --> 00:31:34,094 line:-1
并释放尽可能多的内存


574
00:31:35,395 --> 00:31:37,297 line:-1
可能还有其它副作用


575
00:31:38,198 --> 00:31:41,335 line:-1
比如 如果屏幕上的内容是私密内容


576
00:31:41,735 --> 00:31:44,137 line:-2
你可能想在屏幕截图之前
把它隐藏起来


577
00:31:45,639 --> 00:31:46,773 line:-2
（你的iPad app
现在是Mac app了）


578
00:31:47,207 --> 00:31:50,944 line:-2
现在当你把iPad app
引入到macOS时


579
00:31:51,011 --> 00:31:53,013 line:-2
我们不希望你修改
所有的状态变更处理代码


580
00:31:54,047 --> 00:31:57,384 line:-2
但运行在macOS上的iPad
app现在是一个Mac app了


581
00:31:58,552 --> 00:31:59,553 line:-1
那会发生什么改变？


582
00:32:00,654 --> 00:32:02,456 line:-1
这是一些针对Mac的考量


583
00:32:04,691 --> 00:32:07,628 line:-2
许多Mac app
同时共享屏幕很常见


584
00:32:10,230 --> 00:32:12,232 line:-1
其中一个app是处于最前的app


585
00:32:12,566 --> 00:32:15,169 line:-1
那意味着它接收关键事件


586
00:32:15,569 --> 00:32:17,004 line:-1
并且显示它的菜单栏


587
00:32:17,604 --> 00:32:18,539 line:-1
（Mac OS考量）


588
00:32:20,340 --> 00:32:23,577 line:-2
许多事都会影响
app的内容是否可见


589
00:32:24,511 --> 00:32:27,447 line:-1
比如一个窗口可能被另一个窗口挡住


590
00:32:28,215 --> 00:32:30,617 line:-1
或窗口可能最小化到程序坞


591
00:32:31,351 --> 00:32:33,820 line:-1
或它甚至可能完全处于另一个空间


592
00:32:36,823 --> 00:32:40,561 line:-1
app还可能由于其它原因


593
00:32:40,627 --> 00:32:41,662 line:-1
不在屏幕上显示内容


594
00:32:42,196 --> 00:32:44,131 line:-1
比如整个app可能隐藏起来了


595
00:32:44,965 --> 00:32:47,401 line:-1
或它可能目前只是没有任何窗口显示


596
00:32:48,302 --> 00:32:51,738 line:-1
或你的app甚至可能


597
00:32:51,805 --> 00:32:55,509 line:-2
在后台登录会话中运行
那仅存在于虚拟屏幕上


598
00:32:56,143 --> 00:32:58,445 line:-1
在其中一个深夜调试会话中


599
00:32:58,512 --> 00:33:00,480 line:-1
你可能正在通过VNC进行访问


600
00:33:01,682 --> 00:33:02,816 line:-2
（状态变更对
Mac app影响较小）


601
00:33:02,883 --> 00:33:05,886 line:-1
不管它们的最前状态和内容可用性


602
00:33:06,220 --> 00:33:10,023 line:-2
Mac app通常不希望
像iOS app一样


603
00:33:10,090 --> 00:33:12,326 line:-1
彻底改变它们的行为


604
00:33:14,027 --> 00:33:17,764 line:-2
所有运行的app都要做
对用户有价值的工作


605
00:33:19,166 --> 00:33:22,035 line:-1
同时 你希望处于最前的app


606
00:33:22,336 --> 00:33:26,273 line:-1
仍能接收滚动事件、点击和悬停事件


607
00:33:27,708 --> 00:33:30,711 line:-2
当Mac用户切换到
一个不同的app时


608
00:33:30,777 --> 00:33:32,779 line:-1
他们不一定希望游戏暂停


609
00:33:33,280 --> 00:33:35,415 line:-1
或当他们尝试在虚拟屏幕上


610
00:33:35,682 --> 00:33:39,653 line:-2
通过其中一个VNC会话
使用你的app时完全禁用渲染


611
00:33:43,090 --> 00:33:46,927 line:-2
我之前告诉过你
相较于iOS上的状态变更


612
00:33:46,994 --> 00:33:48,095 line:-2
当这些状态发生变更时
我们已经进行了改动


613
00:33:48,161 --> 00:33:49,096 line:-1
就是这些


614
00:33:49,663 --> 00:33:52,833 line:-2
根据我刚讲过的内容
我们决定在macOS上


615
00:33:53,267 --> 00:33:56,170 line:-1
几乎所有时间 我们都将保持


616
00:33:56,236 --> 00:33:58,705 line:-2
所有iPad app
处于前台并激活


617
00:34:00,140 --> 00:34:03,777 line:-1
在app终止和后台启动过程中


618
00:34:04,211 --> 00:34:06,713 line:-2
我们只进入前台非激活状态
和后台状态


619
00:34:07,814 --> 00:34:09,016 line:-1
换句话说


620
00:34:09,081 --> 00:34:11,618 line:-1
只要用户感觉到你的app正在运行


621
00:34:12,252 --> 00:34:16,089 line:-2
它就处于前台激活状态
以避免任何非Mac意愿的副作用


622
00:34:17,925 --> 00:34:19,025 line:-1
让我再重复一遍


623
00:34:19,927 --> 00:34:22,029 line:-1
将不调用UIKit状态变更通知


624
00:34:22,094 --> 00:34:26,800 line:-2
比如当你的app
获得或失去菜单栏时


625
00:34:27,067 --> 00:34:28,302 line:-1
或有窗口遮挡住app时


626
00:34:32,139 --> 00:34:34,808 line:-2
那意味着你的app
不会像在iOS上那样


627
00:34:34,875 --> 00:34:36,409 line:-1
急切地减少它的资源消耗


628
00:34:36,976 --> 00:34:40,414 line:-2
然而AppNap启发算法适用于
所有mac app


629
00:34:40,480 --> 00:34:41,815 line:-1
包括你的iPad app


630
00:34:42,916 --> 00:34:44,751 line:-2
AppNap是
macOS的一个功能


631
00:34:45,052 --> 00:34:48,088 line:-1
系统不间断地观察app的各个属性


632
00:34:48,455 --> 00:34:50,157 line:-1
用于显示它是否不在使用中


633
00:34:50,891 --> 00:34:54,393 line:-1
比如它是否可见 主动绘图


634
00:34:54,728 --> 00:34:56,330 line:-1
播放音频等等


635
00:34:57,965 --> 00:35:00,834 line:-2
然后当AppNap
认为节流没问题时


636
00:35:01,134 --> 00:35:02,669 line:-1
它会自动应用节流


637
00:35:04,238 --> 00:35:05,372 line:-1
（app终止）


638
00:35:05,439 --> 00:35:06,707 line:-1
我刚才提到过


639
00:35:06,773 --> 00:35:08,208 line:-1
我们在终止和后台启动过程中


640
00:35:08,275 --> 00:35:10,310 line:-1
确实会进入其他app状态


641
00:35:11,678 --> 00:35:13,113 line:-1
让我们从app终止开始讲


642
00:35:15,015 --> 00:35:16,884 line:-1
开发人员需要注意的是


643
00:35:17,551 --> 00:35:19,786 line:-2
当把他们的iPad app
迁到macOS上时


644
00:35:20,654 --> 00:35:22,656 line:-1
iOS中app之间的切换


645
00:35:23,023 --> 00:35:25,659 line:-1
与macOS上完全不一样


646
00:35:26,593 --> 00:35:27,628 line:-1
比如


647
00:35:28,061 --> 00:35:31,665 line:-2
在iOS上切换到另一个app时
后台音频仍继续播放


648
00:35:32,165 --> 00:35:35,702 line:-2
像把处于最前的Mac app变成
让另一个Mac app处于最前


649
00:35:36,503 --> 00:35:39,806 line:-2
因为你的app
被用户认为是继续运行


650
00:35:41,308 --> 00:35:44,111 line:-2
但在iOS上
当用户不返回到你的app中


651
00:35:44,645 --> 00:35:45,946 line:-1
并且也没有任何播放的音频时


652
00:35:46,580 --> 00:35:49,783 line:-2
这可能更类似于
在macOS上终止Mac app


653
00:35:50,384 --> 00:35:53,554 line:-2
因为你的app不在视线内并且用户
也不记得它了 它最终会退出


654
00:35:57,124 --> 00:35:58,225 line:-1
在macOS上


655
00:35:58,292 --> 00:36:00,961 line:-2
用户发起了对你的
iPad app的app终止


656
00:36:01,595 --> 00:36:05,966 line:-2
得到了与在iOS中切换到一个
不同的app时相同的状态转换


657
00:36:06,400 --> 00:36:08,135 line:-1
比如通过使用任务切换器


658
00:36:09,970 --> 00:36:13,307 line:-1
状态变更通知会让你从前台激活状态


659
00:36:13,740 --> 00:36:15,809 line:-2
变成前台非激活状态
最后是后台状态


660
00:36:17,311 --> 00:36:18,545 line:-1
然而对于用户来说


661
00:36:18,612 --> 00:36:21,281 line:-1
app将立即显示为不再运行


662
00:36:22,216 --> 00:36:24,284 line:-1
app的残余窗口将立即不可见


663
00:36:25,219 --> 00:36:27,187 line:-1
它再也不会控制菜单栏


664
00:36:27,855 --> 00:36:29,957 line:-1
程序坞中也不会再有任何指示灯


665
00:36:30,691 --> 00:36:35,495 line:-2
且你的app也不会再在macOS
命令标签任务切换器中可用了


666
00:36:38,298 --> 00:36:39,299 line:-1
但在幕后


667
00:36:39,366 --> 00:36:41,602 line:-2
我们为后台任务提供了一个
完成任务的机会


668
00:36:42,102 --> 00:36:45,272 line:-1
如果它们是通过我在这里所展示的


669
00:36:45,339 --> 00:36:46,306 line:-2
UIApplication上的
常用API创建的话


670
00:36:48,742 --> 00:36:50,043 line:-1
就像在iOS中一样


671
00:36:50,110 --> 00:36:53,280 line:-2
迅速结束你的后台任务
否则就要承担任务过期的风险


672
00:36:54,648 --> 00:36:56,116 line:-1
但有一种例外情况


673
00:36:57,050 --> 00:36:59,152 line:-1
后台音频播放列表项被忽略了


674
00:36:59,887 --> 00:37:02,990 line:-2
无论后台是否有音频请求
都将终止进程


675
00:37:03,857 --> 00:37:06,360 line:-2
毕竟对于用户来说
app看起来已经被终止了


676
00:37:07,694 --> 00:37:10,163 line:-1
因此你的媒体框架要暂停你的…


677
00:37:10,230 --> 00:37:12,533 line:-1
一旦进入后台状态


678
00:37:13,066 --> 00:37:14,268 line:-1
我们的媒体框架将替你暂停你的播放


679
00:37:15,869 --> 00:37:19,473 line:-2
然而请记住
macOS上不需要后台音频


680
00:37:20,340 --> 00:37:22,009 line:-1
即使当用户切换到不同的app中时


681
00:37:22,442 --> 00:37:24,278 line:-1
你的app也将保持前台激活状态


682
00:37:27,214 --> 00:37:28,482 line:-1
此外


683
00:37:28,549 --> 00:37:31,485 line:-2
如果用户尝试启动
仍处于后台状态的app时


684
00:37:31,985 --> 00:37:34,421 line:-2
我们会简单地让你的app
返回到前台激活状态


685
00:37:35,556 --> 00:37:39,059 line:-2
这类似于从iOS任务切换器
返回到你的app


686
00:37:40,427 --> 00:37:41,728 line:-1
这种重新启动


687
00:37:41,795 --> 00:37:45,232 line:-2
只有当你的app仍在处理
后台任务时才可能发生


688
00:37:45,766 --> 00:37:49,002 line:-2
而不是一旦willTerminate
的同步处理开始时


689
00:37:50,170 --> 00:37:51,772 line:-1
因此尝试最小化这个阶段


690
00:37:51,839 --> 00:37:54,474 line:-2
就是你的app忽略用户
重新启动它的尝试的阶段


691
00:37:57,611 --> 00:38:00,147 line:-1
一旦最后一个后台任务完成或过期


692
00:38:00,614 --> 00:38:02,382 line:-1
进程立即退出而不会暂停


693
00:38:03,851 --> 00:38:04,885 line:-1
我之前提过


694
00:38:05,219 --> 00:38:08,822 line:-2
你会得到与iOS上相同的
委托调用和通知


695
00:38:10,123 --> 00:38:12,860 line:-2
在这种情况下 那意味着你会看到
willResignActive


696
00:38:13,327 --> 00:38:14,761 line:-1
didEnterBackground


697
00:38:14,828 --> 00:38:17,931 line:-2
和willTerminate
因为我们会退出进程


698
00:38:18,198 --> 00:38:20,467 line:-1
而不仅仅是像iOS上一样暂停它


699
00:38:21,869 --> 00:38:22,936 line:-1
（后台app启动）


700
00:38:23,003 --> 00:38:25,639 line:-2
这就是Mac上
iPad app的终止


701
00:38:27,040 --> 00:38:28,208 line:-1
正如我刚才提到过的那样


702
00:38:28,275 --> 00:38:32,179 line:-2
让你的iPad app在Mac上
进入后台状态的另一种方式


703
00:38:32,646 --> 00:38:34,715 line:-1
是当它直接在后台启动时


704
00:38:36,116 --> 00:38:41,054 line:-2
iOS有相当一部分API
允许你为你的app


705
00:38:41,121 --> 00:38:42,222 line:-1
选择加入某些形式的后台启动


706
00:38:42,923 --> 00:38:44,291 line:-1
要了解关于这个话题的更多信息


707
00:38:44,591 --> 00:38:48,161 line:-1
请参考今年的


708
00:38:48,228 --> 00:38:49,329 line:-1
关于app后台执行的改进演讲


709
00:38:51,698 --> 00:38:55,903 line:-2
这些API的子集
支持Mac版的iPad app


710
00:38:58,105 --> 00:39:01,074 line:-1
针对后台下载配置的URL会话


711
00:39:03,177 --> 00:39:07,147 line:-1
在APS字典中


712
00:39:07,214 --> 00:39:08,348 line:-1
指定了带有可用内容的远程用户通知


713
00:39:09,283 --> 00:39:10,551 line:-1
你可以用它 比如说


714
00:39:10,617 --> 00:39:13,954 line:-2
更新你app的内容
当新内容到达服务器端时


715
00:39:16,223 --> 00:39:18,959 line:-1
同时 当我们的用户调用


716
00:39:19,026 --> 00:39:21,161 line:-1
未指定前台选项的通知动作时


717
00:39:21,828 --> 00:39:25,032 line:-2
比如他们可能希望通过用户通知
发送帖子


718
00:39:25,632 --> 00:39:29,002 line:-2
并且我们可以后台启动你的app
从而让服务器了解这个情况


719
00:39:30,270 --> 00:39:31,338 line:-1
最后


720
00:39:31,605 --> 00:39:34,274 line:-2
我们还支持
新BackgroundTasks框架


721
00:39:34,708 --> 00:39:37,044 line:-2
包括新
BGProcessingTask


722
00:39:37,544 --> 00:39:42,349 line:-2
以及BGAppRefreshTask
用于传统的后台app重刷新


723
00:39:43,483 --> 00:39:45,085 line:-2
请注意
对于Mac版iPad app


724
00:39:45,485 --> 00:39:48,956 line:-2
仅通过这个新API
支持app重刷新功能


725
00:39:54,428 --> 00:39:58,432 line:-2
常见的后台运行时间限制
和所应用的进程优先权


726
00:39:58,866 --> 00:39:59,967 line:-1
与iOS上的相同


727
00:40:00,300 --> 00:40:01,935 line:-1
因此如果你的任务占用太长时间


728
00:40:02,236 --> 00:40:04,571 line:-2
你的app将面临被暂停使用
或甚至是被终止的危险


729
00:40:06,139 --> 00:40:07,875 line:-1
当app仍然在后台运行时


730
00:40:08,141 --> 00:40:09,877 line:-1
如果用户尝试启动它


731
00:40:10,577 --> 00:40:12,913 line:-2
我们将简单地把它转换为
前台激活状态


732
00:40:13,413 --> 00:40:16,617 line:-2
类似于之前讨论过的
在终止过程中重新启动


733
00:40:18,385 --> 00:40:19,753 line:-1
对于后台启动也一样


734
00:40:20,254 --> 00:40:22,523 line:-2
所有状态转换都将与
iOS上的相匹配


735
00:40:23,557 --> 00:40:26,493 line:-2
在这种情况下 那意味着你只能看到
didFinishLaunching


736
00:40:26,860 --> 00:40:30,931 line:-1
以及针对后台启动


737
00:40:30,998 --> 00:40:31,999 line:-1
所使用的任何回调


738
00:40:33,367 --> 00:40:35,302 line:-1
只有在用户所执行的完全启动过程中


739
00:40:35,702 --> 00:40:39,039 line:-2
你才可额外看到willEnterForeground
和didBecomeActive


740
00:40:40,874 --> 00:40:41,909 line:-1
（暂停使用）


741
00:40:41,975 --> 00:40:43,177 line:-1
app暂停使用


742
00:40:43,844 --> 00:40:47,347 line:-2
相较于iOS 在macOS上
iPad app很少被暂停使用


743
00:40:48,582 --> 00:40:49,883 line:-1
在常规的终止过程中


744
00:40:50,350 --> 00:40:53,420 line:-1
app将直接退出 而没有任何暂停


745
00:40:54,454 --> 00:40:56,323 line:-1
在macOS上的app切换过程中


746
00:40:56,890 --> 00:40:58,725 line:-1
这不会导致后台状态或暂停


747
00:40:59,860 --> 00:41:02,396 line:-1
但如果app直接在后台启动的话


748
00:41:02,729 --> 00:41:05,165 line:-1
你仍可能看到发生暂停


749
00:41:06,900 --> 00:41:08,101 line:-1
现在在iPad上


750
00:41:08,402 --> 00:41:11,371 line:-2
当其它地方需要资源的话
你的app可能会被终止


751
00:41:11,438 --> 00:41:12,940 line:-1
特别是如果它已经被暂停使用的话


752
00:41:13,507 --> 00:41:14,541 line:-1
但在macOS上


753
00:41:14,842 --> 00:41:16,577 line:-2
如果你的iPad app
被暂停使用了


754
00:41:16,944 --> 00:41:19,346 line:-1
它总是会立即终止


755
00:41:19,847 --> 00:41:21,481 line:-1
即使不存在任何内存压力


756
00:41:23,483 --> 00:41:24,551 line:-1
提到内存


757
00:41:24,618 --> 00:41:26,186 line:-1
Mac内容模型应用


758
00:41:26,587 --> 00:41:28,822 line:-1
意味着没有任何强制的内存限制


759
00:41:29,623 --> 00:41:31,992 line:-2
你的app不会面临在执行
极耗内存的工作时被终止的风险


760
00:41:34,027 --> 00:41:35,229 line:-1
但这是把双刃剑


761
00:41:36,196 --> 00:41:37,431 line:-1
因为你的app运行时间越长


762
00:41:37,931 --> 00:41:40,601 line:-1
由于堆积泄露


763
00:41:40,667 --> 00:41:41,768 line:-1
用户越可能注意到系统性能下降


764
00:41:42,803 --> 00:41:44,104 line:-1
特别是


765
00:41:44,404 --> 00:41:46,940 line:-2
如果它在基于硬盘的系统上
导致VM置换的话


766
00:41:49,376 --> 00:41:51,879 line:-1
因此请使用分配分析模板


767
00:41:51,945 --> 00:41:54,181 line:-1
和仪器来发现并修复泄露


768
00:41:55,148 --> 00:41:56,783 line:-1
这也会让iPad版app受益颇多


769
00:41:59,520 --> 00:42:02,222 line:-2
现在我们讲了大量信息
让我们回顾一下


770
00:42:03,423 --> 00:42:04,591 line:-1
在macOS上


771
00:42:04,658 --> 00:42:08,562 line:-2
你的iPad app将在前台激活
状态中度过它的绝大部分时间


772
00:42:10,397 --> 00:42:12,432 line:-1
虽然app终止和后台启动


773
00:42:12,499 --> 00:42:15,169 line:-2
确实允许你的app
获取进入前台非激活状态


774
00:42:15,435 --> 00:42:16,503 line:-1
和后台状态


775
00:42:18,238 --> 00:42:20,807 line:-1
当你的app处于后台时


776
00:42:21,375 --> 00:42:23,677 line:-2
不要期待音频会继续播放
即使你发出请求也不可以


777
00:42:25,045 --> 00:42:26,013 line:-1
最后


778
00:42:26,346 --> 00:42:28,916 line:-1
你可以继续以在iOS上相同的方式


779
00:42:28,982 --> 00:42:30,617 line:-1
响应这些状态变更


780
00:42:32,352 --> 00:42:34,021 line:-1
现在我要把舞台交给Chris


781
00:42:34,321 --> 00:42:37,191 line:-2
他会讲把你的iPad app
发布到Mac


782
00:42:37,624 --> 00:42:38,625 line:-1
谢谢


783
00:42:44,331 --> 00:42:45,265 line:-1
谢谢Nils


784
00:42:50,070 --> 00:42:52,406 line:-1
你一直都在创建iOS app


785
00:42:54,675 --> 00:42:57,044 line:-2
你知道如何在
App Store上进行发布


786
00:42:57,978 --> 00:42:59,313 line:-1
如何使用TestFlight


787
00:43:00,080 --> 00:43:04,518 line:-2
如何使用开发签名、点对点
或企业号发布自己


788
00:43:05,719 --> 00:43:06,720 line:-1
但现在…


789
00:43:07,454 --> 00:43:11,258 line:-2
你正在Mac上
创建和销售第二个app


790
00:43:12,226 --> 00:43:13,493 line:-1
全部来源于同样的代码基


791
00:43:14,862 --> 00:43:15,996 line:-1
你要如何实现呢？


792
00:43:16,797 --> 00:43:18,198 line:-1
对于Mac来说有什么不同呢？


793
00:43:19,366 --> 00:43:20,901 line:-1
你如何确保你的客户们


794
00:43:20,968 --> 00:43:23,704 line:-2
在使用两个版本的app时
拥有无缝体验呢？


795
00:43:24,605 --> 00:43:25,472 line:-1
这就是我们接下来要讲的内容


796
00:43:26,773 --> 00:43:27,841 line:-1
让我们回到开始


797
00:43:29,076 --> 00:43:31,111 line:-1
你在Xcode中打开了项目编辑器


798
00:43:32,045 --> 00:43:33,180 line:-1
你启动了Mac支持


799
00:43:34,014 --> 00:43:35,282 line:-1
你一直都很努力地在开发它


800
00:43:35,349 --> 00:43:38,585 line:-2
你已经对app进行了完美的调整
并且你自己想


801
00:43:38,886 --> 00:43:41,255 line:-2
“天啊
我再也不用担心代码签名了”


802
00:43:42,489 --> 00:43:43,323 line:-1
嗯 那很棒


803
00:43:43,757 --> 00:43:46,760 line:-2
但如果你想了解更多
关于签名是如何运作的信息


804
00:43:47,227 --> 00:43:49,997 line:-1
你可以参加签名和性能讨论会


805
00:43:50,998 --> 00:43:53,967 line:-2
在那里你可以看到
要签署你的iOS和Mac app


806
00:43:54,034 --> 00:43:55,369 line:-1
有许多事情要做


807
00:43:56,203 --> 00:43:57,070 line:-1
让我们具体看一下


808
00:43:58,539 --> 00:43:59,439 line:-1
首先


809
00:43:59,806 --> 00:44:01,341 line:-1
如果你启动自动签名


810
00:44:01,775 --> 00:44:05,078 line:-2
代码签署的所有维护
都将由Xcode执行


811
00:44:05,345 --> 00:44:07,047 line:-1
这会让转换变得非常简单


812
00:44:07,548 --> 00:44:09,516 line:-1
我高度推荐使用自动签名


813
00:44:11,652 --> 00:44:13,120 line:-1
现在使用自动签名


814
00:44:13,187 --> 00:44:16,690 line:-2
Xcode将为Mac
创建一个必要的配置文件


815
00:44:17,224 --> 00:44:18,392 line:-2
同时也为iOS
创建一个必要的配置文件


816
00:44:19,426 --> 00:44:20,928 line:-1
我们进行了一点现代化处理


817
00:44:21,662 --> 00:44:24,765 line:-1
我们不使用iOS证书和Mac证书


818
00:44:25,065 --> 00:44:27,668 line:-2
而是使用一个统一的
Apple开发人员证书


819
00:44:28,101 --> 00:44:29,169 line:-1
这是一个很不错的进步


820
00:44:33,307 --> 00:44:35,075 line:-1
现在当你添加Mac支持时


821
00:44:35,843 --> 00:44:38,512 line:-1
Xcode将使用自动签名


822
00:44:38,579 --> 00:44:41,815 line:-2
为你的app注册一个
预定的捆绑标识符


823
00:44:42,216 --> 00:44:45,219 line:-2
你的Mac版app标识符有一个前缀
UIKit for Mac


824
00:44:45,853 --> 00:44:46,753 line:-1
这很重要


825
00:44:47,254 --> 00:44:49,857 line:-2
如果你一直在代码中
或在entitlements中


826
00:44:49,923 --> 00:44:51,925 line:-1
使用捆绑标识符的话


827
00:44:52,192 --> 00:44:54,294 line:-1
你需要考虑那会如何影响两个app


828
00:44:56,763 --> 00:44:57,898 line:-1
entitlements文件


829
00:44:58,265 --> 00:45:00,000 line:-2
就是你一直对iOS app使用的
entitlements文件


830
00:45:00,501 --> 00:45:02,002 line:-1
当注册Mac版时被共享出来


831
00:45:02,069 --> 00:45:03,103 line:-1
因此那没有任何问题


832
00:45:04,805 --> 00:45:06,406 line:-1
当你启用Mac支持时


833
00:45:07,040 --> 00:45:10,410 line:-2
Xcode将添加Mac上所要求的
那些功能


834
00:45:10,844 --> 00:45:13,013 line:-1
强化运行时间和app沙盒


835
00:45:13,714 --> 00:45:16,783 line:-1
因此比如说如果你已经针对摄像头


836
00:45:17,251 --> 00:45:19,052 line:-2
在info.plist中
提供了使用描述


837
00:45:19,520 --> 00:45:21,622 line:-2
Xcode将更新
你的entitlements文件


838
00:45:21,688 --> 00:45:24,024 line:-2
从而使你的app
可以在Mac上使用摄像头


839
00:45:26,260 --> 00:45:28,328 line:-2
如果你正在使用
iCloud默认容器


840
00:45:29,029 --> 00:45:30,697 line:-1
那是基于你的捆绑标识符


841
00:45:31,365 --> 00:45:34,334 line:-2
因此Xcode将调整你的
entitlements文件


842
00:45:34,401 --> 00:45:36,470 line:-2
从而使你的iOS app
和Mac app


843
00:45:36,537 --> 00:45:38,939 line:-1
明确指向现有容器


844
00:45:39,540 --> 00:45:41,208 line:-1
如果你一直使用默认容器API


845
00:45:41,275 --> 00:45:42,309 line:-1
你可以继续这么做


846
00:45:44,978 --> 00:45:46,747 line:-1
现在Xcode将为替进行大量迁移


847
00:45:47,247 --> 00:45:50,117 line:-2
但如果你想在你的iOS app
和Mac app之间


848
00:45:50,184 --> 00:45:52,152 line:-1
共享功能


849
00:45:52,419 --> 00:45:54,555 line:-1
你可能需要做一些手动操作


850
00:45:56,023 --> 00:45:58,192 line:-1
如果你在app中使用钥匙串


851
00:45:59,059 --> 00:46:01,995 line:-2
你应该在Xcode中添加
钥匙串共享功能


852
00:46:03,230 --> 00:46:06,099 line:-2
iCloud钥匙串
在iOS上默认可用


853
00:46:06,700 --> 00:46:09,002 line:-2
但在Mac上
你需要声明你使用它的意图


854
00:46:09,069 --> 00:46:10,070 line:-1
通过这个功能实现


855
00:46:12,139 --> 00:46:13,640 line:-1
如果你使用推送通知


856
00:46:14,074 --> 00:46:16,376 line:-2
请继续向你的iOS app
发送通知


857
00:46:16,877 --> 00:46:20,013 line:-2
这些通知将被iOS
和Mac app收到


858
00:46:21,648 --> 00:46:23,283 line:-1
好的 这就是你需要了解的


859
00:46:23,350 --> 00:46:25,485 line:-2
关于如何恰当地设置你的项目
用于开发


860
00:46:27,187 --> 00:46:29,556 line:-2
现在当你已经与其他人共享了
你的app之后


861
00:46:30,157 --> 00:46:32,259 line:-2
你要开始在Xcode中
创建一个存档


862
00:46:33,193 --> 00:46:34,294 line:-1
在iOS上


863
00:46:34,361 --> 00:46:37,831 line:-1
你使用那个存档将存储导出为IPA


864
00:46:38,565 --> 00:46:40,133 line:-1
但这在Mac上有那么一点不一样


865
00:46:41,168 --> 00:46:43,837 line:-2
当Xcode把你的app
上传到App Store中时


866
00:46:44,171 --> 00:46:46,473 line:-1
它在后台把它作为Mac程序包发送


867
00:46:48,609 --> 00:46:51,778 line:-2
现在上传到App Store
与上传到iOS非常类似


868
00:46:51,845 --> 00:46:52,746 line:-1
让我来给你展示一下


869
00:46:53,780 --> 00:46:55,115 line:-1
当你打开项目后


870
00:46:55,415 --> 00:46:58,318 line:-2
你可以使用产品菜单
把运行目的地切换为


871
00:46:58,385 --> 00:46:59,219 line:-1
我的Mac


872
00:46:59,920 --> 00:47:00,854 line:-1
然后就存档


873
00:47:01,788 --> 00:47:05,092 line:-2
那将打开管理器
并显示全新的Mac app存档


874
00:47:06,159 --> 00:47:08,195 line:-1
然后你可以点击发布app按钮


875
00:47:08,595 --> 00:47:10,731 line:-1
按照你所熟悉的同样的上传流程做


876
00:47:12,499 --> 00:47:14,601 line:-2
当然了
你可以从命令行来实现这一切


877
00:47:15,769 --> 00:47:17,804 line:-1
包括从Xcode创建进行上传


878
00:47:19,339 --> 00:47:21,074 line:-2
要了解更多关于
如何自动化这一切操作的信息


879
00:47:21,475 --> 00:47:24,044 line:-2
我建议你们查看
2017年的一场演讲


880
00:47:24,111 --> 00:47:26,780 line:-2
关于签署Xcode
和Xcode服务器的新功能


881
00:47:29,449 --> 00:47:30,384 line:-1
（Mac App Store）


882
00:47:30,951 --> 00:47:32,019 line:-1
好的 那么你已经创建好app了


883
00:47:32,686 --> 00:47:36,156 line:-2
但把app发到App Store
之前 还有几个步骤


884
00:47:37,391 --> 00:47:39,193 line:-1
首先这是一个新Mac app


885
00:47:39,660 --> 00:47:43,063 line:-2
因此需在App Store连接中
创建一个新app记录


886
00:47:43,130 --> 00:47:44,464 line:-1
就像你对iOS版app所做的那样


887
00:47:44,898 --> 00:47:46,433 line:-1
然后以前和现在各一次


888
00:47:47,935 --> 00:47:49,069 line:-1
当你这么做时


889
00:47:49,536 --> 00:47:51,772 line:-1
你正在把app记录与


890
00:47:52,039 --> 00:47:54,408 line:-2
Xcode替你合成的app标识符
关联在一起


891
00:47:54,675 --> 00:47:56,877 line:-2
就是那个带有
UIKit for Mac前缀的标识符


892
00:47:58,579 --> 00:48:00,380 line:-2
无论何时当你把app上传到
App Store时


893
00:48:00,447 --> 00:48:01,915 line:-1
你应该总是增加你的版本号


894
00:48:02,716 --> 00:48:04,151 line:-1
这与iOS有一些不同


895
00:48:04,952 --> 00:48:08,188 line:-2
MacOS使用版本号
来决定发布顺序


896
00:48:09,823 --> 00:48:10,791 line:-1
如果你完成了所有这些操作


897
00:48:11,525 --> 00:48:12,926 line:-1
你就可以从Xcode上传app


898
00:48:13,660 --> 00:48:15,062 line:-2
并把app发布到
App Store了


899
00:48:18,265 --> 00:48:20,567 line:-1
现在关于Mac有一件事很酷


900
00:48:20,634 --> 00:48:23,504 line:-2
就是你对如何安装app
有更多的控制


901
00:48:24,705 --> 00:48:27,508 line:-2
当客户从App Store
下载你的app时


902
00:48:28,075 --> 00:48:31,445 line:-2
能把该app复制到另一台Mac上
并运行的话会非常完美


903
00:48:32,679 --> 00:48:33,847 line:-1
那涉及到一些事


904
00:48:35,082 --> 00:48:37,117 line:-1
macOS上没有app瘦身


905
00:48:38,619 --> 00:48:40,921 line:-1
你的app总要包含


906
00:48:40,988 --> 00:48:42,589 line:-2
在任意Mac上运行所必需的
全套资源


907
00:48:44,291 --> 00:48:46,593 line:-2
因为你的app可以被拖放到
任意Mac上


908
00:48:46,994 --> 00:48:49,663 line:-2
由你决定是否向app中
添加收据验证逻辑


909
00:48:50,531 --> 00:48:52,466 line:-2
因此无论何时当你的app启动时
都应该检查


910
00:48:52,733 --> 00:48:55,536 line:-1
是否为合法购买以及是否被允许运行


911
00:48:57,037 --> 00:48:59,840 line:-2
要了解更多关于如何向app中
添加收据验证的信息


912
00:49:00,307 --> 00:49:03,944 line:-2
我推荐你参考2017年的
先进的StoreKit演讲


913
00:49:06,280 --> 00:49:09,216 line:-2
好消息是一旦你的app
被发布到App Store上


914
00:49:09,950 --> 00:49:11,618 line:-1
你就可以使用同样的强大工具


915
00:49:12,419 --> 00:49:16,089 line:-2
比如App Store Connect、
App分析用于追踪销售和营销


916
00:49:17,024 --> 00:49:18,525 line:-1
还有Xcode崩溃管理器


917
00:49:18,859 --> 00:49:21,395 line:-2
用于归类可能会影响你客户的
所有崩溃


918
00:49:22,996 --> 00:49:25,666 line:-2
你的app可以使用同样的
StoreKit和GameKit API


919
00:49:26,700 --> 00:49:28,302 line:-1
现在如果你使用那些API


920
00:49:28,602 --> 00:49:31,004 line:-2
需在App Store Connect上
做一些额外的设置


921
00:49:32,506 --> 00:49:35,242 line:-1
如果你使用app内购买或订阅


922
00:49:35,943 --> 00:49:38,478 line:-2
你需要在
App Store Connect中


923
00:49:38,545 --> 00:49:39,646 line:-2
对新Mac app
重新创建app内购买或订阅


924
00:49:40,414 --> 00:49:43,417 line:-2
如果你想在两个版本的app之间
共享同样的购买历史


925
00:49:43,784 --> 00:49:46,854 line:-1
你必须维护自己的端对端同步方案


926
00:49:49,256 --> 00:49:50,424 line:-1
如果你是游戏app


927
00:49:50,490 --> 00:49:53,594 line:-2
你应该从使用游戏中心群
共享积分榜和成就数据开始


928
00:49:53,660 --> 00:49:55,195 line:-1
在两个版本的app之间


929
00:49:56,830 --> 00:49:58,165 line:-1
并且如果你的app是多玩家游戏


930
00:49:58,732 --> 00:50:02,236 line:-2
你应该在App Store Connect中
更新多玩家兼容性部分


931
00:50:02,703 --> 00:50:04,271 line:-1
那会确保你的玩家


932
00:50:04,338 --> 00:50:07,474 line:-2
与相应的iOS和
Mac版app相匹配


933
00:50:09,977 --> 00:50:12,980 line:-2
好的 有了这些操作 你就可以
开始玩了 但有个事先警告


934
00:50:13,747 --> 00:50:14,781 line:-1
暂时


935
00:50:15,148 --> 00:50:19,219 line:-2
App Store不接受
带UIKit for Mac前缀的上传


936
00:50:19,620 --> 00:50:21,321 line:-1
你仍可以创建app记录


937
00:50:21,722 --> 00:50:24,858 line:-2
同时体验StoreKit
和GameKit API


938
00:50:25,993 --> 00:50:28,362 line:-2
过了今年夏季
我们将开始接受带有前缀的上传


939
00:50:28,629 --> 00:50:30,731 line:-1
这正是实践上传app的好时候


940
00:50:31,865 --> 00:50:34,134 line:-1
最后当发布Xcode 11时


941
00:50:34,935 --> 00:50:36,270 line:-1
你就可以开始提交进行app审查了


942
00:50:38,705 --> 00:50:40,440 line:-2
这就是在
App Store上的发布


943
00:50:47,014 --> 00:50:49,550 line:-1
现在 在App Store之外


944
00:50:49,616 --> 00:50:50,817 line:-1
你还可以有其它发布选项


945
00:50:51,718 --> 00:50:54,288 line:-1
你可以直接向客户提供app


946
00:50:55,355 --> 00:50:58,292 line:-2
如果你用Developer ID
证书签署你的app


947
00:50:58,625 --> 00:51:00,127 line:-1
并由Apple进行公证的话


948
00:51:01,795 --> 00:51:04,565 line:-2
公证app是一个伟大的改革
对于Mac来说很安全


949
00:51:05,632 --> 00:51:09,269 line:-2
我们都会感到很宽慰 因为我们下载
并在Mac上运行的app


950
00:51:09,336 --> 00:51:11,205 line:-1
已经由写它的开发人员签名


951
00:51:11,872 --> 00:51:13,740 line:-1
且签名已经由Apple进行了审查


952
00:51:15,409 --> 00:51:16,810 line:-2
对于这些app来说
没有任何app评论


953
00:51:17,110 --> 00:51:18,412 line:-1
但我们强制实行良好的政策


954
00:51:18,478 --> 00:51:21,081 line:-2
比如要求打开
你app中的硬化运行时间


955
00:51:21,148 --> 00:51:22,316 line:-1
（已公证的app）


956
00:51:22,783 --> 00:51:26,053 line:-2
要签署和公证你的app
可以使用强大的命令行工具


957
00:51:27,521 --> 00:51:30,023 line:-2
且与你的团队分享一个已公证的
app也可代替TestFlight


958
00:51:30,090 --> 00:51:31,959 line:-2
因为TestFlight
在Mac上不可用


959
00:51:32,893 --> 00:51:35,796 line:-2
但有一个警告
这样签署将不允许你使用


960
00:51:35,863 --> 00:51:38,699 line:-2
那些基于App Store的功能
如GameKit和StoreKit


961
00:51:41,301 --> 00:51:44,605 line:-2
现在签署一个已公证的app
并不像听起来那么吓人


962
00:51:44,671 --> 00:51:46,073 line:-1
一切都可以从Xcode中实现


963
00:51:46,874 --> 00:51:49,309 line:-2
你的第一步是向
Apple上传你的app


964
00:51:50,410 --> 00:51:51,545 line:-1
在这个过程中


965
00:51:51,879 --> 00:51:54,948 line:-2
Xcode将用Developer ID证书
签署你的app


966
00:51:55,249 --> 00:51:56,817 line:-2
并且Apple将扫描
是否为恶意软件


967
00:51:58,151 --> 00:51:59,186 line:-1
几分钟之后


968
00:51:59,253 --> 00:52:02,322 line:-2
Xcode将收到一个通知
公证app


969
00:52:02,623 --> 00:52:04,024 line:-1
那时你可以导出它


970
00:52:04,525 --> 00:52:06,593 line:-2
你可以把它打包
或把它放在磁盘映像中


971
00:52:07,060 --> 00:52:08,529 line:-1
并让它在你的服务器上可用


972
00:52:11,865 --> 00:52:13,534 line:-2
如果你想了解更多
关于安全模型的信息


973
00:52:13,600 --> 00:52:14,735 line:-1
或如何在app中使用安全模型


974
00:52:15,035 --> 00:52:16,837 line:-1
我建议你参考今年的一场演讲


975
00:52:17,171 --> 00:52:18,305 line:-1
关于公证的一切信息


976
00:52:20,674 --> 00:52:24,144 line:-2
好的 这些是你向客户发布app时
所拥有的选择方案


977
00:52:25,412 --> 00:52:27,481 line:-1
值得一提的还有第三种发布方式


978
00:52:27,948 --> 00:52:29,483 line:-1
就是开发签名


979
00:52:30,984 --> 00:52:33,921 line:-2
现在开发签名与你在iOS上
所熟悉的一模一样


980
00:52:34,421 --> 00:52:37,257 line:-2
它对于与团队共享一个app创建
以进行测试来说非常棒


981
00:52:37,958 --> 00:52:40,427 line:-1
请记住 当你与新Mac共享时


982
00:52:41,061 --> 00:52:43,497 line:-2
请记得在开发者门户网站上
注册新设备


983
00:52:45,299 --> 00:52:48,435 line:-1
开发签名是你用于测试


984
00:52:48,502 --> 00:52:50,103 line:-2
那些StoreKit和
GameKit API的工具


985
00:52:50,637 --> 00:52:52,739 line:-1
你可以…当你使用开发签名时


986
00:52:52,806 --> 00:52:54,374 line:-1
你可以使用沙盒测试账户


987
00:52:54,942 --> 00:52:57,711 line:-1
而不是花自己的钱练习收据验证


988
00:53:00,681 --> 00:53:02,649 line:-2
这些就是在Mac上
发布app的选择方案


989
00:53:05,686 --> 00:53:06,920 line:-1
现在当然…


990
00:53:08,355 --> 00:53:09,590 line:-1
有大量信息需要接受


991
00:53:10,791 --> 00:53:13,560 line:-2
但请考虑一下你是否愿意跟我们一起
跨出一大步


992
00:53:14,928 --> 00:53:15,863 line:-1
也许你像我一样


993
00:53:16,830 --> 00:53:18,265 line:-1
你开始是一名iPhone开发人员


994
00:53:19,566 --> 00:53:22,002 line:-1
你精通表视图和屏幕旋转


995
00:53:23,370 --> 00:53:25,072 line:-1
然后你就升级到一些更大的设备上


996
00:53:26,106 --> 00:53:28,041 line:-1
你在iPad上寻求机遇


997
00:53:29,376 --> 00:53:31,745 line:-1
你挑战自己使用新形状因数


998
00:53:32,312 --> 00:53:34,081 line:-1
添加多任务以及拖放


999
00:53:36,016 --> 00:53:37,851 line:-1
你的下一个挑战将是Mac


1000
00:53:38,886 --> 00:53:40,921 line:-1
你将克服重调窗口尺寸和菜单栏


1001
00:53:42,189 --> 00:53:44,124 line:-2
我很高兴看到
你们会给Mac带来什么


1002
00:53:44,758 --> 00:53:46,727 line:-1
我们都将在它的发展中受益颇多


1003
00:53:47,494 --> 00:53:48,829 line:-1
现在去勾选那个复选框吧


1004
00:53:50,163 --> 00:53:51,365 line:-1
请参加我们的讨论会


1005
00:53:52,165 --> 00:53:53,600 line:-1
请观看相关演讲


1006
00:53:54,034 --> 00:53:56,837 line:-1
请度过一个美妙的WWDC 谢谢

