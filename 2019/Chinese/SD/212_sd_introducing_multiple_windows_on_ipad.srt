1
00:00:06,039 --> 00:00:13,046 line:0
（iPad多窗口介绍）


2
00:00:13,847 --> 00:00:14,848 line:-1
谢谢


3
00:00:14,915 --> 00:00:18,318 line:-2
下午好
我是Ken Ferry


4
00:00:18,385 --> 00:00:20,087 line:-2
我来自iOS System UI团队
就是你们可能听过的Springboard


5
00:00:20,587 --> 00:00:24,658 line:-2
今天 我同Steve Holt
和James Savage


6
00:00:24,725 --> 00:00:27,327 line:-1
一起来介绍一下iPad的多窗口


7
00:00:28,629 --> 00:00:29,530 line:-1
我们来聊下什么呢？


8
00:00:30,097 --> 00:00:32,131 line:-1
在iOS 12以及之前的版本


9
00:00:32,533 --> 00:00:34,001 line:-1
如果你上滑切换器


10
00:00:34,067 --> 00:00:35,836 line:-1
你会看到一些小巧的格子


11
00:00:36,336 --> 00:00:38,472 line:-2
点击其中一个
你就能跳转到相应的app 很棒吧


12
00:00:39,740 --> 00:00:40,707 line:-1
在iOS 13…


13
00:00:41,542 --> 00:00:44,645 line:-2
也是类似的
但你看到的不再是app了


14
00:00:45,012 --> 00:00:46,380 line:-1
它们由窗口取代了…


15
00:00:47,247 --> 00:00:49,283 line:-2
如你所见
它被称为API窗口


16
00:00:50,851 --> 00:00:52,519 line:-1
这就是我们今天要聊的内容


17
00:00:53,153 --> 00:00:54,922 line:-1
来讲一下它能为你的app带来什么


18
00:00:55,422 --> 00:00:56,456 line:-1
因为今天只是介绍


19
00:00:56,523 --> 00:00:58,292 line:-1
所以我只简单概述一下


20
00:00:59,059 --> 00:01:00,594 line:-1
我们先从设计问题讲起


21
00:01:01,328 --> 00:01:03,830 line:-1
你可能会想多窗口


22
00:01:03,897 --> 00:01:06,166 line:-1
在你的app有什么用？


23
00:01:07,067 --> 00:01:10,103 line:-1
我们来从app的生命周期为入口


24
00:01:10,604 --> 00:01:12,639 line:-1
来聊一下多窗口视图是怎样对


25
00:01:12,906 --> 00:01:16,043 line:-2
app编程模型
做出了重大的改变的


26
00:01:16,109 --> 00:01:17,578 line:-1
我会介绍如何制作窗口


27
00:01:18,712 --> 00:01:19,980 line:-1
从那里讲起 到拖拽


28
00:01:20,547 --> 00:01:21,815 line:-1
这是你们大多数人制作窗口的方法


29
00:01:22,449 --> 00:01:26,386 line:-1
为了让你的app具有多窗口功能


30
00:01:27,120 --> 00:01:30,624 line:-1
接下来 James会说明


31
00:01:30,691 --> 00:01:33,026 line:-2
你想知道或需要
在你的app里适配的下一个步骤


32
00:01:35,295 --> 00:01:36,296 line:-1
那么我们开始吧


33
00:01:36,363 --> 00:01:38,298 line:-1
我们来聊一下设计问题


34
00:01:38,866 --> 00:01:39,900 line:-1
以及…


35
00:01:40,234 --> 00:01:44,638 line:-2
首先 我们来讲一下
什么是窗口或视图


36
00:01:45,973 --> 00:01:48,976 line:-1
这其实是两个问题


37
00:01:49,042 --> 00:01:53,380 line:-1
第一 我的app


38
00:01:53,747 --> 00:01:54,581 line:-1
可以支持多窗口吗？


39
00:01:55,082 --> 00:01:56,717 line:-1
如果可以 接下来…


40
00:01:57,584 --> 00:01:58,819 line:-1
那窗口是什么样子的呢？


41
00:01:59,086 --> 00:02:00,053 line:-1
它们是怎么工作的


42
00:02:01,188 --> 00:02:03,190 line:-1
用户能习惯它们吗？


43
00:02:04,291 --> 00:02:08,061 line:-2
我们会用Apple内置的
app来回答这些问题


44
00:02:08,729 --> 00:02:10,764 line:-1
以及告诉你如何在你的app中实现


45
00:02:11,098 --> 00:02:12,466 line:-1
那可能是你想知道的


46
00:02:14,001 --> 00:02:15,135 line:-1
我们来看一下Safari


47
00:02:15,869 --> 00:02:19,406 line:-2
Safari是多任务app的
一个范例


48
00:02:19,740 --> 00:02:21,475 line:-1
如图所示


49
00:02:22,509 --> 00:02:24,845 line:-2
这是iOS 12上
Safari的一个截图


50
00:02:25,312 --> 00:02:27,814 line:-1
它已经支持了分屏视图


51
00:02:28,782 --> 00:02:30,250 line:-1
在iOS 13上 它是这个样子


52
00:02:30,317 --> 00:02:32,419 line:-1
在iPadOS 它是这样的


53
00:02:33,120 --> 00:02:34,821 line:-1
并没有太大的区别


54
00:02:35,722 --> 00:02:38,325 line:-1
它是如此重要 甚至当我们还不能


55
00:02:38,392 --> 00:02:39,626 line:-1
在整个操作系统上实现时


56
00:02:39,693 --> 00:02:41,562 line:-1
我们在Safari上先实现了


57
00:02:44,765 --> 00:02:46,967 line:-1
总体来说


58
00:02:47,334 --> 00:02:48,902 line:-1
我们要了解的


59
00:02:51,038 --> 00:02:53,040 line:-1
第一件事是


60
00:02:53,106 --> 00:02:55,976 line:-1
在Safari上窗口类型只有一种


61
00:02:56,043 --> 00:02:58,245 line:-1
每个窗口都是一样的


62
00:02:58,312 --> 00:02:59,847 line:-1
它们在界面上相互克隆对方


63
00:03:00,214 --> 00:03:02,282 line:-1
每个窗口都包含app的所有功能


64
00:03:03,217 --> 00:03:05,185 line:-1
这在iPad上很重要


65
00:03:05,586 --> 00:03:06,587 line:-1
因为


66
00:03:06,854 --> 00:03:10,891 line:-2
用户需要能够在每个窗口使用
所有的功能


67
00:03:11,525 --> 00:03:13,460 line:-1
当用户觉得有多窗口的必要时


68
00:03:13,760 --> 00:03:14,862 line:-1
它们也能够创建


69
00:03:15,495 --> 00:03:18,532 line:-2
如果你的app需要多个窗口
才能完成某件事时


70
00:03:18,599 --> 00:03:20,701 line:-1
那是一定有问题


71
00:03:21,602 --> 00:03:24,137 line:-1
虽然你不一定要确保


72
00:03:24,204 --> 00:03:25,739 line:-1
每个窗口都一模一样


73
00:03:25,806 --> 00:03:28,275 line:-1
但是你要让第一个用户创建的


74
00:03:28,575 --> 00:03:30,511 line:-1
第一窗口具备所有功能


75
00:03:32,579 --> 00:03:34,281 line:-1
所以 如上所述


76
00:03:35,115 --> 00:03:36,016 line:-1
它们都是一样的


77
00:03:36,083 --> 00:03:37,851 line:-1
在大多数Apple的app中


78
00:03:37,918 --> 00:03:38,819 line:-1
你会发现我们是这样做的


79
00:03:39,152 --> 00:03:41,455 line:-1
那不是一件坏事


80
00:03:41,522 --> 00:03:42,890 line:-1
对你来说 它既是容易


81
00:03:42,956 --> 00:03:44,424 line:-1
也是对的事情


82
00:03:44,491 --> 00:03:45,559 line:-1
我们来看个例子


83
00:03:46,460 --> 00:03:47,294 line:-1
在我开始之前


84
00:03:47,361 --> 00:03:49,596 line:-2
需要说明的是
因为我们对此采用了


85
00:03:50,464 --> 00:03:52,266 line:-1
系统支持


86
00:03:52,332 --> 00:03:53,400 line:-1
在Safari中的操作更棒了


87
00:03:53,800 --> 00:03:56,069 line:-1
现在你可以拖动一个窗口到一边


88
00:03:56,503 --> 00:03:59,339 line:-1
只专注于一个窗口的内容


89
00:03:59,406 --> 00:04:00,474 line:-1
很酷


90
00:04:03,944 --> 00:04:05,879 line:-1
下面我们来看文档类型的app


91
00:04:09,783 --> 00:04:11,051 line:-1
现在 我们看到的是Pages


92
00:04:11,985 --> 00:04:13,887 line:-1
用户在使用任何文档类型的app时


93
00:04:14,154 --> 00:04:15,923 line:-1
都有想要同时


94
00:04:16,190 --> 00:04:20,494 line:-1
查看多个窗口的需求


95
00:04:21,028 --> 00:04:22,362 line:-1
所以你一定要支持多窗口


96
00:04:23,397 --> 00:04:24,364 line:-1
这里 你可能会


97
00:04:24,698 --> 00:04:26,300 line:-1
觉得有点惊讶


98
00:04:26,366 --> 00:04:27,501 line:-1
如果你看这些窗口的左上角


99
00:04:28,235 --> 00:04:30,971 line:-1
都有一个“文档”按钮


100
00:04:31,972 --> 00:04:33,941 line:-2
每个窗口都其实相当于
一个浏览器窗口


101
00:04:34,341 --> 00:04:36,376 line:-1
你可以返回到上一个文档


102
00:04:36,443 --> 00:04:37,444 line:-1
查看另一个


103
00:04:37,811 --> 00:04:39,446 line:-1
其实是和Safari一样的


104
00:04:39,847 --> 00:04:41,615 line:-1
只有一种类型的窗口页面和文档页面


105
00:04:44,318 --> 00:04:47,154 line:-1
在每个文档里都不是必须的


106
00:04:47,221 --> 00:04:49,323 line:-2
我觉得并不是每个文档相关的app
都要强制


107
00:04:49,890 --> 00:04:52,492 line:-1
但在这里 其实是有用的


108
00:04:52,559 --> 00:04:54,695 line:-1
但我们接下来看到的例子不是这样的


109
00:04:57,497 --> 00:04:59,499 line:-1
Maps也是


110
00:05:00,200 --> 00:05:01,335 line:-1
只有一种类型窗口


111
00:05:01,602 --> 00:05:03,871 line:-1
这里我提及它的理由是


112
00:05:04,171 --> 00:05:06,907 line:-1
因为它表明了我需要让我的app


113
00:05:06,974 --> 00:05:09,710 line:-1
支持多窗口的其他理由


114
00:05:10,177 --> 00:05:11,545 line:-1
首先


115
00:05:12,513 --> 00:05:15,749 line:-1
这并不是一个典型的例子


116
00:05:16,149 --> 00:05:17,184 line:-1
因为它就像


117
00:05:17,251 --> 00:05:19,720 line:-2
你打开Maps 查找了一些信息
然后关掉它


118
00:05:20,220 --> 00:05:21,188 line:-1
它就是这样工作的


119
00:05:22,689 --> 00:05:23,757 line:-1
但不是这样的


120
00:05:23,824 --> 00:05:26,527 line:-1
假如你在计划晚上的活动


121
00:05:26,593 --> 00:05:28,762 line:-1
你可能会先去吃晚饭


122
00:05:28,829 --> 00:05:29,830 line:-1
然后去看一场演出表演


123
00:05:30,264 --> 00:05:34,234 line:-1
如果两件事能在不同的窗口做


124
00:05:34,301 --> 00:05:35,269 line:-1
岂不是很好


125
00:05:35,669 --> 00:05:37,738 line:-1
你能在不干扰相互两件事的状态


126
00:05:38,105 --> 00:05:40,073 line:-1
的同时思考或改变它们


127
00:05:41,575 --> 00:05:43,777 line:-1
那似乎是针对于Maps的


128
00:05:43,844 --> 00:05:45,445 line:-1
但我们要实现多窗口的原因


129
00:05:45,512 --> 00:05:47,681 line:-1
是因为我们在很多场合都需要这么做


130
00:05:48,148 --> 00:05:51,785 line:-1
所以 我们并不能保证在所有情况下


131
00:05:51,852 --> 00:05:53,020 line:-1
有用与否


132
00:05:53,487 --> 00:05:54,888 line:-1
但我们保证多数场合是需要的


133
00:05:55,389 --> 00:05:59,026 line:-1
所以 我们会用更多的例子来说明


134
00:05:59,092 --> 00:06:01,662 line:-1
但你也要想想自己的app使用场景


135
00:06:03,430 --> 00:06:05,032 line:-1
你知道的


136
00:06:05,098 --> 00:06:07,768 line:-1
因为使用系统的多窗口设计时


137
00:06:08,235 --> 00:06:10,604 line:-1
当你想要选中它们中的一个


138
00:06:10,671 --> 00:06:11,939 line:-1
比如我想要去晚餐地点


139
00:06:12,005 --> 00:06:14,174 line:-2
我能重新安排我的空间
打开Notes


140
00:06:14,241 --> 00:06:17,144 line:-1
我能比只在一个app里


141
00:06:18,245 --> 00:06:19,746 line:-1
做到更多的事情


142
00:06:21,381 --> 00:06:22,883 line:-2
Mail是我们将要看到的
第一个使用


143
00:06:23,383 --> 00:06:25,886 line:-1
不同类型的窗口的app


144
00:06:27,321 --> 00:06:28,822 line:-2
Craig在Keynote演讲
演示过


145
00:06:28,889 --> 00:06:30,224 line:-1
但当你回复一则信息时


146
00:06:30,691 --> 00:06:33,126 line:-1
如同往常一样 模态框出现了


147
00:06:33,694 --> 00:06:34,595 line:-1
但你可以把它挪到一边


148
00:06:35,495 --> 00:06:38,832 line:-1
接下来 你甚至可能想要使用


149
00:06:39,233 --> 00:06:40,501 line:-1
像待办清单一样的


150
00:06:41,034 --> 00:06:45,072 line:-1
待办层级列表


151
00:06:46,340 --> 00:06:47,307 line:-1
所以这种情况下


152
00:06:48,442 --> 00:06:50,210 line:-1
请再看一下窗口上方


153
00:06:50,277 --> 00:06:52,379 line:-1
有一个蓝色箭头的“发送”按钮


154
00:06:52,446 --> 00:06:53,447 line:-1
还有一个“取消”按钮


155
00:06:53,947 --> 00:06:55,983 line:-1
但你无法在此处返回上一级


156
00:06:56,316 --> 00:06:59,553 line:-1
来查看你的邮箱里的其他内容


157
00:06:59,820 --> 00:07:01,021 line:-1
这是窗口的特殊设计


158
00:07:03,190 --> 00:07:05,792 line:-1
接下来 当你


159
00:07:07,261 --> 00:07:09,429 line:-1
点击其中任意按钮 你就能关闭窗口


160
00:07:09,863 --> 00:07:12,599 line:-2
我觉得Craig已经在
Keynote演讲展示过发送方法


161
00:07:12,666 --> 00:07:13,834 line:-1
所以我来展示一下退出的效果


162
00:07:14,334 --> 00:07:16,937 line:-1
如果你想退出右侧视图


163
00:07:17,471 --> 00:07:20,040 line:-2
只想查看他们其中的一个
接着点击“取消” 它看起来是这样


164
00:07:20,307 --> 00:07:23,911 line:-2
你也能在自己的app中
实现这些动画效果


165
00:07:24,178 --> 00:07:26,647 line:-1
我会在随后的会议中讨论


166
00:07:30,417 --> 00:07:33,520 line:-2
Messages
也有不同类型的窗口


167
00:07:33,787 --> 00:07:35,656 line:-1
但不是像待办清单窗口的那种


168
00:07:35,722 --> 00:07:39,026 line:-2
它并不像是一种事务或
其他案例操作那样


169
00:07:39,760 --> 00:07:42,763 line:-2
这里 当你单独为一个对话
打开一个窗口


170
00:07:42,829 --> 00:07:44,865 line:-1
这只属于这个对话


171
00:07:44,932 --> 00:07:46,700 line:-1
的特定窗口


172
00:07:46,767 --> 00:07:48,535 line:-1
当你想要关闭时


173
00:07:48,602 --> 00:07:49,603 line:-1
你能在最上方看到“完成”按钮


174
00:07:51,505 --> 00:07:53,407 line:-1
这更像是一个管理工具


175
00:07:54,441 --> 00:07:56,076 line:-1
但是非常好用


176
00:07:58,111 --> 00:08:01,081 line:-1
接下来 我们回到为什么我的app


177
00:08:01,148 --> 00:08:02,249 line:-1
需要支持多窗口的视图的问题


178
00:08:02,649 --> 00:08:05,152 line:-1
在Messages里


179
00:08:05,219 --> 00:08:09,556 line:-1
我发现在和某个人在一个窗口聊天时


180
00:08:09,623 --> 00:08:12,059 line:-2
如果我能查看另外一个聊天记录
并引用其中的聊天内容


181
00:08:12,726 --> 00:08:14,428 line:-2
发送给我正在聊天的人
是非常高效的体验


182
00:08:14,728 --> 00:08:16,663 line:-2
当我和别人聊天时
如果他们有更多的问题


183
00:08:16,730 --> 00:08:18,899 line:-2
我不必退出当前聊天的界面
找到其他的聊天记录再回来告知他们


184
00:08:18,966 --> 00:08:20,000 line:-1
我一直都在同个窗口


185
00:08:20,467 --> 00:08:23,904 line:-1
所以 我觉得可以概括为


186
00:08:23,971 --> 00:08:25,639 line:-1
能够简化处理多项事情


187
00:08:26,039 --> 00:08:28,509 line:-2
当你在一个窗口处理一件事的时候
能同时查看其他内容


188
00:08:31,712 --> 00:08:35,883 line:-2
最后一个示例Apple app
是Calendar


189
00:08:37,150 --> 00:08:40,120 line:-1
有趣的是Calendar已经支持


190
00:08:40,187 --> 00:08:41,621 line:-1
拖拽事件了


191
00:08:43,524 --> 00:08:45,092 line:-1
但为它适配多窗口之后


192
00:08:45,158 --> 00:08:49,062 line:-2
你可以在Calendar
同时看到不同的两周


193
00:08:49,463 --> 00:08:52,199 line:-1
你可以把任务从一周拖到另外一周


194
00:08:53,133 --> 00:08:57,337 line:-2
在Calendar里并不需要
其他操作就能完成


195
00:08:57,604 --> 00:08:59,439 line:-1
这就是它已有的拖拽功能


196
00:09:00,207 --> 00:09:01,975 line:-1
所以如果你的app支持拖拽功能


197
00:09:03,210 --> 00:09:04,478 line:-1
和多窗口视图


198
00:09:04,545 --> 00:09:07,247 line:-1
你也能拥有这种两种功能


199
00:09:07,314 --> 00:09:08,749 line:-1
一并工作的超能力


200
00:09:10,450 --> 00:09:13,253 line:-1
所以 就像我说的 非常厉害


201
00:09:13,320 --> 00:09:15,289 line:-1
具有这个功能的app


202
00:09:15,856 --> 00:09:20,761 line:-1
都能做很多有用高效的事情


203
00:09:20,827 --> 00:09:23,664 line:-2
虽然我不能为所有app
回答这个问题


204
00:09:23,730 --> 00:09:25,799 line:-1
你可以自己想一想 但这些示例也许


205
00:09:26,366 --> 00:09:30,370 line:-1
能概括一些你的用户的使用场景


206
00:09:33,073 --> 00:09:35,976 line:-2
在开始下一个话题之前
我还想再提一点


207
00:09:36,376 --> 00:09:38,812 line:-2
我们今年对比过Mac和iPad
上app的不同设计


208
00:09:39,179 --> 00:09:41,682 line:-1
Mac的app都有窗口


209
00:09:42,115 --> 00:09:44,084 line:-2
如果没有这个API
你就不可能创建新的窗口


210
00:09:44,151 --> 00:09:45,619 line:-1
这是一类怪异的Mac app


211
00:09:45,686 --> 00:09:47,221 line:-1
但现在你能做到了 我们来看一下


212
00:09:48,188 --> 00:09:50,991 line:-1
（创建窗口应该如何设计交互？）


213
00:09:51,058 --> 00:09:54,194 line:-1
我们已经讲过了窗口


214
00:09:54,728 --> 00:09:56,964 line:-1
现在 我们还是以设计的视角来看看


215
00:09:57,231 --> 00:10:00,267 line:-1
你可以在你的app使用怎样的交互


216
00:10:00,334 --> 00:10:02,069 line:-1
来让用户创建新的窗口


217
00:10:04,538 --> 00:10:07,074 line:-1
我们首先来看看系统提供了


218
00:10:07,140 --> 00:10:08,675 line:-1
哪些功能


219
00:10:08,742 --> 00:10:12,179 line:-1
然后根据已有的功能


220
00:10:12,246 --> 00:10:13,514 line:-1
想一下用户的使用场景


221
00:10:14,414 --> 00:10:15,516 line:-1
对于初次使用app的用户


222
00:10:15,949 --> 00:10:17,317 line:-2
Craig已经展示过
App Expose了


223
00:10:18,585 --> 00:10:19,853 line:-1
在App Expose里


224
00:10:20,120 --> 00:10:22,589 line:-1
右上角一直都有一个小按钮


225
00:10:22,856 --> 00:10:24,791 line:-1
那个小按钮就是用来创建新窗口的


226
00:10:25,626 --> 00:10:27,127 line:-1
这就是系统提供的一个功能


227
00:10:27,628 --> 00:10:28,962 line:-1
如果你想要为你的app支持多窗口


228
00:10:29,696 --> 00:10:30,631 line:-1
这样你就能创建了


229
00:10:32,900 --> 00:10:34,735 line:-1
还有另外一个所有app都可以


230
00:10:35,269 --> 00:10:36,703 line:-1
实现的方案


231
00:10:37,171 --> 00:10:39,806 line:-1
但这是一切的基础


232
00:10:40,741 --> 00:10:42,676 line:-1
如果你已经打开你的app


233
00:10:43,110 --> 00:10:46,246 line:-2
然后拖拽这个app的图标
到屏幕边缘


234
00:10:47,614 --> 00:10:49,950 line:-1
这很明显是在说


235
00:10:50,017 --> 00:10:51,752 line:-1
我想要在这里创建一个新的窗口


236
00:10:52,352 --> 00:10:53,554 line:-1
还有其他意思吗？


237
00:10:55,222 --> 00:10:57,124 line:-2
现在我们已经拥有可以实现
这个功能的所有内容了


238
00:10:57,191 --> 00:10:58,158 line:-1
那就开动吧


239
00:10:59,059 --> 00:11:01,361 line:-1
但有个问题


240
00:11:01,428 --> 00:11:03,263 line:-1
现在 当一个用户选择了其他选项


241
00:11:03,330 --> 00:11:04,965 line:-1
比如Safari中的一个标签页


242
00:11:05,265 --> 00:11:06,767 line:-2
他们拖拽这个标签页到一边
独立成为另一个窗口视图


243
00:11:07,367 --> 00:11:08,869 line:-1
他们觉得这样也行


244
00:11:09,837 --> 00:11:11,939 line:-1
但系统并不能自动实现


245
00:11:12,606 --> 00:11:16,310 line:-1
不过通过API来配置并不会很繁琐


246
00:11:16,376 --> 00:11:18,645 line:-1
但是你要自己来实现这个功能


247
00:11:19,246 --> 00:11:22,282 line:-1
所有拖拽动作都能延伸出这个功能


248
00:11:22,950 --> 00:11:25,085 line:-1
只要用户能取出一个组件


249
00:11:25,719 --> 00:11:29,389 line:-1
它就能形成一个任意类型的新窗口


250
00:11:30,457 --> 00:11:31,892 line:-1
用户会觉得这样做是可行的


251
00:11:31,959 --> 00:11:32,993 line:-1
所以你要支持这个功能


252
00:11:34,394 --> 00:11:37,531 line:-2
一种常见的使用场景是使用
主细节视图类型


253
00:11:38,398 --> 00:11:40,200 line:-1
在Mail app里面


254
00:11:41,735 --> 00:11:44,905 line:-1
左边有个表单视图


255
00:11:44,972 --> 00:11:46,306 line:-1
里面的每个单元格都表示一则消息


256
00:11:46,707 --> 00:11:48,775 line:-2
只要一点击每个单元格
就能看到消息的所有内容 没错吧？


257
00:11:49,443 --> 00:11:52,079 line:-1
所以当把单元格拖出表单视图时


258
00:11:52,980 --> 00:11:55,249 line:-2
用户想要看到的是
有一个新窗口来展示这则消息


259
00:11:58,051 --> 00:11:59,820 line:-1
这就是拖拽的全部讲解了


260
00:11:59,887 --> 00:12:00,721 line:0
（用户直接创建行为）


261
00:12:01,722 --> 00:12:04,024 line:-1
你也可以直接创建新窗口


262
00:12:04,892 --> 00:12:08,662 line:0
比如在Safari
或有链接的app


263
00:12:09,229 --> 00:12:12,065 line:0
你可能想要支持 按住一个链接


264
00:12:12,833 --> 00:12:14,501 line:0
就有一个提示框弹出


265
00:12:14,868 --> 00:12:18,071 line:0
提示框里有个按钮
“在新窗口中打开”


266
00:12:18,872 --> 00:12:20,541 line:0
这是在Safari里面的效果
你也能做到


267
00:12:21,074 --> 00:12:23,110 line:0
如字面意思一样 说在新窗口打开


268
00:12:24,611 --> 00:12:27,314 line:0
所以在UIKit的API里面


269
00:12:27,381 --> 00:12:30,384 line:0
只要你调用它


270
00:12:30,684 --> 00:12:31,718 line:0
它就能打开一个新窗口


271
00:12:32,920 --> 00:12:35,189 line:0
你可以用它来做很多事情


272
00:12:35,255 --> 00:12:37,090 line:-1
比如创建一个声音识别的功能


273
00:12:37,157 --> 00:12:39,593 line:-1
当我打喷嚏的时候


274
00:12:39,660 --> 00:12:42,062 line:-1
它就会创建一个新的喷嚏窗口


275
00:12:42,529 --> 00:12:43,931 line:-1
来分析我的喷嚏


276
00:12:43,997 --> 00:12:45,532 line:-1
就像Shazam或其他类似的


277
00:12:47,267 --> 00:12:49,603 line:-1
你也能做到 但会有点奇怪


278
00:12:51,772 --> 00:12:52,639 line:-1
所以你最好不要那么做


279
00:12:52,706 --> 00:12:55,409 line:-1
这听上去很有趣 但你知道的


280
00:12:57,511 --> 00:12:59,947 line:-1
就像我们之前说的那样


281
00:13:00,447 --> 00:13:02,850 line:-1
用户不应该被强制使用多窗口功能


282
00:13:02,916 --> 00:13:05,085 line:-1
他们应该自己选择创建与否


283
00:13:05,552 --> 00:13:07,955 line:-1
所以当用户有创建的新窗口


284
00:13:08,021 --> 00:13:09,923 line:0
的需要时 你就需要提供比如


285
00:13:10,324 --> 00:13:11,592 line:0
“在新窗口中打开”的功能


286
00:13:12,192 --> 00:13:14,561 line:0
但是这只是设计层面的构想


287
00:13:14,628 --> 00:13:17,397 line:0
所以你需要在你自己的app里实现
这个功能


288
00:13:19,666 --> 00:13:22,369 line:-1
关于设计 我们今天


289
00:13:22,436 --> 00:13:23,470 line:-1
就聊到这里


290
00:13:23,537 --> 00:13:26,673 line:-1
接下来我们来讲一下如何实现


291
00:13:27,207 --> 00:13:29,176 line:-1
有请Steve Holt


292
00:13:32,279 --> 00:13:33,981 line:-1
（UIScene生命周期的实现）


293
00:13:35,382 --> 00:13:36,517 line:-1
谢谢大家


294
00:13:38,585 --> 00:13:39,419 line:-1
谢谢Ken


295
00:13:40,187 --> 00:13:42,623 line:-2
我是Steve Holt
我是UIKit团队的一名工程师


296
00:13:43,223 --> 00:13:44,491 line:-1
你今天幸运地看到了


297
00:13:44,558 --> 00:13:46,026 line:-1
如何将这个新功能引入到app中的


298
00:13:46,426 --> 00:13:48,829 line:-1
一些优秀的示例


299
00:13:49,496 --> 00:13:50,764 line:-1
你可能在想


300
00:13:51,465 --> 00:13:53,767 line:-1
你是如何在app中实现的？


301
00:13:55,235 --> 00:13:57,037 line:-1
我们现在就来了解一下


302
00:13:58,505 --> 00:14:01,041 line:-2
总体上来说
为了在iOS和iPadOS


303
00:14:01,441 --> 00:14:04,278 line:-1
实现这个功能 你需要了解两个类


304
00:14:04,344 --> 00:14:05,345 line:-2
（UIWindowScen和
SceneSession概述）


305
00:14:05,412 --> 00:14:07,981 line:-2
就是UIWindowScene
和SceneSession


306
00:14:10,584 --> 00:14:13,887 line:-2
现在 你可能很熟悉UIKit里
UI的结构组成


307
00:14:14,321 --> 00:14:17,257 line:-2
你有一个屏幕
你有所有的窗口或多个窗口


308
00:14:17,324 --> 00:14:18,325 line:-1
取决于你的app


309
00:14:18,959 --> 00:14:21,228 line:-1
接着 你的视图以及视图控制器


310
00:14:21,295 --> 00:14:22,529 line:-1
都在窗口里面


311
00:14:23,797 --> 00:14:25,332 line:-1
UIWindowScene介于


312
00:14:25,799 --> 00:14:28,268 line:-1
屏幕和窗口之间


313
00:14:29,503 --> 00:14:33,207 line:-2
你可以将你的窗口
作为用户界面里的一个实例


314
00:14:33,874 --> 00:14:36,143 line:-1
而无需从现有基础上


315
00:14:36,210 --> 00:14:37,845 line:-1
强制改变你当前app


316
00:14:37,911 --> 00:14:39,513 line:-1
和用户界面太多


317
00:14:43,417 --> 00:14:45,586 line:-1
简单来说 一个视图


318
00:14:45,652 --> 00:14:47,154 line:-1
包含了用户界面


319
00:14:47,955 --> 00:14:50,490 line:-1
当你需要时 你可以向系统索取


320
00:14:51,291 --> 00:14:54,661 line:-1
在你的用户界面 当用户使用拖拽


321
00:14:55,128 --> 00:14:58,332 line:-1
或其他方式


322
00:14:58,398 --> 00:15:00,000 line:-1
请求打开一个新窗口时


323
00:15:00,767 --> 00:15:04,204 line:-2
系统会问你是否想要将UI
放在屏幕上


324
00:15:05,472 --> 00:15:06,507 line:-1
接下来


325
00:15:06,974 --> 00:15:09,076 line:-1
如果这个窗口应该返回至后台


326
00:15:09,643 --> 00:15:11,478 line:-1
不需要有交互的必要时


327
00:15:12,746 --> 00:15:15,916 line:-1
系统就会判断它是否


328
00:15:16,250 --> 00:15:18,252 line:-2
只需要悬挂在那儿
我们不再需要它了


329
00:15:18,318 --> 00:15:19,887 line:-1
我们可以销毁这个窗口了


330
00:15:21,088 --> 00:15:24,391 line:-1
当我们销毁这个场景时


331
00:15:25,826 --> 00:15:29,162 line:-1
用户还是觉得那里有什么


332
00:15:29,229 --> 00:15:31,231 line:-1
你的app还在转换器右侧


333
00:15:31,298 --> 00:15:32,566 line:-1
之前的位置


334
00:15:33,734 --> 00:15:34,701 line:-1
你需要


335
00:15:35,402 --> 00:15:38,138 line:-1
不依靠某个特定的用户界面


336
00:15:39,173 --> 00:15:43,810 line:-1
就能懂得转换器


337
00:15:43,877 --> 00:15:45,546 line:-1
在你的app被悬挂时里面有什么


338
00:15:47,047 --> 00:15:48,549 line:-2
这是SceneSession
所处的位置


339
00:15:48,615 --> 00:15:49,783 line:-1
（从会话中连接和断开视图）


340
00:15:50,551 --> 00:15:53,687 line:-1
SceneSession表示用户


341
00:15:53,754 --> 00:15:57,491 line:-1
在app的最后操作的用户界面状态


342
00:15:59,159 --> 00:16:00,527 line:-1
现在 他们定义了一个系统角色


343
00:16:00,861 --> 00:16:03,697 line:-1
这可能是一个标准的app用户界面


344
00:16:03,764 --> 00:16:07,100 line:-1
你可能是在真实的设备上运作


345
00:16:07,601 --> 00:16:09,136 line:-1
或是外部的连接设备


346
00:16:11,171 --> 00:16:13,040 line:-1
每次


347
00:16:13,640 --> 00:16:15,709 line:-1
当一个新的窗口在系统上创建时


348
00:16:16,109 --> 00:16:18,579 line:-1
你的app被app代理告知


349
00:16:19,146 --> 00:16:21,014 line:-1
有一则新会话被创建了


350
00:16:21,982 --> 00:16:24,351 line:-1
只要用户通过我们的API的交互


351
00:16:24,718 --> 00:16:27,187 line:-1
或向上滑动销毁空间


352
00:16:27,621 --> 00:16:31,458 line:-1
销毁了其中一个


353
00:16:31,925 --> 00:16:35,028 line:-1
你就会收到会话被摧毁的通知


354
00:16:36,263 --> 00:16:40,434 line:-1
你的app的生命周期中的


355
00:16:40,501 --> 00:16:42,636 line:-1
UI窗口从先前的侧栏


356
00:16:42,936 --> 00:16:44,605 line:-1
连接和断开


357
00:16:46,507 --> 00:16:49,009 line:-1
现在 你app的生命周期中有


358
00:16:49,309 --> 00:16:50,511 line:-1
你可能感兴趣的有趣的现象


359
00:16:53,280 --> 00:16:56,216 line:0
我们用一个图标来分析一下


360
00:16:57,784 --> 00:16:59,486 line:0
在这个app中
我的app的用户界面


361
00:16:59,920 --> 00:17:02,456 line:0
有3则会话


362
00:17:02,523 --> 00:17:04,858 line:0
分别代表了3个不同的系统空间


363
00:17:05,992 --> 00:17:08,194 line:0
现在 它们是断开的状态


364
00:17:08,262 --> 00:17:09,530 line:0
它们都低于后台线


365
00:17:10,230 --> 00:17:14,201 line:0
所以 我的app的状态处于后台


366
00:17:15,736 --> 00:17:19,439 line:0
现在 如果你想激活其中的一个空间


367
00:17:22,910 --> 00:17:24,310 line:0
app被连接的那个


368
00:17:25,112 --> 00:17:26,646 line:0
窗口状态线上升了


369
00:17:26,713 --> 00:17:28,182 line:0
上升到了前台活跃状态


370
00:17:29,650 --> 00:17:31,418 line:0
当我把窗口送回后台


371
00:17:32,853 --> 00:17:35,689 line:0
对应窗口的状态下降了


372
00:17:37,057 --> 00:17:39,760 line:0
如果我切换至其他两个会话


373
00:17:40,661 --> 00:17:44,831 line:0
我的app就会保持
前台活跃状态


374
00:17:44,898 --> 00:17:47,868 line:0
来说明我的app的整体状态


375
00:17:47,935 --> 00:17:48,969 line:0
没有改变


376
00:17:52,739 --> 00:17:56,143 line:0
至于你app的类
和你app的委托类


377
00:17:57,311 --> 00:18:01,582 line:0
我们习惯将用户界面、系统、


378
00:18:02,316 --> 00:18:04,751 line:0
ApplicationDelegate
生命周期


379
00:18:04,818 --> 00:18:05,853 line:0
和app对象结合在一起


380
00:18:06,486 --> 00:18:08,155 line:0
这样的运作方式不在那么适用了


381
00:18:09,456 --> 00:18:10,824 line:-1
所以 我们把它分开


382
00:18:12,559 --> 00:18:15,896 line:0
你的app仍然代表系统的状态


383
00:18:15,963 --> 00:18:17,698 line:0
作为一个系统过程


384
00:18:18,532 --> 00:18:21,168 line:0
ApplicationDelegate
获取事件


385
00:18:21,235 --> 00:18:24,838 line:0
委派关于进程、事物等消息


386
00:18:24,905 --> 00:18:29,843 line:0
以及打开和终止app的进程


387
00:18:30,544 --> 00:18:33,881 line:-2
但现在 你的窗口已经包括了
UI全部的状态


388
00:18:34,648 --> 00:18:36,517 line:0
有关于状态栏的问题吗


389
00:18:37,150 --> 00:18:38,519 line:0
你问现在的窗口


390
00:18:40,487 --> 00:18:42,589 line:0
接着你的
SceneDelegate收到消息


391
00:18:43,390 --> 00:18:45,692 line:0
在一个特殊的上下文中打开链接


392
00:18:48,061 --> 00:18:49,296 line:0
离开后台


393
00:18:49,363 --> 00:18:50,731 line:0
回到前台 等等


394
00:18:51,398 --> 00:18:54,368 line:0
当然 SceneSession
会表示持续的UI状态


395
00:18:56,737 --> 00:18:59,706 line:-2
现在 你可能觉得
有太多复杂的API了


396
00:19:00,941 --> 00:19:04,011 line:0
如果你的app现在有如下代码


397
00:19:04,945 --> 00:19:06,613 line:0
你要做出很大改变了


398
00:19:06,680 --> 00:19:08,815 line:0
你要将你的实现方法


399
00:19:10,117 --> 00:19:10,984 line:-1
转变成这些方法


400
00:19:12,953 --> 00:19:13,954 line:-1
对于其他大多数内容


401
00:19:14,755 --> 00:19:16,456 line:-1
我们尽可能保持和之前一致


402
00:19:17,624 --> 00:19:19,393 line:-1
app在启动时


403
00:19:19,459 --> 00:19:21,628 line:-1
会话是willConnectTo


404
00:19:23,030 --> 00:19:25,232 line:-2
EnterForeground
代表进入前台状态


405
00:19:25,299 --> 00:19:27,868 line:-1
它只是在窗口上而不是app里


406
00:19:28,502 --> 00:19:29,469 line:-1
等等


407
00:19:32,206 --> 00:19:35,342 line:-1
这里 有个状态重置的小问题


408
00:19:35,909 --> 00:19:37,211 line:-1
它非常重要


409
00:19:38,045 --> 00:19:42,049 line:-1
你的用户能查看转换器的状态


410
00:19:42,382 --> 00:19:43,951 line:-1
进入一个特殊的空间


411
00:19:44,518 --> 00:19:48,222 line:-1
得到他们想要的信息之后离开


412
00:19:49,790 --> 00:19:50,958 line:-1
为了协助你完成


413
00:19:51,992 --> 00:19:55,929 line:-2
我们从Handoff那里
借用了一些API


414
00:19:57,097 --> 00:20:00,767 line:-2
我们现在将stateRestoration
作为一个NSUserActivity


415
00:20:01,869 --> 00:20:03,437 line:-1
你可以放入任何你想要的信息


416
00:20:04,538 --> 00:20:07,140 line:-1
在生命周期的许多节点上


417
00:20:07,841 --> 00:20:12,379 line:-2
它会从SceneDelegate
请求用户活动信息


418
00:20:13,680 --> 00:20:15,782 line:-1
接着 当你的窗口复原时


419
00:20:16,049 --> 00:20:20,654 line:-1
会马上将它传给连接代理的回调函数


420
00:20:22,256 --> 00:20:27,127 line:-2
这时 这个特殊的会话将
不会有任何窗口存在


421
00:20:27,995 --> 00:20:29,830 line:-1
你能直接在会话中


422
00:20:29,897 --> 00:20:31,198 line:-2
获取
stateRestorationActivity


423
00:20:31,932 --> 00:20:33,901 line:-1
这样你就能从后台状态恢复过来


424
00:20:34,234 --> 00:20:35,936 line:-1
需要更新一个新的窗口


425
00:20:36,270 --> 00:20:38,605 line:-1
你能找到你想要改变数据的那个


426
00:20:40,908 --> 00:20:43,677 line:-1
我们来看一个快速演示


427
00:20:43,744 --> 00:20:44,645 line:-1
（演示 实现多窗口支持）


428
00:20:44,711 --> 00:20:47,781 line:-2
来看一下
在你的app接入新的API


429
00:20:48,415 --> 00:20:49,283 line:-1
之后是什么样子


430
00:20:56,089 --> 00:20:57,357 line:-1
那么…


431
00:20:59,092 --> 00:21:02,930 line:-1
我这里有个我好朋友


432
00:21:02,996 --> 00:21:04,698 line:-2
我们组的同事John Ham
授权的app


433
00:21:05,399 --> 00:21:08,669 line:-1
他的这个app


434
00:21:09,036 --> 00:21:10,571 line:-1
是我的最爱之一


435
00:21:11,238 --> 00:21:13,807 line:-1
几秒钟之后 模拟器出来就能看到了


436
00:21:14,074 --> 00:21:15,008 line:-1
它真的很酷


437
00:21:16,710 --> 00:21:18,078 line:-1
它启动之后 你将会看到


438
00:21:19,046 --> 00:21:22,649 line:-1
这是一个很酷的相册集app


439
00:21:22,716 --> 00:21:25,919 line:-1
运用了集合视图和流式布局


440
00:21:27,921 --> 00:21:30,224 line:-1
但我会用它来讲很重要的一点


441
00:21:30,290 --> 00:21:32,993 line:-1
它真的很赞


442
00:21:33,660 --> 00:21:34,494 line:-1
接下来


443
00:21:35,562 --> 00:21:38,532 line:-1
我们会从一个它的一个实例入手


444
00:21:39,399 --> 00:21:42,069 line:-1
来讲多窗口的实现


445
00:21:44,338 --> 00:21:46,406 line:-1
因为当我使用这个app时


446
00:21:46,473 --> 00:21:47,908 line:-1
我很想要


447
00:21:48,909 --> 00:21:51,678 line:-1
能够同时查看多张图片


448
00:21:54,581 --> 00:21:55,682 line:-1
我们再等一小会儿


449
00:21:55,749 --> 00:21:56,950 line:-1
等模拟器加载完成


450
00:21:57,351 --> 00:21:58,819 line:-1
好了


451
00:22:01,989 --> 00:22:03,190 line:-1
我们启动app


452
00:22:05,125 --> 00:22:07,794 line:-1
你看 这是一个超棒的app


453
00:22:08,395 --> 00:22:11,265 line:-1
我能进入查看所有的照片


454
00:22:11,832 --> 00:22:12,900 line:-1
然后返回


455
00:22:14,334 --> 00:22:15,269 line:-1
现在…


456
00:22:16,103 --> 00:22:18,405 line:-2
我打开它
试着进入App Expose


457
00:22:18,472 --> 00:22:19,339 line:-1
但在这里不行


458
00:22:19,806 --> 00:22:22,209 line:-1
这是因为这个app没有多窗口视图


459
00:22:23,877 --> 00:22:26,613 line:-1
所以 实现的第一步


460
00:22:28,715 --> 00:22:30,350 line:-1
先进入Xcode


461
00:22:32,486 --> 00:22:33,620 line:-1
在General标签这里


462
00:22:34,855 --> 00:22:37,858 line:-2
找到这个新的复选框
标签Supports多窗口


463
00:22:39,426 --> 00:22:41,261 line:-1
你猜一下我点这里会发生什么


464
00:22:44,164 --> 00:22:46,033 line:-2
我们刚才略微改动了一下
我们的info.plist文件


465
00:22:47,234 --> 00:22:48,435 line:-1
如果我们进到里面


466
00:22:49,570 --> 00:22:51,872 line:-1
这里多了新的一栏


467
00:22:52,539 --> 00:22:54,208 line:-1
app视图清单


468
00:22:55,142 --> 00:22:56,410 line:-1
它将告知系统


469
00:22:57,444 --> 00:23:01,548 line:-1
这个app支持新的生命周期界面


470
00:23:02,249 --> 00:23:04,685 line:-1
我们静态申明了


471
00:23:05,619 --> 00:23:09,223 line:-1
我们想要使用的一类用户界面


472
00:23:10,157 --> 00:23:11,225 line:-1
现在


473
00:23:11,792 --> 00:23:14,761 line:-2
我提前为你打包了
一个info.plist入口


474
00:23:15,295 --> 00:23:16,363 line:-1
所以我们不用它


475
00:23:18,899 --> 00:23:20,067 line:-1
现在我们使用


476
00:23:22,336 --> 00:23:23,370 line:-1
这个


477
00:23:24,371 --> 00:23:26,173 line:-1
我们完成了


478
00:23:26,240 --> 00:23:28,809 line:-2
它已经在我们
已有的Storyboard上了


479
00:23:29,309 --> 00:23:33,614 line:-2
我们有一个非常基本的
SceneDelegate类


480
00:23:34,147 --> 00:23:34,982 line:-1
在这里


481
00:23:35,048 --> 00:23:36,283 line:-1
所有的这些都是在声明


482
00:23:36,984 --> 00:23:39,987 line:-1
一个窗口 它是非常基础的类


483
00:23:41,822 --> 00:23:42,890 line:-1
我们构建一下 让它跑起来


484
00:23:49,396 --> 00:23:51,031 line:-1
和刚开始展示的一样


485
00:23:51,932 --> 00:23:53,033 line:-1
很好


486
00:23:55,035 --> 00:23:56,069 line:-1
不过现在


487
00:24:02,709 --> 00:24:04,578 line:-2
我来看一下是否
可以使用程序坞的图标


488
00:24:04,645 --> 00:24:08,815 line:-2
我向上拖动它
移动它到iPad用户界面的边缘


489
00:24:08,882 --> 00:24:10,150 line:-1
创建一个新的窗口


490
00:24:10,217 --> 00:24:12,152 line:-2
就是info.plist
允许我们操作的


491
00:24:13,353 --> 00:24:14,421 line:-1
不过 不幸的是


492
00:24:15,289 --> 00:24:17,424 line:-1
如果我们返回到主界面


493
00:24:19,793 --> 00:24:21,295 line:-1
这个app终止运行了


494
00:24:21,962 --> 00:24:22,930 line:-1
接着再启动它


495
00:24:26,400 --> 00:24:29,536 line:-1
它并没有返回到正常的状态


496
00:24:29,603 --> 00:24:31,738 line:-1
你看这里才是


497
00:24:37,644 --> 00:24:38,846 line:-1
为了修复这个问题


498
00:24:40,247 --> 00:24:41,615 line:-1
我们需要做一些事情


499
00:24:42,583 --> 00:24:43,584 line:-1
是可以做到的


500
00:24:45,552 --> 00:24:47,955 line:-2
现在 为了在这里实现
stateRestoration


501
00:24:48,355 --> 00:24:53,460 line:-2
我们需要恢复我们已有的
stateRestorationActivity


502
00:24:56,697 --> 00:24:59,166 line:-2
窗口会给视图从新的
stateRestorationActivity返回它


503
00:24:59,666 --> 00:25:00,701 line:-1
委托回调


504
00:25:02,336 --> 00:25:05,239 line:-1
我们进一步看一下实现方法


505
00:25:06,139 --> 00:25:07,975 line:-1
我们在app的实例中设置过它


506
00:25:08,308 --> 00:25:10,143 line:-1
这并不是我们想要的了


507
00:25:14,915 --> 00:25:16,483 line:-1
我们设置它为本地的


508
00:25:17,117 --> 00:25:19,152 line:-1
窗口视图


509
00:25:23,323 --> 00:25:25,025 line:-1
接着 在窗口消失之前清除状态


510
00:25:26,593 --> 00:25:30,931 line:-2
现在 我们返回了用户的活动状态
所以我们能实现stateRestoration


511
00:25:32,132 --> 00:25:33,166 line:-1
来试一下


512
00:25:36,670 --> 00:25:37,871 line:-1
你看这里


513
00:25:37,938 --> 00:25:42,075 line:-2
我们并没有完全实现
stateRestoration方法


514
00:25:43,410 --> 00:25:45,345 line:-1
在我们窗口连接前我们还需做一件事


515
00:25:51,618 --> 00:25:53,420 line:-2
当窗口连接到
SceneSession


516
00:25:53,954 --> 00:25:55,956 line:-2
我们得到了选项
和会话参考


517
00:25:56,623 --> 00:25:58,525 line:-1
现在 在我使用的这个模版里


518
00:25:58,892 --> 00:26:01,528 line:-1
我们已经通过在Handoff


519
00:26:01,595 --> 00:26:05,199 line:-1
和其他系统设置


520
00:26:05,265 --> 00:26:06,400 line:-1
那寻找用户的活动


521
00:26:08,368 --> 00:26:10,604 line:-1
我们想要得到这些用户活动


522
00:26:10,671 --> 00:26:12,673 line:-1
因为这是用户实际操作的


523
00:26:13,974 --> 00:26:14,875 line:-1
不过…


524
00:26:19,680 --> 00:26:22,816 line:-2
stateRestorationActivity
很特别 而且它在会话里面


525
00:26:23,383 --> 00:26:25,085 line:-1
所以当你的活动不存在时


526
00:26:25,619 --> 00:26:27,120 line:-2
我们会使用
stateRestorationActivity


527
00:26:28,222 --> 00:26:30,457 line:-1
现在 我们建立并运行时


528
00:26:32,759 --> 00:26:35,395 line:-2
我们修复了
当app再次启动时的问题


529
00:26:37,965 --> 00:26:42,236 line:-2
所以 这就是如何在你的app中
实现多窗口的功能


530
00:26:42,803 --> 00:26:43,737 line:-1
非常简单


531
00:26:43,804 --> 00:26:46,540 line:-2
你能使用你app中大多数原有的
app代理逻辑


532
00:26:46,607 --> 00:26:48,141 line:-1
将它移动到窗口场景


533
00:26:48,775 --> 00:26:50,177 line:-1
就可以了


534
00:26:51,478 --> 00:26:53,680 line:-1
现在 Ken提到过的


535
00:26:53,747 --> 00:26:54,715 line:-1
（APP生命周期的变动）


536
00:26:54,781 --> 00:26:58,552 line:-1
拖拽物件最好的交互方法


537
00:26:59,319 --> 00:27:00,387 line:-1
是使用拖拽功能


538
00:27:02,222 --> 00:27:05,893 line:-1
以及其他几种方法实现


539
00:27:06,326 --> 00:27:08,428 line:-2
如果你使用
你在info.plist


540
00:27:09,463 --> 00:27:11,598 line:-1
声明的通用链接


541
00:27:11,999 --> 00:27:14,368 line:-1
或文件目录的路径


542
00:27:14,735 --> 00:27:15,569 line:-1
这是有效的


543
00:27:16,537 --> 00:27:18,172 line:-1
但如果你想做一些更客制化的事情


544
00:27:19,706 --> 00:27:21,742 line:-2
你也可以使用
NSUserActivity


545
00:27:22,409 --> 00:27:26,013 line:-2
你可以在你已有的DragItem
的NSItemProvider以不同的对象


546
00:27:26,413 --> 00:27:27,981 line:-1
加入它


547
00:27:29,183 --> 00:27:31,084 line:-1
就像拖动其他任意的app图标


548
00:27:31,852 --> 00:27:33,687 line:-1
当你从系统中拖动它时


549
00:27:34,221 --> 00:27:37,591 line:-2
你能得到点击物件和
系统定位的拖动点


550
00:27:40,494 --> 00:27:43,964 line:-2
下面有请我的同事James
讲解下面的步骤


551
00:27:44,031 --> 00:27:45,132 line:-1
（下个步骤）


552
00:27:46,266 --> 00:27:47,234 line:-1
谢谢


553
00:27:52,506 --> 00:27:53,540 line:-1
谢谢Steve


554
00:27:55,943 --> 00:27:57,244 line:-1
总结一下这次演讲


555
00:27:57,311 --> 00:27:59,279 line:-1
我还要讲三件事


556
00:28:00,013 --> 00:28:03,984 line:-2
第一件是更深入了解
UISceneSession API


557
00:28:04,051 --> 00:28:04,952 line:-1
（完善APP的下个步骤）


558
00:28:05,018 --> 00:28:07,087 line:-1
接下来 我们来学习一些


559
00:28:07,154 --> 00:28:09,690 line:-1
当你复制你app的用户界面时


560
00:28:09,756 --> 00:28:12,192 line:-1
你可能见过的常见问题的一些用例


561
00:28:13,093 --> 00:28:16,763 line:-1
最后 我会简短讨论一下我们为


562
00:28:16,830 --> 00:28:20,133 line:-2
app添加UI支持
新的生命周期的一些反例


563
00:28:21,301 --> 00:28:24,371 line:-2
所以我们来以
什么是视图会话开始


564
00:28:26,273 --> 00:28:28,208 line:-1
回到我们早些时候的示意图


565
00:28:28,909 --> 00:28:32,846 line:-2
在App Switcher里
我们有4个app的窗口


566
00:28:33,247 --> 00:28:34,948 line:-1
用户会这么想


567
00:28:35,015 --> 00:28:35,883 line:-1
四个窗口


568
00:28:36,717 --> 00:28:38,585 line:-1
但我鼓励你以开发人员的角度


569
00:28:38,652 --> 00:28:41,355 line:-1
来想一下这些视图以及视图会话


570
00:28:42,656 --> 00:28:46,126 line:-1
该区别很重要 因为


571
00:28:46,193 --> 00:28:47,861 line:-1
用户在App Switcher看到的窗口


572
00:28:48,195 --> 00:28:49,863 line:-1
一直都是缩略图


573
00:28:50,330 --> 00:28:53,433 line:-1
这些视图不会在你的app中加载


574
00:28:56,837 --> 00:28:58,172 line:-1
它们按需出现和消失


575
00:28:58,705 --> 00:29:00,741 line:-1
但是会话一直都是可用的


576
00:29:01,375 --> 00:29:02,409 line:-1
因为这样的设计


577
00:29:02,476 --> 00:29:06,113 line:-2
我们使用会话
来有规划地控制窗口


578
00:29:08,115 --> 00:29:10,250 line:-1
今年 我们出了一些可以用于


579
00:29:10,317 --> 00:29:12,085 line:-1
多任务处理的API


580
00:29:12,486 --> 00:29:15,489 line:-2
因为它们允许你以代码的方式
来创建新窗口


581
00:29:16,290 --> 00:29:18,659 line:-2
在App Switcher
更新缩略图


582
00:29:19,259 --> 00:29:22,095 line:-1
或着当它们展现的文档过期时


583
00:29:22,429 --> 00:29:24,965 line:-1
使用手势关闭它们


584
00:29:26,433 --> 00:29:28,502 line:-1
来看一下你应该如何使用它们


585
00:29:29,002 --> 00:29:29,937 line:-1
我们来看一些示例代码


586
00:29:31,572 --> 00:29:35,175 line:-2
第一个是
requestSceneSessionActivation API


587
00:29:35,909 --> 00:29:39,346 line:-1
它能让你将app中


588
00:29:39,413 --> 00:29:41,114 line:-1
已有或新的窗口移到前台


589
00:29:41,949 --> 00:29:43,884 line:-1
这个例子中 我会打开一个文档


590
00:29:44,551 --> 00:29:47,554 line:-1
我先检查这个文档是否


591
00:29:47,621 --> 00:29:48,689 line:-1
在我的app里已有了窗口


592
00:29:48,989 --> 00:29:51,491 line:-1
如果有 我将它传给这个API


593
00:29:51,558 --> 00:29:52,593 line:-1
它就会被带到前台


594
00:29:53,460 --> 00:29:54,828 line:-1
但如果这个文档还没被打开过


595
00:29:55,195 --> 00:29:57,297 line:-1
我可以根据上下文创建一个


596
00:29:57,598 --> 00:29:59,967 line:-2
NSUserActivity
我等下要打开它


597
00:30:00,367 --> 00:30:02,402 line:-1
传nil给它 创建一个新的窗口


598
00:30:06,206 --> 00:30:09,076 line:-2
下一个是
requestSceneSessionRefresh API


599
00:30:09,776 --> 00:30:11,979 line:-1
当一个事件改变了


600
00:30:12,045 --> 00:30:15,315 line:-2
你会在你想要收到
一则推送通知的场合中


601
00:30:15,782 --> 00:30:17,351 line:-1
或是Calendar app中


602
00:30:17,417 --> 00:30:18,785 line:-1
使用这个API


603
00:30:19,620 --> 00:30:20,754 line:-1
当你调用这个方法时


604
00:30:20,821 --> 00:30:23,657 line:-2
UIKit将会在未来某些节点
安排更新


605
00:30:23,991 --> 00:30:25,959 line:-1
它会在后台连接到你的窗口


606
00:30:26,560 --> 00:30:28,195 line:-1
你就能有机会改变UI


607
00:30:28,462 --> 00:30:29,830 line:-1
生成一个新的缩略图


608
00:30:30,430 --> 00:30:33,300 line:-2
它之后会被保存至
App Switcher


609
00:30:33,967 --> 00:30:36,904 line:-2
你能使用它来更新
stateRestoration用户活动


610
00:30:36,970 --> 00:30:38,071 line:-1
Steve已经说明过了


611
00:30:40,574 --> 00:30:43,744 line:-2
最后是
requestSceneSessionDestruction API


612
00:30:44,344 --> 00:30:45,646 line:-1
你可以使用它来关闭一个视图


613
00:30:46,613 --> 00:30:48,615 line:-1
最酷的地方在于它和


614
00:30:48,682 --> 00:30:50,817 line:-2
视图…这个选项对象
一同出现


615
00:30:50,884 --> 00:30:52,986 line:-1
你可以为窗口关闭时


616
00:30:53,453 --> 00:30:54,988 line:-1
选择一个语言动画效果


617
00:30:55,989 --> 00:30:57,958 line:-1
你能在Mail的相关窗口看到


618
00:30:58,392 --> 00:30:59,793 line:-1
当用户发送了一则消息


619
00:31:00,093 --> 00:31:01,762 line:-1
这则消息向上跳出了屏幕


620
00:31:02,329 --> 00:31:03,864 line:-1
当用户保存它为草稿时


621
00:31:04,131 --> 00:31:06,700 line:-1
它会向下滑动提醒用户已被保存


622
00:31:07,935 --> 00:31:09,937 line:-1
你可以在你自己的视图和app中


623
00:31:10,003 --> 00:31:10,938 line:-1
使用类似的动画效果


624
00:31:12,840 --> 00:31:15,843 line:-2
现在 窗口管理并不是
会话唯一能做的事


625
00:31:16,710 --> 00:31:18,612 line:-2
我们同时也为它加入了
状态修改功能


626
00:31:19,012 --> 00:31:21,315 line:-2
在NSUserActivity里的
stateRestoration就是这样


627
00:31:22,349 --> 00:31:23,450 line:-1
我们为考虑过许多app


628
00:31:23,517 --> 00:31:26,920 line:-1
这是保存状态的最简单的方式


629
00:31:27,354 --> 00:31:30,257 line:-2
特别是你已经使用了类似
Handoff的技术


630
00:31:31,725 --> 00:31:33,927 line:-1
我们也同时发现很多app


631
00:31:33,994 --> 00:31:35,762 line:-1
已有的状态修复逻辑


632
00:31:35,829 --> 00:31:39,032 line:-2
你可能并不想用
NSUserActivity来集成


633
00:31:39,766 --> 00:31:42,402 line:-2
针对这种情况 我们有一个
persistentIdentifier属性


634
00:31:43,437 --> 00:31:46,673 line:-2
现在 所有的这些
是一个已由系统集成的字符串


635
00:31:47,407 --> 00:31:50,077 line:-1
你能很简单地在你的数据库加入它


636
00:31:50,143 --> 00:31:53,847 line:-2
或在你app中
其他的文件状态变动时


637
00:31:54,648 --> 00:31:57,451 line:-1
它会成为相同视图的标识符


638
00:31:57,851 --> 00:31:59,319 line:-1
每次当你的app启动时


639
00:31:59,386 --> 00:32:01,688 line:-2
甚至是备份和设备里的
恢复文件


640
00:32:04,024 --> 00:32:06,426 line:-2
最后 这里有一个
userInfo目录


641
00:32:06,493 --> 00:32:08,595 line:-1
用来存储小体积的数据


642
00:32:08,929 --> 00:32:11,465 line:-1
比如每个视图的自定义设置


643
00:32:12,232 --> 00:32:15,302 line:-2
当一个侧边栏出现时
或颜色选择器中最后选择的颜色


644
00:32:15,369 --> 00:32:17,604 line:-1
你可能想要使用它


645
00:32:18,372 --> 00:32:20,340 line:-1
从这里查找东西很棒


646
00:32:20,407 --> 00:32:24,044 line:-1
你能找到你在用户默认设置值


647
00:32:24,478 --> 00:32:27,147 line:-2
因为这些值你可能并不想要
将它们暴露给


648
00:32:27,214 --> 00:32:28,148 line:-1
你整个app


649
00:32:30,317 --> 00:32:33,353 line:-2
所以 这些就是
UISceneSession新的API


650
00:32:34,188 --> 00:32:35,289 line:-1
下面我要讲的是


651
00:32:35,355 --> 00:32:36,456 line:-2
当你使用Xcode
支持了多窗口视图


652
00:32:36,523 --> 00:32:38,992 line:-1
构建并运行app之后


653
00:32:39,059 --> 00:32:40,294 line:-1
你下一步要做什么


654
00:32:40,694 --> 00:32:42,362 line:-1
当然是调试排除故障了


655
00:32:42,429 --> 00:32:43,497 line:-1
（排除故障技巧）


656
00:32:43,797 --> 00:32:44,631 line:-1
现在…


657
00:32:45,465 --> 00:32:47,935 line:-2
你app中的很多代码都非常
客制化


658
00:32:48,001 --> 00:32:51,271 line:-2
我们尽了最大的努力设计了框架
来帮你


659
00:32:51,839 --> 00:32:55,042 line:-2
不过 我们不能预测
你需要修改的地方


660
00:32:55,108 --> 00:32:56,176 line:-1
和内容


661
00:32:57,177 --> 00:32:59,213 line:-1
但我们列举了一些


662
00:32:59,279 --> 00:33:00,647 line:-1
我们希望你能思考一下


663
00:33:00,714 --> 00:33:01,949 line:-1
你过去写过的代码


664
00:33:02,749 --> 00:33:04,585 line:-1
适配这个新的生命周期


665
00:33:04,651 --> 00:33:06,787 line:-1
特别是实现多窗口的功能


666
00:33:06,854 --> 00:33:08,922 line:-1
可能改变了你的


667
00:33:08,989 --> 00:33:10,657 line:-1
之前你构建app的想法


668
00:33:11,892 --> 00:33:13,927 line:-1
现在不止一个用户界面了


669
00:33:13,994 --> 00:33:16,864 line:-2
也许不再只有一个
视图控制器的实例了


670
00:33:16,930 --> 00:33:17,965 line:-2
（每个APP都有它自身的挑战
除了改变无其他选择）


671
00:33:18,031 --> 00:33:18,932 line:-1
（测试 测试 测试 更多测试）


672
00:33:18,999 --> 00:33:22,002 line:-2
当然 如果你能自动化测试
那是最好不过了


673
00:33:22,769 --> 00:33:24,771 line:-1
虽然有些错误测试未必能测出来


674
00:33:24,838 --> 00:33:26,874 line:-1
甚至是你的用户也不能


675
00:33:27,508 --> 00:33:29,877 line:-1
因为你对自己app的


676
00:33:29,943 --> 00:33:30,944 line:-1
整体构建的改变


677
00:33:31,378 --> 00:33:33,380 line:-1
所以在你的用户发现问题之前


678
00:33:33,447 --> 00:33:35,849 line:-1
最好的测试方法就是


679
00:33:36,383 --> 00:33:37,217 line:-1
玩你的app


680
00:33:37,284 --> 00:33:39,119 line:-1
你一次可以复刻两份


681
00:33:39,686 --> 00:33:40,888 line:-1
这是一个检测错误的好方法


682
00:33:40,954 --> 00:33:43,924 line:-2
你能马上看到一些
违背你设想的错误


683
00:33:45,926 --> 00:33:48,462 line:-1
现在 我准备了几个案例


684
00:33:49,129 --> 00:33:50,864 line:-1
来重点讲一下你看到的经典错误


685
00:33:50,931 --> 00:33:51,832 line:-1
（关注多窗口视图）


686
00:33:51,899 --> 00:33:53,800 line:-1
这两者的都有特定的主题


687
00:33:54,101 --> 00:33:55,502 line:-1
主题就是状态


688
00:33:56,036 --> 00:33:57,538 line:-1
特别是分享状态


689
00:33:58,605 --> 00:34:00,541 line:-1
现在 我猜你们一定


690
00:34:00,607 --> 00:34:03,076 line:-1
在app中使用过其中的一个类


691
00:34:03,143 --> 00:34:06,380 line:-2
因为它们很常见
在Cocoa类中很有用


692
00:34:07,447 --> 00:34:10,117 line:-2
因为单例的属性
它们使用起来非常便利


693
00:34:10,817 --> 00:34:13,786 line:-1
你能在你的app中使用模型对象


694
00:34:13,853 --> 00:34:16,255 line:-1
获取到UI设备的单例


695
00:34:16,322 --> 00:34:19,359 line:-1
读取一些你正在运行的设备的配置


696
00:34:19,426 --> 00:34:20,527 line:-1
这非常有用


697
00:34:21,228 --> 00:34:23,429 line:-1
但这个方案也能解决问题


698
00:34:23,964 --> 00:34:26,733 line:-1
因为它松散的连接着视图层和数据


699
00:34:27,100 --> 00:34:30,337 line:-1
你可能会丢失你app中流动的一些


700
00:34:30,704 --> 00:34:32,005 line:-1
正在被访问的数据


701
00:34:33,005 --> 00:34:35,576 line:-2
但像我说的那样
它们是非常有用的模仿示例


702
00:34:35,641 --> 00:34:36,610 line:-1
因为它们真的很便利


703
00:34:37,110 --> 00:34:39,213 line:-1
事实上 我希望你们能自己


704
00:34:39,279 --> 00:34:40,681 line:-1
依据情况写一些单例


705
00:34:41,648 --> 00:34:44,318 line:-1
你可能使用一些并不典型的单例


706
00:34:44,585 --> 00:34:45,819 line:-1
比如 一个全局变量


707
00:34:46,687 --> 00:34:50,224 line:-1
或是配套元件上附带的一个单例


708
00:34:51,123 --> 00:34:53,460 line:-1
或是你使用的文件系统


709
00:34:53,527 --> 00:34:57,130 line:-2
它本身就是你app分享的
一个数据集


710
00:34:58,131 --> 00:35:00,901 line:-2
这里 我并不是要告诉你如何摆脱
你所有的单例


711
00:35:00,968 --> 00:35:02,269 line:-1
或分享状态是不好的


712
00:35:02,669 --> 00:35:05,739 line:-1
但我鼓励你思考你如何分享它


713
00:35:06,106 --> 00:35:07,374 line:-1
或着你是否该分享它


714
00:35:08,175 --> 00:35:10,811 line:-1
将你的数据分享出来有很多其他优势


715
00:35:10,878 --> 00:35:12,813 line:-1
比如在单元测试中更省时


716
00:35:15,382 --> 00:35:16,583 line:-1
下面我们进入到案例学习中


717
00:35:17,317 --> 00:35:19,486 line:-1
第一个是状态修复


718
00:35:19,553 --> 00:35:20,654 line:-2
（案例学习
状态修复）


719
00:35:20,721 --> 00:35:22,389 line:-1
我想在介绍之前


720
00:35:22,923 --> 00:35:24,591 line:-1
先展示一下这个示例app


721
00:35:25,392 --> 00:35:27,594 line:-1
这是一个小型的便签编辑器


722
00:35:27,661 --> 00:35:29,229 line:-1
你可以在里面输入一些文字


723
00:35:29,296 --> 00:35:30,898 line:-1
当你退出重启后 内容不会消失


724
00:35:31,398 --> 00:35:33,333 line:-1
我遵循了这个演示的几个步骤


725
00:35:33,400 --> 00:35:35,903 line:-1
来支持多窗口视图


726
00:35:35,969 --> 00:35:36,904 line:-1
效果很好


727
00:35:37,871 --> 00:35:41,074 line:-1
但当我退出并重启app时


728
00:35:41,542 --> 00:35:44,444 line:-2
我app的两个窗口的内容
都变成一模一样了


729
00:35:44,511 --> 00:35:45,946 line:-1
这不是我想要的


730
00:35:47,047 --> 00:35:48,682 line:-1
所以我看了一下我的数据集


731
00:35:49,116 --> 00:35:51,218 line:-1
问题非常简单


732
00:35:51,752 --> 00:35:55,589 line:-2
我将这个文字文件保存在
我的app容器里面


733
00:35:56,323 --> 00:35:57,891 line:-1
但我的路径只有一个


734
00:35:58,458 --> 00:36:01,662 line:-1
所以我app的每个窗口保存的文件


735
00:36:01,728 --> 00:36:03,730 line:-1
都被对方重写了


736
00:36:04,598 --> 00:36:07,267 line:-2
现在 UIKit并不能
直接拿来就用


737
00:36:07,334 --> 00:36:08,635 line:-1
因为这是我自己app的代码


738
00:36:09,236 --> 00:36:11,238 line:-1
所以我要完成两件事


739
00:36:11,872 --> 00:36:14,274 line:-1
我需要为正确的窗口


740
00:36:14,341 --> 00:36:16,777 line:0
和会话视图关联持续存在的识别器


741
00:36:17,611 --> 00:36:20,514 line:0
接着更新我的逻辑
这样我就能保存多份文件了


742
00:36:20,581 --> 00:36:21,548 line:0
而不是只有一份


743
00:36:23,150 --> 00:36:24,251 line:0
现在如果你保持这种惯例


744
00:36:24,718 --> 00:36:26,286 line:0
来做状态修复


745
00:36:26,553 --> 00:36:28,589 line:0
还有一件我想说的是


746
00:36:28,655 --> 00:36:30,090 line:0
清除数据


747
00:36:31,491 --> 00:36:34,428 line:0
当UIKit为你管理
NSUserActivity时


748
00:36:34,862 --> 00:36:36,530 line:0
当你移除它时


749
00:36:37,064 --> 00:36:38,332 line:-1
它会留意去哪里写入它


750
00:36:39,199 --> 00:36:41,134 line:-1
不过当你接受到大文件


751
00:36:41,668 --> 00:36:43,670 line:-1
和你的app的生命周期绑在一起时


752
00:36:44,071 --> 00:36:46,974 line:-2
你接下来会想使用
新的UI app来清除它们


753
00:36:47,040 --> 00:36:48,509 line:-1
didDiscardSceneSessions API


754
00:36:49,743 --> 00:36:52,079 line:0
它被称为
sceneSessions的集合


755
00:36:52,946 --> 00:36:55,782 line:0
它是用来移除


756
00:36:55,849 --> 00:36:57,784 line:0
多余数据的好工具


757
00:36:58,685 --> 00:37:00,754 line:0
一个文档类型的app
比如Pages


758
00:37:00,821 --> 00:37:02,122 line:0
你不会想要删除


759
00:37:02,189 --> 00:37:03,657 line:0
文件系统里的文档


760
00:37:04,525 --> 00:37:08,262 line:0
但是配置和偏好是不需要的


761
00:37:09,329 --> 00:37:12,633 line:0
在你的app窗口中
你的app正在运行


762
00:37:12,699 --> 00:37:14,568 line:0
当用户向上滑动
App Switcher


763
00:37:14,902 --> 00:37:16,103 line:0
这个方法会被立刻调用


764
00:37:16,570 --> 00:37:19,806 line:0
否则 在你下一次启动时


765
00:37:20,107 --> 00:37:21,508 line:0
你将会收到多个窗口视图


766
00:37:23,777 --> 00:37:24,611 line:-2
（案例学习
用户默认配置）


767
00:37:24,945 --> 00:37:27,614 line:-2
下一个用户案例 我们来看一下
UserDefaults


768
00:37:27,681 --> 00:37:30,017 line:-1
是app中


769
00:37:30,083 --> 00:37:31,218 line:-1
另一个非常常见的类


770
00:37:32,319 --> 00:37:33,820 line:-2
UserDefaults
被用于管理设置


771
00:37:34,454 --> 00:37:36,123 line:-1
这就是我在这里展示的原因


772
00:37:37,157 --> 00:37:39,626 line:-2
在我app里
有这个字数统计的切换键


773
00:37:40,394 --> 00:37:41,595 line:-1
当我打开它


774
00:37:41,662 --> 00:37:43,597 line:-1
在屏幕底端会出现字数统计


775
00:37:44,865 --> 00:37:45,832 line:-1
但不幸的是


776
00:37:45,899 --> 00:37:47,534 line:-1
当我的设置视图控制器出现时


777
00:37:47,601 --> 00:37:49,636 line:-1
它才会出现


778
00:37:50,404 --> 00:37:52,806 line:-2
它没有在所有窗口出现
这不符合我的预期


779
00:37:52,873 --> 00:37:55,175 line:-1
我想要它成为我app的全局变量


780
00:37:56,610 --> 00:37:58,278 line:-1
当我想它是如何发生的时候


781
00:37:58,345 --> 00:37:59,646 line:-1
问题同样变得非常简单


782
00:38:00,047 --> 00:38:02,983 line:-2
我有一个设置视图控制器
和它的代理


783
00:38:04,484 --> 00:38:05,786 line:-1
只要设置有变化


784
00:38:05,853 --> 00:38:06,854 line:-1
我告诉代理


785
00:38:06,920 --> 00:38:09,256 line:-1
就是文字编辑视图控制器后面的


786
00:38:09,590 --> 00:38:10,824 line:-1
更新了UI


787
00:38:11,625 --> 00:38:13,527 line:-1
这是一个非常独立的进程


788
00:38:13,594 --> 00:38:16,630 line:-1
我app的第二个窗口


789
00:38:16,697 --> 00:38:18,498 line:-1
不会接收到改动的消息


790
00:38:19,967 --> 00:38:21,502 line:-1
有几种结局方法


791
00:38:21,568 --> 00:38:24,271 line:-1
最优雅的方法是键值监听


792
00:38:25,706 --> 00:38:27,140 line:-1
两部可以实现


793
00:38:28,475 --> 00:38:32,446 line:-2
第一步是通过一个扩展定义一个
UserDefaults属性


794
00:38:33,046 --> 00:38:36,016 line:-2
我能得到一个键的路径
用来实现键值对的监听


795
00:38:36,817 --> 00:38:38,352 line:-1
这是我的isInfoButton


796
00:38:38,852 --> 00:38:41,355 line:-2
不是 是isInforBarHidden
的布尔属性


797
00:38:41,421 --> 00:38:44,324 line:-2
我利用已有的get和set方法
来实现


798
00:38:44,391 --> 00:38:45,459 line:-1
UserDefaults


799
00:38:46,593 --> 00:38:48,629 line:-1
接下来 我回到我注册过监听


800
00:38:48,695 --> 00:38:51,732 line:-2
UserDefaults的
视图控制器


801
00:38:52,332 --> 00:38:54,935 line:-2
它使用了我在扩展中
定义的键的路径


802
00:38:55,302 --> 00:38:57,804 line:-1
只要当值改变时


803
00:38:57,871 --> 00:39:00,140 line:-1
改变处理器就会开始工作


804
00:39:02,042 --> 00:39:05,012 line:-1
重要的是我也向这个注册器


805
00:39:05,612 --> 00:39:06,847 line:-1
传了选项的初始值


806
00:39:07,581 --> 00:39:08,882 line:-1
这非常酷


807
00:39:08,949 --> 00:39:11,885 line:-2
只要我创建它
它就开始调用改变处理器


808
00:39:12,319 --> 00:39:15,255 line:-1
这意味着我无需再重复这段代码


809
00:39:15,789 --> 00:39:18,692 line:-2
当我的视图加载完成后
以及收到了这个更新


810
00:39:19,059 --> 00:39:20,794 line:-1
我无需调用这个方法


811
00:39:21,228 --> 00:39:22,462 line:-1
关于展示的正确与否


812
00:39:22,529 --> 00:39:24,131 line:-1
只有一条真理/b>


813
00:39:25,032 --> 00:39:27,100 line:-1
这是确保你app的界面


814
00:39:27,167 --> 00:39:28,001 line:-1
是否连贯的好方法


815
00:39:30,337 --> 00:39:31,772 line:-1
现在 一切都很完美


816
00:39:35,209 --> 00:39:36,710 line:-1
希望我们能给予你


817
00:39:36,777 --> 00:39:38,779 line:-1
一些app上面的灵感


818
00:39:39,913 --> 00:39:43,217 line:-1
如果你的app已经做得很好了


819
00:39:43,283 --> 00:39:45,819 line:-2
你也许已经使用了这些方法
你无需改变


820
00:39:47,254 --> 00:39:48,689 line:-1
说到最佳实践


821
00:39:49,122 --> 00:39:52,025 line:-2
我想要聊一下UIApplication
的一些不好的使用习惯


822
00:39:53,527 --> 00:39:54,661 line:-1
Steve提到过


823
00:39:54,728 --> 00:39:57,764 line:-1
我们给用户界面状态划分了不同职责


824
00:39:58,198 --> 00:40:00,767 line:-2
通过UIApplicationDelegateand
来处理生命周期


825
00:40:01,802 --> 00:40:05,272 line:-2
我们也划分了
UIApplication


826
00:40:06,473 --> 00:40:09,176 line:-1
现在你能在app中拥有多个窗口


827
00:40:09,243 --> 00:40:10,544 line:-1
同时可见


828
00:40:10,844 --> 00:40:13,080 line:-1
其中一个能使用浅色状态内容


829
00:40:13,514 --> 00:40:15,015 line:-1
其中一个能使用深色状态内容


830
00:40:15,549 --> 00:40:16,917 line:-1
只返回一个结果


831
00:40:16,984 --> 00:40:19,486 line:-1
对我们来说不合理


832
00:40:20,153 --> 00:40:21,288 line:-1
因此


833
00:40:21,355 --> 00:40:23,657 line:-2
我们不建议在UIApplication
使用此类属性


834
00:40:23,724 --> 00:40:25,559 line:-1
窗口视图有一些新的可以尝试


835
00:40:27,160 --> 00:40:29,229 line:-1
我们鼓励你使用这些新的属性


836
00:40:29,496 --> 00:40:32,432 line:-2
甚至是今年没有打算
为你的app支持多窗口功能


837
00:40:32,866 --> 00:40:35,536 line:-2
因为它会引导你进入正确的构思
如果你以后再试用的话


838
00:40:38,438 --> 00:40:39,406 line:-1
我们今天讲了很多


839
00:40:39,873 --> 00:40:41,108 line:-1
所以我来简短做个总结


840
00:40:42,142 --> 00:40:44,945 line:-1
最开始 Ken带大家使用了


841
00:40:45,345 --> 00:40:47,014 line:-1
我们今年加入的很多强大


842
00:40:47,080 --> 00:40:48,649 line:-1
的新功能 重新构思了ApP


843
00:40:48,715 --> 00:40:50,117 line:-1
（总结 多任务处理的新功能合集）


844
00:40:50,184 --> 00:40:52,953 line:-2
我觉得用户真的会想要
使用这些app


845
00:40:53,020 --> 00:40:54,421 line:-1
因为它们有用且方便


846
00:40:54,488 --> 00:40:55,355 line:-1
（用户会期待这些交互行为）


847
00:40:55,422 --> 00:40:57,524 line:-1
因此我鼓励你采用它们


848
00:40:58,125 --> 00:40:59,159 line:-1
（在已有或新APP中简单集成）


849
00:40:59,226 --> 00:41:02,496 line:-2
我们创建这个API来让
已有的app更轻松地进行适配


850
00:41:02,829 --> 00:41:06,567 line:-1
我们为新的app推荐的最佳实践


851
00:41:06,633 --> 00:41:09,736 line:-2
事实上 它将成为
Xcode新项目的默认模版


852
00:41:09,803 --> 00:41:11,271 line:-1
使用UI视图生命周期


853
00:41:11,905 --> 00:41:13,140 line:-1
（多数问题的解决办法很简单）


854
00:41:13,941 --> 00:41:15,142 line:-1
我也想鼓励你


855
00:41:15,209 --> 00:41:17,678 line:-1
因为当你在为新的生命周期做适配时


856
00:41:17,744 --> 00:41:19,746 line:-1
会遇到一些问题


857
00:41:19,813 --> 00:41:21,849 line:-1
问题的解决方案可能很简单


858
00:41:21,915 --> 00:41:26,320 line:-2
包括在之前的WWDC
我们谈论过的


859
00:41:26,920 --> 00:41:28,021 line:-2
（使用UIWindownScene来代替
UIApplication方法）


860
00:41:28,322 --> 00:41:30,324 line:-1
最后 我想鼓励你们移除


861
00:41:30,390 --> 00:41:34,027 line:-2
现在已不太适用的UIApplication
属性 用UIWindowScene来替换


862
00:41:34,494 --> 00:41:37,564 line:-2
当你升级到iOS 13时
或升级iPadOS时


863
00:41:37,631 --> 00:41:38,699 line:-1
所有这些都可使用


864
00:41:39,199 --> 00:41:41,869 line:-2
你不必因为多窗口的优势而一定
采用这种设计


865
00:41:43,570 --> 00:41:45,539 line:-1
这周我们还有几次


866
00:41:45,606 --> 00:41:47,674 line:-1
关于多任务处理进阶的演讲


867
00:41:48,642 --> 00:41:50,377 line:-1
以及这周的一些实验室活动


868
00:41:51,078 --> 00:41:53,981 line:-1
包括了周四的多任务处理的内容


869
00:41:54,047 --> 00:41:56,016 line:-2
（更多信息请访问
DEVELOPER.APPLE.COM/WWDC19/212）


870
00:41:56,083 --> 00:41:57,551 line:-1
谢谢大家今天的聆听


871
00:41:57,618 --> 00:41:58,919 line:-1
祝大家度过愉快的一周

