1
00:00:07,516 --> 00:00:16,516
［ 音乐 ］


2
00:00:17,516 --> 00:00:24,516
［ 掌声 ］


3
00:00:25,016 --> 00:00:26,496
>> 早上好 各位


4
00:00:26,496 --> 00:00:28,826
欢迎来到玩转体能训练新方法


5
00:00:29,426 --> 00:00:30,476
我是 Niharika


6
00:00:30,686 --> 00:00:31,976
我是 Apple


7
00:00:31,976 --> 00:00:33,766
健身团队的工程师


8
00:00:33,766 --> 00:00:34,746
来自我们健康团队的同事


9
00:00:34,746 --> 00:00:36,346
工程师 Karim


10
00:00:36,346 --> 00:00:37,046
也将加入我们今天的话题


11
00:00:37,616 --> 00:00:39,506
我们非常兴奋地


12
00:00:39,506 --> 00:00:40,546
与你们分享


13
00:00:40,546 --> 00:00:41,756
一些全新的特性与功能


14
00:00:41,756 --> 00:00:42,996
它们已经随着 iOS 12 


15
00:00:43,066 --> 00:00:46,186
和 watchOS 5 加入了 HealthKit


16
00:00:49,216 --> 00:00:51,076
Apple Watch 发布于 3 年前


17
00:00:51,076 --> 00:00:52,356
从那时起


18
00:00:52,356 --> 00:00:54,126
我们的用户就热衷于


19
00:00:54,126 --> 00:00:55,426
使用它的健康与


20
00:00:55,426 --> 00:00:56,166
健身功能


21
00:00:56,646 --> 00:00:57,576
他们喜欢完成每日任务圆环


22
00:00:57,656 --> 00:00:59,406
及达成各种成就


23
00:00:59,406 --> 00:01:01,076
并乐于和好友彼此分享


24
00:01:01,076 --> 00:01:02,666
但他们最喜欢的还是完成


25
00:01:02,666 --> 00:01:03,206
体能训练


26
00:01:04,215 --> 00:01:05,806
虽然只是一个开始


27
00:01:06,006 --> 00:01:07,526
但这块手表正在形成一个


28
00:01:07,526 --> 00:01:09,416
充满活力 不断进化的生态系统


29
00:01:09,806 --> 00:01:11,826
其中少不了在座各位


30
00:01:11,916 --> 00:01:13,606
开发人员的贡献


31
00:01:15,006 --> 00:01:16,586
仅仅 2017 年第四季度


32
00:01:16,586 --> 00:01:18,996
App Store 中 


33
00:01:18,996 --> 00:01:21,216
健康健美类别下的 App


34
00:01:21,216 --> 00:01:22,736
下载量超过了 2 亿


35
00:01:22,796 --> 00:01:25,896
这是个惊人的数字


36
00:01:26,206 --> 00:01:27,906
两亿这个数字


37
00:01:27,906 --> 00:01:28,286
实在太酷了


38
00:01:28,786 --> 00:01:29,866
更重要的是


39
00:01:29,866 --> 00:01:31,226
这证明了两件事


40
00:01:31,516 --> 00:01:33,456
其一 它证明了你们各位开发人员的


41
00:01:33,456 --> 00:01:35,206
杰出贡献


42
00:01:35,206 --> 00:01:36,896
为用户带来了绝佳的


43
00:01:36,896 --> 00:01:38,246
产品体验


44
00:01:38,696 --> 00:01:40,256
其二 这意味着人们在这一块


45
00:01:40,256 --> 00:01:41,276
有切实的需求


46
00:01:41,626 --> 00:01:43,216
人们密切关注着这一领域


47
00:01:43,256 --> 00:01:44,976
翘首期盼


48
00:01:44,976 --> 00:01:46,756
你们的新成果


49
00:01:48,246 --> 00:01:49,116
这一生态系统的核心


50
00:01:49,116 --> 00:01:50,976
是这两个 App


51
00:01:50,976 --> 00:01:52,406
健身记录和健康


52
00:01:52,936 --> 00:01:54,586
健身记录是为你呈现


53
00:01:54,586 --> 00:01:56,736
可视化运动数据的主界面


54
00:01:57,226 --> 00:01:58,506
你可以查看你的体能训练


55
00:01:58,506 --> 00:02:00,646
查看热量消耗和锻炼时常


56
00:02:01,326 --> 00:02:03,156
健康 App 包括更多东西


57
00:02:03,826 --> 00:02:05,666
当然 所有这些的核心


58
00:02:05,666 --> 00:02:06,956
也就是我们今天


59
00:02:06,956 --> 00:02:08,716
齐聚于此的理由 就是 HealthKit


60
00:02:10,186 --> 00:02:12,286
我们今天有海量激动人心的


61
00:02:12,286 --> 00:02:13,976
事情要讨论


62
00:02:13,976 --> 00:02:15,346
在我们开始那些话题之前


63
00:02:15,346 --> 00:02:16,566
我们要先谈一谈


64
00:02:16,566 --> 00:02:17,946
一件极其重要的事


65
00:02:18,196 --> 00:02:19,676
那就是隐私和授权


66
00:02:19,676 --> 00:02:21,796
由于数据是相当敏感的


67
00:02:21,796 --> 00:02:23,446
尤其是健康数据


68
00:02:23,496 --> 00:02:25,146
因此在设计研发 App 时


69
00:02:25,146 --> 00:02:26,426
确保有一个


70
00:02:26,426 --> 00:02:28,516
完整的隐私政策


71
00:02:28,516 --> 00:02:30,676
至关重要


72
00:02:30,776 --> 00:02:32,836
然后 Karim 会和大家分享 


73
00:02:32,836 --> 00:02:34,366
我们全新的训练功能特性


74
00:02:34,726 --> 00:02:36,026
可以使你更加轻松地


75
00:02:36,026 --> 00:02:38,146
打造一款可靠的


76
00:02:38,146 --> 00:02:39,026
体能训练 App


77
00:02:39,296 --> 00:02:41,216
最后 我激动地跟大家分享


78
00:02:41,216 --> 00:02:42,656
我们全新的 Quantity 系列 API


79
00:02:42,716 --> 00:02:44,646
这是一个储存与关联


80
00:02:44,646 --> 00:02:46,256
高频数据的


81
00:02:46,336 --> 00:02:47,346
全新方式


82
00:02:48,726 --> 00:02:49,716
好 让我们开始吧


83
00:02:52,536 --> 00:02:53,946
正如我所提到 


84
00:02:53,946 --> 00:02:55,636
隐私和授权必须


85
00:02:55,636 --> 00:02:57,886
先行于任何开发过程


86
00:02:57,886 --> 00:02:59,656
我们 Apple 看待隐私


87
00:02:59,656 --> 00:03:02,796
有一条简单的原则


88
00:03:03,016 --> 00:03:03,916
隐私以用户为本


89
00:03:04,696 --> 00:03:06,986
HealthKit 就是以此为基础 设计而成的


90
00:03:07,146 --> 00:03:08,856
HealthKit 的设计使用户


91
00:03:08,856 --> 00:03:10,756
成为数据的主人


92
00:03:11,176 --> 00:03:13,296
用户可以授权访问


93
00:03:13,296 --> 00:03:15,676
也可以随时取消授权


94
00:03:16,266 --> 00:03:17,986
作为开发人员的你们


95
00:03:17,986 --> 00:03:19,406
是这一环里的最后一块拼图


96
00:03:19,406 --> 00:03:20,856
我们想要确保


97
00:03:21,136 --> 00:03:23,136
我们提供给你们的工具


98
00:03:25,676 --> 00:03:28,786
我们想了几条


99
00:03:28,786 --> 00:03:29,596
简单的规则


100
00:03:29,796 --> 00:03:31,676
第一条是根据你 App 的功能


101
00:03:31,726 --> 00:03:33,076
收集部分数据


102
00:03:33,476 --> 00:03:34,836
意思是说


103
00:03:34,836 --> 00:03:37,356
你应当根据 App 需求


104
00:03:37,356 --> 00:03:38,536
仅收集必要的数据


105
00:03:38,876 --> 00:03:40,246
当然这不是永远


106
00:03:40,246 --> 00:03:40,506
固定的数据


107
00:03:40,506 --> 00:03:42,566
刚开始时 数量可能


108
00:03:42,566 --> 00:03:43,406
不会很多


109
00:03:43,406 --> 00:03:45,196
根据你的实际情况


110
00:03:45,196 --> 00:03:46,916
当你的功能特性增加时


111
00:03:46,916 --> 00:03:48,076
你所需的数据也会更多


112
00:03:48,076 --> 00:03:50,126
但是按照当时的特定需求


113
00:03:50,126 --> 00:03:51,656
来收集必要数据


114
00:03:51,656 --> 00:03:53,276
是非常重要的


115
00:03:54,266 --> 00:03:57,736
第二条是 HealthKit 的授权


116
00:03:57,736 --> 00:03:58,326
是可以更改的


117
00:03:58,596 --> 00:03:59,996
这一条有些微妙


118
00:04:00,306 --> 00:04:02,526
比如说 如果用户重置了


119
00:04:02,566 --> 00:04:04,036
他们的位置与隐私数据


120
00:04:04,416 --> 00:04:05,606
位置与隐私设置


121
00:04:05,606 --> 00:04:08,066
你必须确保尊重


122
00:04:08,066 --> 00:04:09,566
他们的行为


123
00:04:09,566 --> 00:04:10,436
这是你们


124
00:04:10,436 --> 00:04:12,516
应尽的义务


125
00:04:13,016 --> 00:04:14,346
最好的方式


126
00:04:14,346 --> 00:04:15,746
是将 HealthKit 视作真实数据的


127
00:04:15,746 --> 00:04:18,576
唯一来源 因为 HealthKit


128
00:04:18,576 --> 00:04:20,236
会不断更新用户的


129
00:04:20,236 --> 00:04:21,946
授权状态


130
00:04:21,986 --> 00:04:23,126
你必须保证不私藏


131
00:04:23,126 --> 00:04:25,096
任何用户数据


132
00:04:25,096 --> 00:04:26,356
保证你永远只从 HealthKit 


133
00:04:26,356 --> 00:04:28,336
获取你所需的数据


134
00:04:28,336 --> 00:04:29,126
这一点尤为重要


135
00:04:29,786 --> 00:04:31,486
这两个想法


136
00:04:31,596 --> 00:04:33,546
可以被提炼成 3 条规则


137
00:04:34,546 --> 00:04:36,816
当我们涉及隐私与授权时


138
00:04:36,816 --> 00:04:38,246
你应当仅取所需


139
00:04:38,246 --> 00:04:40,636
仅在需要时索取


140
00:04:40,636 --> 00:04:43,066
且每次都要单独索取


141
00:04:44,006 --> 00:04:46,596
在代码实现上


142
00:04:46,596 --> 00:04:47,066
这同样简单


143
00:04:47,736 --> 00:04:49,306
如果我要做一个体能训练 App


144
00:04:49,306 --> 00:04:50,336
开始着手做


145
00:04:50,336 --> 00:04:51,876
理所当然


146
00:04:51,876 --> 00:04:53,036
我需要先从隐私与


147
00:04:53,036 --> 00:04:53,776
授权下手


148
00:04:54,326 --> 00:04:55,536
首先 由于我在创建


149
00:04:55,536 --> 00:04:57,276
一个体能训练 App 我想要


150
00:04:57,276 --> 00:04:59,866
和 HealthKit 共享训练类型


151
00:04:59,866 --> 00:05:01,186
所以我需要明确表明我需要


152
00:05:01,186 --> 00:05:02,156
共享训练类型


153
00:05:03,006 --> 00:05:04,376
接下来 因为我只是在起步阶段


154
00:05:04,376 --> 00:05:05,946
我需要追踪的


155
00:05:05,946 --> 00:05:07,586
数据类型并不多


156
00:05:07,586 --> 00:05:08,666
我想追踪用户的


157
00:05:08,666 --> 00:05:10,876
心率 热量消耗


158
00:05:10,876 --> 00:05:12,246
还有步行与


159
00:05:12,246 --> 00:05:12,586
跑步的路程


160
00:05:12,836 --> 00:05:14,036
现阶段我只需要这些


161
00:05:14,036 --> 00:05:16,326
所以我就是我要请求的


162
00:05:16,326 --> 00:05:17,856
全部数据


163
00:05:18,076 --> 00:05:19,856
最后 在我的 HealthStore 上


164
00:05:19,856 --> 00:05:21,836
我仅请求以上这些数据的授权


165
00:05:21,916 --> 00:05:23,396
我请求要共享的类型


166
00:05:23,396 --> 00:05:24,366
以及要读取的类型


167
00:05:24,816 --> 00:05:26,586
通过以上三个简单的步骤


168
00:05:26,646 --> 00:05:27,946
我们就能切实地确保


169
00:05:27,946 --> 00:05:29,896
我们为尊重用户隐私


170
00:05:29,936 --> 00:05:31,466
完成了必要的步骤


171
00:05:32,066 --> 00:05:35,436
隐私如此重要


172
00:05:35,436 --> 00:05:36,966
越好的 App 越重视隐私


173
00:05:36,966 --> 00:05:38,586
在开发伊始


174
00:05:38,586 --> 00:05:39,956
时刻注意这一点


175
00:05:39,956 --> 00:05:42,116
是至关重要的


176
00:05:42,666 --> 00:05:44,006
现在我们就能访问


177
00:05:44,006 --> 00:05:46,476
用户数据了


178
00:05:46,476 --> 00:05:47,726
我迫不及待地向大家介绍 Karim


179
00:05:47,726 --> 00:05:49,136
他会向大家展示全新的


180
00:05:49,136 --> 00:05:50,036
体能训练的功能特性


181
00:05:51,516 --> 00:05:56,096
［掌声］


182
00:05:56,596 --> 00:05:57,946
>> 大家好


183
00:05:58,576 --> 00:06:00,736
感谢大家今天参加这个会议


184
00:06:01,306 --> 00:06:03,256
我怀着激动的心情


185
00:06:03,386 --> 00:06:05,246
与你们分享全新的体能训练 API


186
00:06:06,526 --> 00:06:08,036
如果这是你第一次接触 HealthKit


187
00:06:08,526 --> 00:06:10,876
你会发现它如此简单好用


188
00:06:11,146 --> 00:06:12,896
让你能从零开始


189
00:06:12,896 --> 00:06:14,536
打造一款功能完善的训练 App


190
00:06:15,356 --> 00:06:16,856
另一方面 假如你


191
00:06:17,156 --> 00:06:18,486
在 App Store 已经拥有一款训练 App


192
00:06:19,036 --> 00:06:20,746
你仍然能看到关于这个 API 的


193
00:06:20,746 --> 00:06:22,796
所有全新的功能特性


194
00:06:22,796 --> 00:06:24,226
让你的 App 获益匪浅


195
00:06:25,076 --> 00:06:26,496
让我们深入了解一下


196
00:06:26,966 --> 00:06:29,766
首先我想先谈谈


197
00:06:29,766 --> 00:06:32,556
通常情况下体能训练 App 的


198
00:06:32,906 --> 00:06:33,556
生命周期


199
00:06:34,196 --> 00:06:35,616
假如说我们正在创建一个


200
00:06:35,766 --> 00:06:37,926
训练 App 来追踪用户的活动


201
00:06:37,926 --> 00:06:41,606
首先第一步


202
00:06:41,606 --> 00:06:43,506
是配置你的 App


203
00:06:44,246 --> 00:06:46,146
在这个阶段 我们知道


204
00:06:46,146 --> 00:06:48,086
用户想要做体能训练


205
00:06:48,086 --> 00:06:50,586
训练的具体类型


206
00:06:51,046 --> 00:06:52,546
我们需要确保


207
00:06:52,546 --> 00:06:54,556
我们的 UI 已经就位


208
00:06:55,916 --> 00:06:58,596
一旦配置完成


209
00:06:58,596 --> 00:07:00,506
我们就能开始体能训练了


210
00:07:01,776 --> 00:07:03,766
在这个阶段


211
00:07:03,766 --> 00:07:06,086
用户会积极锻炼


212
00:07:06,826 --> 00:07:08,796
当然 过了一会


213
00:07:08,796 --> 00:07:12,046
用户会想要结束


214
00:07:12,046 --> 00:07:12,616
体能训练


215
00:07:13,436 --> 00:07:15,666
在那时 我们可以


216
00:07:15,666 --> 00:07:17,216
在 HealthKit 中保存


217
00:07:17,216 --> 00:07:19,316
这条健身记录以及相关数据


218
00:07:20,596 --> 00:07:23,766
这就是一款体能训练 App 


219
00:07:23,766 --> 00:07:25,616
通常的生命周期


220
00:07:26,356 --> 00:07:29,116
现在让我们观察一下用户


221
00:07:29,116 --> 00:07:30,086
在活跃时都发生么什么


222
00:07:30,746 --> 00:07:34,236
你通过交互界面与用户产生关联


223
00:07:34,236 --> 00:07:36,826
这个过程中你想要


224
00:07:36,826 --> 00:07:39,266
完成的任务之一


225
00:07:39,376 --> 00:07:41,736
就是收集那些


226
00:07:41,736 --> 00:07:44,096
显示在用户界面的


227
00:07:44,096 --> 00:07:45,376
训练数据


228
00:07:46,396 --> 00:07:47,926
你同时得确保


229
00:07:47,926 --> 00:07:50,116
用户可以掌控


230
00:07:50,116 --> 00:07:52,606
训练过程的状态


231
00:07:52,706 --> 00:07:55,116
随时暂停或是继续训练


232
00:07:55,576 --> 00:07:59,626
如果你熟悉 HealthKit


233
00:07:59,626 --> 00:08:01,726
你可能了解


234
00:08:01,916 --> 00:08:04,866
watchOS 上的 HKWorkoutSession


235
00:08:06,156 --> 00:08:09,126
HKWorkoutSession 可以处理


236
00:08:09,126 --> 00:08:12,686
生命周期中的某几个步骤


237
00:08:13,256 --> 00:08:16,646
它会使设备的传感器


238
00:08:16,646 --> 00:08:19,546
进入随时准备收集数据的状态


239
00:08:19,916 --> 00:08:21,586
使你能够准确地


240
00:08:21,646 --> 00:08:24,126
收集到训练相关的数据


241
00:08:24,126 --> 00:08:26,966
比如热量消耗 或是心率


242
00:08:27,646 --> 00:08:29,476
它还能让你的 App


243
00:08:29,476 --> 00:08:31,166
在训练进行时


244
00:08:31,166 --> 00:08:36,515
可以在后台运行


245
00:08:36,716 --> 00:08:39,316
你也能够用


246
00:08:39,316 --> 00:08:41,196
HKWorkoutSession 来控制


247
00:08:41,196 --> 00:08:43,056
这次训练的状态


248
00:08:44,436 --> 00:08:45,996
以及最后 你可以


249
00:08:46,376 --> 00:08:48,756
产生生成类似游泳


250
00:08:48,756 --> 00:08:49,906
圈数的活动


251
00:08:50,446 --> 00:08:53,396
当然 这样还不够


252
00:08:53,396 --> 00:08:57,426
你还需要


253
00:08:57,756 --> 00:09:00,236
收集训练过程中


254
00:09:00,236 --> 00:09:02,306
设备产生的数据


255
00:09:02,306 --> 00:09:04,826
然后将它都保存到


256
00:09:04,826 --> 00:09:06,136
HealthKit 上面


257
00:09:07,096 --> 00:09:09,816
为了实现这一点


258
00:09:09,816 --> 00:09:12,256
我很高兴介绍一个新的类


259
00:09:12,746 --> 00:09:14,206
HKWorkoutBuilder


260
00:09:15,316 --> 00:09:16,746
这个 workout builder 是你


261
00:09:16,746 --> 00:09:19,896
收集数据并将其保存在 HealthKit 中的


262
00:09:19,896 --> 00:09:21,816
一站式解决方案


263
00:09:22,366 --> 00:09:25,476
所以这个 builder 会创建


264
00:09:25,476 --> 00:09:28,826
并存储一个 HKWorkout 对象


265
00:09:28,826 --> 00:09:30,776
它在 HealthKit 中代表了一次


266
00:09:30,776 --> 00:09:31,346
体能训练


267
00:09:33,406 --> 00:09:35,676
然后你可以在创建体能训练时


268
00:09:36,036 --> 00:09:39,186
在 builder 中添加样本


269
00:09:39,326 --> 00:09:41,836
活动以及自定义的元数据


270
00:09:42,316 --> 00:09:45,656
并且如果你在 watchOS 上


271
00:09:45,656 --> 00:09:47,316
你可以使用它的子类


272
00:09:47,756 --> 00:09:49,436
HKLiveWorkoutBuilder


273
00:09:50,836 --> 00:09:53,806
所以它仅限于 watchOS


274
00:09:54,326 --> 00:09:56,116
而且又因为它是 HKWorkoutBuilder 的


275
00:09:56,116 --> 00:09:58,096
子类 它有这个 builder 的


276
00:09:58,146 --> 00:09:59,306
所有优点


277
00:09:59,306 --> 00:10:02,126
但又因为它在 watchOS 上


278
00:10:02,126 --> 00:10:04,226
它和 HKWorkoutSession


279
00:10:04,226 --> 00:10:06,676
紧密合作


280
00:10:06,736 --> 00:10:08,106
它有那些很酷的


281
00:10:08,106 --> 00:10:10,956
功能 比如说自动样本


282
00:10:11,026 --> 00:10:12,786
自动活动收集


283
00:10:12,786 --> 00:10:13,776
我们之后会再说到


284
00:10:15,736 --> 00:10:18,006
所以让我们回到体能训练的


285
00:10:18,006 --> 00:10:21,136
App 的生命周期 我们会看到


286
00:10:21,136 --> 00:10:23,206
我们如何用新的 workout builder


287
00:10:23,206 --> 00:10:25,986
设置并开始体能训练


288
00:10:29,456 --> 00:10:31,936
那么首先 我们需要创建一个


289
00:10:31,936 --> 00:10:32,736
workout builder


290
00:10:33,736 --> 00:10:34,956
我们需要用一个初始化程序


291
00:10:34,956 --> 00:10:37,356
我们需要传入一个


292
00:10:37,356 --> 00:10:39,526
healthStore 对象


293
00:10:39,606 --> 00:10:41,666
一个配置项 包含


294
00:10:41,666 --> 00:10:43,646
体能训练类型


295
00:10:43,646 --> 00:10:45,656
户内或户外


296
00:10:45,656 --> 00:10:47,796
其他有关信息的


297
00:10:48,616 --> 00:10:51,156
最后 一个可选的设备


298
00:10:51,726 --> 00:10:53,546
比如说如果数据来自


299
00:10:53,546 --> 00:10:54,906
一个外部的设备


300
00:10:56,336 --> 00:10:58,946
一旦我的 builder 被创建


301
00:10:58,946 --> 00:10:59,996
我所需要做的就是


302
00:10:59,996 --> 00:11:02,706
调用 beginCollection 并且传入一个


303
00:11:02,706 --> 00:11:02,926
开始时间


304
00:11:04,076 --> 00:11:04,896
就是这么简单


305
00:11:06,426 --> 00:11:09,046
如果你在 watchOS 上


306
00:11:09,046 --> 00:11:10,676
你可以用 HKLiveWorkoutBuilder


307
00:11:11,056 --> 00:11:13,266
首先 你需要创建一个


308
00:11:13,266 --> 00:11:15,946
体能训练 session


309
00:11:15,946 --> 00:11:16,766
传入 healthStore 对象


310
00:11:16,766 --> 00:11:19,386
以及 workoutConfiguration


311
00:11:19,756 --> 00:11:21,576
然后你不要自己创建 builder


312
00:11:21,576 --> 00:11:23,386
你可以直接


313
00:11:23,386 --> 00:11:25,876
从 session 中获取


314
00:11:25,876 --> 00:11:26,626
通过这次调用


315
00:11:27,836 --> 00:11:29,156
一旦我们有了 session


316
00:11:29,156 --> 00:11:30,936
和 builder 我们可以继续


317
00:11:30,936 --> 00:11:32,146
并开始了


318
00:11:32,736 --> 00:11:35,006
调用 session 上的 startActivity


319
00:11:35,006 --> 00:11:37,466
和 builder 上的 beginCollection


320
00:11:37,776 --> 00:11:39,416
传入一个开始时间


321
00:11:39,916 --> 00:11:41,236
就是这么简单


322
00:11:41,726 --> 00:11:45,376
这就是如何用 builder


323
00:11:45,376 --> 00:11:47,876
设置并创建一个体能训练


324
00:11:48,886 --> 00:11:49,996
现在 我们来看看我们如何


325
00:11:50,376 --> 00:11:53,666
收集直接展示


326
00:11:53,666 --> 00:11:56,576
在用户界面上的数据


327
00:11:56,576 --> 00:11:58,116
以及如何控制体能训练的状态


328
00:11:58,116 --> 00:12:00,626
当用户需要它的时候


329
00:12:02,956 --> 00:12:05,766
为了收集数据


330
00:12:05,766 --> 00:12:08,526
如果我们想要添加与体能训练


331
00:12:08,526 --> 00:12:11,096
有关的样本数据 比如卡路里


332
00:12:11,096 --> 00:12:14,536
距离 心率


333
00:12:14,536 --> 00:12:16,606
我们可以调用一个简单的方法


334
00:12:16,636 --> 00:12:19,666
即 builder.add


335
00:12:19,666 --> 00:12:21,516
给它传入一个 HKSample 数组


336
00:12:22,116 --> 00:12:25,656
如果我们有想要添加到


337
00:12:25,656 --> 00:12:27,606
体能训练中的事件


338
00:12:27,606 --> 00:12:28,036
也非常类似


339
00:12:29,126 --> 00:12:30,416
我们只需调用


340
00:12:30,576 --> 00:12:32,046
builder.addWorkoutEvents


341
00:12:33,476 --> 00:12:36,306
至于元数据 你们肯定猜到了


342
00:12:36,856 --> 00:12:38,756
有了元数据字典


343
00:12:39,006 --> 00:12:41,376
我们只需调用 builder.addMetadata


344
00:12:41,576 --> 00:12:43,806
然后传入字典即可


345
00:12:44,466 --> 00:12:48,526
但是在 Apple Watch 上


346
00:12:48,526 --> 00:12:51,536
因为设备是在手腕上


347
00:12:51,606 --> 00:12:53,796
而且有众多传感器


348
00:12:54,216 --> 00:12:55,976
你可以产生真实的数据


349
00:12:56,056 --> 00:12:58,776
比如卡路里和距离


350
00:12:59,166 --> 00:13:01,026
那么如果我们可以让 builder


351
00:13:01,056 --> 00:13:03,106
全自动地收集所有数据


352
00:13:03,876 --> 00:13:06,306
岂不是很棒


353
00:13:07,336 --> 00:13:10,706
从 watchOS 5 开始


354
00:13:10,706 --> 00:13:13,856
我们有了自动数据收集


355
00:13:14,246 --> 00:13:15,776
这一切从


356
00:13:15,776 --> 00:13:17,856
HKLiveWorkoutDataSource 开始


357
00:13:18,406 --> 00:13:22,086
所以这个数据源会


358
00:13:22,806 --> 00:13:25,346
收集与当前体能训练相关的


359
00:13:25,346 --> 00:13:27,136
体能训练相关的样本数据


360
00:13:29,226 --> 00:13:32,756
不过 你仍然可以选择


361
00:13:33,316 --> 00:13:34,676
你想要收集的类型


362
00:13:34,776 --> 00:13:37,996
你可以添加或移除类型


363
00:13:37,996 --> 00:13:38,556
只需根据你的需求


364
00:13:39,266 --> 00:13:40,596
它的工作方式如下


365
00:13:41,456 --> 00:13:43,796
首先 我们创建一个数据源


366
00:13:45,056 --> 00:13:46,896
在这 我传入了 healthStore


367
00:13:47,386 --> 00:13:49,836
同时也传入了 workoutConfiguration


368
00:13:50,346 --> 00:13:51,246
由于我传入的配置


369
00:13:51,246 --> 00:13:52,636
包含了活动类型


370
00:13:52,636 --> 00:13:54,696
的有关信息


371
00:13:54,696 --> 00:13:56,816
数据源从而能够


372
00:13:56,816 --> 00:13:59,806
推断针对这次体能训练


373
00:13:59,806 --> 00:14:03,136
应该收集哪些类型的数据


374
00:14:03,236 --> 00:14:05,486
接下来 我只需把


375
00:14:05,486 --> 00:14:07,956
数据源设置在 live workout builder 上面


376
00:14:09,546 --> 00:14:11,616
以及可选地 你可以增加


377
00:14:11,616 --> 00:14:14,036
或移除正在收集的类型


378
00:14:14,746 --> 00:14:16,636
比如说我想要


379
00:14:16,636 --> 00:14:17,016
添加类型


380
00:14:17,686 --> 00:14:20,206
我可以指明


381
00:14:20,206 --> 00:14:22,096
我想在这里添加的类型


382
00:14:22,166 --> 00:14:24,056
如果我想要进一步


383
00:14:24,056 --> 00:14:26,046
限制被收集的类型


384
00:14:26,046 --> 00:14:26,756
也可以指明一个可选的谓词


385
00:14:27,786 --> 00:14:29,516
最后 我们只需调用 dataSource


386
00:14:29,996 --> 00:14:30,856
.collectStatistics


387
00:14:31,036 --> 00:14:34,566
传入类型


388
00:14:34,616 --> 00:14:37,676
同样还有 optionalPredicate


389
00:14:37,966 --> 00:14:41,816
那么现在数据正在被收集


390
00:14:41,866 --> 00:14:44,186
我们来看看如何可以将其


391
00:14:44,726 --> 00:14:47,686
直接显示在用户界面上


392
00:14:48,246 --> 00:14:52,916
每次 builder 的委托方法


393
00:14:53,866 --> 00:14:55,486
带来新数据


394
00:14:55,926 --> 00:14:58,346
workoutBuilder 的


395
00:14:58,346 --> 00:14:59,966
didCollectDataOfcollectedTypes


396
00:14:59,966 --> 00:15:00,356
会被调用


397
00:15:01,086 --> 00:15:03,296
那么在这里 比如说如果


398
00:15:03,296 --> 00:15:04,866
我对心率类型感兴趣


399
00:15:04,866 --> 00:15:07,346
我会确保它是


400
00:15:07,346 --> 00:15:08,876
被收集的数据类型之一


401
00:15:09,046 --> 00:15:11,956
然后 我只需利用


402
00:15:11,956 --> 00:15:14,196
用 builder 的针对数量类型的


403
00:15:14,286 --> 00:15:16,426
数据方法


404
00:15:16,426 --> 00:15:19,086
它会返回一个 HKStatistics 对象


405
00:15:19,706 --> 00:15:21,366
其中包含了相关信息


406
00:15:21,396 --> 00:15:23,426
在这个例子中 有最小值


407
00:15:23,726 --> 00:15:25,816
最大值 平均值 以及


408
00:15:25,816 --> 00:15:28,246
在此次体能训练中


409
00:15:28,246 --> 00:15:30,776
最近记录的心率数值


410
00:15:31,886 --> 00:15:33,576
这样 我就可以


411
00:15:33,576 --> 00:15:34,526
更新用户界面了


412
00:15:35,086 --> 00:15:37,896
在体能训练类 App 中


413
00:15:37,976 --> 00:15:40,296
表示时间流逝的计时器


414
00:15:40,956 --> 00:15:43,296
非常常见


415
00:15:43,886 --> 00:15:46,756
所以 当然 我们要在


416
00:15:46,756 --> 00:15:48,006
训练开始时开始


417
00:15:48,006 --> 00:15:49,936
计时 但这并不够


418
00:15:50,026 --> 00:15:52,596
因为暂停或继续事件会


419
00:15:52,966 --> 00:15:54,866
影响训练持续


420
00:15:54,866 --> 00:15:55,286
时间的计算


421
00:15:56,226 --> 00:15:58,486
所以每当新活动


422
00:15:58,486 --> 00:16:00,436
被添加进 builder


423
00:16:00,436 --> 00:16:01,756
builder 的委托方法


424
00:16:02,226 --> 00:16:04,806
workoutBuilderDidCollectEvents


425
00:16:04,806 --> 00:16:05,436
就会被调用


426
00:16:05,846 --> 00:16:08,186
这样 你就可以


427
00:16:08,186 --> 00:16:10,326
用 builder 的 elapsedTime


428
00:16:10,326 --> 00:16:12,386
属性 它会告诉你


429
00:16:12,736 --> 00:16:14,546
此体能训练当前已


430
00:16:14,546 --> 00:16:14,986
持续的时间


431
00:16:16,166 --> 00:16:19,536
就这么简单


432
00:16:19,736 --> 00:16:21,616
接下来 我们看看


433
00:16:21,616 --> 00:16:23,296
如何控制训练的状态


434
00:16:24,916 --> 00:16:28,396
首先 我想要讨论一下


435
00:16:28,506 --> 00:16:30,566
训练 session 里


436
00:16:30,566 --> 00:16:32,136
所有的不同的状态


437
00:16:32,746 --> 00:16:35,456
第一个是 Not Started


438
00:16:36,366 --> 00:16:37,576
这意味着训练还没有开始


439
00:16:37,576 --> 00:16:41,356
我们还没有 哦不


440
00:16:41,796 --> 00:16:44,496
用户还没有开始体能训练


441
00:16:44,496 --> 00:16:47,136
在这之后 我们会转到


442
00:16:47,456 --> 00:16:48,746
Prepared 状态


443
00:16:49,246 --> 00:16:52,146
Prepared 状态会让系统


444
00:16:52,676 --> 00:16:54,506
处于 Session 模式下


445
00:16:54,916 --> 00:16:56,386
意味着你的 App


446
00:16:56,386 --> 00:16:58,026
会有后台运行能力


447
00:16:58,026 --> 00:17:00,056
传感器也会做好


448
00:17:00,056 --> 00:17:02,086
追踪活动的准备


449
00:17:02,886 --> 00:17:04,866
但是训练还未开始


450
00:17:06,156 --> 00:17:08,236
比如说 如果你的 App


451
00:17:08,236 --> 00:17:10,435
在训练前有一个倒数秒


452
00:17:10,435 --> 00:17:12,576
你可以在这之前将 session


453
00:17:12,576 --> 00:17:14,195
置为 Prepared 状态


454
00:17:14,195 --> 00:17:16,016
以此来确保


455
00:17:16,316 --> 00:17:17,925
设备已经准备好


456
00:17:17,925 --> 00:17:18,776
开始追踪活动


457
00:17:19,296 --> 00:17:22,996
在这之后 我们可以转到 Running 状态


458
00:17:23,346 --> 00:17:26,366
这时 用户在积极地


459
00:17:26,366 --> 00:17:26,876
进行体能训练


460
00:17:27,386 --> 00:17:29,406
当然 用户也可以


461
00:17:29,406 --> 00:17:31,946
变成 Paused 然后回到 Running


462
00:17:32,516 --> 00:17:33,766
然后在两者之间来回切换


463
00:17:33,766 --> 00:17:37,596
直到训练结束


464
00:17:38,236 --> 00:17:42,016
这时 设备仍然处于


465
00:17:42,016 --> 00:17:43,616
Session 模式下 意味着


466
00:17:43,616 --> 00:17:45,716
你的 App 仍然在后台运行


467
00:17:45,716 --> 00:17:47,706
这就为你争取了


468
00:17:47,706 --> 00:17:49,486
一点额外时间 让你需要的话


469
00:17:49,486 --> 00:17:51,066
可以保存这次体能训练


470
00:17:51,576 --> 00:17:54,846
这之后 我们就可以结束


471
00:17:54,846 --> 00:17:55,366
体能训练了


472
00:17:56,056 --> 00:17:58,656
从这起 系统就会


473
00:17:58,716 --> 00:17:59,606
退出 Session 模式


474
00:18:00,146 --> 00:18:03,126
想要在这些状态之间


475
00:18:03,126 --> 00:18:05,356
切换 你只需


476
00:18:05,356 --> 00:18:08,166
在体能训练 session 上


477
00:18:08,166 --> 00:18:09,256
调用这些


478
00:18:14,886 --> 00:18:16,916
这就是我们收集


479
00:18:16,966 --> 00:18:18,926
用户界面展示数据


480
00:18:18,926 --> 00:18:21,286
以及控制


481
00:18:21,286 --> 00:18:22,356
session 状态的方式


482
00:18:23,296 --> 00:18:25,256
我们来看看如何


483
00:18:25,256 --> 00:18:26,786
结束体能训练并且将其保存在


484
00:18:26,786 --> 00:18:27,176
HealthKit 中


485
00:18:27,726 --> 00:18:32,066
为了结束体能训练


486
00:18:32,066 --> 00:18:35,366
首先调用 session.end


487
00:18:35,366 --> 00:18:37,066
同时调用 builder.endCollection


488
00:18:37,336 --> 00:18:39,256
传入体能训练的


489
00:18:39,256 --> 00:18:40,246
结束时间


490
00:18:41,206 --> 00:18:43,066
在这一时间点 尚未有


491
00:18:43,066 --> 00:18:44,746
任何有关此体能训练的数据被收集


492
00:18:44,966 --> 00:18:45,356
数据被收集


493
00:18:45,906 --> 00:18:48,546
然后 如果你想把体能训练


494
00:18:48,546 --> 00:18:50,176
保存在 HealthKit 中


495
00:18:50,176 --> 00:18:51,336
你直接调用 builder.finishWorkout


496
00:18:52,366 --> 00:18:54,706
然后你会在


497
00:18:54,706 --> 00:18:56,946
completion handler 中得到一个


498
00:18:56,946 --> 00:18:58,576
体能训练对象


499
00:18:58,626 --> 00:19:00,586
与它相关的数据已经被


500
00:19:00,686 --> 00:19:02,886
保存在 HealthKit 中了


501
00:19:04,396 --> 00:19:06,746
这就是现在使用新的 API


502
00:19:06,746 --> 00:19:08,986
创造一个体能训练 App 的方式


503
00:19:10,006 --> 00:19:12,336
接下来 我想要


504
00:19:12,336 --> 00:19:14,436
用一个样本来演示一遍


505
00:19:15,096 --> 00:19:16,406
我们会在 demo 中创建一个


506
00:19:16,406 --> 00:19:18,026
为 Apple Watch 设计的体能训练 App


507
00:19:19,516 --> 00:19:25,500
［掌声］


508
00:19:30,346 --> 00:19:32,336
我目前实际上


509
00:19:32,336 --> 00:19:34,786
正在写一个


510
00:19:34,786 --> 00:19:37,056
让用户记录跑步的


511
00:19:37,056 --> 00:19:37,776
体能训练 App


512
00:19:38,466 --> 00:19:40,096
它是个非常简单的 App


513
00:19:40,636 --> 00:19:42,536
这里有一个大的 “Run” 按钮


514
00:19:43,096 --> 00:19:45,436
当点击它时 我会


515
00:19:45,436 --> 00:19:47,866
显示这样一个界面


516
00:19:47,866 --> 00:19:49,976
其中会显示此次训练的


517
00:19:49,976 --> 00:19:51,486
逝去时间以及一些


518
00:19:51,486 --> 00:19:53,816
其他指标 比如消耗的卡路里


519
00:19:54,496 --> 00:19:56,746
最近心率


520
00:19:56,746 --> 00:19:59,416
还有在这次训练中


521
00:19:59,586 --> 00:20:00,156
已经跑的距离


522
00:20:00,706 --> 00:20:02,586
当然 用户也


523
00:20:02,586 --> 00:20:04,686
可以控制训练的状态


524
00:20:04,686 --> 00:20:06,526
因此 用户可以


525
00:20:06,596 --> 00:20:08,666
暂停 继续 以及结束


526
00:20:08,666 --> 00:20:09,036
体能训练


527
00:20:11,716 --> 00:20:14,326
实际上我已经提前


528
00:20:14,326 --> 00:20:16,066
写好了这些用户界面


529
00:20:16,446 --> 00:20:18,626
剩下的是


530
00:20:18,656 --> 00:20:20,646
使用新的体能训练 API


531
00:20:20,986 --> 00:20:22,366
让我的 App 可以跑起来


532
00:20:22,916 --> 00:20:25,706
我们要做的第一件事


533
00:20:25,706 --> 00:20:27,796
就是确保


534
00:20:27,866 --> 00:20:29,596
这个项目的设置是正确的


535
00:20:30,486 --> 00:20:31,786
想要做到这个 我准备前往


536
00:20:31,786 --> 00:20:32,886
我的项目设置页面


537
00:20:32,886 --> 00:20:35,596
然后打开


538
00:20:35,596 --> 00:20:37,916
Capabilities 标签页 确保


539
00:20:37,916 --> 00:20:40,376
这里的 HealthKit Capability


540
00:20:40,416 --> 00:20:40,906
处于开启状态


541
00:20:42,126 --> 00:20:43,716
同时针对你的 WatchKit App 扩展


542
00:20:44,006 --> 00:20:46,026
也需要做相同的事


543
00:20:46,336 --> 00:20:48,236
所以再一次 确保


544
00:20:48,236 --> 00:20:50,366
HealthKit Capability 是开启的


545
00:20:51,356 --> 00:20:53,646
当我完成了这些 我们也应该


546
00:20:53,646 --> 00:20:56,566
把这两个目的字符串添加在


547
00:20:56,566 --> 00:20:59,246
info.plist 文件中


548
00:20:59,246 --> 00:21:01,966
以告知我的用户我为什么需要


549
00:21:01,966 --> 00:21:02,656
访问他们的健康数据


550
00:21:03,766 --> 00:21:06,226
这里的第一条字符串是


551
00:21:06,646 --> 00:21:08,566
“Health Share Usage Description”


552
00:21:09,316 --> 00:21:11,726
告诉用户我为什么


553
00:21:11,726 --> 00:21:13,816
想要把数据存储在 HealthKit 中


554
00:21:14,436 --> 00:21:16,686
同时帮助更新


555
00:21:16,726 --> 00:21:17,316
用户描述


556
00:21:17,316 --> 00:21:19,336
它会告诉用户为什么我


557
00:21:19,616 --> 00:21:23,106
需要读取 HealthKit 中的数据


558
00:21:23,196 --> 00:21:25,376
完成了这些 现在我可以


559
00:21:25,666 --> 00:21:27,226
开始使用新的体能训练 API


560
00:21:27,946 --> 00:21:30,096
当然 使用 API 的


561
00:21:30,096 --> 00:21:31,686
前提条件是


562
00:21:32,636 --> 00:21:34,576
确保我请求了我需要的


563
00:21:34,916 --> 00:21:37,386
数据的相关授权


564
00:21:38,286 --> 00:21:40,196
当然 每个 App


565
00:21:40,226 --> 00:21:40,616
都是不同的


566
00:21:41,266 --> 00:21:43,266
在这次例子中 如果我们回到


567
00:21:43,266 --> 00:21:47,636
我的 App 我会保存


568
00:21:47,636 --> 00:21:48,686
一个体能训练


569
00:21:48,686 --> 00:21:50,796
所以这是我需要


570
00:21:50,796 --> 00:21:53,636
有权限访问的类型之一


571
00:21:53,826 --> 00:21:55,626
另外 我也需要能够


572
00:21:55,686 --> 00:21:57,626
读取卡路里 心率


573
00:21:57,626 --> 00:21:58,586
还有距离


574
00:21:59,336 --> 00:22:00,026
咱们来做这些


575
00:22:01,436 --> 00:22:03,136
当然 我们需要确保


576
00:22:03,136 --> 00:22:04,806
当我们真正需要授权的时候


577
00:22:04,806 --> 00:22:06,476
才发起请求


578
00:22:07,216 --> 00:22:09,516
在我的例子中


579
00:22:09,516 --> 00:22:11,586
我需要在每次用户看到这个 UI 时


580
00:22:11,586 --> 00:22:14,196
来请求 这样我可以


581
00:22:14,196 --> 00:22:15,416
确保我获得了


582
00:22:15,416 --> 00:22:17,346
我获得了相关的授权 在开始


583
00:22:17,346 --> 00:22:17,736
体能训练前


584
00:22:19,076 --> 00:22:20,896
所以这里的这个视图


585
00:22:20,896 --> 00:22:24,006
由 WorkoutStartView 的


586
00:22:24,006 --> 00:22:25,746
WKInterFaceController 控制


587
00:22:25,746 --> 00:22:27,506
那我准备在 didAppear 方法中


588
00:22:28,046 --> 00:22:31,506
来执行授权


589
00:22:33,636 --> 00:22:36,156
所以首先 我这里的 typesToShare


590
00:22:36,156 --> 00:22:37,746
应该是 workout 因为我希望


591
00:22:37,746 --> 00:22:39,616
在最后可以保存一个


592
00:22:39,616 --> 00:22:39,846
体能训练


593
00:22:42,376 --> 00:22:44,296
接下来 我希望读取


594
00:22:44,486 --> 00:22:47,206
心率 动态卡路里


595
00:22:47,846 --> 00:22:50,106
同时还有步行 + 跑步距离


596
00:22:50,626 --> 00:22:53,256
一旦设置好了 typesToShare


597
00:22:53,256 --> 00:22:55,836
和 typesToRead 我只需在


598
00:22:56,216 --> 00:22:57,966
healthStore 上调用 requestAuthorization


599
00:22:57,966 --> 00:23:01,796
并且传入这两个类型


600
00:23:01,976 --> 00:23:03,216
那么我们现在来运行


601
00:23:03,216 --> 00:23:04,826
一下这个代码看看会发生什么


602
00:23:05,926 --> 00:23:08,436
而且因为 Apple Watch 的屏幕


603
00:23:08,436 --> 00:23:10,936
比较小 用户会在


604
00:23:11,516 --> 00:23:13,316
手机上看到一张


605
00:23:13,316 --> 00:23:14,796
授权表单


606
00:23:15,786 --> 00:23:17,396
所以你需要确保


607
00:23:17,716 --> 00:23:19,666
在你的 iPhone App 上也能


608
00:23:19,666 --> 00:23:20,946
处理授权


609
00:23:22,536 --> 00:23:24,076
那我们继续


610
00:23:24,076 --> 00:23:24,846
先关闭这个视图


611
00:23:25,436 --> 00:23:27,696
那么我们现在打开我的 iPhone App


612
00:23:28,306 --> 00:23:30,726
这里 我看到了一张


613
00:23:30,726 --> 00:23:32,946
授权表单 在这我可以决定


614
00:23:33,516 --> 00:23:35,716
我是否授予这个 App


615
00:23:35,716 --> 00:23:37,046
访问权限


616
00:23:37,826 --> 00:23:39,006
对于现在这个样本


617
00:23:39,006 --> 00:23:42,746
我会把所有类别都打开 并且点击“允许”


618
00:23:44,176 --> 00:23:45,856
这就是如何给我的 App


619
00:23:45,946 --> 00:23:48,016
授予访问权限


620
00:23:49,326 --> 00:23:51,746
接下来 我们终于可以开始


621
00:23:51,746 --> 00:23:54,096
用体能训练 API 了


622
00:23:54,426 --> 00:23:56,386
所以当我点击这里的这个按钮


623
00:23:56,386 --> 00:23:59,306
这个视图会被传过来


624
00:23:59,746 --> 00:24:01,426
包含体能训练


625
00:24:01,426 --> 00:24:03,726
相关信息的


626
00:24:03,726 --> 00:24:04,496
workoutConfiguration 对象


627
00:24:05,046 --> 00:24:06,326
在这个例子中


628
00:24:06,326 --> 00:24:07,046
这是个跑步训练


629
00:24:07,796 --> 00:24:09,496
从那里 我可以继续


630
00:24:09,966 --> 00:24:11,046
设置我的体能训练了


631
00:24:12,096 --> 00:24:13,666
这个视图由


632
00:24:13,666 --> 00:24:16,476
我的体能训练 session


633
00:24:16,476 --> 00:24:18,276
WatchKit 界面控制器支持


634
00:24:18,276 --> 00:24:20,066
我会在唤醒方法中


635
00:24:20,066 --> 00:24:20,866
完成设置


636
00:24:21,586 --> 00:24:24,196
那么首先 我会创建


637
00:24:24,196 --> 00:24:26,296
HKWorkoutSession 和


638
00:24:26,296 --> 00:24:27,836
HKLiveWorkoutBuilder


639
00:24:29,996 --> 00:24:32,756
我们用初始化程序


640
00:24:33,106 --> 00:24:35,556
创建了 session


641
00:24:35,556 --> 00:24:36,936
我们再把体能训练配置对象传给它


642
00:24:37,836 --> 00:24:39,756
然后 我们只需从 session 中


643
00:24:40,536 --> 00:24:44,276
直接获取 builder


644
00:24:44,386 --> 00:24:46,766
如果体能训练配置项无效


645
00:24:46,766 --> 00:24:48,156
创建 session 可能会失败


646
00:24:48,156 --> 00:24:50,646
所以这就是为什么我会


647
00:24:50,706 --> 00:24:52,806
把这段代码放在一个 do-catch 区块中


648
00:24:53,276 --> 00:24:55,896
如果有任何错误 会被忽略


649
00:24:56,366 --> 00:25:00,156
接下来 让我们设置这个 session


650
00:25:00,196 --> 00:25:00,706
和 builder


651
00:25:01,526 --> 00:25:04,646
在这个例子中


652
00:25:04,826 --> 00:25:06,336
我希望我的界面控制器


653
00:25:06,336 --> 00:25:08,846
可以是 session 和


654
00:25:08,846 --> 00:25:09,346
builder 的委托


655
00:25:09,656 --> 00:25:11,326
因为我也想


656
00:25:11,386 --> 00:25:13,286
收集设备产生的采样数据


657
00:25:13,286 --> 00:25:15,666
我需要在这里使用


658
00:25:15,666 --> 00:25:18,366
一个实时的数据源并且传给它


659
00:25:18,366 --> 00:25:20,676
一个体能训练配置项


660
00:25:20,676 --> 00:25:22,576
这样各种类型就会


661
00:25:22,656 --> 00:25:24,166
为我自动推断出来


662
00:25:25,636 --> 00:25:28,986
最后 我只需


663
00:25:28,986 --> 00:25:31,166
启动 session 和 builder


664
00:25:31,436 --> 00:25:35,256
那么既然我的体能训练已经


665
00:25:35,256 --> 00:25:37,206
开始 我需要做的第一件事


666
00:25:37,206 --> 00:25:39,526
就是启动我的


667
00:25:39,526 --> 00:25:40,996
elapsedTime 计时器


668
00:25:40,996 --> 00:25:43,026
我会在 beingCollectionCall 的


669
00:25:43,506 --> 00:25:45,226
回调中来


670
00:25:45,226 --> 00:25:46,286
完成这个


671
00:25:46,906 --> 00:25:51,356
我这里有一个方法


672
00:25:51,586 --> 00:25:52,196
可以帮我做


673
00:25:52,926 --> 00:25:55,716
当然 因为暂停和


674
00:25:55,716 --> 00:25:57,726
继续事件也会影响


675
00:25:58,586 --> 00:26:00,626
持续时间的计算 我在


676
00:26:00,676 --> 00:26:02,666
builder 的 didCollectEvent 中


677
00:26:02,756 --> 00:26:07,776
也需要调用这个


678
00:26:07,946 --> 00:26:09,206
现在 我们来实现这个方法


679
00:26:10,596 --> 00:26:13,246
所以在我的 UI 中


680
00:26:13,246 --> 00:26:14,826
我使用了一个 WKInterfaceTimer


681
00:26:15,386 --> 00:26:16,586
如果你对这个对象不熟悉


682
00:26:16,586 --> 00:26:19,916
这个对象需要一个


683
00:26:19,986 --> 00:26:22,166
过去时间 然后从那个时间


684
00:26:22,166 --> 00:26:23,186
开始计时


685
00:26:23,786 --> 00:26:24,956
所以我接下来会


686
00:26:24,956 --> 00:26:27,696
用 builder 的 elapsedTime 属性


687
00:26:27,696 --> 00:26:29,676
来创建我的时间对象


688
00:26:30,726 --> 00:26:31,906
因为我想要的时间是


689
00:26:31,906 --> 00:26:33,496
过去时间 我需要


690
00:26:33,796 --> 00:26:35,306
确保这里


691
00:26:35,306 --> 00:26:36,956
有一个负号


692
00:26:37,096 --> 00:26:39,186
接下来 我只需在主队列上


693
00:26:39,186 --> 00:26:41,476
调度因为我在做 UI 方面的工作


694
00:26:41,476 --> 00:26:43,516
然后我只用在计时器上


695
00:26:43,516 --> 00:26:46,606
设置时间


696
00:26:46,606 --> 00:26:47,826
我也需要确保


697
00:26:47,826 --> 00:26:50,376
计时器只在


698
00:26:51,046 --> 00:26:53,076
session 运行的时候运行


699
00:26:53,726 --> 00:26:54,456
让我们来做这个


700
00:26:55,376 --> 00:26:57,506
首先 我拿到 session 状态


701
00:26:58,126 --> 00:26:59,916
然后 再一次我


702
00:26:59,916 --> 00:27:00,556
在主队列上调度


703
00:27:00,796 --> 00:27:02,606
如果 session 正在运行


704
00:27:03,076 --> 00:27:04,256
我会启动计时器


705
00:27:04,966 --> 00:27:06,116
如果不在运行


706
00:27:06,116 --> 00:27:07,336
我就停止计时器


707
00:27:08,696 --> 00:27:09,966
这是你所需要做的


708
00:27:09,966 --> 00:27:12,176
让计时器追踪已用时长的


709
00:27:12,176 --> 00:27:13,786
全部事情


710
00:27:13,986 --> 00:27:15,826
接下来 我们来确保


711
00:27:15,826 --> 00:27:17,566
我们在 UI 上展示的所有指标


712
00:27:18,016 --> 00:27:19,036
也是准确的


713
00:27:19,986 --> 00:27:22,246
所以每次 builder 收集到


714
00:27:22,246 --> 00:27:24,976
新的样本数据


715
00:27:25,016 --> 00:27:26,746
这里的这个方法会被调用


716
00:27:27,506 --> 00:27:29,366
那么这里 我也只需要


717
00:27:29,366 --> 00:27:31,016
重复这里的


718
00:27:31,046 --> 00:27:31,946
collectedTypes


719
00:27:36,396 --> 00:27:39,016
而且 在我的例子中 所有我需要的


720
00:27:39,016 --> 00:27:41,006
数据都是


721
00:27:41,236 --> 00:27:42,336
数量型样本


722
00:27:42,416 --> 00:27:44,236
所以我要确保我


723
00:27:44,236 --> 00:27:45,476
只处理这些


724
00:27:46,006 --> 00:27:49,276
从这里 我们可以利用


725
00:27:49,276 --> 00:27:53,226
针对数量数据的 builder 的新方法


726
00:27:53,636 --> 00:27:55,886
builder.statistics


727
00:27:55,886 --> 00:27:57,566
它会返回给我一个


728
00:27:57,566 --> 00:27:59,856
HKStatistics 对象


729
00:27:59,886 --> 00:28:01,336
包含了每个数据类型的最小值


730
00:28:01,336 --> 00:28:04,046
最大值 平均值


731
00:28:04,046 --> 00:28:06,826
以及最近值


732
00:28:07,656 --> 00:28:09,716
所以我拿到这个统计对象


733
00:28:09,756 --> 00:28:13,916
从这 我有一个已经实现过的方法


734
00:28:13,916 --> 00:28:15,886
会返回给我


735
00:28:15,986 --> 00:28:17,976
针对特别的数量类型的


736
00:28:17,976 --> 00:28:19,556
用户界面标签


737
00:28:20,696 --> 00:28:22,156
它会用统计对象


738
00:28:22,536 --> 00:28:25,106
更新我的标签


739
00:28:25,776 --> 00:28:29,046
接下来 我们来确保


740
00:28:29,046 --> 00:28:30,886
当用户需要的时候我们


741
00:28:30,886 --> 00:28:32,526
可以控制状态


742
00:28:33,216 --> 00:28:35,876
所以每当用户轻点


743
00:28:35,926 --> 00:28:37,376
暂停按钮 这个方法


744
00:28:37,376 --> 00:28:38,386
会被调用


745
00:28:39,066 --> 00:28:40,486
这样 我只需


746
00:28:40,486 --> 00:28:42,646
调用 session.pause


747
00:28:43,956 --> 00:28:45,716
对于继续 也很类似


748
00:28:46,346 --> 00:28:48,626
我会执行 session.resume


749
00:28:49,176 --> 00:28:52,376
以及最后 为了结束体能训练


750
00:28:53,176 --> 00:28:55,126
我会调用 session.end


751
00:28:56,006 --> 00:28:58,936
再调用 builder.endCollection


752
00:28:59,076 --> 00:29:00,726
然后传入体能训练的结束时间


753
00:29:01,836 --> 00:29:03,496
然后 我们只需


754
00:29:03,496 --> 00:29:05,276
调用 finishWorkout


755
00:29:05,276 --> 00:29:07,266
来真正把这次体能训练


756
00:29:07,326 --> 00:29:08,826
和所有相关数据保存


757
00:29:08,826 --> 00:29:09,236
在 HealthKit 中


758
00:29:10,336 --> 00:29:11,656
然后 我们只需要无视它


759
00:29:12,486 --> 00:29:13,856
那么我们来运行这段代码


760
00:29:13,856 --> 00:29:16,506
看看现在会发生什么


761
00:29:24,076 --> 00:29:25,456
那么我来


762
00:29:25,456 --> 00:29:27,116
启动我的体能训练


763
00:29:28,326 --> 00:29:31,086
如我们所看到的


764
00:29:31,086 --> 00:29:32,796
我的计时器在更新


765
00:29:33,226 --> 00:29:35,536
我的数据由 builder 直接


766
00:29:35,536 --> 00:29:37,676
收集并且在我的


767
00:29:37,826 --> 00:29:39,416
用户界面上展示


768
00:29:40,236 --> 00:29:42,886
当然 我也可以响应


769
00:29:42,886 --> 00:29:45,116
状态变化 所以现在


770
00:29:45,576 --> 00:29:47,616
来暂停这次体能训练


771
00:29:47,616 --> 00:29:48,176
体能训练


772
00:29:49,436 --> 00:29:50,606
计时器暂停了


773
00:29:51,116 --> 00:29:52,396
数据采集也暂停了


774
00:29:53,086 --> 00:29:54,606
我可以继续


775
00:29:55,186 --> 00:29:58,996
就像这样 只用几行代码


776
00:29:58,996 --> 00:30:00,866
现在我有了一个


777
00:30:01,016 --> 00:30:02,576
全功能的体能训练 App


778
00:30:03,516 --> 00:30:08,616
［掌声］


779
00:30:09,116 --> 00:30:11,416
我现在准备停止体能训练


780
00:30:12,086 --> 00:30:16,346
我们来看看我们在


781
00:30:16,436 --> 00:30:18,986
iPhone 的健康 App 中


782
00:30:19,266 --> 00:30:19,766
保存了什么


783
00:30:20,366 --> 00:30:25,196
这就是我刚刚保存的


784
00:30:25,196 --> 00:30:27,576
体能训练 而且现在我们看到


785
00:30:27,576 --> 00:30:30,316
直接保存在 HealthKit 中的体能训练


786
00:30:30,826 --> 00:30:32,846
有非常丰富的


787
00:30:32,846 --> 00:30:33,376
信息展示


788
00:30:33,996 --> 00:30:36,286
我有设备的详细信息


789
00:30:36,286 --> 00:30:37,916
还有相关的所有样本


790
00:30:37,916 --> 00:30:39,476
比如心率


791
00:30:39,476 --> 00:30:42,066
距离 活动能量


792
00:30:42,066 --> 00:30:44,546
还有当我暂停和


793
00:30:44,636 --> 00:30:46,816
继续 session 时


794
00:30:46,816 --> 00:30:48,666
产生的体能训练活动


795
00:30:57,386 --> 00:30:59,676
现在在 Apple Watch 上创建


796
00:30:59,676 --> 00:31:02,056
一个全功能的体能训练 App


797
00:31:02,056 --> 00:31:03,596
就是这么简单


798
00:31:05,516 --> 00:31:09,776
［掌声］


799
00:31:10,276 --> 00:31:12,876
不过当然 有时候


800
00:31:12,906 --> 00:31:14,156
事情并不像我们计划的那样


801
00:31:14,906 --> 00:31:17,366
比如说我在跑我的第一个


802
00:31:17,366 --> 00:31:19,416
马拉松 我特别激动


803
00:31:19,416 --> 00:31:21,526
在用我最喜欢的体能训练 App


804
00:31:21,526 --> 00:31:23,106
来追踪这次马拉松


805
00:31:23,106 --> 00:31:25,776
而我在最后才发现


806
00:31:25,836 --> 00:31:28,336
这个 App 在途中的某个时候


807
00:31:28,336 --> 00:31:30,126
居然崩溃了


808
00:31:30,596 --> 00:31:32,876
搞得我失去了所有的数据


809
00:31:33,146 --> 00:31:35,496
好吧 在 watchOS 5 中


810
00:31:35,496 --> 00:31:37,426
我们带来了体能训练恢复


811
00:31:38,086 --> 00:31:40,463
可以帮你解决这个问题


812
00:31:41,516 --> 00:31:44,156
［掌声］


813
00:31:44,656 --> 00:31:46,336
如果你的 App 恰好


814
00:31:46,336 --> 00:31:48,496
在一次活跃的体能训练中崩溃


815
00:31:49,286 --> 00:31:51,056
我们会自动重启你的 App


816
00:31:51,056 --> 00:31:52,966
给它一个恢复


817
00:31:52,966 --> 00:31:53,986
体能训练的机会


818
00:31:55,376 --> 00:31:57,116
体能训练 session 和 builder


819
00:31:57,116 --> 00:32:00,046
会以之前的状态恢复


820
00:32:00,046 --> 00:32:01,826
所以你不应该在 builder 上


821
00:32:01,826 --> 00:32:04,166
调用 startActivity 或者


822
00:32:04,166 --> 00:32:07,736
beginCollection


823
00:32:07,876 --> 00:32:09,706
如果你在使用一个


824
00:32:09,816 --> 00:32:12,046
自动收集数据的数据源


825
00:32:12,516 --> 00:32:14,056
你需要重新设置它


826
00:32:14,636 --> 00:32:18,586
下面是它的工作原理


827
00:32:18,746 --> 00:32:20,736
如果你的 App


828
00:32:20,736 --> 00:32:23,386
在一次崩溃后重启 我们会调用


829
00:32:23,386 --> 00:32:25,166
WKExtensionDelegate 方法


830
00:32:25,166 --> 00:32:27,936
handleAcitiveWorkoutRecovery


831
00:32:29,036 --> 00:32:33,876
这样 你只需创建一个 healthStore 对象


832
00:32:33,876 --> 00:32:37,456
然后调用 recoverActiveWorkoutSession


833
00:32:37,456 --> 00:32:39,896
然后你会在


834
00:32:39,896 --> 00:32:41,496
completion handler 中拿回


835
00:32:41,496 --> 00:32:41,836
一个 session


836
00:32:42,876 --> 00:32:43,576
就这么简单


837
00:32:44,206 --> 00:32:49,066
这就是我们新的体能训练 API


838
00:32:49,276 --> 00:32:52,606
它让创造优秀的体能训练 App


839
00:32:52,606 --> 00:32:54,136
变得前所未有的简单


840
00:32:54,996 --> 00:32:57,246
我们也有一个新的


841
00:32:57,246 --> 00:32:57,956
数量系列 API


842
00:32:58,616 --> 00:33:00,156
有关这个 我想把麦克风


843
00:33:00,156 --> 00:33:01,576
交还给我的同事 Niharika


844
00:33:02,076 --> 00:33:03,126
她会告诉你们更多有关它的信息


845
00:33:04,516 --> 00:33:08,006
［掌声］


846
00:33:08,506 --> 00:33:10,146
>> 刚才那些是不是好到难以置信


847
00:33:10,336 --> 00:33:12,056
在不到 10 分钟的时间里


848
00:33:12,056 --> 00:33:13,246
Karim 能够创建一个


849
00:33:13,246 --> 00:33:14,436
全功能的体能训练 App


850
00:33:14,666 --> 00:33:16,196
这非常重要


851
00:33:16,226 --> 00:33:17,176
因为 像我刚才提到的


852
00:33:17,176 --> 00:33:19,476
我们的用户喜爱做


853
00:33:19,476 --> 00:33:19,946
体能训练


854
00:33:21,146 --> 00:33:22,696
而这些体能训练会带来


855
00:33:22,696 --> 00:33:23,466
相当多的数据


856
00:33:23,466 --> 00:33:25,286
比如说我想要


857
00:33:25,286 --> 00:33:26,976
做一个足球 App


858
00:33:26,976 --> 00:33:28,406
我非常想弄清楚


859
00:33:28,406 --> 00:33:30,186
我的用户到底是如何运动的


860
00:33:30,376 --> 00:33:31,996
而且我想追踪在一次体能训练中


861
00:33:31,996 --> 00:33:33,866
他们在球场上


862
00:33:33,866 --> 00:33:36,166
从一边跑到另一边时


863
00:33:36,166 --> 00:33:37,386
移动的距离


864
00:33:37,716 --> 00:33:39,616
当我们开始体能训练时


865
00:33:39,616 --> 00:33:41,396
样本数据就


866
00:33:41,396 --> 00:33:42,216
开始产生了


867
00:33:42,856 --> 00:33:45,246
我的用户先跑了 2.25


868
00:33:45,736 --> 00:33:47,386
然后 1.6


869
00:33:47,856 --> 00:33:48,866
然后又跑了一点


870
00:33:49,186 --> 00:33:50,586
然后 结束了


871
00:33:50,986 --> 00:33:52,786
从前 这里的每个


872
00:33:52,786 --> 00:33:54,416
距离都会被存储为


873
00:33:54,416 --> 00:33:56,976
一个单独的 HKQuantity 样本


874
00:33:57,636 --> 00:33:59,196
每一个都是独立的


875
00:33:59,196 --> 00:34:00,576
而且会被分开储存


876
00:34:01,366 --> 00:34:02,766
我们考虑一下


877
00:34:02,766 --> 00:34:03,856
如果你可以有


878
00:34:03,856 --> 00:34:05,976
一个追踪累计总数的样本


879
00:34:05,976 --> 00:34:08,166
但同时其背后仍然有那些


880
00:34:08,166 --> 00:34:09,545
独立的数量支持


881
00:34:09,596 --> 00:34:11,356
是不是很棒


882
00:34:11,416 --> 00:34:13,876
这就是为什么我们引入了


883
00:34:13,876 --> 00:34:14,585
HKCumulative


884
00:34:14,585 --> 00:34:16,456
QuantitySeriesSample 它是一个


885
00:34:16,456 --> 00:34:17,906
全新的样本类型


886
00:34:17,906 --> 00:34:19,516
让你可以更高效地


887
00:34:19,516 --> 00:34:21,106
存储高频数据


888
00:34:21,666 --> 00:34:23,005
它很棒 有两个原因


889
00:34:23,196 --> 00:34:25,116
原因一 你只需要存储


890
00:34:25,116 --> 00:34:26,775
一个由多个数量支撑的


891
00:34:26,775 --> 00:34:28,416
样本 因此


892
00:34:28,416 --> 00:34:29,876
你可以更高效地存储


893
00:34:30,176 --> 00:34:31,556
那些来自体能训练的


894
00:34:31,735 --> 00:34:33,346
高频数据


895
00:34:33,775 --> 00:34:36,076
第二 你现在


896
00:34:36,076 --> 00:34:38,286
可以知道组成一个样本的


897
00:34:38,286 --> 00:34:40,025
多个数量与样本本身的联系


898
00:34:40,936 --> 00:34:43,016
因此我们新的 QuantitySeriesSample


899
00:34:43,016 --> 00:34:44,196
是 HKQuantitySample 的


900
00:34:44,196 --> 00:34:45,996
子类 你们中也许


901
00:34:45,996 --> 00:34:47,956
有些人已经很熟悉


902
00:34:48,246 --> 00:34:49,656
如果你之前用过


903
00:34:49,656 --> 00:34:51,426
HKQuantitySample 我们新的


904
00:34:51,426 --> 00:34:53,386
样本类型


905
00:34:53,436 --> 00:34:53,906
基本上一样


906
00:34:55,335 --> 00:34:56,626
那么为什么你想要


907
00:34:56,686 --> 00:34:56,886
用这个呢


908
00:34:57,836 --> 00:34:59,106
比方说你想要


909
00:34:59,106 --> 00:35:00,316
数据可视化


910
00:35:00,366 --> 00:35:02,086
你的 App 需要复杂的


911
00:35:02,086 --> 00:35:04,026
图表或图形


912
00:35:04,026 --> 00:35:05,426
你正努力用


913
00:35:05,426 --> 00:35:06,886
一种漂亮的方式可视化


914
00:35:06,886 --> 00:35:07,616
用户的数据


915
00:35:08,426 --> 00:35:09,826
实际上我们建议


916
00:35:09,826 --> 00:35:11,026
你继续使用我们的


917
00:35:11,026 --> 00:35:13,226
HKStatisticsQuery 或者


918
00:35:13,226 --> 00:35:15,046
HKStatisticsCollectionQuery


919
00:35:15,046 --> 00:35:16,526
这是因为那些类正是


920
00:35:16,526 --> 00:35:18,886
已有的 query 中


921
00:35:18,886 --> 00:35:19,186
做这件事的


922
00:35:19,336 --> 00:35:20,796
你有权访问到


923
00:35:20,906 --> 00:35:23,266
真正详细的丰富的数据


924
00:35:23,266 --> 00:35:24,866
而这些 query 将会


925
00:35:24,936 --> 00:35:26,916
在新的系列样本上


926
00:35:26,916 --> 00:35:28,586
得到详细的数据 所以你无需


927
00:35:28,586 --> 00:35:30,366
做任何额外的工作来获得


928
00:35:30,426 --> 00:35:31,136
那些详细信息


929
00:35:32,466 --> 00:35:33,606
如果 比方说


930
00:35:33,606 --> 00:35:35,646
你想要做数据分析


931
00:35:35,646 --> 00:35:37,156
你要更进一步


932
00:35:37,246 --> 00:35:38,456
你想要弄清楚


933
00:35:38,456 --> 00:35:40,096
组成一个样本的


934
00:35:40,096 --> 00:35:40,576
实际数据


935
00:35:41,426 --> 00:35:44,046
我们建议你使用我们新的


936
00:35:44,046 --> 00:35:45,276
系列样本 query


937
00:35:45,986 --> 00:35:47,736
最后 如果你和我一样


938
00:35:47,736 --> 00:35:48,906
有一个足球 App [ 笑声 ]


939
00:35:48,906 --> 00:35:50,866
或者任何会高频


940
00:35:50,866 --> 00:35:52,396
收集数据的 App


941
00:35:53,126 --> 00:35:54,666
我们建议你使用我们新的


942
00:35:54,666 --> 00:35:56,226
数量系列样本 builder


943
00:35:56,486 --> 00:35:57,746
它作为一种全新的方式 让你


944
00:35:57,746 --> 00:35:59,096
能够真的创建


945
00:35:59,146 --> 00:36:00,556
那些新的累计的


946
00:36:00,556 --> 00:36:02,326
数量系列样本 并且


947
00:36:02,326 --> 00:36:04,416
以更有效率的方式存储数据


948
00:36:05,696 --> 00:36:07,216
那么让我们开始 sample query 吧


949
00:36:07,246 --> 00:36:09,526
像我刚提到的


950
00:36:09,526 --> 00:36:11,386
你可以通过这种方式来


951
00:36:11,386 --> 00:36:13,436
看得更深入并且真正理解


952
00:36:13,436 --> 00:36:15,506
组成一个数量系列样本的


953
00:36:15,506 --> 00:36:17,386
独立的 HK 数量


954
00:36:18,606 --> 00:36:20,096
在代码里 当然 我们


955
00:36:20,096 --> 00:36:21,556
首先想要搞清楚


956
00:36:21,616 --> 00:36:22,616
我们会把这些新的数量


957
00:36:22,616 --> 00:36:23,876
存储在哪里


958
00:36:23,936 --> 00:36:25,276
在我的例子中 我会把它


959
00:36:25,276 --> 00:36:26,366
存在一个数量的数组中


960
00:36:26,956 --> 00:36:30,176
接下来我们初始化 query


961
00:36:30,556 --> 00:36:32,276
我们用我们感兴趣的样本


962
00:36:32,276 --> 00:36:33,226
来初始化它


963
00:36:33,486 --> 00:36:35,236
我们的完成处理器


964
00:36:35,236 --> 00:36:36,426
正是这部分工作


965
00:36:36,426 --> 00:36:36,926
进行的地方


966
00:36:37,406 --> 00:36:39,526
在我的例子中 我有一个


967
00:36:39,526 --> 00:36:41,026
叫做 analyzeQuantity 的方法


968
00:36:41,026 --> 00:36:42,156
会来完成我想要对数量


969
00:36:42,156 --> 00:36:43,756
做的事情


970
00:36:43,756 --> 00:36:45,656
就是把它添加到


971
00:36:45,656 --> 00:36:46,636
刚才我声明的


972
00:36:46,636 --> 00:36:47,456
数量数组中


973
00:36:48,356 --> 00:36:50,636
最后 我们来执行 query


974
00:36:51,226 --> 00:36:52,416
就是如此简单


975
00:36:53,036 --> 00:36:54,336
你们中有人熟悉我们的


976
00:36:54,336 --> 00:36:55,636
其他的一些 query


977
00:36:55,806 --> 00:36:57,456
这里的表现非常相似


978
00:36:59,546 --> 00:37:01,376
接下来 我们有


979
00:37:01,376 --> 00:37:03,116
QuantitySeriesSampleBuilder


980
00:37:03,116 --> 00:37:04,396
如我刚才提到的


981
00:37:04,396 --> 00:37:06,036
对于那些会产生


982
00:37:06,106 --> 00:37:07,706
高频数据的 App 非常有用


983
00:37:08,106 --> 00:37:09,526
因为用这种方式


984
00:37:09,526 --> 00:37:10,986
存储数据效率更高


985
00:37:10,986 --> 00:37:12,906
而且还允许你


986
00:37:13,096 --> 00:37:14,326
创建它们之间的联系


987
00:37:15,166 --> 00:37:16,906
那么首先 当然


988
00:37:16,906 --> 00:37:19,666
我们从创建样本 builder 开始


989
00:37:19,946 --> 00:37:20,676
我们用 HealthStore


990
00:37:20,776 --> 00:37:22,346
配合我们感兴趣的


991
00:37:22,346 --> 00:37:24,376
quantityType 来初始化


992
00:37:25,126 --> 00:37:27,346
接下来 无论你希望用


993
00:37:27,346 --> 00:37:28,756
什么样的频率来插入


994
00:37:28,756 --> 00:37:30,036
样本 你只管做


995
00:37:30,506 --> 00:37:32,576
那么以我这个足球 App 为例


996
00:37:33,026 --> 00:37:34,616
我非常需要


997
00:37:34,616 --> 00:37:36,476
我的用户移动的


998
00:37:36,476 --> 00:37:37,726
实际距离 所以我要


999
00:37:37,726 --> 00:37:39,996
声明这个测量单位


1000
00:37:39,996 --> 00:37:41,316
是我想要的数量


1001
00:37:41,576 --> 00:37:43,236
并且把它插入在


1002
00:37:43,236 --> 00:37:44,056
seriesBuilder 中


1003
00:37:44,816 --> 00:37:48,506
最后 我在我的系列上


1004
00:37:48,826 --> 00:37:50,606
调用结束 然后我们实际上


1005
00:37:50,606 --> 00:37:52,426
会得到新的数量系列样本


1006
00:37:52,426 --> 00:37:55,376
并且能够来储存它 用一种


1007
00:37:55,376 --> 00:37:56,066
更有效的方式


1008
00:37:56,636 --> 00:37:57,986
因此 我们真的真的


1009
00:37:57,986 --> 00:37:59,596
为你们感到激动


1010
00:37:59,596 --> 00:38:00,946
你们可以开始在新的


1011
00:38:01,036 --> 00:38:02,746
Quantity series API 上实现你们的 App 了


1012
00:38:02,746 --> 00:38:04,376
因为这种全新的方式存储


1013
00:38:04,376 --> 00:38:06,086
数据更高效


1014
00:38:06,086 --> 00:38:07,726
而它将数据关联在一起的


1015
00:38:07,726 --> 00:38:09,536
能力让一些有趣的分析


1016
00:38:09,536 --> 00:38:10,866
成为了可能


1017
00:38:14,206 --> 00:38:16,576
那么我们已经讨论了很多


1018
00:38:16,576 --> 00:38:18,466
有意思的事情


1019
00:38:18,466 --> 00:38:19,876
我们认为考虑这些事情最好的方式


1020
00:38:19,876 --> 00:38:21,436
应该是用更完整的角度来看待


1021
00:38:21,436 --> 00:38:23,246
因为这些东西整合在一起


1022
00:38:23,246 --> 00:38:24,996
真的可以让你


1023
00:38:24,996 --> 00:38:26,666
从开始到结束都


1024
00:38:26,666 --> 00:38:28,666
更加重视你的用户的体验


1025
00:38:29,296 --> 00:38:31,396
当然 我们必须开始


1026
00:38:31,396 --> 00:38:32,716
尊重用户的隐私


1027
00:38:32,986 --> 00:38:35,496
我们的用户在把他们


1028
00:38:35,496 --> 00:38:36,496
最敏感的数据给予我们


1029
00:38:36,496 --> 00:38:38,706
而确保我们怀着它


1030
00:38:38,706 --> 00:38:39,756
赢得的尊重


1031
00:38:39,756 --> 00:38:41,046
来处理这些数据


1032
00:38:41,046 --> 00:38:41,746
尤其重要


1033
00:38:42,616 --> 00:38:44,836
接下来 有了 Karim 介绍的


1034
00:38:44,836 --> 00:38:46,466
全新的体能训练特性


1035
00:38:46,466 --> 00:38:48,076
我们得以创造无缝的


1036
00:38:48,076 --> 00:38:48,806
用户体验


1037
00:38:49,216 --> 00:38:50,626
有了像体能训练崩溃恢复的东西


1038
00:38:50,626 --> 00:38:52,376
我们能够呈现给


1039
00:38:52,376 --> 00:38:54,106
用户真正期望的


1040
00:38:54,106 --> 00:38:55,636
用户体验


1041
00:38:56,326 --> 00:38:58,426
最后 通过使用新的


1042
00:38:58,426 --> 00:39:00,456
Quantity series API


1043
00:39:00,456 --> 00:39:01,726
你能够遵守设备的


1044
00:39:01,726 --> 00:39:03,386
能力并且真正确保


1045
00:39:03,386 --> 00:39:05,246
从开始到结束


1046
00:39:05,586 --> 00:39:06,956
你都在给你的用户提供


1047
00:39:06,956 --> 00:39:08,306
能力范围内的最佳体验


1048
00:39:08,866 --> 00:39:10,246
由于健康和健身类


1049
00:39:10,246 --> 00:39:11,966
和体能训练 App 持续


1050
00:39:11,966 --> 00:39:13,916
增长 而且用户


1051
00:39:13,916 --> 00:39:15,506
用得越来越多


1052
00:39:15,506 --> 00:39:17,016
我们很高兴看到这些东西


1053
00:39:17,016 --> 00:39:18,526
组合在一起能够创造


1054
00:39:18,526 --> 00:39:19,776
真正难以置信的用户体验


1055
00:39:21,326 --> 00:39:22,796
更多信息 请参见


1056
00:39:22,796 --> 00:39:23,576
我们的开发人员文档


1057
00:39:23,576 --> 00:39:25,236
但实际上如果今天能和你们当面


1058
00:39:25,236 --> 00:39:26,656
聊聊 会更好


1059
00:39:26,686 --> 00:39:28,416
今天下午 1 点到 3 点


1060
00:39:28,416 --> 00:39:30,546
我们会有一个实验室


1061
00:39:30,616 --> 00:39:33,196
今天晚上 还有健康 健身和搜索聚会


1062
00:39:33,196 --> 00:39:34,406
我们很乐意回答你们的


1063
00:39:34,406 --> 00:39:35,886
任何问题 听听你们的


1064
00:39:35,886 --> 00:39:38,026
故事 与你们面对面


1065
00:39:38,116 --> 00:39:39,816
另外 我想说


1066
00:39:39,816 --> 00:39:41,166
在 HealthKit 中我们有一些全新特性


1067
00:39:41,166 --> 00:39:43,146
我们很乐意你们都去


1068
00:39:43,146 --> 00:39:44,436
看看他们的会议


1069
00:39:44,436 --> 00:39:45,606
用 HealthKit 访问


1070
00:39:45,606 --> 00:39:46,056
健康数据


1071
00:39:47,306 --> 00:39:48,256
非常感谢各位


1072
00:39:48,256 --> 00:39:49,746
我们期待看到你们


1073
00:39:49,746 --> 00:39:50,486
用这些做的东西


1074
00:39:50,996 --> 00:39:51,516
谢谢


1075
00:39:52,516 --> 00:39:58,840
［ 掌声 ］

