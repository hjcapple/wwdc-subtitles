1
00:00:00,506 --> 00:00:07,486
[音乐]


2
00:00:07,986 --> 00:00:10,436
>> 大家好 我是 Brian Weinstein


3
00:00:10,436 --> 00:00:12,146
Safari 浏览器团队的一名工程师


4
00:00:12,546 --> 00:00:14,316
今天 我要谈谈


5
00:00:14,316 --> 00:00:16,826
Safari 浏览器扩展的新功能


6
00:00:17,336 --> 00:00:19,506
Safari 浏览器扩展


7
00:00:19,506 --> 00:00:20,646
允许你拓展 Safari 浏览器的行为


8
00:00:21,156 --> 00:00:22,436
你可以通过


9
00:00:22,436 --> 00:00:24,256
向 Web 页面添加脚本或样式表


10
00:00:24,256 --> 00:00:26,196
阻止内容以及


11
00:00:26,196 --> 00:00:28,686
添加到 Safari 浏览器的 UI


12
00:00:28,686 --> 00:00:30,056
来增强用户的浏览体验


13
00:00:31,676 --> 00:00:34,346
我们将要讨论


14
00:00:34,346 --> 00:00:35,796
如何构建和分发 Safari 浏览器扩展


15
00:00:35,796 --> 00:00:40,606
如何通知你的 Safari App 扩展


16
00:00:40,606 --> 00:00:42,146
内容拦截器（Content Blocker）有什么活动


17
00:00:42,146 --> 00:00:47,176
对于扩展中的窗口


18
00:00:47,176 --> 00:00:49,946
选项卡和页面管理的更好的支持


19
00:00:49,946 --> 00:00:51,896
Safari App 扩展弹窗的改进


20
00:00:51,896 --> 00:00:54,646
以及 Safari 浏览器扩展


21
00:00:54,646 --> 00:00:56,566
与包含此扩展的 App 之间


22
00:00:56,566 --> 00:01:00,266
交流的一些最佳实践


23
00:01:01,656 --> 00:01:03,466
我今天要关注


24
00:01:03,466 --> 00:01:04,766
两种类型的 Safari 浏览器扩展


25
00:01:04,766 --> 00:01:07,306
内容拦截器


26
00:01:08,516 --> 00:01:10,186
和 Safari App 扩展


27
00:01:10,746 --> 00:01:12,156
这两个扩展


28
00:01:12,156 --> 00:01:13,956
都与用 Xcode 构建的


29
00:01:13,956 --> 00:01:15,256
Mac App 捆绑在一起


30
00:01:16,796 --> 00:01:18,556
当你从 Mac App Store


31
00:01:18,556 --> 00:01:20,166
安装一个带有


32
00:01:20,166 --> 00:01:22,166
Safari App 扩展的 App 时


33
00:01:22,166 --> 00:01:24,286
该扩展会立即显示在 Safari 浏览器的偏好设置中


34
00:01:24,286 --> 00:01:26,316
并随时可以启用


35
00:01:28,516 --> 00:01:31,086
你也可以


36
00:01:31,086 --> 00:01:34,406
在 App 通过 Notarization 认证后


37
00:01:34,406 --> 00:01:36,076
直接在你的网站上发布它


38
00:01:36,296 --> 00:01:37,966
经过 Notarization 认证的 App 至少需要启动一次


39
00:01:37,966 --> 00:01:39,976
它们的扩展


40
00:01:39,976 --> 00:01:41,946
才能在 Safari 浏览器中显示


41
00:01:42,536 --> 00:01:44,186
我们十分欣赏你创建的


42
00:01:44,186 --> 00:01:45,966
Safari App 扩展


43
00:01:45,966 --> 00:01:46,636
和内容拦截器


44
00:01:47,136 --> 00:01:48,976
也非常感谢那些


45
00:01:48,976 --> 00:01:50,096
在 Safari 开发者论坛上


46
00:01:50,096 --> 00:01:52,536
提出改进建议


47
00:01:52,736 --> 00:01:54,316
提交 Bug 报告


48
00:01:54,316 --> 00:01:55,546
以及做出评论的人


49
00:01:58,756 --> 00:02:00,636
我们听到的


50
00:02:00,636 --> 00:02:02,876
获得最多诉求的特性之一是


51
00:02:02,876 --> 00:02:04,836
希望扩展可以知道


52
00:02:04,836 --> 00:02:07,126
它们的内容拦截器何时执行操作


53
00:02:08,566 --> 00:02:10,455
内容拦截器提供了


54
00:02:10,455 --> 00:02:12,256
一个声明性规则列表


55
00:02:12,366 --> 00:02:14,646
定义了在使用 Safari 浏览器时


56
00:02:14,646 --> 00:02:16,476
要拦截或隐藏的内容


57
00:02:17,006 --> 00:02:19,146
Safari 浏览器在被打开时


58
00:02:19,146 --> 00:02:20,836
内容拦截器时就会向它


59
00:02:21,056 --> 00:02:22,056
请求规则列表


60
00:02:23,316 --> 00:02:25,766
在用户进行浏览的过程中


61
00:02:25,766 --> 00:02:27,496
当你的内容拦截器


62
00:02:27,496 --> 00:02:28,956
将一个资源标记为


63
00:02:28,956 --> 00:02:32,336
应该被拦截的内容时


64
00:02:32,336 --> 00:02:35,446
现在 在 Safari 浏览器 13 中


65
00:02:35,446 --> 00:02:37,476
Safari 浏览器会与你的内容拦截器


66
00:02:37,476 --> 00:02:39,016
将其告诉你的 Safari App 扩展


67
00:02:40,296 --> 00:02:41,996
如果你的用户


68
00:02:41,996 --> 00:02:43,976
想要查看你的统计数据


69
00:02:43,976 --> 00:02:45,716
那么他们可以打开


70
00:02:45,716 --> 00:02:48,386
相关的 Safari App 扩展


71
00:02:48,386 --> 00:02:50,256
或者他们可以选择


72
00:02:50,426 --> 00:02:52,486
只打开内容拦截器来保持最私密的体验


73
00:02:52,836 --> 00:02:54,216
让我们看看


74
00:02:54,216 --> 00:02:56,696
这有多简单


75
00:02:56,926 --> 00:02:59,006
第一步是在扩展的 Info.plist 文件中


76
00:02:59,006 --> 00:03:00,866
将内容拦截器


77
00:03:00,866 --> 00:03:04,906
与 Safari App 扩展关联起来


78
00:03:05,616 --> 00:03:08,586
为此 你需要在 Safari App 扩展的


79
00:03:08,586 --> 00:03:10,596
Info.plist 的 NSExtension 部分中


80
00:03:10,596 --> 00:03:13,166
添加一个新条目


81
00:03:14,266 --> 00:03:17,896
Key 是


82
00:03:17,896 --> 00:03:18,956
SFSafariAssociatedContentBlockers


83
00:03:21,176 --> 00:03:23,626
它的值是


84
00:03:23,626 --> 00:03:25,076
一个内容拦截器 Bundle 的标识符数组


85
00:03:25,076 --> 00:03:27,386
Safari App 扩展希望得到


86
00:03:27,386 --> 00:03:29,526
关于其内容的通知


87
00:03:30,106 --> 00:03:32,156
一个 Safari App 扩展


88
00:03:32,156 --> 00:03:34,616
可以被多个内容拦截器通知


89
00:03:35,206 --> 00:03:37,026
需要记住的一点是


90
00:03:37,026 --> 00:03:38,906
内容拦截器


91
00:03:38,906 --> 00:03:41,016
和 Safari App 扩展


92
00:03:41,016 --> 00:03:42,426
必须包含在同一个 App 中


93
00:03:46,436 --> 00:03:48,586
在你设置好了 Info.plist 之后


94
00:03:48,586 --> 00:03:52,426
你需要在扩展的主体对象上


95
00:03:52,426 --> 00:03:54,346
实现委托方法


96
00:03:54,766 --> 00:03:56,926
该方法是 contentBlocker(


97
00:03:56,926 --> 00:03:58,876
withIdentifier


98
00:03:58,876 --> 00:04:01,746
blockedResourcesWithURLs, on page)


99
00:04:02,816 --> 00:04:04,696
这些通知是批量处理的


100
00:04:04,696 --> 00:04:06,526
你只会在 Safari App 扩展


101
00:04:06,716 --> 00:04:09,206
拥有它的 Info.plist 的


102
00:04:09,206 --> 00:04:12,996
网站访问部分的访问权限时


103
00:04:12,996 --> 00:04:14,796
获得 URL 的通知


104
00:04:16,305 --> 00:04:20,886
就是这样 现在 让我们继续谈谈


105
00:04:20,886 --> 00:04:22,666
对窗口 选项卡


106
00:04:22,756 --> 00:04:24,666
和页面管理所进行的改进


107
00:04:25,706 --> 00:04:27,606
第一个增强


108
00:04:27,606 --> 00:04:30,396
来自另一个热门的诉求


109
00:04:30,396 --> 00:04:32,126
它是一个可以告诉你


110
00:04:32,126 --> 00:04:33,536
页面何时执行导航的 API


111
00:04:34,076 --> 00:04:35,536
你可以将其以


112
00:04:35,536 --> 00:04:37,546
与你刚刚所听到的


113
00:04:37,546 --> 00:04:39,736
内容拦截器通知相匹配


114
00:04:39,736 --> 00:04:41,766
从而了解关于新的页面加载的


115
00:04:41,766 --> 00:04:42,766
任何通知


116
00:04:44,126 --> 00:04:46,036
第一个增强


117
00:04:46,036 --> 00:04:48,816
来自另一个热门的诉求


118
00:04:48,816 --> 00:04:50,606
它是一个可以告诉你


119
00:04:50,606 --> 00:04:51,966
页面何时执行导航的 API


120
00:04:52,726 --> 00:04:54,046
你可以将其以


121
00:04:54,046 --> 00:04:55,916
与你刚刚所听到的


122
00:04:56,086 --> 00:04:58,196
内容拦截器通知相匹配


123
00:04:58,196 --> 00:05:00,206
从而了解关于新的页面加载的


124
00:05:00,206 --> 00:05:01,236
任何通知


125
00:05:01,926 --> 00:05:04,116
你也可以通过


126
00:05:04,116 --> 00:05:06,126
在加载特定页面时


127
00:05:06,126 --> 00:05:08,456
跟踪重定向链


128
00:05:08,456 --> 00:05:10,646
以便重定向到


129
00:05:10,646 --> 00:05:13,166
网站的特定版本


130
00:05:13,166 --> 00:05:14,936
或者查看 URL 参数


131
00:05:14,936 --> 00:05:16,756
从而确定你的扩展


132
00:05:16,756 --> 00:05:18,926
是否已经向用户显示了它的 UI


133
00:05:19,746 --> 00:05:21,426
即使扩展没有


134
00:05:21,426 --> 00:05:22,726
访问目标 URL 的权限


135
00:05:22,726 --> 00:05:25,066
它也会在扩展的主体对象上


136
00:05:25,066 --> 00:05:27,426
调用此方法


137
00:05:27,966 --> 00:05:30,006
在这种情况下


138
00:05:30,006 --> 00:05:30,416
URL 将为 nil


139
00:05:30,976 --> 00:05:33,286
如果用户打开了


140
00:05:33,286 --> 00:05:35,376
他们的收藏夹或历史记录


141
00:05:35,376 --> 00:05:36,026
URL 也将为 nil


142
00:05:38,556 --> 00:05:40,816
让我们在示例扩展中


143
00:05:40,816 --> 00:05:41,696
运用这些全新的 API


144
00:05:43,836 --> 00:05:47,026
在之前的 WWDC 上


145
00:05:47,026 --> 00:05:48,856
Safari App 扩展刚刚被引入


146
00:05:49,206 --> 00:05:51,176
我们创建了一个扩展


147
00:05:51,176 --> 00:05:53,386
用熊的表情符号


148
00:05:53,386 --> 00:05:54,366
替换了单词“Bear”（熊）


149
00:05:54,896 --> 00:05:57,056
今天 我想继续拓展这个扩展


150
00:05:57,056 --> 00:05:59,096
能够让熊获得


151
00:05:59,096 --> 00:06:00,556
更便捷的上网体验


152
00:06:01,166 --> 00:06:03,066
到目前为止


153
00:06:03,066 --> 00:06:06,066
我已经制作了一个内容拦截器


154
00:06:06,806 --> 00:06:10,026
它可以拦截 URL 中含有蜂蜜的所有图像


155
00:06:10,026 --> 00:06:11,506
可以消除来自甜食的诱惑


156
00:06:12,386 --> 00:06:13,966
让我们将该内容拦截器


157
00:06:13,966 --> 00:06:17,166
与现有的 Safari App 扩展关联起来


158
00:06:17,646 --> 00:06:19,866
首先打开 Safari App 扩展的


159
00:06:19,866 --> 00:06:21,806
Info.plist 文件


160
00:06:22,446 --> 00:06:24,506
为了关联一个内容拦截器


161
00:06:24,706 --> 00:06:27,966
我将向 NSExtension 部分


162
00:06:27,966 --> 00:06:30,506
添加一个与 SF Safari 关联的


163
00:06:30,506 --> 00:06:31,496
内容拦截器条目


164
00:06:32,266 --> 00:06:34,666
我将打开 XML 查看器


165
00:06:35,076 --> 00:06:36,586
来粘贴源代码


166
00:06:44,686 --> 00:06:46,916
然后回到 plist 查看器


167
00:06:53,426 --> 00:06:55,476
它是一个只有一个条目的数组


168
00:06:55,916 --> 00:06:57,926
也就是我的新内容拦截器的


169
00:06:57,926 --> 00:06:58,796
Bundle 标识符


170
00:06:59,396 --> 00:07:01,426
下一步是


171
00:07:01,426 --> 00:07:02,976
监听内容阻止通知


172
00:07:08,896 --> 00:07:11,366
我们要做的是


173
00:07:11,816 --> 00:07:14,326
在 SFSafariPage


174
00:07:14,326 --> 00:07:15,996
和该页面上已被阻止的资源列表之间


175
00:07:15,996 --> 00:07:17,406
构建一个映射


176
00:07:18,396 --> 00:07:20,306
当我们收到内容拦截器


177
00:07:20,306 --> 00:07:21,796
阻塞资源的通知时


178
00:07:21,796 --> 00:07:24,896
我们会找到


179
00:07:24,896 --> 00:07:26,866
该页面的阻止资源列表


180
00:07:27,666 --> 00:07:30,516
并添加上刚才被告知的资源


181
00:07:31,636 --> 00:07:33,706
当页面导航时


182
00:07:33,706 --> 00:07:34,736
我们希望清除该列表


183
00:07:36,856 --> 00:07:39,936
为此 我们将重写函数


184
00:07:40,156 --> 00:07:43,276
page(_page, willNavigateTo url)


185
00:07:43,276 --> 00:07:44,816
并使用它


186
00:07:44,816 --> 00:07:46,086
清除页面的阻止资源


187
00:07:47,186 --> 00:07:49,026
我们要做的最后一件事


188
00:07:49,026 --> 00:07:50,846
是将  的标记


189
00:07:50,846 --> 00:07:52,906
设置为该页面上


190
00:07:52,906 --> 00:07:54,966
被阻止的资源的数量


191
00:07:57,236 --> 00:07:59,246
当我们被要求


192
00:07:59,246 --> 00:08:02,036
验证窗口的 toolbarItem 时


193
00:08:02,036 --> 00:08:03,926
我们要在窗口中


194
00:08:03,926 --> 00:08:06,886
找到活动选项卡


195
00:08:07,806 --> 00:08:09,776
找到它的活动页面


196
00:08:09,776 --> 00:08:12,206
并从地图中获取该页面上被阻止的资源的数量


197
00:08:12,806 --> 00:08:14,126
让我们看看它是如何运作的


198
00:08:15,056 --> 00:08:17,926
我们将构建并运行 Animalify


199
00:08:17,926 --> 00:08:19,976
以便系统能够发现我们的扩展


200
00:08:26,016 --> 00:08:29,316
一旦我们运行了这个 App


201
00:08:29,316 --> 00:08:31,076
你就可以看到带有一个按钮的启动界面


202
00:08:31,076 --> 00:08:32,996
可以将你的用户引导到


203
00:08:32,996 --> 00:08:34,826
Safari 浏览器的扩展偏好设置


204
00:08:35,385 --> 00:08:36,666
如果你在 Xcode 中


205
00:08:36,666 --> 00:08:38,796
创建带有 Safari 浏览器扩展的 App


206
00:08:38,796 --> 00:08:41,056
你就可以免费获得


207
00:08:41,326 --> 00:08:41,986
App 内的启动界面


208
00:08:43,015 --> 00:08:44,956
让我们启动 Safari 浏览器


209
00:08:44,956 --> 00:08:46,046
它会把我带到我的主页


210
00:08:46,326 --> 00:08:48,616
bearseating.com


211
00:08:48,616 --> 00:08:50,756
这样我就可以每天都获得一些食物的灵感。


212
00:08:51,566 --> 00:08:53,136
由于我只是在


213
00:08:53,136 --> 00:08:54,736
尝试编写 Safari 浏览器扩展


214
00:08:55,036 --> 00:08:56,556
所以目前我还没有


215
00:08:56,556 --> 00:08:57,426
Apple 开发者证书


216
00:08:57,806 --> 00:08:59,666
这是没有问题的


217
00:08:59,666 --> 00:09:02,036
因为我可以通过


218
00:09:02,036 --> 00:09:04,246
打开 Safari 的偏好设置


219
00:09:04,506 --> 00:09:06,046
进入“高级”标签页


220
00:09:07,096 --> 00:09:10,526
然后勾选“在菜单栏中显示‘开发’菜单”


221
00:09:10,526 --> 00:09:11,636
在这之后 打开“开发”菜单


222
00:09:13,446 --> 00:09:15,186
并选中“允许未签名的扩展”


223
00:09:15,186 --> 00:09:17,916
从而暂时告诉


224
00:09:17,916 --> 00:09:19,146
Safari 浏览器运行这些扩展


225
00:09:19,746 --> 00:09:22,006
让我们进入 Safari 浏览器的


226
00:09:22,006 --> 00:09:24,476
扩展偏好设置


227
00:09:24,476 --> 00:09:26,176
打开我们的内容拦截器


228
00:09:26,176 --> 00:09:28,926
和 Safari App 扩展


229
00:09:28,926 --> 00:09:30,006
然后重载 bearseating.com


230
00:09:30,816 --> 00:09:32,946
如你所见


231
00:09:32,946 --> 00:09:34,446
内容拦截器拦截了


232
00:09:34,446 --> 00:09:36,426
熊吃蜂蜜的图片


233
00:09:36,426 --> 00:09:38,056
我们的工具栏时间被标记为数字 3


234
00:09:38,056 --> 00:09:41,526
这意味着有 3 个资源被拦截


235
00:09:42,756 --> 00:09:44,526
如果我们在没有内容拦截器的情况下


236
00:09:44,526 --> 00:09:46,596
重新加载页面


237
00:09:46,596 --> 00:09:48,656
toolbarItem 的标记将被清除


238
00:09:48,656 --> 00:09:50,526
你就可以看到再次被拦截的图像


239
00:09:51,366 --> 00:09:52,646
当你再次加载内容拦截器时


240
00:09:52,646 --> 00:09:55,076
这些图像就消失了


241
00:09:55,636 --> 00:09:57,596
完成内容阻止


242
00:09:57,596 --> 00:09:59,746
和页面导航通知


243
00:09:59,746 --> 00:10:00,976
就是如此的容易


244
00:10:05,346 --> 00:10:06,916
这些只是 Safari App 扩展


245
00:10:06,916 --> 00:10:09,336
提供的众多


246
00:10:09,336 --> 00:10:10,696
新 API 中的一部分


247
00:10:11,206 --> 00:10:12,386
让我们再看看其他的 API


248
00:10:13,896 --> 00:10:15,756
我们还添加了


249
00:10:15,756 --> 00:10:17,726
获取 SFSafariPage


250
00:10:17,726 --> 00:10:18,766
可见内容的功能


251
00:10:19,336 --> 00:10:20,886
你的扩展将需要


252
00:10:20,886 --> 00:10:23,506
访问页面的 URL


253
00:10:23,506 --> 00:10:25,656
以便从这个 API 中获取图像数据


254
00:10:27,266 --> 00:10:28,496
使用最新版本的 Safari 浏览器


255
00:10:28,496 --> 00:10:31,096
如今向用户显示


256
00:10:31,096 --> 00:10:32,986
来自 Safari 浏览器扩展包的内容


257
00:10:32,986 --> 00:10:34,646
变得更加容易


258
00:10:35,036 --> 00:10:38,766
现在 你可以从本地代码


259
00:10:38,766 --> 00:10:40,426
获得扩展的 baseURI


260
00:10:40,806 --> 00:10:42,976
无需再注入脚本


261
00:10:46,736 --> 00:10:49,156
你也可以直接将选项卡


262
00:10:49,156 --> 00:10:51,496
导航到 URL


263
00:10:51,496 --> 00:10:52,426
而不需要注入脚本


264
00:10:55,346 --> 00:10:58,276
最后 Safari 浏览器


265
00:10:58,276 --> 00:11:00,306
可以将 Safari JavaScript 对象


266
00:11:00,456 --> 00:11:02,366
注入到任何装载了


267
00:11:02,366 --> 00:11:03,856
来自扩展的内容的帧中


268
00:11:04,366 --> 00:11:06,086
这意味着这些帧


269
00:11:06,086 --> 00:11:07,996
可以向 Safari App 扩展


270
00:11:07,996 --> 00:11:12,526
发送消息并从中接收消息


271
00:11:12,796 --> 00:11:14,826
Safari 浏览器扩展


272
00:11:14,826 --> 00:11:17,096
现在可以找到 Safari 浏览器中


273
00:11:17,096 --> 00:11:19,446
所有打开的选项卡和窗口


274
00:11:19,446 --> 00:11:20,716
而不仅仅是活动窗口和选项卡


275
00:11:22,346 --> 00:11:24,516
在这里 你可以看到


276
00:11:24,516 --> 00:11:25,606
获取 App 中所有窗口的代码


277
00:11:25,606 --> 00:11:29,916
所有选项卡


278
00:11:36,076 --> 00:11:38,076
你还可以获得


279
00:11:38,076 --> 00:11:40,856
对包含选项卡的页面


280
00:11:40,856 --> 00:11:42,336
和包含窗口的选项卡的引用


281
00:11:43,436 --> 00:11:47,226
例如 为了处理来自内容脚本的消息


282
00:11:47,336 --> 00:11:50,956
你需要更新该窗口中的 toolbarItem


283
00:11:51,486 --> 00:11:52,976
你可以获得包含选项卡的页面


284
00:11:52,976 --> 00:11:55,526
以及包含窗口的选项卡


285
00:12:00,016 --> 00:12:01,766
需要记住的一点是


286
00:12:01,766 --> 00:12:03,156
固定的选项卡将有


287
00:12:03,156 --> 00:12:05,066
一个包含 nil 的窗口


288
00:12:05,066 --> 00:12:06,716
因为它们属于所有窗口


289
00:12:06,716 --> 00:12:08,426
而不是单个父窗口


290
00:12:09,996 --> 00:12:11,926
这些就是对窗口


291
00:12:11,926 --> 00:12:14,356
选项卡和页面管理的改进


292
00:12:15,616 --> 00:12:17,846
最后一组 API 改进


293
00:12:18,096 --> 00:12:19,886
是针对 Safari App 扩展的弹窗的


294
00:12:19,886 --> 00:12:23,136
现在你可以通过编程


295
00:12:23,136 --> 00:12:25,606
显示和关闭弹窗


296
00:12:26,026 --> 00:12:28,076
你可以通过在 SFSafariToolbarItem 上


297
00:12:28,076 --> 00:12:32,736
调用 showPopover() 来显示弹窗


298
00:12:32,736 --> 00:12:33,826
你可以从显示弹窗的窗口中


299
00:12:33,826 --> 00:12:34,986
获得该 toolbarItem


300
00:12:35,786 --> 00:12:37,476
通过弹窗视图控制器


301
00:12:37,476 --> 00:12:39,676
弹窗可以被关闭


302
00:12:39,986 --> 00:12:41,606
你只需要调用


303
00:12:41,606 --> 00:12:43,366
self.dismissPopover()


304
00:12:45,376 --> 00:12:47,366
让我们来看看


305
00:12:47,366 --> 00:12:49,366
我们将如何通过添加这些新 API


306
00:12:49,366 --> 00:12:50,596
来改进我们的扩展


307
00:12:53,086 --> 00:12:55,096
利用这些全新的 API


308
00:12:55,266 --> 00:12:57,506
我想升级我的 Safari 浏览器扩展


309
00:12:58,036 --> 00:12:59,536
当我点按 toolbarItem 时


310
00:12:59,786 --> 00:13:01,696
我希望显示一个


311
00:13:01,696 --> 00:13:02,586
带有表视图的弹窗


312
00:13:02,856 --> 00:13:04,916
每个选项卡


313
00:13:05,386 --> 00:13:06,426
将有一行和两列


314
00:13:06,986 --> 00:13:08,506
左边一列


315
00:13:08,506 --> 00:13:10,436
将是选项卡的屏幕快照


316
00:13:10,436 --> 00:13:12,316
右边一列将显示页面的标题


317
00:13:12,316 --> 00:13:13,976
以及每个域


318
00:13:13,976 --> 00:13:16,146
阻止了多少资源


319
00:13:17,576 --> 00:13:19,146
这个过程的第一步是


320
00:13:19,486 --> 00:13:21,136
在显示弹窗之前


321
00:13:21,136 --> 00:13:22,806
告诉弹窗视图控制器


322
00:13:22,806 --> 00:13:25,666
Safari 浏览器窗口的状态


323
00:13:26,186 --> 00:13:28,056
为此 我将重写


324
00:13:28,056 --> 00:13:30,096
popoverWillShow() 函数


325
00:13:30,096 --> 00:13:31,366
并让它收集此信息


326
00:13:34,236 --> 00:13:36,866
如你所见


327
00:13:36,866 --> 00:13:38,536
这个函数迭代了窗口中的所有选项卡


328
00:13:38,536 --> 00:13:40,366
并填充了 3 个数组


329
00:13:40,366 --> 00:13:42,656
一个用于被阻止的资源


330
00:13:42,656 --> 00:13:47,106
一个用于图像


331
00:13:47,106 --> 00:13:48,496
一个用于标题


332
00:13:49,906 --> 00:13:52,656
对于每个选项卡


333
00:13:52,656 --> 00:13:54,986
我们将得到


334
00:13:54,986 --> 00:14:00,306
页面可见区域的屏幕快照


335
00:14:00,306 --> 00:14:02,936
页面属性中每个页面的标题


336
00:14:02,936 --> 00:14:04,446
以及每个页面的


337
00:14:04,446 --> 00:14:05,316
被阻止资源列表


338
00:14:06,436 --> 00:14:08,306
我们也开始重写


339
00:14:08,466 --> 00:14:10,326
弹窗视图控制器


340
00:14:10,326 --> 00:14:12,036
来返回视图控制器


341
00:14:12,346 --> 00:14:14,706
让我们看一下视图控制器


342
00:14:16,356 --> 00:14:19,466
设置弹窗状态


343
00:14:19,466 --> 00:14:21,206
在类中设置一些实例变量


344
00:14:21,716 --> 00:14:23,426
然后重新加载表视图


345
00:14:25,596 --> 00:14:28,106
我们要做的最后一件事是


346
00:14:28,106 --> 00:14:30,896
当用户点按其中一行时


347
00:14:30,896 --> 00:14:33,816
我们要激活该选项卡


348
00:14:33,816 --> 00:14:36,556
然后关闭弹窗


349
00:14:39,466 --> 00:14:40,986
当表视图选择发生变化时


350
00:14:40,986 --> 00:14:46,266
我们激活用户点按的选项卡


351
00:14:46,266 --> 00:14:47,266
然后关闭弹窗口


352
00:14:48,206 --> 00:14:49,436
现在 让我们再次构建


353
00:14:49,556 --> 00:14:50,966
并运行 Animalify


354
00:14:58,256 --> 00:15:00,256
我们会再次启动 Safari 浏览器


355
00:15:00,826 --> 00:15:02,006
来加载我们的主页


356
00:15:02,566 --> 00:15:04,346
你可以看到


357
00:15:04,346 --> 00:15:05,496
扩展不再打开


358
00:15:06,076 --> 00:15:07,666
这是因为


359
00:15:07,666 --> 00:15:09,656
每次启动 Safari 浏览器时


360
00:15:09,656 --> 00:15:10,526
都必须允许未签名的扩展


361
00:15:11,176 --> 00:15:12,726
让我们在“开发”菜单中进行设置


362
00:15:14,996 --> 00:15:17,966
然后我们打开 App


363
00:15:17,966 --> 00:15:19,346
让它引导我们找到扩展


364
00:15:20,806 --> 00:15:22,716
我们将打开扩展


365
00:15:22,716 --> 00:15:25,046
和内容拦截器


366
00:15:25,046 --> 00:15:25,556
并重新加载页面


367
00:15:25,776 --> 00:15:29,186
我们还会再打开几页


368
00:15:31,086 --> 00:15:32,176
你将注意到


369
00:15:32,176 --> 00:15:33,866
当我们在 bearseating.com 处


370
00:15:33,866 --> 00:15:36,176
更改选项卡时


371
00:15:36,176 --> 00:15:37,586
toolbarItem 的标记就会被清除


372
00:15:38,416 --> 00:15:39,526
让我们打开弹窗


373
00:15:40,776 --> 00:15:42,966
你可以在窗口中看到每个标签


374
00:15:43,496 --> 00:15:45,456
在第一行中


375
00:15:45,456 --> 00:15:47,066
你可以看到我们的内容拦截器拦截了


376
00:15:47,066 --> 00:15:49,566
来自 beardiet.com 的两个资源


377
00:15:49,566 --> 00:15:51,906
和来自 bearseating.com 的一个资源


378
00:15:52,396 --> 00:15:54,206
让我们通过点按第一行


379
00:15:54,206 --> 00:15:56,316
来激活那个选项卡


380
00:15:56,316 --> 00:15:57,776
然后我们回到了那个选项卡


381
00:15:58,166 --> 00:15:59,856
弹窗被关闭


382
00:16:00,316 --> 00:16:01,946
我们今天讨论的 API


383
00:16:01,946 --> 00:16:03,826
只是新 API 的其中一些


384
00:16:08,996 --> 00:16:10,996
最后 我想介绍一些


385
00:16:11,146 --> 00:16:15,106
关于如何在 Safari 浏览器扩展和 App 之间


386
00:16:15,106 --> 00:16:17,236
进行通信的最佳实践


387
00:16:18,716 --> 00:16:20,346
Safari 浏览器


388
00:16:20,346 --> 00:16:21,946
会在必要时启动 App 扩展


389
00:16:22,306 --> 00:16:23,746
这并不能保证


390
00:16:23,746 --> 00:16:24,456
你的 App 正在运行


391
00:16:25,706 --> 00:16:27,586
但是如果你有一个


392
00:16:27,586 --> 00:16:30,076
带有 XPC 服务的 App


393
00:16:30,276 --> 00:16:31,946
你的扩展可能希望与


394
00:16:31,946 --> 00:16:33,166
这个 XPC 服务通信


395
00:16:33,726 --> 00:16:35,836
或者你希望 Safari 浏览器扩展


396
00:16:36,166 --> 00:16:38,996
和 App 之间共享数据


397
00:16:39,586 --> 00:16:40,646
你的扩展可能支持用户


398
00:16:40,646 --> 00:16:42,326
在你的 App 中


399
00:16:42,326 --> 00:16:43,826
进行偏好设置


400
00:16:45,216 --> 00:16:47,366
为此 你需要让你的 Safari 浏览器扩展


401
00:16:47,366 --> 00:16:50,166
和 XPC 服务


402
00:16:50,166 --> 00:16:52,176
处在与你的 App 相同的 App 组中


403
00:16:52,876 --> 00:16:54,436
这将允许你的 Safari 浏览器扩展


404
00:16:54,436 --> 00:16:56,636
在同一 App 组


405
00:16:56,636 --> 00:16:58,766
查找已命名的 Mock 服务


406
00:16:59,056 --> 00:17:00,436
你可以使用


407
00:17:00,436 --> 00:17:02,766
UserDefaults(suiteName:) 初始化器


408
00:17:03,006 --> 00:17:05,096
从而共享整个 App 组的数据


409
00:17:06,106 --> 00:17:08,316
然而 假设用户在 App 中


410
00:17:08,316 --> 00:17:10,165
执行了一个


411
00:17:10,356 --> 00:17:13,116
最好由 Safari App 扩展来处理的操作


412
00:17:13,636 --> 00:17:15,185
例如 你正在编写


413
00:17:15,185 --> 00:17:17,126
密码管理器


414
00:17:17,126 --> 00:17:19,726
用户需要在 App 中选择要填写的凭据


415
00:17:20,215 --> 00:17:21,656
这就不能保证


416
00:17:21,656 --> 00:17:23,396
你的扩展正在运行


417
00:17:23,396 --> 00:17:24,566
或者 Safari 浏览器正在运行


418
00:17:25,955 --> 00:17:28,435
你可以从你的 App


419
00:17:28,435 --> 00:17:30,256
调用一个 API 来向你的


420
00:17:30,256 --> 00:17:31,706
Safari App 扩展发送一条消息


421
00:17:32,396 --> 00:17:34,466
你的 App 调用


422
00:17:34,466 --> 00:17:36,866
SFSafariApplication.dispatchMessage


423
00:17:37,046 --> 00:17:39,846
(withName, toExtensionWithIdentifier)


424
00:17:40,616 --> 00:17:42,126
只有在你的扩展被激活


425
00:17:42,126 --> 00:17:43,736
并且扩展必须与


426
00:17:43,736 --> 00:17:46,156
调用 API 的代码


427
00:17:46,156 --> 00:17:48,016
位于同一个 App 包中时


428
00:17:48,016 --> 00:17:49,426
这个方法才会生效


429
00:17:51,036 --> 00:17:53,166
调用这个 API


430
00:17:53,166 --> 00:17:55,466
将向 Safari 浏览器发送一条消息


431
00:17:55,466 --> 00:17:56,286
并且在需要时启动它


432
00:17:57,696 --> 00:17:59,866
Safari 浏览器会将此消息


433
00:17:59,866 --> 00:18:02,126
转发给 Safari App 扩展


434
00:18:03,286 --> 00:18:05,356
你的 Safari App 扩展


435
00:18:05,356 --> 00:18:08,416
可以通过将


436
00:18:08,416 --> 00:18:10,576
来自包含扩展的 App 的消息


437
00:18:10,656 --> 00:18:12,866
实现为


438
00:18:13,116 --> 00:18:15,586
在扩展的主体对象中的用户名信息


439
00:18:15,586 --> 00:18:16,786
来监听这些消息


440
00:18:17,506 --> 00:18:19,346
让我们后退一步


441
00:18:19,346 --> 00:18:21,116
看看你的 App 和 Safari 浏览器扩展


442
00:18:21,236 --> 00:18:23,296
得以通信和共享数据


443
00:18:23,516 --> 00:18:25,216
所有可行的方法


444
00:18:27,176 --> 00:18:29,726
如果你的 App 和 Safari 浏览器扩展


445
00:18:29,726 --> 00:18:31,986
位于同一个 App 中


446
00:18:31,986 --> 00:18:33,956
你可以使用 NSXPCConnection


447
00:18:33,956 --> 00:18:35,856
在它们之间通信


448
00:18:35,856 --> 00:18:37,966
或使用用户默认值共享数据


449
00:18:38,236 --> 00:18:40,906
如果你想从 App 向


450
00:18:40,996 --> 00:18:43,136
Safari App 扩展发送消息


451
00:18:43,136 --> 00:18:45,736
可以使用


452
00:18:45,736 --> 00:18:47,806
SFSafariApplication.dispatchMessage


453
00:18:47,806 --> 00:18:50,736
来发送消息


454
00:18:50,736 --> 00:18:52,556
并监听来自包含 Safari App 扩展的


455
00:18:52,556 --> 00:18:54,816
App 处接收的消息


456
00:18:54,906 --> 00:18:56,036
从而处理消息


457
00:18:56,456 --> 00:18:59,266
你可以通过上述的方法


458
00:18:59,366 --> 00:19:01,786
在你的 App 和 Safari 浏览器扩展之间进行通信


459
00:19:04,136 --> 00:19:05,486
以上就是我们


460
00:19:05,486 --> 00:19:06,556
今天要讲的内容


461
00:19:07,186 --> 00:19:08,706
我希望你们能从这段视频中


462
00:19:08,706 --> 00:19:10,106
学到几件主要的事情


463
00:19:10,106 --> 00:19:12,896
你可以通过 Mac App Store


464
00:19:12,896 --> 00:19:14,476
发布你的 Safari 浏览器扩展


465
00:19:14,476 --> 00:19:16,106
或者通过你的网站


466
00:19:16,106 --> 00:19:18,086
发布通过了 Notarization 认证的 App


467
00:19:19,246 --> 00:19:20,736
你可以将你的内容拦截器


468
00:19:20,736 --> 00:19:22,606
与 Safari App 扩展关联起来


469
00:19:22,606 --> 00:19:24,636
这样你就可以知道


470
00:19:24,636 --> 00:19:25,856
你的内容拦截器


471
00:19:25,856 --> 00:19:27,436
何时执行拦截操作


472
00:19:28,626 --> 00:19:29,936
你可以使用 App 群组


473
00:19:29,936 --> 00:19:31,886
在 Safari 浏览器扩展


474
00:19:31,886 --> 00:19:33,896
和 App 之间进行通信


475
00:19:35,206 --> 00:19:36,916
我们今天讨论的


476
00:19:36,916 --> 00:19:38,766
所有这些 API 的实现


477
00:19:38,766 --> 00:19:41,056
多亏了你的反馈和诉求


478
00:19:41,436 --> 00:19:43,346
请继续提交


479
00:19:43,346 --> 00:19:45,026
改进建议


480
00:19:45,026 --> 00:19:46,636
并在论坛上联系我们


481
00:19:46,976 --> 00:19:49,976
谢谢大家花时间观看我的演讲


482
00:19:49,976 --> 00:19:51,396
我们已经迫不及待地


483
00:19:51,396 --> 00:19:51,916
想看看你们的扩展成果了

