1
00:00:01,176 --> 00:00:04,500
[音乐]


2
00:00:07,516 --> 00:00:13,686
[掌声]


3
00:00:14,186 --> 00:00:14,836
>> 下午好


4
00:00:15,616 --> 00:00:17,356
我叫 Anders 我在 Xcode 工作


5
00:00:18,376 --> 00:00:19,696
在这次会议中


6
00:00:19,696 --> 00:00:20,806
我和我的同事 Balraj


7
00:00:20,806 --> 00:00:22,246
将谈一谈如何从 Xcode 项目


8
00:00:22,316 --> 00:00:23,946
使用 Swift 包


9
00:00:26,106 --> 00:00:27,526
Swift 包管理器


10
00:00:27,576 --> 00:00:29,396
是 Open Source Swift 工具链的一部分


11
00:00:29,656 --> 00:00:31,536
它在 Swift 3 中被引入


12
00:00:32,296 --> 00:00:34,286
之后 有很多 Swift 包


13
00:00:34,336 --> 00:00:35,486
被创建出来


14
00:00:36,686 --> 00:00:38,506
同时 也有很多


15
00:00:38,506 --> 00:00:40,216
Open Source 函数库


16
00:00:40,216 --> 00:00:41,736
被写入其他包管理器


17
00:00:41,736 --> 00:00:43,956
被改编得与 Swift 包管理器相兼容


18
00:00:44,426 --> 00:00:48,126
Swift 包让你可以


19
00:00:48,126 --> 00:00:49,546
管理你依赖的版本


20
00:00:49,546 --> 00:00:51,496
保证你依赖的包更新时


21
00:00:51,496 --> 00:00:53,176
你在不需要


22
00:00:53,176 --> 00:00:54,596
将代码受制于


23
00:00:54,596 --> 00:00:56,116
源分解改变的情况下


24
00:00:56,116 --> 00:00:57,706
修复 Bug


25
00:00:59,066 --> 00:01:00,466
Swift 包对于你自己来说也是一个很好的方法


26
00:01:00,466 --> 00:01:03,736
可以在你自己的 App 中分享代码


27
00:01:04,105 --> 00:01:05,146
不管是在一个小团队内


28
00:01:05,146 --> 00:01:07,556
一个大组织内


29
00:01:07,556 --> 00:01:10,486
或者在你自己开发的 App 间


30
00:01:12,966 --> 00:01:15,736
现在在 Xcode 11 中


31
00:01:15,736 --> 00:01:17,356
你可以直接从 Xcode 项目


32
00:01:17,356 --> 00:01:18,456
获取访问 Swift 包的权限


33
00:01:20,516 --> 00:01:22,666
[掌声]


34
00:01:23,166 --> 00:01:27,336
我们也很激动 在这次会议中


35
00:01:27,336 --> 00:01:28,816
我们将首先谈谈


36
00:01:28,816 --> 00:01:30,336
如何使用一个包


37
00:01:30,336 --> 00:01:31,846
以及如何通过使用一个包


38
00:01:31,846 --> 00:01:32,376
扩展 App 的功能


39
00:01:32,806 --> 00:01:34,066
然后我们将谈一点


40
00:01:34,066 --> 00:01:35,486
关于包中到底有什么


41
00:01:35,486 --> 00:01:37,016
它们如何构建


42
00:01:37,016 --> 00:01:38,636
数据储存中有什么


43
00:01:38,636 --> 00:01:39,756
在文档形式的包中


44
00:01:40,846 --> 00:01:41,856
当我们谈论包解析时


45
00:01:41,856 --> 00:01:43,846
就是关于 Xcode 如何


46
00:01:43,846 --> 00:01:45,296
取得包的正确版本


47
00:01:45,296 --> 00:01:46,626
并将其嵌入你的 App 中


48
00:01:46,666 --> 00:01:48,396
然后我们将谈一点


49
00:01:48,396 --> 00:01:49,586
关于如何更新包的事情


50
00:01:49,586 --> 00:01:50,806
当包的一个更新版发布时


51
00:01:50,806 --> 00:01:52,146
会发生什么


52
00:01:52,146 --> 00:01:53,656
你又该如何


53
00:01:53,656 --> 00:01:55,706
利用这一点


54
00:01:55,706 --> 00:01:57,176
我们还将谈论


55
00:01:57,176 --> 00:01:59,376
解决在你更新包时


56
00:01:59,376 --> 00:02:01,446
可能发生的


57
00:02:01,446 --> 00:02:02,036
任何版本的冲突


58
00:02:03,396 --> 00:02:04,796
所以让我们


59
00:02:04,796 --> 00:02:06,786
从扩展 NAP 功能


60
00:02:06,786 --> 00:02:07,976
来利用包开始


61
00:02:18,126 --> 00:02:19,226
在这里 我们有一个小的 iPhone App


62
00:02:19,226 --> 00:02:22,486
简单地展示了


63
00:02:22,486 --> 00:02:24,146
在我工作的附近的


64
00:02:24,146 --> 00:02:27,046
咖啡厅的午餐菜单


65
00:02:27,046 --> 00:02:29,346
我们看到这里有两个入口


66
00:02:29,346 --> 00:02:30,906
这是一个 SwiftUI App


67
00:02:30,906 --> 00:02:32,196
我不需要运行我的 App


68
00:02:32,196 --> 00:02:33,826
就可以看到预览和 Xcode


69
00:02:35,676 --> 00:02:37,196
所以我们可以看到


70
00:02:37,256 --> 00:02:39,856
两个不同地方的午餐菜单出现了


71
00:02:39,966 --> 00:02:41,576
在这个 App 真实的版本中


72
00:02:41,686 --> 00:02:43,256
我们可以在网络上提取这个数据


73
00:02:44,056 --> 00:02:45,616
但是在这个演示 App 上


74
00:02:45,616 --> 00:02:48,136
我只是在我的源中将其作为本地文件


75
00:02:48,176 --> 00:02:50,456
所以你也可以说这个菜单是本地采购的


76
00:02:51,286 --> 00:02:53,286
[笑声]


77
00:02:53,556 --> 00:02:55,996
所以这两个 JSON 文件


78
00:02:55,996 --> 00:02:57,226
出现得很好


79
00:02:57,326 --> 00:02:59,596
但是这里的这个咖啡馆


80
00:02:59,596 --> 00:03:00,856
更加现代和高档


81
00:03:00,856 --> 00:03:02,376
所以他们有一个 YAML 菜单 对吗


82
00:03:02,376 --> 00:03:04,346
我们不能解析它


83
00:03:04,346 --> 00:03:05,246
我们不再看这个了


84
00:03:05,756 --> 00:03:08,616
我们来看一看加载这个数据的源代码


85
00:03:09,246 --> 00:03:10,636
我们看到在这里我们处理 JSON


86
00:03:10,636 --> 00:03:11,926
但是不处理 YAML


87
00:03:12,146 --> 00:03:14,126
幸运的是 


88
00:03:14,126 --> 00:03:16,326
我知道一个函数库可以很好地解析 YAML


89
00:03:16,506 --> 00:03:18,066
它也有一个很好的 Swift 界面


90
00:03:18,316 --> 00:03:20,126
被称为 Yams


91
00:03:20,126 --> 00:03:21,456
我将使用它


92
00:03:22,666 --> 00:03:24,786
为了使用它我下拉了文件菜单


93
00:03:25,056 --> 00:03:27,286
我来到这个新的 Swift 包子菜单


94
00:03:27,286 --> 00:03:30,366
添加包依赖


95
00:03:30,366 --> 00:03:31,606
现在这个子菜单


96
00:03:31,606 --> 00:03:33,226
有很多其他菜单命令


97
00:03:33,226 --> 00:03:34,836
一旦包出现在你的 App 中 它们就可以处理


98
00:03:35,736 --> 00:03:37,696
但是你说到包依赖


99
00:03:38,246 --> 00:03:40,226
在这里 我看到


100
00:03:40,276 --> 00:03:42,006
因为我为 Xcode 的偏好


101
00:03:42,006 --> 00:03:44,136
添加了我的 GitHub 账号到 Swift


102
00:03:44,136 --> 00:03:45,406
我在那个账户中


103
00:03:45,406 --> 00:03:47,146
看到了所有的包仓储


104
00:03:47,546 --> 00:03:48,676
我还可以看到其他


105
00:03:48,676 --> 00:03:50,006
我标星的仓储


106
00:03:51,086 --> 00:03:52,566
在这个例子中 我将 Yams 标星


107
00:03:53,246 --> 00:03:55,376
但是我还可以


108
00:03:55,376 --> 00:03:57,286
如果有针对一个包的 URL 我可以将其输入这里


109
00:03:58,506 --> 00:04:00,146
在这个例子中 我将


110
00:04:00,146 --> 00:04:01,696
点击说明链接
 
00:04:01,736 --> 00:04:04,056
然后来到 Yams 项目的主页


111
00:04:04,056 --> 00:04:07,826
这个看起来不错 我将看一眼 API


112
00:04:07,826 --> 00:04:10,606
这看起来是我需要的


113
00:04:11,126 --> 00:04:11,956
现在 当然了


114
00:04:11,956 --> 00:04:13,626
当你使用一个 Open Source 函数库时


115
00:04:13,626 --> 00:04:14,716
你将把其他人的代码


116
00:04:14,716 --> 00:04:15,656
代入你的 App


117
00:04:15,736 --> 00:04:17,586
所以有很多你需要仔细处理的事情


118
00:04:17,586 --> 00:04:18,636
你要保证你信任


119
00:04:18,676 --> 00:04:19,815
那个包的源


120
00:04:20,546 --> 00:04:21,536
你想要保证


121
00:04:21,536 --> 00:04:22,686
你明确知道函数库在做什么


122
00:04:22,686 --> 00:04:24,526
所以你不会有任何惊讶


123
00:04:24,966 --> 00:04:26,206
你还想要保证


124
00:04:26,206 --> 00:04:27,966
这个 Open Source 函数库的许可证


125
00:04:27,966 --> 00:04:30,126
与你的 App 的许可证是兼容的


126
00:04:31,226 --> 00:04:32,516
这些我都完成了


127
00:04:32,566 --> 00:04:34,086
我将要回到 Xcode


128
00:04:34,086 --> 00:04:36,016
在这里我将要点击下一步


129
00:04:36,016 --> 00:04:37,126
我们将添加一个引用


130
00:04:37,126 --> 00:04:38,956
一个在 Yams 上的依赖


131
00:04:40,396 --> 00:04:42,796
现在 Xcode 向我展示了可用的版本


132
00:04:42,926 --> 00:04:44,486
它自动将我设定为


133
00:04:44,556 --> 00:04:46,966
使用包的最新版本


134
00:04:46,966 --> 00:04:49,206
在之后我们将更多地谈到


135
00:04:49,206 --> 00:04:50,766
关于这个选项的细节


136
00:04:51,566 --> 00:04:52,856
但是通常来说


137
00:04:52,856 --> 00:04:54,246
这里的默认选项往往是你想要的那个


138
00:04:54,246 --> 00:04:57,486
它使用了版本 2.0.0


139
00:04:57,486 --> 00:04:59,636
一直到 但是不包括


140
00:04:59,636 --> 00:05:00,586
下一个主要的版本


141
00:05:00,746 --> 00:05:02,746
我将要点击下一步


142
00:05:04,136 --> 00:05:05,156
现在 Xcode 在提取


143
00:05:05,156 --> 00:05:06,956
Yams 包的内容


144
00:05:07,476 --> 00:05:11,466
它为我预选了单一的产品


145
00:05:11,466 --> 00:05:13,116
有些包可能会有超过一个产品


146
00:05:13,116 --> 00:05:14,226
这个例子中就只有一个


147
00:05:14,226 --> 00:05:14,896
这是一个函数库


148
00:05:15,356 --> 00:05:16,556
和包的名字一样


149
00:05:17,136 --> 00:05:18,106
如果在你的项目中


150
00:05:18,106 --> 00:05:19,366
有超过一个的 App


151
00:05:19,366 --> 00:05:20,476
你可以选择你想要超链接的地方


152
00:05:20,476 --> 00:05:21,666
在这个例子中


153
00:05:21,666 --> 00:05:23,186
就只是这个一个 所以我将把它链接至午餐 App


154
00:05:23,766 --> 00:05:25,566
我点击完成


155
00:05:27,026 --> 00:05:28,176
现在我们看到这里有一些东西


156
00:05:28,296 --> 00:05:30,126
在我的项目编辑器中


157
00:05:30,126 --> 00:05:32,526
Xcode 为 Yams 包依赖


158
00:05:32,656 --> 00:05:36,206
添加了对新的 Swift 包标签的引用


159
00:05:37,706 --> 00:05:38,926
我们还可以看到 Yams 包


160
00:05:38,926 --> 00:05:43,576
在 Swift 包依赖部分下方出现


161
00:05:45,356 --> 00:05:47,916
我们不会现在就去看那个包


162
00:05:47,916 --> 00:05:48,986
我们晚一点再来看


163
00:05:48,986 --> 00:05:50,086
我们接下来要做的


164
00:05:50,086 --> 00:05:52,246
就是再次回到食物菜单


165
00:05:52,346 --> 00:05:54,496
现在 我们将要在我们的代码内利用它


166
00:05:54,496 --> 00:05:57,056
所以我将在这里输入 “import Yams”


167
00:05:57,186 --> 00:05:58,306
我们可以看到我们有针对输入名字的


168
00:05:58,306 --> 00:06:00,046
代码完成


169
00:06:00,316 --> 00:06:02,356
我还可以按住 Command 键点击


170
00:06:02,356 --> 00:06:04,316
这个输入陈述


171
00:06:04,316 --> 00:06:05,886
我可以跳至定义


172
00:06:05,886 --> 00:06:07,046
这里我们可以看到


173
00:06:07,046 --> 00:06:09,766
对 Yams 项目的界面文档的


174
00:06:09,766 --> 00:06:11,496
渲染版本


175
00:06:12,706 --> 00:06:13,736
所有这些都来自于


176
00:06:13,736 --> 00:06:14,936
包含在包中的


177
00:06:14,936 --> 00:06:16,686
源的文档评论


178
00:06:16,686 --> 00:06:19,306
所以我回到我的代码


179
00:06:19,306 --> 00:06:22,436
我将在这里加入另一个例子


180
00:06:22,646 --> 00:06:25,226
case "yaml"


181
00:06:26,516 --> 00:06:30,956
我将输入 YAMLDecoder


182
00:06:30,956 --> 00:06:33,246
我有对于所有的函数库方法的


183
00:06:33,246 --> 00:06:34,356
代码完成


184
00:06:34,356 --> 00:06:35,696
我还有快速帮助


185
00:06:35,746 --> 00:06:36,716
因为包将其包含在内


186
00:06:36,716 --> 00:06:38,656
根据你得到支撑的质量


187
00:06:38,656 --> 00:06:40,516
这个看上去和感觉上就像是


188
00:06:40,516 --> 00:06:42,466
嵌入 API


189
00:06:42,946 --> 00:06:44,856
我将使用这个方法


190
00:06:45,236 --> 00:06:46,836
我将使用


191
00:06:47,266 --> 00:06:49,036
JSON 例子中相同的最初的参数


192
00:06:49,766 --> 00:06:51,126
现在这个 API 似乎获取了字符串


193
00:06:51,126 --> 00:06:52,256
而不是数据


194
00:06:52,406 --> 00:06:53,486
所以我将使用这个


195
00:06:53,836 --> 00:06:54,786
我不需要第三个参数


196
00:06:54,786 --> 00:06:57,476
因为我将只使用默认数值


197
00:06:58,426 --> 00:07:01,236
所以现在我再次重新回到列表视图


198
00:07:01,866 --> 00:07:02,936
因为这是一个很大的变化


199
00:07:02,936 --> 00:07:04,406
导入一个新的模块


200
00:07:04,406 --> 00:07:05,846
我将点击继续


201
00:07:05,846 --> 00:07:08,306
Xcode 将在后台重新构建 App


202
00:07:08,306 --> 00:07:10,006
我将在这里看一下预览


203
00:07:10,616 --> 00:07:11,866
现在我们可以发现


204
00:07:11,866 --> 00:07:13,976
我也可以看到在 YAML 数据文件的内容


205
00:07:14,516 --> 00:07:20,056
[掌声]


206
00:07:20,556 --> 00:07:21,666
好的 现在我要把这个


207
00:07:21,696 --> 00:07:22,886
指派到我的仓储


208
00:07:24,356 --> 00:07:26,786
我们可以看到我们期望的东西


209
00:07:26,786 --> 00:07:28,406
我们看到了源变化


210
00:07:28,406 --> 00:07:29,346
让我把它变得更大一点


211
00:07:30,186 --> 00:07:31,356
我们可以看到我做的源变化


212
00:07:31,356 --> 00:07:32,736
当然这也是


213
00:07:32,736 --> 00:07:33,416
指派表单的一部分


214
00:07:33,786 --> 00:07:34,906
我们也看到项目文件改变了


215
00:07:34,906 --> 00:07:35,826
因为我为 Yams 包


216
00:07:35,826 --> 00:07:37,896
添加了引用


217
00:07:38,286 --> 00:07:39,756
我们还在这里看到了另外一件事


218
00:07:39,756 --> 00:07:42,236
那就是 Xcode 创建了一个


219
00:07:42,236 --> 00:07:44,146
名为 SwiftPM 的目录


220
00:07:44,146 --> 00:07:45,376
这是针对 Swift 包管理器的


221
00:07:45,806 --> 00:07:46,926
在共享的数据之下


222
00:07:46,926 --> 00:07:48,146
在工作空间之下


223
00:07:48,146 --> 00:07:49,266
你想要将其记录


224
00:07:49,266 --> 00:07:50,786
因为我们之后


225
00:07:50,786 --> 00:07:52,736
会讨论在这里面究竟有什么


226
00:07:52,866 --> 00:07:54,756
但是 Xcode 存储了


227
00:07:54,756 --> 00:07:56,536
解决的包版本的信息


228
00:07:56,536 --> 00:07:58,156
你还想要检查


229
00:07:58,156 --> 00:07:59,646
这样你团队中的人


230
00:07:59,676 --> 00:08:00,466
就可以得到相同的版本


231
00:08:00,996 --> 00:08:05,456
好的 现在我们检查然后输入


232
00:08:05,456 --> 00:08:09,126
Use YAML Menus


233
00:08:10,506 --> 00:08:14,976
好的 现在让我们回到幻灯片


234
00:08:18,686 --> 00:08:20,096
好的 我们已经快速地看了一下


235
00:08:20,096 --> 00:08:21,536
如何从一个项目中


236
00:08:21,536 --> 00:08:22,416
使用一个开源包


237
00:08:22,466 --> 00:08:23,386
我们再仔细看看


238
00:08:23,386 --> 00:08:24,986
YAML 包中有什么


239
00:08:26,206 --> 00:08:30,006
这个包是一个


240
00:08:30,006 --> 00:08:33,076
包含 Swift 包清单的目录


241
00:08:33,515 --> 00:08:35,436
这个清单是一个名为 Package.swift 的


242
00:08:35,436 --> 00:08:37,436
文件 它将那个目录


243
00:08:37,436 --> 00:08:39,366
定义为 Swift 包


244
00:08:39,706 --> 00:08:42,556
它还包含了源


245
00:08:42,556 --> 00:08:43,856
当然了 为了保证这些源能够


246
00:08:43,856 --> 00:08:44,896
继续运行良好


247
00:08:44,896 --> 00:08:45,896
还包含了单元测试


248
00:08:47,366 --> 00:08:48,666
在源之下是针对


249
00:08:48,666 --> 00:08:51,396
包中每个分别的目标的子目录


250
00:08:51,396 --> 00:08:52,406
这些是包中


251
00:08:52,406 --> 00:08:53,896
分别的可构建的成分


252
00:08:55,176 --> 00:08:56,396
相似地 在测试目录之下


253
00:08:56,396 --> 00:08:59,586
还有针对每个测试程序组的子目录


254
00:09:01,496 --> 00:09:02,916
所以 让我们仔细看看


255
00:09:03,036 --> 00:09:04,836
在目标目录之一中有什么


256
00:09:05,486 --> 00:09:07,296
每个目标都可能有


257
00:09:07,406 --> 00:09:11,776
C 语言或者 Swift 的实施


258
00:09:11,776 --> 00:09:13,636
在 YAML 的例子中


259
00:09:13,636 --> 00:09:15,976
还有一个核心的 CYaml 解析


260
00:09:15,976 --> 00:09:16,916
是由 C 语言写成的


261
00:09:17,716 --> 00:09:18,756
它可以包含


262
00:09:18,956 --> 00:09:20,316
Objective-C++ 文件


263
00:09:21,036 --> 00:09:22,256
在分别的目标中


264
00:09:22,256 --> 00:09:24,516
还有一个 Swift 界面


265
00:09:24,516 --> 00:09:25,986
除此之外


266
00:09:25,986 --> 00:09:27,556
它会调用 CYaml 代码


267
00:09:28,416 --> 00:09:30,976
然后这些单元测试被写入在 Swift 中


268
00:09:34,306 --> 00:09:35,636
如果我们看到


269
00:09:35,636 --> 00:09:38,516
Swift 包清单的内容


270
00:09:38,516 --> 00:09:40,796
这里的第一行是


271
00:09:40,796 --> 00:09:43,756
包需要的工具版本的声明


272
00:09:43,756 --> 00:09:45,456
这说明了可以解析这个包的


273
00:09:45,456 --> 00:09:46,726
最低版本


274
00:09:46,726 --> 00:09:47,766
可以清楚显示


275
00:09:48,966 --> 00:09:52,596
包描述 API


276
00:09:52,596 --> 00:09:54,346
是一个由包管理器的包描述函数库


277
00:09:54,346 --> 00:09:56,946
提供的宣告型 API


278
00:09:57,366 --> 00:09:59,296
通过导入它


279
00:09:59,296 --> 00:10:00,746
这个文档剩下的内容


280
00:10:00,806 --> 00:10:04,436
可以宣告包的特点


281
00:10:05,806 --> 00:10:07,986
这包含了包的名称


282
00:10:09,426 --> 00:10:10,816
它还包含了


283
00:10:10,816 --> 00:10:12,076
列出了包向客户出售的


284
00:10:12,076 --> 00:10:13,616
产品名单


285
00:10:14,316 --> 00:10:15,936
所以包可以控制


286
00:10:15,986 --> 00:10:17,606
哪个代码的部分


287
00:10:17,606 --> 00:10:18,936
可以直接由客户导入


288
00:10:18,936 --> 00:10:20,096
在这个例子中


289
00:10:20,096 --> 00:10:22,516
有一个函数库的名字和包一样


290
00:10:22,516 --> 00:10:24,456
叫作 Yams


291
00:10:25,166 --> 00:10:26,616
之后我们会谈到


292
00:10:26,616 --> 00:10:27,716
目标部分


293
00:10:27,996 --> 00:10:30,016
它基本上说明


294
00:10:30,016 --> 00:10:32,356
这个函数库


295
00:10:32,356 --> 00:10:34,956
为客户发布了 Yams 目标


296
00:10:36,976 --> 00:10:38,736
目标部分列出了


297
00:10:38,736 --> 00:10:40,856
包中的个别的可构建的部分


298
00:10:41,106 --> 00:10:42,566
正如我们在这里看到的


299
00:10:42,566 --> 00:10:43,726
在源文件夹和目标之间


300
00:10:43,726 --> 00:10:47,486
有一个一一对应的匹配


301
00:10:48,096 --> 00:10:49,396
每个源文件夹


302
00:10:49,396 --> 00:10:50,676
都可以拥有针对有组织的目标的


303
00:10:50,676 --> 00:10:51,916
子文件夹


304
00:10:51,916 --> 00:10:54,316
但是源下的最高等级是


305
00:10:54,596 --> 00:10:55,936
一个包一个文件夹 一个目标一个文件夹


306
00:10:58,146 --> 00:10:59,866
在这个例子中


307
00:10:59,866 --> 00:11:01,786
我们可以看到 CYaml 目标没有依赖的被列出来


308
00:11:02,226 --> 00:11:04,706
而 Yams 目标则


309
00:11:04,706 --> 00:11:06,626
依赖于 CYaml 目标


310
00:11:06,886 --> 00:11:08,606
这意味着当产品


311
00:11:08,866 --> 00:11:10,466
涉及到 Yams 


312
00:11:10,466 --> 00:11:12,516
它将反过来间接地引进 CYaml


313
00:11:13,306 --> 00:11:15,076
这里有一个针对单元测试的


314
00:11:15,076 --> 00:11:17,146
测试目标


315
00:11:17,496 --> 00:11:19,636
这个代码不会链接给客户


316
00:11:20,036 --> 00:11:21,766
但是有必要确保


317
00:11:21,766 --> 00:11:23,596
你的函数库正常运行


318
00:11:24,316 --> 00:11:26,506
在这个例子中 Yams 包清单


319
00:11:26,876 --> 00:11:28,726
同样也列举了


320
00:11:28,796 --> 00:11:30,106
一些与代码相兼容的


321
00:11:30,106 --> 00:11:31,226
更旧的 Swift 版本


322
00:11:31,766 --> 00:11:33,716
这也有其他你可以


323
00:11:33,716 --> 00:11:34,756
在这个声明性语言中


324
00:11:34,756 --> 00:11:36,476
指定的特点


325
00:11:36,476 --> 00:11:39,326
这些我们之后会谈到


326
00:11:39,926 --> 00:11:42,526
当你构建和运行你的 App 时


327
00:11:42,526 --> 00:11:44,416
这个是如何


328
00:11:44,416 --> 00:11:45,286
链接到你的 App 的呢


329
00:11:45,316 --> 00:11:47,456
你的项目由源文件构成


330
00:11:47,786 --> 00:11:48,786
这个可以是 Swift


331
00:11:48,786 --> 00:11:49,896
也可以是其他语言


332
00:11:50,836 --> 00:11:52,156
你依赖的包


333
00:11:52,156 --> 00:11:53,436
它们也同样是源文件


334
00:11:54,116 --> 00:11:55,776
Xcode 做的就是


335
00:11:55,776 --> 00:11:56,966
拿下所有的这些的源文件


336
00:11:56,966 --> 00:11:59,276
遵守它们


337
00:11:59,456 --> 00:12:00,846
尤其是以


338
00:12:00,846 --> 00:12:02,286
与你项目中的 App 代码


339
00:12:02,286 --> 00:12:05,126
相兼容的方式遵守包代码


340
00:12:05,746 --> 00:12:08,176
所以这个包含体系结构平台等


341
00:12:08,906 --> 00:12:09,936
如果需要的话


342
00:12:09,936 --> 00:12:12,246
它会根据你的 App 的需求


343
00:12:12,306 --> 00:12:13,306
重新编译多次


344
00:12:13,996 --> 00:12:16,356
然后将其链入


345
00:12:16,356 --> 00:12:18,596
然后把所有这些都融合在 App 中


346
00:12:19,716 --> 00:12:21,606
包函数库在默认情况下是静止的


347
00:12:22,036 --> 00:12:23,146
所以所有的代码


348
00:12:23,146 --> 00:12:23,526
都链接在了一起


349
00:12:24,836 --> 00:12:26,696
在你项目中


350
00:12:26,696 --> 00:12:28,756
使用相同包的多种 App


351
00:12:28,756 --> 00:12:30,256
也重复这个过程


352
00:12:30,256 --> 00:12:32,086
如果你有一个 iOS App


353
00:12:32,086 --> 00:12:33,586
和 watchOS App 它们使用


354
00:12:33,586 --> 00:12:34,076
相同的包


355
00:12:34,316 --> 00:12:35,436
Xcode 可能会


356
00:12:35,436 --> 00:12:37,976
根据需要为每个 App 构建代码


357
00:12:41,526 --> 00:12:43,076
现在 我们看到了一个


358
00:12:43,076 --> 00:12:44,766
项目可以依赖于包的例子


359
00:12:45,306 --> 00:12:47,376
我们也看到了这个在


360
00:12:47,506 --> 00:12:51,016
目标编辑器中的包依赖部分展示


361
00:12:51,556 --> 00:12:54,246
但是一个包同样可以依赖于其他包


362
00:12:54,456 --> 00:12:55,616
它也可以通过


363
00:12:55,616 --> 00:12:56,556
包清单完成


364
00:12:57,596 --> 00:12:58,926
所以 Yams 曾经没有的


365
00:12:58,926 --> 00:13:00,506
包清单的一个部分是


366
00:13:00,506 --> 00:13:02,466
依赖部分


367
00:13:02,466 --> 00:13:03,516
之所以没有是因为


368
00:13:03,516 --> 00:13:05,176
它实际上并不依赖于其他包


369
00:13:05,696 --> 00:13:07,296
但是你有的一些包可能需要


370
00:13:07,416 --> 00:13:08,606
所以包依赖图表


371
00:13:08,606 --> 00:13:10,966
可以包含直接和间接依赖


372
00:13:14,846 --> 00:13:16,356
之前我提到了


373
00:13:16,356 --> 00:13:18,096
你可以用包管理器


374
00:13:18,246 --> 00:13:19,886
来管理你的版本了


375
00:13:20,296 --> 00:13:21,346
这里使用的是


376
00:13:21,346 --> 00:13:22,136
Semantic Versioning


377
00:13:22,136 --> 00:13:23,896
这是一个广泛运用的策略


378
00:13:23,896 --> 00:13:25,576
它将语义指派到


379
00:13:25,626 --> 00:13:26,596
三部分版本的


380
00:13:26,596 --> 00:13:27,976
每一个成分


381
00:13:31,076 --> 00:13:32,426
在这个例子中 比如说


382
00:13:32,486 --> 00:13:35,816
当 API 发生了破坏性的变化时


383
00:13:35,816 --> 00:13:37,796
主要的版本都会增加


384
00:13:38,476 --> 00:13:39,686
所以这是会让


385
00:13:39,686 --> 00:13:41,936
客户进行改变的事情


386
00:13:41,936 --> 00:13:43,466
比如说 如果你重命名一个方法


387
00:13:43,466 --> 00:13:45,806
或者移除一个方法


388
00:13:45,806 --> 00:13:47,046
或者如果一个包


389
00:13:47,046 --> 00:13:49,006
做出了一个语义变化


390
00:13:49,006 --> 00:13:52,016
让现有的客户必须去适应


391
00:13:53,046 --> 00:13:54,456
这就是为什么


392
00:13:54,456 --> 00:13:56,076
限制的初始版本


393
00:13:56,076 --> 00:13:57,406
一直上到但是却不包括


394
00:13:57,406 --> 00:13:58,846
下一个主要版本的数字


395
00:14:01,346 --> 00:14:02,636
一个包较小版本的数字


396
00:14:02,636 --> 00:14:04,566
在功能不破坏现有客户的


397
00:14:04,616 --> 00:14:07,886
情况下添加时会被增加


398
00:14:08,146 --> 00:14:09,916
比如说 这个可以添加一个方法


399
00:14:12,046 --> 00:14:14,056
最后 补丁版本是


400
00:14:14,056 --> 00:14:15,786
没有语义变化


401
00:14:15,786 --> 00:14:17,026
语言意义变化时


402
00:14:17,116 --> 00:14:18,996
Bug 被修复


403
00:14:19,506 --> 00:14:22,236
包可以很安全地


404
00:14:22,236 --> 00:14:25,856
更新至 Bug 修复


405
00:14:25,856 --> 00:14:27,586
在不改变 App 语义时


406
00:14:27,586 --> 00:14:28,836
将 Bug 修复嵌入


407
00:14:31,446 --> 00:14:33,246
好的 我们已经看了如何使用包


408
00:14:33,296 --> 00:14:35,476
我们也仔细看了那些包


409
00:14:35,476 --> 00:14:36,766
现在我要邀请我的同事


410
00:14:36,766 --> 00:14:38,096
Balraj 来到台上


411
00:14:38,096 --> 00:14:39,976
从细节上讲述一下包解析


412
00:14:40,516 --> 00:14:45,846
[掌声]


413
00:14:46,346 --> 00:14:47,096
>> 谢谢 Anders


414
00:14:47,996 --> 00:14:49,116
包解析是 Xcode


415
00:14:49,116 --> 00:14:51,116
选择在你的工作空间


416
00:14:51,116 --> 00:14:52,126
应该使用哪个版本的包时


417
00:14:52,126 --> 00:14:54,766
经历的过程


418
00:14:55,226 --> 00:14:56,486
我们将更仔细地


419
00:14:56,486 --> 00:14:58,116
看一看它是如何


420
00:14:58,116 --> 00:15:02,616
在早前 Anders 展示的午餐项目中工作的


421
00:15:05,336 --> 00:15:07,286
所以在 Swift 包标签的


422
00:15:07,286 --> 00:15:09,126
项目编辑器中


423
00:15:09,126 --> 00:15:10,966
我们可以看到


424
00:15:11,006 --> 00:15:12,516
我们的午餐项目对 Yams 的依赖


425
00:15:12,816 --> 00:15:15,776
使用版本 Rule 2.0.0 - Next Major


426
00:15:16,306 --> 00:15:18,366
也就是 Yams 从 2 开始往后的版本


427
00:15:18,366 --> 00:15:21,366
但是不包括 3


428
00:15:21,706 --> 00:15:24,436
在项目导航器的


429
00:15:24,436 --> 00:15:25,516
Swift 包依赖部分


430
00:15:25,516 --> 00:15:27,306
我们可以看到


431
00:15:27,306 --> 00:15:29,156
2.0.0 版本的 Yams


432
00:15:30,446 --> 00:15:31,866
我们再仔细看看这个


433
00:15:34,086 --> 00:15:35,886
午餐项目选择 2.0.0 版本的 Yams


434
00:15:35,886 --> 00:15:38,886
因为它的版本要求 2.0.0 直到


435
00:15:38,886 --> 00:15:39,856
下个主要版本


436
00:15:40,886 --> 00:15:43,266
如果版本 2.1.0 存在


437
00:15:43,266 --> 00:15:44,206
Xcode 会选择它


438
00:15:44,206 --> 00:15:46,676
因为 2.1.0 是适合


439
00:15:46,676 --> 00:15:48,876
我们版本要求的最新版本


440
00:15:49,886 --> 00:15:52,316
然而 如果版本 3.0.0 存在


441
00:15:52,316 --> 00:15:53,696
Xcode 不会选择它


442
00:15:53,696 --> 00:15:55,596
因为它不适合


443
00:15:55,596 --> 00:15:57,396
我们指定的限制


444
00:15:58,746 --> 00:16:00,686
在这个例子中


445
00:16:00,686 --> 00:16:01,876
2.1.0 和 3.0.0 都是假设的案例


446
00:16:02,066 --> 00:16:03,986
在接下来的演示中


447
00:16:03,986 --> 00:16:05,706
你还会看到 Yams 继续


448
00:16:05,706 --> 00:16:06,976
在版本 2.0.0 中解析


449
00:16:08,416 --> 00:16:10,226
在这个例子中


450
00:16:10,226 --> 00:16:11,516
还有一个有一个版本的包


451
00:16:11,566 --> 00:16:12,086
可以用来选择


452
00:16:12,686 --> 00:16:14,136
让我们看些更有意思的例子


453
00:16:14,136 --> 00:16:15,936
在这里 包解析


454
00:16:15,936 --> 00:16:17,976
可以变得更加的复杂


455
00:16:20,396 --> 00:16:22,746
这就是我们今天要讲的午餐 App


456
00:16:23,596 --> 00:16:25,316
它有一个很基本的 UI


457
00:16:25,316 --> 00:16:27,026
正如我们刚刚所说


458
00:16:27,026 --> 00:16:28,146
它只使用一个包


459
00:16:29,596 --> 00:16:31,736
我的团队 全力以赴地


460
00:16:31,736 --> 00:16:33,496
为我们的 App 添加了更多的包


461
00:16:33,496 --> 00:16:35,216
它们用这些包


462
00:16:35,216 --> 00:16:37,036
在我们团队所有的 App 中


463
00:16:37,036 --> 00:16:38,966
展示相同的设计主题


464
00:16:39,046 --> 00:16:41,386
当我们回到午餐 App


465
00:16:41,386 --> 00:16:43,116
在几周之后


466
00:16:43,386 --> 00:16:46,616
我们可以看到


467
00:16:46,616 --> 00:16:47,976
UI 已经更新了


468
00:16:47,976 --> 00:16:49,886
在我们的工作空间内


469
00:16:49,886 --> 00:16:50,676
还有三个附加的包


470
00:16:51,806 --> 00:16:53,436
这三个包是


471
00:16:53,436 --> 00:16:56,326
DesignFont DesignTheme 和 DesignColor


472
00:16:57,316 --> 00:17:00,006
它们都在它们分别的版本中解析


473
00:17:00,586 --> 00:17:03,696
所以 Xcode 在选择这些


474
00:17:03,696 --> 00:17:05,376
包的版本方面


475
00:17:05,376 --> 00:17:06,465
为我们做了很多工作


476
00:17:06,776 --> 00:17:08,626
但我想要知道


477
00:17:08,685 --> 00:17:10,935
为什么这些包解析这些版本


478
00:17:11,336 --> 00:17:14,976
为了这样做 我回到项目编辑器


479
00:17:18,656 --> 00:17:19,915
这是 Swift 包依赖部分


480
00:17:19,915 --> 00:17:21,685
我们可以看到


481
00:17:21,826 --> 00:17:23,185
在 DesignTheme 上的新依赖


482
00:17:23,185 --> 00:17:26,476
伴随着版本 Rule 1.0.0 - Next Major


483
00:17:28,415 --> 00:17:31,316
Xcode 在这个例子中


484
00:17:31,316 --> 00:17:32,866
在 Version 1.0.0 选择了 DesignTheme


485
00:17:33,086 --> 00:17:35,976
因为它从 1.0.0 一直解析到下一个主要版本


486
00:17:39,216 --> 00:17:40,386
所以我们可以看到


487
00:17:40,386 --> 00:17:42,316
在 Yams 上的依赖还是一样的


488
00:17:43,056 --> 00:17:46,536
你可能会想 在这个例子中


489
00:17:46,536 --> 00:17:47,976
DesignFont 和 DesignColor 在哪呢


490
00:17:48,206 --> 00:17:49,126
我们看向项目编辑器


491
00:17:49,126 --> 00:17:51,516
但是却没有在里面找到它们


492
00:17:51,986 --> 00:17:53,586
好的 这个的原因是


493
00:17:53,586 --> 00:17:55,746
项目编辑器


494
00:17:55,746 --> 00:17:57,256
向我们展示了


495
00:17:57,256 --> 00:18:00,386
午餐 App 和它的直接包之间的直接依赖


496
00:18:02,016 --> 00:18:04,556
为了看我们包的依赖


497
00:18:04,556 --> 00:18:08,686
我们想要去看一下 DesignTheme 包


498
00:18:09,066 --> 00:18:10,456
这是因为它是最新的


499
00:18:10,456 --> 00:18:11,986
加入到我们的工作空间的包


500
00:18:12,296 --> 00:18:14,626
假设它们不是来自 Yams 也很安全


501
00:18:15,296 --> 00:18:16,956
为了这样做


502
00:18:16,956 --> 00:18:18,356
我们回到高级的 Xcode 视图


503
00:18:18,696 --> 00:18:21,376
在 Swift 包依赖部分下来看


504
00:18:21,676 --> 00:18:23,256
我们可以看到我们的


505
00:18:23,256 --> 00:18:23,856
包 DesignTheme


506
00:18:24,396 --> 00:18:26,806
我们显露了包


507
00:18:26,846 --> 00:18:28,826
然后看到了包内所有可用的内容


508
00:18:28,826 --> 00:18:30,476
在这个例子中


509
00:18:30,476 --> 00:18:32,506
我们想要看一下 Package.swift 清单文档


510
00:18:33,246 --> 00:18:36,366
因为在这里我们会看到


511
00:18:36,366 --> 00:18:37,696
所有关于这个包的


512
00:18:37,696 --> 00:18:39,326
依赖信息


513
00:18:40,446 --> 00:18:41,426
所以我们来看这个文件


514
00:18:41,426 --> 00:18:43,086
在依赖阵列


515
00:18:43,336 --> 00:18:44,896
我们看到了 DesignFont


516
00:18:44,896 --> 00:18:46,396
和 DesignColor 


517
00:18:46,396 --> 00:18:47,086
还有它们的版本要求


518
00:18:50,036 --> 00:18:52,076
DesignFont 根据我们之前看到的


519
00:18:52,076 --> 00:18:54,006
进行解析


520
00:18:54,006 --> 00:18:54,916
从 1.0.0 一直到之后的主要版本


521
00:18:55,446 --> 00:18:56,846
所以 Xcode 会选择


522
00:18:56,846 --> 00:18:59,976
版本 1.2.0 因为它是包的最新版本


523
00:19:03,176 --> 00:19:05,806
DesignColor 的解析则有一点不同


524
00:19:06,136 --> 00:19:08,166
它使用的是 1.0.0 版本


525
00:19:08,246 --> 00:19:10,536
一直到下一个次版本


526
00:19:10,536 --> 00:19:13,316
这意味着从 1.0.0 到设计颜色的版本


527
00:19:13,876 --> 00:19:15,946
然后一直到但是不包括 1.1.0 


528
00:19:16,556 --> 00:19:18,416
这通常用于当包想要


529
00:19:18,486 --> 00:19:19,746
比它们在更新的时候


530
00:19:19,746 --> 00:19:21,106
获得的新版本


531
00:19:21,106 --> 00:19:22,746
更加保守一些


532
00:19:23,256 --> 00:19:25,776
所以 Xcode 选择了


533
00:19:25,776 --> 00:19:28,176
DesignColor 包的


534
00:19:28,176 --> 00:19:28,716
1.0.1 版本


535
00:19:29,646 --> 00:19:31,036
所以这是添加的包


536
00:19:31,036 --> 00:19:32,136
以及为什么它们


537
00:19:32,176 --> 00:19:37,516
要在这个版本解析的全视图


538
00:19:37,786 --> 00:19:39,296
你会记住 Anders 在之前的展示中


539
00:19:39,296 --> 00:19:42,546
的最后一步就是导入 Yams


540
00:19:42,546 --> 00:19:43,506
然后使用它的 API


541
00:19:43,906 --> 00:19:45,306
让我们来看看它是如何运行


542
00:19:45,426 --> 00:19:46,976
以及它如何与包解析相关联


543
00:19:50,046 --> 00:19:52,976
我们所有的包都是有相同名字的生产函数库


544
00:19:55,046 --> 00:19:56,686
我们可以看到午餐 App


545
00:19:56,686 --> 00:19:57,626
从 DesignTheme 导入内容


546
00:19:57,626 --> 00:20:00,376
也从 Yams 导入内容


547
00:20:00,976 --> 00:20:04,656
DesignTheme 函数库同样也从


548
00:20:04,656 --> 00:20:05,966
DesignFont 和 DesignColor 导入内容


549
00:20:08,116 --> 00:20:09,426
如果我们完整地看这个图表


550
00:20:09,426 --> 00:20:11,316
我们可以看到


551
00:20:11,316 --> 00:20:12,356
它与包解析的工作过程


552
00:20:12,356 --> 00:20:13,336
是很相似的


553
00:20:13,686 --> 00:20:15,076
这是有意的


554
00:20:15,556 --> 00:20:16,786
当我们在我们的包上


555
00:20:16,786 --> 00:20:19,726
添加直接的依赖时


556
00:20:19,726 --> 00:20:21,226
我们也不再导入它们的内容


557
00:20:21,226 --> 00:20:22,786
同时实际上在我们的 App 中


558
00:20:22,786 --> 00:20:24,106
使用 API


559
00:20:24,446 --> 00:20:27,026
但是如果我想要


560
00:20:27,026 --> 00:20:28,536
从一个子依赖中


561
00:20:28,536 --> 00:20:30,576
导入内容到我的项目怎么办呢


562
00:20:31,766 --> 00:20:33,616
让我们谈谈如何这样做


563
00:20:36,046 --> 00:20:38,606
我们有依赖于 DesignTheme 的午餐项目


564
00:20:39,376 --> 00:20:42,096
DesignTheme 依赖于 DesignFont 包


565
00:20:42,886 --> 00:20:44,496
DesignFont 包


566
00:20:44,496 --> 00:20:46,186
生成了一个有相同名称的函数库


567
00:20:46,976 --> 00:20:48,686
在这个环境中


568
00:20:48,686 --> 00:20:50,226
我们不想立刻从


569
00:20:50,406 --> 00:20:52,186
DesignFont 导入内容到午餐 App


570
00:20:52,516 --> 00:20:56,126
因为如果 DesignTheme 失去了对


571
00:20:56,126 --> 00:20:57,526
DesignFont 和 Update 的依赖


572
00:20:57,526 --> 00:20:59,336
Xcode 也会失去


573
00:20:59,336 --> 00:21:00,446
对 DesignFont 的引用


574
00:21:00,446 --> 00:21:02,986
所以现在 我们不能


575
00:21:02,986 --> 00:21:04,106
使用 DesignFont 函数库


576
00:21:05,136 --> 00:21:07,036
所以这样做的一个更好办法


577
00:21:07,036 --> 00:21:10,126
我们回到例子的开头


578
00:21:10,126 --> 00:21:11,696
就是创建一个


579
00:21:11,696 --> 00:21:13,246
在午餐项目和 DesignFont 包之间的


580
00:21:13,246 --> 00:21:15,666
直接包依赖


581
00:21:16,106 --> 00:21:18,276
然后我们可以从 DesignFont


582
00:21:18,276 --> 00:21:19,696
导入内容至午餐


583
00:21:20,086 --> 00:21:21,776
因为如果 DesignTheme 在更新中


584
00:21:21,776 --> 00:21:24,006
失去了对 DesignFont 的依赖


585
00:21:24,006 --> 00:21:26,276
我们还是会保持


586
00:21:26,276 --> 00:21:28,976
对 Xcode 内的函数库的引用


587
00:21:32,176 --> 00:21:33,916
这就是 Xcode 如何


588
00:21:33,916 --> 00:21:35,556
选择你的包的不同版本


589
00:21:36,286 --> 00:21:40,456
我们来看看你如何开始


590
00:21:40,456 --> 00:21:41,656
获得这些包的新版本


591
00:21:41,916 --> 00:21:43,976
它提供了 API 提升和 Bug 修复


592
00:21:46,106 --> 00:21:49,756
某天 我与维护 DesignFont 团队


593
00:21:49,756 --> 00:21:51,036
共进午餐


594
00:21:51,336 --> 00:21:52,936
他们告诉了我一个


595
00:21:52,936 --> 00:21:54,216
DesignFont 包的新版本


596
00:21:54,216 --> 00:21:55,556
它有一些小的 Bug 修复


597
00:21:55,556 --> 00:21:58,206
版本 1.2.1


598
00:21:58,206 --> 00:22:01,276
当我回去的时候


599
00:22:01,276 --> 00:22:03,966
我发现 DesignFont 在使用版本 1.2.0


600
00:22:04,086 --> 00:22:06,066
午餐项目在版本 1.2.0


601
00:22:06,066 --> 00:22:07,716
使用 DesignFont


602
00:22:09,216 --> 00:22:11,016
所以我想要更新这个包


603
00:22:11,446 --> 00:22:15,806
为了实现这一点 我点击了文件 Swift 包


604
00:22:16,066 --> 00:22:17,066
在这里 关于 Swift 包


605
00:22:17,066 --> 00:22:19,146
我有很多选项


606
00:22:19,786 --> 00:22:21,966
在这个例子中


607
00:22:21,966 --> 00:22:23,336
我想要更新至最新的包版本


608
00:22:24,836 --> 00:22:26,706
所以继续然后点击这个


609
00:22:26,706 --> 00:22:27,986
更新运作开始了


610
00:22:29,176 --> 00:22:30,856
我们现在使用


611
00:22:30,856 --> 00:22:32,296
DesignFont 版本 1.2.1


612
00:22:32,886 --> 00:22:35,876
那么更新的包版本


613
00:22:35,876 --> 00:22:36,776
到底都做些什么呢


614
00:22:37,016 --> 00:22:38,936
在更新运作中会发生什么呢


615
00:22:42,086 --> 00:22:43,686
有一个文档名为


616
00:22:43,686 --> 00:22:44,956
Package.resolved


617
00:22:44,956 --> 00:22:45,596
对于这个是很重要的


618
00:22:46,876 --> 00:22:48,906
Package.resolved 记录了


619
00:22:48,906 --> 00:22:50,006
你的工作空间内的


620
00:22:50,006 --> 00:22:51,676
所有包的版本信息


621
00:22:52,176 --> 00:22:53,296
当你完成更新


622
00:22:53,296 --> 00:22:55,446
这个文档被更新了


623
00:22:55,496 --> 00:22:56,976
那么 Xcode


624
00:22:56,976 --> 00:22:58,976
会为你拉下新的版本


625
00:23:03,046 --> 00:23:04,536
这些文档存在于


626
00:23:04,536 --> 00:23:06,426
xcsharedata


627
00:23:06,426 --> 00:23:08,526
它一般由你的团队和源控制共享


628
00:23:08,956 --> 00:23:10,156
所以需要注意的一个很重要的事情


629
00:23:10,156 --> 00:23:11,286
就是我们运行的更新行为


630
00:23:11,286 --> 00:23:14,116
是一个本地行为


631
00:23:14,576 --> 00:23:15,876
为了在我的团队


632
00:23:15,876 --> 00:23:18,576
分享这个更新


633
00:23:18,576 --> 00:23:20,106
我必须指派和将我的变化


634
00:23:20,106 --> 00:23:20,906
放至 Package.resolved 文件


635
00:23:23,066 --> 00:23:24,366
如果你想要


636
00:23:24,366 --> 00:23:25,586
自己寻找所有的东西


637
00:23:25,586 --> 00:23:27,346
这个在 Xcode 项目文件中


638
00:23:27,846 --> 00:23:29,296
但是请注意你不需要


639
00:23:29,296 --> 00:23:32,026
自己编辑 Package.resolved 文件


640
00:23:32,456 --> 00:23:34,596
Xcode 会为你做一切的事情


641
00:23:38,066 --> 00:23:40,156
正如我之前说的


642
00:23:40,156 --> 00:23:41,996
我们并没有与我们的团队分享这个更新


643
00:23:42,216 --> 00:23:43,236
所以让我们来这样做吧


644
00:23:43,656 --> 00:23:45,176
我们可以通过来到


645
00:23:45,296 --> 00:23:46,576
源控制菜单和点击提交
 
00:23:46,576 --> 00:23:47,936
在 Xcode 中完成这些


646
00:23:51,226 --> 00:23:53,946
在这里面我们可以看到 


647
00:23:53,946 --> 00:23:55,636
对 Package.resolved 文档做出的所有变化


648
00:23:55,636 --> 00:23:57,606
以及它是如何从我们之前使用的


649
00:23:58,096 --> 00:23:59,396
版本 1.2.0 更新到


650
00:24:00,036 --> 00:24:02,146
新版的 1.2.1 的


651
00:24:02,876 --> 00:24:04,386
因为我想要推送


652
00:24:04,386 --> 00:24:05,536
我继续然后点击了


653
00:24:05,856 --> 00:24:07,146
左下侧的复选框 推送至 remote 端


654
00:24:07,576 --> 00:24:09,136
然后我就可以指派和


655
00:24:09,136 --> 00:24:09,696
推送我的变化了


656
00:24:10,276 --> 00:24:11,926
我们成功地


657
00:24:11,926 --> 00:24:13,756
在我们的团队中分享了这个更新


658
00:24:14,956 --> 00:24:16,136
这些都没有回答问题


659
00:24:16,136 --> 00:24:17,646
为什么我们需要一个


660
00:24:17,646 --> 00:24:19,376
Package.resolved 文件


661
00:24:20,396 --> 00:24:22,476
这个文件存在是


662
00:24:22,476 --> 00:24:23,676
为了保证


663
00:24:23,876 --> 00:24:25,316
我团队的人


664
00:24:25,536 --> 00:24:27,186
在相同的指令中使用午餐项目


665
00:24:27,186 --> 00:24:28,636
他们都能获得


666
00:24:28,636 --> 00:24:30,276
相同版本的 DesignFont


667
00:24:30,976 --> 00:24:31,856
如果这个文件


668
00:24:31,856 --> 00:24:33,476
这个 Package.resolved 文件


669
00:24:33,476 --> 00:24:35,996
并不存在 


670
00:24:35,996 --> 00:24:37,516
最终的情形可能是


671
00:24:37,516 --> 00:24:39,966
你团队的多个人


672
00:24:39,966 --> 00:24:41,746
都使用项目的相同版本


673
00:24:41,746 --> 00:24:44,456
但是和你使用的包的版本


674
00:24:44,456 --> 00:24:45,956
却不一致


675
00:24:48,326 --> 00:24:49,476
所以在这里有个非常重要的事情


676
00:24:49,476 --> 00:24:50,906
需要注意的就是


677
00:24:50,906 --> 00:24:52,166
检查你的 Package.resolved 文件


678
00:24:52,606 --> 00:24:54,146
不然 你可能最后会


679
00:24:54,196 --> 00:24:55,796
在你的团队中使用


680
00:24:55,796 --> 00:24:57,326
不一致版本的包


681
00:24:57,606 --> 00:24:58,666
所以检查这个文件


682
00:24:58,666 --> 00:24:59,776
是非常重要的


683
00:25:02,046 --> 00:25:03,756
然后要确保去注意


684
00:25:03,756 --> 00:25:05,136
你的包的新版本


685
00:25:05,996 --> 00:25:08,716
然后就是有意地更新


686
00:25:09,016 --> 00:25:10,676
不然的话 


687
00:25:10,676 --> 00:25:12,526
你可能会错过你的包提供给你的


688
00:25:12,526 --> 00:25:14,806
一些关键的 Bug 修复以及 API 提升


689
00:25:16,276 --> 00:25:18,106
这就是如何更新包


690
00:25:18,806 --> 00:25:20,166
我们再仔细通过


691
00:25:20,166 --> 00:25:21,706
更先进的例子


692
00:25:21,706 --> 00:25:22,856
来看一下如何解决包冲突


693
00:25:23,086 --> 00:25:24,376
这将我们今天


694
00:25:24,376 --> 00:25:25,976
谈到的很多不同话题都带到了一起


695
00:25:29,046 --> 00:25:31,296
所以我启动了这个项目


696
00:25:31,296 --> 00:25:33,496
来改变午餐 App 中


697
00:25:33,496 --> 00:25:35,826
价格的字体


698
00:25:37,236 --> 00:25:39,096
我想要使用的系统字体


699
00:25:39,096 --> 00:25:41,206
在版本 2.0.0 的 DesignFont 中


700
00:25:41,206 --> 00:25:42,656
是可行的 


701
00:25:42,656 --> 00:25:43,836
这使我们团队


702
00:25:43,836 --> 00:25:46,226
拥有的 App 


703
00:25:46,356 --> 00:25:49,066
可以使用一致的版本的字体


704
00:25:49,686 --> 00:25:50,686
所以让我们这样做吧


705
00:25:51,456 --> 00:25:52,926
为了使用 DesignFont 包 


706
00:25:53,346 --> 00:25:55,326
我们需要在午餐和 DesignFont 间


707
00:25:55,326 --> 00:25:57,846
创建一个直接的依赖


708
00:25:58,646 --> 00:26:00,356
因为版本 2.0.0 的 DesignFont


709
00:26:00,356 --> 00:26:02,006
发布了这个新的字体


710
00:26:02,006 --> 00:26:04,976
我们想要明确地使用那个版本


711
00:26:07,076 --> 00:26:08,576
所以我们来到 Xcode


712
00:26:08,576 --> 00:26:09,776
然后完成了添加包的工作流程


713
00:26:10,436 --> 00:26:13,696
我们在收藏账户中点击 DesignFont


714
00:26:13,996 --> 00:26:14,756
然后是继续


715
00:26:15,156 --> 00:26:16,456
我们选择到下一个主要的版本


716
00:26:16,456 --> 00:26:17,936
因为我们想要


717
00:26:17,936 --> 00:26:20,016
通向任何更新


718
00:26:20,016 --> 00:26:21,686
或者 DesignFont 发布的新版本


719
00:26:21,686 --> 00:26:23,776
然后我们点击继续


720
00:26:24,606 --> 00:26:26,036
在这里 我们遇到了一个


721
00:26:26,036 --> 00:26:28,186
包解析错误


722
00:26:28,186 --> 00:26:29,726
因为 DesignFont 从 2.0.0 到


723
00:26:29,726 --> 00:26:31,976
下一个主要的版本需要新的依赖需求


724
00:26:35,826 --> 00:26:37,266
所以让我们看看


725
00:26:37,266 --> 00:26:39,116
这里在发生什么


726
00:26:39,116 --> 00:26:41,906
同时对其进行调试 调试包解析时


727
00:26:41,906 --> 00:26:43,206
有件需要记住的非常重要的事情


728
00:26:43,206 --> 00:26:45,046
那就是要


729
00:26:45,046 --> 00:26:46,256
看全景图


730
00:26:47,486 --> 00:26:49,716
我们想要考虑到


731
00:26:49,716 --> 00:26:51,096
影响到我们包的所有需求


732
00:26:51,096 --> 00:26:52,856
而不是仅仅


733
00:26:52,856 --> 00:26:53,976
限制于我们刚刚添加的


734
00:26:56,046 --> 00:26:57,546
所以我们退回一步


735
00:26:57,546 --> 00:26:58,656
来看看这个之前是怎么工作的


736
00:26:59,226 --> 00:27:00,756
午餐 App 在版本 1.0.0 的 DesignTheme


737
00:27:00,756 --> 00:27:02,466
有一个很好的依赖


738
00:27:02,946 --> 00:27:04,316
而 DesignTheme 在 1.2.1 版本


739
00:27:04,316 --> 00:27:06,056
直接依赖于 DesignFont 


740
00:27:06,056 --> 00:27:08,616
使用版本需求 1.0.0


741
00:27:08,616 --> 00:27:10,976
直到下一个主要版本


742
00:27:14,286 --> 00:27:16,276
然后 当我们添加


743
00:27:16,276 --> 00:27:17,656
午餐 App 和 DesignFont 之间的


744
00:27:17,706 --> 00:27:19,486
直接依赖关系从 2.0.0 直到


745
00:27:19,486 --> 00:27:21,306
下一个主要版本时 我们遇到了


746
00:27:21,306 --> 00:27:22,746
包解析冲突


747
00:27:24,336 --> 00:27:26,726
你将注意到 DesignTheme


748
00:27:26,726 --> 00:27:29,016
对 DesignFont 1.0.0 的要求


749
00:27:29,016 --> 00:27:30,316
直到 但不包括 2.0.0


750
00:27:30,596 --> 00:27:31,956
午餐 App 对 DesignFont 2 的要求


751
00:27:31,956 --> 00:27:34,086
高至 3.0.0


752
00:27:34,086 --> 00:27:36,026
但是又不包括 3.0.0 版本


753
00:27:36,026 --> 00:27:37,706
不能选择一个


754
00:27:37,786 --> 00:27:38,916
同时符合这两个要求的版本


755
00:27:39,996 --> 00:27:42,546
因此 在将 SwiftPM 嵌入到


756
00:27:42,546 --> 00:27:44,286
Xcode 中 你只能在工作空间中


757
00:27:44,416 --> 00:27:46,626
有一个包的版本


758
00:27:47,646 --> 00:27:48,926
这就解释了


759
00:27:48,926 --> 00:27:50,366
为什么我们在这里看到了


760
00:27:50,366 --> 00:27:51,126
包解析错误


761
00:27:51,716 --> 00:27:54,016
Xcode 不可能选择一个


762
00:27:54,016 --> 00:27:56,776
同时满足两个需求的版本


763
00:27:58,026 --> 00:27:59,526
解决这个问题需要


764
00:27:59,566 --> 00:28:00,786
具体问题具体分析


765
00:28:01,326 --> 00:28:02,626
但通常 当我遇到


766
00:28:02,626 --> 00:28:03,926
这样的包解析错误时


767
00:28:03,966 --> 00:28:05,466
我希望查看


768
00:28:05,466 --> 00:28:07,716
可用的包的更新的版本


769
00:28:08,196 --> 00:28:09,476
然后我就查看这些


770
00:28:09,476 --> 00:28:11,776
新版本是否


771
00:28:11,776 --> 00:28:12,976
为它们的子依赖提供了任何更新


772
00:28:15,046 --> 00:28:16,026
在这个例子中 我注意到


773
00:28:16,026 --> 00:28:17,066
有一个 我们还没有


774
00:28:17,066 --> 00:28:19,966
真正研究过 DesignTheme 的版本 2.0.0


775
00:28:20,596 --> 00:28:23,006
所以让我们去 GitHub 看看


776
00:28:23,006 --> 00:28:25,726
我们的 DesignTheme 主题的版本需求


777
00:28:27,356 --> 00:28:29,106
当我们转到 GitHub 时


778
00:28:29,106 --> 00:28:30,386
我们可以查看 Swift 包清单的


779
00:28:30,386 --> 00:28:31,636
依赖关系阵列


780
00:28:32,036 --> 00:28:34,916
这里 我们看到 DesignFont 的版本需求


781
00:28:35,076 --> 00:28:37,336
已经从 1.0.0 更新到下一个主要版本


782
00:28:37,336 --> 00:28:40,116
变成了 2.0.0 更新到下一个主要版本


783
00:28:41,066 --> 00:28:42,266
这与我们


784
00:28:42,266 --> 00:28:43,696
试图在午餐 App 和 DesignFont 之间


785
00:28:43,696 --> 00:28:45,506
添加的版本需求相匹配


786
00:28:45,976 --> 00:28:47,966
因此 如果我们可以


787
00:28:48,526 --> 00:28:49,446
更新 DesignTheme 的版本需求


788
00:28:49,446 --> 00:28:51,166
使其在版本 2.0.0 中得到解决


789
00:28:51,166 --> 00:28:53,116
那么现在我们


790
00:28:53,116 --> 00:28:55,036
就可以心满意足地


791
00:28:55,036 --> 00:28:56,706
在午餐 App 和 DesignFont 之间添加


792
00:28:56,706 --> 00:28:57,336
一个直接依赖关系


793
00:28:58,746 --> 00:29:00,366
我们来开始这样做


794
00:29:00,366 --> 00:29:02,426
更新一下 DesignTheme 的主要版本


795
00:29:03,206 --> 00:29:04,736
以前 午餐 App 使用的是 DesignTheme


796
00:29:05,026 --> 00:29:07,676
从 1.0.0 到下一个主要版本


797
00:29:07,916 --> 00:29:09,136
我们想要改变它


798
00:29:09,136 --> 00:29:11,766
使它现在使用 2.0.0 到下一个主要版本


799
00:29:14,286 --> 00:29:15,376
回到 Xcode


800
00:29:15,466 --> 00:29:17,346
现在 我们只需


801
00:29:17,346 --> 00:29:20,036
单击项目编辑器中的


802
00:29:20,236 --> 00:29:21,046
DesignTheme 包


803
00:29:21,046 --> 00:29:24,076
然后 我们回到编辑版本规则表


804
00:29:24,536 --> 00:29:27,166
在这里 我们之前指定了 1.0.0


805
00:29:27,166 --> 00:29:27,936
直到下一个主要版本


806
00:29:28,586 --> 00:29:30,126
但现在我们想把它变成


807
00:29:30,276 --> 00:29:32,266
2.0.0 到下一个主要版本


808
00:29:33,346 --> 00:29:35,986
我们只要把 1.0.0 换成 2.0.0


809
00:29:36,236 --> 00:29:40,476
然后点击完成 现在 更新操作发生了


810
00:29:40,746 --> 00:29:43,266
我们可以看到 


811
00:29:43,266 --> 00:29:45,086
DesignTheme 在版本 2.0.0 中 


812
00:29:45,086 --> 00:29:45,856
DesignFont 在版本 2.0.0 中


813
00:29:49,056 --> 00:29:50,626
但这里发生了一件重要的事情


814
00:29:50,926 --> 00:29:52,246
当我们从一个主版本


815
00:29:52,246 --> 00:29:55,806
更新到另一个主版本时 我们会遇到构建失败


816
00:29:56,146 --> 00:29:57,746
这是因为当


817
00:29:57,746 --> 00:29:59,006
从一个包的一个主要版本


818
00:29:59,006 --> 00:30:01,016
切换到另一个主要版本时


819
00:30:01,016 --> 00:30:01,916
可能会发生 API 更改


820
00:30:02,156 --> 00:30:03,696
这可能会潜在地


821
00:30:03,696 --> 00:30:05,496
破坏项目内部的更改


822
00:30:07,316 --> 00:30:09,076
这意味着当你


823
00:30:09,076 --> 00:30:10,036
从一个主要版本更新到


824
00:30:10,036 --> 00:30:11,566
另一个主要版本时 你应该准备


825
00:30:11,686 --> 00:30:14,086
更改一些 API 或者改变


826
00:30:14,086 --> 00:30:16,956
API 在新版本中的包中运行的任何方式


827
00:30:19,326 --> 00:30:21,306
这可以是非常小的改变


828
00:30:21,306 --> 00:30:22,716
也可以是更复杂的改变


829
00:30:23,336 --> 00:30:24,776
在这种情况下 我们已经为你


830
00:30:24,776 --> 00:30:26,756
做了所有的工作 让你在包上花费更多的时间


831
00:30:27,006 --> 00:30:28,466
因此 当我们回到午餐 App 时


832
00:30:28,466 --> 00:30:30,696
我们的构建错误得到了解决


833
00:30:30,696 --> 00:30:32,206
我们成功地使用了版本 2.0.0 的


834
00:30:32,206 --> 00:30:33,906
DesignTheme


835
00:30:36,046 --> 00:30:37,316
所以我们的构建现在成功了


836
00:30:37,666 --> 00:30:38,886
我们想在午餐 App 和 DesignFont 之间


837
00:30:38,886 --> 00:30:41,396
添加一个直接依赖关系


838
00:30:41,986 --> 00:30:43,286
因为现在我们


839
00:30:43,546 --> 00:30:45,766
处于 DesignTheme 的版本 2.0.0


840
00:30:45,766 --> 00:30:47,596
我们可以添加我们想要的版本需求


841
00:30:50,056 --> 00:30:51,456
回到 Xcode 我们


842
00:30:51,456 --> 00:30:53,036
来看看添加包工作流


843
00:30:53,476 --> 00:30:54,966
我们选择 DesignFont


844
00:30:55,266 --> 00:30:57,116
我们选择 2.0.0 到下一个主版本


845
00:30:58,026 --> 00:30:59,216
现在 我们可以将


846
00:30:59,216 --> 00:31:01,096
DesignFont 库与我们的 App 链接起来


847
00:31:01,606 --> 00:31:02,856
现在在项目编辑器中


848
00:31:02,856 --> 00:31:04,416
我们可以看到


849
00:31:04,416 --> 00:31:05,936
我们成功地使用了 DesignFont


850
00:31:05,936 --> 00:31:06,926
从 2.0.0 到下一个主版本


851
00:31:10,176 --> 00:31:11,576
现在我们已经完成了这一步


852
00:31:11,576 --> 00:31:13,146
我们现在可以导入 DesignFont


853
00:31:13,146 --> 00:31:17,146
内部的内容 成功地使用它的函数库


854
00:31:17,146 --> 00:31:20,816
然后 通过一些小小的代码更改


855
00:31:20,816 --> 00:31:21,976
来更新价格的字体


856
00:31:25,046 --> 00:31:26,116
现在我们已经成功地


857
00:31:26,116 --> 00:31:27,896
做到了这一点 并解决了包冲突


858
00:31:28,506 --> 00:31:29,486
我们已经更新了包的


859
00:31:29,486 --> 00:31:31,236
版本 并且我们成功地


860
00:31:31,236 --> 00:31:32,756
讨论了如何在 Xcode 中


861
00:31:32,756 --> 00:31:33,956
调试包解析


862
00:31:37,146 --> 00:31:38,716
所以我们今天讨论了


863
00:31:38,756 --> 00:31:39,016
很多事情


864
00:31:40,086 --> 00:31:41,116
我们讨论了如何


865
00:31:41,116 --> 00:31:42,826
开始在项目中


866
00:31:42,826 --> 00:31:44,356
开源包并快速开始


867
00:31:44,386 --> 00:31:45,986
使用它的 API


868
00:31:47,496 --> 00:31:48,856
我们进一步了解了什么


869
00:31:48,856 --> 00:31:53,726
是包 以及 Package.swift 清单是如何打包的


870
00:31:55,146 --> 00:31:56,966
我们讨论了 Xcode


871
00:31:56,966 --> 00:31:58,766
如何选择在项目中要使用的


872
00:31:58,796 --> 00:32:00,066
包的版本


873
00:32:01,636 --> 00:32:02,756
然后 我们讨论了


874
00:32:02,756 --> 00:32:03,776
如何保持这些版本的


875
00:32:03,776 --> 00:32:05,596
更新并且不断获得


876
00:32:05,596 --> 00:32:06,736
包的新更新


877
00:32:08,256 --> 00:32:09,386
然后 我们看了一个


878
00:32:09,386 --> 00:32:11,226
关于如何解决包冲突的


879
00:32:11,226 --> 00:32:12,916
最新例子


880
00:32:12,916 --> 00:32:14,326
它教会了我们如何调试包


881
00:32:14,556 --> 00:32:15,976
以及如何更新包的版本


882
00:32:18,136 --> 00:32:19,916
今天在 GitHub 上


883
00:32:20,046 --> 00:32:22,086
已经有很多包可用了


884
00:32:22,996 --> 00:32:24,366
我们建议你


885
00:32:24,366 --> 00:32:25,736
仔细查看这些包


886
00:32:25,736 --> 00:32:27,076
看看可以在哪里将它们


887
00:32:27,076 --> 00:32:28,976
合并到现有的 App 中


888
00:32:31,096 --> 00:32:33,376
但我们还没说完 明天 我的同事


889
00:32:33,376 --> 00:32:34,706
Ankit 和 Boris


890
00:32:35,106 --> 00:32:36,276
将做一个演讲 


891
00:32:36,276 --> 00:32:37,446
讨论如何创建 Swift 包


892
00:32:37,996 --> 00:32:39,466
这个演讲将更详细地介绍


893
00:32:39,466 --> 00:32:41,966
包是什么 


894
00:32:42,016 --> 00:32:45,206
如何编辑包


895
00:32:45,206 --> 00:32:48,666
SwiftPM 开源工具等等


896
00:32:49,606 --> 00:32:50,746
这个演讲会帮助你


897
00:32:50,746 --> 00:32:52,316
在包如何在 Xcode 中工作方面


898
00:32:52,446 --> 00:32:53,786
成为一个专家


899
00:32:53,786 --> 00:32:56,156
你不会想错过的


900
00:32:56,336 --> 00:32:58,216
如果你对于 SwiftPM 团队


901
00:32:58,216 --> 00:33:00,506
有更多的疑问


902
00:33:00,716 --> 00:33:01,956
我们会在这个会议之后的


903
00:33:01,956 --> 00:33:03,646
Swift 公开时间实验室等你们
 
00:33:04,186 --> 00:33:05,276
还有就是


904
00:33:05,276 --> 00:33:06,296
这个星期还有两个会议


905
00:33:06,296 --> 00:33:08,316
一个是周四十二点


906
00:33:08,316 --> 00:33:09,716
在 Swift 包实验室
 
00:33:09,716 --> 00:33:11,096
另一个是周五十二点


907
00:33:11,096 --> 00:33:11,976
有着相同的名称的会议


908
00:33:12,976 --> 00:33:13,816
谢谢你们今天的光临


909
00:33:13,816 --> 00:33:14,596
希望你们能够


910
00:33:14,596 --> 00:33:15,896
度过愉快的一周 谢谢


911
00:33:16,516 --> 00:33:20,500
[掌声]

