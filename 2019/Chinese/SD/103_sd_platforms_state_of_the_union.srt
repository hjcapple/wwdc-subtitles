1
00:00:01,516 --> 00:00:06,546
[音乐]


2
00:00:07,046 --> 00:00:07,966 
>> 下午好 女士们先生们


3
00:00:08,786 --> 00:00:10,206
让我们欢迎主管软件开发的


4
00:00:10,206 --> 00:00:12,366
副总裁 Sebastien Marineau-Mes


5
00:00:13,516 --> 00:00:23,756
[掌声]


6
00:00:24,256 --> 00:00:25,626
>> 大家下午好


7
00:00:25,626 --> 00:00:28,046
欢迎来到 WWDC


8
00:00:28,046 --> 00:00:29,536
大家喜欢上午的 Keynote 讲演吗


9
00:00:30,161 --> 00:00:32,161
[掌声]


10
00:00:32,305 --> 00:00:34,556
那就好 [掌声]


11
00:00:34,556 --> 00:00:36,206
今年是我们对开发者


12
00:00:36,256 --> 00:00:38,156
投入非常大的一年


13
00:00:38,156 --> 00:00:39,366
我们非常期待向你们展示


14
00:00:39,366 --> 00:00:40,926
我们的工作


15
00:00:40,926 --> 00:00:41,816
并且希望了解你们的想法


16
00:00:42,636 --> 00:00:44,126
上午的 Keynote 讲演只是


17
00:00:44,176 --> 00:00:45,986
今年一个小小的前瞻


18
00:00:46,406 --> 00:00:47,836
我们想要分享的还有很多


19
00:00:47,836 --> 00:00:49,026
今天下午


20
00:00:49,026 --> 00:00:50,076
我们将聚焦于和你们


21
00:00:50,116 --> 00:00:51,506
也就是各位开发者们


22
00:00:51,586 --> 00:00:52,956
关系最密切的领域


23
00:00:53,516 --> 00:00:54,586
准备好了解更多了吗


24
00:00:55,016 --> 00:00:56,386
[掌声]


25
00:00:56,386 --> 00:00:59,616
太好了 我们今年已经在开发者的体验


26
00:00:59,616 --> 00:01:01,036
方面向前迈进了一大步


27
00:01:01,036 --> 00:01:03,136
这要归功于新的 SwiftUI


28
00:01:03,416 --> 00:01:05,096
框架 以及在 Xcode 中


29
00:01:05,146 --> 00:01:07,176
出色的交互工具


30
00:01:08,316 --> 00:01:09,696
我们真切地见证了


31
00:01:09,696 --> 00:01:11,976
我们的每一个平台在各自擅长的领域


32
00:01:11,976 --> 00:01:12,916
取得了更深层次的进展


33
00:01:13,326 --> 00:01:14,366
我们在 Mac 上有了


34
00:01:14,366 --> 00:01:16,326
新的更强大的专业功能


35
00:01:16,326 --> 00:01:18,256
全新的深色模式以及大量更新


36
00:01:18,836 --> 00:01:20,526
不好意思 更加独立的 watchOS


37
00:01:21,546 --> 00:01:23,776
在 iOS 上 有新的深色模式和


38
00:01:23,776 --> 00:01:24,636
许多很棒的 App 更新


39
00:01:25,906 --> 00:01:27,806
最后 还推出了 iPadOS


40
00:01:27,806 --> 00:01:29,476
这个强大的操作系统


41
00:01:29,476 --> 00:01:30,626
现在已经独立出来了


42
00:01:31,176 --> 00:01:33,576
不好意思 这边这个提词器出了点问题


43
00:01:34,516 --> 00:01:36,856
[笑声]


44
00:01:37,356 --> 00:01:38,986
好了 那边有一个还能用


45
00:01:38,986 --> 00:01:39,866
所以我还是到左边来吧


46
00:01:40,606 --> 00:01:42,096
这些平台也展现出了


47
00:01:42,276 --> 00:01:44,246
我们的设备的多样性


48
00:01:44,246 --> 00:01:45,416
为其提供良好的支持也是很容易的一件事


49
00:01:45,416 --> 00:01:47,176
这都要归功于


50
00:01:47,176 --> 00:01:48,666
大量的工具和 API 的支撑


51
00:01:49,166 --> 00:01:52,076 
如 AutoLayout Size Classes 和 SwiftUI


52
00:01:53,026 --> 00:01:54,416
现在不会再有黑边问题了


53
00:01:54,416 --> 00:01:55,606
只有你们开发出来的 App 能够适应


54
00:01:55,606 --> 00:01:57,266
各种设备的尺寸时


55
00:01:57,386 --> 00:01:59,626 
你们的用户才能得到最佳体验


56
00:02:00,166 --> 00:02:01,586
从明年春天开始


57
00:02:01,676 --> 00:02:03,126
App Store 将要求


58
00:02:03,126 --> 00:02:05,196
UI 必须适应


59
00:02:05,196 --> 00:02:06,126
不同屏幕大小


60
00:02:06,706 --> 00:02:10,316 
现在 tvOS 提供了许多很酷的新功能


61
00:02:12,016 --> 00:02:14,016
[笑声]


62
00:02:14,016 --> 00:02:15,566
[掌声]


63
00:02:15,566 --> 00:02:20,776
你们也看到了 [掌声]


64
00:02:21,276 --> 00:02:22,646
今年 tvOS 为开发者们


65
00:02:22,646 --> 00:02:24,126
提供了许多很酷的新功能


66
00:02:24,226 --> 00:02:25,946
包括对第三方 App 的


67
00:02:26,016 --> 00:02:27,726
多用户支持


68
00:02:27,856 --> 00:02:29,316
新的 UI 元素及选项


69
00:02:29,716 --> 00:02:31,946
SwiftUI 当然还有


70
00:02:31,946 --> 00:02:34,936
对 Xbox 和 PlayStation 游戏手柄的支持


71
00:02:35,191 --> 00:02:37,191
[掌声]


72
00:02:37,366 --> 00:02:39,146
今天上午我们宣布了


73
00:02:39,146 --> 00:02:41,196
一个无与伦比的新硬件平台


74
00:02:41,196 --> 00:02:42,336
那就是新 Mac Pro


75
00:02:42,336 --> 00:02:45,546
你们喜欢吗 [掌声]


76
00:02:46,046 --> 00:02:47,346
它非常强大


77
00:02:47,346 --> 00:02:49,396
可以解锁很多惊艳的新种类 App 


78
00:02:50,846 --> 00:02:52,316
在我们的各个平台上面


79
00:02:52,626 --> 00:02:54,436
我们也构建了很多技术


80
00:02:54,436 --> 00:02:56,006
我们今天就来看一看


81
00:02:56,006 --> 00:02:58,066
在其中一些领域中这些技术的应用


82
00:02:58,066 --> 00:03:00,646
这些领域包括 辅助功能 隐私


83
00:03:00,646 --> 00:03:02,666
机器学习 Siri


84
00:03:02,666 --> 00:03:04,756
增强现实 以及 Metal


85
00:03:06,166 --> 00:03:07,576
我们今天下午主要讲


86
00:03:07,576 --> 00:03:08,986
三个大的主题


87
00:03:08,986 --> 00:03:09,926
首先让我们来看


88
00:03:09,926 --> 00:03:11,046
开发者的生产力


89
00:03:11,956 --> 00:03:13,836
这个房间里的所有人都知道


90
00:03:13,836 --> 00:03:15,186
强大的工具能够


91
00:03:15,186 --> 00:03:17,036
大幅提升生产力


92
00:03:17,596 --> 00:03:19,466
强大的工具能给你们


93
00:03:19,516 --> 00:03:21,136
更多发挥创意的时间


94
00:03:21,136 --> 00:03:22,376
让你们开发更好的 App


95
00:03:23,296 --> 00:03:24,316
这种体验的基础


96
00:03:24,316 --> 00:03:26,606
就是程序设计语言


97
00:03:27,256 --> 00:03:29,226
在过去五年中 Swift


98
00:03:29,226 --> 00:03:31,326
已经变得更加完善


99
00:03:31,326 --> 00:03:32,706
并被植入了所有的 Apple 平台


100
00:03:33,256 --> 00:03:34,386
Swift 本身就是


101
00:03:34,386 --> 00:03:36,156
SwiftUI 的基础


102
00:03:37,226 --> 00:03:39,446
Xcode 不仅是


103
00:03:39,446 --> 00:03:41,456
一个代码的调试工具 不好意思


104
00:03:41,456 --> 00:03:42,646
代码编辑和调试的工具


105
00:03:43,176 --> 00:03:44,456
它包括了你开发 App 时


106
00:03:44,456 --> 00:03:46,736
所需要的一切


107
00:03:47,036 --> 00:03:48,186
它支持你对你的 App 进行


108
00:03:48,186 --> 00:03:49,486
持续的集成及测试


109
00:03:49,736 --> 00:03:52,166
还为你们带来了


110
00:03:52,166 --> 00:03:54,026
探索新技术的工具


111
00:03:54,396 --> 00:03:56,826
比如机器学习和增强现实


112
00:03:57,766 --> 00:03:59,536
最后 以我们的平台


113
00:03:59,606 --> 00:04:01,416
为坚实的基础


114
00:04:01,516 --> 00:04:02,826
SwiftUI 框架会革新


115
00:04:02,826 --> 00:04:05,656
你们构建用户交互界面的方式


116
00:04:05,836 --> 00:04:07,116
这三大元素一起


117
00:04:07,116 --> 00:04:08,716
会把生产力提升到


118
00:04:08,716 --> 00:04:10,486
全新的境界


119
00:04:10,486 --> 00:04:12,546
它们将会深刻地改变


120
00:04:12,546 --> 00:04:14,006
各位开 App 的方式


121
00:04:14,926 --> 00:04:16,755
你们准备好深入了解


122
00:04:16,755 --> 00:04:17,446
SwiftUI 了吗


123
00:04:18,036 --> 00:04:20,036
[掌声]


124
00:04:20,055 --> 00:04:22,186
我们有请 Josh 上台 来进行进一步讲解


125
00:04:22,266 --> 00:04:25,806
Josh [掌声]


126
00:04:26,306 --> 00:04:27,116
>> 谢谢 Sebastien


127
00:04:27,916 --> 00:04:31,336
好了 说到 SwiftUI 


128
00:04:31,336 --> 00:04:32,536
正如大家今天上午所见


129
00:04:32,536 --> 00:04:33,926
它是一个全新的用户交互框架


130
00:04:34,016 --> 00:04:36,876
从 Swift 语言的底层进行革新 
并回归 Swift


131
00:04:37,756 --> 00:04:38,816
我们设计它是为了让你们


132
00:04:38,976 --> 00:04:40,696
写可以少写一点代码


133
00:04:40,696 --> 00:04:42,346
并且让你们写的代码更有价值


134
00:04:42,886 --> 00:04:44,186
同时还让你们能在


135
00:04:44,186 --> 00:04:46,576
全部的 Apple 平台上使用这些代码


136
00:04:47,646 --> 00:04:49,086
首先 你们写下的


137
00:04:49,086 --> 00:04:50,436
每一行代码


138
00:04:50,436 --> 00:04:52,056
都具备了更多的功能


139
00:04:52,106 --> 00:04:53,286
这就意味着你们


140
00:04:53,286 --> 00:04:54,636
需要写的代码大大减少了


141
00:04:55,516 --> 00:04:56,356
我们就以这款


142
00:04:56,466 --> 00:04:57,806
为 macOS 选择新的发布名称的 App 为例


143
00:04:57,806 --> 00:04:58,796
我们上午已经见过它了


144
00:04:59,246 --> 00:05:00,556
不过现在先省去动态转场效果


145
00:05:01,476 --> 00:05:02,376
如果你以前曾使用


146
00:05:02,376 --> 00:05:04,276
UIKit 写过 App 你就会知道


147
00:05:04,276 --> 00:05:05,896
需要多少种代码段才能


148
00:05:05,896 --> 00:05:06,786
构建出这个交互界面


149
00:05:07,606 --> 00:05:09,476
其实这个界面上并没有多少视图


150
00:05:09,476 --> 00:05:10,686
但是有许多独立的细节


151
00:05:10,686 --> 00:05:12,016
必须保证它们不能出错


152
00:05:12,886 --> 00:05:15,536
使用 SwiftUI 所需的代码就少多了


153
00:05:16,156 --> 00:05:18,256
不到 20 行代码 集中在


154
00:05:18,256 --> 00:05:19,706
三个关键问题上


155
00:05:20,666 --> 00:05:22,636
首先 用几行代码来定义


156
00:05:22,696 --> 00:05:24,126
视图的结构与布局


157
00:05:24,766 --> 00:05:27,456
然后用一些图像与文字视图


158
00:05:27,866 --> 00:05:28,836
来呈现你的内容


159
00:05:30,346 --> 00:05:31,726
最后 用参数和修饰语句


160
00:05:31,726 --> 00:05:33,506
来调调整体的外观


161
00:05:34,636 --> 00:05:35,706
现在我们来更仔细地


162
00:05:35,706 --> 00:05:37,456
看看其中的几行代码


163
00:05:38,456 --> 00:05:39,726
滚动列表本身


164
00:05:39,786 --> 00:05:41,536
几乎没用什么代码


165
00:05:41,846 --> 00:05:43,556
你只需声明出来这个列表


166
00:05:43,666 --> 00:05:45,076
然后描述表中的每一行


167
00:05:45,076 --> 00:05:46,476
所用到的对象的模型就可以了


168
00:05:46,796 --> 00:05:48,146
省掉了创建


169
00:05:48,146 --> 00:05:50,116
设置 以及 回调 这样的繁琐步骤


170
00:05:50,116 --> 00:05:53,106
界面顶部的图像也可以非常简单地就被呈现出来


171
00:05:53,456 --> 00:05:54,896
你只需放进来一张图片


172
00:05:54,896 --> 00:05:56,416
把它剪成圆形 再添加阴影


173
00:05:56,416 --> 00:05:59,846
不但代码更少了 而且代码更好了


174
00:06:00,656 --> 00:06:02,716
我们设计 API 就是为了


175
00:06:02,716 --> 00:06:04,846
让众望所归的方法成为最佳方法


176
00:06:05,796 --> 00:06:07,096
就好比 创建这个“标签”的


177
00:06:07,096 --> 00:06:09,036
正确代码就是


178
00:06:09,086 --> 00:06:10,186
你不假思索就可以想到的那行代码


179
00:06:10,786 --> 00:06:13,216
它还支持动态字体 深色模式等等


180
00:06:13,856 --> 00:06:15,006
实际上 就连这里用到的


181
00:06:15,006 --> 00:06:17,516
字符串插值也是可以被完全定位的


182
00:06:18,706 --> 00:06:19,906
这种简洁彻底消除了


183
00:06:19,906 --> 00:06:21,576
许多可能会出现的错误


184
00:06:22,436 --> 00:06:23,646
再看看我们的列表


185
00:06:23,646 --> 00:06:25,476
它的每一行会在模型变化时


186
00:06:25,476 --> 00:06:27,256
自动更新 以保证


187
00:06:27,256 --> 00:06:28,996
你的 UI 总是最新的


188
00:06:28,996 --> 00:06:30,396
永远不会以某种老旧的视觉效果呈现给用户


189
00:06:30,526 --> 00:06:33,496
而且它也更易读了


190
00:06:33,596 --> 00:06:34,676
这张圆角半径值为 3 的图片的代码


191
00:06:34,676 --> 00:06:37,226
就证明了这一点


192
00:06:38,296 --> 00:06:39,946
阅读 SwiftUI 代码


193
00:06:39,976 --> 00:06:41,776
你会感觉有人在为你描述这个界面一样


194
00:06:42,556 --> 00:06:44,296
SwiftUI 的代码随处可用


195
00:06:44,296 --> 00:06:46,626
能帮你在所有 Apple 平台上


196
00:06:46,626 --> 00:06:48,886
重复使用更多代码


197
00:06:48,886 --> 00:06:50,586
一直以来


198
00:06:50,586 --> 00:06:52,116
开发者们都可以分享模型以及


199
00:06:52,196 --> 00:06:53,556
底层的绘图和合成代码


200
00:06:54,256 --> 00:06:55,596
但更高层面的 UI 代码


201
00:06:55,596 --> 00:06:57,106
大部分仍然是专属于特定平台的


202
00:06:57,926 --> 00:06:59,306
我们利用 SwiftUI 打破了这一壁垒


203
00:06:59,336 --> 00:07:01,416
让你们能够分享更多


204
00:07:02,046 --> 00:07:03,116
当然你们仍然需要


205
00:07:03,116 --> 00:07:05,776
为每一个独立的平台定制界面


206
00:07:05,776 --> 00:07:07,606
以保证你们的 App


207
00:07:07,606 --> 00:07:10,436
在各平台上都呈现出最佳的效果


208
00:07:10,556 --> 00:07:12,106
但是利用 SwiftUI 的一组


209
00:07:12,106 --> 00:07:13,756
基本的 API 模式 


210
00:07:13,756 --> 00:07:15,636
你们只需学习一次这些工具的使用方法


211
00:07:15,636 --> 00:07:17,326
之后就可以在所有地方应用它们


212
00:07:17,326 --> 00:07:18,896
在部署到的每一个平台上


213
00:07:18,956 --> 00:07:19,926
呈现出原生的界面效果


214
00:07:20,946 --> 00:07:22,206
SwiftUI 的设计遵循


215
00:07:22,446 --> 00:07:24,566
四个核心原则


216
00:07:25,346 --> 00:07:27,336
首先是用声明性语法


217
00:07:27,336 --> 00:07:29,146
让 UI 编程从


218
00:07:29,296 --> 00:07:31,096
如何更新屏幕内容


219
00:07:31,096 --> 00:07:32,556
变成了如何描述


220
00:07:32,556 --> 00:07:33,466
你想显示的东西


221
00:07:34,566 --> 00:07:35,626
比如 假设你想要


222
00:07:35,626 --> 00:07:36,586
制作一个标志


223
00:07:36,626 --> 00:07:38,366
它显示为灰色标题型字体


224
00:07:39,096 --> 00:07:40,856
描述这样一个东西


225
00:07:40,856 --> 00:07:42,816
需要许多步骤


226
00:07:42,816 --> 00:07:44,916
这些步骤还需要以特定顺序来编写


227
00:07:45,646 --> 00:07:48,146
但描述你想要的东西


228
00:07:48,236 --> 00:07:49,466
是无需翻译的


229
00:07:50,046 --> 00:07:52,776
比如说 我想要一个 Done 的文本


230
00:07:52,776 --> 00:07:54,506
采用标题型字体 颜色用灰色


231
00:07:55,316 --> 00:07:57,106
SwiftUI 能让你使用


232
00:07:57,106 --> 00:07:58,606
新的声明性语法


233
00:07:58,606 --> 00:07:59,616
进行完全一样的描述


234
00:07:59,616 --> 00:08:01,326
你可以用最少的代码


235
00:08:01,326 --> 00:08:03,616
就描述出你的想法


236
00:08:03,616 --> 00:08:05,396
迭代也变得


237
00:08:05,396 --> 00:08:06,846
比以前快多了


238
00:08:07,316 --> 00:08:08,776
如果你稍后要把这个标志


239
00:08:08,826 --> 00:08:10,516
变成一个按键


240
00:08:10,516 --> 00:08:11,536
只要改动一行就够了


241
00:08:12,081 --> 00:08:14,081
[掌声]


242
00:08:14,146 --> 00:08:15,026
我知道 这很棒


243
00:08:16,516 --> 00:08:19,546
[掌声]


244
00:08:20,046 --> 00:08:21,846
好了 我们的第二条原则 就是我们应该


245
00:08:21,846 --> 00:08:23,246
尽可能地提供


246
00:08:23,246 --> 00:08:24,316
自动功能


247
00:08:24,816 --> 00:08:25,996
这就消除了


248
00:08:26,126 --> 00:08:27,106
大量你曾经需要


249
00:08:27,166 --> 00:08:28,456
手写的代码


250
00:08:29,316 --> 00:08:30,456
我们这个为 macOS 选择新的发布名称的


251
00:08:30,456 --> 00:08:32,066
App 很简单


252
00:08:32,066 --> 00:08:34,015
但它也包括了大量


253
00:08:34,015 --> 00:08:35,186
自动功能


254
00:08:35,885 --> 00:08:37,645
它会自动处理


255
00:08:37,706 --> 00:08:39,756
空格与安全区嵌入


256
00:08:40,186 --> 00:08:41,826
可定位功能以及


257
00:08:41,895 --> 00:08:43,676
从右至左显示语言的布局调整


258
00:08:44,226 --> 00:08:47,206
动态字体与深色模式等等


259
00:08:47,206 --> 00:08:48,986
全部来自一句


260
00:08:48,986 --> 00:08:49,776
最简单的描述


261
00:08:50,376 --> 00:08:51,796
对于一小段代码来说


262
00:08:51,796 --> 00:08:53,106
这配备了相当多的自动功能


263
00:08:53,216 --> 00:08:54,776
但是 还有另外一件事


264
00:08:54,776 --> 00:08:56,476
它非常的重要


265
00:08:56,716 --> 00:08:57,936
需要我们进行


266
00:08:57,936 --> 00:08:59,106
特别地关注


267
00:09:00,036 --> 00:09:01,396
我们现代的交互界面


268
00:09:01,396 --> 00:09:03,146
都是互动式的动画界面


269
00:09:03,506 --> 00:09:05,026
在 SwiftUI 中 同样的


270
00:09:05,026 --> 00:09:06,936
界面在被声明的时候


271
00:09:06,936 --> 00:09:08,776
就被自动地全面地赋予了动画效果


272
00:09:09,876 --> 00:09:11,106
只要一行代码


273
00:09:11,106 --> 00:09:13,786
就可以为所有层级实现动画


274
00:09:14,406 --> 00:09:15,906
无需注记


275
00:09:15,906 --> 00:09:18,006
无需准备 也无需清理


276
00:09:18,636 --> 00:09:19,876
如果你用过


277
00:09:19,876 --> 00:09:21,766
Keynote Magic Move 动画  SwiftUI 动画


278
00:09:21,906 --> 00:09:24,126
和它们一样简单


279
00:09:24,126 --> 00:09:25,036
而且更加强大


280
00:09:26,556 --> 00:09:27,706
至于添加与删除视图


281
00:09:27,706 --> 00:09:29,726
只需要再一行代码


282
00:09:29,726 --> 00:09:31,166
就能描述它们如何


283
00:09:31,166 --> 00:09:34,086
转入和转出了


284
00:09:34,306 --> 00:09:36,866
在动画进行的过程中你的 App 仍然保持


285
00:09:36,866 --> 00:09:38,386
互动与响应


286
00:09:38,386 --> 00:09:40,366
可以随时处理用户输入


287
00:09:40,816 --> 00:09:41,996
如果用户打断了


288
00:09:41,996 --> 00:09:43,546
这些动画 或者


289
00:09:43,546 --> 00:09:44,716
你需要定位到新地点


290
00:09:44,716 --> 00:09:46,846
SwiftUI 也可以自动地


291
00:09:46,846 --> 00:09:47,986
处理这些问题


292
00:09:49,506 --> 00:09:51,956
我们的第三个原则


293
00:09:51,956 --> 00:09:53,906
就是让你可以更容易地学习这种合成型 API


294
00:09:53,906 --> 00:09:56,236
并且可以让开发者能更快地迭代更新


295
00:09:57,276 --> 00:09:59,526
我们已经看到了该如何声明一个独立视图


296
00:09:59,526 --> 00:10:02,146
就像这个文字标签 但其实声明更复杂的视图


297
00:10:02,146 --> 00:10:04,336
也是一样简单 你只需把多个小的代码段


298
00:10:04,426 --> 00:10:05,466
合成在一起就行


299
00:10:06,386 --> 00:10:07,716
我们有水平或是垂直的堆叠型容器


300
00:10:07,716 --> 00:10:09,516
运用这样的容器


301
00:10:09,516 --> 00:10:11,006
只需把几个简单的代码段结合在一起


302
00:10:11,006 --> 00:10:13,256
就可以构建出强大的布局


303
00:10:14,286 --> 00:10:16,196
SwiftUI 还支持视图的属性使用


304
00:10:16,196 --> 00:10:17,596
和成型的语法结构


305
00:10:17,906 --> 00:10:19,596
它使用的是标准的修饰符语法


306
00:10:20,186 --> 00:10:21,636
一组基本的修饰语句


307
00:10:21,696 --> 00:10:23,886
可以应用到任意视图


308
00:10:23,886 --> 00:10:25,416
比如在这里的颜色语句 让文字变成了灰色


309
00:10:26,446 --> 00:10:27,786
使用这种合成型的方式以后


310
00:10:27,786 --> 00:10:29,696
让你只需学习一小组视图与修饰符的


311
00:10:29,696 --> 00:10:31,436
关键词的用法


312
00:10:31,436 --> 00:10:32,536
然后把它们合起来


313
00:10:32,536 --> 00:10:34,486
就可以创建更加强大的界面


314
00:10:35,466 --> 00:10:37,456
我们的最后一个原则


315
00:10:37,456 --> 00:10:39,306
就是你们的界面应该


316
00:10:39,306 --> 00:10:40,406
始终处于前后台一致的状态


317
00:10:41,266 --> 00:10:42,556
你们的 UI 是


318
00:10:42,866 --> 00:10:44,136
App 数据的反映 因此这两者


319
00:10:44,136 --> 00:10:45,856
应该始终保持同步


320
00:10:46,666 --> 00:10:49,026
传统的 API 在这一点上容易出错


321
00:10:49,026 --> 00:10:51,216
但使用 SwiftUI 你们的界面


322
00:10:51,216 --> 00:10:53,996
会在任意时刻随着数据变化而自动更新


323
00:10:55,196 --> 00:10:56,696
你们的数据最可能


324
00:10:56,696 --> 00:10:58,106
从两个地方来


325
00:10:58,496 --> 00:11:00,246
第一种就是来自于模型对象


326
00:11:00,616 --> 00:11:01,856
你可以直接使用已有的


327
00:11:01,856 --> 00:11:03,706
模型对象 只要让它们


328
00:11:03,706 --> 00:11:04,746
遵从新的


329
00:11:04,746 --> 00:11:06,266
可绑定对象协议


330
00:11:06,776 --> 00:11:08,206
唯一的要求就是


331
00:11:08,256 --> 00:11:10,116
你必须指明模型数据何时发生变化


332
00:11:10,116 --> 00:11:12,016
第二个地方就是


333
00:11:12,016 --> 00:11:13,786
临时 UI 状态


334
00:11:13,786 --> 00:11:15,256
比如视图目前是否正处于编辑模式


335
00:11:15,876 --> 00:11:16,816
通过使用


336
00:11:16,916 --> 00:11:18,806
应用于视图上任一属性的简单状态包装器


337
00:11:18,806 --> 00:11:19,956
就可以声明它们


338
00:11:20,816 --> 00:11:22,406
我们都习惯了每个视图上的


339
00:11:22,406 --> 00:11:24,586
每个属性都是可变的


340
00:11:25,096 --> 00:11:26,156
但你一旦开始使用 SwiftUI


341
00:11:26,156 --> 00:11:27,886
就会很震惊地意识到


342
00:11:27,886 --> 00:11:29,616
你的 App 其实只需要


343
00:11:29,616 --> 00:11:31,596
非常少的可变属性


344
00:11:32,356 --> 00:11:34,586
无论你的模型或状态


345
00:11:34,586 --> 00:11:36,616
如何变化 UI 都会


346
00:11:36,616 --> 00:11:37,696
自动更新


347
00:11:38,226 --> 00:11:39,456
因为它都是 Swift 代码


348
00:11:39,696 --> 00:11:40,696
你在获得此行为时


349
00:11:40,766 --> 00:11:41,856
仍然可以直接在


350
00:11:41,856 --> 00:11:43,746
界面声明中使用


351
00:11:43,746 --> 00:11:44,866
模型对象


352
00:11:45,776 --> 00:11:46,886
你甚至能改变并


353
00:11:46,946 --> 00:11:48,936
规定代码行中具体值的格式


354
00:11:48,936 --> 00:11:50,136
而无需额外的中间层


355
00:11:51,026 --> 00:11:53,016
比如 这个字符串插值可以用于


356
00:11:53,016 --> 00:11:54,546
规定日期的格式


357
00:11:54,706 --> 00:11:58,256
成为完全本地化的格式文字


358
00:11:58,416 --> 00:11:59,466
这一切意味着


359
00:11:59,536 --> 00:12:01,116
SwiftUI 能让你写


360
00:12:01,116 --> 00:12:02,566
更少的代码 并获得


361
00:12:02,566 --> 00:12:03,216
更一致的 UI


362
00:12:04,616 --> 00:12:05,666
这就是 SwiftUI 的


363
00:12:05,666 --> 00:12:06,666
四大核心原则


364
00:12:07,296 --> 00:12:08,946
强大的声明性语法


365
00:12:09,306 --> 00:12:10,506
激活了大量


366
00:12:10,506 --> 00:12:12,336
自动功能


367
00:12:12,336 --> 00:12:14,086
合成型的 API 又同时确保了


368
00:12:14,086 --> 00:12:15,636
你的界面始终处于


369
00:12:15,636 --> 00:12:16,536
前后台一致的状态


370
00:12:17,806 --> 00:12:19,006
这个出色的新框架


371
00:12:19,086 --> 00:12:20,906
值得拥有一个优秀的开发工具


372
00:12:21,196 --> 00:12:22,306
我们使用 Xcode


373
00:12:22,306 --> 00:12:23,726
为 SwiftUI 从零开始设计了


374
00:12:23,726 --> 00:12:25,956
全新的工作流


375
00:12:26,946 --> 00:12:27,966
你将获得代码的强大功能


376
00:12:28,006 --> 00:12:29,946
与灵活性


377
00:12:30,036 --> 00:12:31,676
同时还有 UI 工具的易用性


378
00:12:31,676 --> 00:12:33,346
与快速迭代


379
00:12:34,266 --> 00:12:35,346
你将随时获得


380
00:12:35,346 --> 00:12:36,796
两者的好处 而且永远不必


381
00:12:36,796 --> 00:12:38,086
再二选一了


382
00:12:39,026 --> 00:12:40,346
因为这些工具可以有效地运用在


383
00:12:40,346 --> 00:12:41,676
你已有的源代码上面


384
00:12:41,676 --> 00:12:44,936
你将拥有一个美好的开发体验


385
00:12:45,796 --> 00:12:47,196
要真正地了解这个工作流


386
00:12:47,196 --> 00:12:48,456
有多么美妙


387
00:12:48,456 --> 00:12:49,826
你们必须亲眼看一看


388
00:12:49,826 --> 00:12:51,516
我现在邀请 Kevin 上台


389
00:12:51,516 --> 00:12:52,796
为大家做展示


390
00:12:53,516 --> 00:12:58,696
[掌声]


391
00:12:59,196 --> 00:12:59,816
>> 多谢 Josh


392
00:13:00,666 --> 00:13:02,156
大家准备好看点有趣的东西了吗


393
00:13:02,376 --> 00:13:03,446
那么我们开始吧 现在我我想


394
00:13:03,446 --> 00:13:04,736
搭建一个关于远足的 App


395
00:13:04,856 --> 00:13:06,586
并且我想在我的表格视图内


396
00:13:06,586 --> 00:13:08,566
添加另一个视图 来告诉我某条远足线路的难度


397
00:13:08,626 --> 00:13:11,206
所以我们先从总的路线表开始构建


398
00:13:11,206 --> 00:13:12,196
首先我们需要写文本


399
00:13:12,196 --> 00:13:14,206
当我往过拖拽控件的时候


400
00:13:14,206 --> 00:13:15,986
Xcode 会给我一个建议的布局位置


401
00:13:16,336 --> 00:13:17,446
我只需告诉 Xcode


402
00:13:17,446 --> 00:13:19,056
我希望把它放在哪儿


403
00:13:19,116 --> 00:13:20,476
之后 Xcode 会自动地为我建立出这个布局


404
00:13:21,336 --> 00:13:22,226
现在我们需要编辑


405
00:13:22,226 --> 00:13:23,226
这个视图的属性


406
00:13:23,226 --> 00:13:24,556
所以 我只需要在画布的这个位置


407
00:13:24,556 --> 00:13:26,156
单击一下 之后就可以在这儿得到一个


408
00:13:26,226 --> 00:13:28,456
为这个控件定制的 inspector 检查器


409
00:13:28,926 --> 00:13:30,616
让我们把文本缩小一点


410
00:13:30,616 --> 00:13:32,256
现在 看这个位置


411
00:13:32,256 --> 00:13:33,296
看好在我做这个操作的时候代码部分的变化


412
00:13:33,476 --> 00:13:35,556
你可以看到 代码自动地就给我写好了


413
00:13:37,136 --> 00:13:39,086
我们也可以在这边进行同样的操作


414
00:13:39,086 --> 00:13:40,706
在源编辑器里通过编辑代码


415
00:13:40,706 --> 00:13:42,656
来进行更改


416
00:13:42,656 --> 00:13:44,406
你可以看到 Xcode 会


417
00:13:44,406 --> 00:13:45,906
在构建的同时运行我的代码


418
00:13:45,906 --> 00:13:47,236
并更新了右侧的画布


419
00:13:48,726 --> 00:13:50,046
现在不论我在左右哪一侧进行操作


420
00:13:50,326 --> 00:13:52,616
我都可以使用我所有的设计工具


421
00:13:53,116 --> 00:13:54,046
现在我点击一下这个 VStack


422
00:13:54,046 --> 00:13:56,586
之后打开它的 inspector


423
00:13:56,826 --> 00:13:58,326
我可以在这儿接着


424
00:13:58,326 --> 00:13:59,576
调整我想调整的属性


425
00:13:59,826 --> 00:14:02,046
属性更新起来十分快捷


426
00:14:02,726 --> 00:14:05,116
你可能发现这个视图


427
00:14:05,116 --> 00:14:06,656
有几个输入


428
00:14:06,706 --> 00:14:08,756
比如这个标题还有路线的难度


429
00:14:08,996 --> 00:14:11,396
那么 Xcode 怎么样才能知道


430
00:14:11,716 --> 00:14:13,066
在预览中要显示哪些数据呢


431
00:14:13,066 --> 00:14:15,286
这一直是 UI 开发的过程中的一个挑战


432
00:14:15,366 --> 00:14:17,826
在设计的过程中我们究竟要在前台显示什么数据


433
00:14:18,166 --> 00:14:19,906
为解决这个问题


434
00:14:20,046 --> 00:14:21,296
我们开发了 Xcode 预览功能


435
00:14:21,296 --> 00:14:22,346
怎么来预览呢


436
00:14:22,346 --> 00:14:24,676
我来展示给你们我下滑到这个位置


437
00:14:25,866 --> 00:14:27,256
来看这一小段代码


438
00:14:27,336 --> 00:14:28,846
一个预览其实只是


439
00:14:28,846 --> 00:14:30,506
我的 App 中的一段代码


440
00:14:30,506 --> 00:14:32,306
我在设计的过程中配置上这段代码


441
00:14:32,846 --> 00:14:34,216
因为这段代码就在我的 App 里面


442
00:14:34,216 --> 00:14:36,926
所以在整个项目内我都可以用这段代码来预览


443
00:14:37,056 --> 00:14:38,296
并且因为这段代码就在我的项目里


444
00:14:38,296 --> 00:14:40,266
我可以检查并且可以把这段用作预览的代码


445
00:14:40,266 --> 00:14:41,146
分享给我的团队成员们


446
00:14:41,646 --> 00:14:42,696
并且 如果想用不同的数据来调试


447
00:14:42,696 --> 00:14:43,526
也非常容易的


448
00:14:43,526 --> 00:14:45,546
实际上这里的这个 Half Dome 路线难度很高


449
00:14:45,546 --> 00:14:47,456
我们看下把它的难度调成 hard 是个什么效果


450
00:14:47,456 --> 00:14:49,156
而且它是 16 英里


451
00:14:49,156 --> 00:14:50,466
不是 6 英里 这里也改一下


452
00:14:50,566 --> 00:14:52,516
它实际上是在编译我的代码


453
00:14:53,806 --> 00:14:54,956
因为这是 SwiftUI 的代码


454
00:14:54,956 --> 00:14:57,276
所以我可以使用所有的


455
00:14:57,276 --> 00:14:58,736
在其余 UI 开发过程当中的


456
00:14:58,736 --> 00:15:00,436
修饰语句


457
00:15:01,056 --> 00:15:02,276
比如 我们可以看下在


458
00:15:02,426 --> 00:15:03,436
深色模式下效果


459
00:15:04,406 --> 00:15:05,886
而且 我们还有一些


460
00:15:05,886 --> 00:15:06,796
只有预览模块可以使用的修饰语句


461
00:15:06,796 --> 00:15:08,636
默认的预览是


462
00:15:08,726 --> 00:15:10,596
基于设备的显示效果的


463
00:15:10,596 --> 00:15:11,546
当我们在设计表格视图的时候


464
00:15:11,546 --> 00:15:13,846
我们可以只关注表格里的内容


465
00:15:13,846 --> 00:15:15,746
我就这样调一下 可以让尺寸适应这种需求


466
00:15:17,326 --> 00:15:19,496
好了 预览就是这么出色 可以做到很多事情


467
00:15:19,846 --> 00:15:21,846
多到你无法想象


468
00:15:22,546 --> 00:15:24,156
现在 我们用完全不同的数据


469
00:15:24,696 --> 00:15:26,216
来做第二个预览


470
00:15:26,216 --> 00:15:28,346
但我们不能止步于此


471
00:15:28,936 --> 00:15:31,146
我们就这么单击


472
00:15:31,146 --> 00:15:31,886
之后重复操作几次


473
00:15:32,526 --> 00:15:34,786
我们调出来一些常见的


474
00:15:34,836 --> 00:15:36,756
动态类型尺寸


475
00:15:36,756 --> 00:15:38,606
然后配置给单元格


476
00:15:38,606 --> 00:15:39,536
来适用这些动态类型尺寸


477
00:15:39,536 --> 00:15:41,106
就这样 我们就可以同时看到


478
00:15:41,106 --> 00:15:42,726
我的单元格的亮模式


479
00:15:42,726 --> 00:15:44,186
深色模式 以及多种不同动态类型的尺寸下的


480
00:15:44,186 --> 00:15:55,566
显示效果 [掌声]


481
00:15:56,066 --> 00:15:57,256
现在 当我点击这个单元格时


482
00:15:57,256 --> 00:15:58,666
希望进入到的是远足路线细节部分的视图


483
00:15:59,186 --> 00:16:00,106
现在我们转换到细节部分


484
00:16:00,106 --> 00:16:02,146
看一看


485
00:16:02,796 --> 00:16:05,966
通过多年的远足经历 我意识到


486
00:16:05,966 --> 00:16:08,896
永远不要通过一条路线的名字来判断路线的难度


487
00:16:08,896 --> 00:16:10,276
所以对于我来说


488
00:16:10,276 --> 00:16:12,726
能够在详细视图这里面


489
00:16:12,726 --> 00:16:15,036
把图像放大以便查看细节是十分重要的


490
00:16:15,036 --> 00:16:16,356
我已经在这儿事先写好了一些


491
00:16:16,356 --> 00:16:18,056
SwiftUI 的代码


492
00:16:18,056 --> 00:16:19,566
当我们点击上方的横幅图片的时候


493
00:16:19,856 --> 00:16:21,986
我们希望图片可以被扩展放大


494
00:16:22,546 --> 00:16:24,206
我可以在 UI 中测试一下


495
00:16:24,206 --> 00:16:26,676
只需点击开这个播放的按钮


496
00:16:27,446 --> 00:16:28,666
它可以把所有的预览都给呈现出来


497
00:16:28,746 --> 00:16:30,946
而且它是是完全可交互的


498
00:16:31,856 --> 00:16:33,406
我可以点击


499
00:16:33,986 --> 00:16:35,436
并且测试这些不同的放大效果


500
00:16:36,056 --> 00:16:38,956
现在我可以用动画来完善它


501
00:16:38,956 --> 00:16:39,866
这个操作非常简单


502
00:16:40,416 --> 00:16:41,726
我就把我的这段代码


503
00:16:41,726 --> 00:16:43,706
封装进一个 whip animation 的代码段里


504
00:16:43,706 --> 00:16:46,896
现在我就得到了一个


505
00:16:46,896 --> 00:16:47,936
漂亮的默认动画


506
00:16:50,516 --> 00:16:56,546
[掌声]


507
00:16:57,046 --> 00:16:58,346
如果你先要定制这个动画


508
00:16:58,346 --> 00:16:59,346
同样非常容易


509
00:16:59,566 --> 00:17:01,126
现在我们让动画速度变慢


510
00:17:01,126 --> 00:17:03,806
再加一些因热瞩目的效果


511
00:17:03,806 --> 00:17:05,306
这样一来 我们就有了一个炫酷的效果来放大这张图


512
00:17:05,955 --> 00:17:07,296
SwiftUI 的神奇之处在于


513
00:17:07,406 --> 00:17:09,036
每一个动画都是


514
00:17:09,066 --> 00:17:10,546
可取消以及可逆的


515
00:17:10,675 --> 00:17:13,356
并且 App 将始终响应着这些动画效果


516
00:17:14,766 --> 00:17:16,205
好了 现在我们有了一个表格视图内的单元格


517
00:17:16,236 --> 00:17:17,996
并且也给这个单元格建立好了它的详细视图


518
00:17:18,175 --> 00:17:19,816
现在我们把它们放到一起


519
00:17:19,816 --> 00:17:21,656
所以现在我切换到


520
00:17:21,656 --> 00:17:23,876
我最后一次创建出来的一个实例


521
00:17:23,876 --> 00:17:25,746
它有包含了很多不同的线路 并且构成了一个列表


522
00:17:26,736 --> 00:17:27,996
我想做的是


523
00:17:27,996 --> 00:17:29,066
看看我设计完的视图


524
00:17:29,126 --> 00:17:30,476
在真实的设备上是一个什么样的效果


525
00:17:31,166 --> 00:17:32,346
所以只需要点一个按钮


526
00:17:32,346 --> 00:17:33,466
我们点下它之后


527
00:17:33,466 --> 00:17:35,246
Xcode 会自动把我的项目建立到模拟设备上


528
00:17:35,246 --> 00:17:36,476
我把它安上去


529
00:17:36,476 --> 00:17:38,906
之后就会在这个设备上启动我的预览


530
00:17:38,906 --> 00:17:39,996
而且你可以看到


531
00:17:39,996 --> 00:17:41,316
在这边是完全可交互的


532
00:17:41,796 --> 00:17:44,296
那么首先 我们应用一下我们之前写好的单元格样式


533
00:17:44,876 --> 00:17:46,376
我把这个文本


534
00:17:46,376 --> 00:17:48,596
改成路线单元格的样式


535
00:17:49,366 --> 00:17:50,446
现在你可以看到 我们的路线


536
00:17:50,446 --> 00:17:51,596
已经变成之前写好的单元格的样子了


537
00:17:51,596 --> 00:17:53,496
现在我点一下这里


538
00:17:53,496 --> 00:17:54,646
希望能够打开到


539
00:17:54,646 --> 00:17:55,096
我们之前写好的细节视图里


540
00:17:55,396 --> 00:17:56,796
有了 SwiftUI 这一切都非常容易


541
00:17:56,796 --> 00:17:58,836
它会把这件事封装进


542
00:17:58,836 --> 00:18:00,816
一个 navigation button 里


543
00:18:00,816 --> 00:18:02,396
以此来进入到详细视图里面


544
00:18:02,396 --> 00:18:04,186
现在你可以看到 代码部分的 chevron 已经被显示出来


545
00:18:04,186 --> 00:18:05,486
现在我们来具体的看下这个 Snow Creek 线路


546
00:18:05,486 --> 00:18:07,766
我们来看先这个图片部分


547
00:18:07,766 --> 00:18:10,346
这么一看就会发现这条路线布满积雪还很难


548
00:18:10,346 --> 00:18:11,896
看起来不是一条轻松的远足路线


549
00:18:12,476 --> 00:18:13,546
下面我要做的就是用


550
00:18:13,546 --> 00:18:15,516
一行 SwiftUI 代码


551
00:18:15,516 --> 00:18:16,816
来实现“滑动以删除”这个功能


552
00:18:16,816 --> 00:18:19,266
现在 我们这么一滑


553
00:18:19,266 --> 00:18:20,636
就删掉这条线路了


554
00:18:20,636 --> 00:18:23,476
最后呢 我们来看一下


555
00:18:23,476 --> 00:18:24,756
在深色模式内的呈现效果


556
00:18:24,946 --> 00:18:27,026
无需任何多于操作


557
00:18:27,026 --> 00:18:28,406
就会直接把我的预览放进深色模式里


558
00:18:28,406 --> 00:18:29,916
你可以看到 它看起来很漂亮


559
00:18:30,516 --> 00:18:38,696
[掌声]


560
00:18:39,196 --> 00:18:41,226
我们可以点进 Valley floor 这条线路里


561
00:18:41,226 --> 00:18:44,056
进行放大 看起来这个周末


562
00:18:44,106 --> 00:18:44,876
去这儿是个不错的选择


563
00:18:45,036 --> 00:18:46,176
所以就刚这么一会儿 我们就搭建了一个 App


564
00:18:46,176 --> 00:18:47,836
它具备导航功能 动态类型的尺寸


565
00:18:47,916 --> 00:18:49,386
亮模式 深色模式


566
00:18:49,386 --> 00:18:51,126
包含了多个不同的数据


567
00:18:51,206 --> 00:18:53,246
而且可以看到它在真实设备上的效果


568
00:18:53,246 --> 00:18:54,006
并且不需要构建什么或者反复运行来查看效果


569
00:18:54,346 --> 00:18:56,746
这真的非常有趣 好了 Josh 该你继续了


570
00:18:57,516 --> 00:19:04,706
[掌声]


571
00:19:05,206 --> 00:19:07,266
>> 谢谢 Kevin 好了 我们可以发现


572
00:19:07,266 --> 00:19:08,626
对于原生代码而言


573
00:19:08,706 --> 00:19:09,476
这是一种令人难以置信的全新的工作流


574
00:19:10,016 --> 00:19:12,596
你在这个工具当中所做的一切都是可调式 可扩展


575
00:19:12,796 --> 00:19:14,556
可搜索 以及可理解的


576
00:19:15,036 --> 00:19:17,726
并且由于开发者可以直接编辑代码


577
00:19:17,726 --> 00:19:19,776
会使你的工作流具备不可思议的灵活性


578
00:19:20,116 --> 00:19:21,786
并且 SwiftUI 已经深度集成到


579
00:19:21,786 --> 00:19:23,076
我们所有的操作系统当中


580
00:19:23,136 --> 00:19:25,046
所以使用它 可以为你的目标平台


581
00:19:25,046 --> 00:19:27,226
生成一个完全匹配该平台的 App


582
00:19:27,756 --> 00:19:28,756
你可以获得与其他原生 App


583
00:19:28,996 --> 00:19:30,596
相同的效果 相同的性能


584
00:19:30,596 --> 00:19:32,596
以及相同的控件


585
00:19:33,056 --> 00:19:35,296
你可以按照你自己的节奏来熟悉 SwiftUI


586
00:19:35,846 --> 00:19:36,776
你可以用它做任何事情


587
00:19:36,776 --> 00:19:38,576
从编写 App 中的单个视图


588
00:19:38,576 --> 00:19:40,546
到构建整个 App


589
00:19:41,066 --> 00:19:42,416
它可以与现有的


590
00:19:42,416 --> 00:19:44,146
UIKit AppKit 以及


591
00:19:44,146 --> 00:19:45,906
WatchKit 代码无缝衔接


592
00:19:45,906 --> 00:19:47,116
所以 你无需重写任何东西


593
00:19:47,116 --> 00:19:48,856
为了能让开发者们更快的跟上我们的革新


594
00:19:48,856 --> 00:19:50,346
我们的文档团队


595
00:19:50,346 --> 00:19:51,926
开发了一种全新的


596
00:19:51,926 --> 00:19:53,296
可交互文档


597
00:19:53,816 --> 00:19:54,616
它可以很快地教你


598
00:19:54,686 --> 00:19:56,596
一步一步地从建立项目


599
00:19:56,596 --> 00:19:57,846
一直到构建一个


600
00:19:57,846 --> 00:19:59,516
完全可交互的界面


601
00:20:00,036 --> 00:20:00,976
所以任何开发者都可以很快地跟上进度


602
00:20:01,516 --> 00:20:07,946
[掌声]


603
00:20:08,446 --> 00:20:09,856
以上就是 SwiftUI 和 Xcode 


604
00:20:09,856 --> 00:20:11,086
里的一些新工具


605
00:20:11,526 --> 00:20:13,166
当然 对于 Swift 和 Xcode 来说


606
00:20:13,166 --> 00:20:15,116
今年是非常重要的一年


607
00:20:15,116 --> 00:20:16,166
所以还有很多内容可以分享给各位


608
00:20:16,436 --> 00:20:17,416
为了告诉你们更多内容


609
00:20:17,416 --> 00:20:19,296
下面我将邀请 Matthew 上台 谢谢


610
00:20:20,516 --> 00:20:24,866
[掌声]


611
00:20:25,366 --> 00:20:28,106
>> 谢谢 Josh 我们今年发布的工具


612
00:20:28,106 --> 00:20:29,526
结合了 Swift 和 Xcode


613
00:20:29,636 --> 00:20:32,966
二者的创新 并且创造出了一些令人惊叹的结果


614
00:20:33,876 --> 00:20:34,796
我们先来说说 Swift


615
00:20:36,106 --> 00:20:38,016
今年是 Swift 发布的第五年


616
00:20:38,016 --> 00:20:39,686
它已经非常成熟了


617
00:20:39,686 --> 00:20:40,326
并且在持续向前飞跃


618
00:20:40,696 --> 00:20:42,096
作为我们最新的旗舰级技术


619
00:20:42,176 --> 00:20:43,636
Swift 可以支撑从机器学习到


620
00:20:43,636 --> 00:20:45,116
增强现实等各个领域


621
00:20:45,496 --> 00:20:46,906
现在 Swift 已经是


622
00:20:46,906 --> 00:20:49,126
我们操作系统的一部分了


623
00:20:50,446 --> 00:20:51,576
为了实现这些


624
00:20:51,576 --> 00:20:53,226
在今年春天的早些时候


625
00:20:53,536 --> 00:20:55,356
我们引入了 ABI Stability


626
00:20:55,356 --> 00:20:56,956
ABI Stability 通过共用 Swift 运行时间


627
00:20:57,106 --> 00:21:04,546
来缩小你的 App 的大小 [掌声]


628
00:21:05,046 --> 00:21:05,836
今天 我们再继续讨论一下


629
00:21:05,836 --> 00:21:07,936
模块的稳定性


630
00:21:08,006 --> 00:21:09,146
模块的稳定性是确保兼容性的前提


631
00:21:09,196 --> 00:21:14,046
是的 [掌声]


632
00:21:14,546 --> 00:21:15,626
想要保证兼容性


633
00:21:15,626 --> 00:21:17,266
就需要确保二进制文件


634
00:21:17,266 --> 00:21:18,846
与当前的以及未来的


635
00:21:18,846 --> 00:21:20,626
Swift 编译器可以兼容


636
00:21:21,656 --> 00:21:22,726
此外 Swift 还提供了


637
00:21:22,726 --> 00:21:24,066
许多其它语言的特性


638
00:21:24,066 --> 00:21:26,116
工具版本 性能


639
00:21:26,116 --> 00:21:27,706
以及代码规模方面的改进


640
00:21:27,776 --> 00:21:29,236
这些改进都能进一步扩展


641
00:21:29,236 --> 00:21:30,566
Swift 为你的项目


642
00:21:30,566 --> 00:21:31,936
所带来的潜力


643
00:21:33,436 --> 00:21:35,276
所以 现在 Swift 已经


644
00:21:35,276 --> 00:21:37,106
成为了你开发 App 的首选语言


645
00:21:37,106 --> 00:21:38,836
而且 现在比以往任何时候


646
00:21:38,836 --> 00:21:40,416
都更适合在所有的 Apple 平台上共享公共代码


647
00:21:41,616 --> 00:21:42,906
实际上 共享正是我们开发


648
00:21:42,906 --> 00:21:45,016
Swift 包的原因


649
00:21:45,016 --> 00:21:46,426
它是开发和共享你自己的代码


650
00:21:46,426 --> 00:21:49,096
以及重用他人代码的最佳方式


651
00:21:49,776 --> 00:21:51,776
今天 我们要宣布两件大事


652
00:21:53,636 --> 00:21:54,896
GitHub 将会在


653
00:21:54,896 --> 00:21:56,556
GitHub 包库注册表中


654
00:21:56,556 --> 00:21:57,876
添加对 Swift 包的支持


655
00:21:58,516 --> 00:22:05,546
[掌声]


656
00:22:06,046 --> 00:22:07,396
这种支持真的是相当的完美


657
00:22:07,396 --> 00:22:08,946
因为 Xcode 现在可以无缝地


658
00:22:09,066 --> 00:22:10,216
支持 Swift 包 用它开发出的 App


659
00:22:10,216 --> 00:22:11,876
应用在 iOS iPadOS 以及我们所有平台上面


660
00:22:12,516 --> 00:22:19,736
[掌声]


661
00:22:20,236 --> 00:22:21,446
Swift 包是你的 Workspace 中的


662
00:22:21,446 --> 00:22:23,346
顶层部分 而且它


663
00:22:23,346 --> 00:22:25,576
总是可见的 可理解的


664
00:22:25,576 --> 00:22:26,556
并且是深度集成的


665
00:22:27,386 --> 00:22:28,796
来自社区的包


666
00:22:28,796 --> 00:22:30,376
以及你自己创建的包


667
00:22:30,376 --> 00:22:32,176
可以接入所有的 Xcode 的


668
00:22:32,176 --> 00:22:33,716
工作流当中 并且可以用于


669
00:22:33,766 --> 00:22:35,836
控制源代码 调试 测试


670
00:22:36,806 --> 00:22:38,176
所以内置在 Xcode 当中的


671
00:22:38,176 --> 00:22:41,436
Swift 包 可以以开发者所期待的方式来共享代码


672
00:22:43,076 --> 00:22:44,386
今年仅仅是是 Xcode


673
00:22:44,486 --> 00:22:45,846
的一个新的开端


674
00:22:45,846 --> 00:22:48,326
它的目标就是最大化你的生产力


675
00:22:48,956 --> 00:22:50,796
今天 我们将与各位开发者分享一些改进


676
00:22:50,826 --> 00:22:53,396
因为我们将 Xcode 升级到了第 11 代


677
00:22:54,506 --> 00:22:56,896
让我们从最大的


678
00:22:56,896 --> 00:22:58,556
变化之一开始吧


679
00:22:58,556 --> 00:22:59,356
它就是 Xcode 的 Workspace


680
00:23:00,086 --> 00:23:02,526
我们给了各位开发者完全的编辑和控制


681
00:23:02,826 --> 00:23:04,106
你现在可以以任何你喜爱的方式


682
00:23:04,106 --> 00:23:05,996
来创建和管理你的编辑器的布局


683
00:23:06,896 --> 00:23:08,296
无论你喜欢什么样的


684
00:23:08,296 --> 00:23:09,716
风格和布局


685
00:23:09,716 --> 00:23:11,676
你可以随意地添加或


686
00:23:11,816 --> 00:23:13,476
删除编辑器内的模块


687
00:23:14,516 --> 00:23:19,826
[掌声]


688
00:23:20,326 --> 00:23:22,886
而且更棒的是 你的 Workspace


689
00:23:22,886 --> 00:23:24,246
现在也可以聚焦了


690
00:23:24,246 --> 00:23:28,116
你可以挑任意一个编辑器


691
00:23:28,166 --> 00:23:33,136
把它最大化当你用完以后


692
00:23:33,136 --> 00:23:34,936
直接把它放回去 它就会回到它一开始在的地方


693
00:23:35,516 --> 00:23:41,916
[掌声] 所以现在 不论你是用的是


694
00:23:41,976 --> 00:23:43,766
最小的笔记本电脑


695
00:23:43,766 --> 00:23:45,436
还是用着最大的显示器


696
00:23:45,436 --> 00:23:47,176
你的 Workspace 都可以良好的配合你


697
00:23:49,396 --> 00:23:50,886
现在我们编辑器中的 Related Content 部分


698
00:23:50,886 --> 00:23:53,146
的智能选择 像是 counterparts 功能


699
00:23:53,146 --> 00:23:54,676
就是根据编辑器内容呈现对应效果的功能


700
00:23:54,676 --> 00:23:55,866
现在也得到了巨大的进步


701
00:23:57,246 --> 00:23:58,536
现在有了新的选项


702
00:23:58,646 --> 00:24:01,476
可以选择查看代码对应的预览 画布 实时视图等


703
00:24:02,356 --> 00:24:03,736
你可以给 Workspace 中的


704
00:24:03,736 --> 00:24:05,586
任意编辑器使用 Related Content 功能


705
00:24:06,546 --> 00:24:07,996
我猜你们会相当喜欢这个功能的


706
00:24:08,126 --> 00:24:09,596
当没有内容时


707
00:24:09,596 --> 00:24:11,466
这些呈现相关内容的效果的窗口就会自动消失


708
00:24:11,466 --> 00:24:13,276
你们再也不需要管理它们的可见性


709
00:24:14,516 --> 00:24:18,686
[掌声]


710
00:24:19,186 --> 00:24:20,446
当你弄好 Workspace 之后


711
00:24:20,506 --> 00:24:22,146
剩下的关注点就都在编辑上了


712
00:24:22,146 --> 00:24:23,306
接下来我想向你们快速演示一下


713
00:24:23,306 --> 00:24:24,596
今年我们为各位开发者


714
00:24:24,596 --> 00:24:25,626
提供的一些


715
00:24:25,626 --> 00:24:26,846
源代码编辑方面的特色功能


716
00:24:39,046 --> 00:24:39,956
为了让开发者可以


717
00:24:39,956 --> 00:24:41,596
按照自己喜欢的方式配置每个编辑器


718
00:24:41,596 --> 00:24:43,106
在右上角有一个新的选项菜单


719
00:24:44,186 --> 00:24:45,426
你可以看到 在这个位置


720
00:24:45,426 --> 00:24:46,456
我能够启用 Assistant 或者是任意


721
00:24:46,456 --> 00:24:47,226
Related Content


722
00:24:47,856 --> 00:24:49,076
我可以打开 Code Coverage


723
00:24:49,126 --> 00:24:50,106
或者 Source Control Authors


724
00:24:50,106 --> 00:24:51,616
我打算打开我们的最新的


725
00:24:51,616 --> 00:24:52,806
Mini map 功能


726
00:24:54,676 --> 00:24:55,646
Mini map 这个功能


727
00:24:55,646 --> 00:24:57,776
可以为你展示文件的结构概览


728
00:24:57,926 --> 00:24:58,726
来帮助你定位内容


729
00:24:59,326 --> 00:25:00,586
你可以看到 文本


730
00:25:00,586 --> 00:25:01,656
方法和函数


731
00:25:02,226 --> 00:25:03,256
它使得你在这个文件上的移动


732
00:25:03,256 --> 00:25:04,176
变得非常容易


733
00:25:05,216 --> 00:25:06,216
如果你想在这个文件上


734
00:25:06,256 --> 00:25:07,476
留下一些其他的位置标记


735
00:25:07,476 --> 00:25:09,216
你可以使用 mark 语句段


736
00:25:09,216 --> 00:25:10,826
来添加标签和水平分割符


737
00:25:11,126 --> 00:25:12,586
它会同时显示在你的源文件


738
00:25:12,586 --> 00:25:13,496
和 Mini map 当中


739
00:25:15,516 --> 00:25:19,756
[掌声]


740
00:25:20,256 --> 00:25:21,536
现在我悬停在 Mini map 上


741
00:25:21,536 --> 00:25:22,806
你可以看到文件的


742
00:25:22,806 --> 00:25:24,256
符号化的位置标记


743
00:25:24,996 --> 00:25:26,606
接下来我想给你们一个专业的小提示


744
00:25:26,606 --> 00:25:28,166
按住 command 键 你就能看到


745
00:25:28,166 --> 00:25:29,646
这个文件的所有的位置标记


746
00:25:29,676 --> 00:25:30,846
这可以帮助你非常容易的


747
00:25:30,846 --> 00:25:31,826
到你想要的确切的位置


748
00:25:32,516 --> 00:25:36,546
[掌声]


749
00:25:37,046 --> 00:25:37,836
并且 Mini map 会为告诉你


750
00:25:37,876 --> 00:25:39,736
问题 测试失败的部分


751
00:25:39,736 --> 00:25:40,836
甚至是文件内部发现的结果


752
00:25:41,396 --> 00:25:42,846
我们已经让这些功能触手可及了


753
00:25:44,366 --> 00:25:45,366
你可以发现在 Source Editor 里面


754
00:25:45,366 --> 00:25:46,756
随着我们凸显了基于语法的着色效果


755
00:25:46,756 --> 00:25:48,686
你的代码看起来更加的清晰生动了


756
00:25:49,506 --> 00:25:51,386
你还可以看到我们在这里面


757
00:25:51,426 --> 00:25:53,766
增加了对 斜体 粗体 以及


758
00:25:53,766 --> 00:25:55,416
代码语音上的支持


759
00:25:56,326 --> 00:25:57,296
你还将发现


760
00:25:57,296 --> 00:25:58,646
当你添加文本的时候


761
00:25:58,646 --> 00:26:00,856
他会自动地在你添加完成后


762
00:26:00,856 --> 00:26:02,976
补上可能缺少的参数


763
00:26:03,516 --> 00:26:09,556
[掌声]


764
00:26:10,056 --> 00:26:10,926
更好的是帮助你


765
00:26:10,926 --> 00:26:12,826
保持你的备注文本部分和代码部分可以同步


766
00:26:13,066 --> 00:26:14,126
你会发现当我改了这儿以后


767
00:26:14,126 --> 00:26:15,676
在这个参数应用的范围内同时地都进行了修改


768
00:26:16,516 --> 00:26:21,626
[掌声]


769
00:26:22,126 --> 00:26:23,206
现在 我们还想


770
00:26:23,206 --> 00:26:24,336
提供更多的功能


771
00:26:24,336 --> 00:26:25,376
去帮助你追踪你的修改


772
00:26:26,166 --> 00:26:27,476
如果我想查看


773
00:26:27,476 --> 00:26:29,286
这个文件所有的修改


774
00:26:29,286 --> 00:26:30,596
可以打开这个全新的


775
00:26:30,596 --> 00:26:32,126
Source Control History Inspector


776
00:26:32,156 --> 00:26:33,196
这里可以显示所有


777
00:26:33,196 --> 00:26:34,406
我对这个文件进行的修改


778
00:26:34,406 --> 00:26:35,626
而且我可以快速的跳到任一个提交位置


779
00:26:35,626 --> 00:26:37,066
并且 由于它在检查器里


780
00:26:37,066 --> 00:26:38,336
所以它适用于你项目中的


781
00:26:38,336 --> 00:26:39,816
任何一种文件类型


782
00:26:40,866 --> 00:26:42,776
为了帮助你查看


783
00:26:42,776 --> 00:26:44,376
在本地发生的修改操作


784
00:26:44,376 --> 00:26:45,076
我们还改进了 change bar 这个部分


785
00:26:45,846 --> 00:26:46,746
当我悬停在 change bar 上面


786
00:26:46,746 --> 00:26:48,356
它会显示出在本地发生的修改


787
00:26:48,666 --> 00:26:49,756
但是更进一步的是


788
00:26:49,756 --> 00:26:51,626
现在我可以让显示出我修改前的代码


789
00:26:51,626 --> 00:26:52,926
这是一种快速片段式呈现


790
00:26:53,516 --> 00:26:58,916
[掌声]


791
00:26:59,416 --> 00:27:01,176
因为这是实时动态的


792
00:27:01,266 --> 00:27:04,976
所以当我输入的时候它会还原到最新的状态


793
00:27:05,796 --> 00:27:07,006
上述这些只是


794
00:27:07,006 --> 00:27:08,286
Xcode 11 当中的


795
00:27:08,286 --> 00:27:09,696
Source Editor 的特色功能的一部分


796
00:27:11,516 --> 00:27:17,836
[掌声]


797
00:27:18,336 --> 00:27:20,106
我们继续 测试是开发工作流当中的


798
00:27:20,106 --> 00:27:21,046
另一个关键部分


799
00:27:21,536 --> 00:27:23,346
并且 Xcode 当中已经


800
00:27:23,346 --> 00:27:25,086
为各位开发者编写测试提供了很强大的支持


801
00:27:25,086 --> 00:27:26,716
我想你们都知道的 对吧


802
00:27:26,976 --> 00:27:28,346
因为想必你们已经编写过很多的测试了


803
00:27:28,346 --> 00:27:28,546
>> 是的


804
00:27:28,816 --> 00:27:28,976
>> 的确


805
00:27:30,046 --> 00:27:30,686
>> 太棒了


806
00:27:30,686 --> 00:27:31,886
我想听到的就是这个


807
00:27:32,536 --> 00:27:33,846
现在 你可能不知道的是


808
00:27:33,846 --> 00:27:35,356
Xcode 现在可以为你的测试做到更多


809
00:27:35,356 --> 00:27:37,016
它通过使用 Runtime Issues


810
00:27:37,016 --> 00:27:38,386
Runtime Sanitizers 和 Location Simulation


811
00:27:38,776 --> 00:27:40,846
等出色的工具来做更多的工作


812
00:27:41,246 --> 00:27:42,566
我们每年都在增加更多的功能


813
00:27:43,486 --> 00:27:44,886
有了这么多的选择后


814
00:27:44,886 --> 00:27:46,296
我们缺失的是


815
00:27:46,296 --> 00:27:49,176
一种把他们集合在一起并行使用的方法


816
00:27:49,906 --> 00:27:51,736
为了实现这件事 我们添加了 Test Plans


817
00:27:53,486 --> 00:27:54,526
Test Plans 的强大之处在于


818
00:27:54,626 --> 00:27:56,396
它可以让你在许多配置中


819
00:27:56,396 --> 00:27:57,496
运行你的测试


820
00:27:58,556 --> 00:27:59,876
只需要一些简单的选择


821
00:27:59,876 --> 00:28:02,266
你就可以快速地给全世界的使用者开展测试


822
00:28:03,266 --> 00:28:04,386
而且这些配置对于


823
00:28:04,456 --> 00:28:05,596
捕捉 App Store 内的屏幕快照


824
00:28:05,596 --> 00:28:07,266
或者收集你的定位器中的详细信息而言


825
00:28:07,266 --> 00:28:09,036
都是非常完美的


826
00:28:10,056 --> 00:28:11,886
为这个消息鼓掌吧 这的确是一件大事


827
00:28:12,516 --> 00:28:16,706
[掌声]


828
00:28:17,206 --> 00:28:18,566
通过添加


829
00:28:18,566 --> 00:28:20,196
其他的诊断 工具和参数


830
00:28:20,196 --> 00:28:22,356
你就可以从各个角度来查看你的 App


831
00:28:23,356 --> 00:28:24,786
现在你的测试的覆盖率更广了


832
00:28:24,856 --> 00:28:25,986
当你在很多的硬件设备


833
00:28:26,086 --> 00:28:28,066
以及操作系统上进行组合测试时


834
00:28:28,066 --> 00:28:30,036
你可以得到一个全面的综合的视图


835
00:28:30,036 --> 00:28:32,006
来告诉你 你的 App 的运行情况


836
00:28:32,006 --> 00:28:34,576
现在 对于这种规模的测试


837
00:28:34,616 --> 00:28:36,196
Test Plans 可以与


838
00:28:36,196 --> 00:28:38,026
Xcode Server 完美地协调工作


839
00:28:38,026 --> 00:28:40,366
充分利用新 Mac Pro 的优点


840
00:28:40,366 --> 00:28:41,226
来进行 Xcode 在模拟器和


841
00:28:41,316 --> 00:28:43,356
设备上的新的并行测试


842
00:28:44,436 --> 00:28:45,756
Test Plans 带来的效果是


843
00:28:45,756 --> 00:28:47,326
现在你可以用一个指令


844
00:28:47,326 --> 00:28:49,196
来为 App 执行所有测试


845
00:28:49,896 --> 00:28:51,096
这是一个很大的进步


846
00:28:52,516 --> 00:28:58,556
[掌声]


847
00:28:59,056 --> 00:29:01,376
现在 经常做测试和调试的时候


848
00:29:01,376 --> 00:29:02,696
都是有必要复制用户场景的


849
00:29:03,106 --> 00:29:04,286
现在我们全新的 Device Conditions


850
00:29:04,676 --> 00:29:07,276
可以回应这一需求 现在 你可以为设备上的


851
00:29:07,276 --> 00:29:08,426
网络吞吐量和发热状态


852
00:29:08,426 --> 00:29:10,046
设置不同的状态


853
00:29:10,046 --> 00:29:12,316
并查看你的 App 是如何响应的


854
00:29:13,216 --> 00:29:14,226
不过请放心


855
00:29:14,226 --> 00:29:15,636
这些实际上都是模拟的


856
00:29:15,816 --> 00:29:16,696
我们并不会


857
00:29:16,696 --> 00:29:17,856
让你的硬件设备跑出一个超高的温度


858
00:29:19,006 --> 00:29:20,726
你可以在 Xcode 的 Devices 窗口里


859
00:29:20,726 --> 00:29:21,926
启用这些条件


860
00:29:22,276 --> 00:29:23,376
当条件激活时


861
00:29:23,376 --> 00:29:24,946
设备上会显示出一个横幅


862
00:29:25,816 --> 00:29:26,766
你可以点击横幅


863
00:29:26,766 --> 00:29:28,976
来禁用这些条件


864
00:29:28,976 --> 00:29:30,166
当你断开设备连接时


865
00:29:30,166 --> 00:29:32,076
Xcode 将自动终止这些条件


866
00:29:33,976 --> 00:29:34,976
现在对于你将要


867
00:29:34,976 --> 00:29:36,576
进行的所有测试我们还改良提升了


868
00:29:36,576 --> 00:29:37,776
我们还改良提升了 Result Bundles


869
00:29:37,866 --> 00:29:39,256
现在它已经独立了出来


870
00:29:39,826 --> 00:29:41,066
无论是在 Xcode 中创建的测试


871
00:29:41,066 --> 00:29:42,416
还是用命令行中创建的测试


872
00:29:42,416 --> 00:29:43,786
你现在都可以通过邮件来分享它们


873
00:29:43,786 --> 00:29:45,056
把它们附到 Bug 上


874
00:29:45,056 --> 00:29:46,236
然后双击它们


875
00:29:46,236 --> 00:29:48,706
就能在 Xcode 中打开它们并查看细节


876
00:29:49,516 --> 00:29:56,176
[掌声]


877
00:29:56,676 --> 00:29:59,176
现在 为了帮助你进一步改进你的 App


878
00:29:59,176 --> 00:30:01,276
我们引入了两个新的反馈工具


879
00:30:02,246 --> 00:30:04,336
首先是为 iOS 和 iPadOS 中的


880
00:30:04,366 --> 00:30:06,966
App 引入了 App Metrics 即 App 性能指标


881
00:30:08,426 --> 00:30:09,766
当用户选择共享分析时


882
00:30:09,766 --> 00:30:11,176
你会收到匿名的


883
00:30:11,176 --> 00:30:13,226
电池寿命 启动时间


884
00:30:13,226 --> 00:30:15,886
内存占用等各项指标的数据


885
00:30:16,806 --> 00:30:18,106
这些指标与


886
00:30:18,106 --> 00:30:19,376
崩溃和能量日志


887
00:30:19,656 --> 00:30:21,436
一起聚合并显示在 Organizer 里面


888
00:30:21,536 --> 00:30:22,706
这是一种很好的方法


889
00:30:22,706 --> 00:30:23,916
可以助你监视和改进每次构建出来的


890
00:30:23,916 --> 00:30:25,726
App 的性能


891
00:30:27,226 --> 00:30:28,776
这些打包在一起的度量数据


892
00:30:28,776 --> 00:30:29,876
我们从春天的


893
00:30:29,966 --> 00:30:32,396
iOS 12.2 版本就开始收集了


894
00:30:32,506 --> 00:30:33,556
所以你的很多 App


895
00:30:33,556 --> 00:30:35,136
现在应该已经有数据可供你查看了


896
00:30:36,626 --> 00:30:37,636
另外一个重要的


897
00:30:37,636 --> 00:30:39,016
反馈来源就是


898
00:30:39,016 --> 00:30:40,816
直接来自于你的用户


899
00:30:40,816 --> 00:30:42,416
现在 TestFlight App 允许用户分享他们的想法


900
00:30:43,936 --> 00:30:45,286
TestFlight App 将自动地


901
00:30:45,286 --> 00:30:46,756
启用用户反馈功能


902
00:30:47,796 --> 00:30:49,316
当用户在你的 App 中弄了一个屏幕快照后


903
00:30:49,316 --> 00:30:50,156
他们现在有了一个新的选项


904
00:30:50,156 --> 00:30:52,066
来分享他对 beta 版的反馈


905
00:30:52,066 --> 00:30:53,976
还可以添加评论


906
00:30:54,516 --> 00:31:00,876
[掌声]


907
00:31:01,376 --> 00:31:02,866
现在 你可以在


908
00:31:02,866 --> 00:31:04,286
App Store Connect 当中


909
00:31:04,286 --> 00:31:05,616
查看所有的反馈


910
00:31:05,616 --> 00:31:06,526
并为 Bug 追踪系统下载所有的细节


911
00:31:08,746 --> 00:31:10,286
今天讲到的所有的特性


912
00:31:10,366 --> 00:31:12,086
都只是这一版 Xcode


913
00:31:12,086 --> 00:31:13,326
中的一小部分


914
00:31:13,326 --> 00:31:14,966
它集合了 Swift 和 SDK


915
00:31:14,966 --> 00:31:16,756
以及我们所有工具的创新


916
00:31:17,546 --> 00:31:18,646
所有这些都能帮助你


917
00:31:18,646 --> 00:31:20,296
比以往更快地做好工作


918
00:31:20,996 --> 00:31:21,976
这就是 Xcode 11


919
00:31:22,516 --> 00:31:30,906
[掌声]


920
00:31:31,406 --> 00:31:32,086
>> 现在我想再把


921
00:31:32,156 --> 00:31:33,476
Sebastien 邀请请上台


922
00:31:33,476 --> 00:31:34,406
来告诉我们更多关于 Apple 平台的东西


923
00:31:34,876 --> 00:31:35,276
Sebastien


924
00:31:36,121 --> 00:31:38,121
[掌声]


925
00:31:38,226 --> 00:31:39,096
>> 谢谢 Matthew


926
00:31:39,796 --> 00:31:41,106
是不是十分的振奋人心


927
00:31:42,436 --> 00:31:43,956
这些功能的确非常非常棒


928
00:31:43,956 --> 00:31:46,556
可以帮助你们构建更好的 App


929
00:31:46,906 --> 00:31:48,446
现在我们把话题转回到我们的平台


930
00:31:48,866 --> 00:31:49,886
当然 我们的平台


931
00:31:49,886 --> 00:31:51,356
本身就是为提供良好的体验


932
00:31:51,356 --> 00:31:53,276
而量身定制的 并且


933
00:31:53,276 --> 00:31:54,536
平台本身就能体现出来


934
00:31:54,536 --> 00:31:56,306
它们独一无二的使用方式


935
00:31:56,946 --> 00:31:58,186
我们今年想要做的


936
00:31:58,186 --> 00:31:59,536
就是让每个平台可以更加独一无二


937
00:31:59,896 --> 00:32:00,836
我们接下来就深入到


938
00:32:01,186 --> 00:32:03,366
macOS 当中 并且给各位开发者展示下


939
00:32:03,366 --> 00:32:05,226
我们在其中做了些什么革新


940
00:32:05,786 --> 00:32:09,126
macOS Catalina 是一款很棒的桌面操作系统


941
00:32:09,126 --> 00:32:10,616
它拥有一系列


942
00:32:10,616 --> 00:32:12,476
令人瞩目的新功能


943
00:32:12,536 --> 00:32:14,386
比如说屏幕使用时间功能以及全新的音乐 App


944
00:32:14,386 --> 00:32:16,616
并且 Mac 还有了


945
00:32:16,716 --> 00:32:17,986
一个很大生产力方面的特性的提升


946
00:32:18,086 --> 00:32:20,936
那就是加入了 Sidecar 功能 


947
00:32:20,936 --> 00:32:22,976
我相信我们都会喜欢上 Sidecar 的 对吧


948
00:32:23,516 --> 00:32:26,566
[掌声]


949
00:32:27,066 --> 00:32:28,696
谢谢大家 好了 Mac 拥有超过 1 亿的


950
00:32:28,726 --> 00:32:30,916
活跃用户


951
00:32:31,256 --> 00:32:33,176
它是一个充满活力的平台


952
00:32:33,276 --> 00:32:34,636
拥有丰富的 App 生态系统


953
00:32:34,746 --> 00:32:37,006
Mac 生态系统中充满了


954
00:32:37,006 --> 00:32:38,646
很多强大的专有的 App


955
00:32:38,646 --> 00:32:40,856
这些 App 是你们使用 AppKit 框架创建的


956
00:32:40,856 --> 00:32:43,876
一个很好的例子就是这款 Pixelmator Pro


957
00:32:44,946 --> 00:32:46,076
现如今 AppKit 已经成为了一个非常


958
00:32:46,186 --> 00:32:47,716
强大的框架 它的存在使得


959
00:32:47,716 --> 00:32:48,626
各位可以调动起 Mac 的全部功能


960
00:32:48,896 --> 00:32:50,766
但是我们还发现


961
00:32:50,766 --> 00:32:52,146
有许多为 iPad 提供的 App


962
00:32:52,146 --> 00:32:53,906
如果把它们放到 Mac 上


963
00:32:53,986 --> 00:32:55,886
去运行的话 将会是相当好的一件事


964
00:32:55,886 --> 00:32:57,786
但是 开发者并不是总有时间


965
00:32:57,786 --> 00:32:58,476
运用 AppKit 去把这些 App 移植到 Mac 上


966
00:32:59,226 --> 00:33:01,096
所以今年 我们引入了


967
00:33:01,096 --> 00:33:02,826
一项新的技术手段


968
00:33:02,826 --> 00:33:04,426
可以让你用最小的代价


969
00:33:04,426 --> 00:33:05,756
就把 iPadOS 上的 App


970
00:33:05,756 --> 00:33:07,116
带到 Mac 上 成为


971
00:33:07,116 --> 00:33:08,696
一款 Mac 上的原生


972
00:33:09,736 --> 00:33:16,256
我们—— 你能把幻灯片往回退两页么


973
00:33:16,446 --> 00:33:16,646
不好意思啊


974
00:33:20,046 --> 00:33:21,506
再退回去一张 好了


975
00:33:22,466 --> 00:33:23,936
对于 Mac 来说


976
00:33:23,936 --> 00:33:26,086
这是进入全球最大的


977
00:33:26,086 --> 00:33:27,556
App 生态当中的的一个巨大机遇


978
00:33:28,186 --> 00:33:29,716
iPad 上有


979
00:33:29,716 --> 00:33:31,806
超过 100 万个 App


980
00:33:31,806 --> 00:33:33,386
我们认为其中很多移植到 Mac 上也会有


981
00:33:33,386 --> 00:33:34,306
很出色的表现


982
00:33:35,606 --> 00:33:37,176
现在为了实现这件事


983
00:33:37,176 --> 00:33:38,566
我们已经将超过 40 个框架和库


984
00:33:38,566 --> 00:33:40,176
从 iOS 上移植到了 Mac 上


985
00:33:40,346 --> 00:33:42,556
如果你现在是一名 iOS 开发人员


986
00:33:42,666 --> 00:33:43,876
并且从未开发过 Mac 上的 App


987
00:33:44,136 --> 00:33:45,376
想必你将会非常喜欢现在


988
00:33:45,376 --> 00:33:47,006
两个平台上面


989
00:33:47,246 --> 00:33:48,946
都有了相同的 API


990
00:33:49,496 --> 00:33:50,426
事实上 我们已经


991
00:33:50,426 --> 00:33:53,516
提供了几乎所有的 iOS 上的 API


992
00:33:53,516 --> 00:33:54,686
只有少数例外的独特的移动方面的功能


993
00:33:54,686 --> 00:33:57,066
没有被移植上去


994
00:33:58,066 --> 00:34:00,016
现在 我们通过将


995
00:34:00,016 --> 00:34:01,556
UIKit 适配成一个本地框架来实现这一点


996
00:34:01,896 --> 00:34:03,596
这使得 iPad App 可以在 Mac 上运行


997
00:34:03,596 --> 00:34:05,746
而且感觉就像平台上的其他 App


998
00:34:05,746 --> 00:34:08,065
一样快速流畅


999
00:34:09,335 --> 00:34:10,795
通过将 UIKit 直接


1000
00:34:10,795 --> 00:34:13,085
集成到 macOS 当中


1001
00:34:13,085 --> 00:34:14,835
许多基本功能都会是自动的


1002
00:34:15,585 --> 00:34:16,775
你不需要多做任何额外的操作


1003
00:34:16,775 --> 00:34:18,386
很多的 Mac 桌面以及窗口方面的功能


1004
00:34:18,656 --> 00:34:20,156
都会自动帮你适配


1005
00:34:21,096 --> 00:34:22,335
并且 我们还为你适配了


1006
00:34:22,335 --> 00:34:24,275
许多 Mac 平台独有的功能


1007
00:34:24,275 --> 00:34:26,326
像是键盘触控以及鼠标输入等等


1008
00:34:26,326 --> 00:34:28,166
这样可以节省下相当巨大的工作量


1009
00:34:28,166 --> 00:34:29,846
并且给你的开发提供了一个无与伦比的开端


1010
00:34:30,505 --> 00:34:32,326
我们已经花了很多年


1011
00:34:32,396 --> 00:34:33,815
来研究这项技术


1012
00:34:33,815 --> 00:34:35,065
并且我们把他用在了


1013
00:34:35,065 --> 00:34:36,666
我们自己的 App 上


1014
00:34:36,766 --> 00:34:37,826
这样 在今年


1015
00:34:37,876 --> 00:34:39,565
我们为你们提供 macOS Catalina 版本之前


1016
00:34:39,565 --> 00:34:42,295
就可以完善这项技术并证明它的效果了


1017
00:34:43,376 --> 00:34:45,266
如果你有一个 iPadOS 上的 App


1018
00:34:45,266 --> 00:34:47,186
想要移植到 Mac 平台上将会非常的容易


1019
00:34:47,656 --> 00:34:49,346
基本上就需要 3 个步骤


1020
00:34:50,525 --> 00:34:52,916
第一步 在 Xcode 里勾选上这个复选框


1021
00:34:52,916 --> 00:34:56,031
好了 [笑声]


1022
00:34:56,045 --> 00:34:56,286
这个步骤很简单


1023
00:34:56,946 --> 00:34:58,556
之后在 Xcode 的 Project Editor 里


1024
00:34:58,556 --> 00:35:00,306
为你的项目打开对 Mac 的支持


1025
00:35:00,406 --> 00:35:00,786
这样就可以了


1026
00:35:00,876 --> 00:35:02,036
就是这么简单


1027
00:35:02,146 --> 00:35:02,916
这就是它的神奇之处


1028
00:35:03,376 --> 00:35:04,786
这样一来 一个项目及它所构建出来的 App


1029
00:35:04,786 --> 00:35:07,176
就可以同时应用到三个平台上面了


1030
00:35:07,736 --> 00:35:08,716
当你在源代码中进行修改的时候


1031
00:35:08,716 --> 00:35:12,056
所有为三个平台搭建的 App 将自动更新


1032
00:35:13,446 --> 00:35:14,766
第二步 就是确保你的 App


1033
00:35:14,766 --> 00:35:17,296
在 iPad 上运行良好


1034
00:35:18,196 --> 00:35:20,546
更好的 iPad App


1035
00:35:20,586 --> 00:35:21,076
也会造就更好的 Mac App


1036
00:35:21,076 --> 00:35:23,056
因此 各位开发者为适配基于最新技术及优化的


1037
00:35:23,056 --> 00:35:24,616
iPad 的大尺寸屏幕


1038
00:35:24,946 --> 00:35:26,756
而做出的努力


1039
00:35:26,806 --> 00:35:29,016
可以很好地应用到 Mac 之上


1040
00:35:31,316 --> 00:35:32,816
只要你遵循着最佳操作


1041
00:35:33,216 --> 00:35:34,376
比如说让你的 iPadOS App 可以支持外接键盘


1042
00:35:34,466 --> 00:35:36,496
这样的实践也会带来


1043
00:35:36,496 --> 00:35:38,036
更丰富的 Mac 上的体验


1044
00:35:39,596 --> 00:35:41,146
第三步 就是利用


1045
00:35:41,146 --> 00:35:43,356
Mac 上的特定的功能


1046
00:35:44,186 --> 00:35:45,036
这一点也是你为 Mac 进行单独定制


1047
00:35:45,036 --> 00:35:47,026
并且最大化利用 Mac 上


1048
00:35:47,066 --> 00:35:48,166
典型的特有的优点的一个步骤


1049
00:35:49,086 --> 00:35:50,436
你可以利用特有的用户交互元素


1050
00:35:50,436 --> 00:35:52,626
像是完整的菜单栏以及工具栏等


1051
00:35:52,626 --> 00:35:55,306
并且如果适用于你的 App 的话


1052
00:35:55,306 --> 00:35:56,326
你还可以利用上侧边栏及其特殊的素材等等


1053
00:35:56,996 --> 00:35:58,196
现在为了给你们展示下这个有多简单


1054
00:35:58,266 --> 00:35:59,806
我想再一次把 Matthew


1055
00:35:59,806 --> 00:36:01,356
请上台来做一个 demo


1056
00:36:01,666 --> 00:36:07,946
Matthew [掌声]


1057
00:36:08,446 --> 00:36:09,106
>> 谢谢 Sebastien


1058
00:36:10,246 --> 00:36:11,186
现在我们在 iPad 模拟器里


1059
00:36:11,186 --> 00:36:13,306
运行着一个 旅行相关的 App


1060
00:36:13,886 --> 00:36:15,306
左侧这边有一个位置的列表视图


1061
00:36:15,886 --> 00:36:17,846
当我选择一个地点时地球会旋转


1062
00:36:18,646 --> 00:36:19,866
我们有一个日志记录的部分


1063
00:36:19,866 --> 00:36:21,006
我可以开始在日志上


1064
00:36:21,116 --> 00:36:22,246
记录我的旅行


1065
00:36:23,266 --> 00:36:24,336
现在 我们就按照刚 Sebastien 所说的


1066
00:36:24,336 --> 00:36:25,756
三个步骤 把这个 App 移植到 Mac 上吧


1067
00:36:26,756 --> 00:36:28,416
第一步 勾选复选框


1068
00:36:29,436 --> 00:36:31,236
我先退出一下这个模拟器


1069
00:36:31,236 --> 00:36:32,976
之后在对应的编辑器里面


1070
00:36:32,976 --> 00:36:35,216
勾选上 Mac 支持来启用它


1071
00:36:36,756 --> 00:36:37,686
就是这样


1072
00:36:37,686 --> 00:36:38,836
现在我就可以为 Mac 构建


1073
00:36:38,836 --> 00:36:39,616
并运行我的 App 了


1074
00:36:40,626 --> 00:36:41,846
通过勾选复选框


1075
00:36:41,846 --> 00:36:43,156
我们把 Mac 添加成了一个目的平台


1076
00:36:43,606 --> 00:36:44,786
就像我可以为我的 App


1077
00:36:44,786 --> 00:36:46,286
在硬件设备和模拟器之间进行选择一样


1078
00:36:46,286 --> 00:36:47,706
现在我可以选择 Mac 来运行它了


1079
00:36:48,816 --> 00:36:49,546
现在他就是一款 Mac App 了


1080
00:36:50,346 --> 00:36:52,486
左面是列表视图


1081
00:36:52,486 --> 00:36:54,536
点击选择一个目的地 之后从这儿登录


1082
00:36:55,516 --> 00:37:02,066
[掌声]


1083
00:37:02,566 --> 00:37:03,716
我知道 这个复选框提供的功能真的很强大


1084
00:37:03,716 --> 00:37:06,826
好了 下面我们进入到第二个步骤


1085
00:37:06,886 --> 00:37:08,266
制作一个良好的 iPad App


1086
00:37:09,376 --> 00:37:10,786
我还没有为我的列表视图


1087
00:37:10,786 --> 00:37:12,426
实现任何操作


1088
00:37:12,426 --> 00:37:13,776
比如说添加到收藏或者是分享之类的


1089
00:37:14,686 --> 00:37:15,636
当我在 iPad 上实现这些功能时


1090
00:37:15,846 --> 00:37:16,656
它们会在 Mac 上


1091
00:37:16,736 --> 00:37:17,896
显示成一个 context menu


1092
00:37:18,666 --> 00:37:19,326
这将会是一个双赢的交互方式


1093
00:37:20,376 --> 00:37:22,076
所以我退出这个 Mac App


1094
00:37:22,076 --> 00:37:23,606
切换到侧边栏控制器


1095
00:37:23,606 --> 00:37:25,246
之后我就添加一个


1096
00:37:25,246 --> 00:37:26,676
表格视图委托的方法


1097
00:37:26,676 --> 00:37:27,796
好为表中每个项目都设置好菜单的格式


1098
00:37:29,216 --> 00:37:30,846
好了 我们进入到第三步


1099
00:37:31,956 --> 00:37:33,556
我希望我的 Mac App 的


1100
00:37:33,556 --> 00:37:34,676
侧边栏可以是活力动态的


1101
00:37:35,586 --> 00:37:36,626
这个变化不会自动地被配置上去


1102
00:37:36,666 --> 00:37:37,666
因为这件事需要


1103
00:37:37,666 --> 00:37:38,926
开发者去检查


1104
00:37:38,926 --> 00:37:39,886
以确保效果是合适的


1105
00:37:40,746 --> 00:37:41,856
当你发现它是想要的


1106
00:37:41,856 --> 00:37:43,526
只需要一行简单的代码


1107
00:37:43,526 --> 00:37:45,906
就可以设置上侧边栏的背景样式了


1108
00:37:47,536 --> 00:37:48,916
好了 对于我们最后要做的更改


1109
00:37:48,916 --> 00:37:50,906
就是添加一个菜单栏


1110
00:37:51,806 --> 00:37:53,706
现在在 storyboard 这里


1111
00:37:53,706 --> 00:37:56,376
我打开库之后找一下菜单


1112
00:37:57,246 --> 00:37:58,516
我将抓取一个主菜单


1113
00:37:58,516 --> 00:38:00,036
之后把它拖到 storyboard 里


1114
00:38:00,716 --> 00:38:01,966
之后点开 File 菜单


1115
00:38:03,306 --> 00:38:04,476
我想在这里面添加一个菜单指令


1116
00:38:04,476 --> 00:38:06,126
是用于登录操作的


1117
00:38:06,746 --> 00:38:07,626
我们就给它起名叫 Login 吧


1118
00:38:08,366 --> 00:38:09,416
再给他配上一个快捷键组合


1119
00:38:09,416 --> 00:38:10,046
就是同时按下 Command 和 L


1120
00:38:10,856 --> 00:38:12,066
现在我只需要将


1121
00:38:12,146 --> 00:38:14,156
菜单项连接到


1122
00:38:14,426 --> 00:38:15,836
我的登录操作上就行了


1123
00:38:16,886 --> 00:38:18,146
好的 这样就可以了


1124
00:38:18,436 --> 00:38:19,726
让我们构建并运行我们刚做的修改吧


1125
00:38:20,656 --> 00:38:22,006
我将暂时隐藏下 Xcode


1126
00:38:22,246 --> 00:38:23,696
这样我们就能


1127
00:38:23,806 --> 00:38:24,906
看到我们的 App 了


1128
00:38:25,936 --> 00:38:28,116
现在我们有了动态的侧边栏


1129
00:38:28,656 --> 00:38:29,856
当我选中一项以后


1130
00:38:29,856 --> 00:38:32,026
我可以打开一个 context menu


1131
00:38:32,056 --> 00:38:34,216
在 File 菜单里


1132
00:38:34,496 --> 00:38:35,186
现在也有了登录的操作


1133
00:38:36,046 --> 00:38:37,806
所以就这样 三个简单的步骤


1134
00:38:38,516 --> 00:38:45,266
[掌声]


1135
00:38:45,766 --> 00:38:46,856
只需三个简单的步骤就可以


1136
00:38:46,856 --> 00:38:48,666
把我们的 App 带到 Mac 平台上


1137
00:38:48,666 --> 00:38:49,996
并且可以为我们的用户提供良好的用户体验


1138
00:38:50,446 --> 00:38:51,206
你来继续吧 Sebastien


1139
00:38:52,041 --> 00:38:54,041
[掌声]


1140
00:38:54,066 --> 00:38:54,646
>> 谢谢 Matthew


1141
00:38:55,266 --> 00:38:56,246
这真的是令人难以置信


1142
00:38:56,486 --> 00:38:58,616
这难道不会让各位开发者想要去尝试一下么


1143
00:38:59,396 --> 00:39:01,336
好吧 实际上


1144
00:39:01,336 --> 00:39:02,786
在过去的几周里


1145
00:39:02,786 --> 00:39:05,256
我们已经邀请过一些开发人员来进行了尝试


1146
00:39:05,456 --> 00:39:06,576
他们在短短几周内取得的成果


1147
00:39:06,636 --> 00:39:09,276
真的令人印象深刻


1148
00:39:09,746 --> 00:39:11,116
这是他们成功地将 iPad App


1149
00:39:11,116 --> 00:39:13,436
运行在 Mac 上的一个例子


1150
00:39:14,606 --> 00:39:17,316
每当你做好一个 Mac App


1151
00:39:17,316 --> 00:39:18,456
将它分发给你的用户的最好方式


1152
00:39:18,456 --> 00:39:20,346
就是把它挂到 Mac 的 App Store 里


1153
00:39:21,216 --> 00:39:23,686
这里面拥有最大的 Mac App 的目录


1154
00:39:23,846 --> 00:39:25,986
它在全球 155 个国家


1155
00:39:26,146 --> 00:39:28,186
提供着服务


1156
00:39:28,246 --> 00:39:29,486
并且 Mac App Store 可以让你


1157
00:39:29,646 --> 00:39:31,206
触及到每一个 Mac 用户


1158
00:39:31,906 --> 00:39:34,156
现在我们还让用户


1159
00:39:34,156 --> 00:39:35,556
可以灵活地选择


1160
00:39:35,556 --> 00:39:36,726
以什么样的方式来


1161
00:39:36,726 --> 00:39:38,336
下载他们想要的 App


1162
00:39:38,336 --> 00:39:39,336
并且还能同时帮助他们免受恶意软件的攻击


1163
00:39:39,856 --> 00:39:41,056
在 macOS Catalina 这一版本中


1164
00:39:41,526 --> 00:39:42,656
Gatekeeper 会验证你从网上


1165
00:39:42,656 --> 00:39:43,576
下载下来并运行的 App


1166
00:39:43,576 --> 00:39:45,426
就在你初次运行 App 的时候


1167
00:39:45,656 --> 00:39:47,496
并且后期会定期验证它们


1168
00:39:47,496 --> 00:39:49,596
以此来确定它不是已知的恶意软件


1169
00:39:50,556 --> 00:39:51,536
这是通过要求开发者们


1170
00:39:51,536 --> 00:39:52,816
使用我们去年发布的


1171
00:39:52,816 --> 00:39:54,556
新 App 以及 App 升级的公证服务


1172
00:39:54,556 --> 00:39:57,716
公证服务来实现的


1173
00:39:58,286 --> 00:40:00,336
这样你和你的用户


1174
00:40:00,336 --> 00:40:01,816
就可以安全地从


1175
00:40:01,816 --> 00:40:03,716
Mac App Store 以及网络上下载 App 了


1176
00:40:04,736 --> 00:40:07,076
公证已经被广泛的采用于多个方面


1177
00:40:07,636 --> 00:40:09,416
它既简单又高速 超过 98% 的提交申请


1178
00:40:09,416 --> 00:40:12,936
会在 15 分钟内就给出结果


1179
00:40:13,956 --> 00:40:15,656
现在说到安全


1180
00:40:15,656 --> 00:40:16,836
我们还在持续投资着 macOS


1181
00:40:16,896 --> 00:40:18,726
的基础建设


1182
00:40:18,726 --> 00:40:20,486
并且我们主要着眼于三个领域


1183
00:40:21,696 --> 00:40:23,106
首先是一项新的技术


1184
00:40:23,106 --> 00:40:24,746
名为 DriverKit 


1185
00:40:24,746 --> 00:40:26,106
它允许你将内核的扩展部分


1186
00:40:26,106 --> 00:40:28,056
从内核里转移到用户存储空间之中


1187
00:40:28,666 --> 00:40:31,116
通过将这些驱动


1188
00:40:31,116 --> 00:40:33,336
和拓展程序转换成用户进程来运行


1189
00:40:33,336 --> 00:40:35,256
我们可以为所有的 macOS 用户


1190
00:40:35,256 --> 00:40:36,156
提高系统的稳定性


1191
00:40:37,266 --> 00:40:38,586
我们确定了过去


1192
00:40:38,586 --> 00:40:39,976
最常见的需要进行


1193
00:40:39,976 --> 00:40:41,206
内核扩展的用例


1194
00:40:41,206 --> 00:40:42,756
现在 我们在


1195
00:40:42,786 --> 00:40:45,376
macOS Catalina 中为其中超过


1196
00:40:45,626 --> 00:40:46,706
75% 的用例提供了一个用户空间替代方案


1197
00:40:47,616 --> 00:40:48,926
我们鼓励你采用 DriverKit


1198
00:40:49,006 --> 00:40:50,746
因为 macOS 的未来版本


1199
00:40:50,746 --> 00:40:53,716
将不再运行这些类型的内核扩展了


1200
00:40:54,216 --> 00:40:57,106
接下来 我们将通过把


1201
00:40:57,106 --> 00:40:58,886
macOS 的系统卷变成只读的


1202
00:40:58,986 --> 00:41:00,736
来提高它的稳定性


1203
00:41:01,596 --> 00:41:02,426
它是这样工作的


1204
00:41:03,146 --> 00:41:04,726
现在的情况是只用一个单独的卷


1205
00:41:04,726 --> 00:41:06,416
其中包含了 用户数据 App


1206
00:41:06,816 --> 00:41:07,836
以及操作系统


1207
00:41:08,526 --> 00:41:09,706
现在 为了进一步隔离 macOS 的变化


1208
00:41:09,706 --> 00:41:11,726
Mac 将会被分为


1209
00:41:11,726 --> 00:41:13,616
两个逻辑卷


1210
00:41:14,576 --> 00:41:15,806
一个用于只读的


1211
00:41:15,876 --> 00:41:17,746
操作系统文件


1212
00:41:18,006 --> 00:41:20,286
另一个用于用户数据和 App


1213
00:41:21,051 --> 00:41:23,051
[掌声]


1214
00:41:23,086 --> 00:41:23,296
就是这样


1215
00:41:24,126 --> 00:41:26,126
[掌声]


1216
00:41:26,236 --> 00:41:27,306
这将进一步保护


1217
00:41:27,306 --> 00:41:28,736
系统不受变化的影响


1218
00:41:29,006 --> 00:41:30,956
增加稳定性


1219
00:41:30,956 --> 00:41:32,706
并在未来为我们提供安全方面的好处


1220
00:41:33,286 --> 00:41:34,716
现在 在座的一些开发者


1221
00:41:34,716 --> 00:41:36,476
可能已经在内心底为自己的


1222
00:41:36,476 --> 00:41:37,826
App 或者是安装程序做了一个预设


1223
00:41:37,826 --> 00:41:39,786
想要检查下自己的 App 是不是可以


1224
00:41:39,786 --> 00:41:40,896
在 macOS Catalina 无缝衔接的直接运行


1225
00:41:42,286 --> 00:41:44,436
所以 最后呢 我们增强了


1226
00:41:44,436 --> 00:41:45,136
App 及其数据保护


1227
00:41:45,816 --> 00:41:47,816
我们在过去几年里


1228
00:41:47,816 --> 00:41:48,996
添加了一些额外的


1229
00:41:48,996 --> 00:41:50,646
数据保护类别


1230
00:41:50,646 --> 00:41:52,186
以便用户可以掌控


1231
00:41:52,186 --> 00:41:54,676
哪些 App 可以接入他们的重要文件


1232
00:41:54,676 --> 00:41:57,246
比如个人照片 或是敏感传感器


1233
00:41:57,336 --> 00:41:59,246
像是 Mac 上的


1234
00:41:59,246 --> 00:42:01,046
摄像头或是麦克风


1235
00:42:01,596 --> 00:42:03,496
在 macOS Catalina 这一版本里


1236
00:42:03,496 --> 00:42:05,116
我们继续了这项工作


1237
00:42:05,116 --> 00:42:06,736
以确保 App 在捕获


1238
00:42:06,736 --> 00:42:08,356
输入事件前获得了用户的许可


1239
00:42:08,356 --> 00:42:10,786
就比如像按键或者是屏幕录制这样的事件


1240
00:42:14,046 --> 00:42:15,636
我们还将保护好用户


1241
00:42:15,636 --> 00:42:17,266
在 Mac 上的数据


1242
00:42:17,266 --> 00:42:18,546
所以 App 必须先获得许可


1243
00:42:18,786 --> 00:42:20,116
才能访问用户


1244
00:42:20,116 --> 00:42:22,256
存放在桌面 下载


1245
00:42:22,256 --> 00:42:24,636
文件 iCloud 驱动器


1246
00:42:24,636 --> 00:42:26,316
以及外部驱动器等位置的文件


1247
00:42:27,056 --> 00:42:31,576
是的 [掌声]


1248
00:42:32,076 --> 00:42:33,196
我们真的十分激动


1249
00:42:33,196 --> 00:42:34,116
可以把这一系列的增强


1250
00:42:34,116 --> 00:42:35,476
带到 macOS Catalina 之上


1251
00:42:36,296 --> 00:42:37,766
今年 另一个有很大变化的平台


1252
00:42:37,836 --> 00:42:40,326
就是 watchOS 了


1253
00:42:40,886 --> 00:42:42,366
下面我想邀请


1254
00:42:42,366 --> 00:42:44,006
Lori 上台来为大家介绍更多内容


1255
00:42:44,056 --> 00:42:47,666
Lori [掌声]


1256
00:42:48,166 --> 00:42:48,786
>> 谢谢 Sebastien


1257
00:42:50,056 --> 00:42:52,056
[掌声]


1258
00:42:52,096 --> 00:42:53,126
今天早上 我们介绍了一些


1259
00:42:53,186 --> 00:42:54,656
watchOS 6 当中的一些很酷的新特性


1260
00:42:54,656 --> 00:42:56,496
包括全新的健康类的 App


1261
00:42:56,496 --> 00:42:57,976
包括像是 听力健康 经期跟踪


1262
00:42:58,036 --> 00:42:59,436
健身记录趋势


1263
00:42:59,606 --> 00:43:00,606
以及有声读物等等


1264
00:43:01,286 --> 00:43:03,236
但对于 watchOS 6 来说


1265
00:43:03,466 --> 00:43:04,956
真正的大事是


1266
00:43:04,956 --> 00:43:07,386
它现在就可以宣布从手机中


1267
00:43:07,456 --> 00:43:08,766
完全独立出来


1268
00:43:08,766 --> 00:43:10,956
打造完全专注于手表的体验


1269
00:43:11,516 --> 00:43:15,606
[掌声]


1270
00:43:16,106 --> 00:43:17,186
多亏了蜂窝网络的连接性能


1271
00:43:17,186 --> 00:43:18,326
用户们现在越来越多的


1272
00:43:18,326 --> 00:43:19,766
放下手机


1273
00:43:19,766 --> 00:43:21,366
享受着只需携带 Apple Watch


1274
00:43:21,516 --> 00:43:23,006
就可以随时保持着通讯连接的自由感


1275
00:43:23,566 --> 00:43:25,116
从外出溜达到跑步训练


1276
00:43:25,166 --> 00:43:26,596
从听音乐


1277
00:43:26,596 --> 00:43:27,696
到和朋友聊天


1278
00:43:28,146 --> 00:43:29,996
我们希望所有的用户都能


1279
00:43:29,996 --> 00:43:32,206
毫无限制的享受 Apple Watch 带来的绝佳体验


1280
00:43:32,606 --> 00:43:34,956
独立的手表专用 App 使这一切成为可能


1281
00:43:36,606 --> 00:43:38,106
我们已经


1282
00:43:38,146 --> 00:43:39,326
很认真地观察了


1283
00:43:39,456 --> 00:43:41,016
开发 Apple Watch App 所面临的挑战


1284
00:43:41,116 --> 00:43:42,916
我们希望不仅仅为开发者带来新的 API


1285
00:43:42,916 --> 00:43:44,066
来支持独立的体验


1286
00:43:44,066 --> 00:43:46,056
我们还希望能够


1287
00:43:46,056 --> 00:43:47,616
彻底的改变


1288
00:43:47,666 --> 00:43:49,716
Apple Watch 开发者的体验


1289
00:43:52,156 --> 00:43:53,866
如果我告诉你 现在你可以


1290
00:43:53,866 --> 00:43:55,786
开发一款专门只为手表而做的 App


1291
00:43:56,026 --> 00:43:57,246
你会怎么考虑呢


1292
00:43:59,286 --> 00:44:00,316
如果你有一个很棒的点子


1293
00:44:00,376 --> 00:44:01,926
它是一个仅能在手表上运行的独特体验的话


1294
00:44:02,066 --> 00:44:03,426
Xcode 现在让这件事变得轻松可得


1295
00:44:03,426 --> 00:44:05,366
就是让开发者可以开发仅用于手表的 App


1296
00:44:05,366 --> 00:44:07,306
所以现在你可以直接实现你的想法


1297
00:44:07,336 --> 00:44:09,186
而无需先建立一个 iOS App


1298
00:44:11,506 --> 00:44:13,056
不过 即便你已经有了一个


1299
00:44:13,176 --> 00:44:14,776
iOS App 你仍可以


1300
00:44:14,776 --> 00:44:16,846
让你的 App 脱离原有的束缚


1301
00:44:16,846 --> 00:44:18,266
建立成一个完全独立的 App


1302
00:44:18,266 --> 00:44:19,836
这一切都要归功于


1303
00:44:19,836 --> 00:44:21,506
我们在 watchOS 6 上做出的几项关键变化


1304
00:44:21,506 --> 00:44:24,196
它们支持了手表上的独立 App


1305
00:44:24,196 --> 00:44:25,626
使得 Apple Watch 可以作为一个独立的目标平台


1306
00:44:26,236 --> 00:44:27,306
现在 你可以选择


1307
00:44:27,356 --> 00:44:28,536
直接向手表发送推送


1308
00:44:28,656 --> 00:44:30,346
这样你就能直接


1309
00:44:30,426 --> 00:44:31,866
同时一起更新你的用户和你的 App 的数据


1310
00:44:31,946 --> 00:44:34,096
并且无需依赖手机来进行调解


1311
00:44:35,516 --> 00:44:39,796
[掌声]


1312
00:44:40,296 --> 00:44:41,596
我们还支持了 CloudKit 订阅


1313
00:44:41,636 --> 00:44:43,406
以及复杂性推送


1314
00:44:43,406 --> 00:44:45,296
来帮助你保证你的 App 处于最新状态


1315
00:44:46,576 --> 00:44:48,056
在没有 iPhone App 的前提下


1316
00:44:48,056 --> 00:44:49,696
而让用户在 iPhone 上进行登录操作


1317
00:44:49,816 --> 00:44:50,716
是一个不可取的做法


1318
00:44:50,906 --> 00:44:52,786
所以在 watchOS 6 当中


1319
00:44:52,786 --> 00:44:54,386
我们给你提供了文本区域


1320
00:44:54,386 --> 00:44:55,746
这样一来 你就可以直接在


1321
00:44:55,746 --> 00:44:57,366
Apple Watch 上提供创建账户和登录的选项了


1322
00:45:01,046 --> 00:45:01,806
如果你想让创建账户这件事


1323
00:45:01,836 --> 00:45:03,376
变得更加容易的话


1324
00:45:03,376 --> 00:45:04,696
你甚至可以直接在你的 App里


1325
00:45:04,696 --> 00:45:05,986
添加一个用 Sign in with Apple 的按钮


1326
00:45:05,986 --> 00:45:07,776
让你的用户直接用他现有的 Apple ID


1327
00:45:07,776 --> 00:45:09,236
来创建一个新的账号


1328
00:45:09,976 --> 00:45:12,226
不需要输入任何的文本或是密码


1329
00:45:13,306 --> 00:45:14,536
在 watchOS 6 里


1330
00:45:14,536 --> 00:45:15,826
我们还通过向其中引入流式音乐传输


1331
00:45:15,866 --> 00:45:18,826
解决了一个常见的手表上单独的用例


1332
00:45:19,966 --> 00:45:21,206
在 watchOS 5 当中


1333
00:45:21,256 --> 00:45:23,106
我们引入了后台音乐重放的功能


1334
00:45:24,226 --> 00:45:26,056
现在在 watchOS 6 当中


1335
00:45:26,056 --> 00:45:27,536
我们给 Apple Watch 引入了


1336
00:45:27,536 --> 00:45:29,436
3 种不同的直接播放流式音频方式


1337
00:45:29,436 --> 00:45:30,636
分别是 Network.framework


1338
00:45:31,156 --> 00:45:33,496
NSURLSessionStreamTask 以及


1339
00:45:33,496 --> 00:45:35,486
AVFoundation


1340
00:45:36,836 --> 00:45:38,046
我们还认识到


1341
00:45:38,046 --> 00:45:39,616
除了音频播放


1342
00:45:39,916 --> 00:45:41,906
锻炼和导航之外


1343
00:45:41,906 --> 00:45:43,336
还有一些用例需要让 App


1344
00:45:43,516 --> 00:45:44,436
保持运行顺序才能完成任务


1345
00:45:45,046 --> 00:45:46,856
就比如说冥想


1346
00:45:47,756 --> 00:45:49,406
在 watchOS 6 里


1347
00:45:49,406 --> 00:45:51,406
我们引入了一个全新的 Extended Runtime API 


1348
00:45:51,686 --> 00:45:53,416
以此来让更多的 App 可以


1349
00:45:53,416 --> 00:45:54,816
在用户放下手腕之后继续运行


1350
00:45:56,896 --> 00:45:58,546
这可以使用户在


1351
00:45:58,546 --> 00:46:00,586
自我护理 专注力


1352
00:46:01,076 --> 00:46:03,406
物理治疗 智能提醒


1353
00:46:03,976 --> 00:46:04,936
以及健康检测方面获得全新的体验


1354
00:46:05,866 --> 00:46:08,056
这需要大量的 API 和功能上的支持


1355
00:46:08,626 --> 00:46:10,446
如果开发者能有更多的


1356
00:46:10,506 --> 00:46:11,556
选项来创建引人注目的


1357
00:46:11,556 --> 00:46:12,646
用户界面就更好了 对吧


1358
00:46:13,946 --> 00:46:15,156
我们知道开发者们


1359
00:46:15,156 --> 00:46:17,016
多年来一直要求 Apple Watch 提供


1360
00:46:17,016 --> 00:46:17,936
更高级的 UI 框架


1361
00:46:18,616 --> 00:46:20,546
现在在 watchOS 6 里


1362
00:46:20,616 --> 00:46:21,626
利用 SwiftUI 我们有了这样的一款框架


1363
00:46:23,516 --> 00:46:27,546
[掌声]


1364
00:46:30,396 --> 00:46:31,876
同样的 可以用来定义


1365
00:46:31,876 --> 00:46:33,196
好看的用户界面的


1366
00:46:33,196 --> 00:46:34,666
声明性语言


1367
00:46:34,666 --> 00:46:36,506
也是适用于 watchOS 的 


1368
00:46:36,506 --> 00:46:37,806
也扩展了 watchOS 平台的可能性


1369
00:46:38,926 --> 00:46:40,466
从列表上的滑动删除


1370
00:46:40,866 --> 00:46:42,836
重新排序 再到 走马灯式动效


1371
00:46:43,166 --> 00:46:44,826
以及直接访问 数字表冠等等功能


1372
00:46:44,826 --> 00:46:46,626
现在比以往任何时候


1373
00:46:46,676 --> 00:46:48,156
都更容易打造一种引人注目的手表体验


1374
00:46:50,086 --> 00:46:51,096
下面就让我为大家展示一下


1375
00:46:51,096 --> 00:46:52,876
如何用 SwiftUI 来


1376
00:46:52,876 --> 00:46:54,916
实现一些独立的 App 功能吧
　　
00:47:06,196 --> 00:47:07,826
好了 现在我的模拟器里


1377
00:47:07,826 --> 00:47:08,926
运行着一款旅行类的 App


1378
00:47:08,926 --> 00:47:09,776
我已经用 SwiftUI


1379
00:47:09,776 --> 00:47:11,686
更新过它了


1380
00:47:11,686 --> 00:47:12,906
所以它看起来很不错


1381
00:47:13,246 --> 00:47:14,446
但我仍有一些工作需要做


1382
00:47:14,446 --> 00:47:16,306
因为这上面的旧版的登录按钮


1383
00:47:16,306 --> 00:47:17,686
现在还是会要求用户


1384
00:47:17,716 --> 00:47:18,526
在 iPhone 上登录


1385
00:47:19,116 --> 00:47:20,256
我的用户告诉我


1386
00:47:20,256 --> 00:47:21,116
这不是他们想要的


1387
00:47:21,116 --> 00:47:22,956
他们希望所有的事情能够全在他们的手腕上进行


1388
00:47:23,896 --> 00:47:24,436
所以我就推出这个模拟器


1389
00:47:24,476 --> 00:47:26,576
之后进到我的项目文件里


1390
00:47:27,106 --> 00:47:28,406
现在我要移动到我的 Travel Watch


1391
00:47:28,406 --> 00:47:30,436
Extension Target 这个目录下


1392
00:47:30,436 --> 00:47:32,356
并且通过勾选 Supports Running Without 


1393
00:47:32,426 --> 00:47:33,556
iOS App Installation 这个框


1394
00:47:33,646 --> 00:47:35,626
来声明这款 App 是独立于手机的


1395
00:47:37,136 --> 00:47:38,406
接下来我要进到我已经写好的


1396
00:47:38,406 --> 00:47:39,646
登录部分的视图里


1397
00:47:40,346 --> 00:47:41,406
我会继续调整我的预览


1398
00:47:42,516 --> 00:47:43,786
太好了 你可以看到


1399
00:47:43,846 --> 00:47:45,556
我有一个登录按钮 并配上了两个预览


1400
00:47:45,716 --> 00:47:47,266
上面这个是为我所用的英语


1401
00:47:47,266 --> 00:47:48,806
来设计的


1402
00:47:48,806 --> 00:47:50,006
而下面这个是为了


1403
00:47:50,006 --> 00:47:51,466
尝试着将我的 App 本地化到


1404
00:47:51,466 --> 00:47:52,666
阿拉伯语 因为阿拉伯语是从右往左书写的


1405
00:47:52,666 --> 00:47:53,566
需要单独设计一下


1406
00:47:54,736 --> 00:47:55,736
所以我要做的第一件事就是


1407
00:47:55,736 --> 00:47:57,616
给用户名按钮添加一个用于输入区域


1408
00:47:58,036 --> 00:48:00,936
然后我要把这个绑定到


1409
00:48:00,976 --> 00:48:01,126
啊


1410
00:48:03,216 --> 00:48:04,726
我的用户名状态上


1411
00:48:04,726 --> 00:48:06,606
这样的话输入区域会随着值的更新而更新


1412
00:48:07,436 --> 00:48:08,756
注意这里我把占位符的


1413
00:48:08,756 --> 00:48:10,086
文本设置成了 Username


1414
00:48:10,086 --> 00:48:11,406
这样一来 用户就知道


1415
00:48:11,476 --> 00:48:12,226
这个区域是做什么的了


1416
00:48:12,596 --> 00:48:13,916
我还把内容类型设置成了


1417
00:48:13,966 --> 00:48:15,506
Username 类型


1418
00:48:15,616 --> 00:48:17,016
这样用户名和密码自动填充功能


1419
00:48:17,216 --> 00:48:19,356
就可以在使用 continuity keyboard 的时候


1420
00:48:19,356 --> 00:48:21,906
顺利工作了 接下来 我要添加一个


1421
00:48:21,966 --> 00:48:23,206
密码区域


1422
00:48:23,206 --> 00:48:24,566
为此在这里我要使用一个 SecureField


1423
00:48:24,676 --> 00:48:27,916
这样人们就无法窃取我的密码了


1424
00:48:28,016 --> 00:48:28,916
重复一下之前的操作


1425
00:48:28,916 --> 00:48:30,676
帮这个区域的值绑定到我的密码状态上


1426
00:48:31,756 --> 00:48:34,286
我还设了一个 Password 的占位符


1427
00:48:34,286 --> 00:48:35,646
之后我把内容类型设置成 Password


1428
00:48:35,706 --> 00:48:37,966
来方便进行自动填充


1429
00:48:37,966 --> 00:48:39,826
这么一看


1430
00:48:39,826 --> 00:48:40,676
不论是英语还是阿拉伯语 它显示起来都很不错


1431
00:48:40,676 --> 00:48:41,806
并且对于阿拉伯语来说


1432
00:48:41,806 --> 00:48:42,726
它这个位置的字是从我的本地化字符串文件内


1433
00:48:42,726 --> 00:48:43,886
取出来的值


1434
00:48:43,946 --> 00:48:45,256
这里它并不是用占位符的内容的方式设上去的


1435
00:48:46,626 --> 00:48:48,676
好了 完成上面的操作后


1436
00:48:48,676 --> 00:48:50,526
接下来我先添加一个 Sign in with Apple


1437
00:48:50,526 --> 00:48:51,486
的按钮 因为我觉得


1438
00:48:51,486 --> 00:48:53,036
用户会希望设用这样的方式来登录


1439
00:48:54,716 --> 00:48:55,636
现在我把它放在顶部


1440
00:48:55,696 --> 00:48:57,356
然后添加一个分隔符


1441
00:48:57,356 --> 00:48:58,706
这样用户就可以选择


1442
00:48:58,706 --> 00:48:59,606
用他们的 Apple ID 来创建账户


1443
00:48:59,606 --> 00:49:01,926
或者为我的 App 创建


1444
00:49:01,926 --> 00:49:03,196
另外的用户名和密码


1445
00:49:03,716 --> 00:49:04,226
看起来很不错


1446
00:49:05,286 --> 00:49:06,396
最后一步是


1447
00:49:06,396 --> 00:49:08,826
到我的 HostingController 上


1448
00:49:08,826 --> 00:49:10,476
将我的 PresentationButton 的目标


1449
00:49:10,546 --> 00:49:13,466
更改为我刚创建的 Sign in 视图上


1450
00:49:13,466 --> 00:49:14,526
而不是在 iPhone 视图里的


1451
00:49:14,526 --> 00:49:16,136
Sign in 部分


1452
00:49:16,136 --> 00:49:19,236
好的 一切就都可以运行了


1453
00:49:19,236 --> 00:49:20,996
现在 我打开实时预览


1454
00:49:20,996 --> 00:49:22,006
我的所有的按钮就都是可以交互的了


1455
00:49:22,076 --> 00:49:24,726
然后当我点击注册按钮


1456
00:49:24,726 --> 00:49:26,026
我得到了我刚设计的表单


1457
00:49:26,796 --> 00:49:28,426
使用 Apple ID 注册 或者是


1458
00:49:28,426 --> 00:49:29,416
使用用户名和密码来注册


1459
00:49:29,626 --> 00:49:30,606
它看起来非常不错


1460
00:49:31,126 --> 00:49:32,576
这就是用 SwiftUI 在 Apple Watch 上


1461
00:49:32,646 --> 00:49:33,976
创建一个注册表单的方式


1462
00:49:34,516 --> 00:49:41,546
[掌声]


1463
00:49:42,046 --> 00:49:43,906
所以 这样一来开发者就有了工具


1464
00:49:43,906 --> 00:49:46,076
来建立一个伟大且独立的 Apple Watch 体验了


1465
00:49:46,666 --> 00:49:47,526
那么你打算以什么样的方式


1466
00:49:47,526 --> 00:49:50,146
把你的 Apple Watch  App 呈现给用户


1467
00:49:51,006 --> 00:49:52,606
并且可以容易被用户所接受呢


1468
00:49:54,286 --> 00:49:55,246
App Store 和 Apple Watch


1469
00:49:55,386 --> 00:49:56,516
将在 App Store 的顶层


1470
00:49:56,516 --> 00:49:58,026
通过精选


1471
00:49:58,026 --> 00:49:59,256
和编辑推荐的方式


1472
00:49:59,306 --> 00:50:01,456
来推荐优秀的独立 App


1473
00:50:02,196 --> 00:50:03,696
我们在这里强调是


1474
00:50:03,696 --> 00:50:05,166
独立的 App


1475
00:50:05,166 --> 00:50:06,706
因为这样用户就可以直接


1476
00:50:06,706 --> 00:50:08,176
下载并开始使用


1477
00:50:08,296 --> 00:50:10,376
你的优秀的 App


1478
00:50:10,596 --> 00:50:12,926
无论他们是否携带了手机


1479
00:50:15,046 --> 00:50:17,016
当你深入到单个的产品页面时


1480
00:50:17,086 --> 00:50:19,086
你会发现它并不是一个缩减了的体验


1481
00:50:19,496 --> 00:50:21,046
用户将看到功能齐全的


1482
00:50:21,226 --> 00:50:23,546
App 描述 屏幕快照 评论等等


1483
00:50:25,306 --> 00:50:26,636
他们可以搜索带有


1484
00:50:26,636 --> 00:50:27,656
Voice Control 和涂鸦功能的 App


1485
00:50:28,956 --> 00:50:30,336
用户将能够直接把


1486
00:50:30,536 --> 00:50:32,306
你的 App 下载到


1487
00:50:32,306 --> 00:50:34,356
他们的手腕上


1488
00:50:34,356 --> 00:50:35,936
多亏了 App 及素材方面的细化


1489
00:50:35,936 --> 00:50:37,516
才使得可以提供一个小型的捆绑包


1490
00:50:37,516 --> 00:50:39,566
并且其中仅包含对手表有意义的


1491
00:50:39,566 --> 00:50:41,276
架构及素材


1492
00:50:42,186 --> 00:50:43,776
如果你同时拥有 iOS 和 watchOS 的 App


1493
00:50:43,776 --> 00:50:45,266
这也可以使你的


1494
00:50:45,406 --> 00:50:47,556
iOS App 变得更小


1495
00:50:47,556 --> 00:50:48,666
因为我们不需要再把


1496
00:50:48,756 --> 00:50:50,956
手表的包下载到你的手机上 也不需要来回移动这个包了


1497
00:50:52,316 --> 00:50:53,846
对于 Apple Watch App 来说


1498
00:50:53,996 --> 00:50:55,526
这确实是一个全新的时代


1499
00:50:55,596 --> 00:50:57,476
它将比以往任何时候都


1500
00:50:57,476 --> 00:50:58,686
更实用 更美观 更独立


1501
00:50:59,186 --> 00:51:00,426
我们认为你和你的用户


1502
00:51:00,506 --> 00:51:01,806
都会喜欢这个改进的


1503
00:51:03,226 --> 00:51:04,386
现在既然说起来


1504
00:51:04,386 --> 00:51:05,546
手表已经从 iOS 平台当中独立出来了


1505
00:51:05,546 --> 00:51:07,216
我想把 Cindy 请上台


1506
00:51:07,216 --> 00:51:08,276
来说说 iOS 平台的变化


1507
00:51:09,516 --> 00:51:15,556
[掌声]


1508
00:51:16,056 --> 00:51:16,866
>> 谢谢 Lori


1509
00:51:17,086 --> 00:51:20,236
iOS 13 是一个很大的版本


1510
00:51:21,476 --> 00:51:22,636
在今早的发布会上


1511
00:51:22,636 --> 00:51:24,186
相信大家也已经看到了


1512
00:51:24,486 --> 00:51:26,946
我们更新了大量的功能并作出了很大的增强


1513
00:51:26,946 --> 00:51:28,506
比如说重新设计的 share sheet 


1514
00:51:28,646 --> 00:51:31,066
新 Quick Type 键盘和全新 CarPlay 体验


1515
00:51:32,426 --> 00:51:34,156
除此之外 我们花了很长时间


1516
00:51:34,156 --> 00:51:35,586
来研究我们的 UI


1517
00:51:36,216 --> 00:51:38,796
并给了 iOS 13 一个全新的外观


1518
00:51:39,956 --> 00:51:41,346
其中包括 深色模式


1519
00:51:41,426 --> 00:51:44,856
卡片视效 内容上的操作以及符号


1520
00:51:46,056 --> 00:51:47,466
首先让我么深入到


1521
00:51:47,576 --> 00:51:48,686
全新的深色模式当中吧


1522
00:51:50,456 --> 00:51:51,596
深色模式将亮度维持在一个较低的水平


1523
00:51:51,676 --> 00:51:53,436
并且让浏览器变得不那么碍事


1524
00:51:53,436 --> 00:51:55,956
这样你就可以专注于内容了


1525
00:51:56,786 --> 00:51:58,276
整个系统经过了


1526
00:51:58,276 --> 00:51:59,726
深思熟虑的更新和完善


1527
00:51:59,726 --> 00:52:00,856
并且视觉效果非常的棒


1528
00:52:00,856 --> 00:52:03,876
你的用户肯定会需要这个功能的


1529
00:52:04,406 --> 00:52:05,906
并且为了帮助开发者


1530
00:52:05,906 --> 00:52:08,106
把这项改进带到 App 当中


1531
00:52:08,106 --> 00:52:10,206
我们开发了一些专门针对


1532
00:52:10,286 --> 00:52:11,976
深色模式的 API


1533
00:52:13,326 --> 00:52:15,266
首先是基于语义来赋予颜色


1534
00:52:16,626 --> 00:52:17,646
针对背景 填充区域和


1535
00:52:17,646 --> 00:52:19,586
文本都有了新的颜色


1536
00:52:20,426 --> 00:52:21,686
在深色模式下


1537
00:52:21,686 --> 00:52:23,686
它们有多个变体


1538
00:52:23,686 --> 00:52:25,126
给你的 App 赋予了一个视觉层次结构


1539
00:52:25,916 --> 00:52:26,806
所以这究竟意味着什么呢


1540
00:52:27,626 --> 00:52:28,686
当你的 App 是全屏的时候


1541
00:52:28,796 --> 00:52:30,966
它的背景是纯黑色的


1542
00:52:31,896 --> 00:52:33,346
为了确保足够的对比度


1543
00:52:34,016 --> 00:52:37,166
上面的 UI 采用了一个更亮的调色


1544
00:52:38,136 --> 00:52:40,126
在 iPad 上进行多任务处理的时候


1545
00:52:40,216 --> 00:52:42,146
具有侧边栏的 App 和两个并排 App


1546
00:52:42,356 --> 00:52:43,626
也会呈现出


1547
00:52:43,626 --> 00:52:44,976
较浅的图层颜色


1548
00:52:46,286 --> 00:52:47,686
这个设计有很多的细微之处


1549
00:52:47,786 --> 00:52:49,276
但是在整个过程中


1550
00:52:49,356 --> 00:52:50,786
你会自动地获得这种语义颜色效果


1551
00:52:52,686 --> 00:52:54,156
但你需要凸显某项内容时


1552
00:52:54,156 --> 00:52:55,086
会有一个明亮的系统调色板


1553
00:52:55,236 --> 00:52:56,776
其中的颜色在增强对比度的模式下


1554
00:52:56,776 --> 00:52:58,106
被赋予了不同的效果


1555
00:52:58,106 --> 00:53:00,076
并且在深色模式中也


1556
00:53:00,076 --> 00:53:01,706
有一个良好的特定的效果


1557
00:53:05,046 --> 00:53:07,326
还有一组全新的


1558
00:53:07,326 --> 00:53:09,276
材质和动态内容过滤器


1559
00:53:09,366 --> 00:53:10,946
并具有不同层次的透明度


1560
00:53:10,946 --> 00:53:12,936
这样一来


1561
00:53:12,936 --> 00:53:14,866
你就可以创建出比以往都要好的 UI


1562
00:53:15,596 --> 00:53:17,116
就和语义颜色一样


1563
00:53:17,586 --> 00:53:19,116
这些材质也同时


1564
00:53:19,246 --> 00:53:20,936
支持普通的亮模式和深色模式


1565
00:53:21,886 --> 00:53:23,246
他们会根据


1566
00:53:23,426 --> 00:53:24,996
UIKit 特征集的变化


1567
00:53:25,046 --> 00:53:26,336
来自动的更新


1568
00:53:27,676 --> 00:53:29,126
采用语义颜色和自适应材料


1569
00:53:29,126 --> 00:53:30,696
将帮助你提供一个


1570
00:53:30,696 --> 00:53:32,496
统一的外观


1571
00:53:32,496 --> 00:53:34,416
自动适应你的环境


1572
00:53:36,826 --> 00:53:38,736
iOS 13 新外观的另一个组成部分


1573
00:53:38,736 --> 00:53:39,836
是卡片视效


1574
00:53:41,496 --> 00:53:43,196
从最原始的 SDK 开始


1575
00:53:43,196 --> 00:53:45,286
在 iPhone 上的默认表示效果


1576
00:53:45,286 --> 00:53:46,846
就是全屏覆盖式的


1577
00:53:47,696 --> 00:53:49,286
我们现在把这种默认的效果


1578
00:53:49,286 --> 00:53:51,286
改成了更流畅的卡片表示


1579
00:53:52,326 --> 00:53:54,086
卡片视效提供了一个视觉上的堆叠效果


1580
00:53:54,086 --> 00:53:55,416
你一眼就可以看出


1581
00:53:55,416 --> 00:53:56,606
目前你正运行的东西


1582
00:53:56,926 --> 00:53:58,006
并且更好的一点是


1583
00:53:58,006 --> 00:53:59,416
你可以用手势来控制 只需向下一刷


1584
00:53:59,416 --> 00:53:59,956
就可以关掉当前的卡片了


1585
00:54:03,196 --> 00:54:05,196
[掌声]


1586
00:54:05,376 --> 00:54:08,386
是啊 刷一下就关了


1587
00:54:08,656 --> 00:54:11,256
我们还更新轻瞄和凸显这两个功能的的用户体验


1588
00:54:12,106 --> 00:54:14,196
在整个系统中


1589
00:54:14,196 --> 00:54:15,726
内容上的操作


1590
00:54:15,816 --> 00:54:16,666
变得更快 更容易


1591
00:54:17,306 --> 00:54:18,136
它们由一个全新的 API 来支持


1592
00:54:18,196 --> 00:54:21,276
这个 API 适用于所有的设备


1593
00:54:21,616 --> 00:54:22,636
所以它们不止在


1594
00:54:22,636 --> 00:54:24,616
iPhone 上有优于以往的效果


1595
00:54:24,666 --> 00:54:25,816
在 iPad 上也是一样的优秀


1596
00:54:26,836 --> 00:54:28,036
并且 当你把你的 iPad App


1597
00:54:28,456 --> 00:54:29,976
移植到 macOS 上 它们看起来也会很棒


1598
00:54:33,516 --> 00:54:36,506
[掌声]


1599
00:54:37,006 --> 00:54:38,146
当我们研究这个系统


1600
00:54:38,146 --> 00:54:39,316
做所有这些


1601
00:54:39,316 --> 00:54:41,276
深思熟虑的改进时


1602
00:54:41,276 --> 00:54:42,496
我们开始思考符号


1603
00:54:44,556 --> 00:54:45,756
大多数 App 都使用符号


1604
00:54:46,276 --> 00:54:48,626
它们是传递信息的一种非常有用的方式


1605
00:54:48,626 --> 00:54:51,286
并且符号会经常和文本一起使用


1606
00:54:51,536 --> 00:54:53,176
但在 iOS 12 中


1607
00:54:53,256 --> 00:54:54,856
文本有一些很棒的属性


1608
00:54:54,976 --> 00:54:55,846
我们的符号却并没有什么改进


1609
00:54:57,566 --> 00:54:59,536
因此 正如你在这里看到的


1610
00:54:59,796 --> 00:55:01,566
随着动态类型的增大


1611
00:55:01,566 --> 00:55:03,316
文本可以很好地伸缩


1612
00:55:03,316 --> 00:55:04,436
但是符号却保持不变


1613
00:55:05,276 --> 00:55:06,666
理想情况下


1614
00:55:06,716 --> 00:55:07,996
我们希望符号随文本一起缩放


1615
00:55:09,906 --> 00:55:11,246
所以我们开发了 SF Symbols


1616
00:55:12,766 --> 00:55:13,916
SF Symbols 具有


1617
00:55:13,916 --> 00:55:15,646
字体的所具备的


1618
00:55:15,796 --> 00:55:17,786
所有的表现力和行为


1619
00:55:17,996 --> 00:55:19,136
但不过它们被打包成了 UI 图像


1620
00:55:19,136 --> 00:55:19,896
这样它们在你的 App 里用起来就更容易了


1621
00:55:20,616 --> 00:55:23,326
iOS 13 包含了一个


1622
00:55:23,596 --> 00:55:25,966
极为庞大的目录


1623
00:55:26,086 --> 00:55:27,076
超过 1500 个 SF Symbols 供你使用


1624
00:55:27,076 --> 00:55:29,136
并且它们可以很容易地


1625
00:55:29,266 --> 00:55:31,796
在 Xcode 中搜索到 你还可以在 Mac 上


1626
00:55:31,796 --> 00:55:33,636
使用独立的 SF Symbols App


1627
00:55:35,516 --> 00:55:43,106
[掌声]


1628
00:55:43,606 --> 00:55:45,316
这就是符号 [笑声] 所以现在你可以


1629
00:55:45,316 --> 00:55:47,206
看到这些符号和文字一起缩放


1630
00:55:47,316 --> 00:55:49,576
以便在更大的尺寸下


1631
00:55:49,576 --> 00:55:51,906
获得更好的可读性和一致性


1632
00:55:51,906 --> 00:55:54,696
而且因为现在符号的表现


1633
00:55:54,696 --> 00:55:56,286
就和字体一样


1634
00:55:56,286 --> 00:55:57,656
所以这些字体上可用的变化对符号也一样适用


1635
00:56:00,516 --> 00:56:03,586
[掌声]


1636
00:56:04,086 --> 00:56:05,206
所有的这些都只是


1637
00:56:05,286 --> 00:56:07,476
iOS 13 中可用功能的一个皮毛


1638
00:56:08,026 --> 00:56:09,786
现在有全新的 share sheet API


1639
00:56:09,786 --> 00:56:11,556
可以让 App 获得收件人提供的建议


1640
00:56:11,996 --> 00:56:13,596
全新的 compositional layout API


1641
00:56:13,896 --> 00:56:15,906
使集合视图比以往更容易被使用


1642
00:56:15,906 --> 00:56:17,976
还有屏幕快照方面的增强


1643
00:56:18,136 --> 00:56:20,846
可以为长的内容提供完整的页面截取


1644
00:56:21,086 --> 00:56:22,046
还有很多很多


1645
00:56:24,686 --> 00:56:26,916
除了上面提到的这些


1646
00:56:27,556 --> 00:56:29,746
今年我们真的很想进一步推进 iOS 的发展


1647
00:56:31,486 --> 00:56:32,716
所以我们给了 iPad 它自己的


1648
00:56:32,796 --> 00:56:34,336
操作系统并配有包括


1649
00:56:34,336 --> 00:56:36,296
对多任务处理的主要增强


1650
00:56:36,296 --> 00:56:38,086
一个新的 PencilKit 框架


1651
00:56:38,086 --> 00:56:40,336
和一整套提高工作效率的手势


1652
00:56:42,416 --> 00:56:43,926
让我们先来说说多任务处理吧


1653
00:56:45,176 --> 00:56:47,586
在 iPadOS 中 你的 App


1654
00:56:47,586 --> 00:56:49,346
可以在同一时间 在不同位置


1655
00:56:49,346 --> 00:56:50,946
被同时打开


1656
00:56:51,006 --> 00:56:52,786
甚至可以以侧拉堆叠的方式呈现


1657
00:56:52,786 --> 00:56:54,516
并且在不同的位置下可以显示不同的内容


1658
00:56:56,466 --> 00:56:57,726
为了实现这件事


1659
00:56:57,726 --> 00:57:00,066
我们引入了一个新的 UI window scene API


1660
00:57:01,286 --> 00:57:02,796
每个窗口场景


1661
00:57:02,896 --> 00:57:04,536
都代表你的 App UI 的一个实例


1662
00:57:06,266 --> 00:57:08,016
在 iPadOS 诞生之前


1663
00:57:08,236 --> 00:57:09,656
你的 App Delegate 将同时负责


1664
00:57:09,656 --> 00:57:12,236
它的进程和 UI 的生命周期


1665
00:57:13,246 --> 00:57:14,136
有了 window scene 之后


1666
00:57:14,136 --> 00:57:15,856
我们将 UI 部分


1667
00:57:15,856 --> 00:57:17,706
拆分为一个新的 Scene Delegate 对象


1668
00:57:17,826 --> 00:57:20,316
这样它就可以独立管理了


1669
00:57:21,236 --> 00:57:22,516
因为它们是完全独立的了


1670
00:57:22,516 --> 00:57:23,796
你的 App 现在就可以


1671
00:57:23,796 --> 00:57:26,526
同时管理多个了


1672
00:57:27,056 --> 00:57:30,276
你的用户现在甚至看可以靠拖拽


1673
00:57:30,276 --> 00:57:32,156
把某个单独的项


1674
00:57:32,156 --> 00:57:33,726
从你的 App 中拉出来


1675
00:57:33,726 --> 00:57:35,466
比如拉出来一个单独的窗口或一条信息


1676
00:57:35,466 --> 00:57:36,816
并在一个全新的 window scene 里打开它


1677
00:57:38,966 --> 00:57:40,866
有了这个新功能


1678
00:57:40,866 --> 00:57:42,506
用户可以在任何时候


1679
00:57:42,656 --> 00:57:43,806
在任何场景中继续他们正在做的任何事情


1680
00:57:43,806 --> 00:57:46,066
这一点非常重要


1681
00:57:46,926 --> 00:57:48,226
为了简单起见


1682
00:57:48,226 --> 00:57:49,836
我们建立了一个基于 NSUserActivity 


1683
00:57:49,946 --> 00:57:51,566
的新的状态恢复系统


1684
00:57:52,786 --> 00:57:54,116
你可能已经很熟悉


1685
00:57:54,116 --> 00:57:55,386
这个通用的 API 了


1686
00:57:55,936 --> 00:57:57,766
它被用于 接力 搜索


1687
00:57:57,906 --> 00:58:00,636
索引 和 Siri 现在


1688
00:58:00,636 --> 00:58:02,386
还将用于 window scene 的状态恢复


1689
00:58:06,326 --> 00:58:07,456
其中 很重要的一件事


1690
00:58:07,456 --> 00:58:09,886
就是 啊 你们可以鼓掌 没关系的


1691
00:58:10,516 --> 00:58:15,546
[掌声]


1692
00:58:16,046 --> 00:58:16,746
真正让 iPad 变得与众不同的一点


1693
00:58:16,746 --> 00:58:18,806
就是它可以配备 Apple Pencil


1694
00:58:20,136 --> 00:58:21,336
我们引入 PencilKit


1695
00:58:21,486 --> 00:58:22,686
就是为让你轻松地给你的 App 


1696
00:58:23,076 --> 00:58:25,706
添加平滑的低延迟绘图


1697
00:58:26,696 --> 00:58:28,436
这与 Apple 的备忘录 Markup


1698
00:58:28,436 --> 00:58:31,476
以及屏幕快照 所使用的引擎是相同的


1699
00:58:31,476 --> 00:58:33,106
所以你可以在你的 App 中


1700
00:58:33,146 --> 00:58:36,226
获得所有这些相同的功能和工具


1701
00:58:36,616 --> 00:58:38,276
你甚至可以单独


1702
00:58:38,276 --> 00:58:39,996
使用画布和调色板功能


1703
00:58:40,316 --> 00:58:41,476
只需要选择哪些部分


1704
00:58:41,516 --> 00:58:44,326
适合你的用例就可以了


1705
00:58:45,076 --> 00:58:47,046
最后让我们谈一谈


1706
00:58:47,046 --> 00:58:48,396
提高效率的方法


1707
00:58:50,266 --> 00:58:52,026
我们把文本选择变得更加容易了


1708
00:58:52,506 --> 00:58:53,596
现在你可以直接在文本上


1709
00:58:53,656 --> 00:58:55,336
用手指一拖来选择它


1710
00:58:56,286 --> 00:58:57,716
文本视图和 web 视图里


1711
00:58:57,766 --> 00:58:59,406
已经自动地更新了


1712
00:58:59,406 --> 00:59:00,976
这种新的选择方式


1713
00:59:03,006 --> 00:59:04,356
现在有了新的三指手势


1714
00:59:04,486 --> 00:59:05,646
来进行撤销和重做


1715
00:59:07,056 --> 00:59:08,226
三指往左滑就是撤销


1716
00:59:08,356 --> 00:59:09,666
往右滑就是重做


1717
00:59:10,436 --> 00:59:11,866
这些手势使用的都是


1718
00:59:11,956 --> 00:59:13,546
现有的 NSUndoManager 


1719
00:59:13,546 --> 00:59:14,976
所以你什么也不需要做就能直接采用


1720
00:59:19,046 --> 00:59:20,046
如果你希望在文本视图


1721
00:59:20,156 --> 00:59:21,796
或者 web 视图之外


1722
00:59:21,796 --> 00:59:23,796
能够轻松地选择文本


1723
00:59:23,796 --> 00:59:25,226
或者是你的 App 已经添加了


1724
00:59:25,226 --> 00:59:26,906
三指手势操作的话


1725
00:59:26,906 --> 00:59:29,756
你可以使用 UITexInteraction API 来修复


1726
00:59:32,276 --> 00:59:33,466
对于滚动视图来说


1727
00:59:33,466 --> 00:59:35,156
现在可以拖动滚动指示器


1728
00:59:35,156 --> 00:59:37,526
直接跳转到滚动视图中的某个位置


1729
00:59:38,736 --> 00:59:40,006
要启用这种操作的话


1730
00:59:40,046 --> 00:59:41,796
只需打开显示滚动指示器就可以了


1731
00:59:42,396 --> 00:59:43,476
对于这一点来说


1732
00:59:43,476 --> 00:59:44,676
非常重要的是我们可能必须同时加载


1733
00:59:44,766 --> 00:59:46,196
一个滚动框架下的所有元素


1734
00:59:46,196 --> 00:59:48,076
才能把滚动的性能


1735
00:59:48,076 --> 00:59:50,186
给提升上去


1736
00:59:50,956 --> 00:59:52,246
我们认为我们的用户


1737
00:59:52,246 --> 00:59:53,796
会喜欢 iPadOS 提供给他们的强大的新功能


1738
00:59:53,796 --> 00:59:56,236
我们迫不及待地想看看


1739
00:59:56,236 --> 00:59:57,566
你会如何使用它


1740
00:59:58,536 --> 01:00:00,576
所以我想让 Sebastien 再重新回到舞台上来


1741
01:00:01,516 --> 01:00:06,666
[掌声]


1742
01:00:07,166 --> 01:00:10,146
>> 谢谢 Cindy 现在 正如你所看到的


1743
01:00:10,146 --> 01:00:11,546
我们的每个平台都有


1744
01:00:11,616 --> 01:00:13,036
令人难以置信的新功能


1745
01:00:13,036 --> 01:00:14,866
这些功能可以改进每个平台提供的体验


1746
01:00:14,866 --> 01:00:16,436
并赋予它们强大的新能力


1747
01:00:16,816 --> 01:00:18,336
并且在我们的所有平台上


1748
01:00:18,686 --> 01:00:20,226
我们建立了一系列的技术


1749
01:00:20,226 --> 01:00:21,186
来给你的 App 提供一个


1750
01:00:21,186 --> 01:00:23,746
一个良好的开端


1751
01:00:23,746 --> 01:00:24,846
这样你就可以直接在


1752
01:00:24,846 --> 01:00:27,206
你的 App 上使用最新的技术了


1753
01:00:28,156 --> 01:00:29,946
今天下午 我们想着重介绍


1754
01:00:29,986 --> 01:00:31,426
其中的几项技术


1755
01:00:31,426 --> 01:00:32,206
这几项技术覆盖了很多方面


1756
01:00:32,246 --> 01:00:34,096
既包括了我们是如何把我们的平台


1757
01:00:34,096 --> 01:00:36,216
以及 App 开放给用户的


1758
01:00:36,216 --> 01:00:37,936
还包括了我们如何用 AR


1759
01:00:37,936 --> 01:00:40,296
把虚拟世界和现实世界连接在一起


1760
01:00:40,876 --> 01:00:43,026
我们先从辅助功能开始讲起把


1761
01:00:43,026 --> 01:00:44,456
为此 我想邀请 Eric Seymour


1762
01:00:44,676 --> 01:00:45,586
到台上来 Eric


1763
01:00:46,516 --> 01:00:48,596
[掌声]


1764
01:00:49,096 --> 01:00:54,156
>> 谢谢 Sebastien 我们都知道科技


1765
01:00:54,246 --> 01:00:55,936
在人们的生活里扮演着重要的角色


1766
01:00:55,936 --> 01:00:59,696
对于残障人士人来说


1767
01:00:59,696 --> 01:01:00,936
更是十分的重要


1768
01:01:01,456 --> 01:01:03,126
技术在促进他们独立生存


1769
01:01:03,126 --> 01:01:04,456
给予他们就业机会 以及赋予平等的权利方面


1770
01:01:04,456 --> 01:01:06,176
发挥着不可或缺的作用


1771
01:01:06,176 --> 01:01:08,026
Apple 一直遵循着一些关键的原则


1772
01:01:08,026 --> 01:01:09,866
来保障辅助功能的实现


1773
01:01:09,866 --> 01:01:12,226
首要的就是设备内置的辅助功能


1774
01:01:12,816 --> 01:01:14,066
我们的产品应该能让用户


1775
01:01:14,066 --> 01:01:15,926
包括健全人和残障人士


1776
01:01:15,926 --> 01:01:17,826
都能够开箱即用


1777
01:01:19,276 --> 01:01:20,986
辅助功能应该是全面的


1778
01:01:21,366 --> 01:01:23,336
应当让用户可以访问


1779
01:01:23,336 --> 01:01:25,836
整个平台 以及操作系统的每个地方


1780
01:01:25,836 --> 01:01:27,216
以及 App 的每一个角落


1781
01:01:28,006 --> 01:01:30,176
也许更重要的是


1782
01:01:30,176 --> 01:01:32,216
我们想让用户能够感到惊喜和快乐


1783
01:01:32,216 --> 01:01:34,036
不论他们是否健全


1784
01:01:34,136 --> 01:01:35,586
所以这不仅仅是


1785
01:01:35,626 --> 01:01:37,426
修复辅助功能上的 Bug


1786
01:01:37,466 --> 01:01:39,276
这其实要做的是


1787
01:01:39,276 --> 01:01:41,016
使用辅助功能的特性


1788
01:01:41,016 --> 01:01:42,366
来努力创造一种好的用户体验


1789
01:01:42,366 --> 01:01:43,736
这和你们做设计的时候一样


1790
01:01:43,736 --> 01:01:45,386
是需要灵感来支撑的


1791
01:01:45,386 --> 01:01:48,366
当我们在考虑辅助功能的问题的时候


1792
01:01:49,176 --> 01:01:51,126
我们实际上是在探讨


1793
01:01:51,126 --> 01:01:53,886
感知能力方面的广泛且连续的整体


1794
01:01:54,646 --> 01:01:57,726
包括 听力 视觉 触觉 以及学习能力


1795
01:01:57,836 --> 01:01:59,606
在这每个不同的领域中


1796
01:01:59,606 --> 01:02:01,196
我们关注的是它们之间的差异


1797
01:02:02,116 --> 01:02:03,796
举例来说 对于视觉方面的缺失


1798
01:02:03,836 --> 01:02:05,906
我们已经提供了旁白功能


1799
01:02:05,906 --> 01:02:07,846
我们为无法看到屏幕的视障人士提供了屏幕阅读器


1800
01:02:07,846 --> 01:02:11,586
但是与此同时我们


1801
01:02:11,586 --> 01:02:13,096
还有十几个与视觉障碍相关的功能


1802
01:02:13,096 --> 01:02:15,116
像是缩放 以及更大字体等等的功能


1803
01:02:15,696 --> 01:02:17,156
当我们采用上面说的方法


1804
01:02:17,366 --> 01:02:18,866
并把它应用到我们刚说的


1805
01:02:18,866 --> 01:02:20,846
感知能力方面的广泛且连续的整体之上时


1806
01:02:20,846 --> 01:02:23,776
我们所触及的是会相当多的辅助功能的特性


1807
01:02:23,776 --> 01:02:24,956
并且这一点上应着重强调的是


1808
01:02:24,956 --> 01:02:29,006
辅助功能是为所有人服务的


1809
01:02:30,456 --> 01:02:32,036
也许你们中的大多数人


1810
01:02:32,036 --> 01:02:33,706
现在正在至少使用着一个辅助功能


1811
01:02:33,706 --> 01:02:34,666
如果现在还没用过


1812
01:02:35,136 --> 01:02:36,786
很有可能你最终会用上它的


1813
01:02:37,306 --> 01:02:40,836
今年我们引入了


1814
01:02:40,916 --> 01:02:42,076
一些新的辅助功能的特性


1815
01:02:42,076 --> 01:02:43,476
和一些增强后的功能


1816
01:02:43,476 --> 01:02:44,616
今天我想为大家介绍其中的两个


1817
01:02:44,616 --> 01:02:47,466
首先是可发现性


1818
01:02:48,026 --> 01:02:49,636
本着人人都可以发现的原则


1819
01:02:49,636 --> 01:02:51,116
我们希望辅助功能


1820
01:02:51,116 --> 01:02:52,426
可以很容易地被人们发现


1821
01:02:52,986 --> 01:02:55,156
因此 我们把辅助功能


1822
01:02:55,206 --> 01:02:56,976
添加到了 iOS 的 Quick Start 当中


1823
01:02:56,976 --> 01:02:58,646
使得开箱即用的体验里


1824
01:02:58,646 --> 01:03:00,886
多了辅助功能所带来的便利


1825
01:03:01,686 --> 01:03:04,566
并且我们把辅助功能


1826
01:03:04,566 --> 01:03:06,726
移动到了设置的顶级目录当中


1827
01:03:07,516 --> 01:03:12,606
[掌声]


1828
01:03:13,106 --> 01:03:14,576
并且我们把里面的功能进行了重组


1829
01:03:14,576 --> 01:03:15,796
使它们可以更容易被发现


1830
01:03:16,236 --> 01:03:17,216
我们认为要帮助人们


1831
01:03:17,216 --> 01:03:18,576
发现并使用这些强大的功能


1832
01:03:18,576 --> 01:03:19,756
其实还有很长的路要走


1833
01:03:19,756 --> 01:03:23,916
现在 我们先来看看 Voice Control 吧


1834
01:03:24,026 --> 01:03:25,836
在今早的演讲中我们看到了对它的介绍


1835
01:03:26,196 --> 01:03:27,606
Voice Control 是


1836
01:03:27,606 --> 01:03:29,556
来自 macOS iOS 以及 iPadOS 的


1837
01:03:29,556 --> 01:03:31,476
完整的语音体验


1838
01:03:31,476 --> 01:03:33,596
我们认为它对


1839
01:03:33,596 --> 01:03:34,856
残障人士来说是非常有帮助的


1840
01:03:35,656 --> 01:03:36,596
Voice Control 提供着


1841
01:03:36,746 --> 01:03:38,406
全面的平台访问


1842
01:03:38,636 --> 01:03:40,556
你可以说出名字来打开某项内容


1843
01:03:40,556 --> 01:03:42,266
你也可以说出序号来引出某项内容


1844
01:03:42,426 --> 01:03:43,846
你甚至可以利用网格


1845
01:03:43,846 --> 01:03:46,306
来语音控制屏幕上的某个区域


1846
01:03:46,916 --> 01:03:48,516
Voice Control 有着很好的文本编辑功能


1847
01:03:48,516 --> 01:03:50,016
我不仅可以用语音来输入文本


1848
01:03:50,276 --> 01:03:51,986
我还能用语音来做出选择和更正


1849
01:03:51,986 --> 01:03:54,206
只需要用我的声音就能实现这些


1850
01:03:54,926 --> 01:03:56,896
它是智能的


1851
01:03:57,296 --> 01:03:59,036
所以即使是我在口述文本的时候


1852
01:03:59,166 --> 01:04:00,756
它也能有效的听到指令


1853
01:04:00,756 --> 01:04:03,166
而不需要让我去区分它们


1854
01:04:03,166 --> 01:04:05,066
我只需要和它讲话就可以了


1855
01:04:05,066 --> 01:04:06,646
并且利用深度相机


1856
01:04:06,886 --> 01:04:08,926
它就我看向别处的时候


1857
01:04:08,926 --> 01:04:09,546
他就会忽略掉我的语音


1858
01:04:10,976 --> 01:04:12,516
Voice Control 还有很好的


1859
01:04:12,516 --> 01:04:13,506
语音手势功能


1860
01:04:13,506 --> 01:04:15,486
所以我可以做简单的动作像是轻点或重按


1861
01:04:15,886 --> 01:04:17,906
但我也可以预先录制更复杂的手势


1862
01:04:17,906 --> 01:04:19,216
比如说我可能会想要在


1863
01:04:19,216 --> 01:04:20,596
一个 App 或者游戏中使用这个


1864
01:04:20,596 --> 01:04:21,846
旋转的手势


1865
01:04:23,326 --> 01:04:25,196
并且 Voice Control


1866
01:04:25,196 --> 01:04:27,486
所用的语音识别是完全在设备本地运行的


1867
01:04:28,716 --> 01:04:30,576
所以现在 想给大家展示一下


1868
01:04:30,576 --> 01:04:31,596
Voice Control 的实际应用


1869
01:04:32,516 --> 01:04:37,786
[掌声]


1870
01:04:38,286 --> 01:04:39,476
在这个演示中


1871
01:04:39,476 --> 01:04:41,996
我要和我的 iPhone 来进行对话


1872
01:04:47,566 --> 01:04:48,446
打开信息


1873
01:04:49,016 --> 01:04:55,406
嗨 Chris 让我们今晚一起吃晚饭吧


1874
01:04:56,256 --> 01:04:57,976
我想吃披萨


1875
01:04:58,086 --> 01:04:59,306
Pizza 表情符号


1876
01:05:00,466 --> 01:05:03,206
把今晚改成这个周末


1877
01:05:04,956 --> 01:05:06,286
点击发送


1878
01:05:09,516 --> 01:05:10,476
撤销


1879
01:05:11,576 --> 01:05:12,486
点击发送


1880
01:05:15,016 --> 01:05:16,136
[笑声]


1881
01:05:16,136 --> 01:05:17,156
撤销


1882
01:05:20,376 --> 01:05:21,436
点击发送


1883
01:05:23,516 --> 01:05:25,576
[掌声]


1884
01:05:26,076 --> 01:05:31,066
打开地图 点击搜索地名或地址


1885
01:05:31,786 --> 01:05:35,366
San Pedro Square


1886
01:05:36,826 --> 01:05:37,606
显示序号


1887
01:05:39,196 --> 01:05:43,666
第 5 个 展示网格


1888
01:05:44,616 --> 01:05:49,516
第 15 格 在第 1 个位置放大


1889
01:05:49,716 --> 01:05:50,886
重复 4 次


1890
01:05:53,516 --> 01:06:02,546
[掌声]


1891
01:06:03,046 --> 01:06:05,916
从第 27 个位置往上拉


1892
01:06:05,916 --> 01:06:09,106
隐藏网格 点击分享


1893
01:06:09,626 --> 01:06:12,266
点击 Chris Adams


1894
01:06:13,026 --> 01:06:18,106
这里有很多选择


1895
01:06:18,916 --> 01:06:20,816
之后见


1896
01:06:21,476 --> 01:06:22,406
Peace 表情符号


1897
01:06:24,286 --> 01:06:26,926
啊 看那儿


1898
01:06:27,476 --> 01:06:28,776
撤销


1899
01:06:30,076 --> 01:06:30,976
Peace 表情符号


1900
01:06:31,706 --> 01:06:32,846
点击发送


1901
01:06:35,516 --> 01:06:39,546
[笑声]


1902
01:06:40,046 --> 01:06:40,866
撤销


1903
01:06:43,016 --> 01:06:43,736
点击发送


1904
01:06:46,516 --> 01:06:53,976
[掌声]


1905
01:06:54,476 --> 01:06:55,906
回到主屏幕 你去睡吧


1906
01:06:56,936 --> 01:06:59,186
好了 这就是 Voice Control


1907
01:07:00,296 --> 01:07:05,546
现在 [掌声]


1908
01:07:06,046 --> 01:07:07,306
现在我们还可以用 Voice Control


1909
01:07:07,306 --> 01:07:09,246
来帮助开发者


1910
01:07:09,246 --> 01:07:10,856
来测试 App 的辅助功能


1911
01:07:11,036 --> 01:07:12,246
我们用你们之前看到的


1912
01:07:12,246 --> 01:07:13,676
那个 Travel App 来试验下


1913
01:07:14,406 --> 01:07:17,946
醒一醒 打开 Travel


1914
01:07:21,456 --> 01:07:23,006
点击 San Francisco


1915
01:07:23,746 --> 01:07:26,526
点击 San Francisco


1916
01:07:26,636 --> 01:07:27,666
显示名字


1917
01:07:28,956 --> 01:07:33,246
好了 这就是问题的所在


1918
01:07:33,576 --> 01:07:35,166
当我想要去点击 San Francisco


1919
01:07:35,166 --> 01:07:37,286
这个元素的时


1920
01:07:37,286 --> 01:07:38,066
但是它没有一个


1921
01:07:38,066 --> 01:07:39,516
提供给辅助功能的标签


1922
01:07:39,516 --> 01:07:40,646
这是一个很常见的问题


1923
01:07:40,646 --> 01:07:41,906
这意味着我无法通过


1924
01:07:41,906 --> 01:07:43,446
Voice Control 来和这个标签对话


1925
01:07:43,446 --> 01:07:44,966
更糟糕的是


1926
01:07:44,966 --> 01:07:46,516
如果我看不到屏幕


1927
01:07:46,516 --> 01:07:48,086
并且正利用旁白为我读屏的话


1928
01:07:48,086 --> 01:07:50,056
我就完全没有希望了 只能停下脚步了


1929
01:07:50,056 --> 01:07:51,696
我将无法使用这个 App 了


1930
01:07:52,046 --> 01:07:55,276
幸运的是


1931
01:07:55,326 --> 01:07:56,266
这些问题都很容易去解决


1932
01:07:56,266 --> 01:07:57,786
下面让我们来聊聊


1933
01:07:57,786 --> 01:07:59,966
如何让你的 App 可以更容易地配上辅助功能


1934
01:08:04,046 --> 01:08:05,596
好消息是大部分的


1935
01:08:05,596 --> 01:08:07,546
辅助功能都是可以工作的


1936
01:08:08,046 --> 01:08:09,056
但其中的那些


1937
01:08:09,056 --> 01:08:10,326
最具变革性的功能


1938
01:08:10,326 --> 01:08:11,576
比如 Voice Control


1939
01:08:11,576 --> 01:08:14,046
Switch Control 和旁白功能


1940
01:08:14,046 --> 01:08:14,676
它们需要你提供支持


1941
01:08:14,676 --> 01:08:16,345
这些是你能够做到的


1942
01:08:16,345 --> 01:08:18,515
首先要做的就是我们刚做的


1943
01:08:18,515 --> 01:08:19,265
你一定要敢于尝试


1944
01:08:19,395 --> 01:08:21,916
在你的 App 上试一试辅助功能


1945
01:08:22,216 --> 01:08:23,426
你也许会对已经奏效的这些功能


1946
01:08:23,426 --> 01:08:24,336
感到十分的惊讶


1947
01:08:24,406 --> 01:08:25,876
但是更重要的是


1948
01:08:25,876 --> 01:08:27,376
你将会获得一些见解


1949
01:08:27,376 --> 01:08:30,426
了解到你的用户是如何


1950
01:08:30,426 --> 01:08:31,406
体验你的 App 的


1951
01:08:31,406 --> 01:08:32,716
你很有可能


1952
01:08:32,716 --> 01:08:33,856
想要尝试着去做一些改变


1953
01:08:34,725 --> 01:08:37,145
所以 下一步就是利用工具


1954
01:08:37,145 --> 01:08:38,716
Xcode 为开发人员


1955
01:08:38,716 --> 01:08:40,426
提供了强大的内置的辅助功能上的支持


1956
01:08:40,426 --> 01:08:41,636
你可以在 Xcode 的


1957
01:08:41,685 --> 01:08:43,845
inspector 当中编辑辅助功能的相关属性


1958
01:08:44,036 --> 01:08:45,156
并且利用新的 Environment Overrides


1959
01:08:45,156 --> 01:08:47,036
你在你 App 的


1960
01:08:47,036 --> 01:08:48,345
开发生命周期中


1961
01:08:48,345 --> 01:08:49,456
可以方便地预览视觉方面的


1962
01:08:49,456 --> 01:08:52,326
辅助功能的运行效果


1963
01:08:52,716 --> 01:08:53,636
这真的非常棒


1964
01:08:54,515 --> 01:08:57,786
最后要做的就是实现 Accessibility API


1965
01:08:57,786 --> 01:08:59,986
这是确保用户体验辅助功能的


1966
01:08:59,986 --> 01:09:01,326
最佳方式


1967
01:09:01,326 --> 01:09:02,606
也是最基本的方式


1968
01:09:02,966 --> 01:09:04,816
做好这些


1969
01:09:04,816 --> 01:09:06,216
就像是给你的 App 打开了一扇


1970
01:09:06,506 --> 01:09:08,386
欢迎各类人群的大门


1971
01:09:08,526 --> 01:09:09,975
前面说的这些


1972
01:09:09,975 --> 01:09:11,316
就是如何利用旁白 Switch Control 
以及对话的功能


1973
01:09:11,316 --> 01:09:12,716
在你的 App 上


1974
01:09:12,716 --> 01:09:13,456
来提供一个更舒适的体验


1975
01:09:14,196 --> 01:09:15,586
Accessibility API 可以运行在


1976
01:09:15,586 --> 01:09:17,265
全部的平台上


1977
01:09:17,265 --> 01:09:18,796
并且它们很容易被实现 他们真的非常强大


1978
01:09:19,326 --> 01:09:20,776
因此 即使是在最复杂的


1979
01:09:20,776 --> 01:09:23,765
App 和用户体验当中也可以使用它


1980
01:09:24,406 --> 01:09:26,916
当然 SwiftUI 中也已经内置了


1981
01:09:26,916 --> 01:09:29,196
对辅助功能的良好支持


1982
01:09:29,986 --> 01:09:32,265
这就是我们在辅助功能方面的更新


1983
01:09:32,616 --> 01:09:34,416
Apple 另一件十分关心的事


1984
01:09:34,416 --> 01:09:35,895
就是隐私


1985
01:09:35,996 --> 01:09:37,036
下面我把这件事


1986
01:09:37,036 --> 01:09:39,395
交给 Katie 来为做进一步讲述


1987
01:09:39,395 --> 01:09:47,046
非常感谢 [掌声]


1988
01:09:47,546 --> 01:09:48,456
>> 谢谢 Eric


1989
01:09:48,616 --> 01:09:51,046
隐私是一个永原不会消失的话题


1990
01:09:51,046 --> 01:09:52,805
并且这也是每个人


1991
01:09:52,805 --> 01:09:53,935
都需要去注意的事情


1992
01:09:53,935 --> 01:09:56,316
它是你从一开始


1993
01:09:56,316 --> 01:09:59,096
就必须设计的东西


1994
01:09:59,096 --> 01:10:01,076
它决定了你的产品如何工作


1995
01:10:02,086 --> 01:10:03,276
在设计新的功能时


1996
01:10:03,276 --> 01:10:05,086
可以采取以下几个步骤


1997
01:10:05,086 --> 01:10:08,426
来保护隐私


1998
01:10:09,866 --> 01:10:11,366
在用户的设备上做处理


1999
01:10:12,096 --> 01:10:14,226
只要你能将用户的数据存在设备上


2000
01:10:14,226 --> 01:10:16,136
那就该让它存在设备上


2001
01:10:16,946 --> 01:10:19,016
这会让你收集


2002
01:10:19,016 --> 01:10:20,586
尽可能少的数据


2003
01:10:21,196 --> 01:10:22,996
如果你没有数据


2004
01:10:23,446 --> 01:10:25,696
它们就不会被滥用或窃取


2005
01:10:26,366 --> 01:10:27,206
事先询问用户


2006
01:10:27,416 --> 01:10:32,356
一定要询问你的用户来获得许可


2007
01:10:32,536 --> 01:10:34,916
并且要告诉他们你将如何使用数据


2008
01:10:35,276 --> 01:10:38,066
如果你需要收集数据


2009
01:10:38,116 --> 01:10:39,236
要使用随机的标识符


2010
01:10:39,976 --> 01:10:41,466
并且把数据的来源信息


2011
01:10:41,686 --> 01:10:43,976
从账户缩小到设备


2012
01:10:44,136 --> 01:10:45,506
如果可能的话缩小到会话


2013
01:10:46,036 --> 01:10:50,126
并且要加密 来保证用户数据的安全


2014
01:10:51,506 --> 01:10:53,266
在设计过程中


2015
01:10:53,266 --> 01:10:55,356
应用这些原则


2016
01:10:55,356 --> 01:10:58,626
将帮助你构建出色的特性和良好的隐私保护


2017
01:10:58,626 --> 01:11:01,676
我想从两个方面做介绍


2018
01:11:01,676 --> 01:11:04,026
来告诉你们 我们如何帮助你们


2019
01:11:04,026 --> 01:11:06,276
更容易地采取上述的这些步骤


2020
01:11:06,456 --> 01:11:08,316
第一方面 定位


2021
01:11:10,786 --> 01:11:13,736
你去了什么地方可以揭示你生活的很多方面


2022
01:11:14,606 --> 01:11:16,536
你住在哪儿 你在哪儿工作


2023
01:11:17,276 --> 01:11:18,576
你会去看哪个医生


2024
01:11:18,576 --> 01:11:21,166
你去健身房的频率


2025
01:11:21,166 --> 01:11:23,896
或者是酒吧的频率


2026
01:11:25,656 --> 01:11:27,356
因此 一些用户不愿意


2027
01:11:27,486 --> 01:11:30,866
和你还有你的 App 共享位置


2028
01:11:31,846 --> 01:11:33,366
因此 他们可能会错过


2029
01:11:33,366 --> 01:11:34,836
你的一些关键功能


2030
01:11:35,826 --> 01:11:37,606
所以在今年 我们添加了


2031
01:11:37,606 --> 01:11:40,156
一个新的选项 单次允许


2032
01:11:41,876 --> 01:11:43,646
这将为该会话


2033
01:11:43,646 --> 01:11:45,946
提供位置访问


2034
01:11:45,946 --> 01:11:49,516
并将在下次再次询问用户


2035
01:11:49,736 --> 01:11:51,986
但是现在让我们假设一下


2036
01:11:51,986 --> 01:11:53,546
你的 App 被设置成了


2037
01:11:53,546 --> 01:11:54,526
总是有权限访问位置信息


2038
01:11:55,456 --> 01:11:57,136
但它的运行机制现在变了


2039
01:11:58,506 --> 01:11:59,866
首先需要用户选择


2040
01:12:00,366 --> 01:12:00,996
在 App 运行中允许访问地址


2041
01:12:02,586 --> 01:12:05,246
之后开发者就可以当 App 在后台运行的时候


2042
01:12:05,246 --> 01:12:06,846
请求到地址信息


2043
01:12:07,996 --> 01:12:09,296
之后用户将看到一个警告


2044
01:12:09,296 --> 01:12:11,766
来让他们知道


2045
01:12:11,766 --> 01:12:16,506
你正在后台请求着他们的地址


2046
01:12:16,506 --> 01:12:18,276
如果他们选择了始终允许地址被访问


2047
01:12:19,056 --> 01:12:20,446
你就可以在用户的移动过程中


2048
01:12:20,776 --> 01:12:22,186
从后台获得到地址信息


2049
01:12:22,816 --> 01:12:26,196
最后 我们让用户


2050
01:12:26,196 --> 01:12:28,236
更清楚地了解


2051
01:12:28,236 --> 01:12:29,576
他们的位置是如何被访问的


2052
01:12:30,876 --> 01:12:32,486
对于所有具有


2053
01:12:32,486 --> 01:12:34,556
后台位置权限的 App


2054
01:12:34,556 --> 01:12:36,356
我们会时不时地提醒你的用户


2055
01:12:36,356 --> 01:12:38,606
某些 App 正在访问他的位置


2056
01:12:39,516 --> 01:12:47,546
[掌声]


2057
01:12:48,046 --> 01:12:48,726
通过对权限的这些更改


2058
01:12:48,726 --> 01:12:50,256
用户对于把位置


2059
01:12:50,256 --> 01:12:52,456
共享给开发者这件事


2060
01:12:52,546 --> 01:12:54,566
将会觉得更加的舒适和安心


2061
01:12:55,726 --> 01:12:57,766
接下来 我们来聊聊登录这件事


2062
01:13:00,276 --> 01:13:01,886
我们都见过或者


2063
01:13:01,886 --> 01:13:03,416
实现过这样的按钮


2064
01:13:03,416 --> 01:13:05,496
这些按钮的确很方便


2065
01:13:05,496 --> 01:13:07,186
但是这其实是以牺牲


2066
01:13:07,186 --> 01:13:09,326
用户的隐私为代价的


2067
01:13:10,586 --> 01:13:11,826
它们还会把一些


2068
01:13:11,826 --> 01:13:14,116
你不想披露给外界的公司的信息


2069
01:13:14,186 --> 01:13:17,116
给提供出去


2070
01:13:18,416 --> 01:13:20,586
所以我们想提供给大家一个更好的选择


2071
01:13:20,586 --> 01:13:23,976
那就是 Sign in with Apple


2072
01:13:24,516 --> 01:13:31,026
[掌声]


2073
01:13:31,526 --> 01:13:33,606
它提供了快速 简单的登录方式


2074
01:13:33,816 --> 01:13:35,076
并且不会进行任何的追踪


2075
01:13:35,996 --> 01:13:37,936
这不仅关系到我们用户的隐私


2076
01:13:37,936 --> 01:13:41,306
也关系到你的公司的隐私


2077
01:13:42,456 --> 01:13:44,036
了解用户怎么使用你们的 App


2078
01:13:44,036 --> 01:13:45,706
不是我们该做的事情


2079
01:13:46,676 --> 01:13:49,806
所以 Apple 根本不会进行追踪


2080
01:13:50,516 --> 01:13:56,546
[掌声]


2081
01:13:57,046 --> 01:13:58,546
只需要一个简单的 API


2082
01:13:58,546 --> 01:14:00,776
就可以添加 Sign in with Apple 的按钮


2083
01:14:01,916 --> 01:14:03,986
用户可以点击一下


2084
01:14:04,016 --> 01:14:05,676
再使用下面容 ID


2085
01:14:06,026 --> 01:14:08,806
就能创建账号并登录


2086
01:14:09,036 --> 01:14:13,093
为什么这对你们所有人都有好处呢


2087
01:14:13,486 --> 01:14:15,836
第一点是更多的信任和更少的摩擦


2088
01:14:15,966 --> 01:14:18,616
将为你带来更多的用户


2089
01:14:19,776 --> 01:14:21,246
Sign in with Apple


2090
01:14:21,246 --> 01:14:24,366
可以缩短用户考虑你的 App


2091
01:14:24,606 --> 01:14:27,686
和真正接受你的 App


2092
01:14:27,686 --> 01:14:29,466
这两者之间的距离


2093
01:14:31,396 --> 01:14:33,736
第二点是核实电子邮箱的地址


2094
01:14:34,836 --> 01:14:36,976
Apple 已经为你完成了


2095
01:14:37,436 --> 01:14:40,176
验证电子邮件地址的工作


2096
01:14:41,516 --> 01:14:47,596
[掌声]


2097
01:14:48,096 --> 01:14:49,046
我们还通过提供


2098
01:14:49,046 --> 01:14:51,686
私人电子邮件中继服务


2099
01:14:51,796 --> 01:14:54,096
消除了用户提供


2100
01:14:54,196 --> 01:14:55,596
虚构电子邮件地址的动机


2101
01:14:55,676 --> 01:14:59,436
因此 即使用户在


2102
01:14:59,606 --> 01:15:01,406
设置账户时选择


2103
01:15:01,406 --> 01:15:03,006
隐藏他们的电子邮件地址


2104
01:15:03,006 --> 01:15:04,626
你的电子邮件也会送达他们的验证账户


2105
01:15:04,626 --> 01:15:08,346
就是他们用来完成验证的电子邮箱的收件箱


2106
01:15:08,836 --> 01:15:12,036
另外还有安全方面的问题


2107
01:15:12,036 --> 01:15:14,546
有了 Sign in with Apple


2108
01:15:14,546 --> 01:15:15,746
你不需要处理存储密码或密码重置问题


2109
01:15:15,746 --> 01:15:19,286
或密码重置问题


2110
01:15:19,636 --> 01:15:21,796
并且 每一个账户


2111
01:15:21,796 --> 01:15:24,756
都会受到两步验证的保护


2112
01:15:27,516 --> 01:15:31,546
[掌声]


2113
01:15:32,046 --> 01:15:34,146
这真的可以提高你的安全性


2114
01:15:35,536 --> 01:15:36,886
们还在反欺诈方面


2115
01:15:36,976 --> 01:15:42,006
整合了一些有趣的创新


2116
01:15:42,206 --> 01:15:44,096
我们都知道 开发者需要与


2117
01:15:44,096 --> 01:15:46,286
一些真正的用户在一起


2118
01:15:46,346 --> 01:15:48,296
有时你会得到一些不那么真实的用户


2119
01:15:49,676 --> 01:15:52,016
没有人想要机器人用户或者是批量注册的账户


2120
01:15:52,716 --> 01:15:54,326
我们努力把它们


2121
01:15:54,396 --> 01:15:55,706
从我们的系统中过滤出去


2122
01:15:56,106 --> 01:15:59,066
我们也想帮各位开发者做同样的事情


2123
01:15:59,826 --> 01:16:03,136
所以 我们构建了一个


2124
01:16:03,216 --> 01:16:04,166
我们称之为真实用户指示器的机制


2125
01:16:04,166 --> 01:16:06,516
它可以告诉你


2126
01:16:06,516 --> 01:16:09,676
一个新的账户是否是真实的用户


2127
01:16:09,676 --> 01:16:12,006
或者你也可以做一些额外的验证


2128
01:16:13,286 --> 01:16:15,276
所以它是如何运作的呢


2129
01:16:16,396 --> 01:16:17,926
首先 整个系统


2130
01:16:17,926 --> 01:16:19,686
从头开始构建


2131
01:16:19,686 --> 01:16:21,396
以此来维护用户的隐私


2132
01:16:21,396 --> 01:16:24,326
它使用了在设备本地运行的智能方法


2133
01:16:24,566 --> 01:16:26,786
来确定原始设备的行为


2134
01:16:26,786 --> 01:16:29,973
是否是正常的


2135
01:16:30,686 --> 01:16:32,206
设备上生成的值


2136
01:16:32,306 --> 01:16:35,026
是不会给 Apple 共享任何细节的


2137
01:16:36,126 --> 01:16:38,156
这个过程中将结合选择账户信息


2138
01:16:38,156 --> 01:16:39,656
之后归并成一个单一的值


2139
01:16:39,656 --> 01:16:41,646
之后在账户建立的时候


2140
01:16:42,166 --> 01:16:48,236
分享到你的 App 上


2141
01:16:48,236 --> 01:16:49,696
再之后 你可以根据你接收到的值


2142
01:16:49,806 --> 01:16:50,866
你就可以得到一个信息让你确信


2143
01:16:50,866 --> 01:16:52,596
你的用户是一个真实用户


2144
01:16:52,596 --> 01:16:55,166
或者根据得到信息


2145
01:16:55,166 --> 01:16:56,826
让你觉得你需要再重新判断


2146
01:17:00,296 --> 01:17:01,916
所有这些都提供了


2147
01:17:01,916 --> 01:17:03,226
强大的跨平台支持


2148
01:17:03,996 --> 01:17:05,796
它可以在 iOS iPadOS


2149
01:17:05,966 --> 01:17:12,016
macOS watchOS tvOS 甚至是


2150
01:17:12,016 --> 01:17:12,956
在 web 当中使用


2151
01:17:14,106 --> 01:17:16,196
这样一来 它也可以适用于 Android


2152
01:17:16,196 --> 01:17:17,306
和 Windows 设备


2153
01:17:18,516 --> 01:17:26,926
[掌声]


2154
01:17:27,426 --> 01:17:31,276
好了 这是一个极其高速和简单的方法


2155
01:17:31,276 --> 01:17:33,836
可以帮你来吸引新用户


2156
01:17:33,986 --> 01:17:37,406
两步验证以及内置的反欺诈


2157
01:17:38,286 --> 01:17:39,686
你可以在任何地方实现它


2158
01:17:39,846 --> 01:17:42,266
而且最重要的是


2159
01:17:42,936 --> 01:17:45,066
它尊重每个人的隐私


2160
01:17:46,286 --> 01:17:48,506
所以这是一个你和你的用户


2161
01:17:48,506 --> 01:17:50,706
都可以信任的解决方案


2162
01:17:56,046 --> 01:17:57,076
已经有许多的


2163
01:17:57,076 --> 01:17:59,016
开发人员和我们合作


2164
01:17:59,016 --> 01:18:02,096
我们很高兴看到更多的人采用我们的方案


2165
01:18:02,096 --> 01:18:06,346
这就是 Sign in with Apple


2166
01:18:07,516 --> 01:18:15,696
[掌声]


2167
01:18:16,196 --> 01:18:18,106
就像我在前面提到的


2168
01:18:18,106 --> 01:18:20,046
一个很好的保护用户隐私的办法


2169
01:18:20,046 --> 01:18:22,376
就是仅在设备上使用用户的数据


2170
01:18:22,376 --> 01:18:24,886
我们创造了一些很伟大的技术


2171
01:18:24,886 --> 01:18:28,326
来实现这一点


2172
01:18:28,486 --> 01:18:30,136
为了给大家介绍更多关于


2173
01:18:30,136 --> 01:18:31,816
机器学习方面的内容


2174
01:18:31,816 --> 01:18:32,676
下面有请 Bill 来讲解


2175
01:18:34,516 --> 01:18:36,546
[掌声]


2176
01:18:37,046 --> 01:18:37,516
>> 谢谢 Katie


2177
01:18:38,516 --> 01:18:40,906
[掌声]


2178
01:18:41,406 --> 01:18:42,696
机器学习是


2179
01:18:42,696 --> 01:18:44,356
App 体验中的一项


2180
01:18:44,356 --> 01:18:46,316
关键技术


2181
01:18:46,746 --> 01:18:48,846
Apple 使用基于设备的


2182
01:18:48,946 --> 01:18:50,086
机器学习来增强各项功能


2183
01:18:50,086 --> 01:18:52,046
包括神奇的相机功能


2184
01:18:52,236 --> 01:18:55,526
照片功能以及 ARKit 等等


2185
01:18:55,526 --> 01:18:57,756
我们之所以能做到这一点


2186
01:18:57,756 --> 01:18:58,806
是源自于我们尖端的硅芯片


2187
01:19:00,106 --> 01:19:01,926
通过强大的 CPU GPU 以及


2188
01:19:01,926 --> 01:19:04,746
专用的 ML 处理器


2189
01:19:04,746 --> 01:19:06,686
像是神经引擎


2190
01:19:06,686 --> 01:19:09,196
我们可以提供令人难以置信的实时体验


2191
01:19:10,576 --> 01:19:12,276
我们对神经引擎进行了优化


2192
01:19:12,366 --> 01:19:13,856
以便加速对卷积神经网络的


2193
01:19:13,856 --> 01:19:14,846
多精度支持


2194
01:19:14,846 --> 01:19:16,766
并且加速


2195
01:19:16,916 --> 01:19:18,036
智能计算系统


2196
01:19:19,456 --> 01:19:20,576
这意味着什么呢


2197
01:19:21,106 --> 01:19:24,196
这意味着它绝对是运算方面的猛兽


2198
01:19:24,876 --> 01:19:27,496
事实上 神经引擎


2199
01:19:27,646 --> 01:19:29,646
可以进行每秒


2200
01:19:29,696 --> 01:19:31,536
5 万亿次的运算


2201
01:19:31,926 --> 01:19:33,346
更重要的是


2202
01:19:33,346 --> 01:19:35,106
我们在此基础上构建了机器学习的 API


2203
01:19:35,106 --> 01:19:37,976
这样 你的 App 就可以充分利用


2204
01:19:38,096 --> 01:19:40,786
这些性能了


2205
01:19:41,796 --> 01:19:43,286
我们有了一些很棒的更新


2206
01:19:43,466 --> 01:19:45,536
以我们开箱即用的 API 为例


2207
01:19:45,536 --> 01:19:47,746
我们在上面更新了像是视觉 自然语言


2208
01:19:47,746 --> 01:19:49,156
以及语音等多个方面


2209
01:19:50,266 --> 01:19:51,886
现在 这些 API 已经提供了丰富的功能


2210
01:19:51,946 --> 01:19:53,766
像是人脸检测


2211
01:19:54,156 --> 01:19:56,696
目标跟踪 以及已命名实体识别


2212
01:19:57,316 --> 01:19:59,846
今年 我们增加了更多功能


2213
01:20:00,586 --> 01:20:01,446
让我们来看一下其中的某些功能吧


2214
01:20:01,446 --> 01:20:03,436
首先是图像显著性


2215
01:20:03,436 --> 01:20:05,216
它为开发者提供了一个


2216
01:20:05,216 --> 01:20:06,546
图像的热图


2217
01:20:06,876 --> 01:20:08,496
突出显示重要的对象


2218
01:20:08,496 --> 01:20:11,316
以及用户可能集中他们的注意力的地方


2219
01:20:12,416 --> 01:20:14,126
我们现在在照片中使用这项技术


2220
01:20:14,126 --> 01:20:16,016
来进行智能图片裁剪


2221
01:20:16,016 --> 01:20:17,796
并作为内容管理的一部分


2222
01:20:18,486 --> 01:20:20,776
我们还发布了文本识别功能


2223
01:20:20,776 --> 01:20:22,606
你可以从海报 标识


2224
01:20:22,606 --> 01:20:25,976
和文件的图片中搜索文本


2225
01:20:26,516 --> 01:20:33,546
[掌声]


2226
01:20:34,046 --> 01:20:35,456
其中还利用了我们在


2227
01:20:35,456 --> 01:20:37,706
备注当中提供的扫描文稿功能


2228
01:20:38,686 --> 01:20:40,466
在自然语言方面


2229
01:20:40,466 --> 01:20:42,156
你可以利用 Word embeddings


2230
01:20:42,516 --> 01:20:44,186
来帮助你识别具有


2231
01:20:44,296 --> 01:20:46,246
相似含义的单词和句子


2232
01:20:47,106 --> 01:20:49,106
我们如今在照片搜索中


2233
01:20:49,176 --> 01:20:50,646
使用了这项技术


2234
01:20:50,646 --> 01:20:52,326
比如说你搜了一个不确定词汇 音乐家


2235
01:20:52,736 --> 01:20:54,386
我们可以把其他的相似概念


2236
01:20:54,386 --> 01:20:55,876
比如艺人或歌手也搜出来


2237
01:20:57,386 --> 01:20:59,826
今年 我们的 Speech API


2238
01:20:59,826 --> 01:21:02,246
已经可以在


2239
01:21:02,246 --> 01:21:04,916
iPhone iPad 和 Mac 上运行了


2240
01:21:04,986 --> 01:21:06,686
并支持 10 种语言


2241
01:21:07,516 --> 01:21:12,546
[掌声]


2242
01:21:13,046 --> 01:21:13,946
并且利用像是语音显著性功能


2243
01:21:13,986 --> 01:21:15,656
就可以理解


2244
01:21:15,656 --> 01:21:19,346
语音 音高 以及语言中的抑扬顿挫了


2245
01:21:21,086 --> 01:21:22,206
现在 对于那些


2246
01:21:22,206 --> 01:21:23,716
想深入使用机器学习的人


2247
01:21:24,266 --> 01:21:26,346
你可以使用 Core ML


2248
01:21:26,346 --> 01:21:28,646
这是我们设计的在设备上


2249
01:21:28,646 --> 01:21:30,316
运行机器学习模型的技术


2250
01:21:30,416 --> 01:21:32,746
它具有超高的性能和私密性


2251
01:21:34,266 --> 01:21:36,146
现在 Core ML 为许多


2252
01:21:36,146 --> 01:21:37,176
机器学习模型提供了强大的支持


2253
01:21:37,176 --> 01:21:39,176
它可以支持神经网络


2254
01:21:39,176 --> 01:21:40,866
Boosted trees 等模型


2255
01:21:41,836 --> 01:21:42,726
但众所周知


2256
01:21:42,726 --> 01:21:45,116
机器学习领域正在不断发展


2257
01:21:45,466 --> 01:21:46,756
所以 今年我们增加了


2258
01:21:46,756 --> 01:21:48,586
比以往更多的神经层类型


2259
01:21:48,586 --> 01:21:50,536
以此来支持最先进的


2260
01:21:50,536 --> 01:21:52,136
神经网络


2261
01:21:52,976 --> 01:21:55,066
事实上 Core ML 现在支持


2262
01:21:55,066 --> 01:21:57,676
超过 100 种模型的神经层的类型


2263
01:21:59,006 --> 01:22:00,216
这使你能够


2264
01:22:00,216 --> 01:22:01,906
在 Apple 设备上运行


2265
01:22:01,906 --> 01:22:03,906
一些最先进的机器学习模型


2266
01:22:04,916 --> 01:22:07,526
像 ELMO 或 WaveNet 这样的模型


2267
01:22:07,526 --> 01:22:08,886
或者像 BERT 这样


2268
01:22:08,886 --> 01:22:11,096
最近才发布的模型


2269
01:22:11,096 --> 01:22:12,496
为你的 App 实现突破性的


2270
01:22:12,536 --> 01:22:14,236
自然语言处理


2271
01:22:16,226 --> 01:22:18,126
现在 在 App 中运行这样的模型


2272
01:22:18,126 --> 01:22:20,246
只是问题的一部分


2273
01:22:21,166 --> 01:22:22,106
有时 你可能希望


2274
01:22:22,106 --> 01:22:23,656
基于用户数据来更新设备上


2275
01:22:23,656 --> 01:22:26,776
的 App 里的模型


2276
01:22:27,876 --> 01:22:29,056
我们现在就在为面容 ID 这样的功能


2277
01:22:29,056 --> 01:22:31,156
来做这样的事情


2278
01:22:31,156 --> 01:22:33,286
用户的外观可能会随着时间的推移而变化


2279
01:22:33,906 --> 01:22:35,606
他们会换发型 戴帽子


2280
01:22:36,436 --> 01:22:37,996
或者像是 Siri 表盘 这样的功能


2281
01:22:37,996 --> 01:22:40,096
它的推荐集


2282
01:22:40,096 --> 01:22:41,706
会不断地改变


2283
01:22:41,706 --> 01:22:42,956
来为给每个用户提供


2284
01:22:42,956 --> 01:22:45,006
个性化的体验


2285
01:22:45,006 --> 01:22:48,096
为了实现这些体验


2286
01:22:48,096 --> 01:22:49,726
我们使用了设备上的个性化信息


2287
01:22:50,426 --> 01:22:51,826
今年 我们把这一功能


2288
01:22:51,826 --> 01:22:53,766
也引入到了 Core ML 当中


2289
01:22:55,466 --> 01:22:56,666
这意味着你可以


2290
01:22:56,666 --> 01:22:59,156
使用来自单个用户的数据


2291
01:22:59,156 --> 01:23:01,046
更新 App 中的 Core ML 模型


2292
01:23:02,106 --> 01:23:07,716
这创造 [掌声]


2293
01:23:08,216 --> 01:23:09,736
这为用户创造了


2294
01:23:09,786 --> 01:23:11,796
一个更新的个性化模型


2295
01:23:12,786 --> 01:23:14,576
通过模型的个性化


2296
01:23:14,576 --> 01:23:16,196
你的 App 现在可以在


2297
01:23:16,196 --> 01:23:17,586
不损害用户隐私的情况下


2298
01:23:17,686 --> 01:23:19,086
在后台更新模型


2299
01:23:20,886 --> 01:23:22,206
Core ML 为机器学习模型


2300
01:23:22,206 --> 01:23:23,976
提供了最先进的平台


2301
01:23:23,976 --> 01:23:25,836
用 Create ML


2302
01:23:25,836 --> 01:23:27,386
构建 Core ML 模型


2303
01:23:27,386 --> 01:23:30,256
从未像现在这样容易


2304
01:23:30,256 --> 01:23:31,956
我们的框架旨在帮助所有开发者


2305
01:23:31,956 --> 01:23:35,156
只用几行代码就可以构建模型


2306
01:23:36,086 --> 01:23:36,976
今年 我们正在


2307
01:23:36,976 --> 01:23:38,506
进一步 开发 Create ML


2308
01:23:39,036 --> 01:23:41,026
它现在是一个 macOS 的 App 了


2309
01:23:41,026 --> 01:23:42,416
可以让你无需敲一行代码


2310
01:23:42,416 --> 01:23:42,926
就能从你的 Mac 上构建模型


2311
01:23:45,516 --> 01:23:50,586
[掌声]


2312
01:23:51,086 --> 01:23:51,956
你可以从许多不同的模型模板中


2313
01:23:51,956 --> 01:23:54,196
选择适合你的数据的模型


2314
01:23:54,456 --> 01:23:55,936
你可以使用不同的数据集


2315
01:23:55,936 --> 01:23:57,556
构建多个模型


2316
01:23:57,556 --> 01:24:00,236
并为每个模型定义参数


2317
01:24:00,566 --> 01:24:03,126
你可以在模型训练当中得到实时反馈


2318
01:24:04,116 --> 01:24:06,046
Create ML 支持图像分类


2319
01:24:06,046 --> 01:24:07,756
或文本分析等任务


2320
01:24:07,756 --> 01:24:09,846
的迁移学习


2321
01:24:10,496 --> 01:24:12,056
这将加快模型的训练


2322
01:24:12,056 --> 01:24:13,646
因为你只需要非常小的数据集


2323
01:24:13,646 --> 01:24:15,506
而且可以利用 Apple


2324
01:24:15,506 --> 01:24:17,296
优化过的经过大量预训练的模型


2325
01:24:18,816 --> 01:24:21,916
你可以对模型进行实验和预览


2326
01:24:22,476 --> 01:24:23,626
例如 你可以通过在 Mac 上


2327
01:24:23,626 --> 01:24:25,376
串流地使用


2328
01:24:25,376 --> 01:24:26,976
iPhone 的摄像头


2329
01:24:27,056 --> 01:24:29,826
来得到图像的预测结果


2330
01:24:30,116 --> 01:24:31,786
或者你可以使用 Mac 上的麦克风


2331
01:24:31,786 --> 01:24:34,216
来测试你的声音的分类模型


2332
01:24:35,646 --> 01:24:37,486
这是一大堆新功能


2333
01:24:37,486 --> 01:24:39,166
我们非常兴奋地想要看看


2334
01:24:39,166 --> 01:24:40,846
你们会用这些了不起的新的机器学习的能力


2335
01:24:40,846 --> 01:24:42,676
去做些什么


2336
01:24:43,546 --> 01:24:45,046
事实上 我们邀请了


2337
01:24:45,046 --> 01:24:46,426
一些开发人员来尝试所有的新东西


2338
01:24:46,426 --> 01:24:47,776
我们已经看到了一些


2339
01:24:47,776 --> 01:24:49,426
令人惊喜的结果


2340
01:24:50,256 --> 01:24:53,686
其中有一个结果特别不错


2341
01:24:53,686 --> 01:24:55,096
我们决定要和大家来分享


2342
01:24:55,556 --> 01:24:57,386
欢迎来自 Lumen Digital 的 Ben Harroway


2343
01:24:57,616 --> 01:24:59,366
给大家预览


2344
01:24:59,366 --> 01:25:01,706
他的 NoisyBook 这款新 App


2345
01:25:02,516 --> 01:25:06,686
[掌声]


2346
01:25:07,186 --> 01:25:07,746
>> 谢谢 Bill


2347
01:25:08,296 --> 01:25:10,026
大家好 我是来自 Lumen Digital 的 Ben


2348
01:25:10,026 --> 01:25:11,586
我正在开发一个全新的 App


2349
01:25:11,586 --> 01:25:14,286
NoisyBook


2350
01:25:18,156 --> 01:25:21,116
让我先给你们讲个故事


2351
01:25:21,306 --> 01:25:24,856
很久很久以前 在一片美丽的草地上


2352
01:25:24,856 --> 01:25:27,536
住着一个叫 Jack 的男孩


2353
01:25:27,946 --> 01:25:31,576
和他的奶牛 Daisy


2354
01:25:31,756 --> 01:25:35,046
Daisy [哞 牛的叫声]


2355
01:25:35,046 --> 01:25:37,006
一个神秘的人给了他们一些魔豆


2356
01:25:37,006 --> 01:25:39,116
这些魔豆长成了一根巨大的豆茎


2357
01:25:39,116 --> 01:25:41,796
高高地长到了云里面


2358
01:25:44,016 --> 01:25:45,286
[神秘的音乐声]


2359
01:25:45,286 --> 01:25:47,266
好吧 我想每个人都知道这个故事


2360
01:25:47,266 --> 01:25:49,116
让我们尝试一些真正不一样的东西吧


2361
01:25:50,306 --> 01:25:53,086
突然 一只爆炸的鸡


2362
01:25:55,126 --> 01:25:56,946
和它的朋友金色的老虎


2363
01:25:56,946 --> 01:26:00,516
[吼 老虎的咆哮声] 跳进了它们的


2364
01:26:00,516 --> 01:26:04,406
直升飞机里 [螺旋桨的嗡嗡声] 


2365
01:26:04,406 --> 01:26:06,976
飞进了森林里


2366
01:26:07,016 --> 01:26:08,046
[蟋蟀和鸟鸣声]


2367
01:26:08,046 --> 01:26:09,376
接着 你猜怎么着


2368
01:26:09,886 --> 01:26:12,976
它们都过上了幸福的生活


2369
01:26:13,016 --> 01:26:14,193
[音乐] >> 耶


2370
01:26:15,086 --> 01:26:16,516
>> 你能发出你在故事中


2371
01:26:16,516 --> 01:26:19,056
听到的动物的声音吗


2372
01:26:19,146 --> 01:26:20,136
>> 好了 我们玩的很开心


2373
01:26:20,326 --> 01:26:22,446
现在 NoisyBook 想让我们


2374
01:26:22,446 --> 01:26:23,666
重复一些我们在故事中


2375
01:26:23,666 --> 01:26:25,336
听到的动物的声音


2376
01:26:25,866 --> 01:26:27,416
我想我们在这个故事中


2377
01:26:27,466 --> 01:26:28,536
听到了一头牛 让我们试试这个吧


2378
01:26:29,566 --> 01:26:32,336
哞 牛出现了


2379
01:26:32,726 --> 01:26:34,076
我真不敢相信我站在这里


2380
01:26:34,076 --> 01:26:35,876
在这么多人面前


2381
01:26:35,876 --> 01:26:38,306
发出动物的叫声


2382
01:26:39,126 --> 01:26:41,016
我真是疯了 但令人惊讶的是


2383
01:26:41,206 --> 01:26:43,056
这个 App 使用了


2384
01:26:43,056 --> 01:26:45,336
一个声音分类模型


2385
01:26:45,336 --> 01:26:46,636
来识别声音并且认出了这是牛的声音


2386
01:26:48,326 --> 01:26:49,656
你也许还注意到了


2387
01:26:50,036 --> 01:26:51,526
NoisyBook 既能够


2388
01:26:51,566 --> 01:26:53,556
处理传统的故事


2389
01:26:53,686 --> 01:26:56,396
还能处理我们想象的故事


2390
01:26:56,766 --> 01:26:57,716
这其实超级的强大


2391
01:26:58,516 --> 01:27:00,026
多亏了 iOS 13 和 Create ML 中的


2392
01:27:00,026 --> 01:27:02,906
语音 声音以及 Core ML 的新功能


2393
01:27:02,906 --> 01:27:06,516
这一切都完全


2394
01:27:06,516 --> 01:27:08,766
是在设备上发生并运行的


2395
01:27:09,766 --> 01:27:11,086
这一切都是实时的


2396
01:27:11,416 --> 01:27:12,306
它运行在一个


2397
01:27:12,306 --> 01:27:13,706
自然语言的模型中


2398
01:27:13,866 --> 01:27:16,206
我已经训练了九万多行文本


2399
01:27:17,146 --> 01:27:19,886
多亏了这些功能


2400
01:27:20,506 --> 01:27:21,716
我可以把一个我近两年来


2401
01:27:21,716 --> 01:27:22,866
苦苦思索地想法


2402
01:27:22,866 --> 01:27:24,666
在短短几天内


2403
01:27:24,666 --> 01:27:26,146
就把其中的一些


2404
01:27:26,146 --> 01:27:27,936
神奇的新功能给实现出来


2405
01:27:29,136 --> 01:27:30,696
我为它感到非常自豪


2406
01:27:30,696 --> 01:27:31,896
在今年晚些时候


2407
01:27:31,896 --> 01:27:33,256
在 App Store 上线以后


2408
01:27:33,256 --> 01:27:35,706
我真心希望你们记得去看看它


2409
01:27:35,706 --> 01:27:43,686
谢谢 [掌声]


2410
01:27:44,186 --> 01:27:44,636
>> 谢谢 Ben


2411
01:27:45,366 --> 01:27:46,596
这真的非常酷


2412
01:27:46,596 --> 01:27:49,493
我想我的孩子们会喜欢的


2413
01:27:50,256 --> 01:27:52,266
现在 Apple 最大的机器学习应用之一


2414
01:27:52,266 --> 01:27:54,826
是 Siri


2415
01:27:55,556 --> 01:27:57,916
Siri 是目前为止


2416
01:27:57,916 --> 01:27:59,586
世界上最受欢迎的智能助手


2417
01:27:59,976 --> 01:28:02,176
每月有超过


2418
01:28:02,176 --> 01:28:05,156
5 亿个活跃设备


2419
01:28:05,156 --> 01:28:06,666
发出超过 150 亿次请求


2420
01:28:07,286 --> 01:28:09,176
这些数字令人震惊


2421
01:28:09,766 --> 01:28:12,686
Siri 适用于所有 Apple 设备


2422
01:28:13,396 --> 01:28:15,226
有了 Siri 你的用户可以用


2423
01:28:15,226 --> 01:28:17,596
新的方式与你的 App 互动


2424
01:28:18,166 --> 01:28:19,566
走在路上 佩戴着 AirPods


2425
01:28:20,266 --> 01:28:22,296
手里不拿着设备的站在房间的另一头


2426
01:28:22,626 --> 01:28:24,396
甚至是在车里


2427
01:28:25,046 --> 01:28:27,066
现在 成千上万的 App


2428
01:28:27,116 --> 01:28:30,416
通过 Siri 的快捷指令和 Siri 集成在一起


2429
01:28:31,466 --> 01:28:33,196
我们创建了 Siri 快捷指令


2430
01:28:33,356 --> 01:28:35,136
让你可以用很少的工作量


2431
01:28:35,136 --> 01:28:37,196
以一种用户可发现的方式


2432
01:28:37,666 --> 01:28:39,746
展示你的 App 中


2433
01:28:39,746 --> 01:28:41,936
已有的功能


2434
01:28:43,026 --> 01:28:44,186
你可以使用 添加至 Siri 按钮


2435
01:28:44,226 --> 01:28:46,016
来让你的快捷指令


2436
01:28:46,106 --> 01:28:48,016
可以被用户发现


2437
01:28:48,016 --> 01:28:50,676
并且教用户如何利用声音来使用你的 App


2438
01:28:51,766 --> 01:28:52,936
这很重要


2439
01:28:52,936 --> 01:28:54,436
因为语音功能


2440
01:28:54,436 --> 01:28:55,926
很难被用户发现


2441
01:28:56,906 --> 01:28:58,396
我们简化了设置


2442
01:28:58,396 --> 01:29:00,216
使用户不再需要


2443
01:29:00,216 --> 01:29:01,326
录入进去某个短语


2444
01:29:01,326 --> 01:29:03,726
你给出一个建议的短语


2445
01:29:03,726 --> 01:29:05,036
他们轻轻一点就把它加进去了


2446
01:29:06,516 --> 01:29:11,556
[掌声]


2447
01:29:12,056 --> 01:29:12,906
今年我们最大的要求


2448
01:29:12,906 --> 01:29:14,236
是在快捷指令中


2449
01:29:14,236 --> 01:29:16,016
支持参数配置


2450
01:29:16,586 --> 01:29:20,566
所以我们让快捷指令具备了


2451
01:29:20,916 --> 01:29:22,906
对话的能力 这就可以让你的用户


2452
01:29:22,966 --> 01:29:24,596
通过回答 Siri 中的问题


2453
01:29:24,966 --> 01:29:26,766
来与你的 App 互动


2454
01:29:27,606 --> 01:29:28,816
举例来说 如果我正在


2455
01:29:28,816 --> 01:29:29,986
选择做个什么菜 我可以运行


2456
01:29:29,986 --> 01:29:31,936
一个 Pana 的快捷指令 Pana 是我的食谱 App


2457
01:29:31,936 --> 01:29:34,296
之后看一下我所有的最喜欢吃的菜的列表


2458
01:29:34,946 --> 01:29:36,476
当我从列表中选完后


2459
01:29:36,476 --> 01:29:38,746
它会打开具体的食谱并且开始播放


2460
01:29:39,386 --> 01:29:42,306
今年 快捷指令 App


2461
01:29:42,306 --> 01:29:45,376
被内建进了 iOS 和 iPadOS 中


2462
01:29:46,326 --> 01:29:47,896
这意味着每个用户


2463
01:29:47,896 --> 01:29:49,466
都有机会去尝试它


2464
01:29:49,466 --> 01:29:52,566
这款 App 内现在也汇集了


2465
01:29:52,566 --> 01:29:54,446
你的 App 提供的快捷指令


2466
01:29:55,816 --> 01:29:57,906
根据各方的需求


2467
01:29:57,906 --> 01:29:59,976
我们现在正在在里面加入自动化的支持


2468
01:30:00,516 --> 01:30:05,976
[掌声]


2469
01:30:06,476 --> 01:30:08,146
它允许用户为


2470
01:30:08,146 --> 01:30:09,906
在何时运行某个快捷方式


2471
01:30:09,906 --> 01:30:11,286
设置特定的触发器


2472
01:30:12,106 --> 01:30:14,536
而且有很多选择


2473
01:30:14,806 --> 01:30:16,016
你可以根据一天的时间


2474
01:30:16,016 --> 01:30:18,056
来设置触发器


2475
01:30:18,056 --> 01:30:19,646
当你开始戴上你的 Apple Watch 开始锻炼的时候


2476
01:30:19,956 --> 01:30:22,346
当你连上 CarPlay 的时候等等情况


2477
01:30:24,006 --> 01:30:26,086
编辑器现在支持对


2478
01:30:26,086 --> 01:30:27,586
App 的操作进行完整配置


2479
01:30:27,616 --> 01:30:29,416
包括利用参数


2480
01:30:29,416 --> 01:30:32,026
将信息传入或是


2481
01:30:32,026 --> 01:30:33,936
传出的操作


2482
01:30:34,866 --> 01:30:36,436
这样 你的 App 的动作


2483
01:30:36,486 --> 01:30:38,016
就可以与其他 App 的动作


2484
01:30:38,016 --> 01:30:40,606
通过多步快捷指令给组合起来


2485
01:30:42,726 --> 01:30:44,626
现在我们假设你需要为家人订一顿晚餐


2486
01:30:44,946 --> 01:30:47,366
孩子们很饿了 你需要快一点


2487
01:30:47,986 --> 01:30:48,996
你可以有一个使用


2488
01:30:48,996 --> 01:30:50,666
Caviar App 的快捷指令


2489
01:30:50,666 --> 01:30:52,586
可以让你选择一家餐厅


2490
01:30:53,516 --> 01:30:59,766
选择一顿饭 之后订好菜


2491
01:30:59,766 --> 01:31:02,046
再给所有的家人发短信


2492
01:31:02,046 --> 01:31:04,246
告诉他们吃什么几点送到


2493
01:31:05,246 --> 01:31:06,786
这就是把你的 App 的强大功能


2494
01:31:06,786 --> 01:31:09,106
和 Siri 快捷指令结合起来


2495
01:31:09,106 --> 01:31:11,736
来让日常任务变得非常简单


2496
01:31:13,466 --> 01:31:18,636
当然 [掌声]


2497
01:31:19,136 --> 01:31:20,416
当然 快捷指令可以在


2498
01:31:20,416 --> 01:31:23,416
iPhone iPad Apple Watch


2499
01:31:23,736 --> 01:31:25,096
以及 HomePod 上运行


2500
01:31:25,616 --> 01:31:27,716
这些就是我们对 Siri 的更新


2501
01:31:28,516 --> 01:31:34,546
[掌声]


2502
01:31:35,046 --> 01:31:36,566
现在 我想请 Jeff 上台来为大家讲解


2503
01:31:36,566 --> 01:31:39,316
增强现实技术的最新进展 谢谢


2504
01:31:40,516 --> 01:31:42,606
[掌声]


2505
01:31:43,106 --> 01:31:43,546
>> 谢谢 Bill


2506
01:31:43,546 --> 01:31:44,886
我很高兴今天能在这里


2507
01:31:44,886 --> 01:31:46,246
谈论增强现实


2508
01:31:47,276 --> 01:31:49,136
AR 可以帮助你把


2509
01:31:49,136 --> 01:31:51,496
困难 高成本或不可能的事情


2510
01:31:51,496 --> 01:31:53,056
进行可视化呈现


2511
01:31:53,686 --> 01:31:55,516
自从我们引入 ARKit 之后


2512
01:31:55,836 --> 01:31:58,746
我们看到了相关 App 的惊人增长


2513
01:31:59,296 --> 01:32:02,296
有人可能认为 AR 只是为了娱乐


2514
01:32:02,336 --> 01:32:04,736
但我们已经看到了


2515
01:32:04,736 --> 01:32:06,576
它在教育 企业 贸易


2516
01:32:06,986 --> 01:32:09,636
等领域的巨大应用


2517
01:32:11,106 --> 01:32:13,026
贸易方面的应用


2518
01:32:13,426 --> 01:32:15,546
特别令人印象深刻


2519
01:32:15,546 --> 01:32:17,126
Home Depot Target 以及 Wayfair


2520
01:32:17,126 --> 01:32:19,856
都有成千上万的产品


2521
01:32:19,856 --> 01:32:21,756
可以在 AR 中预览


2522
01:32:21,756 --> 01:32:26,206
ARKit 将 USDZ 文件格式


2523
01:32:26,306 --> 01:32:28,926
和快速查看聚集在一起


2524
01:32:29,846 --> 01:32:31,596
成为世界上第一个大众市场的


2525
01:32:31,846 --> 01:32:34,476
增强现实的商务解决方案


2526
01:32:34,766 --> 01:32:37,156
事实上 当人们可以


2527
01:32:37,156 --> 01:32:39,226
在增强现实中查看


2528
01:32:39,276 --> 01:32:41,476
他们的产品时


2529
01:32:41,476 --> 01:32:43,486
Wayfair 的购买量增长了三倍多


2530
01:32:45,316 --> 01:32:46,806
我们非常喜欢这个


2531
01:32:46,806 --> 01:32:47,566
真实的商业用例


2532
01:32:47,566 --> 01:32:48,716
这是增强现实在商业中的


2533
01:32:48,716 --> 01:32:51,046
一个很好的实际业务用例


2534
01:32:52,476 --> 01:32:53,386
我们想通过


2535
01:32:53,386 --> 01:32:55,006
宣布 Apple Pay 将在今年秋季


2536
01:32:55,166 --> 01:32:56,316
与 AR Quick Look 直接集成


2537
01:32:56,316 --> 01:32:59,356
来延续这一势头


2538
01:32:59,606 --> 01:33:00,866
这使得用户可以更简单地


2539
01:33:00,946 --> 01:33:03,636
在增强现实场景下


2540
01:33:04,276 --> 01:33:05,486
去试戴像是眼镜这样的商品


2541
01:33:05,976 --> 01:33:07,406
并直接购买它


2542
01:33:07,506 --> 01:33:12,366
用于 iOS 和 iPadOS 的 ARKit


2543
01:33:12,916 --> 01:33:16,896
是世界上最大的增强现实平台


2544
01:33:16,896 --> 01:33:18,746
拥有数亿个


2545
01:33:18,746 --> 01:33:20,986
可启用的设备


2546
01:33:21,046 --> 01:33:22,946
我们从很多开发者那里听到


2547
01:33:22,946 --> 01:33:24,016
它们想要来利用


2548
01:33:24,016 --> 01:33:25,196
这个大好的机会


2549
01:33:25,196 --> 01:33:27,746
但是可能不知道从何开始


2550
01:33:28,376 --> 01:33:29,806
或者是你可能从未使用过 3D


2551
01:33:29,806 --> 01:33:31,676
觉得它可能有点难以招架


2552
01:33:31,676 --> 01:33:33,646
所以 我们听取了大家的意见


2553
01:33:33,816 --> 01:33:35,576
我们很兴奋地要宣布三项技术


2554
01:33:36,346 --> 01:33:38,376
来帮助你更容易地


2555
01:33:38,376 --> 01:33:41,806
开发增强现实 App


2556
01:33:42,846 --> 01:33:45,916
ARKit RealityKit 以及 Reality Composer


2557
01:33:45,916 --> 01:33:47,816
它们结合在一起提供了


2558
01:33:48,026 --> 01:33:50,336
所需的框架和工具


2559
01:33:50,336 --> 01:33:51,646
来帮助你快速轻松地来开发


2560
01:33:51,946 --> 01:33:57,136
增强现实 App 和体验


2561
01:33:57,136 --> 01:33:58,526
以 Reality Composer 为开端


2562
01:33:59,036 --> 01:34:00,656
你可以创造引人瞩目的 AR 体验


2563
01:34:00,656 --> 01:34:03,706
即便是你从来没用过 3D 相关的技术


2564
01:34:03,966 --> 01:34:05,766
它提供了一个直观的页面


2565
01:34:05,766 --> 01:34:06,626
你所看到的


2566
01:34:06,626 --> 01:34:08,856
和你所得到的


2567
01:34:09,226 --> 01:34:11,166
都能在 Xcode 中得到无缝的集成


2568
01:34:12,336 --> 01:34:13,326
为了个大家展示 Reality Composer


2569
01:34:13,326 --> 01:34:14,796
我想邀请我的同事


2570
01:34:14,796 --> 01:34:16,736
Shrudi 到台上来


2571
01:34:17,516 --> 01:34:22,636
[掌声]


2572
01:34:23,136 --> 01:34:25,206
>> 谢谢你 Jeff 很高兴来到这里


2573
01:34:25,206 --> 01:34:27,656
我有这个很棒的旅行 App


2574
01:34:27,656 --> 01:34:29,376
上面显示了一些活动


2575
01:34:29,636 --> 01:34:31,326
是在夏威夷主岛上举办的


2576
01:34:31,976 --> 01:34:33,696
如果客户选择使用直升机旅行


2577
01:34:33,696 --> 01:34:37,136
App 将显示直升机的路径


2578
01:34:37,136 --> 01:34:40,226
我们如何使用 AR


2579
01:34:40,226 --> 01:34:42,746
来为用户提供更好的实际旅行体验


2580
01:34:42,746 --> 01:34:44,846
我能通过添加一个按钮


2581
01:34:44,846 --> 01:34:47,396
在这个已经存在的 App 上来提高 AR 体验


2582
01:34:47,946 --> 01:34:48,976
让我们来看看这是如何实现的


2583
01:34:49,776 --> 01:34:52,566
首先我使用 SwiftUI 创建一个按钮


2584
01:34:53,626 --> 01:34:55,616
然后将这个按钮添加到


2585
01:34:55,876 --> 01:34:57,016
我已经做好的视图上


2586
01:34:58,006 --> 01:35:01,286
接着我在 Reality Composer
打开一个空的项目文件


2587
01:35:01,286 --> 01:35:02,946
并集成到我的 Xcode 项目中


2588
01:35:03,296 --> 01:35:06,216
只需要通过在 Xcode 简单的拖放就能实现


2589
01:35:06,856 --> 01:35:09,946
为了把我的 AR 场景加载到


2590
01:35:09,946 --> 01:35:11,886
Reality Composer 项目文件


2591
01:35:12,106 --> 01:35:14,796
我导入 Reality Composer 


2592
01:35:14,796 --> 01:35:17,526
然后为此 AR 创建一个新的视图


2593
01:35:18,016 --> 01:35:22,186
哦抱歉 是通过 SwiftUI 创建一个新的视图


2594
01:35:22,356 --> 01:35:25,736
这就是你需要的所有代码


2595
01:35:26,206 --> 01:35:31,706
用来在你已有的 App 上添加一个 AR 体验


2596
01:35:31,706 --> 01:35:33,166
接下来看看还有什么有趣的东西


2597
01:35:33,166 --> 01:35:35,496
当我在使用 Reality Composer
创建我的 AR 体验时


2598
01:35:36,106 --> 01:35:37,926
我打开一个空的 Reality 项目


2599
01:35:38,986 --> 01:35:40,836
首先加载一个定制的


2600
01:35:40,836 --> 01:35:42,536
USTZ 夏威夷模型


2601
01:35:47,046 --> 01:35:49,676
很好 接着我想标记


2602
01:35:49,676 --> 01:35:51,256
我的直升机之旅的开始


2603
01:35:51,506 --> 01:35:53,366
为此我可以使用


2604
01:35:53,366 --> 01:35:54,956
Reality Composer 的 built-in 内容库


2605
01:35:54,956 --> 01:35:57,536
它提供了数百个


2606
01:35:57,536 --> 01:35:59,476
专业级 3D 内容给开发者


2607
01:35:59,476 --> 01:36:02,976
我将使用一个简单的 sphere


2608
01:36:08,046 --> 01:36:09,356
我能改变 内容的外观


2609
01:36:09,776 --> 01:36:12,206
通过给它应用一个不同的材质


2610
01:36:14,086 --> 01:36:16,736
正如你所见将内容


2611
01:36:16,736 --> 01:36:20,246
通过 Reality Composer 放在 3D 中
是非常简单且直观的


2612
01:36:21,616 --> 01:36:24,196
我们来看看除此之外我们还能做什么


2613
01:36:24,196 --> 01:36:25,646
比如添加一个酷炫的褪色效果


2614
01:36:25,646 --> 01:36:27,446
当场景开始的时候显示在场景之上


2615
01:36:27,526 --> 01:36:29,886
我可以通过打开


2616
01:36:29,886 --> 01:36:31,986
Behaviors panel 且创建一个


2617
01:36:31,986 --> 01:36:34,336
自定义的操作


2618
01:36:34,336 --> 01:36:35,956
这个操作在场景开始时被触发


2619
01:36:35,956 --> 01:36:39,806
首先我添加一个动作去隐藏


2620
01:36:39,806 --> 01:36:41,216
场景中所有的内容


2621
01:36:41,706 --> 01:36:45,666
然后场景开始


2622
01:36:45,666 --> 01:36:47,316
接着添加另一个动作


2623
01:36:47,316 --> 01:36:50,096
使场景在经过一定的时间后出现


2624
01:36:50,096 --> 01:36:52,916
我们来看看它的效果如何


2625
01:36:53,286 --> 01:36:58,086
棒极了 在 Mac 上开发 AR 很方便


2626
01:36:58,086 --> 01:37:02,626
但是它也有一些挑战是要去猜测


2627
01:37:02,626 --> 01:37:05,086
内容的规模以及


2628
01:37:05,086 --> 01:37:06,176
放置在现实中的样子


2629
01:37:06,726 --> 01:37:08,016
这也是为什么我们创造 Reality Composer


2630
01:37:08,016 --> 01:37:11,956
在 macOS


2631
01:37:11,956 --> 01:37:13,266
以及 iPadOS 和 iOS 上去消除


2632
01:37:13,266 --> 01:37:14,186
开发中的猜测


2633
01:37:14,186 --> 01:37:17,226
所以我会把它交给 Jeff


2634
01:37:17,226 --> 01:37:19,176
看看我们到目前为止在 iPad 上有什么


2635
01:37:20,866 --> 01:37:21,896
>> 非常感谢 Shrudi


2636
01:37:22,426 --> 01:37:25,386
所以这是一个 iPad 上的 Reality Composer 


2637
01:37:27,146 --> 01:37:29,236
它同样有着很好的特点


2638
01:37:29,236 --> 01:37:31,256
与你在 Mac 上看到的 Reality Composer 一样


2639
01:37:31,426 --> 01:37:32,376
我们可以看到


2640
01:37:32,376 --> 01:37:33,936
Shrudi 交出并完成了它


2641
01:37:33,936 --> 01:37:34,996
通过使用我们的最终作品


2642
01:37:35,466 --> 01:37:37,066
所以我们有人用 Adobe Arrow


2643
01:37:37,066 --> 01:37:39,736
创建我们的最终文件或


2644
01:37:39,736 --> 01:37:41,986
我们的最终作品而且我们将它放到场景中


2645
01:37:41,986 --> 01:37:43,996
所以我将采用 Shrudi 所拥有方式的代理艺术


2646
01:37:43,996 --> 01:37:46,846
我将用我们的新作品替换它


2647
01:37:46,846 --> 01:37:48,666
让我检查一下这是否正确


2648
01:37:48,736 --> 01:37:51,346
神奇 这是我们最后的直升机


2649
01:37:51,566 --> 01:37:52,906
而且我也希望引入


2650
01:37:52,936 --> 01:37:54,396
与之相关的动画


2651
01:37:54,466 --> 01:37:56,266
这很简单 如果你记得


2652
01:37:56,266 --> 01:37:57,826
她创建了这种行为


2653
01:37:57,826 --> 01:37:58,796
所以我们要看一下这种行为


2654
01:37:58,796 --> 01:38:01,406
我们要做的就是添加一个额外的动作


2655
01:38:03,136 --> 01:38:05,396
所以我们我们找 USDZ 动画


2656
01:38:05,396 --> 01:38:07,466
用来引入与文件一起使用的动画


2657
01:38:08,876 --> 01:38:10,286
太神奇了 看起来很好


2658
01:38:10,286 --> 01:38:12,226
让我们预览一下


2659
01:38:12,956 --> 01:38:15,966
棒极了 我们隐藏了行为标签


2660
01:38:16,086 --> 01:38:17,346
这就是我们想要的


2661
01:38:19,216 --> 01:38:20,786
完美 我们再使用 AR 看看


2662
01:38:20,786 --> 01:38:22,816
你可以用 iPad 来做


2663
01:38:25,166 --> 01:38:34,396
哇哦 再试一次 太神奇了


2664
01:38:34,396 --> 01:38:36,026
这就是我想看到的样子


2665
01:38:36,026 --> 01:38:37,276
我们同样可以播放


2666
01:38:39,766 --> 01:38:40,916
完美 我们得到了


2667
01:38:40,916 --> 01:38:42,376
在直升机上游览岛屿的动画


2668
01:38:42,636 --> 01:38:44,656
这在我们的旅行 App 中看起来很棒


2669
01:38:49,456 --> 01:38:50,836
这就是 iPad 的 Reality Composer


2670
01:38:51,926 --> 01:38:53,606
而且你惊奇的发现


2671
01:38:53,606 --> 01:38:57,466
你能够获得同样出色的易用性和无缝体验


2672
01:38:57,606 --> 01:38:59,476
无论是在 macOS 或 iPadOS 或者 iOS


2673
01:38:59,616 --> 01:39:00,766
使用 Reality Composer


2674
01:39:01,516 --> 01:39:08,576
[掌声]


2675
01:39:09,076 --> 01:39:09,836
现在来说说 RealityKit


2676
01:39:10,066 --> 01:39:11,146
RealityKit 是一个现代的


2677
01:39:11,296 --> 01:39:12,856
高性能的 3D 引擎


2678
01:39:12,856 --> 01:39:15,076
自上而下设计用于


2679
01:39:15,076 --> 01:39:17,176
增强现实渲染和模拟


2680
01:39:18,056 --> 01:39:19,236
而且因为它


2681
01:39:19,376 --> 01:39:20,916
作为一个框架能够使你


2682
01:39:20,916 --> 01:39:22,606
非常容易的将 2D App


2683
01:39:22,606 --> 01:39:24,536
延申到 3D 中


2684
01:39:25,546 --> 01:39:26,876
RealityKit 使用现代的


2685
01:39:26,966 --> 01:39:28,736
基于可见的渲染和材质


2686
01:39:29,536 --> 01:39:30,816
它是一个数据驱动的渲染系统和


2687
01:39:30,876 --> 01:39:35,456
一个多线程渲染器


2688
01:39:35,456 --> 01:39:37,666
它针对 Apple 的 GPU 进行了高度的优化


2689
01:39:39,466 --> 01:39:41,426
与此同时还有很重要的一点


2690
01:39:41,466 --> 01:39:45,236
我们集成了 ARKit 场景理解到 RealityKit 中


2691
01:39:45,936 --> 01:39:48,486
这意味着 ARKit


2692
01:39:48,486 --> 01:39:49,736
会更多地关注环境


2693
01:39:49,856 --> 01:39:50,986
它会自动的


2694
01:39:50,986 --> 01:39:52,596
将你与虚拟场景进行同步


2695
01:39:52,686 --> 01:39:56,366
我们今天早晨看到了 RealityKit 的操作


2696
01:39:57,116 --> 01:39:58,166
我们来仔细看看


2697
01:39:59,586 --> 01:40:00,676
来看看究竟发生了什么


2698
01:40:01,876 --> 01:40:03,996
你看到的景象


2699
01:40:03,996 --> 01:40:05,086
是基于图像的照明


2700
01:40:05,086 --> 01:40:07,416
模糊运动以及相机效果


2701
01:40:07,416 --> 01:40:11,076
比如景深和相机噪声之类的东西


2702
01:40:11,076 --> 01:40:14,096
它真实地模糊了虚拟与现实之间的界限


2703
01:40:14,876 --> 01:40:17,736
并且你可以自动获得 RealityKit 的这些功能


2704
01:40:20,006 --> 01:40:21,546
你可以访问 RealityKit 通过使用


2705
01:40:21,546 --> 01:40:23,386
一个新的原生 Swift API 框架


2706
01:40:23,386 --> 01:40:25,186
它具有很多


2707
01:40:25,186 --> 01:40:26,936
Swift 主要功能的有点


2708
01:40:26,936 --> 01:40:28,686
允许你编写简洁紧凑的代码


2709
01:40:30,536 --> 01:40:33,766
概念日志和集合是直接集成的


2710
01:40:33,916 --> 01:40:35,596
打个比方


2711
01:40:35,706 --> 01:40:37,646
你可以轻轻松松加载 AR 素材


2712
01:40:38,006 --> 01:40:40,326
并将其直接附加到锚点


2713
01:40:40,996 --> 01:40:43,146
协议扩展提供了


2714
01:40:43,236 --> 01:40:44,606
对实体属性的轻松访问


2715
01:40:44,606 --> 01:40:46,666
允许你再这种快速访问


2716
01:40:46,726 --> 01:40:48,696
诸如灯光


2717
01:40:48,696 --> 01:40:50,706
或阴影之类的组件


2718
01:40:50,706 --> 01:40:51,776
并减少运行时检查的需要


2719
01:40:53,296 --> 01:40:54,366
这也意味着你可以


2720
01:40:54,366 --> 01:40:57,006
使用强类型的方式处理实体


2721
01:40:57,446 --> 01:40:58,856
我们在这里


2722
01:40:58,966 --> 01:41:00,966
对一个实体 施加一个角度的力


2723
01:41:00,966 --> 01:41:03,976
这是你在这个场景中所需要的全部代码


2724
01:41:08,226 --> 01:41:09,496
最后但不是最重要的是


2725
01:41:09,566 --> 01:41:14,406
今天是我们的增强现实框架 AR 工具包 3 的新版本


2726
01:41:15,666 --> 01:41:18,686
我们采用了世界上最大的 AR 平台


2727
01:41:18,686 --> 01:41:22,126
并通过新的深入反向功能使其更加强大


2728
01:41:24,036 --> 01:41:26,076
自从推出 ARKit 以来


2729
01:41:26,076 --> 01:41:27,306
我们已经有很多开发人员


2730
01:41:27,306 --> 01:41:29,896
要求能够同时使用前置和后置摄像头


2731
01:41:30,326 --> 01:41:32,346
好 在 ARKit 3 中你将可以实现这个功能


2732
01:41:32,436 --> 01:41:34,776
所以你可以 没错


2733
01:41:34,776 --> 01:41:35,966
同时使用两个摄像头


2734
01:41:36,186 --> 01:41:38,186
[掌声]


2735
01:41:38,356 --> 01:41:39,666
这使你可以使用面部跟踪


2736
01:41:39,666 --> 01:41:42,936
直接驱动增强现实体验


2737
01:41:44,356 --> 01:41:45,416
正如 Craig 在今天早晨谈到的那样


2738
01:41:45,416 --> 01:41:47,176
正确的识别出


2739
01:41:47,176 --> 01:41:49,506
一个人在 AR 场景中


2740
01:41:49,606 --> 01:41:50,846
是一个非常困难的问题


2741
01:41:51,076 --> 01:41:52,296
你每次都会看到它


2742
01:41:52,296 --> 01:41:53,586
就在有人在虚拟物体面前走过时


2743
01:41:55,636 --> 01:41:56,816
为了解决这个问题


2744
01:41:56,816 --> 01:41:57,946
我们构建了一种先进的机器学习算法


2745
01:41:57,946 --> 01:41:59,726
可以确定


2746
01:41:59,796 --> 01:42:01,606
哪些像素是一个人


2747
01:42:01,736 --> 01:42:03,326
此人在场景中的深度


2748
01:42:03,326 --> 01:42:05,826
并使用其信息来允许我们


2749
01:42:05,826 --> 01:42:08,606
正确的渲染场景中的虚拟对象


2750
01:42:09,236 --> 01:42:10,546
随着人们的遮挡剔除


2751
01:42:10,546 --> 01:42:12,526
这种全新的体验像 Minecraft Earth 的演示那样


2752
01:42:12,526 --> 01:42:15,976
如你所见是完全有可能的


2753
01:42:16,516 --> 01:42:20,546
[掌声]


2754
01:42:21,046 --> 01:42:23,696
非常神奇 最后我建立了一个系统


2755
01:42:23,696 --> 01:42:27,066
用来使人与虚拟的内容进行交互


2756
01:42:27,066 --> 01:42:28,506
ARKit 3 能够实时的捕捉


2757
01:42:28,566 --> 01:42:30,786
一个人的动作


2758
01:42:31,256 --> 01:42:34,966
而且只需要用 iPad 或 iPhone 上的
RGB 摄像头就可以实现


2759
01:42:35,906 --> 01:42:37,426
我们再次使用机器学习算法


2760
01:42:37,846 --> 01:42:39,226
去追踪一个人


2761
01:42:39,226 --> 01:42:42,246
构建一个二维棒形图


2762
01:42:42,586 --> 01:42:44,706
并获取这个图形


2763
01:42:44,706 --> 01:42:48,366
然后从中推断出一个三维运动或将其提升到三维


2764
01:42:49,256 --> 01:42:50,796
二维骨架和三维骨架


2765
01:42:50,796 --> 01:42:52,146
对于开发人员都是可用的


2766
01:42:52,656 --> 01:42:54,436
三维具有超过 90 个铰接接头


2767
01:42:54,436 --> 01:42:57,946
并提供与 FaceKit 相同的易用性


2768
01:43:01,046 --> 01:43:02,206
这些是我们的新技术


2769
01:43:02,206 --> 01:43:05,836
ARKit 3 RealityKit


2770
01:43:05,836 --> 01:43:08,436
以及 Reality Composer 都是工具和框架


2771
01:43:08,486 --> 01:43:10,226
它们能够使任何人都可以轻松的


2772
01:43:10,306 --> 01:43:15,226
构建令人惊讶的 AR 体验


2773
01:43:15,226 --> 01:43:18,346
今天我们想做一些有趣的事情


2774
01:43:18,396 --> 01:43:20,786
所以我们在会议上有了一个有趣的 App


2775
01:43:21,396 --> 01:43:22,706
你可能会卡看到它 SwiftStrike


2776
01:43:23,696 --> 01:43:25,036
我们正在制作一个桌面版本


2777
01:43:25,036 --> 01:43:27,116
作为今天的开发人员样例


2778
01:43:27,206 --> 01:43:30,906
它使用了 RealityKit ARKit 3


2779
01:43:30,906 --> 01:43:32,206
以及 Reality Composer 并且为你的 App


2780
01:43:32,246 --> 01:43:35,476
提供了一个良好的起点


2781
01:43:36,516 --> 01:43:39,116
[音乐]


2782
01:43:39,616 --> 01:43:40,976
太有趣了


2783
01:43:41,516 --> 01:43:44,036
[掌声]


2784
01:43:44,536 --> 01:43:47,546
谢谢 [掌声]


2785
01:43:48,046 --> 01:43:49,286
当然 Metal 在我们的设备上


2786
01:43:49,286 --> 01:43:51,686
为 AR 提供了很多功能


2787
01:43:51,686 --> 01:43:52,706
为了告诉你更多关于


2788
01:43:52,706 --> 01:43:54,216
Metal 的新内容


2789
01:43:54,216 --> 01:43:55,576
我想欢迎 Jeremy 到台上来


2790
01:43:56,516 --> 01:43:58,836
[掌声]


2791
01:43:59,336 --> 01:44:01,556
>> 谢谢你 Jeff


2792
01:44:02,446 --> 01:44:04,096
Metal 是 Apple 的一个现代的


2793
01:44:04,346 --> 01:44:06,176
高性能 GPU 编程 API


2794
01:44:06,176 --> 01:44:08,056
它应用于图形和计算


2795
01:44:08,186 --> 01:44:09,586
它非常容易使用


2796
01:44:09,586 --> 01:44:12,106
无论是对初学者或专家


2797
01:44:12,106 --> 01:44:15,356
它带来了惊人的性能提升


2798
01:44:15,416 --> 01:44:18,896
支持比 OpenGL 多 100 倍的绘图调用


2799
01:44:18,896 --> 01:44:20,606
并实现一个全新一带的


2800
01:44:20,656 --> 01:44:22,476
高级图形性能


2801
01:44:23,696 --> 01:44:25,006
这是因为 Metal 使你的 App


2802
01:44:25,186 --> 01:44:30,046
可以直接控制作为 Apple 核心产品的 GPU


2803
01:44:30,526 --> 01:44:33,116
而且这些 GPU 现在拥有


2804
01:44:33,116 --> 01:44:35,856
超过 14 亿个支持 Metal 支持系统


2805
01:44:36,206 --> 01:44:39,786
从 iPhone 到 iPad 再到全新的 Mac Pro


2806
01:44:40,536 --> 01:44:41,606
事实上所有 Apple 的平台


2807
01:44:41,666 --> 01:44:42,986
现在都是在 Metal 上运行的


2808
01:44:43,546 --> 01:44:45,006
从我们流畅的用户界面


2809
01:44:45,006 --> 01:44:47,026
到 RealityKit 中最新的三维渲染


2810
01:44:47,026 --> 01:44:48,856
再到我们先进的


2811
01:44:48,856 --> 01:44:50,126
摄像机处理流程


2812
01:44:50,436 --> 01:44:51,906
我们无处不在使用 Metal


2813
01:44:52,446 --> 01:44:56,006
你也一样 为了帮助你做到这一点


2814
01:44:56,006 --> 01:44:57,946
今年我们专注于这三个关键领域


2815
01:44:58,496 --> 01:45:00,446
我们让 Metal 使用起来更加方便


2816
01:45:00,996 --> 01:45:02,766
我们已经启用了全新级别的


2817
01:45:02,766 --> 01:45:04,986
高性能 GPU 计算


2818
01:45:05,256 --> 01:45:07,036
与此同时我们增强了 Metal


2819
01:45:07,036 --> 01:45:10,046
为最苛刻的专业 App 开发人员以及客户


2820
01:45:10,986 --> 01:45:13,386
首先使用 Metal 令人难以置信的


2821
01:45:13,386 --> 01:45:15,606
API 和 GPU 着色语言


2822
01:45:15,606 --> 01:45:17,276
你可以开始使用


2823
01:45:17,276 --> 01:45:19,866
我们强大的开发人员工具


2824
01:45:19,866 --> 01:45:23,156
来对 GPU 进行调试 分析以及优化


2825
01:45:23,576 --> 01:45:25,886
我们使这些工具变得更好


2826
01:45:26,516 --> 01:45:28,356
我们添加了 Metal 的全支持


2827
01:45:28,356 --> 01:45:30,626
在 iOS 和 Xcode 上


2828
01:45:31,041 --> 01:45:33,041
[掌声]


2829
01:45:33,066 --> 01:45:34,366
我们很高兴你对它感到兴奋


2830
01:45:34,366 --> 01:45:35,546
我们也感到很兴奋


2831
01:45:35,906 --> 01:45:38,476
你现在可以直接在模拟器中使用 Metal


2832
01:45:38,476 --> 01:45:39,736
并且自动获取主要的


2833
01:45:39,736 --> 01:45:41,236
性能提升


2834
01:45:41,236 --> 01:45:43,726
挡在使用 UIKit Maps


2835
01:45:43,726 --> 01:45:45,676
以及所有基于 Metal 的框架系统时


2836
01:45:45,676 --> 01:45:46,896
这是因为 iOS 系统模拟器


2837
01:45:46,946 --> 01:45:48,436
现在得到了


2838
01:45:48,436 --> 01:45:50,836
在你的 Mac 中内置的原生 Metal 的支持


2839
01:45:52,506 --> 01:45:53,976
我们还添加了一个全新的


2840
01:45:53,976 --> 01:45:55,096
Metal 内存调试器


2841
01:45:55,446 --> 01:45:56,966
现在你可以准确的识别


2842
01:45:56,966 --> 01:45:58,666
有多少内存被你的 App 用于


2843
01:45:58,666 --> 01:46:00,656
Metal 纹理 缓冲区以及


2844
01:46:00,656 --> 01:46:02,436
散热并且你可以


2845
01:46:02,436 --> 01:46:04,196
优化你的游戏和 App


2846
01:46:04,196 --> 01:46:06,516
以便使用每最后一个字节来得到更高级的图形


2847
01:46:07,936 --> 01:46:08,986
在过去的几年中


2848
01:46:09,026 --> 01:46:10,336
Metal 已经发展到可以支持


2849
01:46:10,336 --> 01:46:12,006
数十个 GPU 的高级功能


2850
01:46:12,006 --> 01:46:13,566
每个 GPU 都有自己的硬件


2851
01:46:13,566 --> 01:46:15,806
来自每个主要的 GPU 供应商


2852
01:46:15,806 --> 01:46:19,516
以及我们所有的平台和操作系统版本


2853
01:46:19,746 --> 01:46:21,726
并且作为一个开发人员 你以前必须自己管理所有这些


2854
01:46:21,726 --> 01:46:24,646
不同的硬件功能集所有的复杂性


2855
01:46:26,116 --> 01:46:26,986
然而今年我们


2856
01:46:26,986 --> 01:46:29,756
只用了三个 Metal GPU 系列就变得更简单了


2857
01:46:30,056 --> 01:46:31,526
一个 Metal 常见的 GPU 系列


2858
01:46:31,746 --> 01:46:34,666
可以识别绝大多数


2859
01:46:33,586 --> 01:46:36,096
你可以在我们所有平台使用的 Metal 功能


2860
01:46:36,546 --> 01:46:38,216
第二个系列


2861
01:46:38,216 --> 01:46:40,706
是一些高级的独特功能


2862
01:46:40,706 --> 01:46:43,426
可以用于 Apple 设计 GPU 和 iOS iPadOS


2863
01:46:43,426 --> 01:46:44,716
和 tvOS 产品等


2864
01:46:44,716 --> 01:46:47,216
第三个系列用于


2865
01:46:47,216 --> 01:46:49,566
Mac 系统上强大的 GPU


2866
01:46:50,326 --> 01:46:51,776
它使你的 App 更容易的


2867
01:46:51,776 --> 01:46:54,406
从 iOS 到 macOS


2868
01:46:54,406 --> 01:46:56,086
或其他方式


2869
01:46:57,486 --> 01:46:59,076
现在除了支持


2870
01:46:59,076 --> 01:47:00,426
沉浸式游戏和高级图形外


2871
01:47:00,426 --> 01:47:02,046
Metal 还为你的 App 提供了


2872
01:47:02,046 --> 01:47:05,366
利用 GPU 进行计算的能力


2873
01:47:05,986 --> 01:47:07,516
所以 GPU 计算是什么


2874
01:47:08,116 --> 01:47:09,176
GPU 最初设计


2875
01:47:09,176 --> 01:47:12,106
适用于处理大量的像素


2876
01:47:12,106 --> 01:47:13,466
需要以大规模并行方式


2877
01:47:13,466 --> 01:47:16,566
进行复杂的数学计算


2878
01:47:16,966 --> 01:47:18,526
事实证明我们可以


2879
01:47:18,526 --> 01:47:20,136
将计算能力应用于


2880
01:47:20,136 --> 01:47:22,556
各种各样的任务


2881
01:47:22,646 --> 01:47:23,546
它们不仅仅是传统的图形


2882
01:47:24,306 --> 01:47:25,676
因此 Metal 提供了所有


2883
01:47:25,676 --> 01:47:27,086
需要构建的模块


2884
01:47:27,086 --> 01:47:29,976
而这些模块是 GPU 上通用计算所需要的


2885
01:47:30,206 --> 01:47:32,706
一种熟悉的基于 C++ 的


2886
01:47:32,706 --> 01:47:34,716
GPU 编程语言


2887
01:47:34,716 --> 01:47:35,966
计算命令编码和 API 和运行时


2888
01:47:35,966 --> 01:47:38,256
全功能编译器


2889
01:47:38,256 --> 01:47:41,526
和调试器以及丰富的着色器和内核库


2890
01:47:41,526 --> 01:47:42,766
它被称之为 Metal 性能着色器


2891
01:47:44,336 --> 01:47:45,876
这个 MPS 库为你提供了


2892
01:47:45,876 --> 01:47:48,296
有价值的计算功能


2893
01:47:48,656 --> 01:47:50,306
所有这些功能都被预先优化了


2894
01:47:50,306 --> 01:47:51,786
GPU 和所有 Apple 系统


2895
01:47:51,786 --> 01:47:52,816
并且已经完全集成到


2896
01:47:52,816 --> 01:47:54,756
你的 Metal 代码中


2897
01:47:56,436 --> 01:47:58,086
在我们的 Apple 设计 GPU 上


2898
01:47:58,236 --> 01:47:59,646
Metal 还提供了高级的


2899
01:47:59,726 --> 01:48:01,076
计算功能比如着色


2900
01:48:01,076 --> 01:48:04,006
使你能够计算着色器和片段处理


2901
01:48:04,066 --> 01:48:08,426
组合成一个简单的高效的渲染过程


2902
01:48:09,666 --> 01:48:12,106
并且今年我们


2903
01:48:12,106 --> 01:48:14,736
还推出了 Metal 间接计算命令编码


2904
01:48:14,736 --> 01:48:16,156
它允许你构建 GPU


2905
01:48:16,156 --> 01:48:17,566
计算指令在 GPU 上面


2906
01:48:17,566 --> 01:48:19,486
解锁全新的


2907
01:48:19,486 --> 01:48:22,096
计算效率算法并释放 CPU


2908
01:48:22,096 --> 01:48:24,666
以此来帮助 App 中其他的活动


2909
01:48:25,306 --> 01:48:27,676
使用 Radeon Pro Vega II


2910
01:48:27,676 --> 01:48:30,386
新款 Mac Pro 是一款 GPU 计算怪兽


2911
01:48:30,386 --> 01:48:33,916
可以提供高达 56 万亿次浮点运算的


2912
01:48:33,916 --> 01:48:35,786
GPU 计算能力


2913
01:48:35,786 --> 01:48:38,026
这些都通过 Metal 提供给你


2914
01:48:38,116 --> 01:48:39,666
现在这是很多失误


2915
01:48:39,666 --> 01:48:40,876
我的意思使看看他们


2916
01:48:41,486 --> 01:48:42,876
它们几乎不能放在屏幕上


2917
01:48:43,166 --> 01:48:45,166
[掌声]


2918
01:48:45,316 --> 01:48:47,676
太多了 [掌声]


2919
01:48:47,676 --> 01:48:50,616
那么你能用 GPU 计算的所有这些触发器做什么呢


2920
01:48:51,456 --> 01:48:52,276
那么使用 Metal 你可以


2921
01:48:52,276 --> 01:48:53,996
将它们应用于高级计算处理


2922
01:48:54,256 --> 01:48:57,276
对于你的视频你可以提高照片的质量


2923
01:48:57,646 --> 01:48:59,806
你可以训练你的 ML 模型


2924
01:48:59,806 --> 01:49:01,526
并且你可以使用它们


2925
01:49:01,526 --> 01:49:02,956
来加速交互光线跟踪


2926
01:49:04,016 --> 01:49:05,096
因此我们在今年进一步改进了


2927
01:49:05,096 --> 01:49:06,386
对光线跟踪的 Metal 支持


2928
01:49:06,386 --> 01:49:08,366
现在启用动态场景


2929
01:49:08,496 --> 01:49:11,346
通过将边界和层次结构


2930
01:49:11,346 --> 01:49:13,536
从 CPU 移动到 GPU 来实现


2931
01:49:13,536 --> 01:49:15,206
并且添加了全新优化的 MPS 去噪滤波器


2932
01:49:15,206 --> 01:49:18,146
以进一步提高图像质量


2933
01:49:18,146 --> 01:49:21,376
现在光线跟踪使用 GPU


2934
01:49:21,376 --> 01:49:24,746
来计算模拟灯光和表面以及反射的


2935
01:49:25,116 --> 01:49:27,166
物理属性


2936
01:49:27,166 --> 01:49:28,796
它可能非常复杂


2937
01:49:28,796 --> 01:49:30,576
人们实际上可以在这个主题上获得博士学位


2938
01:49:31,306 --> 01:49:32,596
因此为了想你展示


2939
01:49:32,596 --> 01:49:35,396
如何使用 Metal 和 GPU 计算


2940
01:49:35,396 --> 01:49:36,886
进行光线跟踪


2941
01:49:36,886 --> 01:49:38,686
我们决定将一个非常简单的实例放在一起


2942
01:49:38,776 --> 01:49:39,966
我现在想邀请 Rav 到舞台


2943
01:49:39,966 --> 01:49:42,686
给你们做一个快速的演示 Rav


2944
01:49:43,516 --> 01:49:48,716
[掌声]


2945
01:49:49,216 --> 01:49:49,926
>> 谢谢 Jeremy


2946
01:49:51,266 --> 01:49:54,666
因此我们构建了一个原型混合光线追踪引擎


2947
01:49:54,666 --> 01:49:56,316
以了解我们可以在强大的


2948
01:49:56,506 --> 01:49:58,296
新 Mac Pro 上使用 Metal 计算做些什么


2949
01:50:00,106 --> 01:50:03,056
现在我们建造的这个玩具城市


2950
01:50:03,146 --> 01:50:04,466
看起来很简单


2951
01:50:04,466 --> 01:50:06,876
但是我们正在使用 Metal 以 4K 分辨率每秒


2952
01:50:06,876 --> 01:50:09,536
处理超过 10 亿条光线


2953
01:50:10,336 --> 01:50:11,366
让我来带你了解一下


2954
01:50:11,366 --> 01:50:11,976
我们在这里所做的事情


2955
01:50:13,396 --> 01:50:15,446
首先我们使用 Metal 绘制命令


2956
01:50:15,446 --> 01:50:17,616
来渲染几何体


2957
01:50:17,616 --> 01:50:18,936
以及材质的信息


2958
01:50:18,936 --> 01:50:21,736
这些我们之后会用到


2959
01:50:21,736 --> 01:50:23,086
然后切换到使用 Metal 计算


2960
01:50:23,126 --> 01:50:25,566
以及 MPS 光线三角交叉 API


2961
01:50:25,566 --> 01:50:28,756
来完成所有繁重的工作


2962
01:50:29,366 --> 01:50:30,716
这包含计算


2963
01:50:30,806 --> 01:50:32,316
每一个表面点的环境光


2964
01:50:32,356 --> 01:50:33,886
正如你在这张图上看到的一样


2965
01:50:34,406 --> 01:50:37,836
而且可以模拟场景中的物体之间的光线反射


2966
01:50:37,836 --> 01:50:40,466
增加光线的深度


2967
01:50:40,466 --> 01:50:44,146
以在这些反射中产生阴影和反射


2968
01:50:44,866 --> 01:50:47,596
甚至是反射的反射


2969
01:50:48,256 --> 01:50:51,636
然后我们通过使用优化的 MPS


2970
01:50:51,676 --> 01:50:53,376
或者优化新 MPS 降噪器中的计算内核


2971
01:50:53,376 --> 01:50:57,746
来生成这种真正高质量的图像


2972
01:50:58,776 --> 01:51:00,976
因此传统的 CPU 渲染


2973
01:51:01,506 --> 01:51:02,916
需要花费超过一分钟的时间


2974
01:51:02,916 --> 01:51:04,236
来生成这样的帧


2975
01:51:04,726 --> 01:51:06,046
而使用 Metal 后我们已经可以


2976
01:51:06,046 --> 01:51:07,946
将时间减少到 30 毫秒以内


2977
01:51:07,946 --> 01:51:12,016
这比之前快了 1000 倍


2978
01:51:13,746 --> 01:51:15,376
所以我要感谢 Pro App 的开发人员


2979
01:51:15,376 --> 01:51:16,976
谢谢你们 我们也认为这很棒


2980
01:51:17,516 --> 01:51:20,776
[掌声]


2981
01:51:21,276 --> 01:51:22,906
因此 Pro App 的开发者们


2982
01:51:23,026 --> 01:51:25,446
现在可以使用 Metal 计算来构建


2983
01:51:25,446 --> 01:51:27,676
新的交互式工具


2984
01:51:27,676 --> 01:51:30,936
以可视化这些物理上精确的光影效果


2985
01:51:30,996 --> 01:51:36,936
比如由建筑物投下的巨大阴影


2986
01:51:36,936 --> 01:51:37,776
以及火灾逃生


2987
01:51:41,106 --> 01:51:42,586
或者如果我们在这里


2988
01:51:42,586 --> 01:51:45,266
平移到这个屋顶


2989
01:51:45,376 --> 01:51:48,606
绿色的灯光反射到这个相邻建筑物的实现方式


2990
01:51:50,646 --> 01:51:51,956
这看起来很棒 谢谢


2991
01:51:52,516 --> 01:51:56,696
[掌声]


2992
01:51:57,196 --> 01:51:58,666
另一个很好的效果


2993
01:51:58,956 --> 01:52:00,956
即我们可以模拟或建立的模型


2994
01:52:00,956 --> 01:52:02,336
是精确的反射


2995
01:52:02,336 --> 01:52:03,836
正如你在公共汽车的挡风玻璃上看到的那样


2996
01:52:04,046 --> 01:52:06,086
事实上你可以看到


2997
01:52:06,176 --> 01:52:07,846
阴影在那个挡风玻璃或


2998
01:52:07,846 --> 01:52:09,656
那些反射中移动


2999
01:52:09,656 --> 01:52:10,666
就在我在改变太阳的位置时侯


3000
01:52:10,786 --> 01:52:14,426
因此这看起来会很棒


3001
01:52:14,476 --> 01:52:17,776
但是在光线跟踪场景中设置的动画对象的


3002
01:52:17,776 --> 01:52:19,146
计算成本非常高


3003
01:52:19,426 --> 01:52:20,936
因为我们必须更新


3004
01:52:20,936 --> 01:52:24,156
与几何体关联的边界体积层次结构


3005
01:52:25,376 --> 01:52:27,496
幸运的是通过 Metal 计算


3006
01:52:27,496 --> 01:52:29,776
和 MPS API 我们可以


3007
01:52:29,776 --> 01:52:32,306
将所有这些工作移到


3008
01:52:32,476 --> 01:52:34,186
GPU 上并实现这个精彩的动画


3009
01:52:35,546 --> 01:52:36,636
那里有我们的火车


3010
01:52:37,466 --> 01:52:40,666
因此这只是一个可能的实例


3011
01:52:40,746 --> 01:52:44,086
即当你使用 Metal 在新 Mac Pro上


3012
01:52:44,136 --> 01:52:46,646
进行加速光线追踪


3013
01:52:46,646 --> 01:52:48,016
这太神奇了 谢谢


3014
01:52:48,186 --> 01:52:49,456
把时间还给你 Jeremy


3015
01:52:50,516 --> 01:52:52,636
[掌声]


3016
01:52:53,136 --> 01:52:53,696
>> 谢谢你 Rav


3017
01:52:54,456 --> 01:52:57,436
这就是我们在短时间内所做的事情


3018
01:52:57,666 --> 01:52:59,416
但是高性能光线追踪


3019
01:52:59,416 --> 01:53:00,776
在我们最专业的第三方开发人员手中


3020
01:53:00,776 --> 01:53:03,816
可能会变得更加强大


3021
01:53:03,816 --> 01:53:05,876
这就是为什么我们非常兴奋


3022
01:53:05,876 --> 01:53:07,496
OTOY 宣布它们正在


3023
01:53:07,496 --> 01:53:09,426
使用 Metal 计算来构建 OctaneX 


3024
01:53:09,426 --> 01:53:12,946
这是一个全新版本的 Octane 渲染器


3025
01:53:12,946 --> 01:53:14,606
他们的互动路径追踪引擎


3026
01:53:14,716 --> 01:53:17,186
针对 Metal 和 Apple 平台进行了优化


3027
01:53:18,556 --> 01:53:21,766
我们非常激动地与 Maxon 合作


3028
01:53:21,806 --> 01:53:24,356
Maxon 将其强大的 GPU 加速渲染器


3029
01:53:24,356 --> 01:53:26,196
Redshift 带入 Mac


3030
01:53:26,316 --> 01:53:30,716
并为 Metal 和新 Mac Pro 优化了全新版本


3031
01:53:30,716 --> 01:53:33,106
因此 借助先进的 Metal 计算 API


3032
01:53:33,106 --> 01:53:34,916
以及其强大的硬件


3033
01:53:34,916 --> 01:53:38,526
我们构建了 Metal 来支持最先进的


3034
01:53:38,526 --> 01:53:40,666
专业内容创建工具


3035
01:53:41,256 --> 01:53:45,186
我们一直与领先的 App 开发人员密切合作


3036
01:53:45,186 --> 01:53:46,216
他们都宣布将推出的这些


3037
01:53:46,216 --> 01:53:50,096
专业内容创建工具和 App


3038
01:53:50,436 --> 01:53:53,726
将针对 Metal 和 Apple 平台进行全面优化


3039
01:53:55,116 --> 01:53:57,066
例如 Serif 刚刚宣布


3040
01:53:57,066 --> 01:54:00,766
推出全新版本的 Mac 系统的 Affinty Photo


3041
01:54:00,766 --> 01:54:02,726
使用 Metal 的图形和计算 API


3042
01:54:02,956 --> 01:54:06,006
来增强其先进的照片处理引擎


3043
01:54:06,406 --> 01:54:09,066
从而实现惊人的性能提升


3044
01:54:09,346 --> 01:54:10,656
性能提升 10 倍以上或


3045
01:54:10,656 --> 01:54:14,436
甚至是更令人吃惊的 50 倍以上


3046
01:54:14,436 --> 01:54:16,096
就在使用带有多个 GPU 的 Metal


3047
01:54:16,096 --> 01:54:18,756
在新 Mac Pro 上运行的时侯


3048
01:54:20,016 --> 01:54:22,236
因此为了实现这些专业 App


3049
01:54:22,236 --> 01:54:23,716
和此类性能


3050
01:54:23,716 --> 01:54:26,986
我们与 GPU 硬件和软件合作伙伴团队密切合作


3051
01:54:26,986 --> 01:54:28,536
为 Metal 添加了全新的功能


3052
01:54:28,956 --> 01:54:32,626
为了支持新 Mac Pro 中心的 
AMD Infinty Fabric 链接


3053
01:54:32,626 --> 01:54:34,306
我们添加了 Metal 对等组 API


3054
01:54:35,136 --> 01:54:36,206
那么这是做什么的呢


3055
01:54:36,446 --> 01:54:40,076
以前在多个 GPU 之间共享工作负载


3056
01:54:40,076 --> 01:54:44,766
需要在 PCIe 总线上移动大量数据


3057
01:54:44,766 --> 01:54:46,896
但是使用 Metal 对等组 API


3058
01:54:46,896 --> 01:54:51,286
APP 可以更加有效的使用多个 GPU


3059
01:54:51,286 --> 01:54:54,426
直接在 Infinty Fabric 链接上共享数据


3060
01:54:54,426 --> 01:54:57,086
而无需通过系统内存占用那么长而昂贵的路径


3061
01:54:58,536 --> 01:55:00,446
最后你已经了解了如何


3062
01:55:00,446 --> 01:55:02,876
使用 Metal 计算和新的 Mac Pro


3063
01:55:02,876 --> 01:55:06,936
来处理更多的像素


3064
01:55:06,936 --> 01:55:09,026
但我们也希望你能够制作出


3065
01:55:09,026 --> 01:55:10,406
更加美丽的像素


3066
01:55:10,476 --> 01:55:11,946
因此我们引入了华丽的


3067
01:55:12,006 --> 01:55:15,376
新款 Pro Display XDR 和全新的 HDR 软件支持


3068
01:55:15,376 --> 01:55:17,706
在 macOS 上


3069
01:55:18,396 --> 01:55:21,826
你现在可以使用 AV 基础 API 解码 HDR 视频


3070
01:55:21,826 --> 01:55:25,976
也可以直接使用 Metal 渲染原生 HDR 内容


3071
01:55:26,626 --> 01:55:29,966
你可以管理 HDR 现实色调映射


3072
01:55:29,966 --> 01:55:31,536
或者也可以让 Windows 系统和我们的


3073
01:55:31,536 --> 01:55:34,796
高级显示系统软件为你做处理


3074
01:55:34,946 --> 01:55:37,046
使用这些相同的 API


3075
01:55:37,046 --> 01:55:38,536
你还可以在我们现有的许多


3076
01:55:38,536 --> 01:55:42,706
Mac 显示器上访问更大范围的亮度级别


3077
01:55:43,366 --> 01:55:45,846
这就是我们今天的 Metal 更新


3078
01:55:45,846 --> 01:55:48,986
这样会更加轻松的在所有平台上使用 Metal


3079
01:55:48,986 --> 01:55:52,356
即通过 iOS 模拟器中的 Metal 和简化的 GPU 系列


3080
01:55:52,406 --> 01:55:53,706
我们拥有全新的功能


3081
01:55:53,756 --> 01:55:55,746
和强大的硬件


3082
01:55:55,806 --> 01:55:57,926
可以释放全新的 GPU 计算性能


3083
01:55:58,426 --> 01:55:59,856
我们将 Metal 打造成


3084
01:55:59,966 --> 01:56:02,076
最佳的 GPU 编程 API


3085
01:56:02,076 --> 01:56:07,186
以推动现代专业内容创建工具和 App 非常感谢


3086
01:56:07,486 --> 01:56:09,436
我现在把现场还给 Sebastien 谢谢大家


3087
01:56:10,516 --> 01:56:13,546
[掌声]


3088
01:56:14,046 --> 01:56:15,436
>> 谢谢你 Jeremy


3089
01:56:15,436 --> 01:56:16,596
你们不爱 Metal 吗


3090
01:56:16,756 --> 01:56:18,066
你们不喜欢 Metal 强大的能力吗


3091
01:56:18,446 --> 01:56:19,506
非常非常精彩


3092
01:56:20,226 --> 01:56:25,236
你今天下午看到的是大量的新技术


3093
01:56:25,276 --> 01:56:26,896
这对你们所有开发者来说都是新的


3094
01:56:27,486 --> 01:56:28,936
我们展示的内容


3095
01:56:28,936 --> 01:56:30,486
涵盖了开发者工具


3096
01:56:30,596 --> 01:56:32,486
Apple 平台以及核心技术


3097
01:56:32,856 --> 01:56:34,546
这些只是其中的一些亮点


3098
01:56:34,896 --> 01:56:37,136
事实上本周我们还有很多东西可以展示给你们


3099
01:56:37,336 --> 01:56:40,466
所以我们前面有 109 个不同的会议


3100
01:56:40,466 --> 01:56:44,106
事实证明 这还不足以涵盖所有


3101
01:56:44,496 --> 01:56:48,726
所以今年我们又增加了 27 个视频会议


3102
01:56:50,016 --> 01:56:51,146
当你们像更深入的了解时


3103
01:56:51,146 --> 01:56:53,346
你可以在一周的 229 次不同的实验中


3104
01:56:53,426 --> 01:57:01,676
和在 WWDC 的 1000 多名 Apple 工程师坐在一起


3105
01:57:03,266 --> 01:57:05,426
所以走出去


3106
01:57:05,496 --> 01:57:06,526
准备好让你的头脑清醒一下


3107
01:57:06,526 --> 01:57:08,526
这将会是伟大的一周 谢谢大家


3108
01:57:09,516 --> 01:57:16,500
[掌声]

