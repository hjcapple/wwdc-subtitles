1
00:00:01,176 --> 00:00:05,500
[音乐]


2
00:00:11,516 --> 00:00:16,546
[掌声]


3
00:00:17,046 --> 00:00:18,406
>> 大家好


4
00:00:18,876 --> 00:00:20,906
我的名字是 Gokul 


5
00:00:20,906 --> 00:00:22,846
与我的同事 Dima 


6
00:00:22,846 --> 00:00:24,916
和 Jonathan 一起


7
00:00:24,916 --> 00:00:26,616
我们很高兴告诉大家有关


8
00:00:26,806 --> 00:00:27,216
Sign in with Apple 的事


9
00:00:27,616 --> 00:00:30,196
我将首先概述


10
00:00:30,196 --> 00:00:31,416
Sign in with Apple 的主要功能


11
00:00:31,416 --> 00:00:33,486
然后 Dima 将介绍


12
00:00:33,486 --> 00:00:34,966
如何将其集成到


13
00:00:34,966 --> 00:00:36,696
你们的原生 App 中


14
00:00:37,276 --> 00:00:39,916
Jonathan 将会现场为你们演示


15
00:00:40,436 --> 00:00:44,756
最后 我们将讨论跨平台


16
00:00:44,756 --> 00:00:45,966
并以一些最佳实践作为结束


17
00:00:49,516 --> 00:00:53,236
Sign in with Apple 是快速的


18
00:00:53,236 --> 00:00:55,536
简单的账户设置


19
00:00:55,536 --> 00:00:56,366
以及登录你们的 App 的方式


20
00:00:57,136 --> 00:01:01,206
它既安全又私密


21
00:01:01,986 --> 00:01:04,806
既适用于你们的用户


22
00:01:04,806 --> 00:01:05,316
也适用于你们的隐私


23
00:01:05,956 --> 00:01:07,526
了解你们如何


24
00:01:07,526 --> 00:01:10,056
与应用中的用户互动


25
00:01:10,056 --> 00:01:11,326
这与 Apple 无关


26
00:01:12,046 --> 00:01:13,386
因此 你们可以放心地


27
00:01:13,386 --> 00:01:15,576
使用 Sign in with Apple 


28
00:01:15,576 --> 00:01:18,606
Apple 不会跟踪任何此类内容


29
00:01:19,156 --> 00:01:21,576
让我们快速感受一下


30
00:01:21,576 --> 00:01:25,096
当用户轻点该按钮时的体验


31
00:01:26,386 --> 00:01:28,456
他们会看到一张预先填写了


32
00:01:28,456 --> 00:01:30,226
你们要求的信息的表格


33
00:01:30,796 --> 00:01:33,656
如姓名和邮件


34
00:01:34,826 --> 00:01:36,656
用户可以选择他们


35
00:01:36,656 --> 00:01:38,206
想要共享的邮件


36
00:01:39,516 --> 00:01:45,556
他们轻点“Continue”就是这样


37
00:01:45,846 --> 00:01:48,456
他们就登录到你们的 App 了


38
00:01:48,456 --> 00:01:52,746
你们的 App 会获得一个独特稳定的 ID


39
00:01:54,156 --> 00:01:58,296
一个名称以及一个可以


40
00:01:58,296 --> 00:02:00,716
为用户提供的经过验证的


41
00:02:00,716 --> 00:02:01,116
邮件地址


42
00:02:01,986 --> 00:02:04,326
最棒的是 这是一个


43
00:02:04,326 --> 00:02:07,276
安全的双重验证账户


44
00:02:07,276 --> 00:02:09,806
适用于你们 App 中的用户


45
00:02:09,806 --> 00:02:18,946
就是这么简单 更棒的是


46
00:02:19,076 --> 00:02:21,326
这一切都可以在所有用户的


47
00:02:21,326 --> 00:02:22,286
设备上无缝地工作


48
00:02:23,956 --> 00:02:26,266
在一个新设备上 


49
00:02:26,806 --> 00:02:28,456
通过简单的轻点即可让


50
00:02:28,456 --> 00:02:30,456
你们使用与之前 App 相同的账户


51
00:02:30,936 --> 00:02:33,186
并准备好再次完全投入使用


52
00:02:33,576 --> 00:02:34,966
非常快 非常容易


53
00:02:37,046 --> 00:02:38,466
因此 Sign in with Apple


54
00:02:38,616 --> 00:02:40,546
可为你们的 App 提供


55
00:02:40,546 --> 00:02:42,796
真正简化的账户设置体验


56
00:02:42,896 --> 00:02:45,456
无需填写繁琐的表单


57
00:02:45,456 --> 00:02:46,306
只需轻轻一点


58
00:02:47,486 --> 00:02:50,716
用户已使用 Apple ID 从 App Store 


59
00:02:50,716 --> 00:02:53,526
下载了你们的 App


60
00:02:54,086 --> 00:02:55,406
Sign in with Apple 可帮助他们


61
00:02:55,446 --> 00:02:59,726
通过轻点一下 就能使用你们 App


62
00:03:01,396 --> 00:03:03,636
你们还可以获得可用于


63
00:03:03,636 --> 00:03:05,456
与用户通信的经过验证的


64
00:03:05,456 --> 00:03:06,586
邮件地址


65
00:03:07,616 --> 00:03:09,316
这是 Apple 用于通信的


66
00:03:10,146 --> 00:03:13,066
邮件地址


67
00:03:13,996 --> 00:03:15,266
因此 无需进行这些繁琐的


68
00:03:15,266 --> 00:03:16,666
往返发送邮件


69
00:03:16,666 --> 00:03:20,036
并让用户轻点链接


70
00:03:20,726 --> 00:03:23,266
Apple 已经为你们完成了这项工作


71
00:03:24,546 --> 00:03:26,686
登录与 Apple 立即为你们


72
00:03:26,686 --> 00:03:29,676
提供可以使用的邮件


73
00:03:30,066 --> 00:03:31,876
无需额外验证


74
00:03:34,236 --> 00:03:35,966
现在 一些用户可能


75
00:03:35,966 --> 00:03:37,666
不太愿意共享他们的


76
00:03:37,666 --> 00:03:38,406
真实邮件地址


77
00:03:39,316 --> 00:03:40,466
而你们可能最终得到一些


78
00:03:40,506 --> 00:03:42,146
不起作用的假邮件


79
00:03:43,006 --> 00:03:44,526
那么 Sign in with Apple 可以


80
00:03:44,526 --> 00:03:45,016
帮助你们隐藏我的


81
00:03:46,016 --> 00:03:48,436
邮件选项使这些用户可以


82
00:03:48,486 --> 00:03:53,716
共享隐藏的邮件地址 该邮件地址


83
00:03:53,716 --> 00:03:55,596
将路由到其经过验证的邮箱里


84
00:03:56,586 --> 00:03:58,986
这很棒


85
00:03:59,166 --> 00:04:00,976
这是通过 Apple 的


86
00:04:00,976 --> 00:04:03,596
私人邮件中继系统启用的


87
00:04:03,596 --> 00:04:06,026
该系统将邮件转发给


88
00:04:06,746 --> 00:04:08,566
用户的已验证邮箱


89
00:04:08,566 --> 00:04:11,586
它也可以处理回复


90
00:04:11,836 --> 00:04:12,866
所以无论收发 它都能处理


91
00:04:13,596 --> 00:04:16,375
你们可以将其用于 


92
00:04:16,375 --> 00:04:19,856
App 的任何类型的业务通信


93
00:04:19,856 --> 00:04:21,846
Apple 一旦将其发送到


94
00:04:21,846 --> 00:04:23,796
用户的收件箱


95
00:04:24,196 --> 00:04:25,206
就不会保留任何消息


96
00:04:26,156 --> 00:04:28,936
总而言之 


97
00:04:29,666 --> 00:04:31,966
经过验证的邮件可以


98
00:04:32,326 --> 00:04:32,976
立即用于你们的 App 


99
00:04:37,266 --> 00:04:39,836
有了 Sign in with Apple


100
00:04:39,836 --> 00:04:42,156
你不需要记住任何密码


101
00:04:42,546 --> 00:04:42,976
所以也不会忘记


102
00:04:45,046 --> 00:04:46,396
因此它就更安全了


103
00:04:47,456 --> 00:04:50,866
更好的是 


104
00:04:50,866 --> 00:04:52,966
你们的 App 收到的每个账户


105
00:04:52,966 --> 00:04:54,266
都受到双重认证保护


106
00:04:55,186 --> 00:04:57,716
这就是你们 App 的最佳账户


107
00:04:58,016 --> 00:05:00,346
无需密码 双重认证
Sign in with Apple


108
00:05:00,346 --> 00:05:02,746
无需你们投入任何成本


109
00:05:03,146 --> 00:05:05,236
也不会给用户带来额外的摩擦


110
00:05:05,786 --> 00:05:08,206
Sign in with Apple 的


111
00:05:08,206 --> 00:05:09,686
内置安全性极佳


112
00:05:12,046 --> 00:05:15,196
目前 打击系统中的账户欺诈是一个难题


113
00:05:15,196 --> 00:05:20,746
而 Apple 可以提供独特的帮助


114
00:05:20,906 --> 00:05:22,976
Sign in with Apple 包含一种


115
00:05:22,976 --> 00:05:25,946
新的隐私友好方式


116
00:05:25,946 --> 00:05:28,386
让你们获得对你们 App 上的


117
00:05:28,386 --> 00:05:30,426
用户确实真实的信心


118
00:05:31,736 --> 00:05:33,776
它将复杂的设备上智能


119
00:05:33,776 --> 00:05:35,656
与账户信息相结合


120
00:05:36,316 --> 00:05:40,616
并将其抽象为一个比特


121
00:05:40,616 --> 00:05:43,196
真实用户或未知用户


122
00:05:43,976 --> 00:05:46,526
对于真正的用户 在你们的 App 中


123
00:05:46,526 --> 00:05:48,616
给予他们应得的贵宾级的待遇


124
00:05:49,946 --> 00:05:51,906
这是一个高可信度的指示器


125
00:05:52,496 --> 00:05:55,846
如果你得到是未知用户 那它可能是


126
00:05:55,846 --> 00:05:58,306
一个用户 它也可能是一个机器人


127
00:05:59,116 --> 00:06:01,216
对待此用户就像对待


128
00:06:01,216 --> 00:06:02,786
你们系统中没有


129
00:06:02,786 --> 00:06:04,576
足够信息做出决策的


130
00:06:04,866 --> 00:06:06,366
任何其他新账户一样


131
00:06:07,246 --> 00:06:09,226
因此 这是帮助你们


132
00:06:09,226 --> 00:06:11,406
打击账户欺诈的


133
00:06:11,566 --> 00:06:12,846
真实用户指示器


134
00:06:15,246 --> 00:06:18,976
最后 Sign in with Apple 


135
00:06:18,976 --> 00:06:19,836
是跨平台的


136
00:06:20,726 --> 00:06:23,546
该 API 适用于


137
00:06:23,546 --> 00:06:26,366
所有 Apple 平台：iOS macOS


138
00:06:26,516 --> 00:06:27,636
watchOS tvOS


139
00:06:29,306 --> 00:06:33,336
登录体验适用于每个平台 易于使用


140
00:06:34,406 --> 00:06:36,966
通过 JavaScript API


141
00:06:36,966 --> 00:06:38,616
你们可以在网页上


142
00:06:38,616 --> 00:06:40,726
以及 Windows 或 Android 等


143
00:06:40,756 --> 00:06:42,526
其他平台上 Sign in with Apple


144
00:06:43,356 --> 00:06:44,976
我们稍后会详细讨论 这个问题


145
00:06:45,516 --> 00:06:51,686
[掌声]


146
00:06:52,186 --> 00:06:53,386
简化的账户设置


147
00:06:53,956 --> 00:06:56,536
经过验证的邮件地址


148
00:06:56,536 --> 00:06:58,996
内置安全性 


149
00:06:58,996 --> 00:06:59,906
反欺诈和跨平台


150
00:07:00,366 --> 00:07:02,256
这是 Sign in with Apple 的


151
00:07:02,256 --> 00:07:04,516
关键功能的快速摘要


152
00:07:04,876 --> 00:07:06,696
接下来 Dima 将加入讲台


153
00:07:06,696 --> 00:07:08,336
讨论如何将其


154
00:07:08,336 --> 00:07:10,716
集成到你的原生 App 中


155
00:07:10,996 --> 00:07:14,546
有请 Dima [掌声]


156
00:07:15,046 --> 00:07:15,526
>> 多谢 Gokul


157
00:07:16,416 --> 00:07:19,146
嗨 大家好 那么你们已经看到了


158
00:07:19,636 --> 00:07:19,976
这个很棒的功能


159
00:07:20,606 --> 00:07:21,536
它实际上需要什么来集成到


160
00:07:21,536 --> 00:07:22,656
你们的 App 中呢


161
00:07:26,046 --> 00:07:28,006
你们的 App 需要做四件


162
00:07:28,006 --> 00:07:29,616
关键事情才能实现目标


163
00:07:30,276 --> 00:07:32,816
首先 使用 Apple 的自动登录按钮


164
00:07:34,046 --> 00:07:36,896
然后配置并执行授权请求


165
00:07:38,136 --> 00:07:40,156
在用户看到使用 Sign in with Apple 的 UI


166
00:07:40,156 --> 00:07:41,496
并经过快速面容 ID 检查后


167
00:07:41,836 --> 00:07:46,596
授权结果将返回送至你们的 App


168
00:07:47,036 --> 00:07:48,816
此时 你们需要使用 


169
00:07:48,816 --> 00:07:50,036
Apple ID 服务器验证结果


170
00:07:50,036 --> 00:07:51,976
并在你们的系统中创建一个账户


171
00:07:54,506 --> 00:07:55,966
最后同样重要的是


172
00:07:55,966 --> 00:07:57,546
凭据状态可能会在返回到


173
00:07:57,546 --> 00:07:58,956
你们的 App 后发生更改


174
00:07:58,956 --> 00:08:00,116
并且你们的 App 需要


175
00:08:00,116 --> 00:08:02,056
很好地处理这些状态更改


176
00:08:06,136 --> 00:08:08,176
首先 让我们看一下使用


177
00:08:08,176 --> 00:08:10,236
Sign in with Apple 按钮


178
00:08:10,266 --> 00:08:12,416
只需几行代码


179
00:08:12,416 --> 00:08:13,656
你们就可以在你们的 App 中


180
00:08:13,656 --> 00:08:15,886
添加 AuthorizationAppleIDButton


181
00:08:17,096 --> 00:08:21,116
初始化后添加操作


182
00:08:22,396 --> 00:08:24,876
这就是你需要做的一切


183
00:08:25,136 --> 00:08:26,856
该按钮支持多种


184
00:08:26,856 --> 00:08:28,026
不同的自定义


185
00:08:28,026 --> 00:08:28,786
以适应你们 App 的设计


186
00:08:29,696 --> 00:08:30,946
它提供不同的视觉风格


187
00:08:30,946 --> 00:08:32,256
和不同类型的标签


188
00:08:32,946 --> 00:08:35,966
这对目前使用有效 API 


189
00:08:35,966 --> 00:08:37,616
的 App 而言非常熟悉


190
00:08:43,356 --> 00:08:45,566
接下来 一旦用户执行操作


191
00:08:45,566 --> 00:08:49,926
你们需要配置请求并执行授权


192
00:08:52,496 --> 00:08:55,196
下面就是方法


193
00:08:55,196 --> 00:08:56,936
只需一行代码 


194
00:08:56,936 --> 00:08:59,066
即可初始化 Apple ID 授权请求


195
00:09:00,426 --> 00:09:01,806
这是你们在系统中


196
00:09:01,806 --> 00:09:03,186
创建账户所需的全部内容


197
00:09:05,116 --> 00:09:06,776
或者 如果你们的 App 需要


198
00:09:06,776 --> 00:09:08,976
此功能以获得最佳用户体验


199
00:09:08,976 --> 00:09:10,426
则可以设置 requestedScopes 


200
00:09:10,426 --> 00:09:10,886
以获取全名和邮件


201
00:09:12,376 --> 00:09:13,556
如果你们的 App 


202
00:09:13,556 --> 00:09:14,746
确实需要此信息


203
00:09:14,746 --> 00:09:16,496
则应该只请求此信息


204
00:09:16,496 --> 00:09:18,076
并且在最小信息量方面报错


205
00:09:19,786 --> 00:09:22,646
配置完请求后 初始化


206
00:09:22,646 --> 00:09:26,556
AuthorizationController


207
00:09:26,556 --> 00:09:28,576
设置代理以将结果


208
00:09:28,576 --> 00:09:30,416
返回到你们的 App 中


209
00:09:30,416 --> 00:09:33,146
最后同样重要的是执行请求


210
00:09:34,176 --> 00:09:35,366
执行请求后


211
00:09:35,656 --> 00:09:36,666
将启动向用户


212
00:09:36,666 --> 00:09:38,456
显示的授权 UI


213
00:09:39,156 --> 00:09:40,436
快速进行面容 ID 检查后 


214
00:09:41,066 --> 00:09:42,306
授权结果将


215
00:09:42,306 --> 00:09:43,146
返回给你们的 App 


216
00:09:43,776 --> 00:09:44,976
我们来谈谈处理这些结果


217
00:09:48,046 --> 00:09:49,446
通过 AuthorizationController 


218
00:09:49,446 --> 00:09:50,656
didCompleteWithAuthorization


219
00:09:50,656 --> 00:09:52,036
方法 你们将获得


220
00:09:52,036 --> 00:09:54,846
一个授权对象此对象具有 


221
00:09:54,846 --> 00:09:56,306
AppleIDCredential 类型的


222
00:09:56,306 --> 00:09:57,426
凭证属性


223
00:09:57,926 --> 00:09:58,826
在处理之前


224
00:09:58,826 --> 00:09:59,916
你们应该检查


225
00:09:59,916 --> 00:10:00,806
这实际上是 AppleIDCredential


226
00:10:01,856 --> 00:10:02,936
此对象包含


227
00:10:02,936 --> 00:10:05,466
在系统中创建账户所需的所有信息


228
00:10:06,056 --> 00:10:09,036
如果用户取消请求


229
00:10:09,036 --> 00:10:10,556
或发生任何其他错误


230
00:10:10,786 --> 00:10:13,306
我们将通过 didCompleteWithError 回调 


231
00:10:13,306 --> 00:10:13,756
让你的 App 知道


232
00:10:15,106 --> 00:10:16,296
这两个代理回调


233
00:10:16,296 --> 00:10:17,676
都保证在你们的 App 的


234
00:10:17,676 --> 00:10:18,756
主队列中进行


235
00:10:21,626 --> 00:10:22,806
因此 让我们深入了解


236
00:10:22,806 --> 00:10:25,966
我们将为你们的 App 提供的结果


237
00:10:29,276 --> 00:10:30,796
首先 用户标识符


238
00:10:30,796 --> 00:10:32,916
这是一个独特 稳定的


239
00:10:32,916 --> 00:10:34,476
团队范围的用户标识符


240
00:10:35,396 --> 00:10:37,186
这很棒


241
00:10:37,756 --> 00:10:38,676
你们可以使用它


242
00:10:38,676 --> 00:10:41,086
从不同平台 不同系统


243
00:10:41,086 --> 00:10:43,366
网页端 Android 端的


244
00:10:43,676 --> 00:10:44,746
用户系统中检索信息


245
00:10:45,316 --> 00:10:47,046
它在所有这些方面保持稳定


246
00:10:47,046 --> 00:10:49,266
另外它与你们的开发团队有关


247
00:10:50,486 --> 00:10:51,596
这是你们用户的关键


248
00:10:52,586 --> 00:10:55,826
接下来 我们将返回验证数据


249
00:10:55,826 --> 00:10:57,476
身份令牌和授权码


250
00:10:57,916 --> 00:10:59,156
这是一种短期令牌 


251
00:10:59,156 --> 00:11:01,046
可与 Apple ID 服务器一起


252
00:11:01,046 --> 00:11:02,156
使用以交换刷新令牌


253
00:11:03,056 --> 00:11:04,226
如果你们与现有的


254
00:11:04,226 --> 00:11:05,906
身份验证系统集成


255
00:11:05,906 --> 00:11:07,726
那么采用 Sign in with Apple 将会十分自然


256
00:11:10,146 --> 00:11:11,856
或者 如果你们提出要求


257
00:11:11,986 --> 00:11:13,056
我们将返回账户信息


258
00:11:13,056 --> 00:11:16,256
以一个名称和一封可验证的邮件的方式


259
00:11:16,876 --> 00:11:18,176
另外由于 Apple 已对


260
00:11:18,176 --> 00:11:19,496
此邮件进行了验证


261
00:11:19,496 --> 00:11:20,546
因此我们向你们展示后


262
00:11:20,546 --> 00:11:22,936
你们的 App 不再需要执行任何类型的验证


263
00:11:25,046 --> 00:11:26,486
最后 如前所述 


264
00:11:27,766 --> 00:11:28,786
一个真实用户的指示器


265
00:11:28,786 --> 00:11:31,596
使用此选项可简化你们的登录体验


266
00:11:35,046 --> 00:11:36,936
所以现在你们已经在你们的系统中创建了一个账户


267
00:11:37,616 --> 00:11:39,386
当用户在你们的 App 中


268
00:11:39,386 --> 00:11:41,006
使用 Apple 设备时


269
00:11:41,006 --> 00:11:42,136
凭据状态可能会更改


270
00:11:43,006 --> 00:11:44,696
而且你需要妥善地处理这些情景


271
00:11:47,026 --> 00:11:49,066
用户可能会停止在 App 中使用 Apple ID


272
00:11:49,716 --> 00:11:51,126
他们可能会退出设备


273
00:11:51,996 --> 00:11:54,996
你们应当妥善地处理这样的事件


274
00:11:54,996 --> 00:11:56,666
为此 身份验证服务的


275
00:11:56,666 --> 00:11:57,926
框架公开了一个


276
00:11:58,016 --> 00:12:00,976
快速 API 允许你们查询此状态


277
00:12:03,616 --> 00:12:06,246
使用先前通过 Apple ID Credential


278
00:12:06,246 --> 00:12:08,916
返回的用户标识符


279
00:12:08,916 --> 00:12:10,796
你们可以检查 GetCredentialState 


280
00:12:11,286 --> 00:12:12,366
调用以获取


281
00:12:12,366 --> 00:12:13,056
当前 Apple ID 凭据的状态


282
00:12:13,856 --> 00:12:15,126
这是一个非常快速的 API 调用


283
00:12:15,666 --> 00:12:17,246
它可以返回到三件事


284
00:12:18,126 --> 00:12:19,116
我们会告诉你们 用户已获得授权


285
00:12:19,116 --> 00:12:20,326
并且你们应该让他们


286
00:12:20,326 --> 00:12:21,656
继续使用你们的 App


287
00:12:23,216 --> 00:12:24,546
凭证可能会被撤销


288
00:12:24,546 --> 00:12:28,096
你们应该在此设备上


289
00:12:28,096 --> 00:12:29,836
向用户退出你们的 App 


290
00:12:29,836 --> 00:12:33,926
并可选择引导他们重新登陆


291
00:12:34,106 --> 00:12:37,006
notFound 表示用户之前未通过


292
00:12:37,006 --> 00:12:38,806
Sign in with Apple 建立关系


293
00:12:40,376 --> 00:12:41,616
这个 API 非常快


294
00:12:42,026 --> 00:12:43,256
你们应该在 App 启动时


295
00:12:43,256 --> 00:12:44,716
调用它以确保


296
00:12:44,716 --> 00:12:45,846
为每种状态提供


297
00:12:45,846 --> 00:12:46,816
量身定制的体验


298
00:12:49,126 --> 00:12:50,576
此外 我们通过


299
00:12:50,576 --> 00:12:53,116
NotificationCenter 公开通知


300
00:12:53,116 --> 00:12:54,596
以通知你们此凭据状态何时


301
00:12:54,726 --> 00:12:55,566
更改为已撤消


302
00:12:56,256 --> 00:12:57,826
在此设备上把用户退出


303
00:12:58,326 --> 00:13:00,566
并可选择引导他们重新登录


304
00:13:03,046 --> 00:13:04,236
现在 用户已经与


305
00:13:04,236 --> 00:13:05,266
你们的 App 建立了关系


306
00:13:05,406 --> 00:13:06,836
他们正在使用该 App  他们创建了一个账户


307
00:13:07,146 --> 00:13:08,396
他们总会获得


308
00:13:08,396 --> 00:13:09,856
另一台设备 那么他们会再次


309
00:13:09,856 --> 00:13:10,496
使用你们的 App 


310
00:13:11,266 --> 00:13:12,546
我们来谈谈这个


311
00:13:12,546 --> 00:13:13,566
以及 Sign in with Apple 如何


312
00:13:13,566 --> 00:13:13,766
在这种情况中帮助你们


313
00:13:14,776 --> 00:13:15,796
当用户在新设备上


314
00:13:15,796 --> 00:13:18,616
重返你们的 App 时


315
00:13:18,616 --> 00:13:20,296
他们将获得一键式登录体验


316
00:13:21,556 --> 00:13:22,736
快速进行面容 ID 检查后 


317
00:13:23,046 --> 00:13:25,046
他们会回到你们的 App 中


318
00:13:28,136 --> 00:13:29,856
除此之外 我们知道


319
00:13:29,856 --> 00:13:31,446
你们的系统中已有账户


320
00:13:32,216 --> 00:13:35,256
所以现在我们通过相同的 API


321
00:13:35,256 --> 00:13:36,096
支持 iCloud 钥匙串密码


322
00:13:36,586 --> 00:13:37,236
你们应该请求 


323
00:13:37,236 --> 00:13:38,376
Apple ID 和 iCloud 钥匙串 


324
00:13:38,376 --> 00:13:39,776
请求的身份验证


325
00:13:40,516 --> 00:13:41,476
我们将提供用户继续


326
00:13:41,476 --> 00:13:44,426
使用他们现有的任何凭证


327
00:13:45,306 --> 00:13:46,676
如果重返登入错误


328
00:13:47,116 --> 00:13:48,466
那么请显示你们的常规登录流程


329
00:13:49,256 --> 00:13:50,966
为了获得最佳用户体验


330
00:13:51,266 --> 00:13:54,686
如果 App 没有现有本地账户


331
00:13:54,686 --> 00:13:55,936
则应调用此启动功能


332
00:13:57,186 --> 00:13:58,286
那么让我们来看看


333
00:13:58,286 --> 00:13:58,976
实现它是多么容易


334
00:14:03,046 --> 00:14:07,816
首先 使用 Apple ID 授权请求


335
00:14:08,116 --> 00:14:10,476
和 Apple ID 密码


336
00:14:10,476 --> 00:14:13,396
请求初始化请求数组 这就行了


337
00:14:13,596 --> 00:14:14,686
就这么简单


338
00:14:15,436 --> 00:14:18,976
传递请求数组并执行请求


339
00:14:22,276 --> 00:14:25,036
如果存在一个 Sign in with Apple 的现有连接


340
00:14:25,036 --> 00:14:26,216
则一个 AppleIDCredential 将会被


341
00:14:26,216 --> 00:14:27,726
返还到你们的 App


342
00:14:29,666 --> 00:14:31,606
如果用户具有存储的 


343
00:14:31,606 --> 00:14:33,346
iCloud 钥匙串密码


344
00:14:33,346 --> 00:14:34,526
则该凭据将会被返回到


345
00:14:34,526 --> 00:14:35,426
你们的 App


346
00:14:35,646 --> 00:14:36,646
你们应该使用从此 API 


347
00:14:36,646 --> 00:14:38,936
获得的凭据来帮用户登录


348
00:14:39,516 --> 00:14:41,696
如果用户没有现有凭据


349
00:14:41,696 --> 00:14:43,526
API 将立即返回


350
00:14:43,526 --> 00:14:44,666
报错 而且你们应该


351
00:14:44,666 --> 00:14:46,326
显示标准登录流


352
00:14:47,876 --> 00:14:49,316
通过在启动时


353
00:14:49,316 --> 00:14:51,766
执行这些请求 


354
00:14:51,766 --> 00:14:53,006
你们可以防止系统中的


355
00:14:53,006 --> 00:14:55,436
账户重复 并简化


356
00:14:55,436 --> 00:14:56,676
返回 App 然后开始使用它


357
00:14:56,676 --> 00:14:57,816
的用户体验


358
00:15:00,276 --> 00:15:01,706
现在 我想在叫 Jonathan 来舞台


359
00:15:01,706 --> 00:15:04,596
以演示如何轻松地构建它


360
00:15:05,516 --> 00:15:08,646
[掌声]


361
00:15:09,146 --> 00:15:09,646
>> 多谢 Dima


362
00:15:09,646 --> 00:15:10,766
大家早上好


363
00:15:11,856 --> 00:15:13,116
Sign in with Apple 可以简化


364
00:15:13,116 --> 00:15:14,636
用户创建账户或


365
00:15:14,636 --> 00:15:15,866
登录 App 的方式


366
00:15:15,866 --> 00:15:17,486
同时保持强大的账户安全性


367
00:15:18,226 --> 00:15:19,696
密码自动填充和


368
00:15:19,696 --> 00:15:21,126
自动强密码已经使你们


369
00:15:21,126 --> 00:15:22,126
可以执行其中一些操作


370
00:15:22,936 --> 00:15:24,416
Sign in with Apple 进一步


371
00:15:24,416 --> 00:15:25,656
改进它们 你们可以使用


372
00:15:25,656 --> 00:15:27,066
与 Sign in with Apple 相同的


373
00:15:27,066 --> 00:15:29,046
本机 API 与密码自动


374
00:15:29,046 --> 00:15:30,596
填充密码集成


375
00:15:30,596 --> 00:15:32,616
我将带你们看看


376
00:15:32,676 --> 00:15:34,556
三个主题 以让你们的用户


377
00:15:34,556 --> 00:15:36,996
使用 Apple ID 登录你们的 App 


378
00:15:38,196 --> 00:15:39,606
首先 我将 Sign in with Apple


379
00:15:39,606 --> 00:15:41,146
按钮添加到登录表单中


380
00:15:41,906 --> 00:15:43,146
然后 我将向你们展示


381
00:15:43,146 --> 00:15:44,576
如何实施快速登录流程


382
00:15:44,576 --> 00:15:46,826
这允许了用户只需


383
00:15:46,826 --> 00:15:49,876
轻轻一按即可登录现有凭据


384
00:15:50,696 --> 00:15:52,306
最后 我将向你们展示


385
00:15:52,346 --> 00:15:54,296
如何在 App 启动后


386
00:15:54,326 --> 00:15:56,446
检查用户标识符的凭据状态


387
00:15:56,446 --> 00:15:57,836
以确保你们的用户


388
00:15:57,836 --> 00:15:58,936
已正确登录


389
00:16:00,536 --> 00:16:02,916
为了向你们展示这一切 


390
00:16:02,916 --> 00:16:03,336
我有一个测试 App 


391
00:16:03,476 --> 00:16:04,106
名字叫《Juice》


392
00:16:05,376 --> 00:16:06,746
在这里 你们可以看到


393
00:16:06,746 --> 00:16:07,876
带有邮件和密码的


394
00:16:07,876 --> 00:16:08,286
典型登录表单


395
00:16:09,566 --> 00:16:10,246
我们将在它下面


396
00:16:10,246 --> 00:16:12,136
添加另一个选项 Sign in with Apple


397
00:16:13,666 --> 00:16:14,366
让我们开始吧


398
00:16:15,146 --> 00:16:16,496
我们在项目设置中


399
00:16:16,496 --> 00:16:17,836
有一个先决条件


400
00:16:18,076 --> 00:16:20,306
即添加 Sign in with Apple 功能


401
00:16:23,376 --> 00:16:24,976
因此 在你们的项目设置中 


402
00:16:25,096 --> 00:16:25,796
你们需要选择 App 并


403
00:16:25,796 --> 00:16:29,176
转到“Signing & Capabilities”部分


404
00:16:29,966 --> 00:16:31,336
我已经在这里添加了 


405
00:16:31,336 --> 00:16:32,686
Sign in with Apple 的功能


406
00:16:32,686 --> 00:16:35,786
要在你们的 App 中添加它


407
00:16:35,786 --> 00:16:36,916
请继续并单击 Capability


408
00:16:36,916 --> 00:16:38,246
按钮 然后搜索 


409
00:16:38,246 --> 00:16:38,776
Sign in with Apple


410
00:16:41,046 --> 00:16:42,446
执行此操作时


411
00:16:42,446 --> 00:16:43,766
Xcode 将在你们 App 的


412
00:16:43,766 --> 00:16:45,176
授权文件中添加相应的条目


413
00:16:46,306 --> 00:16:47,576
然后 这将检查


414
00:16:47,576 --> 00:16:49,006
你们是否已将 Sign in with Apple 功能


415
00:16:49,006 --> 00:16:51,906
添加到 Developer Portal 中的 Apple ID


416
00:16:55,066 --> 00:16:56,296
如果你们尚未这样做 


417
00:16:56,446 --> 00:16:57,836
则需要继续然后


418
00:16:57,836 --> 00:16:59,336
登录 Developer Portal 


419
00:16:59,336 --> 00:17:00,906
并确保已添加此功能


420
00:17:06,346 --> 00:17:07,536
所以在这里 我想强调


421
00:17:07,536 --> 00:17:09,175
在这里看到的 


422
00:17:09,215 --> 00:17:10,626
Associated Domains 功能


423
00:17:11,955 --> 00:17:13,396
这将确保你们在


424
00:17:13,435 --> 00:17:15,576
创建 ASAuthorizationPassword 


425
00:17:15,576 --> 00:17:17,215
请求时将密码返回到


426
00:17:17,215 --> 00:17:20,476
凭证中并呈现给用户 


427
00:17:21,016 --> 00:17:22,086
我稍后将向你们展示如何


428
00:17:22,086 --> 00:17:23,366
在演示中添加其中一个请求


429
00:17:24,726 --> 00:17:25,836
如果你们希望密码


430
00:17:25,836 --> 00:17:27,695
请求提供


431
00:17:27,695 --> 00:17:29,406
正确的凭据


432
00:17:29,406 --> 00:17:32,176
请参键 2017 年的


433
00:17:32,176 --> 00:17:34,306
《Password Autofill for Apps》会议


434
00:17:34,306 --> 00:17:35,766
以及周四的


435
00:17:35,766 --> 00:17:36,506
《What's New in Authentication》会议


436
00:17:37,656 --> 00:17:38,646
好了 我要回到 Xcode


437
00:17:38,646 --> 00:17:41,926
来看看《Juice》App


438
00:17:45,046 --> 00:17:45,976
如你们所见 这只是一个


439
00:17:45,976 --> 00:17:48,106
简单的演示 App 


440
00:17:48,106 --> 00:17:49,556
以突出此 API 的一些关键功能


441
00:17:50,996 --> 00:17:52,816
在它或标签下面


442
00:17:52,816 --> 00:17:56,076
我有一个名为“Login Provider Stack View”
的栈视图


443
00:17:57,106 --> 00:17:58,256
这是我们要添加


444
00:17:58,256 --> 00:17:59,926
Sign in with Apple 按钮的地方


445
00:18:02,516 --> 00:18:03,836
添加 Sign in with Apple


446
00:18:03,836 --> 00:18:06,046
按钮需要分三步来完成


447
00:18:06,686 --> 00:18:08,356
首先 我将在我们的“Provider Stack View”


448
00:18:08,356 --> 00:18:10,086
中添加 Sign in with Apple 按钮


449
00:18:10,836 --> 00:18:13,456
然后我将定义一个函数


450
00:18:13,456 --> 00:18:15,126
该函数将在轻点按钮时


451
00:18:15,126 --> 00:18:15,776
创建并执行请求


452
00:18:15,776 --> 00:18:18,146
最后 我们将采用


453
00:18:18,146 --> 00:18:21,026
必要的身份验证服务协议


454
00:18:21,026 --> 00:18:22,166
为我们提供结果


455
00:18:23,336 --> 00:18:25,216
所以让我们开始


456
00:18:25,216 --> 00:18:26,456
通过在我们的 UI 中添加


457
00:18:26,456 --> 00:18:28,376
Sign in with Apple 按钮来实现这一点


458
00:18:28,376 --> 00:18:28,726
让我们来看看


459
00:18:28,726 --> 00:18:30,216
LoginViewController.swift 文件


460
00:18:36,046 --> 00:18:37,336
因此我们将


461
00:18:37,336 --> 00:18:38,886
使用 AuthenticationServices 模块


462
00:18:38,886 --> 00:18:40,076
那么我们将继续并


463
00:18:40,076 --> 00:18:41,116
在此处导入


464
00:18:54,076 --> 00:18:56,406
所以我在这里定义了一个


465
00:18:56,656 --> 00:18:58,296
名为 setupProviderLoginView 的函数


466
00:18:58,956 --> 00:19:00,406
它正在初始化


467
00:19:00,406 --> 00:19:02,616
ASAuthorizationAppleIDButton


468
00:19:03,236 --> 00:19:04,126
然后它添加了


469
00:19:04,126 --> 00:19:05,606
handleAuthorizationAppleID 


470
00:19:05,606 --> 00:19:07,336
ButtonPress 函数


471
00:19:07,336 --> 00:19:09,276
我在这里将其作为其动作存根 


472
00:19:10,026 --> 00:19:12,146
然后我将按钮添加到


473
00:19:12,146 --> 00:19:14,056
loginProviderStackView


474
00:19:14,056 --> 00:19:16,496
然后在我们的 UI 中显示它


475
00:19:16,496 --> 00:19:18,666
就在上面 


476
00:19:18,666 --> 00:19:20,166
我正在覆盖 viewDidLoad 函数


477
00:19:20,166 --> 00:19:21,966
这样我们就可以


478
00:19:21,966 --> 00:19:23,536
继续调用 setupProviderLoginView


479
00:19:23,536 --> 00:19:24,036
这将被添加


480
00:19:24,616 --> 00:19:26,686
那么我会继续运行 App


481
00:19:35,136 --> 00:19:36,566
很棒 按钮现在


482
00:19:36,566 --> 00:19:37,276
在我们的 UI 中可见


483
00:19:37,276 --> 00:19:41,246
但它并没有真正做任何事情


484
00:19:41,246 --> 00:19:42,886
所以让我们跳到第二步


485
00:19:42,886 --> 00:19:43,426
为我们的按钮定义动作


486
00:19:54,066 --> 00:19:55,026
好吧 我们来聊聊这个功能


487
00:19:55,026 --> 00:19:57,646
能做什么


488
00:19:57,866 --> 00:19:59,606
其实我们正在做的是


489
00:19:59,606 --> 00:20:02,496
使用 AppleIDProvider 初始化 


490
00:20:03,166 --> 00:20:05,606
ASAuthorizationAppleID 请求


491
00:20:05,606 --> 00:20:07,266
然后我们将其 


492
00:20:07,266 --> 00:20:10,236
requestedScopes 属性设置为


493
00:20:10,236 --> 00:20:13,826
包含全名和邮件范围的数组


494
00:20:19,046 --> 00:20:19,846
这部分很关键


495
00:20:20,316 --> 00:20:21,636
系统会要求用户


496
00:20:21,636 --> 00:20:23,286
根据你们在此处设置的范围


497
00:20:23,286 --> 00:20:24,106
来共享信息


498
00:20:24,356 --> 00:20:26,456
然后 该信息将


499
00:20:26,456 --> 00:20:27,816
返回到你们的 Apple ID 凭证  


500
00:20:27,816 --> 00:20:30,316
Apple ID 凭证中


501
00:20:30,876 --> 00:20:32,446
你们应该只要求


502
00:20:32,526 --> 00:20:33,366
你们真正需要的东西


503
00:20:34,296 --> 00:20:35,766
那么让我们回到按钮的动作


504
00:20:39,046 --> 00:20:40,336
所以我们使用我


505
00:20:41,856 --> 00:20:43,636
插入到数组中的


506
00:20:43,636 --> 00:20:45,306
请求初始化控制器


507
00:20:45,306 --> 00:20:46,426
然后将设置和代理 


508
00:20:46,426 --> 00:20:48,296
presentationContextProvider 为 self


509
00:20:49,006 --> 00:20:50,446
然后我们调用 performRequest


510
00:20:57,066 --> 00:20:57,916
现在我们已经定义了动作


511
00:20:57,916 --> 00:20:59,326
让我们继续运行 App 


512
00:21:03,126 --> 00:21:04,356
轻点 Sign in with Apple 按钮 


513
00:21:07,256 --> 00:21:08,616
正如你们所看到的 


514
00:21:08,616 --> 00:21:10,216
UI 正在询问我们


515
00:21:10,576 --> 00:21:12,366
在请求中设置的请求范围


516
00:21:15,316 --> 00:21:17,156
我现在要取消了


517
00:21:20,046 --> 00:21:21,096
还记得 presentationContextProvider


518
00:21:21,096 --> 00:21:22,626
中的这个代理吗


519
00:21:23,966 --> 00:21:25,156
我们将不得不正式采用


520
00:21:25,156 --> 00:21:29,126
为此所需的 authenticationServices 协议


521
00:21:29,696 --> 00:21:31,276
我把它抄到了下面


522
00:21:34,236 --> 00:21:38,126
因此 ASAuthorizationController
代理有两个函数


523
00:21:38,126 --> 00:21:40,076
一个返回授权


524
00:21:40,156 --> 00:21:41,596
另一个返回错误


525
00:21:45,056 --> 00:21:47,976
让我们继续 


526
00:21:51,026 --> 00:21:52,416
我们将定义 AuthorizationController 


527
00:21:52,416 --> 00:21:53,716
didCompleteWithAuthorization


528
00:21:54,446 --> 00:21:57,086
所以我们在这里做的是


529
00:21:57,086 --> 00:21:58,986
我们正在检查返回的授权


530
00:21:59,456 --> 00:22:01,666
我们将检查授权的凭证


531
00:22:01,666 --> 00:22:06,096
然后 在它是 appleIdCredential 的情况下


532
00:22:06,096 --> 00:22:07,536
我们将为凭证的


533
00:22:07,536 --> 00:22:09,876
用户属性设置一个


534
00:22:09,876 --> 00:22:10,526
常量用户标识符


535
00:22:11,676 --> 00:22:13,726
出于演示目的 我们将


536
00:22:14,306 --> 00:22:15,696
用户标识符保存在钥匙串中


537
00:22:15,696 --> 00:22:17,156
以便我们之后后使用它


538
00:22:17,816 --> 00:22:19,496
我还将使用 


539
00:22:19,496 --> 00:22:22,436
ResultViewController 


540
00:22:22,556 --> 00:22:23,646
它将继续负责


541
00:22:23,646 --> 00:22:26,706
一些处理 appleIdCredential 


542
00:22:26,706 --> 00:22:27,646
属性的样板


543
00:22:35,046 --> 00:22:38,176
因此就在这之下 


544
00:22:38,176 --> 00:22:39,926
就在我们定义的下面


545
00:22:39,926 --> 00:22:41,426
我们有了 didCompleteWithError 函数


546
00:22:41,536 --> 00:22:43,546
在流程没有完成


547
00:22:43,546 --> 00:22:45,286
或者没有凭据的


548
00:22:45,286 --> 00:22:47,156
情况下会调用它


549
00:22:50,326 --> 00:22:51,576
最后 我们还有一个协议


550
00:22:51,576 --> 00:22:54,436
就是 ASAuthorizationController


551
00:22:54,476 --> 00:22:56,226
PresentationContextProviding


552
00:22:57,286 --> 00:22:58,326
这为控制器


553
00:22:58,556 --> 00:22:59,636
定义了一个函数


554
00:22:59,636 --> 00:23:00,136
presentationAnchor


555
00:23:00,956 --> 00:23:03,096
这要求我们做的是


556
00:23:03,096 --> 00:23:04,646
返回我们希望 


557
00:23:04,686 --> 00:23:08,246
Authentication Services 显示 UI 的窗口


558
00:23:09,096 --> 00:23:10,976
所以让我们运行 App 


559
00:23:17,046 --> 00:23:21,856
轻点按钮并分享邮件


560
00:23:26,256 --> 00:23:27,806
只需轻点一下即可进行身份验证


561
00:23:32,046 --> 00:23:33,176
所以这里的信号


562
00:23:33,176 --> 00:23:34,406
似乎有一些问题


563
00:23:34,406 --> 00:23:35,686
但我有一个备份视频


564
00:23:35,686 --> 00:23:37,326
可以告诉你们应该发生什么


565
00:23:45,046 --> 00:23:50,006
我们正在这 我们正在共享邮件


566
00:23:50,006 --> 00:23:52,136
然后 ResultViewController 


567
00:23:52,136 --> 00:23:55,116
会在那里显示结果


568
00:23:55,286 --> 00:23:56,546
正如你们所看到的 


569
00:23:56,546 --> 00:23:58,466
我们有一个用户标识符


570
00:23:58,466 --> 00:23:59,436
全名和邮件地址


571
00:24:02,516 --> 00:24:08,976
[掌声]


572
00:24:09,476 --> 00:24:11,976
好的 实际上看起来这起作用了


573
00:24:19,046 --> 00:24:19,976
好了 我们成功了


574
00:24:20,516 --> 00:24:27,686
[掌声]


575
00:24:28,186 --> 00:24:30,186
好的 让我们回到我们的主题


576
00:24:30,676 --> 00:24:32,606
最后我们来总结一下 我们在 UI 中


577
00:24:32,606 --> 00:24:33,766
添加了一个 Sign in with Apple 按钮


578
00:24:34,306 --> 00:24:36,266
我们定义了此按钮的操作


579
00:24:36,606 --> 00:24:38,516
以及返回结果的


580
00:24:38,516 --> 00:24:39,716
身份验证服务协议


581
00:24:39,716 --> 00:24:41,576
所需的功能


582
00:24:41,576 --> 00:24:43,546
并指定了 UI 的显示位置


583
00:24:46,046 --> 00:24:46,926
现在我们已经通过


584
00:24:46,926 --> 00:24:48,706
使用 Sign in with Apple 按钮


585
00:24:48,706 --> 00:24:50,246
来创建账户


586
00:24:50,246 --> 00:24:51,976
让我们致力于使我们的用户快速登录


587
00:24:52,496 --> 00:24:54,306
为此 我们将定义一个函数


588
00:24:54,306 --> 00:24:55,766
该函数将在用户


589
00:24:55,816 --> 00:24:57,566
拥有现有凭据的


590
00:24:57,566 --> 00:24:58,866
情况下向用户显示 UI


591
00:24:59,766 --> 00:25:01,716
因此 这可以是 Apple ID 


592
00:25:01,986 --> 00:25:03,456
或使用 App 授权域的


593
00:25:03,786 --> 00:25:05,776
iCloud 钥匙串密码


594
00:25:14,406 --> 00:25:16,296
所以我在这里定义了 


595
00:25:16,366 --> 00:25:19,766
performExistingAccountSetupFlows 函数


596
00:25:19,766 --> 00:25:22,136
所以这里我们有一个数组


597
00:25:22,136 --> 00:25:23,806
其中包含 Apple ID 请求和


598
00:25:23,806 --> 00:25:27,876
使用相应提供程序的密码请求


599
00:25:28,416 --> 00:25:30,746
然后 我们使用这些


600
00:25:30,746 --> 00:25:32,776
请求初始化授权控制器


601
00:25:32,776 --> 00:25:34,676
像之前一样


602
00:25:34,846 --> 00:25:35,086
设置代理


603
00:25:35,086 --> 00:25:37,406
和 presentationContextProvider


604
00:25:37,406 --> 00:25:39,576
然后调用 performRequest


605
00:25:40,696 --> 00:25:42,096
因此 我们向控制器


606
00:25:42,096 --> 00:25:43,556
添加了另一种类型的


607
00:25:43,556 --> 00:25:44,796
凭据请求


608
00:25:44,846 --> 00:25:45,686
即密码请求


609
00:25:46,596 --> 00:25:48,096
我们希望在我们的代理中


610
00:25:48,096 --> 00:25:49,786
处理这种类型的结果


611
00:25:49,786 --> 00:25:50,846
所以让我们继续做下去


612
00:26:01,296 --> 00:26:02,966
那么我们为 ASPasswordCredential 


613
00:26:02,966 --> 00:26:04,256
设置了一个 case


614
00:26:04,886 --> 00:26:07,326
因此 在这种情况下


615
00:26:07,326 --> 00:26:10,196
ASPasswordCredential 具有


616
00:26:10,196 --> 00:26:11,386
一个用户属性和一个密码属性


617
00:26:12,216 --> 00:26:13,166
在这种情况下


618
00:26:13,166 --> 00:26:14,576
当它返回给你们时 


619
00:26:14,576 --> 00:26:15,636
你们将需要继续对


620
00:26:15,636 --> 00:26:16,906
服务器进行身份验证


621
00:26:16,906 --> 00:26:17,976
甚至不需要向你们的用户


622
00:26:17,976 --> 00:26:19,076
显示任何 UI


623
00:26:19,626 --> 00:26:22,116
那么还有最后一步


624
00:26:22,116 --> 00:26:23,446
实际就是要调用 


625
00:26:23,446 --> 00:26:25,676
performExistingAccountSetup Flows 函数


626
00:26:28,216 --> 00:26:29,466
回到我们的类上


627
00:26:33,326 --> 00:26:35,736
我将重写 viewDidAppear 以调用


628
00:26:35,736 --> 00:26:37,976
performExistingAccountSetupFlows


629
00:26:44,216 --> 00:26:45,746
让我们运行 App


630
00:26:55,116 --> 00:26:56,916
正如你们所看到的 


631
00:26:56,916 --> 00:26:58,336
当我们显示 loginViewController 时


632
00:26:58,336 --> 00:27:00,396
将向你们的用户


633
00:27:00,396 --> 00:27:01,686
显示现有凭据


634
00:27:02,896 --> 00:27:04,096
这是我们的 QuickSigninFlow


635
00:27:04,946 --> 00:27:06,346
所以我们刚刚实现了 


636
00:27:06,346 --> 00:27:08,186
QuickSigninFlow 让我们


637
00:27:08,186 --> 00:27:09,626
继续讨论我们的最后一个主题


638
00:27:09,686 --> 00:27:10,816
即检查 AppleID 


639
00:27:10,816 --> 00:27:12,486
用户标识符的凭据状态


640
00:27:16,046 --> 00:27:17,116
在今天演示的早些时候 


641
00:27:17,116 --> 00:27:18,176
我们在创建账户时


642
00:27:18,176 --> 00:27:19,976
已将用户标识符保存到钥匙串中


643
00:27:20,806 --> 00:27:22,666
使用此标识符


644
00:27:22,666 --> 00:27:23,956
我们可以检查登录状态


645
00:27:24,236 --> 00:27:25,386
以确保我们的用户


646
00:27:25,386 --> 00:27:26,396
经过适当的身份验证


647
00:27:26,876 --> 00:27:28,396
我们将在 AppDelegate 类中执行此操作


648
00:27:28,936 --> 00:27:31,386
然后我转到 AppDelegate 类


649
00:27:35,186 --> 00:27:36,946
我要删除它


650
00:27:47,136 --> 00:27:49,066
首先 我们要检查


651
00:27:49,066 --> 00:27:50,636
钥匙串中是否有


652
00:27:50,636 --> 00:27:51,886
用户标识符


653
00:27:52,116 --> 00:27:53,946
如果是这样 我们将初始化


654
00:27:53,946 --> 00:27:55,916
ASAuthorizationAppleIDProvider


655
00:27:55,966 --> 00:27:57,056
然后使用 AppleIDProvider


656
00:27:57,056 --> 00:27:58,916
我们将调用凭证


657
00:27:58,916 --> 00:28:01,246
传递用户标识符的状态


658
00:28:04,046 --> 00:28:06,186
所以我们会得到三种不同的 三种不同


659
00:28:06,186 --> 00:28:07,206
类型的案例


660
00:28:07,806 --> 00:28:09,976
一个是授权的


661
00:28:09,976 --> 00:28:11,476
在这种情况下 你们可以


662
00:28:11,596 --> 00:28:12,756
假设用户已通过


663
00:28:12,756 --> 00:28:15,216
正确的身份验证


664
00:28:15,216 --> 00:28:17,106
你们可以继续正常的 App 操作


665
00:28:17,986 --> 00:28:18,786
在它被撤销的情况下


666
00:28:18,786 --> 00:28:20,286
你们需要调用你们


667
00:28:20,286 --> 00:28:22,716
现有的注销逻辑


668
00:28:22,716 --> 00:28:24,306
然后你可以通过 notFound 


669
00:28:24,336 --> 00:28:25,736
这个 case 来显示


670
00:28:25,736 --> 00:28:26,796
LoginViewController


671
00:28:26,886 --> 00:28:29,716
所以我要继续运行 App


672
00:28:43,076 --> 00:28:44,336
正如你们所看到的


673
00:28:44,336 --> 00:28:45,606
用户标识符显示在


674
00:28:45,606 --> 00:28:47,906
ResultViewController 中


675
00:28:47,906 --> 00:28:49,516
因为在这种情况下


676
00:28:49,516 --> 00:28:50,056
用户已经被授权


677
00:28:50,556 --> 00:28:51,866
ResultViewController 


678
00:28:51,866 --> 00:28:53,886
是故事板中的


679
00:28:53,886 --> 00:28:54,386
初始视图控制器


680
00:28:54,656 --> 00:28:58,846
这就是我要说的了 很简单吧


681
00:28:59,516 --> 00:29:03,796
[掌声]


682
00:29:04,296 --> 00:29:05,276
那么我刚刚向你们


683
00:29:05,276 --> 00:29:06,466
展示了如何在登录表单中


684
00:29:06,466 --> 00:29:08,146
添加 Sign in with Apple 按钮


685
00:29:08,146 --> 00:29:09,576
如何实现 QuickSigninFlow 


686
00:29:09,806 --> 00:29:10,896
以使用现有凭证


687
00:29:10,896 --> 00:29:12,626
登录用户


688
00:29:12,946 --> 00:29:13,986
以及如何使用用户标识符


689
00:29:13,986 --> 00:29:16,246
检查凭证状态确保


690
00:29:16,416 --> 00:29:17,456
用户通过你们的 App 


691
00:29:17,506 --> 00:29:18,786
进行身份验证


692
00:29:19,126 --> 00:29:20,316
有了这个 我要把会议


693
00:29:20,316 --> 00:29:21,506
交还给 Gokul 他将涵盖


694
00:29:21,506 --> 00:29:23,536
多平台的主题 Gokul


695
00:29:24,516 --> 00:29:29,666
[掌声]


696
00:29:30,166 --> 00:29:31,356
>> 谢谢你 Jonathan


697
00:29:31,356 --> 00:29:33,006
我们刚刚看到 Jonathan


698
00:29:33,006 --> 00:29:36,576
从一个测试 App 开始


699
00:29:36,576 --> 00:29:38,046
添加一个按钮 


700
00:29:38,106 --> 00:29:39,276
解决请求和响应


701
00:29:39,276 --> 00:29:40,036
最后处理现有账户


702
00:29:40,716 --> 00:29:43,216
一切易于实施


703
00:29:43,276 --> 00:29:44,986
为用户提供了极好的体验


704
00:29:45,146 --> 00:29:46,346
那其实是一个非常快速的演示


705
00:29:47,296 --> 00:29:48,796
现在让我们来谈谈跨平台


706
00:29:49,386 --> 00:29:51,466
跨平台很重要


707
00:29:51,606 --> 00:29:54,606
它通过一个简单的


708
00:29:54,726 --> 00:29:56,386
JavaScript 库启用


709
00:29:57,236 --> 00:29:59,216
使用此库 你们可以


710
00:29:59,216 --> 00:30:01,046
让用户在任何平台


711
00:30:01,446 --> 00:30:03,656
（如 Windows 或 Android）


712
00:30:03,826 --> 00:30:05,256
上 Sign in with Apple


713
00:30:05,846 --> 00:30:10,036
轻点熟悉的 Sign in with Apple 按钮将


714
00:30:10,036 --> 00:30:12,686
重定向到 Apple


715
00:30:12,686 --> 00:30:16,066
用户可以在其中输入 Apple ID 并登录


716
00:30:17,036 --> 00:30:19,436
登录后 它会重定向回来


717
00:30:21,366 --> 00:30:23,206
你们收到的调用和


718
00:30:23,206 --> 00:30:26,166
信息都与本机 API 非常相似


719
00:30:26,946 --> 00:30:29,426
如果你们提出要求 


720
00:30:29,426 --> 00:30:30,816
你们将获得 ID 令牌


721
00:30:30,816 --> 00:30:31,236
甚至姓名或邮件


722
00:30:32,356 --> 00:30:33,746
一旦你们获得 ID 和令牌 


723
00:30:33,746 --> 00:30:36,526
你们就可以将其


724
00:30:36,926 --> 00:30:41,086
转换为 App 中的 App 会话


725
00:30:42,036 --> 00:30:45,236
最重要的是 


726
00:30:45,236 --> 00:30:47,326
对 Safari 的支持是内置于 Safari 中的


727
00:30:48,876 --> 00:30:51,736
因此 当你们的用户轻点该按钮时


728
00:30:51,736 --> 00:30:54,966
Safari 将显示一个类似


729
00:30:54,966 --> 00:30:56,866
本地 Apple Pay 的工作表


730
00:30:57,716 --> 00:31:00,606
你们的用户可以


731
00:31:00,606 --> 00:31:02,306
简单地使用触控 ID 他们可以


732
00:31:02,306 --> 00:31:04,466
立即登录并快速使用你的网站


733
00:31:04,466 --> 00:31:06,116
这是一次非常棒的体验


734
00:31:06,536 --> 00:31:08,066
所以它内置于 Safari 中


735
00:31:09,976 --> 00:31:11,366
与 JavaScript 库集成


736
00:31:11,596 --> 00:31:13,976
只需四个简单的步骤


737
00:31:17,056 --> 00:31:19,186
首先 在 HTML 中


738
00:31:19,186 --> 00:31:21,916
包含 JavaScript 库


739
00:31:21,966 --> 00:31:26,146
如图所示 一个简单的 div 渲染按钮


740
00:31:27,076 --> 00:31:28,506
你们可以使用许多参数设置样式


741
00:31:28,506 --> 00:31:30,556
以自定义适合


742
00:31:30,556 --> 00:31:32,446
你们网站的内容


743
00:31:33,176 --> 00:31:34,946
使用一些参数配置它


744
00:31:35,096 --> 00:31:36,526
例如你们是否需要名称


745
00:31:36,526 --> 00:31:39,946
邮件和重定向 redirectURI


746
00:31:42,046 --> 00:31:43,546
最后 当用户


747
00:31:43,546 --> 00:31:45,516
完成登录时


748
00:31:45,626 --> 00:31:47,896
结果将使用表单编码值


749
00:31:47,896 --> 00:31:50,346
发回到重定向 redirectURI


750
00:31:51,346 --> 00:31:53,556
你们验证令牌 身份验证代码


751
00:31:53,556 --> 00:31:56,376
并将其转换为 App 会话


752
00:31:56,746 --> 00:31:59,466
并且你们可以决定希望 会话存在多长时间


753
00:31:59,556 --> 00:32:02,826
这样就快速了解了


754
00:32:02,826 --> 00:32:04,706
JavaScript 库的


755
00:32:04,706 --> 00:32:05,946
跨平台支持


756
00:32:08,046 --> 00:32:09,346
最后 让我们通过一些


757
00:32:09,346 --> 00:32:11,346
最佳实践来看看


758
00:32:11,816 --> 00:32:13,926
与 Sign in with Apple 集成的实例


759
00:32:16,146 --> 00:32:17,676
以下是一些一般性


760
00:32:17,676 --> 00:32:18,296
指导原则


761
00:32:18,986 --> 00:32:20,166
如 App Store 指南中所述


762
00:32:20,166 --> 00:32:22,286
除非你们的 App 


763
00:32:22,286 --> 00:32:23,796
需要重要的


764
00:32:23,866 --> 00:32:25,846
基于账户的功能 否则就让人们


765
00:32:25,846 --> 00:32:27,596
无需登录即可使用它


766
00:32:28,076 --> 00:32:30,186
例如 你们可以指导


767
00:32:30,186 --> 00:32:32,326
用户在购买后 Sign in with Apple


768
00:32:32,326 --> 00:32:33,916
这样你们就


769
00:32:34,336 --> 00:32:36,396
可以将购买与


770
00:32:36,396 --> 00:32:38,606
他们可以轻松


771
00:32:39,126 --> 00:32:40,536
返回的账户绑定


772
00:32:40,536 --> 00:32:41,866
如果你们只需要唯一标识符


773
00:32:41,866 --> 00:32:43,746
来标识用户 


774
00:32:44,316 --> 00:32:45,716
请不要收集姓名或邮件


775
00:32:46,756 --> 00:32:47,476
你不需要它


776
00:32:48,356 --> 00:32:49,606
如果你们通过登录 Apple 


777
00:32:50,816 --> 00:32:52,366
收集邮件 


778
00:32:52,366 --> 00:32:54,916
请确保你们尊重用户的选择


779
00:32:57,156 --> 00:32:58,166
以下是与 API 集成时


780
00:32:58,166 --> 00:32:59,836
要记住的一些


781
00:32:59,956 --> 00:33:01,366
其他最佳实践


782
00:33:02,646 --> 00:33:04,606
首次启动 App 时


783
00:33:05,096 --> 00:33:07,026
请使用 API


784
00:33:07,026 --> 00:33:08,146
检查现有账户


785
00:33:08,806 --> 00:33:10,826
这样 用户可以


786
00:33:10,826 --> 00:33:11,926
快速使用他们


787
00:33:11,926 --> 00:33:13,776
已经拥有的 App 账户


788
00:33:14,306 --> 00:33:15,706
无论是 iCloud 钥匙串密码


789
00:33:16,196 --> 00:33:18,456
还是现有的 Apple 账户


790
00:33:19,086 --> 00:33:20,406
并且你们的 App 中


791
00:33:20,406 --> 00:33:21,376
没有任何重复的账户


792
00:33:22,866 --> 00:33:24,896
计划为返回


793
00:33:24,926 --> 00:33:27,966
真实用户标识符的用户


794
00:33:28,186 --> 00:33:29,196
提供最佳体验


795
00:33:29,406 --> 00:33:32,096
如果它返回未知


796
00:33:32,096 --> 00:33:33,446
请像对待系统中的


797
00:33:33,446 --> 00:33:34,376
任何新账户一样对待它们


798
00:33:34,966 --> 00:33:38,746
使用 Button API 来绘制按钮


799
00:33:40,376 --> 00:33:41,586
当你们使用 API​ ​


800
00:33:41,696 --> 00:33:43,866
绘制按钮时 将其连接到


801
00:33:43,896 --> 00:33:46,026
代码中的 Apple ID 提供程序


802
00:33:47,466 --> 00:33:51,156
最后 一旦用户 Sign in with Apple


803
00:33:51,156 --> 00:33:52,916
他们就会期望


804
00:33:52,916 --> 00:33:55,516
在你们的 App 所在的


805
00:33:55,516 --> 00:33:56,186
所有平台上看到它


806
00:33:56,576 --> 00:33:58,916
所以在所有平台上实现它


807
00:34:00,166 --> 00:34:03,226
以上是最佳实践


808
00:34:03,496 --> 00:34:05,586
总而言之 Sign in with Apple


809
00:34:05,806 --> 00:34:07,906
可以快速轻松地设置


810
00:34:07,906 --> 00:34:09,896
账户并登录你们的 App


811
00:34:10,286 --> 00:34:12,356
简化的一键账户设置


812
00:34:12,356 --> 00:34:14,516
没有繁琐的表单


813
00:34:15,126 --> 00:34:16,735
已验证的邮件地址


814
00:34:16,735 --> 00:34:18,255
即时可用 而且你们可以


815
00:34:18,255 --> 00:34:19,505
用于任何通信


816
00:34:20,606 --> 00:34:24,235
内置安全性没有新密码


817
00:34:24,235 --> 00:34:25,886
每个账户双重认证


818
00:34:26,886 --> 00:34:28,536
真实用户指示器


819
00:34:28,536 --> 00:34:29,666
帮助你们打击账户欺诈


820
00:34:29,666 --> 00:34:32,525
跨平台支持 


821
00:34:32,525 --> 00:34:34,646
这样你们的用户


822
00:34:34,646 --> 00:34:36,606
就可以在你们的 App 所在的


823
00:34:36,656 --> 00:34:37,646
每个平台上 Sign in with Apple


824
00:34:39,036 --> 00:34:41,466
请于 10:00 加入我们的实验室


825
00:34:41,466 --> 00:34:43,085
我们很乐意在那


826
00:34:43,085 --> 00:34:44,386
回答你们的任何问题


827
00:34:45,065 --> 00:34:46,156
身份验证服务


828
00:34:46,156 --> 00:34:47,126
框架中还有更多内容


829
00:34:47,126 --> 00:34:49,136
可帮助你们协助


830
00:34:49,136 --> 00:34:51,136
用户登录和


831
00:34:51,136 --> 00:34:52,286
处理密码


832
00:34:52,766 --> 00:34:53,775
请参加明天的


833
00:34:53,775 --> 00:34:55,315
《What's New in Authentication》会议


834
00:34:55,616 --> 00:34:56,196
来了解更多


835
00:34:56,815 --> 00:34:58,416
并且 Sign in with Apple 


836
00:34:58,536 --> 00:35:00,406
可在独立的 Watch App 很好地运行


837
00:35:00,776 --> 00:35:02,166
请收听 WWDC App 上的


838
00:35:02,166 --> 00:35:04,646
《Creating Independent Watch Apps》


839
00:35:04,646 --> 00:35:06,966
以了解更多信息 就是这样


840
00:35:07,066 --> 00:35:07,926
感谢你们加入我们的会话


841
00:35:07,926 --> 00:35:09,866
希望你们享受了一次很棒的会议 谢谢大家


842
00:35:10,016 --> 00:35:12,000
[掌声]

