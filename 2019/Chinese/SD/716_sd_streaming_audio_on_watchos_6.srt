1
00:00:06,640 --> 00:00:08,041 line:0
（在watchOS 6上
播放音频）


2
00:00:08,108 --> 00:00:10,010 line:0
去年的watchOS 5中


3
00:00:10,077 --> 00:00:14,448 line:0
我们介绍了在后台播放本地
长音频文件


4
00:00:16,315 --> 00:00:18,118 line:-1
今年 使用watchOS 6


5
00:00:18,185 --> 00:00:22,723 line:-2
Watch app将可以直接在
Apple Watch播放流音频


6
00:00:23,524 --> 00:00:25,259 line:-1
这意味着你的用户


7
00:00:25,325 --> 00:00:27,461 line:-1
将不再需要使用iPhone


8
00:00:27,528 --> 00:00:29,196 line:-1
将音频文件同步到Watch上


9
00:00:29,463 --> 00:00:32,732 line:-1
就能使用音频文件


10
00:00:32,799 --> 00:00:35,569 line:-1
他们现在可以收听实时音频节目


11
00:00:35,636 --> 00:00:36,937 line:-1
比如体育节目


12
00:00:38,472 --> 00:00:43,210 line:-2
Apple Watch上watchOS
主要支持两种方式的音频流播放


13
00:00:44,244 --> 00:00:45,179 line:-1
HLS


14
00:00:45,979 --> 00:00:47,814 line:-1
和自定义音频协议


15
00:00:49,383 --> 00:00:51,185 line:-1
我们来深入了解一下


16
00:00:51,718 --> 00:00:54,888 line:-2
如果你的内容是
HLS音频流所支持的


17
00:00:55,956 --> 00:00:58,525 line:-2
你可将AVQueuePlayer
指向到你的订阅流中


18
00:00:58,592 --> 00:01:00,827 line:-2
它会协助你播放你的
流媒体内容


19
00:01:01,695 --> 00:01:04,464 line:-2
watchOS为
HLS音频订阅流做了优化


20
00:01:04,531 --> 00:01:06,433 line:-1
上手非常简单


21
00:01:08,335 --> 00:01:10,938 line:-1
使用专有的音频格式或


22
00:01:11,004 --> 00:01:13,473 line:-1
自定义协议的app有点不同


23
00:01:14,908 --> 00:01:18,545 line:-2
它们需要使用网络框架上使用
URLSession


24
00:01:18,612 --> 00:01:22,049 line:-2
来获取和解析
它们的元数据和音频内容


25
00:01:24,218 --> 00:01:26,720 line:-1
每当音频内容在Watch上下载完成后


26
00:01:26,787 --> 00:01:30,591 line:-2
使用AVFoundation
来实现音频路径选择和音频播放


27
00:01:31,825 --> 00:01:33,060 line:-1
（API附件）


28
00:01:33,126 --> 00:01:35,429 line:-2
将iOS API集成
watchOS SDK后


29
00:01:35,495 --> 00:01:39,499 line:-2
watchOS 6上
可以实现音频流播放


30
00:01:40,000 --> 00:01:43,170 line:-2
我们的目标是将着两个SDK
结合更紧密


31
00:01:43,237 --> 00:01:47,074 line:-2
这样你的代码不需要做太多修改
就能在watchOS上运行了


32
00:01:48,375 --> 00:01:49,476 line:-1
至于网络


33
00:01:49,810 --> 00:01:52,613 line:-2
watchOS 6
现在有了网络框架


34
00:01:52,679 --> 00:01:54,648 line:-1
iOS 12上第一次引入


35
00:01:55,048 --> 00:01:58,585 line:-2
这个框架提供了一个更加现代的
单位套接字的替代品


36
00:01:59,019 --> 00:02:01,922 line:-1
网络框架不仅提供了C API


37
00:02:01,989 --> 00:02:04,725 line:-2
同时也提供
非常方便的Swift API


38
00:02:06,326 --> 00:02:10,130 line:-2
URLSession为watchOS带来了
URLSessionStreamingTask


39
00:02:10,430 --> 00:02:13,967 line:-2
它也带来了
URLSessionWebSocketTask


40
00:02:14,034 --> 00:02:17,738 line:-2
在iOS 13和
watchOS 6都是新引入的


41
00:02:18,438 --> 00:02:20,274 line:-1
音频流为从网络上获取数据的方式


42
00:02:20,340 --> 00:02:23,010 line:-1
带来了特别的挑战


43
00:02:23,377 --> 00:02:24,211 line:-1
为此


44
00:02:24,278 --> 00:02:28,582 line:-2
URLSession引入了新的
AV流媒体网络服务类型


45
00:02:28,882 --> 00:02:31,451 line:-1
你应使用它来请求流数据


46
00:02:32,986 --> 00:02:33,987 line:-1
至于音频播放


47
00:02:34,054 --> 00:02:37,758 line:-2
AVFoundation为
watchOS 6带来许多API


48
00:02:37,824 --> 00:02:41,161 line:-2
包括AVPlayer
和AVQueuePlayer


49
00:02:42,329 --> 00:02:44,164 line:-1
同时


50
00:02:44,231 --> 00:02:46,300 line:-2
CoreMedia
也第一次接入了watchOS


51
00:02:47,734 --> 00:02:51,205 line:-2
如果你的app已经能
实现后台音频播放的功能


52
00:02:51,271 --> 00:02:52,840 line:-1
并不需要其他的项目配置


53
00:02:53,140 --> 00:02:55,475 line:-1
音频流播放也同样可以实现了


54
00:02:56,176 --> 00:02:58,812 line:-2
如果你的项目还没有配置
音频后台播放


55
00:02:58,879 --> 00:03:02,950 line:-2
你需要在WatchKit
扩展目标上添加这个功能


56
00:03:03,350 --> 00:03:05,652 line:-1
首先 你要先打开Xcode


57
00:03:05,719 --> 00:03:08,188 line:-2
来到WatchKit扩展
目标设置


58
00:03:09,289 --> 00:03:11,792 line:-1
在签署和功能部分中


59
00:03:11,859 --> 00:03:15,262 line:-2
点击添加功能
选择后台模式


60
00:03:16,096 --> 00:03:19,399 line:-2
最后 在后台模式里
选择音效模式


61
00:03:20,267 --> 00:03:21,835 line:-1
这样就完成了


62
00:03:22,703 --> 00:03:23,837 line:-1
（API的使用）


63
00:03:23,904 --> 00:03:27,541 line:-2
现在项目已经配置完成了
我们来聊一下在音频播放时


64
00:03:27,608 --> 00:03:29,877 line:-1
你需要使用的不同的API


65
00:03:30,878 --> 00:03:34,882 line:-2
你的app启动后
在你启动一个音频会话之前


66
00:03:34,948 --> 00:03:37,284 line:-1
你需要向你的服务器获取数据


67
00:03:38,752 --> 00:03:41,355 line:-1
这个数据是给用户展示的


68
00:03:41,421 --> 00:03:42,923 line:-1
流播放选项和内容


69
00:03:42,990 --> 00:03:45,759 line:-1
比如专辑信息


70
00:03:45,826 --> 00:03:47,261 line:-1
播放列表信息


71
00:03:47,327 --> 00:03:49,863 line:-1
或是你app流媒体的元数据内容


72
00:03:50,797 --> 00:03:53,934 line:-2
在你的app启动前
或是在后台更新时


73
00:03:54,001 --> 00:03:56,203 line:-1
你可能就获取到了这些数据


74
00:03:56,537 --> 00:03:59,573 line:-2
如非使用URLSession
来获取你的数据


75
00:04:00,240 --> 00:04:04,178 line:-2
这时 套接字 流媒体任务
和网络框架


76
00:04:04,244 --> 00:04:05,913 line:-1
将不能被使用


77
00:04:07,748 --> 00:04:11,051 line:-2
当你获取到了所有的信息
来开始流播放时


78
00:04:11,118 --> 00:04:12,519 line:-1
启动音频会话


79
00:04:13,153 --> 00:04:16,757 line:-1
音频会话在这个节点前不应该被启动


80
00:04:16,822 --> 00:04:19,760 line:-1
否则会打断用户的使用体验


81
00:04:20,327 --> 00:04:23,263 line:-2
这是watchOS和
iOS非常重要的差异


82
00:04:23,697 --> 00:04:27,201 line:-2
在iOS上
一直会有一个默认的音频线路


83
00:04:27,267 --> 00:04:30,304 line:-2
然而 我们发现watchOS
不是这样的


84
00:04:31,738 --> 00:04:33,574 line:-1
当你启用一个音频会话时


85
00:04:33,640 --> 00:04:36,944 line:-1
如果你的app当前没有任何线路


86
00:04:37,010 --> 00:04:40,647 line:-2
watchOS会自动出现一个
音频线路选择器


87
00:04:41,348 --> 00:04:42,449 line:-1
有两种使用场景


88
00:04:42,516 --> 00:04:46,620 line:-2
当watchOS跳过
显示音频线路选择器


89
00:04:47,187 --> 00:04:48,689 line:-1
对于蓝牙设备


90
00:04:48,755 --> 00:04:50,924 line:-1
如果设备已经连接至Watch


91
00:04:51,425 --> 00:04:55,729 line:-2
或者Bluetooth设备
使用了Apple无线芯片


92
00:04:55,896 --> 00:04:58,065 line:-1
如果设备已连接至iPhone


93
00:04:58,131 --> 00:05:00,133 line:-1
Watch会暂时借用它


94
00:05:00,801 --> 00:05:03,170 line:-2
另一种场景是无法实现上面的
功能时


95
00:05:03,437 --> 00:05:06,907 line:-2
比如 当你连接至你的iPhone
时打电话


96
00:05:08,141 --> 00:05:10,878 line:-1
当你的app有了一个音频会话


97
00:05:11,211 --> 00:05:14,948 line:-1
所有的网络API都能取回音频内容


98
00:05:15,349 --> 00:05:18,085 line:-1
包括URLSessionStreamingTask


99
00:05:18,318 --> 00:05:21,788 line:-2
URLSessionWebSocketTask
和网络框架


100
00:05:22,723 --> 00:05:26,360 line:-2
当没有一个激活的音频会话
你尝试使用这些API时


101
00:05:26,426 --> 00:05:27,661 line:-1
你的通话会失败


102
00:05:29,530 --> 00:05:31,932 line:-2
最后 当你的app有足够的
音频数据时


103
00:05:31,999 --> 00:05:34,668 line:-1
它才会开始播放


104
00:05:34,735 --> 00:05:37,638 line:-2
你可使用AVFoundation
来播放你的音频内容


105
00:05:40,040 --> 00:05:43,143 line:-2
如果你需要从你的服务器
为你的流播放请求新的信息


106
00:05:43,210 --> 00:05:46,313 line:-2
你可以使用所有
可用的网络API来实现


107
00:05:48,382 --> 00:05:51,118 line:-2
现在 我们来讲一下音频流播放
在Apple Watch


108
00:05:51,185 --> 00:05:52,352 line:-1
上的最佳实践案例


109
00:05:52,419 --> 00:05:54,221 line:-1
（最佳实践）


110
00:05:54,288 --> 00:05:58,025 line:-2
Apple Watch Series 3
和之后的系列可以实现音频流播放


111
00:05:58,659 --> 00:06:00,861 line:-1
这说明你的app需要检测


112
00:06:00,928 --> 00:06:03,931 line:-2
Watch的运行版本
是否能支持你的音频流播放


113
00:06:04,364 --> 00:06:05,465 line:-1
在watchOS 6


114
00:06:05,532 --> 00:06:09,970 line:-2
使用
WKInterphaseDevicessupportsAudioStreaming


115
00:06:10,037 --> 00:06:11,138 line:-1
来检查


116
00:06:12,873 --> 00:06:16,376 line:-1
我们不建议watchOS 6上的


117
00:06:16,443 --> 00:06:18,912 line:-1
其他音频和和网络API使用


118
00:06:18,979 --> 00:06:21,782 line:-2
WatchKit的
WKAudioFile的API


119
00:06:22,115 --> 00:06:23,283 line:-1
为此


120
00:06:23,350 --> 00:06:26,386 line:-2
watchOS 6上的
这些API已被弃用


121
00:06:27,254 --> 00:06:30,390 line:-2
现在 我们来讨论
一些网络的最佳实践案例


122
00:06:32,492 --> 00:06:34,161 line:-1
如何获取信息是关键


123
00:06:34,561 --> 00:06:37,998 line:-2
根据不同的网络状况
我们需要在任何时候都为本地


124
00:06:38,065 --> 00:06:40,400 line:-1
保存一定量的音频数据


125
00:06:42,369 --> 00:06:45,038 line:-1
网络请求的数量和大小


126
00:06:45,105 --> 00:06:47,407 line:-1
需要被控制到最小数量


127
00:06:47,708 --> 00:06:50,911 line:-2
额外的请求将不会向
其他设备发送问题


128
00:06:50,978 --> 00:06:52,813 line:-1
可能会导致延时或停止播放


129
00:06:53,213 --> 00:06:55,449 line:-1
也要避免请求下载


130
00:06:55,516 --> 00:06:56,817 line:-1
不需要的数据


131
00:06:57,084 --> 00:06:59,887 line:-1
不然 这些都会导致糟糕的用户体验


132
00:07:02,189 --> 00:07:07,194 line:-2
安全起见 开始流播放时
使用64 kbps编码的音频数据


133
00:07:07,895 --> 00:07:10,931 line:-2
监测各种数据到达你app
的速度


134
00:07:10,998 --> 00:07:13,166 line:-1
只有当网络状况允许的情况下


135
00:07:13,233 --> 00:07:15,435 line:-1
提升速率


136
00:07:15,836 --> 00:07:19,439 line:-2
AVFoundation自动
为HLS音频播放实现此功能


137
00:07:21,441 --> 00:07:23,710 line:-1
不要依赖网络的可达性


138
00:07:23,977 --> 00:07:25,846 line:-1
根据网络的特性


139
00:07:25,913 --> 00:07:27,915 line:-1
在你app使用这些信息的时候


140
00:07:27,981 --> 00:07:31,652 line:-1
API返回的信息可能不再有效


141
00:07:32,352 --> 00:07:34,121 line:-1
为了最好的用户体验


142
00:07:34,188 --> 00:07:36,456 line:-1
总是要处理网络连接时


143
00:07:36,523 --> 00:07:39,459 line:-1
的中断和失败


144
00:07:40,027 --> 00:07:41,995 line:-1
一直要实时调整


145
00:07:42,062 --> 00:07:44,298 line:-1
你app的


146
00:07:44,364 --> 00:07:45,799 line:-1
音频的质量和获取量


147
00:07:47,568 --> 00:07:51,305 line:-2
最后 你的app
在Apple Watch


148
00:07:51,371 --> 00:07:52,773 line:-1
的网络过渡会更平滑


149
00:07:53,140 --> 00:07:55,142 line:-1
当Watch远离iPhone时


150
00:07:55,209 --> 00:07:58,478 line:-2
从Bluetooth、Wi-Fi
或蜂窝网络的良好过渡


151
00:07:59,079 --> 00:08:02,249 line:-2
对于Watch来说
当app运行时 这3种网络类型中


152
00:08:02,316 --> 00:08:03,550 line:-1
切换并不常见


153
00:08:04,051 --> 00:08:06,854 line:-2
但你的app应该考虑到
这样的切换情况


154
00:08:06,920 --> 00:08:08,989 line:-1
只需几秒钟就能完成


155
00:08:09,656 --> 00:08:10,490 line:-1
如你所见


156
00:08:10,557 --> 00:08:14,761 line:-2
当从其他平台 Apple或其他
平台来为Apple Watch


157
00:08:14,828 --> 00:08:16,063 line:-1
引入音频流app时


158
00:08:16,129 --> 00:08:17,764 line:-1
你应该做好优化网络码和协议


159
00:08:17,831 --> 00:08:21,301 line:-1
的准备


160
00:08:22,736 --> 00:08:23,804 line:0
如果你想要了解
在Apple Watch


161
00:08:23,871 --> 00:08:27,241 line:0
开始创建音频的更多信息


162
00:08:27,307 --> 00:08:30,777 line:0
为watchOS创建音频
是一个不错的开始


163
00:08:31,345 --> 00:08:34,181 line:0
本次网络框架介绍会议的信息


164
00:08:34,248 --> 00:08:36,683 line:0
都是在watchOS
100%能实现的


165
00:08:37,116 --> 00:08:39,453 line:0
最后 想要知道如何创建


166
00:08:39,520 --> 00:08:42,556 line:0
良好的音频流播放体验
你可以在其他演讲了解更多信息

