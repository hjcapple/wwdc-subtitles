1
00:00:00,506 --> 00:00:05,516
[音乐]


2
00:00:06,516 --> 00:00:09,976
[掌声]


3
00:00:10,476 --> 00:00:12,676
>> 有了 iOS 13 我们


4
00:00:12,676 --> 00:00:14,976
设计和构建 App 的


5
00:00:14,976 --> 00:00:17,736
方式将会发生一些细微但重要的改变


6
00:00:18,816 --> 00:00:20,796
深色模式为我们如何


7
00:00:21,066 --> 00:00:22,506
处理颜色 图像和文本提供了


8
00:00:22,826 --> 00:00:24,296
一种新的方法


9
00:00:25,186 --> 00:00:27,436
新的卡片样式表不仅以


10
00:00:27,436 --> 00:00:29,536
不同的方式来呈现模态演示


11
00:00:29,536 --> 00:00:31,186
而且还改变了我们


12
00:00:31,186 --> 00:00:33,326
和它的交互方式


13
00:00:34,266 --> 00:00:36,286
新的语境菜单控件


14
00:00:36,286 --> 00:00:39,676
可以轻松快速地


15
00:00:39,676 --> 00:00:43,106
访问语境相关的功能


16
00:00:43,476 --> 00:00:45,346
关于这三个主题


17
00:00:45,346 --> 00:00:46,426
我们有很多内容要讲


18
00:00:46,426 --> 00:00:49,286
所以现在让我们了解一下深色模式


19
00:00:50,746 --> 00:00:52,726
去年我们在 macOS 上


20
00:00:52,726 --> 00:00:56,506
推出了深色模式 它非常受欢迎


21
00:00:57,206 --> 00:00:58,976
多年来 照片和视频


22
00:00:58,976 --> 00:01:01,086
App 一直都使用深色用户页面


23
00:01:01,346 --> 00:01:02,896
因为它们能让人们


24
00:01:02,986 --> 00:01:05,325
清晰地看到照片和视频


25
00:01:06,406 --> 00:01:08,066
深色用户页面对深色


26
00:01:08,066 --> 00:01:09,986
照明页面来说非常有用


27
00:01:09,986 --> 00:01:11,966
我们的眼睛更容易适应


28
00:01:12,256 --> 00:01:13,896
黑暗的屏幕和


29
00:01:13,896 --> 00:01:15,196
周围的世界


30
00:01:15,936 --> 00:01:17,736
而且 撇开功能上的原因不谈


31
00:01:18,156 --> 00:01:19,896
有些人偏爱深色用户页面


32
00:01:19,896 --> 00:01:22,916
只是出于个人喜好


33
00:01:24,376 --> 00:01:26,776
iOS 上的深色使用


34
00:01:26,776 --> 00:01:28,566
纯黑色背景来使


35
00:01:28,616 --> 00:01:30,986
文本和其他前景元素


36
00:01:30,986 --> 00:01:32,456
形成最大对比


37
00:01:33,376 --> 00:01:35,076
黑色背景与硬件边框


38
00:01:35,126 --> 00:01:36,316
无缝地融合在一起


39
00:01:36,316 --> 00:01:38,736
从而使用户界面


40
00:01:38,736 --> 00:01:40,476
看起来更广阔并与


41
00:01:40,476 --> 00:01:41,426
硬件本身融合


42
00:01:42,856 --> 00:01:45,086
一般来说 你所有的 App


43
00:01:45,086 --> 00:01:46,646
都应该支持深色模式


44
00:01:47,276 --> 00:01:48,566
当使用你 App 的用户


45
00:01:48,566 --> 00:01:50,046
把他们的设备设置为


46
00:01:50,046 --> 00:01:51,876
深色模式时 他们也会期待


47
00:01:51,876 --> 00:01:53,416
看到 App 发生改变


48
00:01:54,436 --> 00:01:55,726
目前 支持深色模式


49
00:01:55,726 --> 00:01:57,966
需涉及到升级的


50
00:01:57,966 --> 00:02:00,856
iOS 设计系统


51
00:02:00,856 --> 00:02:03,576
iOS 13 已经进行了全面检修


52
00:02:04,226 --> 00:02:05,276
现在 为了让我们都在


53
00:02:05,276 --> 00:02:07,246
同一个页面上 设计系统


54
00:02:07,246 --> 00:02:08,636
基本上就是一组部件


55
00:02:08,726 --> 00:02:11,776
如颜色 字体和


56
00:02:11,776 --> 00:02:13,766
符号 保持逻辑


57
00:02:13,766 --> 00:02:15,526
一致一同运行


58
00:02:16,586 --> 00:02:19,216
一个条理清晰 抱歉


59
00:02:19,216 --> 00:02:20,926
和协调一致的设计系统


60
00:02:20,966 --> 00:02:23,996
能帮助我们轻松地学习和使用


61
00:02:24,976 --> 00:02:26,546
通过与 iOS 设计


62
00:02:26,626 --> 00:02:28,576
系统的整合 人们


63
00:02:28,706 --> 00:02:31,146
会更熟悉也更容易


64
00:02:31,146 --> 00:02:32,326
操作这个 App


65
00:02:33,306 --> 00:02:34,746
在讨论所有细节之前


66
00:02:34,746 --> 00:02:36,726
我想先分享一些指导


67
00:02:36,726 --> 00:02:38,316
设计团队工作的


68
00:02:38,616 --> 00:02:40,766
关键设计目标


69
00:02:42,076 --> 00:02:44,046
首先 他们希望 iOS 能


70
00:02:44,266 --> 00:02:46,926
保持熟悉和直观的特点


71
00:02:47,786 --> 00:02:49,486
iOS 设计系统已经


72
00:02:49,486 --> 00:02:51,986
被彻底改造 但它最终


73
00:02:51,986 --> 00:02:54,846
仍然是 iOS


74
00:02:56,256 --> 00:02:58,296
他们试图让内部设计


75
00:02:58,296 --> 00:02:59,626
更加一致


76
00:03:00,266 --> 00:03:02,226
所有的内置 App


77
00:03:02,286 --> 00:03:04,016
都经过重新设计


78
00:03:04,016 --> 00:03:06,106
使它们彼此之间顺次运行


79
00:03:06,106 --> 00:03:07,396
这使用了我们今天要


80
00:03:07,396 --> 00:03:08,816
讨论的所有组件


81
00:03:10,126 --> 00:03:11,596
他们还希望新的设计


82
00:03:11,596 --> 00:03:13,366
系统包括一系列的


83
00:03:13,406 --> 00:03:15,056
颜色选项来成功


84
00:03:15,056 --> 00:03:16,776
阐明信息层级结构


85
00:03:17,046 --> 00:03:19,026
从而让最重要的元素


86
00:03:19,026 --> 00:03:20,746
成为最强大的元素


87
00:03:20,746 --> 00:03:23,066
而不那么重要的


88
00:03:23,066 --> 00:03:24,566
元素则退居二线


89
00:03:25,866 --> 00:03:27,896
他们还将可访问性与


90
00:03:27,946 --> 00:03:30,086
其他目标放在同等的地位


91
00:03:30,896 --> 00:03:32,846
新系统完全能支持


92
00:03:32,926 --> 00:03:35,696
粗体文本和增强的对比度


93
00:03:35,696 --> 00:03:37,046
访问模式


94
00:03:38,336 --> 00:03:40,846
最后 他们希望新的


95
00:03:40,846 --> 00:03:42,636
设计系统简单


96
00:03:42,846 --> 00:03:45,196
直观 易于实现


97
00:03:46,156 --> 00:03:48,636
好了 现在让我们聊一聊细节


98
00:03:49,926 --> 00:03:52,036
我们好像应该从颜色开始比较好


99
00:03:53,186 --> 00:03:55,746
每个 App 都有一个背景


100
00:03:55,746 --> 00:03:58,256
大多数 App 都有文本和符号


101
00:03:59,006 --> 00:04:00,676
一些 App 有分隔线


102
00:04:00,676 --> 00:04:04,096
和分组框来帮助


103
00:04:04,096 --> 00:04:05,986
组织全部的内容


104
00:04:07,166 --> 00:04:08,126
现在 当我们描述这些颜色时


105
00:04:08,126 --> 00:04:10,496
可以很自然地通过


106
00:04:10,496 --> 00:04:12,236
它们的值来对其进行讨论


107
00:04:12,806 --> 00:04:14,176
文本是黑色的


108
00:04:14,176 --> 00:04:16,916
背景是白色的等等


109
00:04:17,886 --> 00:04:19,016
现在 随着界面变得


110
00:04:19,016 --> 00:04:20,805
越来越复杂 这个调色板


111
00:04:20,805 --> 00:04:23,136
的长度就会扩展


112
00:04:23,756 --> 00:04:25,506
但这些其实都不算什么


113
00:04:26,476 --> 00:04:28,356
然而 当你添加对


114
00:04:28,706 --> 00:04:31,116
独立外观的支持时 就有了


115
00:04:31,116 --> 00:04:33,366
两组并行的颜色以便


116
00:04:33,826 --> 00:04:35,916
彼此保持同步并便于进行管理


117
00:04:37,066 --> 00:04:38,316
在这一点上 用一种


118
00:04:38,316 --> 00:04:40,356
更抽象的方式来看待颜色


119
00:04:40,356 --> 00:04:41,996
会比较有帮助


120
00:04:42,946 --> 00:04:45,176
这就是语义颜色的由来


121
00:04:46,566 --> 00:04:48,346
语义颜色描述


122
00:04:48,456 --> 00:04:50,936
颜色的意图 而不是


123
00:04:50,936 --> 00:04:52,246
颜色的值


124
00:04:53,476 --> 00:04:54,996
因为语义颜色是


125
00:04:54,996 --> 00:04:56,776
从它们的确切外观中提取


126
00:04:56,776 --> 00:04:59,636
出来的 所以它们可以同时工作


127
00:04:59,686 --> 00:05:00,766
它们是动态的


128
00:05:01,706 --> 00:05:03,446
所以 背景色可以是


129
00:05:03,496 --> 00:05:05,726
黑色的深色模式和白色的


130
00:05:05,726 --> 00:05:06,946
浅色模式


131
00:05:07,536 --> 00:05:09,196
因此 你不必为浅色


132
00:05:09,196 --> 00:05:10,656
和深色模式分别维护


133
00:05:10,686 --> 00:05:12,686
两个颜色列表


134
00:05:12,686 --> 00:05:14,716
你可以将系统调色板中的


135
00:05:14,716 --> 00:05:16,626
语义颜色应用到 UI 元素


136
00:05:17,046 --> 00:05:17,976
它们的外观将自动


137
00:05:17,976 --> 00:05:19,696
适应浅色模式


138
00:05:19,696 --> 00:05:22,786
和深色模式 这非常方便


139
00:05:23,896 --> 00:05:26,106
iOS 13 里有一个语义颜色


140
00:05:26,106 --> 00:05:27,846
调色板供你使用


141
00:05:28,866 --> 00:05:30,106
这些颜色中有许多具有


142
00:05:30,196 --> 00:05:32,476
初等 次级 三级


143
00:05:32,726 --> 00:05:34,136
和四级值


144
00:05:35,116 --> 00:05:36,566
这些变体用于


145
00:05:36,566 --> 00:05:38,496
表示信息层级结构


146
00:05:39,296 --> 00:05:40,666
标签颜色与背景的


147
00:05:40,666 --> 00:05:42,546
对比度最大 所以


148
00:05:42,546 --> 00:05:43,586
它会提前进入前台


149
00:05:43,656 --> 00:05:44,786
吸引你的注意力


150
00:05:44,786 --> 00:05:46,486
它应该用于


151
00:05:46,486 --> 00:05:48,236
主要元素中 如标题


152
00:05:48,946 --> 00:05:51,016
副标题


153
00:05:51,016 --> 00:05:52,556
第三位符文本


154
00:05:52,976 --> 00:05:55,056
第四行禁用的文本


155
00:05:56,126 --> 00:05:57,916
同样的基本原理也适用于


156
00:05:57,916 --> 00:05:59,046
背景颜色


157
00:05:59,756 --> 00:06:01,546
系统背景是一个主要的


158
00:06:01,546 --> 00:06:02,926
背景颜色 在浅色模式下


159
00:06:02,926 --> 00:06:05,326
是纯白色 在深色模式下是纯黑色


160
00:06:05,956 --> 00:06:08,426
二级和三级系统


161
00:06:08,426 --> 00:06:10,456
背景颜色允许你来


162
00:06:10,456 --> 00:06:12,856
安排信息层级


163
00:06:13,846 --> 00:06:15,776
还有一组用于组表


164
00:06:15,776 --> 00:06:18,096
视图的并行背景颜色


165
00:06:19,046 --> 00:06:20,696
现在 如果你仔细观察


166
00:06:21,176 --> 00:06:22,416
你会注意到这些颜色


167
00:06:22,416 --> 00:06:24,266
并不是简单地在浅色


168
00:06:24,266 --> 00:06:25,286
和深色模式之间倒转


169
00:06:25,956 --> 00:06:27,366
表行背景在这两种情况下


170
00:06:27,366 --> 00:06:28,326
颜色都比较浅


171
00:06:29,116 --> 00:06:30,616
它们一致选择了


172
00:06:30,616 --> 00:06:32,676
一种能确保对比度


173
00:06:32,676 --> 00:06:34,836
的调色板 同时让


174
00:06:34,836 --> 00:06:37,036
App 在浅色模式


175
00:06:37,036 --> 00:06:39,136
和深色模式之间保持相似


176
00:06:40,676 --> 00:06:42,126
当你在设计深色模式时


177
00:06:42,126 --> 00:06:43,776
可以想象灯光被调暗了


178
00:06:43,776 --> 00:06:45,126
而不是所有的颜色


179
00:06:45,126 --> 00:06:46,736
全都反了过来


180
00:06:46,736 --> 00:06:49,366
这通常是很有帮助的


181
00:06:50,056 --> 00:06:52,216
新的系统调色板包括


182
00:06:52,216 --> 00:06:54,336
填充色和分隔色


183
00:06:55,026 --> 00:06:56,656
所有的填充色


184
00:06:56,656 --> 00:06:57,876
和分隔色都是


185
00:06:57,876 --> 00:07:00,116
半透明的 这有助于


186
00:07:00,116 --> 00:07:02,056
它们与各种背景色


187
00:07:02,196 --> 00:07:04,066
形成良好的对比


188
00:07:05,346 --> 00:07:07,026
新的调色板包括六个


189
00:07:07,466 --> 00:07:09,166
完全不透明的灰色值


190
00:07:09,696 --> 00:07:11,276
当透明度产生的结果


191
00:07:11,276 --> 00:07:12,426
不能令人满意时 最好


192
00:07:12,486 --> 00:07:14,046
使用这些颜色


193
00:07:14,716 --> 00:07:16,216
因此 比如在绘制


194
00:07:16,216 --> 00:07:17,576
交叉网格线时


195
00:07:18,146 --> 00:07:20,006
重叠的半透明颜色


196
00:07:20,006 --> 00:07:23,256
会让人产生视觉错觉


197
00:07:24,216 --> 00:07:26,896
而且 如果元素重叠了


198
00:07:26,896 --> 00:07:28,666
纯色就非常有用了


199
00:07:28,666 --> 00:07:29,876
它可以防止元素看起来


200
00:07:30,106 --> 00:07:31,346
被禁用或损坏


201
00:07:32,856 --> 00:07:34,536
这些颜色几乎在整个


202
00:07:34,536 --> 00:07:35,906
系统中都有使用


203
00:07:36,076 --> 00:07:38,136
我们鼓励大家在自己的


204
00:07:38,136 --> 00:07:39,636
App 中使用这些颜色


205
00:07:40,526 --> 00:07:42,126
首先 你可以在


206
00:07:42,126 --> 00:07:44,036
Apple Design Resources 和


207
00:07:44,036 --> 00:07:45,676
Human Interface Guidelines


208
00:07:45,946 --> 00:07:47,546
里查看完整调色板


209
00:07:48,016 --> 00:07:49,536
我会在最后展示


210
00:07:49,536 --> 00:07:51,096
更多的相关信息


211
00:07:52,246 --> 00:07:53,836
和以前一样 我们将继续


212
00:07:53,836 --> 00:07:55,776
为你提供着色颜色 作为


213
00:07:55,776 --> 00:07:57,456
你 App 的着色颜色


214
00:07:57,976 --> 00:07:59,566
这些色调是动态的


215
00:08:00,156 --> 00:08:01,636
这意味着它们有浅色


216
00:08:01,636 --> 00:08:03,366
和深色模式的变量


217
00:08:04,856 --> 00:08:05,776
每种色调都有


218
00:08:05,776 --> 00:08:07,256
高对比度的变量


219
00:08:07,656 --> 00:08:09,046
当它们对比度增加时


220
00:08:09,046 --> 00:08:11,326
就会启用可访问设置


221
00:08:12,796 --> 00:08:14,516
浅色在深色模式下变浅


222
00:08:14,516 --> 00:08:17,386
而在浅色模式下变深


223
00:08:18,766 --> 00:08:20,566
现在 如果你选择浅色


224
00:08:20,566 --> 00:08:22,766
请试着选择在两种


225
00:08:22,806 --> 00:08:24,336
模式下都很棒的颜色


226
00:08:25,796 --> 00:08:27,266
然而 在浅色模式下


227
00:08:27,336 --> 00:08:28,676
显色出色的颜色


228
00:08:28,766 --> 00:08:30,986
在深色模式下可能


229
00:08:30,986 --> 00:08:32,956
会对比度不足 反之亦然


230
00:08:33,846 --> 00:08:35,626
即便你觉得颜色


231
00:08:35,626 --> 00:08:36,696
在两种模式下都能


232
00:08:36,696 --> 00:08:38,856
完美显示 最好还是使用


233
00:08:38,856 --> 00:08:40,145
在线颜色对比计算器


234
00:08:40,145 --> 00:08:42,376
来检查一下你的颜色


235
00:08:43,106 --> 00:08:44,756
现在 因为色调颜色可以


236
00:08:44,756 --> 00:08:47,066
是动态的 你可以选两种


237
00:08:47,066 --> 00:08:48,746
稍微不同的颜色


238
00:08:48,746 --> 00:08:51,016
来用于浅色和深色模式


239
00:08:51,016 --> 00:08:52,816
当你选择这些颜色时


240
00:08:52,816 --> 00:08:56,726
目标对比度是 4.5 比 1 或是更高


241
00:08:57,996 --> 00:09:00,636
强烈的颜色对比可以


242
00:09:00,636 --> 00:09:04,416
提高 App 的辅助性和可用性


243
00:09:04,936 --> 00:09:06,406
系统调色板应该


244
00:09:06,406 --> 00:09:08,956
基本上涵盖了你的大部分需求


245
00:09:09,706 --> 00:09:11,336
当然 你也需要


246
00:09:11,336 --> 00:09:13,316
定义自己的颜色


247
00:09:14,076 --> 00:09:16,046
也许你有用户可选择的


248
00:09:16,046 --> 00:09:18,316
标签颜色或状态指示器


249
00:09:19,106 --> 00:09:21,686
和浅色一样 任何颜色都可以是动态的


250
00:09:22,646 --> 00:09:24,226
考虑到对颜色的感知


251
00:09:24,226 --> 00:09:25,806
会受到显示背景


252
00:09:25,866 --> 00:09:26,896
的影响 你将需要


253
00:09:26,896 --> 00:09:28,886
进行一些调整


254
00:09:28,886 --> 00:09:30,836
以帮助在模式之间


255
00:09:30,876 --> 00:09:32,356
让这些颜色值


256
00:09:32,436 --> 00:09:35,026
看起来保持相似


257
00:09:35,026 --> 00:09:36,006
或者确保在两种模式中


258
00:09:36,056 --> 00:09:37,816
都有足够的对比度


259
00:09:39,496 --> 00:09:40,696
一直以来我都在


260
00:09:40,696 --> 00:09:42,256
讨论浅色和深色模式


261
00:09:42,306 --> 00:09:44,296
大家可能知道


262
00:09:44,296 --> 00:09:46,426
这有点过于简单化了


263
00:09:46,806 --> 00:09:48,566
实际上有两组


264
00:09:48,566 --> 00:09:49,906
背景色 分别叫做


265
00:09:49,906 --> 00:09:52,176
base 和 higher


266
00:09:53,346 --> 00:09:55,256
顾名思义 这些背景的


267
00:09:55,256 --> 00:09:58,396
颜色是关于分层接口


268
00:09:59,596 --> 00:10:01,606
当两个浅色界面


269
00:10:01,606 --> 00:10:04,026
分层时 一个简单的漫射


270
00:10:04,026 --> 00:10:06,166
阴影就可以在两者之间


271
00:10:06,166 --> 00:10:08,106
创建视觉上的分离效果


272
00:10:08,856 --> 00:10:10,816
对于深色界面来说


273
00:10:10,816 --> 00:10:13,046
阴影效果稍差一些


274
00:10:15,536 --> 00:10:17,036
系统背景颜色将为


275
00:10:17,036 --> 00:10:19,416
背景 App 或界面


276
00:10:19,416 --> 00:10:20,726
使用较深的或基本的值


277
00:10:20,726 --> 00:10:22,716
为前台中的 App


278
00:10:22,716 --> 00:10:24,446
或界面使用较亮


279
00:10:24,446 --> 00:10:26,756
较高的值


280
00:10:27,616 --> 00:10:29,866
以 Contacts App 为例


281
00:10:30,336 --> 00:10:31,936
它使用一组自己


282
00:10:31,936 --> 00:10:33,496
绘制的基本颜色值


283
00:10:33,986 --> 00:10:35,416
但当手机 App 的


284
00:10:35,456 --> 00:10:36,496
模态表示中出现


285
00:10:36,496 --> 00:10:38,156
相同的界面时


286
00:10:38,546 --> 00:10:40,846
它则使用更亮的背景颜色


287
00:10:41,836 --> 00:10:43,106
好 让我们来看一个


288
00:10:43,106 --> 00:10:44,396
稍微复杂一点的例子


289
00:10:45,006 --> 00:10:47,146
这是运行在 iPad 上的邮件


290
00:10:47,496 --> 00:10:50,036
邮件本身是使用基本的


291
00:10:50,036 --> 00:10:51,826
背景颜色集绘制的


292
00:10:52,936 --> 00:10:54,446
当我们在导入


293
00:10:54,446 --> 00:10:56,186
联系人时 可以看到


294
00:10:56,186 --> 00:10:57,706
它是用加亮的


295
00:10:57,706 --> 00:10:59,066
背景颜色绘制的


296
00:10:59,786 --> 00:11:02,336
现在 联系人的浅色外观


297
00:11:02,336 --> 00:11:04,526
可以使它在邮件中


298
00:11:04,526 --> 00:11:07,136
更加突出 并将其推进到前台


299
00:11:07,736 --> 00:11:11,046
当联系人在需要


300
00:11:11,046 --> 00:11:12,856
处理的邮件中以多任务


301
00:11:12,856 --> 00:11:14,946
并排显示时 它们都是用


302
00:11:15,026 --> 00:11:16,886
加亮的背景颜色绘制的


303
00:11:17,306 --> 00:11:19,186
这有助于和中间的


304
00:11:19,186 --> 00:11:20,836
分隔器形成对比


305
00:11:21,116 --> 00:11:24,176
以防止两个 App 混到一起


306
00:11:24,176 --> 00:11:27,556
当我们在邮件中撰写电子邮件时


307
00:11:27,556 --> 00:11:29,036
它会以表格的形式出现


308
00:11:29,696 --> 00:11:31,136
这也是用加亮的


309
00:11:31,136 --> 00:11:33,636
背景颜色绘制的


310
00:11:33,636 --> 00:11:35,366
但主要的 App UI 邮件


311
00:11:35,366 --> 00:11:37,286
看起来有点暗 因为模态


312
00:11:37,286 --> 00:11:39,486
显示其绘制了


313
00:11:39,486 --> 00:11:41,036
一个覆盖层来模糊


314
00:11:41,036 --> 00:11:43,796
背景内容 并投下了


315
00:11:43,796 --> 00:11:45,736
一点阴影


316
00:11:45,926 --> 00:11:47,436
现在 当你的 App 被加亮时


317
00:11:47,436 --> 00:11:48,606
背景颜色会发生变化


318
00:11:48,606 --> 00:11:50,756
你必须注意你


319
00:11:50,756 --> 00:11:52,316
可能会使用的一些


320
00:11:52,346 --> 00:11:53,626
较深的颜色 甚至是


321
00:11:53,626 --> 00:11:55,216
系统调色板里的颜色 可能它的


322
00:11:55,216 --> 00:11:56,156
对比度不太好


323
00:11:56,586 --> 00:11:58,176
当你的设计处于加亮状态时


324
00:11:58,176 --> 00:12:01,166
你总是要检查它们


325
00:12:02,676 --> 00:12:04,906
同样 半透明的填充色


326
00:12:04,906 --> 00:12:06,336
和分隔色也会


327
00:12:06,336 --> 00:12:07,336
对你大有助益


328
00:12:07,956 --> 00:12:09,486
它们很好地适应了


329
00:12:09,486 --> 00:12:11,556
底层和外层背景


330
00:12:12,656 --> 00:12:15,566
好了 我们继续来讲材料


331
00:12:16,596 --> 00:12:18,386
iOS 13 对其进行了


332
00:12:18,386 --> 00:12:20,336
较大的改变和提高


333
00:12:20,936 --> 00:12:22,566
现在有四种材质


334
00:12:22,566 --> 00:12:24,496
可供你选择 它们具有


335
00:12:24,496 --> 00:12:27,106
不同的半透明级别 厚


336
00:12:27,446 --> 00:12:29,816
普通 薄和超薄


337
00:12:30,916 --> 00:12:33,446
这些材料设计精良


338
00:12:33,446 --> 00:12:34,926
在各种背景下


339
00:12:34,926 --> 00:12:36,856
都能出色运行


340
00:12:37,816 --> 00:12:39,136
它们的外观会根据用户


341
00:12:39,136 --> 00:12:41,416
是在浅色模式


342
00:12:41,416 --> 00:12:42,746
还是深色模式来


343
00:12:42,746 --> 00:12:43,816
做出动态变化


344
00:12:44,566 --> 00:12:45,986
你可以基于你想要


345
00:12:45,986 --> 00:12:47,196
多少背景分离 你认为


346
00:12:47,296 --> 00:12:48,956
多少是最合适的来选择


347
00:12:48,956 --> 00:12:51,566
你想要的材质


348
00:12:52,596 --> 00:12:54,446
默认的材质是常规的


349
00:12:54,446 --> 00:12:55,966
并且在大多数情况下


350
00:12:55,966 --> 00:12:57,246
都能良好运行


351
00:12:57,906 --> 00:12:59,526
但是如果你用这种


352
00:12:59,966 --> 00:13:01,826
需要更多对比的


353
00:13:01,826 --> 00:13:03,136
材料来呈现内容


354
00:13:03,136 --> 00:13:04,696
你可以使用更厚的材料


355
00:13:05,736 --> 00:13:07,326
对于更轻量级的交互


356
00:13:07,326 --> 00:13:10,206
可能包含更简单的内容


357
00:13:10,206 --> 00:13:11,476
选择 thin 和 ultra-thin


358
00:13:11,476 --> 00:13:12,226
可能会比较好


359
00:13:12,736 --> 00:13:14,226
哪一种材质更适合


360
00:13:14,226 --> 00:13:15,916
你的 App 取决于


361
00:13:15,916 --> 00:13:19,386
它所显示的内容


362
00:13:19,476 --> 00:13:21,536
说到这一点 浅色和


363
00:13:21,536 --> 00:13:22,536
深色材质都有


364
00:13:22,536 --> 00:13:24,166
一组标签填充和


365
00:13:24,166 --> 00:13:27,516
分隔颜色的振动值


366
00:13:28,206 --> 00:13:29,796
振动是贯穿 iOS


367
00:13:29,856 --> 00:13:31,816
和 Apple 其他平台的


368
00:13:31,816 --> 00:13:33,136
一种视觉效果


369
00:13:33,936 --> 00:13:35,576
对于系统材质


370
00:13:35,676 --> 00:13:37,726
一般最好使用 vibrancy


371
00:13:38,086 --> 00:13:39,546
而不用纯色


372
00:13:40,186 --> 00:13:41,146
因为根据背景语境


373
00:13:41,146 --> 00:13:43,716
纯色会变得


374
00:13:43,716 --> 00:13:45,496
很模糊 这会引起一些


375
00:13:45,496 --> 00:13:48,356
严重的清晰度问题


376
00:13:49,456 --> 00:13:51,166
无论背景是什么


377
00:13:51,166 --> 00:13:53,756
vibrancy 都有助于保持这种对比


378
00:13:54,906 --> 00:13:56,666
iOS 最新的视觉设计


379
00:13:56,666 --> 00:13:59,076
系统还包括对控件和


380
00:13:59,076 --> 00:14:01,236
条形图的更改


381
00:14:02,686 --> 00:14:05,036
像形状和颜色这样的


382
00:14:05,036 --> 00:14:07,006
视觉属性被引入到更大的顺次


383
00:14:07,406 --> 00:14:10,846
运行结构中 以获得内部一致


384
00:14:11,606 --> 00:14:13,096
控件现在可使用


385
00:14:13,186 --> 00:14:15,156
语义颜色进行绘制


386
00:14:15,156 --> 00:14:17,066
这样它们就可以更好地


387
00:14:17,066 --> 00:14:18,346
适应浅色和深色模式


388
00:14:19,836 --> 00:14:22,216
如果你使用 UIKit 控件


389
00:14:22,216 --> 00:14:24,286
你可以免费使用所有这些功能


390
00:14:25,336 --> 00:14:27,276
如果你想花时间用


391
00:14:27,276 --> 00:14:28,976
自定义控件重新创建


392
00:14:29,356 --> 00:14:31,456
UIKit 免费提供的东西


393
00:14:31,456 --> 00:14:33,736
我不知道怎么说


394
00:14:33,736 --> 00:14:34,836
但请不要那样做了


395
00:14:35,516 --> 00:14:37,516
[笑声]


396
00:14:38,516 --> 00:14:41,506
[掌声]


397
00:14:42,006 --> 00:14:45,216
重新创建 UIKit


398
00:14:45,216 --> 00:14:47,396
免费提供给你的东西


399
00:14:47,396 --> 00:14:48,966
需要很多努力和时间


400
00:14:49,286 --> 00:14:51,026
也很难做对 对你来说也没什么好处


401
00:14:52,306 --> 00:14:54,566
当然 自定义控件


402
00:14:54,566 --> 00:14:55,776
通常是必要的


403
00:14:56,116 --> 00:14:57,506
UIKit 不会提供


404
00:14:57,506 --> 00:14:58,816
所有你需要的东西


405
00:14:59,316 --> 00:15:00,646
例如 UIKit


406
00:15:00,646 --> 00:15:02,046
不提供评级指标


407
00:15:02,526 --> 00:15:03,766
所以 当你制作自定义


408
00:15:03,766 --> 00:15:05,956
控件时 应该使用系统调色板


409
00:15:05,956 --> 00:15:08,076
这样你就不需要对浅色


410
00:15:08,076 --> 00:15:09,386
和深色模式进行两种


411
00:15:09,386 --> 00:15:11,216
不同的颜色处理


412
00:15:12,686 --> 00:15:15,426
导航栏也已经更新


413
00:15:16,006 --> 00:15:17,546
默认情况下 它们现在


414
00:15:17,946 --> 00:15:19,406
是为没有背景和阴影的


415
00:15:19,406 --> 00:15:21,186
大标题绘制的


416
00:15:22,316 --> 00:15:24,596
这可以让标题与它所


417
00:15:24,866 --> 00:15:27,426
标记的内容无缝连接


418
00:15:27,996 --> 00:15:30,586
当内容滚动到


419
00:15:30,636 --> 00:15:32,026
导航栏下方时


420
00:15:32,026 --> 00:15:34,126
背景和阴影将会淡入


421
00:15:35,216 --> 00:15:36,616
现在 大标题栏


422
00:15:37,086 --> 00:15:38,866
导航栏在这种


423
00:15:38,866 --> 00:15:40,226
视觉处理中特别好用


424
00:15:40,816 --> 00:15:42,256
但它也可以应用于


425
00:15:42,256 --> 00:15:43,616
默认导航栏


426
00:15:44,346 --> 00:15:45,406
例如 在设置 App


427
00:15:45,406 --> 00:15:47,366
主视图的导航栏


428
00:15:47,366 --> 00:15:49,006
使用了一个大标题


429
00:15:49,006 --> 00:15:51,606
它没有背景或阴影


430
00:15:52,576 --> 00:15:54,646
标准导航栏会经过


431
00:15:54,646 --> 00:15:56,226
程式化来进行匹配


432
00:15:57,346 --> 00:15:59,006
虽然现在衔接的导航栏


433
00:15:59,006 --> 00:16:02,376
看起来很棒 但它并不总是合适


434
00:16:03,076 --> 00:16:04,706
这个背景是完全


435
00:16:04,706 --> 00:16:06,056
透明的 如果你把


436
00:16:06,056 --> 00:16:07,056
任何东西塞到


437
00:16:07,056 --> 00:16:08,526
导航栏下面 它都


438
00:16:08,526 --> 00:16:10,366
直接显示出来


439
00:16:10,586 --> 00:16:11,586
不过可能看起来不太好


440
00:16:11,586 --> 00:16:14,156
所以不要这样处理


441
00:16:14,716 --> 00:16:16,336
如果你有一个非常


442
00:16:16,336 --> 00:16:17,736
密集的界面 在内容区域


443
00:16:17,736 --> 00:16:19,126
旁边有很多控件和导航栏


444
00:16:19,126 --> 00:16:21,666
那么阴影提供的


445
00:16:21,666 --> 00:16:23,286
清晰视觉描述


446
00:16:23,286 --> 00:16:24,976
会非常有用


447
00:16:26,026 --> 00:16:28,286
好 那么在我们继续讲解之前


448
00:16:28,546 --> 00:16:30,016
我想和你们讨论


449
00:16:30,016 --> 00:16:31,166
一个和深色模式相关的


450
00:16:31,166 --> 00:16:34,426
更为重要的功能


451
00:16:34,426 --> 00:16:36,006
iOS 总是为表行


452
00:16:36,006 --> 00:16:37,926
和工具栏等


453
00:16:37,926 --> 00:16:39,666
提供一些符号


454
00:16:40,666 --> 00:16:41,696
在黑暗背景下显示时


455
00:16:41,696 --> 00:16:43,686
之前的一组符号并不能


456
00:16:43,686 --> 00:16:45,516
很好地表现出来


457
00:16:45,516 --> 00:16:48,576
他们看起来有点太单薄了


458
00:16:49,256 --> 00:16:51,976
因此 设计团队重新了


459
00:16:52,186 --> 00:16:54,756
设计了系统中的所有符号


460
00:16:55,616 --> 00:16:57,486
最棒的是 正如有些人


461
00:16:57,486 --> 00:16:59,196
已经知道的那样 我们让


462
00:16:59,196 --> 00:17:00,606
所有这些符号都能够


463
00:17:00,606 --> 00:17:03,316
和 SF 符号一起使用


464
00:17:04,506 --> 00:17:07,695
SF 符号包含超 1500 个符号


465
00:17:08,596 --> 00:17:10,455
这不仅只是一组新的


466
00:17:10,536 --> 00:17:12,646
符号 这代表了一种


467
00:17:12,646 --> 00:17:14,746
全新的方式来


468
00:17:14,746 --> 00:17:16,665
思考和设计符号


469
00:17:17,656 --> 00:17:19,856
顾名思义 SF 符号


470
00:17:19,856 --> 00:17:21,965
的设计是为了配合


471
00:17:21,965 --> 00:17:23,996
San Francisco 的视觉设计特点


472
00:17:24,046 --> 00:17:26,566
iOS 和 Apple


473
00:17:26,566 --> 00:17:28,816
其他平台的系统字体


474
00:17:29,976 --> 00:17:31,796
它们可以按字面意思输入


475
00:17:32,046 --> 00:17:34,936
以便与文本内联显示


476
00:17:35,676 --> 00:17:37,236
它们嵌入了基线值


477
00:17:37,236 --> 00:17:39,446
以确保其相对于文本


478
00:17:39,446 --> 00:17:41,036
能顺次运行


479
00:17:41,876 --> 00:17:43,416
每个 SF 符号都提供了


480
00:17:43,416 --> 00:17:46,226
相对于当前大小的小型


481
00:17:46,226 --> 00:17:48,046
中型和大型变量


482
00:17:48,046 --> 00:17:50,096
来应用于不同的语境


483
00:17:51,256 --> 00:17:52,956
每个符号都有 9个权重


484
00:17:52,956 --> 00:17:54,876
就像 SF 字体一样


485
00:17:55,846 --> 00:17:57,976
因为 SF 符号是基于向量的


486
00:17:57,976 --> 00:18:00,826
所以当和动态类型一起使用时


487
00:18:00,826 --> 00:18:03,736
SF符号可以与文本一起缩放


488
00:18:03,936 --> 00:18:05,956
通过提供多个权重


489
00:18:05,956 --> 00:18:07,766
SF 符号在启用粗体文本


490
00:18:07,766 --> 00:18:09,886
辅助功能设置时


491
00:18:09,886 --> 00:18:11,846
会变得更加醒目


492
00:18:13,156 --> 00:18:14,926
现在 当你设计你 App 的 comp 时


493
00:18:14,926 --> 00:18:17,326
你可以使用新的 SF 


494
00:18:17,486 --> 00:18:19,216
符号 App 浏览或搜索符号


495
00:18:19,216 --> 00:18:21,256
复制你想使用的符号


496
00:18:21,256 --> 00:18:23,266
到你的设计 comp


497
00:18:23,266 --> 00:18:25,146
然后只要把它粘贴到


498
00:18:25,146 --> 00:18:26,676
一个文本层就可以了


499
00:18:26,676 --> 00:18:29,796
更新的 iOS Apple


500
00:18:29,836 --> 00:18:32,106
Design Resources 已经


501
00:18:32,106 --> 00:18:33,686
设置好可以和符号一起使用


502
00:18:34,656 --> 00:18:36,026
例如 要为这个标签栏


503
00:18:36,066 --> 00:18:38,316
交换符号 只需选择标签栏


504
00:18:38,536 --> 00:18:40,696
转到检测器上


505
00:18:40,696 --> 00:18:44,706
并将其在按键上粘贴替换


506
00:18:45,926 --> 00:18:46,886
我已经使用这个


507
00:18:46,886 --> 00:18:48,706
功能几个月了


508
00:18:49,126 --> 00:18:50,656
我必须告诉各位


509
00:18:50,656 --> 00:18:51,916
这是一个颠覆性的改变


510
00:18:52,946 --> 00:18:54,296
如果我们提供的


511
00:18:54,356 --> 00:18:56,216
1500 个符号还不够


512
00:18:56,646 --> 00:18:57,836
那你其实可以用


513
00:18:57,836 --> 00:18:59,686
SVG 生成一个模板


514
00:18:59,686 --> 00:19:01,536
然后进入 Illustrator 或 Sketch


515
00:19:01,536 --> 00:19:03,236
来修改并设计你自己的符号


516
00:19:03,236 --> 00:19:04,926
并能获得我刚才


517
00:19:05,146 --> 00:19:07,546
所说的所有好处 这非常了不起


518
00:19:08,546 --> 00:19:12,246
好 我们现在继续进行模态展示


519
00:19:13,496 --> 00:19:15,136
我们通常称模态演示


520
00:19:15,136 --> 00:19:17,056
为工作表 因为它们在


521
00:19:17,056 --> 00:19:18,896
屏幕上向上滑动的方式不同


522
00:19:19,646 --> 00:19:21,406
这个动画告诉我们


523
00:19:21,636 --> 00:19:23,046
它们已经从一种模式切换到了


524
00:19:23,046 --> 00:19:25,816
另一种模式 或者切换到了


525
00:19:25,816 --> 00:19:27,246
App 的新模式


526
00:19:28,506 --> 00:19:31,346
在 iOS 13 中 工作表


527
00:19:31,416 --> 00:19:33,686
有一个新的卡片状外观


528
00:19:33,686 --> 00:19:34,606
整个系统中都在使用它


529
00:19:35,406 --> 00:19:37,106
这个程式现在是默认的


530
00:19:37,236 --> 00:19:39,986
它的好处是


531
00:19:39,986 --> 00:19:41,446
它能让你看到


532
00:19:41,446 --> 00:19:42,656
背景中有什么


533
00:19:43,166 --> 00:19:45,036
这样的提醒非常有用


534
00:19:45,036 --> 00:19:46,826
比如有一个不同的 UI


535
00:19:46,826 --> 00:19:48,556
它能适应不同的任务或模式


536
00:19:48,556 --> 00:19:50,586
比如 App 仍然在背景里


537
00:19:51,446 --> 00:19:52,796
使用全屏模式工作表


538
00:19:52,896 --> 00:19:55,066
有时候可能会让你忘记


539
00:19:55,066 --> 00:19:56,236
自己之前在做什么


540
00:19:56,756 --> 00:19:59,706
卡片样式的模式表可以


541
00:19:59,706 --> 00:20:01,296
通过向下滑动屏幕上的


542
00:20:01,356 --> 00:20:02,676
任何位置来取消


543
00:20:02,676 --> 00:20:04,386
而那个取消手势


544
00:20:04,386 --> 00:20:05,586
通常比点击导航栏中


545
00:20:05,586 --> 00:20:07,896
的按钮更容易


546
00:20:09,206 --> 00:20:10,616
与滑动返回一样


547
00:20:11,106 --> 00:20:12,346
下拉取消操作


548
00:20:12,636 --> 00:20:14,106
方便单手操作


549
00:20:14,106 --> 00:20:16,396
这在屏幕更大的


550
00:20:16,396 --> 00:20:18,546
设备上尤其方便


551
00:20:19,606 --> 00:20:21,346
现在 你可能想知道


552
00:20:21,406 --> 00:20:22,616
屏幕滑动是如何运行的


553
00:20:23,536 --> 00:20:24,966
当内容区域被滑动时


554
00:20:24,966 --> 00:20:27,156
向下滑动会


555
00:20:27,156 --> 00:20:28,446
将其滑回顶部


556
00:20:29,116 --> 00:20:30,166
当滚动到顶部时


557
00:20:30,166 --> 00:20:32,086
继续滑动将


558
00:20:32,246 --> 00:20:34,546
取消显示模态


559
00:20:35,876 --> 00:20:37,756
但是任何时候 你都可以


560
00:20:37,756 --> 00:20:40,176
从顶部边缘向下拉来解锁


561
00:20:41,416 --> 00:20:43,046
现在 如果这个手势


562
00:20:43,076 --> 00:20:45,136
由于某种原因出现了问题


563
00:20:45,136 --> 00:20:46,166
比如你在内容区域里


564
00:20:46,166 --> 00:20:48,076
有一个与垂直滑动兼容


565
00:20:48,076 --> 00:20:50,766
的控件 它是可以被阻止的


566
00:20:51,886 --> 00:20:53,676
当模态演示本身


567
00:20:53,676 --> 00:20:55,196
需要强制执行时


568
00:20:55,476 --> 00:20:58,426
也可以避免这种情况


569
00:20:59,186 --> 00:21:00,706
例如 这里我们


570
00:21:00,706 --> 00:21:02,486
要么取消 要么添加


571
00:21:03,686 --> 00:21:04,906
如果我们向下拉


572
00:21:04,906 --> 00:21:07,946
它就会立刻弹回来


573
00:21:07,946 --> 00:21:09,556
在某些情况下 我们必须


574
00:21:09,556 --> 00:21:11,036
在离开模态语境之前


575
00:21:11,036 --> 00:21:13,296
做出决定 你可以阻止


576
00:21:13,296 --> 00:21:15,706
该取消手势 并显示一个


577
00:21:15,706 --> 00:21:17,366
询问希望如何继续


578
00:21:17,366 --> 00:21:19,596
的动作表单


579
00:21:19,596 --> 00:21:21,086
这实际上非常方便


580
00:21:22,276 --> 00:21:23,616
现在可以告诉大家


581
00:21:23,996 --> 00:21:25,146
我刚才描述的


582
00:21:25,146 --> 00:21:26,746
并不表示你不再


583
00:21:26,746 --> 00:21:29,976
需要模态卡的按钮


584
00:21:30,816 --> 00:21:32,306
按钮是十分重要的 他能让人们


585
00:21:32,306 --> 00:21:33,906
知道他们可以关闭相应模态


586
00:21:35,076 --> 00:21:36,376
出于对辅助功能的考量


587
00:21:36,376 --> 00:21:37,676
按钮十分必要


588
00:21:38,306 --> 00:21:39,716
人们可能还不熟悉


589
00:21:39,716 --> 00:21:42,016
或不想使用这个手势


590
00:21:42,606 --> 00:21:43,756
当内容区域被


591
00:21:43,756 --> 00:21:45,376
向下滑动时 点击按钮


592
00:21:45,376 --> 00:21:46,866
可能会更方便


593
00:21:47,956 --> 00:21:50,176
同样 在屏幕顶部


594
00:21:50,176 --> 00:21:51,776
看到否定和


595
00:21:51,926 --> 00:21:53,716
肯定动作对时


596
00:21:53,716 --> 00:21:55,536
要让人们知道他们必须


597
00:21:55,536 --> 00:21:57,236
在这个模态演示中


598
00:21:57,286 --> 00:21:59,746
做出什么选择 采取什么行动


599
00:22:00,696 --> 00:22:02,066
现在，我们认为新卡片


600
00:22:02,066 --> 00:22:03,296
风格非常棒 这就是为什么


601
00:22:03,296 --> 00:22:05,136
它现在是 iOS 的默认设置


602
00:22:06,106 --> 00:22:07,806
但它们并不总是合适的


603
00:22:08,586 --> 00:22:11,116
对于有些任务 比如编辑


604
00:22:11,116 --> 00:22:12,586
图片或标记屏幕截图


605
00:22:12,586 --> 00:22:14,406
你确实需要最大化


606
00:22:14,406 --> 00:22:16,376
屏幕空间并


607
00:22:16,376 --> 00:22:18,066
最小化视觉干扰


608
00:22:18,856 --> 00:22:20,366
对于这样的工作流


609
00:22:20,366 --> 00:22:21,476
你应该使用


610
00:22:21,566 --> 00:22:22,826
可选的全屏显示


611
00:22:23,776 --> 00:22:25,866
最后一个关于模态演示的


612
00:22:25,866 --> 00:22:29,266
的要点是 模态是


613
00:22:29,266 --> 00:22:30,466
用于切换模式的


614
00:22:31,346 --> 00:22:32,926
不要仅仅因为你喜欢


615
00:22:32,926 --> 00:22:34,536
它们的动画或视觉风格


616
00:22:34,536 --> 00:22:35,416
就使用它们


617
00:22:36,486 --> 00:22:37,776
关于模态表使用有一个


618
00:22:37,776 --> 00:22:39,276
很好的例子 日历


619
00:22:39,966 --> 00:22:41,666
日历有两种主要模式


620
00:22:42,226 --> 00:22:44,716
在网格或列表中查看事件


621
00:22:45,106 --> 00:22:48,046
然后创建或编辑事件


622
00:22:49,316 --> 00:22:50,826
查看日历包括快速


623
00:22:51,176 --> 00:22:52,766
浏览日历中的


624
00:22:53,136 --> 00:22:54,716
所有事件然后选择


625
00:22:54,716 --> 00:22:56,466
它们来查看细节


626
00:22:57,186 --> 00:22:58,286
因为我们仍然处于查看


627
00:22:58,286 --> 00:23:00,666
模式 所以使用子视图


628
00:23:00,666 --> 00:23:02,276
来显示这些细节


629
00:23:03,006 --> 00:23:05,366
顾名思义 子视图


630
00:23:05,366 --> 00:23:07,156
是原视图的扩展


631
00:23:07,986 --> 00:23:09,086
子视图应该是


632
00:23:09,086 --> 00:23:11,686
在原视图中启动的任务


633
00:23:11,686 --> 00:23:14,406
或工作流的延续


634
00:23:15,316 --> 00:23:16,516
当创建或编辑一个


635
00:23:16,516 --> 00:23:18,646
事件时 一个模态工作表


636
00:23:18,646 --> 00:23:19,686
向使用日历的人发出信号


637
00:23:19,686 --> 00:23:21,266
他们已经切换到


638
00:23:21,266 --> 00:23:23,556
一个新的不同的工作流


639
00:23:24,346 --> 00:23:26,756
好 最后一个 iOS


640
00:23:26,816 --> 00:23:29,986
设计主题是语境菜单


641
00:23:30,646 --> 00:23:33,526
随着几年前 3D Touch


642
00:23:33,526 --> 00:23:35,826
的引入 出现了一种新的


643
00:23:35,826 --> 00:23:37,616
交互方式叫做 Peek and Pop


644
00:23:38,476 --> 00:23:40,296
Peek and Pop 主要是


645
00:23:40,296 --> 00:23:42,366
为了获得更多的内容预览


646
00:23:43,866 --> 00:23:45,826
如果可用 可以通过


647
00:23:45,826 --> 00:23:48,406
向上滑动预览来访问操作


648
00:23:49,726 --> 00:23:51,366
语境菜单会稍微改变一些内容


649
00:23:51,556 --> 00:23:54,996
并把焦点放在操作上


650
00:23:56,366 --> 00:23:58,386
然后相应操作就会立即被呈现出来


651
00:23:59,206 --> 00:24:02,186
语境菜单也适用于所有设备


652
00:24:03,096 --> 00:24:05,326
Peek and Pop 只支持 3D


653
00:24:05,326 --> 00:24:07,056
Touch 所以不能在


654
00:24:07,056 --> 00:24:09,036
iPad 和个别的 iPhone 产品上使用


655
00:24:09,846 --> 00:24:11,456
3D Touch 让语境


656
00:24:11,456 --> 00:24:13,326
菜单显示得更快


657
00:24:13,326 --> 00:24:14,916
而获取语境菜单的手势


658
00:24:14,916 --> 00:24:16,386
是轻点并按住 你可以在


659
00:24:16,386 --> 00:24:18,016
任何支持它的设备上体验


660
00:24:18,986 --> 00:24:20,546
语境菜单由两部分组成


661
00:24:20,546 --> 00:24:23,146
命令菜单 它可以在


662
00:24:23,146 --> 00:24:24,916
一个项目或


663
00:24:24,916 --> 00:24:27,896
选择中执行 另一个是


664
00:24:27,896 --> 00:24:29,936
所选项目的可选预览


665
00:24:29,936 --> 00:24:31,246
也会受到影响


666
00:24:32,166 --> 00:24:33,646
预览可以有效地


667
00:24:33,646 --> 00:24:35,546
提醒你哪些项目将受到


668
00:24:35,546 --> 00:24:37,566
这些命令菜单的影响


669
00:24:38,806 --> 00:24:39,936
语境菜单的实际外观


670
00:24:39,936 --> 00:24:42,006
将根据设备大小


671
00:24:42,006 --> 00:24:44,046
和方向而变化


672
00:24:44,696 --> 00:24:46,996
在 iPhone 上 预览和手机


673
00:24:47,276 --> 00:24:50,586
是纵向堆叠的 而在


674
00:24:50,586 --> 00:24:51,656
iPad 上 只有在三个或


675
00:24:51,656 --> 00:24:53,316
更少的命令时 才会如此


676
00:24:53,636 --> 00:24:54,826
否则 菜单和预览


677
00:24:54,826 --> 00:24:56,006
将会并排显示


678
00:24:56,776 --> 00:24:58,106
语境菜单将直接


679
00:24:58,106 --> 00:24:59,796
出现在它们所影响的对象


680
00:24:59,796 --> 00:25:02,466
上方 或者尽可能靠近它


681
00:25:04,046 --> 00:25:06,096
和 macOS 语境菜单一样


682
00:25:06,466 --> 00:25:08,476
你可以选择菜单命令的顺序


683
00:25:09,026 --> 00:25:10,416
最好把最常用


684
00:25:10,526 --> 00:25:11,936
或最常访问的


685
00:25:11,936 --> 00:25:13,256
命令放在顶部


686
00:25:13,256 --> 00:25:14,736
以便更容易访问


687
00:25:15,476 --> 00:25:16,666
否则 你就应该


688
00:25:16,836 --> 00:25:18,606
对命令进行分组


689
00:25:18,606 --> 00:25:19,666
因为它们彼此关系密切


690
00:25:20,146 --> 00:25:21,666
因此 剪切 复制和粘贴的


691
00:25:21,666 --> 00:25:24,136
彼此之间联系紧密


692
00:25:25,266 --> 00:25:27,116
你还可以使用分隔符


693
00:25:27,116 --> 00:25:29,466
来创建视觉上不同的分组


694
00:25:30,316 --> 00:25:32,506
iOS 语境菜单可以


695
00:25:32,586 --> 00:25:34,846
是层次化的 这意味着


696
00:25:34,846 --> 00:25:36,176
其中的一些选项可能会


697
00:25:36,286 --> 00:25:38,166
进入二级子菜单


698
00:25:39,406 --> 00:25:41,576
iOS 上的语境菜单


699
00:25:41,576 --> 00:25:43,536
还包括符号 帮助人们


700
00:25:43,536 --> 00:25:44,506
更快地找到要找的东西


701
00:25:44,506 --> 00:25:46,836
而且你可以通过


702
00:25:46,836 --> 00:25:48,426
红色标记警告人们


703
00:25:48,426 --> 00:25:50,436
注意破坏性行为


704
00:25:50,546 --> 00:25:53,596
你应该尝试在 App 的


705
00:25:53,596 --> 00:25:55,976
每个对象中添加语境菜单


706
00:25:57,066 --> 00:25:58,566
大家想想 macOS


707
00:25:59,216 --> 00:26:01,956
你期望每个 App 中的


708
00:26:01,956 --> 00:26:04,106
每个对象都有一个语境菜单


709
00:26:04,916 --> 00:26:06,676
它们是学习如何


710
00:26:06,676 --> 00:26:08,976
执行操作的好方法


711
00:26:09,886 --> 00:26:12,276
iOS App 添加的


712
00:26:12,276 --> 00:26:14,346
语境菜单越多


713
00:26:14,346 --> 00:26:16,756
人们就越希望每个 App


714
00:26:16,756 --> 00:26:19,606
都支持语境菜单


715
00:26:21,056 --> 00:26:24,346
好 最后一个关于语境菜单的要点


716
00:26:24,976 --> 00:26:26,826
它们包含的操作


717
00:26:26,826 --> 00:26:28,276
应该仍然可以在主界面


718
00:26:28,276 --> 00:26:29,956
的其他地方使用


719
00:26:30,756 --> 00:26:32,566
语境菜单功能十分强大


720
00:26:32,566 --> 00:26:35,666
且方便 但可能用户


721
00:26:35,666 --> 00:26:38,766
并不总会经常性用到它们


722
00:26:38,976 --> 00:26:41,116
现在 我迫不及待地


723
00:26:41,116 --> 00:26:43,536
想看大家如何使用


724
00:26:43,666 --> 00:26:46,126
深色模式 更新的模态演示


725
00:26:46,126 --> 00:26:47,076
和新的语境菜单


726
00:26:47,906 --> 00:26:49,166
更多信息和资源


727
00:26:49,166 --> 00:26:52,786
请访问 developer.apple.com/desig


728
00:26:53,286 --> 00:26:54,646
在那里你可以找到更新的


729
00:26:54,646 --> 00:26:57,856
SF 字体 SF 符号 App


730
00:26:57,946 --> 00:27:00,976
以及更新的 iOS 设计资源


731
00:27:01,646 --> 00:27:03,476
Adobe Photoshop 和 Adobe XD


732
00:27:03,596 --> 00:27:06,306
将在今年夏天晚些时候发布


733
00:27:07,006 --> 00:27:10,276
此外 有关我今天所介绍的


734
00:27:10,276 --> 00:27:11,816
所有内容的更多细节


735
00:27:11,816 --> 00:27:14,986
请查看 Apple Human Interface Guidelines


736
00:27:16,006 --> 00:27:17,666
好的 非常感谢各位的宝贵时间


737
00:27:18,508 --> 00:27:20,508
[掌声]

