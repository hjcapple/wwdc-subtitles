1
00:00:06,640 --> 00:00:10,477 line:0
（MAC OS关于安全性的改进）


2
00:00:12,880 --> 00:00:13,981 line:-1
大家早上好


3
00:00:15,148 --> 00:00:16,383 line:-1
感谢大家今天来参加我们的演讲


4
00:00:17,584 --> 00:00:18,685 line:-1
我是Garrett


5
00:00:18,752 --> 00:00:21,455 line:-2
我在Apple安全工程
和架构团队工作


6
00:00:22,055 --> 00:00:24,458 line:-2
今天我们要讲
macOS Catalina中


7
00:00:24,858 --> 00:00:26,059 line:-1
关于安全性的一些改进


8
00:00:29,029 --> 00:00:30,230 line:-1
这是本场演讲的进度安排


9
00:00:30,831 --> 00:00:33,767 line:-2
我们要深入地讲一下
纵深防御的安全性原则


10
00:00:33,834 --> 00:00:35,202 line:-2
以及如何在macOS中实施
安全防御原则


11
00:00:36,103 --> 00:00:39,373 line:-2
然后我们要深入macOS
安全模型的两个截然不同的部分


12
00:00:39,907 --> 00:00:42,142 line:-2
Gatekeeper
和用户隐私权保护


13
00:00:45,145 --> 00:00:46,647 line:-1
让我们先从纵深防御开始讲


14
00:00:46,713 --> 00:00:47,414 line:-1
（纵深防御）


15
00:00:47,481 --> 00:00:50,484 line:-1
对于macOS这样一种既复杂


16
00:00:50,551 --> 00:00:52,553 line:-1
又有很多用例的产品来说


17
00:00:54,154 --> 00:00:56,723 line:-1
没有任何一种技术或功能


18
00:00:56,790 --> 00:00:58,792 line:-1
可以独立提供完美的安全性


19
00:00:59,860 --> 00:01:03,597 line:-2
因此在设计macOS时
考虑到了安全性的许多不同层面


20
00:01:04,364 --> 00:01:06,733 line:-1
每个层面都有具体的目的或目标


21
00:01:08,635 --> 00:01:12,506 line:-2
并且每一年我们都会改进
每一个层面的技术和政策


22
00:01:12,906 --> 00:01:15,609 line:-1
从而保证你们的安全


23
00:01:18,645 --> 00:01:20,781 line:-1
这就是纵深防御的原则的一个应用


24
00:01:22,049 --> 00:01:25,352 line:-2
目标是确保其中一个层面的
安全保护失败


25
00:01:26,119 --> 00:01:28,989 line:-1
不会破坏系统的整个安全模型


26
00:01:31,725 --> 00:01:34,661 line:-1
相反 我们依赖于通过不同性能


27
00:01:34,995 --> 00:01:36,129 line:-1
提供多重保护


28
00:01:36,897 --> 00:01:40,067 line:-1
有些层面可以拖延攻击者的前进


29
00:01:41,101 --> 00:01:43,837 line:-1
其它层面可以减少某组件的攻击面


30
00:01:44,571 --> 00:01:46,673 line:-1
有一些层面可以创建阻碍


31
00:01:47,007 --> 00:01:49,009 line:-1
可以让它更轻松地防御特定资产


32
00:01:53,280 --> 00:01:56,183 line:-1
今天我们在这里要谈macOS中


33
00:01:56,850 --> 00:01:58,185 line:-1
关于安全性的两个截然不同的层面


34
00:01:59,219 --> 00:02:01,788 line:-2
首先我们先稍微讲一下
Gatekeeper


35
00:02:02,356 --> 00:02:04,525 line:-1
它是安全性的一个很重要的外部层面


36
00:02:04,958 --> 00:02:06,793 line:-1
用于第一时间防止恶意软件


37
00:02:06,860 --> 00:02:08,961 line:-1
在你的系统上运行


38
00:02:11,131 --> 00:02:13,834 line:-1
然后我们会讲用户隐私权保护


39
00:02:14,568 --> 00:02:17,237 line:-1
用于确保即使恶意软件


40
00:02:17,304 --> 00:02:18,872 line:-1
能应付Gatekeeper


41
00:02:19,273 --> 00:02:22,943 line:-2
它也不一定可以访问
绝大多数敏感性数据和资源


42
00:02:25,879 --> 00:02:26,947 line:-1
让我们讲一下Gatekeeper


43
00:02:28,015 --> 00:02:29,950 line:-1
初次引入Gatekeeper时


44
00:02:30,450 --> 00:02:32,019 line:-1
与开发者ID程序一起


45
00:02:32,653 --> 00:02:34,721 line:-1
它的目标是防止广泛的…


46
00:02:35,255 --> 00:02:38,825 line:-1
防止爆发 防止恶意软件的广泛爆发


47
00:02:40,027 --> 00:02:42,696 line:-1
但多年以来 它的目标有所扩大


48
00:02:43,363 --> 00:02:46,099 line:-1
现在它用于保护用户


49
00:02:46,166 --> 00:02:49,336 line:-1
不运行恶意软件 并让用户控制


50
00:02:49,803 --> 00:02:51,205 line:-1
他们在Mac上所运行的东西


51
00:02:53,006 --> 00:02:56,343 line:-2
它的具体实现方式在多年以来
也发生了变化


52
00:02:57,144 --> 00:02:58,645 line:-1
虽然有很多细微差别


53
00:02:59,046 --> 00:03:03,383 line:-2
但Gatekeeper的意图通常
可以归结为几个简单的问题


54
00:03:04,718 --> 00:03:07,621 line:-2
我们谈谈如今Gatekeeper
是如何实现这个目标的


55
00:03:10,524 --> 00:03:13,460 line:-2
有四件事我们认为是
Gatekeeper扫描的一部分


56
00:03:15,128 --> 00:03:16,096 line:-1
第一件事…


57
00:03:19,466 --> 00:03:21,802 line:-1
第一是恶意内容扫描


58
00:03:22,903 --> 00:03:25,739 line:-1
从而确保在即将运行的app中


59
00:03:26,240 --> 00:03:27,574 line:-1
没有任何已知的恶意内容


60
00:03:30,210 --> 00:03:32,813 line:-1
第二是署名验证


61
00:03:33,247 --> 00:03:35,616 line:-1
从而确保app没有被篡改


62
00:03:35,916 --> 00:03:37,484 line:-1
因为开发者对它署名了


63
00:03:40,854 --> 00:03:42,890 line:-1
第三是身份验证


64
00:03:43,490 --> 00:03:46,527 line:-2
我们正是用这个来强制实施计算机的
本地安全性政策


65
00:03:47,261 --> 00:03:49,596 line:-1
如果用户选择了


66
00:03:49,663 --> 00:03:50,531 line:-2
他们只希望运行
来自App Store


67
00:03:50,998 --> 00:03:52,099 line:-1
或已认证的开发者的软件


68
00:03:52,666 --> 00:03:55,469 line:-1
我们就不允许运行由其它任何人署名


69
00:03:55,536 --> 00:03:57,137 line:-1
或根本没有署名的软件


70
00:04:00,107 --> 00:04:02,276 line:-1
最后是首次启动提示


71
00:04:02,876 --> 00:04:06,446 line:-2
这是为了确保用户实际上希望
运行这个app


72
00:04:09,583 --> 00:04:11,818 line:-2
如果我们不讲
Gatekeeper何时检查


73
00:04:12,352 --> 00:04:14,555 line:-2
我们就不能讲
Gatekeeper检查什么


74
00:04:15,989 --> 00:04:17,291 line:-1
在macOS Mojave中


75
00:04:18,225 --> 00:04:23,597 line:-2
Gatekeeper在经由
LaunchServices启动


76
00:04:24,264 --> 00:04:25,599 line:-1
隔离软件的首次启动时运行它的扫描


77
00:04:27,467 --> 00:04:28,902 line:-1
为了更好地理解


78
00:04:29,169 --> 00:04:31,238 line:-2
我们需要深入了解一下
隔离是什么意思


79
00:04:31,705 --> 00:04:33,774 line:-2
以及它对于经由LaunchServices
启动意味着什么


80
00:04:34,708 --> 00:04:35,742 line:-1
让我们看一下吧


81
00:04:39,112 --> 00:04:40,781 line:-1
隔离是一种技术


82
00:04:41,181 --> 00:04:45,953 line:-1
它嵌入在macOS中用于标记


83
00:04:46,587 --> 00:04:47,621 line:-2
从设备以外的其它地方
到达设备的文件


84
00:04:48,188 --> 00:04:50,257 line:-1
当你从web浏览器中下载文件时


85
00:04:50,791 --> 00:04:53,760 line:-2
或当某人通过iMessages
给你发送某些东西时


86
00:04:54,595 --> 00:04:57,798 line:-2
或如果你进行隔空投送
那些文件都会被隔离


87
00:04:59,032 --> 00:05:00,033 line:-1
此外


88
00:05:00,300 --> 00:05:04,171 line:-2
macOS将向那个文件添加
关于它的来源的元数据


89
00:05:05,239 --> 00:05:06,840 line:-1
当我们呈现首次启动提示时


90
00:05:07,207 --> 00:05:10,944 line:-2
我们可以为你提供
关于文件来源的更多情境


91
00:05:12,412 --> 00:05:15,148 line:-1
现在隔离是一个选择加入模型


92
00:05:15,983 --> 00:05:16,984 line:-1
那意味着app


93
00:05:17,050 --> 00:05:19,887 line:-2
需要选择加入才能隔离
它们放在磁盘上的文件


94
00:05:21,321 --> 00:05:24,124 line:-1
这通常意味着当app在后台下载时


95
00:05:24,391 --> 00:05:27,594 line:-1
作为比如自我更新的一部分


96
00:05:27,961 --> 00:05:29,863 line:-1
那些文件通常永远不会被隔离


97
00:05:31,798 --> 00:05:34,301 line:-2
有个例外情况
除非app是沙盒化app


98
00:05:35,169 --> 00:05:38,405 line:-1
因为默认隔离沙盒化app的文件


99
00:05:41,275 --> 00:05:43,510 line:-1
这会帮助你更好地了解系统上


100
00:05:43,577 --> 00:05:44,845 line:-1
哪些文件会被隔离


101
00:05:45,579 --> 00:05:47,915 line:-1
现在让我们谈谈启动服务


102
00:05:51,318 --> 00:05:54,555 line:-2
启动服务是一个框架
用于发现并启动app


103
00:05:55,756 --> 00:05:58,292 line:-1
通常在你能想到的在Mac上


104
00:05:58,358 --> 00:06:00,460 line:-2
启动app的绝大多数方式中
都使用了启动服务


105
00:06:01,361 --> 00:06:04,264 line:-2
比如当你在Finder
或Dock中打开app时


106
00:06:04,665 --> 00:06:05,832 line:-1
将会使用启动服务


107
00:06:06,934 --> 00:06:08,969 line:-2
如果你使用了
NSWorkspace API


108
00:06:09,403 --> 00:06:11,505 line:-1
通常也会使用启动服务


109
00:06:12,673 --> 00:06:14,775 line:-1
当app经由文档处理器


110
00:06:14,842 --> 00:06:16,176 line:-1
或直接经由URL打开时


111
00:06:16,476 --> 00:06:17,845 line:-1
都会使用启动服务


112
00:06:20,747 --> 00:06:22,216 line:-1
在接下来的演讲中


113
00:06:22,516 --> 00:06:25,686 line:-2
当我具体讲经由启动服务路径的
某些东西时


114
00:06:25,752 --> 00:06:27,354 line:-1
我将使用这个Finder图标


115
00:06:33,260 --> 00:06:35,295 line:-1
但还有许多加载代码的方式


116
00:06:35,829 --> 00:06:37,331 line:-1
不经由启动服务


117
00:06:38,498 --> 00:06:40,434 line:-1
这是其中一些例子但并不详尽


118
00:06:40,801 --> 00:06:43,770 line:-1
包括使用NSTask来启动进程


119
00:06:44,838 --> 00:06:46,907 line:-2
或exec和
posix spawn的调用


120
00:06:48,041 --> 00:06:51,345 line:-2
或使用NSBundle API
向进程中加载库


121
00:06:51,411 --> 00:06:52,913 line:-1
用于加载或dlopen


122
00:06:55,015 --> 00:06:56,450 line:-1
在接下来的演讲中


123
00:06:57,618 --> 00:06:59,119 line:-2
当我提及不经由启动服务路径
加载代码时


124
00:06:59,820 --> 00:07:03,457 line:-1
我将使用这个终端图标


125
00:07:06,727 --> 00:07:09,696 line:-1
现在让我们以一种


126
00:07:10,163 --> 00:07:12,633 line:-1
更容易谈论今年的变化的形式


127
00:07:12,699 --> 00:07:13,901 line:-2
迅速总结一下
关于Gatekeeper的信息


128
00:07:17,237 --> 00:07:20,374 line:0
在这里我们可以看到


129
00:07:21,208 --> 00:07:24,244 line:0
在启动服务路径上
隔离软件首次启动时


130
00:07:24,912 --> 00:07:26,380 line:0
Gatekeeper的行为
和macOS Mojave


131
00:07:27,214 --> 00:07:29,483 line:0
Gatekeeper
将实施恶意内容扫描


132
00:07:29,983 --> 00:07:32,753 line:0
和署名检查 以确保没有任何已知的
恶意内容


133
00:07:32,819 --> 00:07:34,788 line:0
以及app没有被篡改过


134
00:07:36,623 --> 00:07:38,392 line:0
然后它会实施本地政策检查


135
00:07:38,992 --> 00:07:41,762 line:0
默认情况是app必须
由开发者ID证书


136
00:07:42,396 --> 00:07:43,263 line:0
或由App Store进行签名


137
00:07:44,665 --> 00:07:47,100 line:0
最后它会给用户呈现首次启动提醒


138
00:07:47,467 --> 00:07:49,136 line:0
从而用户必须批准app


139
00:07:50,771 --> 00:07:56,343 line:0
从最新发布的macOS Mojave
10.14.5起


140
00:07:57,344 --> 00:07:59,413 line:-1
默认政策发生了轻微的改变


141
00:08:00,113 --> 00:08:02,349 line:-1
新的Mac开发者证书


142
00:08:02,850 --> 00:08:06,086 line:-2
要求他们的软件必须经过公证
才能通过Gatekeeper


143
00:08:08,789 --> 00:08:11,825 line:0
这就是我们在macOS Catalina
中的第一个改进


144
00:08:12,693 --> 00:08:16,129 line:0
我们扩展了这个政策


145
00:08:16,597 --> 00:08:17,731 line:0
从而所有新软件都需要进行公证


146
00:08:19,933 --> 00:08:24,471 line:0
在这种情况下 “新”的意思是


147
00:08:24,838 --> 00:08:27,241 line:0
在2019年6月1日以后签名
或创建的软件


148
00:08:28,942 --> 00:08:32,212 line:0
这意味着全部现有软件将继续通过
Gatekeeper


149
00:08:32,279 --> 00:08:33,547 line:0
不予改变


150
00:08:34,081 --> 00:08:36,149 line:0
只需要开发者ID证书签名即可


151
00:08:37,049 --> 00:08:40,419 line:0
但所有新软件必须经过公证才能通过
Gatekeeper


152
00:08:44,791 --> 00:08:45,759 line:-1
现在…


153
00:08:46,560 --> 00:08:48,829 line:-2
我们在macOS Catalina中
所做的下一个改进是


154
00:08:49,596 --> 00:08:51,532 line:-1
Gatekeeper将扩展到


155
00:08:52,499 --> 00:08:56,537 line:0
在所有隔离软件上强制实施
同样的政策


156
00:08:58,071 --> 00:08:59,706 line:-1
那意味着无论


157
00:08:59,773 --> 00:09:01,241 line:0
软件是如何加载的


158
00:09:01,875 --> 00:09:06,580 line:0
如果它是隔离软件
它必须包含无已知恶意内容


159
00:09:07,247 --> 00:09:08,682 line:0
它必须没有被篡改


160
00:09:09,449 --> 00:09:11,552 line:0
新软件将需要进行公证


161
00:09:12,753 --> 00:09:14,788 line:0
首次启动政策也有些微改变


162
00:09:15,222 --> 00:09:18,325 line:0
我们不要求用户批准


163
00:09:18,892 --> 00:09:21,728 line:0
独立的可执行文件或库的首次启动


164
00:09:22,496 --> 00:09:25,432 line:0
但对于所有捆绑软件来说
都将显示首次启动提示


165
00:09:29,169 --> 00:09:30,838 line:0
因此现在
Gatekeeper扩展到了


166
00:09:30,904 --> 00:09:34,241 line:0
扫描所有隔离软件
并在所有隔离软件上强制实施政策


167
00:09:35,809 --> 00:09:38,612 line:0
这就把我们引向我们在macOS
Catalina中做的最后一改进


168
00:09:39,880 --> 00:09:41,915 line:0
Gatekeeper将为你
提供进一步的保护


169
00:09:43,083 --> 00:09:46,587 line:0
通过确保所有软件都进行了
恶意内容扫描来实现


170
00:09:49,556 --> 00:09:52,159 line:0
那意味着无论软件是否被隔离


171
00:09:53,026 --> 00:09:54,761 line:0
无论代码是如何加载的


172
00:09:55,629 --> 00:09:57,698 line:-1
只要找到任何已知恶意内容


173
00:09:58,365 --> 00:10:01,235 line:0
软件都将被阻止…并且会警告用户


174
00:10:04,538 --> 00:10:07,908 line:0
这就是Gatekeeper
在macOS Catalina中的所有扩展


175
00:10:07,975 --> 00:10:11,545 line:0
从而为你提供保护


176
00:10:13,580 --> 00:10:15,482 line:-1
重点是要记住一件事


177
00:10:18,285 --> 00:10:21,121 line:-2
我们的目标是默认保护每一个
Mac用户的安全


178
00:10:22,589 --> 00:10:26,660 line:-2
而不是阻止你想在
Mac上运行的软件


179
00:10:26,727 --> 00:10:28,629 line:-2
（你总是可以选择在你的系统上
运行任意软件）


180
00:10:28,695 --> 00:10:30,597 line:-1
那意味着总是有一种方式


181
00:10:30,964 --> 00:10:32,799 line:-1
可以让你运行


182
00:10:33,066 --> 00:10:35,235 line:-1
你想在你的系统上运行的特定软件


183
00:10:39,406 --> 00:10:42,442 line:-1
刚才我稍微提了一下


184
00:10:42,509 --> 00:10:45,579 line:-1
我们一直持续不断地改进


185
00:10:45,646 --> 00:10:46,947 line:-1
每个层面的技术和政策


186
00:10:48,348 --> 00:10:50,551 line:-1
我还想花点时间稍微提一下


187
00:10:51,818 --> 00:10:52,819 line:-1
Gatekeeper的下一个改进


188
00:10:54,821 --> 00:10:56,957 line:-1
现在我们安全工程团队


189
00:10:57,591 --> 00:10:58,559 line:-1
有一个很大的目标


190
00:10:58,959 --> 00:11:03,096 line:-2
我们想让macOS
和iOS一样安全


191
00:11:04,031 --> 00:11:06,233 line:-1
同时仍保持


192
00:11:06,733 --> 00:11:08,502 line:-1
你所期待的Mac的所有灵活性


193
00:11:09,703 --> 00:11:11,638 line:-1
那代表着一些非常有意思的挑战


194
00:11:13,006 --> 00:11:14,575 line:-1
但有一件事变得非常清楚


195
00:11:16,210 --> 00:11:19,179 line:-1
平台的安全性已经变得越来越依赖于


196
00:11:19,246 --> 00:11:20,914 line:-1
代码签名的有效性了


197
00:11:24,618 --> 00:11:27,554 line:-1
这意味着如果app没有签名…


198
00:11:29,690 --> 00:11:31,525 line:-1
将不可能检测到篡改


199
00:11:34,728 --> 00:11:38,632 line:-2
更进一步
如果捆绑签名在运行时损坏


200
00:11:41,101 --> 00:11:46,473 line:-1
当In-Out在运行时自我修改时


201
00:11:46,540 --> 00:11:48,442 line:-1
将很难区分恶意篡改和一般篡改


202
00:11:53,447 --> 00:11:55,215 line:-1
在未来版本的macOS中


203
00:11:55,849 --> 00:11:58,085 line:-1
将默认不再运行任何无签名的代码


204
00:12:01,955 --> 00:12:03,056 line:-1
为了实现这个目标


205
00:12:03,123 --> 00:12:06,527 line:-1
你们可以做一些事情


206
00:12:06,827 --> 00:12:07,728 line:-1
来帮助改善平台的安全性


207
00:12:09,463 --> 00:12:13,967 line:-2
首先是签署并公证你所发布的
所有软件


208
00:12:14,568 --> 00:12:16,170 line:-1
即使它目前没有被隔离


209
00:12:19,173 --> 00:12:20,374 line:-1
（我们需要你们的帮助）


210
00:12:21,008 --> 00:12:22,176 line:-1
第二…


211
00:12:22,676 --> 00:12:26,046 line:-1
不要在运行时损坏app或捆绑签名


212
00:12:26,980 --> 00:12:28,815 line:-1
如果你需要更新app


213
00:12:29,082 --> 00:12:31,485 line:-1
请确保最后的结果是磁盘上的app


214
00:12:31,818 --> 00:12:33,921 line:-1
仍进行了适当的签名和公证


215
00:12:37,491 --> 00:12:41,128 line:-1
最后请记住加载代码可能会失败


216
00:12:41,762 --> 00:12:43,964 line:-1
如果你尝试加载隔离库或进程


217
00:12:44,031 --> 00:12:45,566 line:-1
而用户选择不运行它的话


218
00:12:46,300 --> 00:12:50,571 line:-2
那将会运行失败 请确保你的app
会优雅地处理这些失败


219
00:12:56,476 --> 00:12:59,379 line:-2
这就是Gatekeeper的
所有扩展


220
00:12:59,646 --> 00:13:02,115 line:-2
从而尝试防止在你的Mac上
运行恶意软件


221
00:13:03,250 --> 00:13:04,551 line:-1
现在让我们邀请Kelly上台


222
00:13:04,618 --> 00:13:07,187 line:-1
讲一下在用户隐私权保护方面的改进


223
00:13:07,254 --> 00:13:08,155 line:-1
（用户隐私权保护）


224
00:13:08,222 --> 00:13:09,056 line:-1
Kelly


225
00:13:14,127 --> 00:13:15,128 line:0
嗯 谢谢Garrett


226
00:13:15,529 --> 00:13:16,463 line:0
大家早上好


227
00:13:16,763 --> 00:13:17,664 line:-1
我是Kelly Yancey


228
00:13:17,731 --> 00:13:19,499 line:-2
我和Garrett都是
Apple安全工程


229
00:13:19,566 --> 00:13:20,834 line:-1
与架构团队的一员


230
00:13:21,335 --> 00:13:24,204 line:-1
去年在WWDC 2018时


231
00:13:24,738 --> 00:13:27,908 line:-1
我很荣幸地介绍了


232
00:13:28,242 --> 00:13:29,510 line:-2
macOS Mojave中的
新的隐私权保护


233
00:13:29,910 --> 00:13:31,378 line:-1
具有广泛特征…抱歉


234
00:13:32,312 --> 00:13:33,146 line:-1
让我们回顾一下


235
00:13:33,213 --> 00:13:36,483 line:-1
这些保护用于提高用户


236
00:13:36,550 --> 00:13:38,852 line:-1
对于如何访问他们的数据的透明度


237
00:13:39,119 --> 00:13:40,821 line:-1
并为用户提供对那些访问的控制


238
00:13:41,288 --> 00:13:42,890 line:-2
今天我能再次回到这里
我感到很激动


239
00:13:43,223 --> 00:13:45,959 line:-2
我要与大家分享我们在
macOS Catalina中所做的改进


240
00:13:47,494 --> 00:13:49,096 line:-1
具有广泛特征


241
00:13:50,531 --> 00:13:52,633 line:-1
隐私权保护要求用户准许


242
00:13:52,933 --> 00:13:55,002 line:-1
访问可能会记录用户的硬件


243
00:13:55,068 --> 00:13:56,970 line:-1
比如摄像头或麦克风


244
00:13:58,038 --> 00:14:01,041 line:-2
或准许访问用户的隐私敏感文件
或文件夹


245
00:14:01,909 --> 00:14:03,911 line:-1
比如照片、邮件或消息


246
00:14:05,245 --> 00:14:07,581 line:-1
此外还保护


247
00:14:07,981 --> 00:14:09,349 line:-1
自动化其它app的能力


248
00:14:09,716 --> 00:14:13,720 line:-2
从而用户可以控制在app之间
如何共享他们的数据


249
00:14:14,988 --> 00:14:17,224 line:-1
今天我想先讲记录功能


250
00:14:18,792 --> 00:14:20,093 line:-1
自macOS Mojave起


251
00:14:20,527 --> 00:14:23,964 line:-2
在app访问摄像头或麦克风之前
必须先经过用户准许


252
00:14:25,065 --> 00:14:26,366 line:-2
然后在
macOS Catalina中


253
00:14:26,834 --> 00:14:30,170 line:-2
进一步要求用户准许记录
他们屏幕上的内容


254
00:14:30,871 --> 00:14:32,506 line:-1
或他们在键盘上键入的键


255
00:14:33,507 --> 00:14:34,741 line:-1
这很重要


256
00:14:35,008 --> 00:14:37,578 line:-2
因为这就好比我们不希望人们
“肩窥”一样


257
00:14:37,644 --> 00:14:40,514 line:-2
越过我们的肩膀来看我们正在做什么
或正在输入什么


258
00:14:41,114 --> 00:14:44,251 line:-1
我们不希望app偷窥


259
00:14:44,885 --> 00:14:47,788 line:-1
我们的联系信息、银行信息


260
00:14:47,855 --> 00:14:49,122 line:-1
或密码等等


261
00:14:49,790 --> 00:14:51,625 line:-1
无论是有意或无意的


262
00:14:53,594 --> 00:14:54,661 line:-1
我们该如何实现呢？


263
00:14:54,728 --> 00:14:56,163 line:-1
让我们先看一下屏幕记录


264
00:14:57,764 --> 00:15:00,734 line:-2
这是使用
CGDisplayStream


265
00:15:01,201 --> 00:15:03,136 line:-1
实时记录显示屏上的内容的简单示例


266
00:15:03,904 --> 00:15:05,239 line:-1
在macOS Catalina上


267
00:15:05,305 --> 00:15:07,808 line:-1
这个app首次运行时…


268
00:15:08,609 --> 00:15:11,211 line:-2
将会执行创建
CGDisplayStream的调用


269
00:15:12,045 --> 00:15:13,881 line:-1
它将返回无


270
00:15:14,681 --> 00:15:16,049 line:-1
并显示一个对话框


271
00:15:16,583 --> 00:15:19,052 line:-1
指导用户进入安全和隐私首选项


272
00:15:20,454 --> 00:15:23,023 line:-1
如果用户希望app记录屏幕的话


273
00:15:23,757 --> 00:15:24,825 line:-1
用户可以批准它这样做


274
00:15:27,060 --> 00:15:30,264 line:-2
当读取其它app窗口中的内容时
也一样


275
00:15:31,064 --> 00:15:33,500 line:-1
比如有个功能是把窗口中的内容


276
00:15:33,567 --> 00:15:35,335 line:-1
保存为磁盘上的一张图片


277
00:15:36,837 --> 00:15:40,073 line:-2
很显然
对CGWindowListCreateImage的调用


278
00:15:41,074 --> 00:15:43,510 line:-2
可以返回无
前提是如果给它传递的窗口ID


279
00:15:44,244 --> 00:15:46,847 line:-1
不属于发起调用的app


280
00:15:47,648 --> 00:15:50,684 line:-1
并且也不属于桌面背景图


281
00:15:51,218 --> 00:15:52,286 line:-1
或菜单栏


282
00:15:52,352 --> 00:15:54,354 line:-1
我想强调的是 这是背景图


283
00:15:54,421 --> 00:15:58,292 line:-2
它不包含桌面上的任何图标
或任何文件的名称


284
00:16:01,028 --> 00:16:03,030 line:-1
可能会给用户显示授权对话框


285
00:16:03,363 --> 00:16:06,867 line:-1
指导用户批准app


286
00:16:06,934 --> 00:16:08,068 line:-1
进行屏幕记录


287
00:16:08,135 --> 00:16:11,638 line:-1
因为对话框只在首次记录时显示


288
00:16:11,705 --> 00:16:15,509 line:-2
CGWindowListCreateImage
或CGDisplayStream


289
00:16:15,843 --> 00:16:18,312 line:-1
可能会由于没有批准屏幕记录而失败


290
00:16:20,814 --> 00:16:23,483 line:-1
我要讲的另一个


291
00:16:23,550 --> 00:16:25,586 line:-2
与屏幕记录相关的外围话题是
窗口元数据


292
00:16:26,887 --> 00:16:30,123 line:-2
app可以使用Core Graphics框架的
CGWindowListCopyWindowInfo函数


293
00:16:30,557 --> 00:16:34,194 line:-2
查询关于屏幕上打开或处于后台的
窗口的元数据


294
00:16:36,830 --> 00:16:41,235 line:-2
所返回的元数据包含
窗口的尺寸和位置


295
00:16:41,668 --> 00:16:43,370 line:-1
和唯一的窗口标识符


296
00:16:43,437 --> 00:16:45,239 line:-1
以及拥有窗口的app的


297
00:16:45,639 --> 00:16:47,040 line:-1
标识符的名称和进程


298
00:16:48,909 --> 00:16:52,179 line:-1
然而窗口名称和共享状态不可用


299
00:16:52,446 --> 00:16:55,682 line:-2
除非用户预批准app可以进行
屏幕记录


300
00:16:56,650 --> 00:16:58,785 line:-2
这是因为有些app会在窗口名称中
添加一些敏感性数据


301
00:16:58,852 --> 00:17:04,191 line:-1
比如账户名称或更可能是网页URL


302
00:17:05,425 --> 00:17:08,462 line:-1
并且CGWindowListCopyWindowInfo


303
00:17:08,996 --> 00:17:10,597 line:-1
永远不会触发授权提示


304
00:17:10,664 --> 00:17:13,599 line:-2
但它会过滤它给调用它的app
所返回的元数据


305
00:17:14,201 --> 00:17:17,604 line:-2
因此如果你的app依赖于
获取窗口名称


306
00:17:17,671 --> 00:17:18,505 line:-1
比如说


307
00:17:19,205 --> 00:17:20,973 line:-1
你会发现所返回的元数据


308
00:17:21,040 --> 00:17:22,342 line:-1
不包含窗口名称


309
00:17:22,910 --> 00:17:26,747 line:-1
你可能想警告用户并把用户指向隐私


310
00:17:26,813 --> 00:17:28,182 line:-1
安全与隐私首选项设置


311
00:17:30,117 --> 00:17:31,852 line:-1
这里有一个示例函数


312
00:17:32,586 --> 00:17:35,355 line:-1
在每次显示中都可以获取


313
00:17:35,923 --> 00:17:38,125 line:-1
桌面背景图的唯一窗口标识符


314
00:17:38,892 --> 00:17:40,661 line:-1
再一次 背景图


315
00:17:40,727 --> 00:17:43,430 line:-1
不包含桌面上的图标


316
00:17:46,500 --> 00:17:50,037 line:-2
这个函数首先会获取屏幕上
所有窗口的一个列表


317
00:17:50,337 --> 00:17:53,207 line:-2
使用CGWindowListCopyWindowInfo
函数实现


318
00:17:54,608 --> 00:17:57,945 line:-2
然后它获取
Core Graphics


319
00:17:58,212 --> 00:18:01,281 line:-2
用于桌面背景图窗口的窗口级别
或Z序


320
00:18:03,217 --> 00:18:07,154 line:-1
然后再过滤整个窗口列表


321
00:18:07,221 --> 00:18:09,122 line:-1
只保留桌面背景窗口级的窗口


322
00:18:10,357 --> 00:18:13,093 line:-2
如果你从网上查一下
你会发现许多代码样本


323
00:18:13,160 --> 00:18:16,029 line:-1
都是按kCG窗口名称过滤的


324
00:18:16,296 --> 00:18:19,132 line:-2
因为窗口名称可能包含
隐私敏感性信息


325
00:18:19,466 --> 00:18:22,169 line:-2
可能要求用户预批准app
进行屏幕记录


326
00:18:23,203 --> 00:18:26,273 line:-1
然而通过以窗口级别而不是窗口名称


327
00:18:26,540 --> 00:18:28,942 line:-1
识别桌面背景窗口


328
00:18:29,743 --> 00:18:32,646 line:-2
无论用户是否预批准app
进行屏幕记录


329
00:18:32,713 --> 00:18:33,747 line:-1
都能进行识别


330
00:18:33,814 --> 00:18:37,584 line:-1
这正是app设计的小修改


331
00:18:37,651 --> 00:18:40,921 line:-1
可以导致用户体验的


332
00:18:41,321 --> 00:18:42,723 line:-1
大改变的一个例子


333
00:18:43,357 --> 00:18:44,725 line:-1
（Catalina中的记录保护）


334
00:18:45,759 --> 00:18:49,329 line:-2
这是macOS Catalina
保护你屏幕上的内容


335
00:18:49,396 --> 00:18:50,831 line:-1
不经你允许就被记录下来的方式


336
00:18:51,365 --> 00:18:54,935 line:-2
app可以自由记录
它们自己的窗口中的内容


337
00:18:56,270 --> 00:18:58,539 line:-1
菜单栏和桌面背景图


338
00:18:59,740 --> 00:19:02,776 line:-2
但用户必须使用
安全与隐私首选项设置


339
00:19:03,177 --> 00:19:07,181 line:-1
预批准app记录整个屏幕


340
00:19:07,581 --> 00:19:09,550 line:-2
或除它们自己的窗口之外的
窗口的内容


341
00:19:12,052 --> 00:19:14,121 line:-2
我想讲一下
在macOS Catalina中


342
00:19:14,188 --> 00:19:16,657 line:-1
受保护的其它记录功能：你的键盘


343
00:19:18,258 --> 00:19:20,194 line:-1
现在绝大多数用户都期待


344
00:19:20,661 --> 00:19:24,198 line:-2
他们的键盘
只能用于他们所交互的app


345
00:19:24,264 --> 00:19:25,299 line:-1
也就是处于最前的app


346
00:19:25,999 --> 00:19:28,368 line:-1
并且绝大多数app都仅当用户


347
00:19:28,435 --> 00:19:29,970 line:-1
正在使用它们时才会要求键盘输入


348
00:19:30,304 --> 00:19:33,073 line:-2
事实上如果你的app使用了
标准的UI组件


349
00:19:33,373 --> 00:19:34,608 line:-1
它们会自动处理


350
00:19:34,675 --> 00:19:36,510 line:-1
提交到你的app的键盘事件


351
00:19:37,678 --> 00:19:39,613 line:-1
有些app希望能在键盘事件


352
00:19:40,113 --> 00:19:42,249 line:-1
提交到app时进行拦截


353
00:19:42,749 --> 00:19:45,986 line:-2
这没问题 可以通过创建
NSApplication的子类


354
00:19:46,386 --> 00:19:47,921 line:-1
并覆盖sendEvent方法实现


355
00:19:48,455 --> 00:19:49,623 line:-1
或像这里所显示的这样


356
00:19:49,890 --> 00:19:53,393 line:-2
你可以使用NSEvent的
addLocalMonitorForEvents函数实现


357
00:19:56,930 --> 00:19:58,632 line:-1
监控所有键盘事件


358
00:19:59,066 --> 00:20:02,069 line:-2
包括其它app的键盘事件
然而 这需要用户批准


359
00:20:03,170 --> 00:20:06,673 line:-2
在这里你可以看到一个使用
CGEventTapCreate的例子


360
00:20:07,674 --> 00:20:10,611 line:-1
用于调用按下和释放键事件的回调


361
00:20:11,712 --> 00:20:13,380 line:-1
这段代码首次运行时


362
00:20:13,914 --> 00:20:18,785 line:-2
这个调用CGEventTapCreate
将失败并返回无


363
00:20:22,022 --> 00:20:24,825 line:-1
与此同时给用户显示一个对话框


364
00:20:24,892 --> 00:20:26,660 line:-1
把用户指向安全与隐私首选项设置


365
00:20:27,294 --> 00:20:30,230 line:-2
用户可以批准你的app在后台监控
键盘事件


366
00:20:30,564 --> 00:20:32,332 line:-1
如果他们愿意的话


367
00:20:35,068 --> 00:20:37,204 line:-1
app可能会检查授权状态


368
00:20:37,271 --> 00:20:38,906 line:-1
而不需要触发批准提示


369
00:20:40,007 --> 00:20:42,743 line:-2
使用
IOHIDCheckAccess函数


370
00:20:42,809 --> 00:20:45,946 line:-2
和kIOHIDRequestTypeListenEvent
参数实现


371
00:20:48,715 --> 00:20:51,552 line:-2
并且app可以请求显示一个
批准对话框


372
00:20:51,618 --> 00:20:55,255 line:-2
而不需要使用IOHIDRequestAccess
函数和同一个参数


373
00:20:55,856 --> 00:20:59,826 line:-1
创建一个事件标签来尝试发布事件


374
00:21:02,362 --> 00:21:05,265 line:-2
总的来说 macOS Catalina
现在要求用户准许


375
00:21:05,332 --> 00:21:07,701 line:-1
app记录他们屏幕上的内容


376
00:21:08,202 --> 00:21:09,970 line:-1
或他们通过键盘进行的键入


377
00:21:10,037 --> 00:21:11,138 line:-1
（用户隐私权保护记录功能）


378
00:21:11,205 --> 00:21:15,709 line:-2
现在我想让你们注意一下
macOS如何保护


379
00:21:15,776 --> 00:21:17,277 line:-1
对你们的隐私敏感性文件的访问


380
00:21:19,279 --> 00:21:21,348 line:-2
macOS Catalina
继续采用Mojave中的方法


381
00:21:21,915 --> 00:21:26,186 line:-1
对用户的文件和文件夹的


382
00:21:26,653 --> 00:21:27,988 line:-1
隐私保护提供两大级别


383
00:21:28,789 --> 00:21:31,325 line:-2
第一 app通常可能
访问的用户数据


384
00:21:31,391 --> 00:21:32,960 line:-1
比如联系方式或照片


385
00:21:33,260 --> 00:21:36,296 line:-2
对于这些数据 macOS将在
与app共享数据之前


386
00:21:36,363 --> 00:21:38,465 line:-1
确认用户的准许


387
00:21:39,867 --> 00:21:42,236 line:-1
第二 还有一些用户数据


388
00:21:42,569 --> 00:21:45,239 line:-2
这些数据在文件系统中只是
一些事实细节


389
00:21:45,305 --> 00:21:46,206 line:-1
并不是API的一部分


390
00:21:46,940 --> 00:21:50,310 line:-2
诸如邮件、消息
或Safari浏览历史


391
00:21:51,078 --> 00:21:52,913 line:-2
要访问这些数据
需要跨过很高的障碍


392
00:21:52,980 --> 00:21:56,250 line:-2
因为这些文件
一般只能由指定app访问


393
00:21:56,316 --> 00:21:58,318 line:-1
比如磁盘管理或备份实用程序


394
00:21:59,786 --> 00:22:01,722 line:-1
但首先让我们谈谈需要用户批准


395
00:22:01,788 --> 00:22:03,557 line:-1
才能访问的文件和文件夹


396
00:22:05,192 --> 00:22:07,995 line:-2
macOS Mojave
引入了用户准许要求


397
00:22:08,562 --> 00:22:12,599 line:-1
用于通过文件系统访问你的


398
00:22:12,933 --> 00:22:13,967 line:-1
联系方式、日历、提醒或相册


399
00:22:14,735 --> 00:22:16,503 line:-2
当app尝试访问这些类别中的
任何一个类别的文件时


400
00:22:17,738 --> 00:22:20,440 line:-1
看起来就是这样一个提示


401
00:22:22,109 --> 00:22:24,745 line:-1
这与我们刚才看到的


402
00:22:24,811 --> 00:22:28,382 line:-2
用于屏幕记录和键盘事件记录的
授权对话框不一样


403
00:22:29,316 --> 00:22:32,519 line:-1
调用线程实际上宁愿被阻止


404
00:22:33,720 --> 00:22:36,023 line:-1
也不愿意停止访问并给用户显示警告


405
00:22:36,089 --> 00:22:39,593 line:-2
它会等待用户批准或拒绝app
对该类别的文件的访问


406
00:22:42,229 --> 00:22:43,597 line:-1
在macOS Catalina中


407
00:22:43,664 --> 00:22:45,165 line:-1
我们给这些类别补充了


408
00:22:45,966 --> 00:22:50,170 line:-2
这些额外的类别
包含在系统中用作API的数据


409
00:22:51,405 --> 00:22:54,308 line:-2
这些代表用户用于存储文档的
不同位置


410
00:22:56,009 --> 00:22:57,311 line:-1
他们在Finder中双击


411
00:22:58,312 --> 00:23:01,081 line:-1
通过打开或保存面板进行选择 等等


412
00:23:02,883 --> 00:23:05,986 line:-2
用户的桌面和文档文件夹
是主要保护对象


413
00:23:06,053 --> 00:23:08,789 line:-2
因为那是许多用户保存文件的
默认位置


414
00:23:10,123 --> 00:23:13,026 line:-2
并且因为某些app
包括Safari


415
00:23:13,527 --> 00:23:15,295 line:-2
在下载时默认把所下载的文件
保存在桌面上


416
00:23:17,798 --> 00:23:20,834 line:-2
同时也要保护在
iCloud Drive中保存的文档


417
00:23:20,901 --> 00:23:23,804 line:-1
或在第三方云存储中保存的文档


418
00:23:24,705 --> 00:23:26,206 line:-1
或在可移除空间中保存的文档


419
00:23:26,273 --> 00:23:27,841 line:-1
并且如果你像我一样经验丰富


420
00:23:27,908 --> 00:23:29,343 line:-1
你看能会考虑保护软盘上的文档


421
00:23:29,977 --> 00:23:33,080 line:-2
但在这里我是指可能会被移除的
任何存储


422
00:23:33,480 --> 00:23:36,083 line:-1
包括USB拇指驱动或外部磁盘


423
00:23:38,252 --> 00:23:40,487 line:-1
并且我相信摄影师可以证明


424
00:23:40,854 --> 00:23:43,957 line:-1
有些人一辈子都使用外部磁盘


425
00:23:44,458 --> 00:23:46,793 line:-1
或使用网络附加的存储


426
00:23:49,229 --> 00:23:51,465 line:-2
因此macOS Catalina
现在也保护


427
00:23:51,865 --> 00:23:54,768 line:-2
我们用于存储文件的绝大多数
常见的位置


428
00:23:57,037 --> 00:23:58,038 line:-1
现在…


429
00:23:58,939 --> 00:24:02,643 line:-1
用户不需要批准app


430
00:24:02,709 --> 00:24:04,444 line:-1
在任意受保护的位置创建新文档


431
00:24:05,579 --> 00:24:07,347 line:-1
只是为了读取现有内容


432
00:24:08,582 --> 00:24:10,384 line:-1
文件内容已经存在了


433
00:24:11,151 --> 00:24:13,754 line:-1
比如说文件传输app


434
00:24:14,488 --> 00:24:17,991 line:-2
可以继续把新文件保存到用户的
下载文件夹中


435
00:24:18,358 --> 00:24:19,960 line:-1
而不需要出发准许提示


436
00:24:21,495 --> 00:24:24,565 line:-2
macOS Catalina中的
用户隐私权保护


437
00:24:25,599 --> 00:24:27,768 line:-1
现在支持用户意图的概念


438
00:24:29,336 --> 00:24:33,340 line:-1
当在Finder中双击文件时


439
00:24:33,974 --> 00:24:36,777 line:-1
当从另一个app中进行拖拽时


440
00:24:37,144 --> 00:24:39,713 line:-2
或当在打开或保存面板中选择文件时
都会推断用户意图


441
00:24:41,248 --> 00:24:43,350 line:-1
并且当用户实施任意一种上述动作时


442
00:24:44,852 --> 00:24:49,389 line:-2
在文件受保护的地方实施
上述任意动作


443
00:24:50,390 --> 00:24:52,759 line:-2
你的app都将访问用户所选的
一个或多个文件


444
00:24:53,160 --> 00:24:56,096 line:-1
而不需要触发准许提示


445
00:24:57,965 --> 00:25:01,835 line:-1
让我们看一下相对于用户准许而言


446
00:25:02,302 --> 00:25:03,670 line:-1
Catalina如何推断用户意图


447
00:25:05,539 --> 00:25:06,507 line:-1
抱歉


448
00:25:07,274 --> 00:25:10,277 line:-1
首先用户准许是被动的


449
00:25:11,011 --> 00:25:15,582 line:-2
只有当app尝试读写文件时
才能被授予访问权限


450
00:25:16,183 --> 00:25:17,651 line:-1
然而用户意图是主动的


451
00:25:18,318 --> 00:25:22,155 line:-2
甚至在app试图读写文件之前
就被授予了访问权限


452
00:25:24,324 --> 00:25:28,128 line:-2
并且用户准许提示可能会中断
用户的流程


453
00:25:28,395 --> 00:25:32,132 line:-2
然而用户意图是从标准的UI交互中
推断出来的


454
00:25:33,433 --> 00:25:35,068 line:-1
为了尽可能减少这些中断


455
00:25:35,335 --> 00:25:38,739 line:-1
用户准许可应用于所有数据 比如说


456
00:25:38,805 --> 00:25:40,007 line:-1
你桌面上的所有文件


457
00:25:40,674 --> 00:25:43,377 line:-1
然而用户意图仅针对


458
00:25:43,443 --> 00:25:44,845 line:-2
用户所交互的一个或多个文件
进行推断


459
00:25:46,180 --> 00:25:48,282 line:-1
尽管如此 这两者并不相互排斥


460
00:25:49,249 --> 00:25:51,518 line:-1
只要你的app访问它所创建的文件


461
00:25:51,852 --> 00:25:53,220 line:-1
或用户所选的文件


462
00:25:53,754 --> 00:25:55,355 line:-1
就不需要触发准许提示


463
00:25:56,456 --> 00:25:59,293 line:-2
但如果你的app要访问处于
隐私受保护位置中的文件


464
00:25:59,793 --> 00:26:01,528 line:-1
而不是它自己所创建的文件


465
00:26:02,329 --> 00:26:03,897 line:-1
或也不是用户所选的文件


466
00:26:04,798 --> 00:26:07,568 line:-2
用户就需要通过准许提示
批准那个访问


467
00:26:08,836 --> 00:26:10,037 line:-1
有一个常见的情境


468
00:26:10,637 --> 00:26:13,974 line:-2
app可能需要访问用户所选的
不止一个文件


469
00:26:14,374 --> 00:26:16,677 line:-1
即附带文件


470
00:26:17,778 --> 00:26:21,481 line:-2
比如自动打开与电影文件名称相同的
字幕文件


471
00:26:22,282 --> 00:26:25,385 line:-1
但字幕文件位于电影文件旁边


472
00:26:27,187 --> 00:26:30,224 line:-2
因此使用NSFileCoordinator中的
相关项支持


473
00:26:31,325 --> 00:26:34,895 line:-1
可以推断对一个文件的许可


474
00:26:34,962 --> 00:26:37,397 line:-1
可以扩展到对其它文件的许可


475
00:26:41,435 --> 00:26:44,004 line:-2
要使用NSFileCoordinator
打开附带文件


476
00:26:44,505 --> 00:26:48,542 line:-2
你首先需要在你的app中声明
附带文件的扩展名


477
00:26:49,843 --> 00:26:52,479 line:-2
CFBundleDocumentTypes Info.plist
密钥


478
00:26:53,280 --> 00:26:59,052 line:-2
并把NSIsRelatedItemType的
布尔值设为真


479
00:27:00,120 --> 00:27:01,221 line:-1
然后在你的代码中


480
00:27:02,422 --> 00:27:04,124 line:-2
创建NSFilePresenter
的子类


481
00:27:05,392 --> 00:27:09,363 line:-2
把primaryPresentedItemURL
设置到用户所选的文件上


482
00:27:10,197 --> 00:27:12,099 line:-2
也就是你的app
已经拥有访问权限的那个文件


483
00:27:12,966 --> 00:27:15,335 line:-2
并把PresentedItemURL
设置到附带文件上


484
00:27:15,669 --> 00:27:17,070 line:-1
也就是你想要访问的那个文件


485
00:27:18,438 --> 00:27:20,974 line:-1
请注意 附带文件的扩展名可以


486
00:27:21,475 --> 00:27:22,943 line:-1
与用户所选文件的扩展名不同


487
00:27:23,010 --> 00:27:25,679 line:-1
但所有其它组成部分都必须相同


488
00:27:27,281 --> 00:27:28,348 line:-1
最后


489
00:27:28,615 --> 00:27:33,754 line:-2
创建NSFileCoordinator
以引用NSFilePresenter实例


490
00:27:35,022 --> 00:27:38,325 line:-2
当你调用NSFileCoordinator的
协调方法时


491
00:27:38,725 --> 00:27:41,094 line:-1
在那一段时间内


492
00:27:41,995 --> 00:27:43,096 line:-2
你的app同时也会获取
对附带文件的访问权限


493
00:27:45,332 --> 00:27:47,768 line:-2
这是关于app如何使用
NSFileCoordinator


494
00:27:47,835 --> 00:27:50,971 line:-1
来获取拥有文件名称相同


495
00:27:51,271 --> 00:27:52,806 line:-1
但扩展名与用户所选的文件不同的


496
00:27:53,574 --> 00:27:56,176 line:-1
文件的访问权限的简单介绍


497
00:27:56,243 --> 00:27:57,244 line:-1
而不会触发用户准许提示


498
00:27:58,612 --> 00:28:01,014 line:-1
为了安全地推断用户意图


499
00:28:01,081 --> 00:28:04,852 line:-2
现在打开并保存面板总是处于
进程之外


500
00:28:05,953 --> 00:28:08,622 line:-1
因此类继承和视图等级就发生了改变


501
00:28:09,022 --> 00:28:11,325 line:-1
这可能会对你的app产生影响


502
00:28:11,391 --> 00:28:14,027 line:-2
如果你有NSOpenPanel
或NSSavePanel子类的话


503
00:28:16,196 --> 00:28:19,633 line:-1
app将再也不能


504
00:28:20,100 --> 00:28:22,102 line:-1
通过调用OK方法显示面板


505
00:28:22,569 --> 00:28:23,971 line:-1
用户必须自己操作


506
00:28:26,006 --> 00:28:27,207 line:-1
NSOpenSavePanelDelegate方法


507
00:28:27,274 --> 00:28:30,677 line:-1
也有些微的修改


508
00:28:32,112 --> 00:28:35,582 line:-2
app再也不能使用这个方法来重写
用户选择了


509
00:28:38,018 --> 00:28:41,121 line:-1
访问URL提供给这些方法的文件


510
00:28:41,388 --> 00:28:43,223 line:-1
可能会触发用户准许提示


511
00:28:43,490 --> 00:28:45,659 line:-1
因为这些方法是通过面板进行调用的


512
00:28:46,727 --> 00:28:48,996 line:-2
而在此过程中用户仍正在与面板
进行交互


513
00:28:49,062 --> 00:28:50,597 line:-1
因此他们还未选择文件


514
00:28:51,398 --> 00:28:53,600 line:-1
因此你的app还未被授权访问


515
00:28:55,903 --> 00:28:58,071 line:-2
现在app可以测试指定文件
是否可读


516
00:28:58,138 --> 00:29:01,775 line:-2
或可写 而不需要使用这些API
触发准许提示


517
00:29:04,344 --> 00:29:07,881 line:-1
只要你的app仅访问


518
00:29:08,415 --> 00:29:11,418 line:-1
它自己所创建的文件或用户…


519
00:29:11,985 --> 00:29:15,756 line:-1
通过文件打开事件或拖放


520
00:29:15,822 --> 00:29:18,158 line:-2
或打开面板或保存面板选择
而接收的文件


521
00:29:18,725 --> 00:29:21,328 line:-1
将推断app被许可访问这些文件


522
00:29:21,395 --> 00:29:23,797 line:-1
并且没有必要显示准许提示


523
00:29:24,698 --> 00:29:25,666 line:-1
然而


524
00:29:26,133 --> 00:29:27,935 line:-1
如果需要显示准许提示


525
00:29:28,669 --> 00:29:32,105 line:-2
所有新的受保护的文件系统位置
都支持目的字符串


526
00:29:32,940 --> 00:29:34,842 line:-2
你可以在Info.plist中
指定目的字符串


527
00:29:34,908 --> 00:29:38,946 line:-2
用于解释当显示准许提示时
访问的情境


528
00:29:43,784 --> 00:29:46,253 line:-1
用于这些类别的目的字符串是可选的


529
00:29:47,020 --> 00:29:49,556 line:-2
如果你的app要访问其中一个
受保护的位置


530
00:29:50,290 --> 00:29:51,358 line:-1
是有意地访问


531
00:29:51,992 --> 00:29:54,895 line:-2
我们强烈推荐你对该位置添加
目的字符串


532
00:29:54,962 --> 00:29:58,532 line:-2
从而用户了解app为什么要访问
他们的文档


533
00:29:59,333 --> 00:30:01,201 line:-1
如果你发现在你的测试中


534
00:30:01,268 --> 00:30:03,770 line:-2
你的app触发了
你不希望触发的准许提示


535
00:30:04,271 --> 00:30:07,274 line:-2
你可以点击“不允许”按钮
并进入控制台app


536
00:30:07,341 --> 00:30:09,376 line:-1
并查找所产生的沙盒冲突


537
00:30:09,443 --> 00:30:12,079 line:-1
那会告诉你app所尝试访问的文件


538
00:30:12,779 --> 00:30:15,916 line:-1
并回溯导致它


539
00:30:18,752 --> 00:30:19,953 line:-1
需要显示准许提示的根由


540
00:30:22,022 --> 00:30:24,591 line:-2
这即macOS Catalina
如何保护用户的文档


541
00:30:25,025 --> 00:30:28,295 line:-2
以及标准UI如何
以及如何使用标准UI交互


542
00:30:28,362 --> 00:30:30,797 line:-1
推断他们期待app访问哪个文档


543
00:30:32,266 --> 00:30:35,802 line:-1
让我们看一下macOS如何保护


544
00:30:36,069 --> 00:30:37,437 line:-1
由系统管理的用户数据


545
00:30:37,504 --> 00:30:40,040 line:-2
以及app如何请求访问那些数据
如果必要的话


546
00:30:42,242 --> 00:30:43,710 line:-2
在这里我们看到
自macOS Mojave起


547
00:30:43,977 --> 00:30:46,046 line:-1
就受保护的数据类别


548
00:30:47,681 --> 00:30:51,151 line:-1
一些软件 比如磁盘管理或备份软件


549
00:30:51,652 --> 00:30:53,787 line:-2
需要处理所有文件
无论文件内容是什么


550
00:30:54,788 --> 00:30:55,789 line:-1
并且那些软件…


551
00:30:56,423 --> 00:31:00,060 line:-2
那些app可以使用与我们刚才
看到过的API相同的API


552
00:31:00,928 --> 00:31:03,096 line:-1
用于决定给定文件是否可读或可写


553
00:31:03,630 --> 00:31:05,399 line:-1
然后取决于什么适合app


554
00:31:05,465 --> 00:31:08,669 line:-2
它们可以跳过不可访问的文件
或它们可以警告用户


555
00:31:08,735 --> 00:31:10,304 line:-2
并指导他们
在安全与隐私首选项设置中


556
00:31:10,370 --> 00:31:13,207 line:-1
批准app获取完整权限


557
00:31:17,077 --> 00:31:19,179 line:-1
这就是用户批准完整磁盘权限的地方


558
00:31:20,981 --> 00:31:22,049 line:-1
既然我们已经到这了


559
00:31:22,382 --> 00:31:24,885 line:-2
我想讲一下我们在
macOS Catalina中


560
00:31:24,952 --> 00:31:26,053 line:-1
所做的一个改进


561
00:31:27,187 --> 00:31:30,624 line:-2
我们改进了用户批准app
获取完整磁盘权限的方式


562
00:31:30,958 --> 00:31:33,260 line:-1
同时用户仍可以使用这个加号按钮


563
00:31:33,527 --> 00:31:35,362 line:-1
手动向列表中添加app


564
00:31:36,630 --> 00:31:38,699 line:-2
我们从开发者们那里得到的
其中一个反馈是


565
00:31:39,466 --> 00:31:41,435 line:-2
用户找到他们的app的
特权helper


566
00:31:42,336 --> 00:31:43,637 line:-1
可能会很尴尬


567
00:31:44,905 --> 00:31:46,673 line:-2
因此
在macOS Catalina中


568
00:31:47,241 --> 00:31:49,476 line:-1
由于缺乏完整磁盘权限批准


569
00:31:49,543 --> 00:31:51,612 line:-1
而被拒绝访问的可执行文件


570
00:31:51,912 --> 00:31:53,981 line:-1
现在可以未经检查就进行预填充


571
00:31:55,082 --> 00:31:58,051 line:-2
在这里我们看到这样的helper
可通过它的可执行文件名称识别它


572
00:32:00,254 --> 00:32:02,389 line:-2
如果那个helper嵌入到
一个捆绑包中


573
00:32:02,756 --> 00:32:04,291 line:-2
将显示指定捆绑包
Info.plist的


574
00:32:05,259 --> 00:32:08,529 line:-1
图标中的显示名称


575
00:32:12,533 --> 00:32:14,168 line:-2
再一次 被预批准获取
完整磁盘权限的app


576
00:32:14,635 --> 00:32:16,937 line:-1
可以访问这个数据


577
00:32:17,771 --> 00:32:22,309 line:-2
app使用FileManager
或POSIX级API来测试授权


578
00:32:23,010 --> 00:32:23,844 line:-1
并且如果有必要的话


579
00:32:23,911 --> 00:32:26,747 line:-2
还可以指导用户进入
安全与隐私首选项设置


580
00:32:27,848 --> 00:32:31,018 line:-2
用户可以在那里批准app的权限
如果他们愿意的话


581
00:32:32,786 --> 00:32:35,222 line:-1
在Catalina中


582
00:32:35,522 --> 00:32:37,925 line:-1
需要预批准完整磁盘权限的数据


583
00:32:38,392 --> 00:32:41,495 line:-1
已经进行了扩展 从而包含垃圾数据


584
00:32:43,330 --> 00:32:45,832 line:-2
许多人认为只要他们把文件
移到回收站中


585
00:32:46,200 --> 00:32:47,734 line:-1
文件就消失了


586
00:32:48,535 --> 00:32:49,903 line:-1
因此他们所期待的最后一件事就是


587
00:32:50,337 --> 00:32:52,439 line:-2
有一个东西能深入到他们的
垃圾文件中


588
00:32:54,341 --> 00:32:55,542 line:-1
这太吓人了


589
00:32:59,580 --> 00:33:00,881 line:-1
与其它类别的数据一样


590
00:33:01,481 --> 00:33:03,851 line:-2
垃圾数据可能包含大量
隐私敏感性数据


591
00:33:03,917 --> 00:33:05,786 line:-1
然而与其它类别不同


592
00:33:05,853 --> 00:33:09,890 line:-2
垃圾数据以文件为中心
并确实有操纵这些文件的API


593
00:33:10,490 --> 00:33:11,558 line:-1
诸如这样的API


594
00:33:12,593 --> 00:33:14,294 line:-1
会把文件移到用户的回收站中


595
00:33:15,796 --> 00:33:19,600 line:-2
现在我想稍微深入地讲一下
FileManager回收项API


596
00:33:20,100 --> 00:33:24,404 line:-2
它把文件的URL作为参数
从而把它移到回收站


597
00:33:26,940 --> 00:33:29,810 line:-2
调用参数的app需要已经获取
对该文件的访问权限


598
00:33:29,877 --> 00:33:31,745 line:-2
你不能把你自己
都没有权限访问的文件


599
00:33:31,812 --> 00:33:33,113 line:-1
移到回收站


600
00:33:34,748 --> 00:33:38,185 line:0
但如果成功 它会在文件在用户的
回收站中的新位置上


601
00:33:38,252 --> 00:33:42,523 line:0
用文件的NSURL
填充输出结果的URL参数


602
00:33:43,790 --> 00:33:45,893 line:-1
并且它仍可以访问那个URL


603
00:33:46,560 --> 00:33:48,729 line:-2
为了讲得通 它在把文件移到回收站
之前拥有对那个文件的访问权限


604
00:33:48,795 --> 00:33:50,631 line:-2
在它把文件移到回收站之后
它仍然还有那个文件的访问权限


605
00:33:50,697 --> 00:33:53,667 line:-2
这就可以让你使用
FileManager API 比如


606
00:33:53,734 --> 00:33:55,202 line:-1
把文件从回收站中移回去


607
00:33:57,604 --> 00:34:00,073 line:-2
总而言之
当app要求完整磁盘权限


608
00:34:00,407 --> 00:34:01,942 line:-1
来枚举回收站中的文件时


609
00:34:02,342 --> 00:34:03,777 line:-1
或来查看那些文件内容时


610
00:34:04,444 --> 00:34:08,014 line:-2
不需要任何授权就可以把文件
移到回收站


611
00:34:08,081 --> 00:34:10,751 line:-1
或访问它们之前放在回收站中的文件


612
00:34:13,286 --> 00:34:15,489 line:-1
最后我要简单讲一下自动化


613
00:34:17,056 --> 00:34:19,993 line:-2
macOS Mojave
引入了系统或其它app的


614
00:34:20,561 --> 00:34:22,596 line:-1
自动化准许要求


615
00:34:22,963 --> 00:34:25,331 line:-1
这对于防止恶意软件滥用你所信任


616
00:34:25,399 --> 00:34:26,600 line:-2
并与之共享数据的app来说
非常重要


617
00:34:31,505 --> 00:34:33,106 line:-1
首先是合成事件


618
00:34:33,373 --> 00:34:34,675 line:-1
合成输入事件


619
00:34:34,741 --> 00:34:38,344 line:-1
一般由可访问性软件用于提供


620
00:34:39,646 --> 00:34:42,181 line:-1
对键盘或鼠标输入的帮助


621
00:34:45,185 --> 00:34:46,887 line:-1
但因为用户准许对话框


622
00:34:47,454 --> 00:34:50,290 line:-1
用户意图界面或其它各种安全性提示


623
00:34:51,190 --> 00:34:52,926 line:-1
都依赖于用户输入


624
00:34:53,860 --> 00:34:56,797 line:-1
合成输入事件仅被允许发生在


625
00:34:56,864 --> 00:34:58,832 line:-1
用户所安装的用作代理的app中


626
00:34:59,333 --> 00:35:01,502 line:-1
这一点很重要


627
00:35:03,136 --> 00:35:04,171 line:-1
这里有段示例代码…


628
00:35:05,372 --> 00:35:08,642 line:-1
这是一个代码示例 模拟…


629
00:35:09,443 --> 00:35:11,011 line:-1
按下键和释放键


630
00:35:12,513 --> 00:35:13,847 line:-1
这段代码首次运行时…


631
00:35:15,682 --> 00:35:18,452 line:-2
并尝试发布这些事件时
就好像是用户实际上正在键入一样


632
00:35:19,620 --> 00:35:20,687 line:-1
这些事件被丢弃了


633
00:35:21,955 --> 00:35:25,125 line:-2
并给用户显示类似这样的对话框
警告用户


634
00:35:25,192 --> 00:35:27,628 line:-1
他们需要进入安全与隐私首选项设置


635
00:35:28,262 --> 00:35:30,564 line:-1
授权app获取可访问性功能


636
00:35:32,866 --> 00:35:35,636 line:-1
之前我们看过这段


637
00:35:35,702 --> 00:35:37,037 line:-1
用于监听键盘事件的示例代码


638
00:35:38,772 --> 00:35:40,641 line:-2
如果我把
listenOnly参数改为


639
00:35:41,975 --> 00:35:44,211 line:-1
defaultTap…


640
00:35:45,479 --> 00:35:46,513 line:-1
就像那样的


641
00:35:48,148 --> 00:35:51,218 line:-2
CGEventTapCreate
会创建一个修改事件轻触


642
00:35:51,652 --> 00:35:54,188 line:-1
而回调可以改动事件流


643
00:35:54,254 --> 00:35:56,924 line:-2
这意味着现在你的app有一种
可以影响


644
00:35:56,990 --> 00:35:58,659 line:-2
向系统的其余部分
提交哪些事件的方式


645
00:36:00,294 --> 00:36:03,764 line:-1
而仅监听事件要求输入监控的授权


646
00:36:04,131 --> 00:36:07,434 line:-2
修改事件轻触
要求可访问性功能的授权


647
00:36:09,436 --> 00:36:12,539 line:-2
app可以测试用户
是否已批准app


648
00:36:12,973 --> 00:36:14,541 line:-1
合成本地…


649
00:36:14,608 --> 00:36:18,645 line:-2
合成输入事件 通过
IOHIDCheckAccess函数实现


650
00:36:19,413 --> 00:36:21,882 line:-1
这与检查键盘输入监控授权的API


651
00:36:21,949 --> 00:36:23,717 line:-1
是同一个API


652
00:36:24,484 --> 00:36:26,386 line:-1
但你可以在这里看到我们传递了


653
00:36:26,453 --> 00:36:29,857 line:-1
kIOHIDRequestTypePostEvent


654
00:36:32,426 --> 00:36:34,561 line:-1
因此这通过合成事件自动化了


655
00:36:35,362 --> 00:36:37,831 line:-2
现在让我们谈谈通过Apple事件
自动化app


656
00:36:39,499 --> 00:36:42,870 line:-2
在app用AppleScript
或原生Apple事件


657
00:36:42,936 --> 00:36:45,739 line:-2
来控制其它app的动作之前
必须经过用户准许


658
00:36:46,907 --> 00:36:48,542 line:-1
这些准许提示指明了


659
00:36:48,609 --> 00:36:51,245 line:-2
哪些app处于哪些其它app的
影响之下


660
00:36:51,612 --> 00:36:53,881 line:-1
并为用户提供了对那个自动化的控制


661
00:36:55,449 --> 00:36:58,318 line:-1
但没有为发送进程


662
00:37:00,721 --> 00:37:04,825 line:-2
提供隐私敏感性数据的访问权限的
Apple事件例外


663
00:37:06,126 --> 00:37:08,795 line:-2
许多这样的时间都经由
NSWorkspace API暴露


664
00:37:11,231 --> 00:37:14,568 line:-2
AEDeterminePermissionToAutomate
目标函数


665
00:37:15,736 --> 00:37:19,273 line:-2
可用于测试向目标app发送
Apple事件


666
00:37:19,339 --> 00:37:20,641 line:-1
是否需要授权


667
00:37:21,742 --> 00:37:22,743 line:-1
这里有个例子


668
00:37:23,210 --> 00:37:26,213 line:-2
测试调用者是否可向Keynote
发送任意Apple事件


669
00:37:28,615 --> 00:37:30,350 line:-1
通过传递布尔值为真


670
00:37:30,851 --> 00:37:32,719 line:-2
对于
askUserIfNeeded参数


671
00:37:33,086 --> 00:37:36,423 line:-2
你可以请求…
如果必要的话就触发批准提示


672
00:37:37,624 --> 00:37:39,493 line:-1
但我要指出的是如果显示了提示


673
00:37:39,560 --> 00:37:42,296 line:-2
发起调用的线程将被阻止
并等待用户的交互


674
00:37:42,596 --> 00:37:44,798 line:-2
因此你一定不想在app的主线程上
调用这个API


675
00:37:45,966 --> 00:37:48,135 line:-1
这个API的级别很低


676
00:37:48,202 --> 00:37:50,704 line:-2
它会返回一个
OSStatus代码表明


677
00:37:51,271 --> 00:37:55,609 line:-2
调用者是否被允许向
目标Apple事件


678
00:37:57,211 --> 00:37:59,746 line:-2
尝试发送Apple事件
是否会触发提示


679
00:38:00,147 --> 00:38:01,481 line:-1
以确认用户的准许


680
00:38:02,082 --> 00:38:04,117 line:-1
或目标当前不在运行


681
00:38:04,184 --> 00:38:06,720 line:-2
而尝试发送可能会导致启动目标的
Apple事件


682
00:38:07,888 --> 00:38:09,590 line:-1
或是否产生某些报错


683
00:38:11,458 --> 00:38:13,193 line:-2
这是关于macOS
在允许app自动化其它app之前


684
00:38:13,994 --> 00:38:16,964 line:-1
如何捕捉用户的准许


685
00:38:17,464 --> 00:38:19,867 line:-1
以及app如何决定是否提供准许


686
00:38:19,933 --> 00:38:21,034 line:-1
并进行相应的调整的快速总结


687
00:38:21,468 --> 00:38:22,870 line:-2
（Catalina中的
新用户隐私权保护）


688
00:38:23,470 --> 00:38:25,205 line:-1
在macOS Catalina中


689
00:38:25,272 --> 00:38:28,942 line:-2
需要用户准许才能记录
用户的屏幕或键盘


690
00:38:29,009 --> 00:38:31,745 line:-2
这对于现有的摄像头和麦克风保护
来说是新添加的功能


691
00:38:32,579 --> 00:38:34,515 line:-1
现在许多常用的位置…


692
00:38:34,815 --> 00:38:36,717 line:-2
也保护许多常用的
用于保存文档的位置


693
00:38:36,783 --> 00:38:39,086 line:-1
比如用户的桌面文档下载


694
00:38:39,953 --> 00:38:42,689 line:-2
他们的iCloud Drive
或第三方存储


695
00:38:43,457 --> 00:38:45,893 line:-2
可移除的网络空间以及
当然了 还有回收站


696
00:38:47,928 --> 00:38:51,899 line:-1
我们在macOS Catalina中也扩展了


697
00:38:52,332 --> 00:38:55,802 line:-2
隐私权首选项政策控制
MDM有效载荷


698
00:38:55,869 --> 00:38:56,837 line:-1
以包含新的受保护资源的服务


699
00:38:57,638 --> 00:39:00,140 line:-1
我想指出在开发过程中


700
00:39:00,574 --> 00:39:03,410 line:-2
你可能想触发—
当你测试app的行为时


701
00:39:03,477 --> 00:39:04,778 line:-1
你可以再触发提示


702
00:39:05,279 --> 00:39:09,216 line:-2
并且你可以使用与你在左侧看到的
服务名称相同的服务名称


703
00:39:10,050 --> 00:39:11,785 line:-1
通过tccutil命令行工具


704
00:39:12,219 --> 00:39:15,322 line:-1
分别为受保护的资源重设提示状态


705
00:39:16,156 --> 00:39:17,291 line:-1
（总结）


706
00:39:17,724 --> 00:39:19,159 line:-2
之前
我们从Garrett那里了解了


707
00:39:19,226 --> 00:39:20,894 line:-1
关于Gatekeeper的改进


708
00:39:21,328 --> 00:39:24,164 line:-1
我们只讨论了一些…


709
00:39:25,065 --> 00:39:28,635 line:-2
macOS Catalina中
用户隐私权保护方面的改进


710
00:39:29,970 --> 00:39:32,339 line:-1
我想回顾一下


711
00:39:33,640 --> 00:39:36,577 line:-2
请记住一定要对你所发布的
所有软件都签名并公证


712
00:39:37,377 --> 00:39:40,414 line:-2
并且一旦被签署
请不要修改那些捆绑包


713
00:39:41,048 --> 00:39:42,716 line:-1
如果你确实需要修改捆绑包


714
00:39:43,050 --> 00:39:45,986 line:-1
请一定要把修改转换到另一个


715
00:39:46,320 --> 00:39:47,387 line:-1
也被签署了的捆绑包中


716
00:39:51,792 --> 00:39:54,661 line:-1
对于用户隐私权保护


717
00:39:55,229 --> 00:39:57,297 line:-1
请尝试尽可能地利用标准UI


718
00:39:57,598 --> 00:39:58,699 line:-1
一定要处理报错


719
00:39:59,032 --> 00:40:01,068 line:-1
API可能会返回


720
00:40:01,401 --> 00:40:04,938 line:-2
如果用户…抱歉
处理API可能会返回的任何报错


721
00:40:05,005 --> 00:40:06,340 line:-1
如果用户拒绝准许的话


722
00:40:06,907 --> 00:40:09,510 line:-1
请记住一旦用户授权你的app


723
00:40:09,576 --> 00:40:11,011 line:-1
访问他们的个人数据


724
00:40:11,445 --> 00:40:14,481 line:-1
保护他们隐私权的责任就转交给你了


725
00:40:14,815 --> 00:40:16,183 line:-1
因此请谨慎处理用户的数据


726
00:40:18,252 --> 00:40:19,720 line:-1
非常感谢你们 希望你们享受


727
00:40:19,786 --> 00:40:21,421 line:-1
本周WWDC余下的时光


728
00:40:21,488 --> 00:40:24,424 line:-2
演讲结束之后就有一场
关于安全性的实验室 欢迎大家参加


729
00:40:24,992 --> 00:40:28,562 line:-2
若你有关于macOS中的安全性或
其它隐私权或安全保护方面的疑问


730
00:40:28,996 --> 00:40:30,030 line:-1
非常感谢

