1
00:00:06,139 --> 00:00:09,943 line:0
（把iPad App引入Mac）


2
00:00:15,716 --> 00:00:16,884 line:-1
谢谢


3
00:00:20,187 --> 00:00:22,256 line:-2
欢迎大家参加演讲
很高兴能在这里看到你们


4
00:00:22,789 --> 00:00:24,091 line:-1
我叫Ali Ozer


5
00:00:24,157 --> 00:00:26,793 line:-2
稍后会有我的同事
Jake和Jason加入我


6
00:00:26,860 --> 00:00:29,463 line:-2
我们今天会介绍
把iPad app引入Mac


7
00:00:30,797 --> 00:00:32,064 line:-1
我们将举办两场演讲


8
00:00:32,131 --> 00:00:34,268 line:-2
在这第一场演讲中
我会介绍一些基本信息


9
00:00:34,902 --> 00:00:36,336 line:-1
关于这是什么技术


10
00:00:36,403 --> 00:00:39,239 line:-2
以及如何使用
哪些功能可以免费使用


11
00:00:39,506 --> 00:00:42,876 line:-2
还有你应该了解的一些
重要的API差异


12
00:00:43,510 --> 00:00:47,714 line:-2
第二场演讲是把iPad App
引入Mac提升到下一个层级


13
00:00:48,115 --> 00:00:49,216 line:-1
时间是在本周稍后一些时间


14
00:00:49,616 --> 00:00:50,884 line:-1
我们会介绍高级内容


15
00:00:51,385 --> 00:00:53,520 line:-2
比如让你的app成为一个
更好的Mac app


16
00:00:53,587 --> 00:00:56,356 line:-1
以及app发布的注意事项


17
00:00:58,025 --> 00:01:00,027 line:-2
那么到底什么是
把iPad app引入Mac呢？


18
00:01:00,661 --> 00:01:03,163 line:-1
嗯 它是一种可以让你


19
00:01:03,597 --> 00:01:06,900 line:-2
原生地在Mac上
重建并运行iPad app的方式


20
00:01:07,734 --> 00:01:08,836 line:-1
让我具体说一下


21
00:01:08,902 --> 00:01:10,037 line:-2
（原生地在Mac上重建
并运行iPad App）


22
00:01:10,671 --> 00:01:12,139 line:-1
Mac是一个稳健的开发平台


23
00:01:12,506 --> 00:01:14,608 line:-1
承载了各种各样的app


24
00:01:15,075 --> 00:01:16,777 line:-1
我们拥有强大的桌面app


25
00:01:17,277 --> 00:01:20,147 line:-1
基于网络的体验以及图形密集型游戏


26
00:01:20,681 --> 00:01:23,884 line:-1
并且这些体验都有特定的框架


27
00:01:23,951 --> 00:01:24,785 line:-1
用于支持它们


28
00:01:25,319 --> 00:01:26,453 line:-1
但我们漏掉了一个东西


29
00:01:26,787 --> 00:01:31,191 line:-2
就是UIKit
它是iOS app所使用的技术


30
00:01:33,060 --> 00:01:36,697 line:-2
把UIKit作为Mac上
其它框架的本地对等体


31
00:01:37,064 --> 00:01:39,633 line:-1
你就可以把iPad app


32
00:01:40,000 --> 00:01:42,102 line:-1
引入Mac并获得头等体验


33
00:01:43,103 --> 00:01:44,671 line:-1
让我们谈谈如何实现


34
00:01:47,107 --> 00:01:49,943 line:-1
我们有丰富的技术栈


35
00:01:50,244 --> 00:01:52,546 line:-1
在iOS上和macOS上共享


36
00:01:52,813 --> 00:01:54,715 line:-1
并且我们会尽可能地利用它


37
00:01:56,149 --> 00:01:58,886 line:-2
我们还引入了
Mac上不存在的iOS框架


38
00:01:59,253 --> 00:02:01,822 line:-1
并把它们完美地引入到Mac上


39
00:02:02,189 --> 00:02:05,092 line:-2
与Mac和基础结构以及
与Mac UI设计准则完美融合


40
00:02:05,893 --> 00:02:07,127 line:-1
最后但并不是最不重要的


41
00:02:07,561 --> 00:02:09,395 line:-1
我们把实现方式变简单了


42
00:02:10,497 --> 00:02:13,166 line:-2
我会讲前两点
然后Jake会上台来继续


43
00:02:13,233 --> 00:02:14,568 line:-1
演示并讨论第三个话题


44
00:02:14,635 --> 00:02:15,836 line:-2
（平衡我们的共享技术栈
整合OS框架）


45
00:02:15,903 --> 00:02:17,171 line:-2
（用XCODE为MAC
创建iPAD项目）


46
00:02:17,471 --> 00:02:19,873 line:-2
好的 那么让我来展示一下
我所说的技术栈是什么意思


47
00:02:20,240 --> 00:02:22,910 line:-2
这就是Mac的技术栈
我们有macOS app


48
00:02:23,510 --> 00:02:25,979 line:-1
它们创建于框架之上 UI框架


49
00:02:26,046 --> 00:02:28,348 line:-1
以及你在这里看到的低层级的框架


50
00:02:28,749 --> 00:02:30,617 line:-1
这些只是一些具有代表性的框架


51
00:02:30,684 --> 00:02:33,053 line:-2
我们 当然了
在技术栈中有几百个框架


52
00:02:33,687 --> 00:02:36,089 line:-1
除了框架 我们还有数据库


53
00:02:36,390 --> 00:02:39,226 line:-1
诸如用户的相册数据库、情境、


54
00:02:39,493 --> 00:02:40,761 line:-1
偏好等等之类的东西


55
00:02:41,261 --> 00:02:42,329 line:-1
现在有服务


56
00:02:42,396 --> 00:02:45,499 line:-1
包含诸如用于复制粘贴


57
00:02:45,966 --> 00:02:47,067 line:-1
和文件协调的剪贴板服务一样的东西


58
00:02:47,501 --> 00:02:50,003 line:-2
然后我们还有一个
爷爷级的服务Kernel


59
00:02:50,070 --> 00:02:51,438 line:-2
就是我们的
Darwin Kernel


60
00:02:52,272 --> 00:02:54,608 line:-1
现在iOS技术栈看起来很相似


61
00:02:54,942 --> 00:02:56,543 line:-1
在iOS上我们有iOS app


62
00:02:56,610 --> 00:03:00,280 line:-2
然后有框架栈
下面是数据库和服务栈


63
00:03:00,647 --> 00:03:02,382 line:-1
你可以从这里看到一些差异


64
00:03:02,449 --> 00:03:03,851 line:-1
我马上就会讲到这个


65
00:03:06,253 --> 00:03:09,656 line:-2
现在你们中有许多人还没有意识到
我们已经暂时可以


66
00:03:09,990 --> 00:03:13,694 line:-2
在Mac上的模拟器中
运行iOS app了


67
00:03:14,695 --> 00:03:17,397 line:-1
在模拟器自己的环境中运行的技术栈


68
00:03:17,931 --> 00:03:19,633 line:-1
与众不同


69
00:03:19,700 --> 00:03:23,003 line:-2
那么它有它自己的框架、
数据库和服务


70
00:03:23,971 --> 00:03:27,441 line:-1
模拟器的主要目标是复制iOS环境


71
00:03:27,808 --> 00:03:32,346 line:-2
以便你调试和测试iOS app
好像它们在iOS上运行一样


72
00:03:33,080 --> 00:03:34,781 line:-1
在这方面模拟器做得不错


73
00:03:35,616 --> 00:03:39,152 line:-1
然而与Mac用户体验完美整合


74
00:03:39,486 --> 00:03:41,054 line:-1
并不是模拟器的目标


75
00:03:41,522 --> 00:03:44,191 line:-2
它的目标也不是以最优方式
为终端用户运行


76
00:03:45,959 --> 00:03:47,728 line:-1
因此把iOS app


77
00:03:48,161 --> 00:03:49,363 line:-1
原生地引入Mac中的一种方式是


78
00:03:49,796 --> 00:03:52,165 line:-1
我们在Mac上增强了框架


79
00:03:53,000 --> 00:03:56,603 line:-2
既支持AppKit app
又支持UIKit app的需要


80
00:03:58,338 --> 00:04:01,408 line:-2
我们结合并统一了
在两个平台上都存在的


81
00:04:02,009 --> 00:04:03,043 line:-1
低层级的框架的功能


82
00:04:03,377 --> 00:04:06,580 line:-2
框架比如CoreGraphics、
Foundation、libSystem


83
00:04:07,114 --> 00:04:09,550 line:-2
用于创建单一拷贝
可以服务全部两个技术栈


84
00:04:11,752 --> 00:04:14,555 line:-2
现在请注意在这张图中
我们并没有统一


85
00:04:14,821 --> 00:04:17,457 line:-2
依赖于UIKit
和AppKit的框架


86
00:04:17,925 --> 00:04:19,226 line:-1
我要稍微谈谈这一点


87
00:04:20,160 --> 00:04:22,062 line:-1
同时请注意那边的ARKit


88
00:04:22,462 --> 00:04:25,232 line:-1
因为Mac上没有增强现实功能


89
00:04:25,299 --> 00:04:26,767 line:-1
因此我们没有引入那个框架


90
00:04:27,501 --> 00:04:28,468 line:-1
那么好了


91
00:04:28,535 --> 00:04:30,704 line:-1
不要误解我们 我们喜欢ARKit


92
00:04:31,538 --> 00:04:32,639 line:-1
只是不能在Mac上用


93
00:04:33,307 --> 00:04:35,876 line:-2
最后是中间的
UserNotifications


94
00:04:36,176 --> 00:04:39,580 line:-1
我们不仅把这个框架引入了Mac


95
00:04:40,113 --> 00:04:42,282 line:-2
我们还在Mac给它做了公共API
这只是其中一个例子


96
00:04:42,649 --> 00:04:44,017 line:-1
去年我们就这样做了


97
00:04:44,484 --> 00:04:46,587 line:-1
在这个技术刚出来时


98
00:04:46,854 --> 00:04:48,655 line:-1
我们就在众目睽睽之下实现了


99
00:04:49,323 --> 00:04:51,458 line:-1
并且我们还统一了服务和数据库


100
00:04:51,525 --> 00:04:54,228 line:-2
Photos和Contacts
以及Preferences


101
00:04:54,294 --> 00:04:56,997 line:-2
仅一次复制就既能用于AppKit
app又能用于UIKit app


102
00:04:57,364 --> 00:04:58,232 line:-1
对于服务也一样


103
00:04:58,298 --> 00:05:01,101 line:-2
只有一种复制粘贴服务
一种文件协调服务


104
00:05:01,168 --> 00:05:02,002 line:-1
等等


105
00:05:02,436 --> 00:05:05,973 line:-2
这就是Mac上
iPad app的环境


106
00:05:06,640 --> 00:05:09,476 line:-2
看起来与AppKit app的
环境很像


107
00:05:09,743 --> 00:05:12,646 line:-1
并具有原生性能特征


108
00:05:14,181 --> 00:05:15,549 line:-1
在离开这个话题之前


109
00:05:15,616 --> 00:05:18,752 line:-2
让我再谈谈AppKit
和UIKit的框架


110
00:05:19,853 --> 00:05:21,822 line:-2
当然了 并不只是
WebKit和SceneKit


111
00:05:21,889 --> 00:05:23,290 line:-1
还有许多其它框架


112
00:05:23,724 --> 00:05:25,325 line:-1
我要给你们展示其中两个


113
00:05:25,792 --> 00:05:27,060 line:-1
就是这样


114
00:05:27,594 --> 00:05:29,830 line:-2
因为AppKit
和UIKit不统一


115
00:05:29,897 --> 00:05:32,733 line:-1
依赖于它们自身的框架也保持独立


116
00:05:32,799 --> 00:05:35,035 line:-1
即使字面名称一样


117
00:05:35,102 --> 00:05:37,037 line:-2
比如两个WebKits
两个SceneKits等等


118
00:05:37,571 --> 00:05:38,805 line:-1
原因有很多


119
00:05:39,940 --> 00:05:43,710 line:-2
主要原因是那些类不一样
比如NSView和UIView


120
00:05:43,977 --> 00:05:47,314 line:-1
它们还拥有自己的行为和支持结构


121
00:05:47,714 --> 00:05:51,418 line:-1
因此我们反过来在创建这些类时


122
00:05:51,485 --> 00:05:52,853 line:-1
类的声明和实施也不一样


123
00:05:53,320 --> 00:05:56,857 line:-1
那么例如这是MKMapView


124
00:05:57,491 --> 00:05:59,760 line:-2
在AppKit
和UIKit中的声明


125
00:05:59,826 --> 00:06:02,663 line:-2
你可以看到这些实际上是
不兼容的定义


126
00:06:04,431 --> 00:06:07,601 line:-2
因此我们在系统中其实是
拥有两个版本的框架


127
00:06:07,868 --> 00:06:10,671 line:-1
在开发者SDK中也是


128
00:06:11,171 --> 00:06:12,906 line:-1
然而这并不是你需要担心的东西


129
00:06:13,240 --> 00:06:15,843 line:-2
Static Linker和
Dynamic Loader


130
00:06:15,909 --> 00:06:19,046 line:-1
会替你实现


131
00:06:19,112 --> 00:06:20,080 line:-1
它们会查找这些框架的正确版本


132
00:06:20,614 --> 00:06:23,817 line:-2
无论是在创建时的链接中
或是在运行时的加载时


133
00:06:25,719 --> 00:06:28,755 line:-2
那么换个话题
谈谈我们为什么这么做


134
00:06:29,056 --> 00:06:30,791 line:-2
我们为什么要把
UIKit引入Mac？


135
00:06:32,359 --> 00:06:33,927 line:-1
嗯 我的意思是这只是部分原因


136
00:06:33,994 --> 00:06:37,564 line:-2
你知道的
我刚刚只展示了你们所创建的


137
00:06:37,631 --> 00:06:38,966 line:-1
许许多多iPad app中的一些


138
00:06:39,733 --> 00:06:42,002 line:-2
我们认为如果它们能在Mac上使用
一定会很棒


139
00:06:42,936 --> 00:06:45,138 line:-1
并且还有无数的Mac用户


140
00:06:45,472 --> 00:06:47,207 line:-2
他们中有许多人都对你们的app
很感兴趣


141
00:06:47,741 --> 00:06:50,244 line:-2
因此这种技术为他们提供了
获取这些app的途径


142
00:06:50,310 --> 00:06:51,845 line:-1
也为你们创造了新的机遇


143
00:06:53,013 --> 00:06:54,181 line:-2
（何时考虑向MAC
引入iPAD APP）


144
00:06:54,248 --> 00:06:55,349 line:-1
或你可能在想


145
00:06:55,415 --> 00:06:58,585 line:-1
这种技术是否适合你的app


146
00:06:58,919 --> 00:07:00,888 line:-1
这个问题很好


147
00:07:03,190 --> 00:07:06,593 line:-2
那么假如你有一个iPad app
并且你没有Mac app


148
00:07:06,960 --> 00:07:09,563 line:-2
并且你想把app的功能
引入到Mac上


149
00:07:10,130 --> 00:07:11,398 line:-1
嗯 这是个很好的例子


150
00:07:11,465 --> 00:07:13,300 line:-1
正好可以考虑使用这种技术


151
00:07:13,667 --> 00:07:14,935 line:-1
其中一种情况是


152
00:07:15,202 --> 00:07:16,403 line:-1
你可能有一个iPad app


153
00:07:16,470 --> 00:07:19,473 line:-1
但也许在台式机上是一种网页体验


154
00:07:20,507 --> 00:07:22,209 line:-1
现在web界面可能会非常棒


155
00:07:22,576 --> 00:07:26,213 line:-2
但它们不是原生的 你知道的
原生app有菜单栏、命令键、


156
00:07:26,280 --> 00:07:27,681 line:-1
可以使用硬件功能、


157
00:07:27,748 --> 00:07:31,018 line:-2
有稳健的本地存储等等
如此多的完整体验


158
00:07:32,286 --> 00:07:34,621 line:-2
另一种情况就是
你可能有一个老版的Mac app


159
00:07:35,255 --> 00:07:39,193 line:-2
但也许你的iPad app
增加了一些新功能


160
00:07:40,127 --> 00:07:41,395 line:-1
这两者并没有保持同步


161
00:07:41,728 --> 00:07:43,931 line:-2
因此这可能是让你的Mac app
面目一新的一种方式


162
00:07:45,265 --> 00:07:48,735 line:-1
还有一种情况也许是替换一个


163
00:07:48,802 --> 00:07:53,207 line:-2
使用了非原生、非最优
第三方端口框架的Mac app


164
00:07:53,707 --> 00:07:55,075 line:-1
如果你的iPad app是原生的


165
00:07:55,442 --> 00:07:57,744 line:-2
这可能是一个使你的Mac app
更新换代的好方式


166
00:08:00,514 --> 00:08:02,616 line:-1
然而 有一件事需要记住


167
00:08:03,884 --> 00:08:05,919 line:-2
如果你已经在Mac上有了一个
AppKit app


168
00:08:06,320 --> 00:08:08,522 line:-1
并且在Mac上维护良好


169
00:08:08,589 --> 00:08:10,524 line:-1
并随着iOS版本进行了升级


170
00:08:10,891 --> 00:08:13,193 line:-1
那么你其实就不需要考虑这个技术了


171
00:08:13,260 --> 00:08:14,728 line:-1
你可以继续使用AppKit


172
00:08:15,362 --> 00:08:18,632 line:-2
AppKit是最好的框架
提供完整的API集合


173
00:08:18,699 --> 00:08:20,000 line:-1
用于开发Mac app


174
00:08:20,334 --> 00:08:23,237 line:-1
事实上它可以提供完整的API集合


175
00:08:23,704 --> 00:08:25,572 line:-1
比Mac上提供的这种技术完整的多


176
00:08:28,108 --> 00:08:28,976 line:-1
那么其中


177
00:08:29,042 --> 00:08:31,912 line:-1
还有一些app并不适用这种技术


178
00:08:32,846 --> 00:08:34,347 line:-2
其中一个例子就是
iPhone app


179
00:08:34,414 --> 00:08:36,884 line:-2
iPhone app
针对小屏幕进行了优化


180
00:08:36,950 --> 00:08:39,253 line:-1
因此它们会利用小屏幕的优势


181
00:08:39,785 --> 00:08:41,421 line:-2
我们非常希望你们
先做一个iPad app


182
00:08:41,488 --> 00:08:44,091 line:-1
可以充分利用大屏幕的优势


183
00:08:44,157 --> 00:08:45,492 line:-1
在你把它引入Mac之前


184
00:08:46,760 --> 00:08:49,630 line:-2
另一种情况是
围绕移动功能创建的app


185
00:08:50,664 --> 00:08:53,267 line:-2
之前我告诉过你
ARKit在Mac上不可用


186
00:08:53,667 --> 00:08:55,435 line:-1
如果你的app是基于ARKit的


187
00:08:55,502 --> 00:08:57,371 line:-2
那么它在Mac上
就不会运行得那么好


188
00:08:58,038 --> 00:09:01,175 line:-1
但如果增强现实功能不是主要功能


189
00:09:01,808 --> 00:09:03,944 line:-1
那引入app仍然可能有意义


190
00:09:04,211 --> 00:09:06,580 line:-1
但条件是在Mac上移除那个功能


191
00:09:08,649 --> 00:09:12,252 line:-2
因此在这个舞台上
在我邀请Jake上台来演示之前


192
00:09:12,653 --> 00:09:13,987 line:-1
让我提一下高水平的目标


193
00:09:14,054 --> 00:09:16,356 line:-2
帮助我们设计和提交
这种技术的高水平目标


194
00:09:18,025 --> 00:09:20,260 line:-1
我们希望你们容易上手


195
00:09:21,061 --> 00:09:22,296 line:-1
我们有一个复选框


196
00:09:22,629 --> 00:09:24,965 line:-2
你昨天已经看到了
并且你很快会再看到它


197
00:09:26,066 --> 00:09:30,537 line:-1
我们希望你们能使用单一源代码库


198
00:09:30,938 --> 00:09:34,041 line:-2
单一源代码库可以让你在开发时
不对代码分区


199
00:09:34,441 --> 00:09:37,077 line:-1
并支持同时推进


200
00:09:37,144 --> 00:09:39,046 line:-1
app的iPad和Mac版本


201
00:09:40,314 --> 00:09:43,183 line:-2
我想让你们在心里把你的app
看作iPad app


202
00:09:44,484 --> 00:09:46,820 line:-2
就跟你把它们作为
iOS SDK开发一样


203
00:09:46,887 --> 00:09:50,157 line:-1
并且我们希望你们思考—


204
00:09:50,224 --> 00:09:51,124 line:-1
继续以iOS SDK和概念来思考


205
00:09:51,959 --> 00:09:54,795 line:-1
最后我们希望在外部


206
00:09:54,862 --> 00:09:55,696 line:-1
app可以成为一个Mac app


207
00:09:56,029 --> 00:09:59,266 line:-2
因此对于用户来说
这是一种一流的Mac体验


208
00:10:01,201 --> 00:10:03,337 line:-2
好的 我说完了
让我邀请Jake上台来


209
00:10:03,403 --> 00:10:04,671 line:-1
谈谈如何着手去做


210
00:10:10,811 --> 00:10:12,012 line:-1
大家下午好


211
00:10:12,546 --> 00:10:15,249 line:-2
现在你已经了解了一些关于把
iPad app引入Mac的信息


212
00:10:15,549 --> 00:10:17,784 line:-1
我要给大家介绍


213
00:10:17,851 --> 00:10:18,685 line:-2
如何使用Xcode
把app引入到Mac


214
00:10:19,419 --> 00:10:22,389 line:-2
一般来说 你必须要学习一个
完全不同的UI框架


215
00:10:22,456 --> 00:10:23,957 line:-1
并从零开始写一个全新的app


216
00:10:24,491 --> 00:10:27,427 line:-2
但通过Xcode 11
我们可以让你重复使用


217
00:10:27,494 --> 00:10:29,463 line:-1
你当前的项目和源代码


218
00:10:29,997 --> 00:10:30,964 line:-1
让我们来试试


219
00:10:35,669 --> 00:10:37,471 line:-1
（着手去做）


220
00:10:42,242 --> 00:10:45,145 line:-2
那么在这里我有一个
关于菜谱管理的小iPad app


221
00:10:45,212 --> 00:10:46,280 line:-1
是我之前准备好的


222
00:10:47,181 --> 00:10:49,883 line:-2
一开始 我们要在Xcode中
打开我们的项目…


223
00:10:52,986 --> 00:10:55,222 line:-1
并勾选部署信息


224
00:10:55,789 --> 00:10:57,658 line:-1
下边的Mac复选框


225
00:10:58,592 --> 00:11:01,595 line:-2
现在请注意只有你的app
支持iPad时这个复选框才可用


226
00:11:02,696 --> 00:11:04,865 line:-1
那么我要继续并点击这个复选框


227
00:11:06,200 --> 00:11:07,835 line:-1
我们将看到弹出一个sheet


228
00:11:07,901 --> 00:11:10,704 line:-2
那会告诉你Xcode
正在对你的项目进行修改


229
00:11:11,471 --> 00:11:12,973 line:-1
我要继续并点击启动


230
00:11:15,008 --> 00:11:17,010 line:-1
现在让我们看看它会做什么


231
00:11:17,678 --> 00:11:19,580 line:-2
那么你首先会注意到的
其中一件事就是


232
00:11:20,113 --> 00:11:23,450 line:-2
Scheme Selector中
运行了一个新的My Mac


233
00:11:23,917 --> 00:11:27,321 line:-2
这就允许你针对Mac创建、
调试和测试app


234
00:11:30,324 --> 00:11:34,328 line:-2
你还会看到在捆绑标识符字段下边
有一个新标签


235
00:11:34,761 --> 00:11:37,865 line:-2
使用这种技术引入到Mac的
所有iPad app和app扩展


236
00:11:37,931 --> 00:11:41,869 line:-2
都将自动默认获得一个
新的捆绑标识符


237
00:11:41,935 --> 00:11:43,337 line:-1
它使用了一个特殊的前缀


238
00:11:45,138 --> 00:11:47,474 line:-1
如果你的app中有硬编码的引用


239
00:11:47,541 --> 00:11:49,209 line:-1
或它的app扩展捆绑了ID


240
00:11:49,543 --> 00:11:52,012 line:-2
你可能需要做一些协同修改
以解决那个问题


241
00:11:53,046 --> 00:11:55,782 line:-2
你可以在我们的下一场演讲中
了解有关于此以及它如何影响签名、


242
00:11:55,849 --> 00:11:58,318 line:-1
配置和分配的更多信息


243
00:11:58,385 --> 00:12:00,721 line:-2
把iPad App引入Mac
提升到下一个层级


244
00:12:01,622 --> 00:12:03,824 line:-1
接下来让我们谈谈功能


245
00:12:04,658 --> 00:12:08,128 line:-2
在iOS上 app需要
在它们的Info.plist中


246
00:12:08,195 --> 00:12:09,530 line:-1
指定用法描述字符串


247
00:12:09,830 --> 00:12:12,599 line:-1
从而获取某些受保护的系统资源


248
00:12:12,666 --> 00:12:14,668 line:-1
比如摄像头或用户的地理位置


249
00:12:15,636 --> 00:12:17,571 line:-1
Xcode将使用这些信息


250
00:12:17,638 --> 00:12:20,541 line:-2
向你的Mac app中自动添加
同等的权利


251
00:12:20,607 --> 00:12:23,310 line:-1
从而使你获得与iOS上同样的功能


252
00:12:24,411 --> 00:12:25,379 line:-1
比如


253
00:12:26,046 --> 00:12:30,317 line:-2
iOS app可以默认进行
外部网络连接


254
00:12:30,617 --> 00:12:32,419 line:-1
而Mac app需要授权


255
00:12:33,620 --> 00:12:35,556 line:-1
如果我们进入签名和功能编辑器


256
00:12:36,089 --> 00:12:39,826 line:-2
我们可以看到Xcode
自动添加了网络客户授权


257
00:12:40,194 --> 00:12:43,297 line:-2
以及一些其它授权
根据我们app的


258
00:12:43,363 --> 00:12:44,865 line:-2
Info.plist中的
用法描述字符串


259
00:12:48,335 --> 00:12:50,838 line:-1
接下来是框架和app扩展


260
00:12:51,772 --> 00:12:55,108 line:-2
因为在macOS上还支持
大多数iOS框架


261
00:12:55,409 --> 00:12:57,778 line:-1
但两个SDK之间仍有差异


262
00:12:58,879 --> 00:13:01,715 line:-1
我主要讲Xcode项目配置


263
00:13:02,049 --> 00:13:05,018 line:-1
稍后Jason会讲API差异


264
00:13:06,486 --> 00:13:08,455 line:-1
当Xcode更新你的项目时


265
00:13:09,223 --> 00:13:12,492 line:-2
它会自动从Mac版中
排除所有不可用的内容


266
00:13:12,860 --> 00:13:15,429 line:-1
包含不可用的系统、SDK框架、


267
00:13:15,495 --> 00:13:18,665 line:-2
不可用的app扩展类型
以及Apple Watch内容


268
00:13:19,833 --> 00:13:21,368 line:-1
如果我们返回到通用标签…


269
00:13:22,870 --> 00:13:25,873 line:-2
你可以看到在框架库中
和嵌入内容部分…


270
00:13:26,607 --> 00:13:29,543 line:-2
Xcode已经为某些依赖关系
完成了这个操作


271
00:13:30,110 --> 00:13:33,981 line:-2
ARKit和Watch app
都被标记为仅适用于iOS


272
00:13:37,851 --> 00:13:40,487 line:-1
让我们继续并尝试创建Mac版


273
00:13:43,657 --> 00:13:45,225 line:-1
让我们看看我们是否有报错


274
00:13:46,860 --> 00:13:49,630 line:-2
这个报错是由于
其中一个依赖型框架不兼容


275
00:13:50,531 --> 00:13:53,233 line:-1
因为它是针对iOS模拟器创建的


276
00:13:54,468 --> 00:13:58,005 line:-2
你可能在想
iOS模拟器和macOS框架


277
00:13:58,071 --> 00:13:59,306 line:-1
都适用于x86


278
00:13:59,640 --> 00:14:02,209 line:-2
你能在Mac版iPad app中
重新使用它们吗？


279
00:14:02,843 --> 00:14:04,411 line:-1
嗯 答案是不能


280
00:14:05,479 --> 00:14:08,081 line:-2
对于你可能拥有的任何
预编译二进制库来说


281
00:14:08,515 --> 00:14:09,917 line:-1
你都需要联系供应商


282
00:14:09,983 --> 00:14:11,785 line:-2
以获得一个针对Mac环境下
的iPad app


283
00:14:12,119 --> 00:14:13,987 line:-1
进行了特别编译的版本


284
00:14:14,688 --> 00:14:16,757 line:-1
从源代码构建框架是项目的一部分


285
00:14:16,823 --> 00:14:19,693 line:-1
另一部分是默认为Mac


286
00:14:19,760 --> 00:14:20,694 line:-1
进行自动配置


287
00:14:24,798 --> 00:14:27,334 line:-1
你可能会考虑使用平台下拉菜单


288
00:14:27,401 --> 00:14:30,137 line:-1
这里在框架库和潜入内容部分


289
00:14:31,004 --> 00:14:33,473 line:-1
排除了不兼容Mac版的库


290
00:14:34,007 --> 00:14:35,943 line:-1
除非你可以获取兼容版本


291
00:14:36,310 --> 00:14:39,780 line:-2
或者如果它提供的功能
不适合Mac app


292
00:14:40,681 --> 00:14:43,617 line:-2
然而如果你依赖于框架来实现
主要功能


293
00:14:43,884 --> 00:14:46,687 line:-1
你最好等着供应商更新库


294
00:14:47,020 --> 00:14:48,255 line:-1
在你报告给Mac之前


295
00:14:51,225 --> 00:14:52,359 line:-1
在这种情况下


296
00:14:52,426 --> 00:14:55,395 line:-2
我恰好有这个库的
一个更新的可用的版本


297
00:14:56,263 --> 00:14:58,065 line:-1
因此我要继续并把它添加到项目中


298
00:14:59,800 --> 00:15:01,969 line:-1
首先我要删除现有框架


299
00:15:04,371 --> 00:15:06,206 line:-1
现在我要继续并拖入新框架


300
00:15:09,676 --> 00:15:10,611 line:-1
现在你可能会注意到的第一件事


301
00:15:10,677 --> 00:15:12,779 line:-1
就是这不是一个常规的框架


302
00:15:14,248 --> 00:15:17,518 line:-1
更新的库是作为XC框架提交的


303
00:15:17,851 --> 00:15:19,720 line:-1
它是Xcode 11中的新功能


304
00:15:19,786 --> 00:15:23,357 line:-2
允许库的开发人员
从多个平台中把库打包到


305
00:15:23,724 --> 00:15:27,060 line:-2
你能在Xcode项目中使用的
单一分配的捆绑包中


306
00:15:28,295 --> 00:15:30,964 line:-2
把app引入Mac时
不需要XC框架


307
00:15:31,598 --> 00:15:33,033 line:-1
但它们使


308
00:15:33,567 --> 00:15:36,003 line:-1
跨平台管理依赖关系变得更方便


309
00:15:37,371 --> 00:15:39,806 line:-2
你可以在Swift中的
二进制框架中了解更多信息


310
00:15:40,374 --> 00:15:43,310 line:-2
请注意它们也适用于
Objective-C


311
00:15:46,980 --> 00:15:49,082 line:-2
接下来把你的app
引入到Mac的最重要的一个方面


312
00:15:49,149 --> 00:15:51,785 line:-1
当然就是你的代码


313
00:15:52,686 --> 00:15:55,622 line:-1
我刚讲了Xcode如何自动排除


314
00:15:55,689 --> 00:15:57,591 line:-1
一些不可用的框架


315
00:15:58,258 --> 00:16:00,627 line:-1
但你仍然需要对源代码做一些调整


316
00:16:00,694 --> 00:16:03,463 line:-1
以便编译出


317
00:16:03,530 --> 00:16:04,431 line:-1
对那些框架所提供的API的引用


318
00:16:04,731 --> 00:16:07,835 line:-1
那可能由于硬件不同


319
00:16:07,901 --> 00:16:09,436 line:-1
或用户体验不同而变得不可用


320
00:16:12,005 --> 00:16:13,574 line:-1
你可以有条件地在Swift中


321
00:16:13,640 --> 00:16:16,143 line:-1
使用目标平台环境


322
00:16:16,577 --> 00:16:19,279 line:-2
或Objective-C中的
目标OS宏命令编译你的代码


323
00:16:20,881 --> 00:16:22,382 line:-1
现在让我们来看一下


324
00:16:22,783 --> 00:16:24,384 line:-1
我要继续并尝试再次创建


325
00:16:27,454 --> 00:16:29,957 line:-1
我们可以看到ARKit不可用


326
00:16:31,658 --> 00:16:32,726 line:-1
很好


327
00:16:33,160 --> 00:16:37,764 line:-2
那么我想添加一种
在增强现实中预览菜谱的方式


328
00:16:38,365 --> 00:16:40,667 line:-2
如果没有那种效果
我们很可能就会离开


329
00:16:41,068 --> 00:16:44,638 line:-2
食物的最好体验是在AR中
非常真实


330
00:16:44,705 --> 00:16:46,907 line:-1
那么让我们继续并把它注掉


331
00:16:48,275 --> 00:16:50,878 line:-2
那么我们已经拥有一些示例代码
我们可以用于把它注掉


332
00:16:53,180 --> 00:16:54,882 line:-2
我要继续并
#ifdef ARKit


333
00:16:57,751 --> 00:17:00,287 line:-1
我还要#ifdef相应的API


334
00:17:02,823 --> 00:17:04,758 line:-1
好的 让我们再一次尝试创建它


335
00:17:07,294 --> 00:17:08,729 line:-1
另一个报错 好的


336
00:17:09,530 --> 00:17:11,498 line:-1
那么这一次…


337
00:17:13,165 --> 00:17:16,170 line:-2
看起来StoreKit框架
在Mac中不可用


338
00:17:16,737 --> 00:17:20,273 line:-2
但我们尝试
在这里使用的那个API却可用


339
00:17:21,040 --> 00:17:24,077 line:-2
现在我不确定我的app营销团队
正在尝试做什么


340
00:17:24,144 --> 00:17:26,246 line:-1
但很可能不那么重要


341
00:17:26,313 --> 00:17:29,049 line:-1
我把这个也#if掉


342
00:17:29,850 --> 00:17:30,851 line:-1
好的


343
00:17:31,919 --> 00:17:36,890 line:-2
我们可以把它留给他们来处理…
TODO:


344
00:17:37,324 --> 00:17:38,525 line:-1
还有别的吗？


345
00:17:39,326 --> 00:17:41,461 line:-1
好的 很好


346
00:17:42,396 --> 00:17:44,731 line:-1
那么此时此刻 我可以运行app了


347
00:17:45,465 --> 00:17:46,934 line:-1
但在此之前


348
00:17:47,000 --> 00:17:49,770 line:-2
让我们思考一个可对Mac app
做的一个很关键的改善


349
00:17:50,838 --> 00:17:55,275 line:-2
默认情况下UIKit app将用
来自iPad app的图标


350
00:17:55,909 --> 00:17:57,311 line:-1
同样的圆角设计


351
00:17:58,378 --> 00:18:00,514 line:-2
正如你在这里所看到的
这个漂亮的小点心


352
00:18:01,548 --> 00:18:02,783 line:-1
但Mac app的图标


353
00:18:03,050 --> 00:18:05,185 line:-1
一般都有漂亮而丰富的细节


354
00:18:05,252 --> 00:18:07,654 line:-1
尺寸最大可以达到512点


355
00:18:08,155 --> 00:18:11,058 line:-2
并利用了透明度
更有设计性和灵活性


356
00:18:12,292 --> 00:18:14,294 line:-2
给你的app自定义一个
很棒的Mac图标


357
00:18:14,361 --> 00:18:15,462 line:-1
真的会帮助它脱颖而出


358
00:18:15,863 --> 00:18:20,000 line:-2
你可以从下面的演讲中
了解关于设计的更多信息


359
00:18:20,067 --> 00:18:22,236 line:-2
“关于iOS和macOS设计
的新功能”


360
00:18:24,037 --> 00:18:25,973 line:-1
为了添加Mac专用图标


361
00:18:26,940 --> 00:18:30,777 line:-2
我们想导航到Xcode中的
资产目录编辑器


362
00:18:31,845 --> 00:18:33,714 line:-1
那么在这里选择我的资产目录


363
00:18:35,215 --> 00:18:37,050 line:-1
我要选择App图标资源


364
00:18:39,453 --> 00:18:40,954 line:-1
进入监测器


365
00:18:43,190 --> 00:18:44,858 line:-1
并勾选Mac复选框


366
00:18:44,925 --> 00:18:46,126 line:-1
显示新插入点


367
00:18:47,728 --> 00:18:49,930 line:-1
然后你只需拖入新图标即可


368
00:18:50,864 --> 00:18:52,566 line:-1
我要继续并使用一个


369
00:18:52,633 --> 00:18:53,800 line:-1
我之前准备好的图标集合


370
00:18:55,502 --> 00:18:56,737 line:-1
我要继续并拖入


371
00:18:58,739 --> 00:18:59,806 line:-1
哎呦


372
00:19:01,575 --> 00:19:02,576 line:-1
好了


373
00:19:04,011 --> 00:19:06,747 line:-2
好的 你可以看到我们得到了一个
很棒的点心图标


374
00:19:08,615 --> 00:19:11,318 line:-1
那么让我们继续再做一次


375
00:19:11,718 --> 00:19:12,920 line:-1
我要继续并再创建一次


376
00:19:13,787 --> 00:19:15,155 line:-1
这可能要花点儿时间


377
00:19:15,222 --> 00:19:18,058 line:-2
因为我们已经从为iOS创建
切换成了为Mac创建


378
00:19:18,125 --> 00:19:20,294 line:-1
它需要重新创建所有的源代码


379
00:19:20,360 --> 00:19:21,828 line:-1
和所有的资源


380
00:19:24,364 --> 00:19:25,699 line:-1
我们给它一点儿时间


381
00:19:27,000 --> 00:19:30,637 line:-1
我们已经成功创建并运行了Mac版


382
00:19:31,471 --> 00:19:33,440 line:-2
并且你可以看到我们已经有了
—哦 谢谢大家


383
00:19:37,377 --> 00:19:39,079 line:-2
并且你可以看到
我们已经有了标题栏


384
00:19:39,580 --> 00:19:41,148 line:-1
我们有窗口信号灯


385
00:19:41,582 --> 00:19:45,252 line:-1
我们有菜单、可调整大小的窗口


386
00:19:45,986 --> 00:19:48,655 line:-1
当然了 还有漂亮的Mac点心图标


387
00:19:49,923 --> 00:19:50,858 line:-1
正如你所期待的那样


388
00:19:52,292 --> 00:19:55,495 line:-1
一旦完成


389
00:19:55,963 --> 00:19:59,199 line:-2
你可以在Xcode中点击
产品存档菜单项


390
00:19:59,266 --> 00:20:01,134 line:-1
创建一个存档并打开管理器


391
00:20:01,869 --> 00:20:04,204 line:-2
然后你就可以发布到
Mac App Store


392
00:20:04,271 --> 00:20:06,740 line:-1
或使用开发者ID独立地发布


393
00:20:09,109 --> 00:20:12,513 line:-2
那么这就是Xcode 11
如何帮助你把iPad app


394
00:20:12,579 --> 00:20:13,413 line:-1
引入到Mac


395
00:20:14,481 --> 00:20:16,483 line:-1
现在我要邀请Ali返回舞台


396
00:20:16,850 --> 00:20:19,453 line:-2
他会告诉你更多
关于改善用户体验的信息


397
00:20:19,520 --> 00:20:20,487 line:-1
你都可以免费使用


398
00:20:26,026 --> 00:20:28,929 line:-2
好的 那么现在我想谈谈
有哪些免费功能


399
00:20:29,429 --> 00:20:30,898 line:-1
我要讲一下…


400
00:20:31,198 --> 00:20:32,733 line:-1
你的免费午餐


401
00:20:33,166 --> 00:20:35,802 line:-2
但你在UIKit中
为Mac app得到了什么


402
00:20:36,303 --> 00:20:38,205 line:-1
有大量...老实说


403
00:20:38,272 --> 00:20:39,106 line:-1
你获得了大量免费的功能


404
00:20:39,339 --> 00:20:41,675 line:-1
整个框架栈的大部分


405
00:20:41,742 --> 00:20:43,744 line:-1
还有我刚才展示给你的数据库和服务


406
00:20:44,011 --> 00:20:46,246 line:-2
都会自动应用到
你的Mac app中


407
00:20:46,613 --> 00:20:48,315 line:-1
但在这里我想强调一些东西


408
00:20:48,382 --> 00:20:49,650 line:-1
它们不仅仅是免费的


409
00:20:50,017 --> 00:20:53,287 line:-1
还会自动映像到Mac范例


410
00:20:53,353 --> 00:20:54,621 line:-1
并按Mac的方式来实现


411
00:20:55,289 --> 00:20:57,991 line:-2
那么让我们首先看一下 Jake
所使用的那个美味的菜谱app


412
00:20:58,058 --> 00:20:59,126 line:-1
（免费获得默认菜单栏）


413
00:20:59,193 --> 00:21:00,294 line:-1
那么正如你在演示中所看到的那样


414
00:21:00,561 --> 00:21:01,929 line:-1
你得到了默认菜单栏


415
00:21:02,262 --> 00:21:04,398 line:-2
app有一个默认的
漂亮的功能性菜单栏


416
00:21:04,464 --> 00:21:07,167 line:-1
拥有大量Mac用户所期待的菜单项


417
00:21:09,469 --> 00:21:10,737 line:-1
接下来得到了窗口管理


418
00:21:10,804 --> 00:21:14,208 line:-2
这包括比如重调窗口尺寸
全屏、分屏


419
00:21:14,541 --> 00:21:16,877 line:-2
以及我们亲切地称为
窗口信号灯的功能


420
00:21:16,944 --> 00:21:18,679 line:-1
在标题栏中有三个按钮


421
00:21:19,279 --> 00:21:20,614 line:-1
还要指出一点…


422
00:21:22,015 --> 00:21:23,884 line:-1
如果你的iPad恰好在附近


423
00:21:24,218 --> 00:21:26,420 line:-1
你可以在iPad上显示


424
00:21:26,486 --> 00:21:28,355 line:-1
Mac窗口中的iPad app


425
00:21:33,694 --> 00:21:35,395 line:-1
自动适用暗黑模式


426
00:21:36,630 --> 00:21:38,899 line:-1
如果你再进一步并采用任意新API


427
00:21:38,966 --> 00:21:40,901 line:-2
让你的app成为一个
更好的iOS暗黑模式app


428
00:21:40,968 --> 00:21:42,836 line:-1
那些也将会被自动迁移过来


429
00:21:43,704 --> 00:21:46,707 line:-1
滚动条和滚动在Mac上也没问题


430
00:21:47,207 --> 00:21:49,343 line:-1
进行了映像以覆盖滚动条功能


431
00:21:50,711 --> 00:21:52,813 line:-1
当窗口不活跃时也能使用滚动


432
00:21:52,880 --> 00:21:55,182 line:-1
当然了 那是用户对Mac的期待


433
00:21:55,849 --> 00:21:56,917 line:-1
通过手势滚动


434
00:21:57,885 --> 00:22:00,654 line:-1
如果用户让滚动条一直显示


435
00:22:00,721 --> 00:22:04,091 line:-1
那也会自动应用在你的app中


436
00:22:05,792 --> 00:22:07,027 line:-1
现在让我来谈谈设置


437
00:22:07,361 --> 00:22:09,129 line:-1
我们的菜谱app没有任何设置


438
00:22:09,730 --> 00:22:11,965 line:-2
因此我要给你演示一个
语音备忘录app


439
00:22:12,966 --> 00:22:15,269 line:-1
在iOS上 app指定设置捆绑包


440
00:22:15,536 --> 00:22:17,771 line:-1
并且这些控件—这些设置控件


441
00:22:17,838 --> 00:22:19,373 line:-1
出现在iOS设置app中


442
00:22:19,773 --> 00:22:21,675 line:-1
比如这是语音备忘录的设置


443
00:22:22,075 --> 00:22:23,076 line:-1
在设置app中


444
00:22:23,143 --> 00:22:26,513 line:-2
Mac上的设计准则是
获取app偏好


445
00:22:26,947 --> 00:22:29,082 line:-2
通过一个菜单项实现
在诸如这样的app中


446
00:22:29,683 --> 00:22:31,919 line:-1
当我们看到你的app有设置之后


447
00:22:32,252 --> 00:22:33,353 line:-1
我们会为你提供这个菜单项


448
00:22:33,687 --> 00:22:36,390 line:-2
并像这样自动把设置
映像到Mac prefpane


449
00:22:36,857 --> 00:22:38,225 line:-1
在app内


450
00:22:38,825 --> 00:22:40,394 line:-1
并且你可以看到它们并排放在一起


451
00:22:40,460 --> 00:22:41,495 line:-1
这是自动发生的


452
00:22:47,334 --> 00:22:50,504 line:-1
你的app获得了触摸条的基本支持


453
00:22:50,804 --> 00:22:52,573 line:-1
所有app都会使用系统触摸条


454
00:22:52,940 --> 00:22:56,844 line:-2
此外如果你使用API
比如AVPlayerViewController


455
00:22:57,177 --> 00:22:58,312 line:-1
或UITextView


456
00:22:58,812 --> 00:23:01,315 line:-1
它们也将自动提供


457
00:23:01,381 --> 00:23:03,083 line:-1
app中的文本触摸条的媒体权限


458
00:23:03,150 --> 00:23:04,284 line:-1
就像你在这里看到的这些一样


459
00:23:06,520 --> 00:23:08,455 line:-1
另一个自动映像的关键元素就是


460
00:23:08,522 --> 00:23:09,857 line:-1
文档选择器


461
00:23:09,923 --> 00:23:12,025 line:-2
这就是如何让
UIDocumentPickerViewController


462
00:23:12,092 --> 00:23:16,063 line:-2
看上去像NSOpenPanel
以满足用户的期待


463
00:23:18,131 --> 00:23:22,135 line:-2
你所创建的自定义视图按原样显示
跟预期一样


464
00:23:22,569 --> 00:23:23,804 line:-1
在这个语音备忘录app中


465
00:23:23,871 --> 00:23:27,608 line:-2
自定义波形视图
在两个平台上看起来完全一样


466
00:23:30,978 --> 00:23:32,613 line:-1
现在让我讲另一个话题


467
00:23:32,679 --> 00:23:34,648 line:-1
你可能会经常遇到


468
00:23:35,315 --> 00:23:37,684 line:-2
让我们看一下News中的
表格sheet


469
00:23:38,218 --> 00:23:39,853 line:-1
这是iPad上的News


470
00:23:40,120 --> 00:23:43,557 line:-1
这是用于管理通知的表格sheet


471
00:23:45,025 --> 00:23:48,428 line:-2
这是Mac上的News
显示的是同样的表格sheet


472
00:23:49,029 --> 00:23:51,465 line:-1
你可以看到表格sheet


473
00:23:51,899 --> 00:23:54,101 line:-2
连同内容中的UI切换项一起
都按原样显示


474
00:23:54,568 --> 00:23:56,103 line:-1
我把它并排显示一下


475
00:23:56,937 --> 00:23:59,139 line:-1
在这里你可以看到我的一个主要目标


476
00:23:59,640 --> 00:24:02,609 line:-1
是在可能的情况下为你的app


477
00:24:04,411 --> 00:24:05,612 line:-1
提供源代码的高度兼容性


478
00:24:05,979 --> 00:24:08,782 line:-2
尝试为app提供
完全的AppKit控制和标准


479
00:24:09,149 --> 00:24:10,951 line:-1
象征着太多的混乱


480
00:24:11,518 --> 00:24:14,855 line:-2
因此单独地
基于此的UIKit控件和布局


481
00:24:14,922 --> 00:24:18,859 line:-2
按原来那样为你的app
提供最大限度的兼容性


482
00:24:20,994 --> 00:24:22,996 line:-1
此外还有文本大小


483
00:24:23,864 --> 00:24:27,334 line:-2
在iOS上
控件的基础字号大小是17点


484
00:24:27,801 --> 00:24:30,404 line:-1
而在Mac上是13点


485
00:24:31,538 --> 00:24:32,506 line:-1
正如你所看到的那样


486
00:24:32,573 --> 00:24:34,908 line:-1
当它们并排显示时字号大小不一样


487
00:24:35,475 --> 00:24:37,477 line:-1
这种差异的存在有两个原因


488
00:24:37,544 --> 00:24:40,414 line:-1
分别是iOS设备相对显示密度较高


489
00:24:40,681 --> 00:24:42,316 line:-1
以及适应触摸需要


490
00:24:43,016 --> 00:24:46,453 line:-2
为了提供与Mac app
一致的交互性


491
00:24:46,787 --> 00:24:49,957 line:-1
我们把内容区缩减到了原来的77%


492
00:24:51,225 --> 00:24:53,293 line:-2
因此窗口中的一切看起来
都进行了统一缩放


493
00:24:53,560 --> 00:24:56,964 line:-2
并且你不需要针对Mac版
重新设计任何窗口


494
00:24:58,065 --> 00:25:00,167 line:-2
本周稍后会有一场
关于字体管理和文本缩放的演讲


495
00:25:00,234 --> 00:25:04,071 line:-1
会深入地谈到一些与此相关的话题


496
00:25:06,039 --> 00:25:06,874 line:-1
（还有更多免费功能）


497
00:25:06,940 --> 00:25:09,877 line:-1
现在让我快速讲讲更多免费功能


498
00:25:10,544 --> 00:25:12,045 line:-1
如果你实施了复制和粘贴、


499
00:25:12,112 --> 00:25:15,249 line:-1
拖放、打印或利用iOS 13中的


500
00:25:15,315 --> 00:25:19,520 line:-1
新功能多窗口、多任务API


501
00:25:19,586 --> 00:25:22,222 line:-1
这些将会被自动免费迁移到Mac上


502
00:25:23,457 --> 00:25:26,527 line:-2
在Mac上 app的生命周期
要适应Mac范例


503
00:25:26,593 --> 00:25:29,396 line:-1
针对管理生命周期所实施的任何回调


504
00:25:29,463 --> 00:25:31,932 line:-1
都将被自动迁移到Mac上


505
00:25:32,332 --> 00:25:35,736 line:-2
你可以在把iPad app
引入Mac


506
00:25:35,802 --> 00:25:36,837 line:-2
提升到下一层级的演讲中
获取与此相关的更多信息


507
00:25:37,771 --> 00:25:39,072 line:-1
除了这些免费功能


508
00:25:39,139 --> 00:25:41,575 line:-2
还有一些功能可以让你的app
成为一个更好的Mac app


509
00:25:42,476 --> 00:25:43,544 line:-1
就是这些


510
00:25:43,810 --> 00:25:45,679 line:-1
Jake已经讲过了Mac图标


511
00:25:46,580 --> 00:25:49,383 line:-2
本周稍后的高级演讲上
我们会讲其余的


512
00:25:49,449 --> 00:25:52,953 line:-2
在今天下午稍后的iOS
和macOS设计演讲上也会讲到


513
00:25:54,521 --> 00:25:55,756 line:-1
好的 谢谢


514
00:25:55,822 --> 00:25:57,824 line:-2
此时此刻
我要邀请Jason上台来


515
00:25:57,891 --> 00:25:59,826 line:-2
（采用MAC图标、自定义菜单、
工具条、）


516
00:25:59,893 --> 00:26:01,028 line:-2
（触摸条、悬浮事件、
帮助和更多的功能）


517
00:26:04,064 --> 00:26:05,232 line:-1
好的 谢谢Ali


518
00:26:07,401 --> 00:26:08,335 line:-1
（API差异）


519
00:26:09,002 --> 00:26:09,937 line:-1
大家下午好


520
00:26:10,003 --> 00:26:12,105 line:-1
我要深入地讲一些API的差异


521
00:26:12,606 --> 00:26:15,042 line:-2
你很可能会在把iPad app
引入Mac的过程中遇到


522
00:26:16,643 --> 00:26:19,146 line:-1
我要讲的是三类API差异


523
00:26:20,681 --> 00:26:22,950 line:-2
那些API有完全相同的行为
好消息是


524
00:26:23,217 --> 00:26:25,452 line:-1
绝大部分API都能正常使用


525
00:26:25,519 --> 00:26:26,620 line:-1
（API差异概览）


526
00:26:27,120 --> 00:26:29,022 line:-1
那些映像到macOS的API


527
00:26:29,323 --> 00:26:30,591 line:-1
会自动功能化


528
00:26:31,625 --> 00:26:35,495 line:-2
它们利用的是iOS API
但却导致了macOS行为


529
00:26:36,997 --> 00:26:39,399 line:-1
最后我们还会讲到


530
00:26:39,466 --> 00:26:40,567 line:-1
由于各种原因而不可用的API


531
00:26:40,934 --> 00:26:42,769 line:-1
在第一部分中我们不能全都讲到


532
00:26:43,403 --> 00:26:46,039 line:-1
Ali在第二部分中讲到了许多


533
00:26:46,807 --> 00:26:49,142 line:-1
但我还想在我们进入第三部分之前


534
00:26:49,776 --> 00:26:51,311 line:-1
提到一个额外的区域


535
00:26:52,346 --> 00:26:53,780 line:-1
就是鼠标和触摸事件


536
00:26:53,847 --> 00:26:54,982 line:-1
（鼠标和触摸事件）


537
00:26:55,282 --> 00:26:59,086 line:-2
iOS是围绕一个直接的
多点触控交互模型创建的


538
00:26:59,720 --> 00:27:03,590 line:-2
并且macOS是围绕非直接的
基于游标的交互模型创建的


539
00:27:04,525 --> 00:27:05,993 line:-2
当你尝试把多点触控app
引入Mac


540
00:27:06,426 --> 00:27:08,228 line:-1
并让它自由发挥作用时


541
00:27:08,829 --> 00:27:10,330 line:-1
你面临着巨大的挑战


542
00:27:10,964 --> 00:27:15,235 line:-2
虽然我们的确尝试尽可能地
自动映像更多的行为


543
00:27:16,837 --> 00:27:19,339 line:-2
我们引入了一个新的
UI悬浮手势识别器


544
00:27:19,873 --> 00:27:22,543 line:-1
当鼠标悬浮在你的视图上时会通知你


545
00:27:22,609 --> 00:27:23,644 line:-1
（悬浮）


546
00:27:23,710 --> 00:27:24,778 line:-1
（单指触摸追踪）


547
00:27:24,845 --> 00:27:26,613 line:-1
并且鼠标左键拖动


548
00:27:27,014 --> 00:27:30,017 line:-1
被映像到一个单一合成的触摸序列中


549
00:27:30,517 --> 00:27:32,719 line:-1
并由轻触、


550
00:27:33,287 --> 00:27:35,289 line:-1
平移和长按手势识别器自动识别


551
00:27:35,355 --> 00:27:37,090 line:-1
手势识别器用于识别单一触摸


552
00:27:42,296 --> 00:27:43,197 line:-1
（标准手势）


553
00:27:43,263 --> 00:27:44,665 line:-1
在Mac上标准系统手势


554
00:27:44,998 --> 00:27:47,601 line:-1
在硬件或驱动程序级别被识别


555
00:27:48,268 --> 00:27:50,804 line:-1
它们向系统发布高等级的手势事件


556
00:27:52,039 --> 00:27:55,375 line:-2
当UIKit app收到高等级的
捏合旋转手势时


557
00:27:56,143 --> 00:27:57,911 line:-1
我们合成一对触摸行为


558
00:27:58,312 --> 00:28:00,180 line:-1
并把它们提交给游标下的视图


559
00:28:00,981 --> 00:28:05,252 line:-1
这将在你的app中自动触发


560
00:28:05,319 --> 00:28:06,320 line:-1
任意捏合或旋转手势识别器


561
00:28:08,822 --> 00:28:11,758 line:-1
如果用户执行了标准的系统滚动手势


562
00:28:12,159 --> 00:28:14,328 line:-2
在这种情况下我们不会合成
任何触摸行为


563
00:28:14,728 --> 00:28:16,830 line:-1
UIKit将自动


564
00:28:16,897 --> 00:28:18,765 line:-1
在游标下的UI滚动视图中进行滚动


565
00:28:19,633 --> 00:28:20,868 line:-1
（自定义多点触控代码）


566
00:28:21,335 --> 00:28:23,270 line:-2
现在我们不能
自动映像的其中一个行为


567
00:28:23,337 --> 00:28:25,038 line:-1
是自定义多点触控行为


568
00:28:25,539 --> 00:28:27,574 line:-1
无论是直接处理UI触摸


569
00:28:27,641 --> 00:28:29,776 line:-1
或是已经写好自定义手势识别器


570
00:28:30,410 --> 00:28:32,279 line:-1
没有任何自动方式


571
00:28:32,713 --> 00:28:36,717 line:-2
把Mac上的各种不同的输入设备
映像到自定义手势


572
00:28:37,684 --> 00:28:39,453 line:-1
如果你在app中依赖于此


573
00:28:39,520 --> 00:28:41,255 line:-1
你需要提供一种替代方式


574
00:28:41,522 --> 00:28:43,190 line:-1
让用户实现同样的操作


575
00:28:43,257 --> 00:28:44,491 line:-1
当你把app引入到Mac时


576
00:28:46,760 --> 00:28:49,129 line:-1
让我们继续API差异的第三类


577
00:28:49,396 --> 00:28:50,998 line:-1
就是不可用的API


578
00:28:51,899 --> 00:28:53,567 line:-1
一般分为四大类


579
00:28:53,634 --> 00:28:54,635 line:-2
（不可用的API
弃用的框架）


580
00:28:54,701 --> 00:28:55,936 line:-1
弃用的框架


581
00:28:56,003 --> 00:28:56,837 line:-1
（iOS特有框架）


582
00:28:56,904 --> 00:29:00,807 line:-2
框架不可用是因为
它们所关联的iOS功能


583
00:29:01,308 --> 00:29:02,876 line:-1
在macOS中不存在


584
00:29:03,610 --> 00:29:04,444 line:-1
（硬件特有框架）


585
00:29:04,511 --> 00:29:08,081 line:-2
关联到特定软件功能
或传感器的框架


586
00:29:08,582 --> 00:29:09,750 line:-1
在Mac上不存在


587
00:29:10,617 --> 00:29:12,085 line:-1
最后还有许多框架


588
00:29:12,152 --> 00:29:14,421 line:-1
有不同的行为或API


589
00:29:14,855 --> 00:29:16,990 line:-1
由于各种原因在macOS上不可用


590
00:29:17,724 --> 00:29:19,359 line:-1
要对这些添加注释从而澄清


591
00:29:19,426 --> 00:29:20,794 line:-1
并在Xcode中生成报错


592
00:29:21,094 --> 00:29:22,729 line:-1
那么让我们再深入地看一下


593
00:29:22,796 --> 00:29:23,931 line:-1
（框架差异）


594
00:29:23,997 --> 00:29:24,998 line:-1
（弃用的框架）


595
00:29:25,065 --> 00:29:28,302 line:-1
弃用的框架通常是用了很久的框架


596
00:29:28,735 --> 00:29:29,903 line:-1
在它们被弃用过之后


597
00:29:30,971 --> 00:29:33,874 line:-2
然而这对于iPad app来说
是个新平台


598
00:29:34,341 --> 00:29:37,344 line:-1
因此你不应该假设任意弃用的框架


599
00:29:37,744 --> 00:29:38,846 line:-1
对你可用


600
00:29:39,947 --> 00:29:42,883 line:-1
现在是时候把弃用的框架迁移到


601
00:29:42,950 --> 00:29:44,084 line:-1
替代框架上了


602
00:29:44,785 --> 00:29:47,588 line:-2
这不仅允许你
把iPad app引入到Mac


603
00:29:47,855 --> 00:29:49,423 line:-2
还会让你的iPad app
从中获利


604
00:29:51,758 --> 00:29:52,793 line:-1
还有一些框架


605
00:29:53,060 --> 00:29:56,630 line:-2
关联了当前Mac上
不存在的iOS功能


606
00:29:56,697 --> 00:29:57,798 line:-2
（iOS特有的框架 CLASEKIT、
HEALTHKIT、HOMEKIT）


607
00:29:57,865 --> 00:30:00,234 line:-2
ClassKit框架用于
允许你的app


608
00:30:00,300 --> 00:30:01,602 line:-2
能与Schoolwork app
一起使用


609
00:30:02,069 --> 00:30:03,737 line:-1
但Mac上不存在这个app


610
00:30:03,804 --> 00:30:04,738 line:-1
因此那毫无意义


611
00:30:05,572 --> 00:30:06,907 line:-2
HealthKit
和HomeKit


612
00:30:07,307 --> 00:30:08,742 line:-1
此时此刻不可用


613
00:30:08,809 --> 00:30:11,078 line:-1
因为并不是所有潜在的功能都存在


614
00:30:11,778 --> 00:30:12,980 line:-1
（硬件特有的框架）


615
00:30:13,046 --> 00:30:15,482 line:-2
有一些关联到iOS设备上的
特定传感器的框架


616
00:30:15,549 --> 00:30:18,585 line:-1
用于实现仅存在于iOS上的功能


617
00:30:19,119 --> 00:30:20,687 line:-1
这将在Mac上不可用


618
00:30:20,754 --> 00:30:22,222 line:-1
因此如果你的app使用了这些框架


619
00:30:22,289 --> 00:30:24,791 line:-2
在你把它引入到Mac之前
制约它们的使用


620
00:30:26,960 --> 00:30:29,796 line:-2
有些关联了iOS设备上
特定硬件的框架


621
00:30:29,863 --> 00:30:31,865 line:-1
在Mac上可用


622
00:30:32,799 --> 00:30:35,469 line:-1
但这些API的可用性和功能性


623
00:30:36,336 --> 00:30:39,706 line:-2
受到限制 因为Mac通常没有
可比较的传感器


624
00:30:41,808 --> 00:30:44,344 line:-2
在某些情况下
在非网格式iPad上也一样


625
00:30:44,945 --> 00:30:46,780 line:-2
因此你的app可能已经
在做对的事情了


626
00:30:47,848 --> 00:30:50,284 line:-2
让我给你一个你可能期待的
那种差异的例子


627
00:30:51,051 --> 00:30:54,154 line:-2
Core Location能用
但Mac没有GPS芯片


628
00:30:54,721 --> 00:30:57,057 line:-1
因此你应该期待它们在移动时


629
00:30:57,124 --> 00:30:58,292 line:-1
对地理位置的变更没有那么敏感


630
00:30:59,626 --> 00:31:03,797 line:-2
且若你使用Core Motion
在app中控制游戏


631
00:31:04,431 --> 00:31:05,532 line:-1
你应该意识到Mac


632
00:31:05,599 --> 00:31:07,367 line:-1
没有实现此功能的传感器


633
00:31:07,935 --> 00:31:09,536 line:-1
那样会实现非常好的用户体验


634
00:31:09,970 --> 00:31:13,507 line:-2
因此你应该添加一个替代机制
在Mac上进行游戏控制


635
00:31:16,376 --> 00:31:18,011 line:-1
有许多媒体相关的框架


636
00:31:18,078 --> 00:31:19,713 line:-1
你应该注意其中的差异


637
00:31:20,848 --> 00:31:23,951 line:-2
Media Player框架
提供的功能


638
00:31:24,017 --> 00:31:25,319 line:-1
与它在Mac上提供的功能基本一样


639
00:31:25,385 --> 00:31:28,856 line:-2
可以使用立即播放信息中心
和远程命令中心


640
00:31:29,723 --> 00:31:31,892 line:-1
但不能使用库或回放支持


641
00:31:31,959 --> 00:31:33,160 line:-2
（框架差异 MEDIA PLAYER、
AVFOUNDATION、AUDIOTOOLBOX）


642
00:31:33,227 --> 00:31:35,495 line:-2
并且如果你使用
AVFoundation框架


643
00:31:35,562 --> 00:31:39,066 line:-1
在iOS设备上捕捉静止图像或视频


644
00:31:39,666 --> 00:31:42,269 line:-2
你可以在UIKit中使用
UIImagePickerController


645
00:31:42,336 --> 00:31:45,339 line:-1
从内嵌的前置Mac摄像头进行捕捉


646
00:31:47,908 --> 00:31:49,843 line:-1
还有许多其它存在差异的框架


647
00:31:49,910 --> 00:31:51,845 line:-1
我希望你们能关注其中几个


648
00:31:53,146 --> 00:31:56,116 line:-2
Metal在我们的所有平台上
都大致相同


649
00:31:56,817 --> 00:31:59,686 line:-2
因此你们中绝大多数人会发现
当你把iPad Metal app


650
00:32:00,187 --> 00:32:02,589 line:-1
引入到Mac之后不经修改就能使用


651
00:32:04,091 --> 00:32:06,760 line:-2
如果你使用了我们最新的GPU中的
某些更高级的功能


652
00:32:06,827 --> 00:32:09,696 line:-1
比如Memoryless Textures


653
00:32:11,064 --> 00:32:13,800 line:-1
我们引入了一个新GPU家族API


654
00:32:13,867 --> 00:32:15,836 line:-1
帮助你制约你的代码


655
00:32:15,903 --> 00:32:17,838 line:-1
从而使其在GPU家族的范围内运行


656
00:32:18,805 --> 00:32:21,775 line:-2
UIKit中 UIWebView
将不存在于Mac上


657
00:32:22,242 --> 00:32:23,210 line:-1
因此如果你已有UIWebView


658
00:32:23,277 --> 00:32:25,979 line:-2
现在是时候迁移到
WKWebView了


659
00:32:27,414 --> 00:32:28,448 line:-1
（API可用性）


660
00:32:28,815 --> 00:32:31,084 line:-2
那么正如你所看到的
我们的API存在许多差异


661
00:32:31,151 --> 00:32:32,686 line:-1
我们没时间提到每一个差异


662
00:32:33,520 --> 00:32:34,988 line:-1
那么我想花点儿时间来谈谈如何


663
00:32:35,055 --> 00:32:37,191 line:-1
自己定义哪个API存在差异


664
00:32:37,524 --> 00:32:40,394 line:-2
以及哪个API不可用 当你把
iPad app引入到Mac时


665
00:32:42,362 --> 00:32:43,830 line:-1
那么Mac版的iPad app


666
00:32:44,298 --> 00:32:46,433 line:-1
是用macOS SDK创建的


667
00:32:47,301 --> 00:32:49,570 line:-1
因此对于不可用的框架来说


668
00:32:50,137 --> 00:32:52,673 line:-1
它们只是不存在于SDK中


669
00:32:53,307 --> 00:32:56,276 line:-2
但对于在iOS和macOS上
存在差异的框架来说


670
00:32:56,944 --> 00:32:59,613 line:-1
我们给方法添加了恰当的注释来阐明


671
00:33:01,114 --> 00:33:02,516 line:-1
我们给API添加注释…


672
00:33:03,016 --> 00:33:06,553 line:-2
在Swift中可用
及在Objective-C中可用


673
00:33:07,354 --> 00:33:08,622 line:-1
对于iOS app


674
00:33:09,122 --> 00:33:10,791 line:-1
我们显然只关心这部分


675
00:33:12,292 --> 00:33:15,028 line:-1
好消息是iOS上的可用性


676
00:33:15,095 --> 00:33:18,198 line:-2
对Mac版iPad app
进行了自动暗示


677
00:33:19,266 --> 00:33:21,902 line:-2
正如我之前提到过的那样
绝大部分API都可用


678
00:33:21,969 --> 00:33:25,138 line:-2
因此当你浏览API时
你一般会看到这些


679
00:33:27,074 --> 00:33:28,742 line:-1
当存在可用性差异时


680
00:33:28,809 --> 00:33:30,644 line:-1
你会看到我们对它做了清楚的注释


681
00:33:31,311 --> 00:33:33,947 line:-1
这是一个仅适用于Mac上的


682
00:33:34,014 --> 00:33:34,915 line:-1
iPad app中的API


683
00:33:35,282 --> 00:33:37,351 line:-1
现在类似的API非常罕见


684
00:33:38,285 --> 00:33:41,321 line:-2
你所能找到的Mac版iPad
app中的绝大部分API差异


685
00:33:41,955 --> 00:33:44,925 line:-1
都是因为API在iOS上可用


686
00:33:45,325 --> 00:33:46,293 line:-1
但在Mac上不可用


687
00:33:46,994 --> 00:33:49,363 line:-2
在绝大多数情况下
你会看到API清晰地注明了


688
00:33:49,429 --> 00:33:51,131 line:-1
不适用于UIKitForMac


689
00:33:53,767 --> 00:33:54,868 line:-1
（制约代码）


690
00:33:55,235 --> 00:33:57,971 line:-2
理想情况是绝大多数代码
都保持相同


691
00:33:58,038 --> 00:33:59,106 line:-1
当你把它们引入到Mac时


692
00:33:59,473 --> 00:34:01,875 line:-2
然而如果你有一些代码
不应该出现在Mac上


693
00:34:02,242 --> 00:34:04,945 line:-2
你可以使用targetEnvironment
条件语句来排除它


694
00:34:06,613 --> 00:34:10,217 line:-2
并且如果你使用Objective-C
你可以使用Target OS UIKitForMac


695
00:34:10,284 --> 00:34:11,918 line:-1
目标条件语句来实现同样的操作


696
00:34:13,187 --> 00:34:14,688 line:-1
当然 你可以使用这个目标条件语句


697
00:34:14,755 --> 00:34:16,857 line:-1
来包含只与Mac相关的代码


698
00:34:17,991 --> 00:34:18,958 line:-1
（数据保护）


699
00:34:20,393 --> 00:34:22,262 line:-1
数据保护是一个iOS功能


700
00:34:22,329 --> 00:34:24,731 line:-1
你可以用于保护你app的文件


701
00:34:24,797 --> 00:34:26,300 line:-1
并防止未经授权获取文件


702
00:34:27,400 --> 00:34:29,002 line:-1
你可以正常读写文件


703
00:34:29,069 --> 00:34:31,905 line:-1
但系统会自动对它们加密和解密


704
00:34:33,340 --> 00:34:36,476 line:-1
当向文件系统写入文件时通过指定


705
00:34:36,543 --> 00:34:37,978 line:-1
以下四个写入选项中的一个来实现


706
00:34:39,947 --> 00:34:40,880 line:-1
目前在macOS上


707
00:34:41,281 --> 00:34:44,117 line:-1
这些数据保护API不起作用


708
00:34:45,018 --> 00:34:47,321 line:-1
如果你尝试像这个例子一样使用它们


709
00:34:48,422 --> 00:34:50,190 line:-1
代码会进行编译并执行


710
00:34:50,958 --> 00:34:53,560 line:-2
但数据不能被安全地存储到
文件系统上


711
00:34:54,962 --> 00:34:56,663 line:-1
如果你需要安全地存储数据


712
00:34:57,197 --> 00:34:58,765 line:-1
有一些可用的选项


713
00:34:59,700 --> 00:35:02,269 line:-2
密码和相关数据可以存在
KeyChain中


714
00:35:02,903 --> 00:35:06,340 line:-2
并且FileVault显然会加密
磁盘上的全部文件


715
00:35:07,508 --> 00:35:09,243 line:-1
但如果那不足以满足你的需要


716
00:35:09,309 --> 00:35:13,780 line:-2
你可以在CryptoKit中
使用AES.GCM加密API


717
00:35:14,715 --> 00:35:16,617 line:-1
在把内容写入到磁盘之前进行加密


718
00:35:17,518 --> 00:35:19,052 line:-1
正如你在示例中看到的那样


719
00:35:19,119 --> 00:35:21,955 line:-1
这个API让数据加密变得直截了当


720
00:35:22,856 --> 00:35:24,658 line:-1
然后你只需要把数据存到磁盘上


721
00:35:25,092 --> 00:35:26,260 line:-2
并把关键字写入
Keychain即可


722
00:35:26,660 --> 00:35:29,029 line:-1
请参考文档了解全部详细信息


723
00:35:29,096 --> 00:35:31,131 line:-1
关于如何存储并稍后解密数据


724
00:35:33,133 --> 00:35:34,168 line:-1
（捆绑格式）


725
00:35:34,968 --> 00:35:35,969 line:-1
我想提到的另一个差异


726
00:35:36,036 --> 00:35:37,971 line:-1
就是app的捆绑格式


727
00:35:39,306 --> 00:35:41,041 line:-1
iOS上的app捆绑


728
00:35:41,909 --> 00:35:43,277 line:-1
被认为是平面捆绑


729
00:35:44,178 --> 00:35:47,147 line:-2
当Xcode创建Mac版
iPad app时


730
00:35:48,282 --> 00:35:50,684 line:-1
它将创建一个macOS样式捆绑


731
00:35:50,751 --> 00:35:52,920 line:-2
比你在iOS上所使用的
平面捆绑格式更深入


732
00:35:54,721 --> 00:35:58,025 line:-2
如你使用NSBundle API
来查找app中的资源


733
00:35:58,592 --> 00:36:00,561 line:-1
那么这一切对你来说都是透明的


734
00:36:01,428 --> 00:36:04,264 line:-2
然而如果你有与app捆绑
相关的硬编码路径


735
00:36:04,698 --> 00:36:07,935 line:-2
你需要修改代码
以处理macOS捆绑格式


736
00:36:09,736 --> 00:36:10,971 line:-1
（扩展）


737
00:36:12,039 --> 00:36:14,374 line:-1
iOS支持多种多样的扩展…


738
00:36:14,441 --> 00:36:16,977 line:-1
但并不是所有都可用


739
00:36:17,744 --> 00:36:19,680 line:-2
当你把iPad app
引入Mac时


740
00:36:20,581 --> 00:36:22,783 line:-1
这是一些所支持的扩展集合


741
00:36:22,850 --> 00:36:24,785 line:-1
但你可能会发现一些API差异


742
00:36:25,953 --> 00:36:27,754 line:-2
这些扩展将自动
在AppKit和UIKit上生效


743
00:36:27,821 --> 00:36:30,057 line:-1
Mac…


744
00:36:30,457 --> 00:36:31,325 line:-1
Mac上的app


745
00:36:31,592 --> 00:36:34,127 line:-2
因此比如说
你app中的一个分享扩展


746
00:36:34,862 --> 00:36:37,764 line:-1
将会在AppKitapplication中


747
00:36:37,831 --> 00:36:38,932 line:-1
出现在分享扩展旁边的分享按钮中


748
00:36:41,735 --> 00:36:43,804 line:-1
还有许多ACPI扩展—抱歉


749
00:36:43,871 --> 00:36:46,607 line:-2
许多目前不能在macOS上
使用的扩展


750
00:36:47,541 --> 00:36:50,244 line:-2
其中有许多目前在macOS上
毫无意义 比如


751
00:36:50,310 --> 00:36:53,514 line:-2
便签包、自定义键盘
或iMessage扩展


752
00:36:54,147 --> 00:36:56,783 line:-2
因为与之相应的功能
在macOS上不存在


753
00:36:57,584 --> 00:36:59,386 line:-2
并且在某些情况下
比如文件提供器


754
00:36:59,453 --> 00:37:03,156 line:-2
你应该直接切换到
macOS上的文件提供器扩展


755
00:37:05,025 --> 00:37:06,293 line:-2
那么我们了解了许多
会对Mac版iPad app


756
00:37:06,360 --> 00:37:07,995 line:-1
产生影响的API差异


757
00:37:08,295 --> 00:37:10,197 line:-2
让我们看一个关于
如何在你的app中着手处理


758
00:37:10,264 --> 00:37:11,899 line:-1
这些差异的演示


759
00:37:17,004 --> 00:37:18,105 line:-1
（演示）


760
00:37:27,214 --> 00:37:28,415 line:-1
那么我们的菜谱app…


761
00:37:29,449 --> 00:37:31,852 line:-2
有一个功能是可以把一个菜谱
标记为收藏…


762
00:37:32,920 --> 00:37:35,122 line:-2
并且你可以看到其中一个菜谱旁
已经有了一个心形图案


763
00:37:35,189 --> 00:37:36,089 line:-1
用于显示状态


764
00:37:37,324 --> 00:37:39,493 line:-1
现在app有个自定义多点触控手势


765
00:37:39,560 --> 00:37:40,827 line:-1
可以转换收藏状态


766
00:37:41,495 --> 00:37:43,797 line:-2
但正如我们所讨论过的
那在Mac上不起作用


767
00:37:44,264 --> 00:37:46,567 line:-2
因此让我们添加一个自定义菜单项
来替代它


768
00:37:55,642 --> 00:37:57,444 line:-1
因此我们要做的第一件事是禁用…


769
00:37:58,378 --> 00:37:59,780 line:-1
我们的自定义手势识别器


770
00:38:01,215 --> 00:38:02,883 line:-1
我们通过之前提到过的目标条件语句


771
00:38:02,950 --> 00:38:04,418 line:-1
把它裹起来实现


772
00:38:06,153 --> 00:38:10,190 line:-1
哎呦…那个 稍等一下


773
00:38:19,600 --> 00:38:21,235 line:-1
好的 然后


774
00:38:22,269 --> 00:38:24,271 line:-1
接下来我们要做的是…


775
00:38:26,740 --> 00:38:28,842 line:-1
用IBAction注释标记


776
00:38:28,909 --> 00:38:31,311 line:-1
手势识别器调用的那个方法


777
00:38:31,378 --> 00:38:33,947 line:-1
即toggleSelectedRecipeFavoriteState


778
00:38:34,014 --> 00:38:35,582 line:-1
因此IB—或…


779
00:38:36,149 --> 00:38:37,417 line:-1
IB可以看到这个信息


780
00:38:37,918 --> 00:38:39,653 line:-1
然后 最后我们需要…


781
00:38:40,220 --> 00:38:41,788 line:-1
添加一个菜单验证方法


782
00:38:41,855 --> 00:38:43,991 line:-1
这将在


783
00:38:44,057 --> 00:38:46,393 line:-1
移除收藏和添加收藏菜单项之间转换


784
00:38:46,927 --> 00:38:48,929 line:-2
根据当前所选择的菜谱
是否为收藏菜谱


785
00:38:51,265 --> 00:38:53,667 line:-2
现在我们只需要添加
我们的自定义菜单即可


786
00:38:57,437 --> 00:38:59,273 line:-2
我们要进入
Storyboard编辑器


787
00:38:59,339 --> 00:39:01,008 line:-1
我们将拖出主菜单


788
00:39:07,915 --> 00:39:09,249 line:-1
哎呦 抱歉 我拖错了


789
00:39:11,118 --> 00:39:12,152 line:-1
主菜单


790
00:39:13,086 --> 00:39:16,256 line:-2
我们想向文件菜单中添加一个
新菜单项


791
00:39:17,157 --> 00:39:18,792 line:-1
因此我要添加一个内联的菜单分区


792
00:39:19,960 --> 00:39:21,328 line:-1
我只需要这些项中的其中一项


793
00:39:21,395 --> 00:39:22,563 line:-1
因此我要删除其它项


794
00:39:23,530 --> 00:39:25,065 line:-1
我们要把它修改为添加收藏


795
00:39:27,201 --> 00:39:28,769 line:-1
我们要实现与命令键等同的功能


796
00:39:35,642 --> 00:39:38,212 line:-2
然后我们所需要做的就是
把它写入到第一个响应器中


797
00:39:39,813 --> 00:39:42,749 line:-2
让它发送与手势识别器
所要发送的同样的方法


798
00:39:43,517 --> 00:39:45,519 line:-1
现在让我们创建并运行我们的app


799
00:39:56,163 --> 00:39:57,397 line:-1
我认为它的位置可能显示错了


800
00:40:08,008 --> 00:40:10,077 line:-2
现在你可以看到我们有一个
叫做添加收藏的新菜单项


801
00:40:10,143 --> 00:40:12,312 line:-1
当我点击它时我们会看到收藏图标


802
00:40:13,447 --> 00:40:16,216 line:-1
当然如果你取消—也会取消收藏


803
00:40:16,283 --> 00:40:18,886 line:-1
我们要测试菜单的快捷方式


804
00:40:18,952 --> 00:40:20,087 line:-1
当然了它的功能很棒


805
00:40:32,099 --> 00:40:35,002 line:-2
你刚才已经了解把iPad app
引入到Mac有多么简单


806
00:40:35,369 --> 00:40:36,570 line:-2
因此如果你的app
是一个很好的候选app


807
00:40:37,037 --> 00:40:39,406 line:-2
请勾选那个复选框
并创建和运行你的Mac版app


808
00:40:40,174 --> 00:40:43,177 line:-2
一定要经常查看文档和版本注释
获取最新信息


809
00:40:43,877 --> 00:40:46,413 line:-2
我们在本场演讲结束后
会在讨论室为你们提供一些帮助


810
00:40:46,813 --> 00:40:48,282 line:-1
请一定要参加我们周四下午的演讲


811
00:40:48,348 --> 00:40:50,751 line:-2
把iPad app引入Mac
提升到下一个层级


812
00:40:51,351 --> 00:40:52,719 line:-1
我们会讲如何让你的app


813
00:40:52,786 --> 00:40:54,721 line:-1
在Mac上更加流畅地使用


814
00:40:55,189 --> 00:40:57,090 line:-1
通过合并平台特有功能


815
00:40:58,091 --> 00:41:00,360 line:-2
请参加一会儿举办的关于iOS
和macOS设计的新功能演讲


816
00:41:00,427 --> 00:41:03,230 line:-1
我们将讨论设计考量


817
00:41:03,297 --> 00:41:04,731 line:-2
当你把iPad app
引入到Mac时


818
00:41:05,465 --> 00:41:06,667 line:-1
最后是周四上午的字体管理


819
00:41:06,733 --> 00:41:08,936 line:-1
和文本缩放演讲


820
00:41:09,002 --> 00:41:11,238 line:-1
我们将具体介绍如何处理新字体


821
00:41:11,605 --> 00:41:13,440 line:-2
或如何处理Mac版
iPad app的字体


822
00:41:13,941 --> 00:41:15,242 line:-1
谢谢 请享受接下来的时间

