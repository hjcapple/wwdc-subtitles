1
00:00:06,640 --> 00:00:11,612 line:0
（充分利用模拟器）


2
00:00:12,679 --> 00:00:13,881 line:-1
大家早上好


3
00:00:14,681 --> 00:00:17,117 line:-1
欢迎参加充分利用模拟器演讲


4
00:00:17,184 --> 00:00:18,485 line:-1
我叫Russ Bishop


5
00:00:18,552 --> 00:00:21,154 line:-2
我是模拟器和设备团队的一名
软件工程师


6
00:00:21,822 --> 00:00:23,223 line:-1
让我们开始讲吧


7
00:00:25,025 --> 00:00:28,128 line:-1
今天我会告诉你们什么是模拟器


8
00:00:28,996 --> 00:00:31,532 line:-1
然后Tracy会上台


9
00:00:32,466 --> 00:00:34,034 line:-1
讲一些热门问题和回答


10
00:00:34,301 --> 00:00:36,370 line:-1
以及充分利用模拟器app


11
00:00:37,504 --> 00:00:40,841 line:-2
我会再返回来告诉你
如何从命令行使用模拟器


12
00:00:41,208 --> 00:00:42,843 line:-1
最后Katelyn会上台来


13
00:00:42,910 --> 00:00:44,845 line:-2
告诉你们模拟器中的
Metal的使用


14
00:00:46,346 --> 00:00:49,383 line:-1
那么什么是模拟器？


15
00:00:49,516 --> 00:00:56,390 line:-2
它是在Mac上模拟iOS、tvOS
和watchOS设备的最佳方式


16
00:00:57,858 --> 00:01:00,661 line:-1
它是一个很好的开发工具


17
00:01:01,295 --> 00:01:03,397 line:-2
你的Mac有更多的内核、
更多的内存


18
00:01:03,664 --> 00:01:05,866 line:-1
你可以并行运行多个设备


19
00:01:06,900 --> 00:01:09,570 line:-2
它是一个很棒的工具
但作为一名软件工程师


20
00:01:10,504 --> 00:01:12,806 line:-1
那种解释可能有点儿不太令人满意


21
00:01:13,507 --> 00:01:18,045 line:-1
为了从技术层面讲一下模拟器


22
00:01:18,111 --> 00:01:20,814 line:-1
我们需要先谈谈什么是操作系统


23
00:01:22,416 --> 00:01:25,819 line:-1
我们有Kernel管理硬件资源、


24
00:01:25,886 --> 00:01:28,222 line:-1
分配内存、在各进程之间做出裁决


25
00:01:28,288 --> 00:01:29,323 line:-1
非常地直截了当


26
00:01:30,457 --> 00:01:33,293 line:-2
然后macOS位于它的上层
有一个用户空间


27
00:01:34,361 --> 00:01:36,330 line:-2
我们发布了
PID 1 launchd进程


28
00:01:36,597 --> 00:01:40,133 line:-2
我们可能还有在它上层运行的一些
守护进程 某些服务


29
00:01:40,601 --> 00:01:43,904 line:-2
我们有一些框架
然后运行着我们的app


30
00:01:45,205 --> 00:01:49,409 line:-1
模拟器实质上是个独立的用户空间


31
00:01:49,877 --> 00:01:52,813 line:-2
它有自己的launchd进程
有自己的守护进程


32
00:01:52,880 --> 00:01:55,816 line:-1
有自己的框架并运行自己的app


33
00:01:56,283 --> 00:02:01,088 line:-2
这些都是完全独立的
并与你Mac的用户空间相隔离


34
00:02:01,421 --> 00:02:03,090 line:-1
如果我启动另一个模拟器


35
00:02:03,557 --> 00:02:06,693 line:-1
那会打造另一个独立的用户空间


36
00:02:06,760 --> 00:02:09,363 line:-1
它不仅与macOS用户空间相隔离


37
00:02:09,429 --> 00:02:11,565 line:-1
还与其它运行中的模拟器相隔离


38
00:02:12,466 --> 00:02:15,169 line:-1
从技术层面来说 模拟器是


39
00:02:15,235 --> 00:02:19,173 line:-2
iOS、watchOS
或tvOS用户空间


40
00:02:20,307 --> 00:02:22,009 line:-2
只不过是运行在
Mac Kernel上


41
00:02:23,644 --> 00:02:27,047 line:-2
拥有独立的launchd进程、
独立的守护进程和服务、


42
00:02:27,114 --> 00:02:30,317 line:-1
独立的通知域名、独立的URL会话


43
00:02:30,684 --> 00:02:32,085 line:-1
独立的引导程序


44
00:02:34,021 --> 00:02:36,890 line:-2
它确实共享同样的文件系统
但却有独立的根目录


45
00:02:38,525 --> 00:02:40,360 line:-1
自libSystem起


46
00:02:41,128 --> 00:02:43,797 line:-2
一切都针对我们所模拟的平台
进行创建


47
00:02:44,097 --> 00:02:46,333 line:-1
因此包括 在最底层


48
00:02:46,400 --> 00:02:49,603 line:-2
你知道的 libSystem
所有的Syslibs一直到UIKit


49
00:02:50,103 --> 00:02:51,104 line:-1
以及其它框架


50
00:02:52,606 --> 00:02:54,875 line:-1
它对那个平台使用ABI


51
00:02:56,443 --> 00:02:58,779 line:-2
并且它是针对Mac的处理器
进行的原生创建


52
00:02:59,346 --> 00:03:00,547 line:-1
它不是个仿真器


53
00:03:02,349 --> 00:03:04,151 line:-1
下面讲一些细节


54
00:03:06,520 --> 00:03:08,989 line:-1
模拟器的内存和CPU限制-


55
00:03:10,090 --> 00:03:13,327 line:-2
倒不如说没有模拟设备的
内存和CPU


56
00:03:13,894 --> 00:03:15,395 line:-1
因此如果你的Mac有…


57
00:03:16,063 --> 00:03:19,132 line:-2
如果你有一台新Mac Pro
并且有1TB的内存


58
00:03:19,833 --> 00:03:21,668 line:-1
你的模拟器可以分配1TB的内存


59
00:03:22,302 --> 00:03:26,406 line:-2
如果你在iPhone X上
尝试去做那很可能会失败


60
00:03:28,909 --> 00:03:32,179 line:-2
Mac还有不同数量的内核
不同的线程行为


61
00:03:32,646 --> 00:03:36,750 line:-2
那可能是个恩惠 它可以帮助揭露
数据竞争或其它线程状况


62
00:03:37,217 --> 00:03:38,752 line:-1
但它是你需要引起注意的东西


63
00:03:40,387 --> 00:03:42,456 line:-1
app沙盒不是强制的


64
00:03:43,290 --> 00:03:46,226 line:-2
因此模拟器中的进程可以写在
它的沙盒外


65
00:03:46,293 --> 00:03:49,129 line:-2
但再说一次 如果你在设备上尝试
那一定会失败


66
00:03:50,864 --> 00:03:53,300 line:-1
然而 绝大多数人的Mac都设置了


67
00:03:53,500 --> 00:03:56,136 line:-1
不区分大小写文件系统


68
00:03:56,837 --> 00:03:58,906 line:-1
但模拟器的全部进程


69
00:03:58,972 --> 00:04:02,309 line:-1
却都使用区分大小写文件系统


70
00:04:04,444 --> 00:04:05,746 line:-1
然后 最后但却并不是最不重要的


71
00:04:05,812 --> 00:04:08,248 line:-2
模拟器中支持
Thread Sanitizer


72
00:04:08,315 --> 00:04:10,150 line:-1
然而设备却不支持它


73
00:04:10,784 --> 00:04:11,952 line:-1
因此那是一个有用的工具


74
00:04:13,187 --> 00:04:15,022 line:-1
那么现在我要把舞台交给Tracy


75
00:04:15,389 --> 00:04:17,791 line:-1
她会上台来讲一些热门问题和回答


76
00:04:18,759 --> 00:04:19,593 line:-1
Tracy？


77
00:04:24,965 --> 00:04:25,799 line:-1
早上好！


78
00:04:26,366 --> 00:04:29,069 line:-2
我叫Tracy
我是开发技术小组的一员


79
00:04:29,770 --> 00:04:33,473 line:-2
那么你知道的我们总会收到一些提问
这些提问来自于演讲、


80
00:04:33,540 --> 00:04:36,910 line:-1
讨论会或用户论坛中的反馈


81
00:04:37,344 --> 00:04:38,779 line:-1
那么我们认为回顾一下


82
00:04:38,846 --> 00:04:41,281 line:-1
其中某些问题的答案可能会有帮助


83
00:04:41,715 --> 00:04:43,584 line:-1
那么我的目标是


84
00:04:43,650 --> 00:04:46,787 line:-2
让你最少了解一件你以前
不知道的与模拟器有关的事


85
00:04:47,487 --> 00:04:49,623 line:-1
在此之前 我想稍微谈谈


86
00:04:49,690 --> 00:04:52,559 line:-2
为什么模拟器
对于你的工作流程来说很重要


87
00:04:53,460 --> 00:04:55,395 line:-1
嗯 如果我们考虑


88
00:04:55,829 --> 00:04:59,499 line:-1
兼容iOS 13的全部设备


89
00:05:00,033 --> 00:05:03,504 line:-2
然后我们添加
全部其它操作系统和设备


90
00:05:03,937 --> 00:05:07,307 line:-2
那么你其实正在查看
上百台设备和操作系统


91
00:05:07,374 --> 00:05:08,742 line:-1
都对客户可用


92
00:05:09,409 --> 00:05:11,178 line:-2
并且还只是
iPhone和iPad相关的


93
00:05:11,245 --> 00:05:13,847 line:-1
甚至不包含Watch和TV


94
00:05:14,515 --> 00:05:17,284 line:-1
嗯 你的双肩包里要塞这么多的东西


95
00:05:17,951 --> 00:05:19,219 line:-1
那么我们想


96
00:05:19,286 --> 00:05:21,755 line:-2
“嗯 用这些老操作系统
做测试怎么样？”


97
00:05:22,189 --> 00:05:27,060 line:-2
我确定你有使用老设备
和老操作系统的客户


98
00:05:27,828 --> 00:05:28,595 line:-1
你可能会想


99
00:05:28,662 --> 00:05:32,299 line:-2
“Tracy
我不可能测试全部这些配置”


100
00:05:32,733 --> 00:05:33,800 line:-1
嗯 那可能是真的


101
00:05:34,268 --> 00:05:37,237 line:-1
通过模拟器


102
00:05:37,671 --> 00:05:39,673 line:-2
虽然你可能不会拥有
全部这些物理设备


103
00:05:39,740 --> 00:05:42,376 line:-2
但你可以使用每一个
可用的操作系统和设备


104
00:05:43,043 --> 00:05:46,480 line:-2
那会让模拟器变成你日常工作中的
一个非常重要的工具


105
00:05:47,181 --> 00:05:49,283 line:-1
好的 让我们讲讲那些热门问题


106
00:05:49,883 --> 00:05:52,586 line:-2
第一个问题
我可以在模拟器上进行放大吗？


107
00:05:53,420 --> 00:05:54,254 line:-1
是的 你可以


108
00:05:54,454 --> 00:05:56,290 line:-1
你可以模拟捏合手势


109
00:05:56,356 --> 00:05:58,792 line:-1
按住Option键时点击并拖动


110
00:06:02,396 --> 00:06:05,232 line:-1
你可以模拟的另一个手势是拖放


111
00:06:06,200 --> 00:06:07,534 line:-1
首先你要在app中


112
00:06:08,468 --> 00:06:12,072 line:-2
然后点击Control键
模拟长按拖拽


113
00:06:12,673 --> 00:06:16,109 line:-2
到你想去的任意地方
然后松开Hold键


114
00:06:19,246 --> 00:06:20,414 line:-1
哦 很不错


115
00:06:22,449 --> 00:06:23,417 line:-1
下一个问题


116
00:06:23,650 --> 00:06:27,721 line:-2
我可以修改模拟器
用于输入和输出的音频设备吗？


117
00:06:28,322 --> 00:06:29,223 line:-1
是的 你可以


118
00:06:29,590 --> 00:06:31,725 line:-1
那是通过硬件菜单实现的


119
00:06:32,059 --> 00:06:35,729 line:-1
你可以选择想要使用哪个音频设备


120
00:06:37,397 --> 00:06:40,534 line:-2
那样你可以聆听你的Apple音乐
而不会被中断


121
00:06:42,302 --> 00:06:43,136 line:-1
下一个问题


122
00:06:43,604 --> 00:06:45,305 line:-1
iCloud在模拟器中能用吗？


123
00:06:45,772 --> 00:06:46,673 line:-1
是的 它能用


124
00:06:47,007 --> 00:06:49,276 line:-2
你可以通过设置app
登录iCloud


125
00:06:49,610 --> 00:06:51,678 line:-2
然后就可以在模拟器中
通过iCloud


126
00:06:51,745 --> 00:06:53,881 line:-1
使用所有的Calendars、


127
00:06:54,147 --> 00:06:55,849 line:-2
Contacts
以及其它可用的app


128
00:06:57,084 --> 00:07:00,921 line:-2
你还可以通过使用调试按钮
触发iCloud同步


129
00:07:01,188 --> 00:07:02,422 line:-1
触发iCloud同步


130
00:07:06,793 --> 00:07:09,062 line:-1
哦 看 我下周有个休假 太好了


131
00:07:10,764 --> 00:07:11,598 line:-1
下一个问题


132
00:07:12,099 --> 00:07:13,600 line:-1
我可以使用摇晃手势吗？


133
00:07:14,501 --> 00:07:15,335 line:-1
是的 你可以


134
00:07:15,903 --> 00:07:18,105 line:-2
在这个例子中
有个同事创建了一款app


135
00:07:18,572 --> 00:07:21,408 line:-1
当收到摇晃动作时会指示出来


136
00:07:21,742 --> 00:07:25,279 line:-2
那么你进入硬件菜单
并选择摇晃手势


137
00:07:28,348 --> 00:07:30,784 line:-1
你还可以模拟内存警告


138
00:07:31,151 --> 00:07:32,586 line:-1
通过调试菜单


139
00:07:39,359 --> 00:07:40,194 line:-1
下一个问题


140
00:07:40,727 --> 00:07:44,665 line:-2
我如何让老版模拟器
作为部署目的地显示？


141
00:07:45,499 --> 00:07:48,535 line:-1
这都是通过设备和模拟器面板实现的


142
00:07:49,002 --> 00:07:52,206 line:-2
你可以从窗口菜单下找到它
或你可以使用键盘快捷键


143
00:07:53,707 --> 00:07:56,944 line:-2
现在Xcode 11配备一个
模拟器的默认列表


144
00:07:57,010 --> 00:07:59,246 line:-2
你可能会注意到
它列出了许多对模拟器


145
00:07:59,646 --> 00:08:02,950 line:-2
但你总是可以按照需要
安装额外的模拟器


146
00:08:03,817 --> 00:08:06,653 line:-1
实现方式是进入模拟器标签


147
00:08:07,855 --> 00:08:11,058 line:-2
接下来我们要做的是点击
左下方的加号按钮


148
00:08:12,392 --> 00:08:14,895 line:-1
然后选择设备类型


149
00:08:15,562 --> 00:08:18,098 line:-1
以及想要使用的操作系统


150
00:08:19,299 --> 00:08:23,103 line:-2
在这个例子中 对于设备类型
我们选择iPad Mini模拟器


151
00:08:23,770 --> 00:08:27,307 line:-2
Xcode 11
现在支持iPad Mini了


152
00:08:27,374 --> 00:08:28,842 line:-1
一直支持到iPad Mini 2


153
00:08:30,944 --> 00:08:34,280 line:-2
你要给这个模拟器命名
然后点击创建


154
00:08:35,048 --> 00:08:37,717 line:-1
现在将呈现你新创建的模拟器目标


155
00:08:39,285 --> 00:08:42,121 line:-2
且你可以在新的iPad Mini
模拟器中运行app


156
00:08:44,925 --> 00:08:47,060 line:-2
让我们花点儿时间
谈谈Watch模拟器


157
00:08:47,561 --> 00:08:52,566 line:-2
预设Watch模拟器对已自动添加
到iPhone X和XS Max


158
00:08:52,966 --> 00:08:55,736 line:-2
但你可以通过点击加号按钮
添加一个新配对


159
00:08:58,405 --> 00:09:01,408 line:-2
再说一次
你要选择操作系统和设备类型


160
00:09:03,076 --> 00:09:04,144 line:-1
然后点击配对


161
00:09:07,648 --> 00:09:11,151 line:-2
要修改活跃的配对
我们要做的就是点击单选按钮


162
00:09:15,889 --> 00:09:18,759 line:-1
你还可以下载老版模拟器


163
00:09:19,059 --> 00:09:22,462 line:-2
通过进入Xcode首选项
并选择组件


164
00:09:22,796 --> 00:09:24,998 line:-1
你可以选择你所需要的然后点击安装


165
00:09:25,299 --> 00:09:26,934 line:-1
然后就会安装老版模拟器


166
00:09:27,067 --> 00:09:28,535 line:-1
然后你就可以选择它们了


167
00:09:28,602 --> 00:09:31,405 line:-1
根据你项目中的部署目的地设置


168
00:09:33,106 --> 00:09:36,643 line:-2
你还可以通过使用硬件设备按钮
获得老版模拟器


169
00:09:36,844 --> 00:09:38,011 line:-1
然后就会启动老版模拟器


170
00:09:40,447 --> 00:09:43,784 line:-1
这将允许你并排显示较新的操作系统


171
00:09:43,851 --> 00:09:45,652 line:-1
和较老的操作系统


172
00:09:49,323 --> 00:09:53,594 line:-2
你可以通过取消勾选“显示为运行
目的地”来隐藏模拟器目标


173
00:09:54,494 --> 00:09:58,031 line:-2
你还可以删除模拟器目标
如果你不再需要它们的话


174
00:09:58,665 --> 00:10:00,767 line:-1
并且你可以使用键盘上的删除按钮


175
00:10:00,834 --> 00:10:04,137 line:-2
或你可以使用情境按钮
按住Control键


176
00:10:04,204 --> 00:10:06,840 line:-1
你还可以选择所显示的其它项


177
00:10:07,307 --> 00:10:08,642 line:-1
请记住 如果你改主意了


178
00:10:08,709 --> 00:10:11,912 line:-2
你总是可以通过创建模拟器目标
把它们添加回来


179
00:10:12,813 --> 00:10:14,248 line:-1
好的 让我们看下一个问题


180
00:10:14,915 --> 00:10:16,783 line:-1
模拟器霸占了太多屏幕空间


181
00:10:16,850 --> 00:10:18,018 line:-1
我能把它们变小点儿吗？


182
00:10:19,253 --> 00:10:20,087 line:-1
是的 你可以


183
00:10:20,153 --> 00:10:22,956 line:-1
在模拟器上有三种可用的预设


184
00:10:23,824 --> 00:10:28,095 line:-1
物理尺寸、点精确和像素精确


185
00:10:28,362 --> 00:10:29,429 line:-1
这些都是什么意思呢？


186
00:10:29,830 --> 00:10:32,766 line:-2
嗯 外形尺寸实际上是
设备的物理尺寸


187
00:10:33,133 --> 00:10:36,270 line:-2
你可以举起设备放在屏幕上
那是它的物理尺寸


188
00:10:36,670 --> 00:10:38,105 line:-1
点精确是指


189
00:10:38,172 --> 00:10:40,941 line:-2
一个UIKit点
等于一个AppKit点


190
00:10:41,441 --> 00:10:44,811 line:-1
然后像素精确是指逐像素呈现


191
00:10:44,878 --> 00:10:46,380 line:-1
基于你的监控器分辨率


192
00:10:47,381 --> 00:10:50,017 line:-1
或有人可能了解 你总是可以拖动


193
00:10:50,217 --> 00:10:53,954 line:-1
打开模拟器 然后随意调整它的尺寸


194
00:10:54,021 --> 00:10:56,223 line:-2
你最大可以把它调整为
与显示屏相同的尺寸


195
00:10:58,892 --> 00:10:59,760 line:-1
下一个问题


196
00:11:00,394 --> 00:11:03,397 line:-1
模拟器可以帮助我调试UI动画吗？


197
00:11:03,897 --> 00:11:04,765 line:-1
是的 它可以


198
00:11:04,865 --> 00:11:08,435 line:-1
这通过调试菜单下的慢动画实现


199
00:11:08,869 --> 00:11:11,872 line:-2
一旦你切换为慢动画
并选择任意app


200
00:11:11,939 --> 00:11:15,275 line:-1
它将很慢地运行


201
00:11:17,644 --> 00:11:19,179 line:-1
降低UI动画速度


202
00:11:21,915 --> 00:11:22,749 line:-1
下一个问题


203
00:11:23,517 --> 00:11:25,285 line:-1
Siri能在模拟器中使用吗？


204
00:11:26,620 --> 00:11:27,454 line:-1
是的 它能


205
00:11:27,521 --> 00:11:30,424 line:-2
只要你给模拟器提供麦克风权限
就可以


206
00:11:30,891 --> 00:11:33,994 line:-2
你可以在全部模拟器平台上
调用Siri


207
00:11:34,561 --> 00:11:37,130 line:-1
此外 你还可以从硬件菜单


208
00:11:37,197 --> 00:11:39,366 line:-1
或使用键盘快捷键找到Siri


209
00:11:42,169 --> 00:11:43,036 line:-1
下一个问题


210
00:11:43,604 --> 00:11:46,006 line:-1
如何控制我的tvOS模拟器？


211
00:11:46,573 --> 00:11:48,675 line:-1
嗯 有几种不同的实现方式


212
00:11:48,976 --> 00:11:52,412 line:-2
其中一种是使用
Apple TV软件遥控


213
00:11:52,846 --> 00:11:54,615 line:-1
它位于硬件菜单下


214
00:11:54,715 --> 00:11:55,549 line:-1
点击它


215
00:11:55,782 --> 00:11:58,952 line:-2
要激活那个区域
你只需要按住Option键


216
00:11:59,286 --> 00:12:00,754 line:-1
并移动游标即可


217
00:12:03,023 --> 00:12:06,760 line:-2
另一种方式是
使用硬件Apple TV遥控


218
00:12:06,894 --> 00:12:07,628 line:-1
你给它配对


219
00:12:08,562 --> 00:12:11,098 line:-1
按住遥控上的加号和菜单按钮


220
00:12:11,498 --> 00:12:13,734 line:-1
一旦配对成功 你就可以


221
00:12:13,934 --> 00:12:17,771 line:-2
在tvOS模拟器上的硬件
Apple TV遥控中使用它了


222
00:12:20,374 --> 00:12:23,110 line:-1
你还可以使用游戏控制器


223
00:12:23,177 --> 00:12:25,579 line:-2
对于简单的导航
只需要使用键盘即可


224
00:12:27,915 --> 00:12:28,749 line:-1
下一个问题


225
00:12:29,349 --> 00:12:33,187 line:-2
我可以在iOS 13模拟器上
使用Xcode 10吗？


226
00:12:34,188 --> 00:12:35,022 line:-1
是的 你可以


227
00:12:35,556 --> 00:12:39,026 line:-1
必须让Xcode 10运行在


228
00:12:39,459 --> 00:12:41,595 line:-2
与Xcode 11-Beta
所运行的系统相同的系统上


229
00:12:41,995 --> 00:12:44,064 line:-2
你要做的第一件事就是
启动Xcode 11


230
00:12:44,298 --> 00:12:45,832 line:-1
同时也启动一个模拟器


231
00:12:46,366 --> 00:12:49,203 line:-1
那将为你提供iOS 13运行时间


232
00:12:49,803 --> 00:12:53,307 line:-2
然后关闭Xcode 但保持
Simulator.app打开


233
00:12:54,441 --> 00:12:57,277 line:-2
然后你就会进入老版
Xcode 10


234
00:12:58,712 --> 00:13:01,315 line:-2
把它放在前台 然后你就可以
在模拟器上创建并运行了


235
00:13:02,149 --> 00:13:03,350 line:-1
让我来演示一下如何实现


236
00:13:03,684 --> 00:13:05,485 line:-1
我们正在运行Xcode 10


237
00:13:06,854 --> 00:13:08,956 line:-1
我们要做的就是选择


238
00:13:09,056 --> 00:13:12,259 line:-1
iOS 12.2模拟器


239
00:13:12,659 --> 00:13:13,994 line:-1
在它上头运行我们的app


240
00:13:14,862 --> 00:13:17,965 line:-1
然后我们要改成iOS 13模拟器


241
00:13:18,532 --> 00:13:20,067 line:-1
我们要在它上头运行我们的app


242
00:13:21,935 --> 00:13:24,538 line:-2
现在你可以看到
新版和旧版并排显示


243
00:13:29,409 --> 00:13:31,144 line:-1
哦 哇 得到了你们的掌声


244
00:13:33,247 --> 00:13:34,081 line:-1
下一个问题


245
00:13:34,147 --> 00:13:36,350 line:-1
我可以把内容复制到模拟器中吗？


246
00:13:37,050 --> 00:13:39,219 line:-1
复制内容的方法有许多种


247
00:13:39,286 --> 00:13:40,687 line:-1
其中一种是通过拖放


248
00:13:40,754 --> 00:13:44,525 line:-2
通过拖放 你可以
复制app捆绑包、地理位置、


249
00:13:44,858 --> 00:13:46,994 line:-1
照片和视频以及URL


250
00:13:49,663 --> 00:13:52,566 line:-1
在这个例子中 我可以让我的项目


251
00:13:53,033 --> 00:13:56,803 line:-2
获取我的app捆绑包
只需把它拖放到模拟器上即可


252
00:13:57,504 --> 00:13:59,339 line:-2
那将安装app捆绑包
并且我可以运行它


253
00:14:03,544 --> 00:14:06,547 line:-2
在这个例子中
我们要获取一些照片和视频


254
00:14:07,714 --> 00:14:11,351 line:-2
我选择全部 然后我只需要把它们
直接拖拽到模拟器中


255
00:14:11,919 --> 00:14:14,021 line:-2
它们将自动进入
Photos app


256
00:14:15,155 --> 00:14:17,324 line:-2
哦 等一下 我拖入了四个
但我只得到了三个


257
00:14:17,758 --> 00:14:18,625 line:-1
哦


258
00:14:18,825 --> 00:14:23,430 line:-2
那是因为照片和视频文件进行了重新
调配从而给你提供一个动态照片


259
00:14:27,134 --> 00:14:28,702 line:-1
拖放URL很简单


260
00:14:28,769 --> 00:14:31,872 line:-2
只需打开Safari 选中URL
然后拖放即可


261
00:14:36,877 --> 00:14:40,581 line:-2
你还可以从Safari内使用
Safari共享表单


262
00:14:40,848 --> 00:14:43,383 line:-2
模拟器是Safari
共享表单之下的一个目标


263
00:14:43,450 --> 00:14:44,351 line:-1
选中它


264
00:14:44,651 --> 00:14:45,919 line:-1
它会打开一个对话框


265
00:14:45,986 --> 00:14:47,354 line:-1
你可以选择一个模拟器


266
00:14:47,421 --> 00:14:49,723 line:-1
或你可以同时进入所有模拟器


267
00:14:56,530 --> 00:15:00,200 line:-1
同时你可以通过共享表单共享位置


268
00:15:00,534 --> 00:15:02,803 line:-2
在Maps app
你会得到一个地理位置


269
00:15:02,870 --> 00:15:05,172 line:-1
点击模拟器 选择你的目的地


270
00:15:05,706 --> 00:15:07,908 line:-1
然后它将与模拟器共享那个地理位置


271
00:15:11,845 --> 00:15:14,882 line:-2
好的 提一下其它有帮助的提示
你以前可能不了解


272
00:15:16,583 --> 00:15:20,254 line:-1
硬件菜单下有自动旋转设备


273
00:15:20,320 --> 00:15:21,989 line:-1
那么如果你切换为这个设置


274
00:15:22,222 --> 00:15:26,426 line:-2
它将遵循你项目中的设置
并自动旋转模拟器


275
00:15:29,029 --> 00:15:32,833 line:-2
在模拟器中我们有一些
对于模拟器地理位置的预设


276
00:15:33,133 --> 00:15:36,503 line:-2
其中一个就像在高速路上开车一样
你可以模拟在高速路上开车


277
00:15:38,872 --> 00:15:41,308 line:-2
你还可以输入你自己的
自定义地理位置


278
00:15:41,675 --> 00:15:44,077 line:-1
通过输入经度和纬度


279
00:15:52,519 --> 00:15:55,389 line:-2
如果你想了解当来电时
你的app是怎么样的


280
00:15:55,455 --> 00:15:57,925 line:-1
你可以使用切换通话中状态


281
00:15:59,126 --> 00:16:01,762 line:-2
或你可以使用键盘快捷键
Command-Y


282
00:16:06,033 --> 00:16:09,436 line:-1
你可以用外部显示器显示不同内容


283
00:16:09,503 --> 00:16:14,274 line:-2
在本例中 我们正在播放一些视频
但没有用Safari


284
00:16:14,575 --> 00:16:17,377 line:-1
我们选择了一些不同的显示分辨率


285
00:16:23,984 --> 00:16:26,153 line:-1
模拟器上还可以使用暗黑模式


286
00:16:26,486 --> 00:16:28,488 line:-1
你可以从开发者菜单下找到它


287
00:16:28,589 --> 00:16:31,191 line:-1
在设置下切换到开发者菜单


288
00:16:31,258 --> 00:16:33,460 line:-1
然后点击暗黑外观


289
00:16:40,467 --> 00:16:43,770 line:-2
你还可以在模拟器中修改墙纸
如果你想的话


290
00:16:43,837 --> 00:16:46,173 line:-2
你只需要把照片拖入
Photos app


291
00:16:46,373 --> 00:16:47,241 line:-1
然后点击照片


292
00:16:47,307 --> 00:16:48,375 line:-1
使用共享表单


293
00:16:48,809 --> 00:16:51,245 line:-2
那会把它放到前台
就像它在iOS设备上那样


294
00:16:51,311 --> 00:16:52,613 line:-1
选择它作为墙纸


295
00:16:52,946 --> 00:16:56,416 line:-1
然后模拟器也会把它


296
00:16:56,483 --> 00:16:58,185 line:-1
用作背景墙纸 用作锁屏墙纸


297
00:16:59,086 --> 00:17:00,954 line:-1
现在你有新背景了


298
00:17:03,824 --> 00:17:05,559 line:-1
在模拟器中还可以使用听写功能


299
00:17:05,893 --> 00:17:07,528 line:-1
你可以在设置app下找到它


300
00:17:08,362 --> 00:17:12,465 line:-1
在键盘下有一个启动听写


301
00:17:13,733 --> 00:17:15,301 line:-1
一旦你打开它


302
00:17:16,435 --> 00:17:19,106 line:-1
你会打开一个app 接受键盘输入


303
00:17:19,873 --> 00:17:22,242 line:-2
使用Command-K
打开软件键盘


304
00:17:22,576 --> 00:17:25,546 line:-2
你会在那儿看到麦克风
然后你就可以开始听写了


305
00:17:31,718 --> 00:17:34,388 line:-2
还可以修改输入语种
如果你之前不知道的话


306
00:17:34,454 --> 00:17:39,059 line:-2
你可以进入键盘
选择你想要的输入语种


307
00:17:39,893 --> 00:17:42,262 line:-1
有许多不同的语种


308
00:17:43,864 --> 00:17:46,600 line:-2
然后再说一次
你只需要打开软件键盘


309
00:17:47,601 --> 00:17:50,604 line:-2
点击地球图标
就像你在iOS设备上所做的那样


310
00:17:53,941 --> 00:17:55,175 line:-1
提到键盘


311
00:17:55,843 --> 00:17:58,512 line:-2
模拟器中还支持新的
QuickPath


312
00:17:58,679 --> 00:18:03,250 line:-2
只需要打开键盘 开始你的路径
然后就好了


313
00:18:09,523 --> 00:18:13,293 line:-2
你还可以通过使用模拟器帮助菜单
获取更多信息


314
00:18:14,995 --> 00:18:16,129 line:-1
键入你想要了解的内容


315
00:18:16,196 --> 00:18:19,566 line:-2
并且搜索功能也会为你指出
你需要去哪里了解


316
00:18:21,034 --> 00:18:22,202 line:-1
嗯 我的时间就要到了


317
00:18:22,269 --> 00:18:24,905 line:-1
我希望你们学到了至少一个


318
00:18:24,972 --> 00:18:25,906 line:-1
你以前不知道的与模拟器有关的信息


319
00:18:26,473 --> 00:18:27,774 line:-1
现在我要把舞台交给Russ


320
00:18:27,841 --> 00:18:30,344 line:-1
他会讲通过命令行运行模拟器


321
00:18:30,544 --> 00:18:31,378 line:-1
谢谢


322
00:18:35,182 --> 00:18:36,049 line:-1
谢谢Tracy


323
00:18:37,284 --> 00:18:41,355 line:-1
让我们谈谈从命令行运行模拟器


324
00:18:43,924 --> 00:18:46,894 line:-1
如果我今天要留给你一件东西


325
00:18:47,828 --> 00:18:51,164 line:-2
那就是xcrun模拟器控制
或简称simctl


326
00:18:53,400 --> 00:18:55,135 line:-1
但如果我今天可以留给你两件东西


327
00:18:55,502 --> 00:18:58,338 line:-2
那应该是
xcrun simctl帮助


328
00:18:59,673 --> 00:19:01,975 line:-1
模拟器控制可以提供大量帮助


329
00:19:02,509 --> 00:19:04,278 line:-1
如果你运行它但却没有命令


330
00:19:04,378 --> 00:19:06,547 line:-1
它会告诉你全部可用的命令


331
00:19:07,014 --> 00:19:10,050 line:-2
如果你运行帮助 然后运行命令名称
它会给你提供


332
00:19:10,417 --> 00:19:12,719 line:-1
关于那个特定命令的更多详细信息


333
00:19:14,321 --> 00:19:18,125 line:-1
我要讲一些可能会对你有帮助的命令


334
00:19:18,992 --> 00:19:22,129 line:-2
然后简单地谈谈其它命令
然后我们会做一个小演示


335
00:19:24,031 --> 00:19:26,600 line:-1
那么第一个命令 最基本的命令


336
00:19:26,667 --> 00:19:27,534 line:-1
是list命令


337
00:19:28,635 --> 00:19:32,539 line:-2
这会为你提供你所拥有的设备类型、
运行时间、设备


338
00:19:32,906 --> 00:19:34,641 line:-2
我缩短了这个列表
从而让它显示在一张幻灯片上


339
00:19:34,708 --> 00:19:37,044 line:-2
你很可能会在你自己的机器上
看到更多


340
00:19:38,846 --> 00:19:41,415 line:-1
我们在这里可以看到有设备类型


341
00:19:42,115 --> 00:19:44,017 line:-2
既有它们的简称
又有它们的标识符、


342
00:19:44,685 --> 00:19:47,354 line:-1
运行时间、简称和标识符


343
00:19:48,222 --> 00:19:52,392 line:-2
我的设备 它的标识符
然后是当前状态 目前是关机


344
00:19:54,127 --> 00:19:57,064 line:-2
能接受比如设备类型
或运行时间的绝大多数命令


345
00:19:57,130 --> 00:20:00,601 line:-1
都能接受名称 简称


346
00:20:00,968 --> 00:20:03,270 line:-2
当你在终端键入时可以使用简称
完全没问题


347
00:20:03,337 --> 00:20:04,972 line:-1
从而节省敲键盘的时间


348
00:20:05,506 --> 00:20:07,975 line:-1
但我强烈推荐对于自动化和脚本来说


349
00:20:08,308 --> 00:20:12,012 line:-2
最好是使用完整标识符
只是为了保持特定性


350
00:20:13,680 --> 00:20:16,650 line:-1
list命令接受一些不同的类


351
00:20:17,417 --> 00:20:18,819 line:-1
其中一类是设备


352
00:20:18,952 --> 00:20:24,157 line:-2
那么在这个例子中
我不查找运行时间或设备类型


353
00:20:24,224 --> 00:20:25,292 line:-1
我只想查找设备


354
00:20:25,592 --> 00:20:26,727 line:-1
我可以指定它


355
00:20:27,261 --> 00:20:29,663 line:-1
并且我也可以提供一个搜索字符串


356
00:20:30,597 --> 00:20:33,467 line:-2
在这个例子中 我只想查找
我的iPhone X设备


357
00:20:35,969 --> 00:20:38,172 line:-1
list命令还有一个JSON标识


358
00:20:38,572 --> 00:20:40,974 line:-1
会输出一个机器可读的JSON文件


359
00:20:41,041 --> 00:20:43,277 line:-1
你可以用于进行自动化


360
00:20:47,714 --> 00:20:50,250 line:-2
我要讲的下一个命令
是create命令


361
00:20:51,685 --> 00:20:54,721 line:-2
有人可能已经听说了我们今年
将支持独立的Watch app


362
00:20:54,821 --> 00:20:59,159 line:-2
我需要一个独立的Watch模拟器
从而在Watch模拟器上进行部署


363
00:20:59,560 --> 00:21:01,795 line:-1
我要调用这个测试Watch


364
00:21:02,930 --> 00:21:07,568 line:-2
指定我想要的设备
4 - 44mm系列


365
00:21:08,302 --> 00:21:11,438 line:-2
我想让它在
watchOS 6.0上运行


366
00:21:12,806 --> 00:21:16,176 line:-1
输出的是设备的标识符


367
00:21:17,711 --> 00:21:20,380 line:-1
因此我可以在环境变量中捕捉到它


368
00:21:20,447 --> 00:21:21,849 line:-1
或用于编写脚本


369
00:21:22,683 --> 00:21:23,917 line:-1
在这个小例子中


370
00:21:24,518 --> 00:21:26,320 line:-1
我给那个值设置了新设备


371
00:21:26,520 --> 00:21:30,224 line:-1
然后看 自动程序重复了


372
00:21:30,290 --> 00:21:31,291 line:-1
我们所创建的设备的标识符


373
00:21:32,659 --> 00:21:36,530 line:-2
绝大部分模拟器控制命令
都遵守UNIX协定


374
00:21:37,197 --> 00:21:39,166 line:-1
如果成功 值为零并退出


375
00:21:39,433 --> 00:21:41,802 line:-1
如果失败 值为非零代码并退出


376
00:21:42,269 --> 00:21:44,371 line:-1
报错被打印到标准报错


377
00:21:44,905 --> 00:21:48,842 line:-2
然后实际的输出
比如设备标识符或JSON


378
00:21:48,909 --> 00:21:50,544 line:-1
输出到标准输出


379
00:21:53,514 --> 00:21:56,884 line:-2
我要讲的下一个命令
是spawn命令


380
00:21:58,285 --> 00:22:00,621 line:-1
spawn命令会暂停xspawn


381
00:22:00,888 --> 00:22:03,924 line:-1
它是模拟环境中的一个进程


382
00:22:04,591 --> 00:22:07,094 line:-1
你可能会想“它有什么用？”


383
00:22:07,594 --> 00:22:09,396 line:-2
嗯 我们把一些
你可能用得上的实用程序


384
00:22:09,630 --> 00:22:11,532 line:-1
搬到了模拟器中


385
00:22:14,001 --> 00:22:15,435 line:-1
在这个例子中是作为默认实用程序


386
00:22:15,502 --> 00:22:18,038 line:-1
我要指定我想要模拟的设备


387
00:22:18,805 --> 00:22:20,741 line:-2
在这个例子中
我要使用别名“booted”


388
00:22:21,208 --> 00:22:22,743 line:-1
因为我有一个引导模拟器


389
00:22:22,910 --> 00:22:24,878 line:-1
因此我实际上不需要指定它是哪个


390
00:22:25,512 --> 00:22:29,783 line:-2
我要比如默认写入
我app的捆绑ID


391
00:22:30,250 --> 00:22:33,287 line:-1
我想把ResetDatabase键设为是


392
00:22:34,121 --> 00:22:37,824 line:-2
这是一种便利的方式
可以在它运行之前


393
00:22:38,225 --> 00:22:39,159 line:-1
修改你app的用户默认值


394
00:22:41,061 --> 00:22:42,996 line:-2
我还可以运行
log stream实用程序


395
00:22:43,130 --> 00:22:45,966 line:-2
如果你以前没见过
或没在Mac上运行过


396
00:22:46,600 --> 00:22:49,269 line:-2
你可传递一Predicate参数
然后以流形式查看输出日志


397
00:22:49,803 --> 00:22:51,505 line:-1
嗯 你可以在模拟器上做同样的事


398
00:22:53,006 --> 00:22:54,908 line:-2
在这个例子中
Predicate是


399
00:22:54,975 --> 00:22:58,645 line:-2
senderImagePath CONTAINS
nsurlsessiond


400
00:22:59,146 --> 00:23:02,249 line:-2
因为我想调试与URL会话
一起使用时出毛病的一些东西


401
00:23:04,818 --> 00:23:07,287 line:-1
然后我可以以流形式查看输出日志


402
00:23:07,955 --> 00:23:10,257 line:-2
你可能会注意到
模拟器控件已经检测到


403
00:23:10,324 --> 00:23:13,093 line:-1
我正在使用支持颜色的交互性终端


404
00:23:13,393 --> 00:23:14,761 line:-1
它把那个信息传过来


405
00:23:14,828 --> 00:23:18,532 line:-2
从而日志流会为我提供一些
颜色漂亮的输出


406
00:23:19,032 --> 00:23:23,570 line:-2
并且在这里我可以看到
我的dataTaskWithRequest


407
00:23:23,637 --> 00:23:25,272 line:-2
allowsCellularAccess被设为1
这就是我想要的 我很高兴


408
00:23:28,342 --> 00:23:29,743 line:-1
提到日志


409
00:23:29,810 --> 00:23:33,480 line:-2
我要讲的下一个命令是
diagnose命令


410
00:23:35,015 --> 00:23:37,784 line:-1
这是一个非常有用的命令


411
00:23:38,519 --> 00:23:42,422 line:-2
diagnose命令
不仅连接磁盘上的日志


412
00:23:42,489 --> 00:23:45,425 line:-1
还连接短暂日志和dump系统状态


413
00:23:45,692 --> 00:23:47,528 line:-1
那在追踪问题时很有用


414
00:23:48,829 --> 00:23:51,565 line:-2
它是在自动化系统中运行的
一个很棒的功能


415
00:23:51,765 --> 00:23:53,033 line:-1
如果你测试失败


416
00:23:53,667 --> 00:23:58,539 line:-2
或出现某种问题
请立即捕捉诊断、控制诊断


417
00:23:59,173 --> 00:24:01,808 line:-1
这对于归档错误也很有帮助


418
00:24:02,576 --> 00:24:04,444 line:-1
因此在自动化情境中


419
00:24:04,912 --> 00:24:08,515 line:-1
我要传递-l标识以跳过隐私警告


420
00:24:08,582 --> 00:24:11,885 line:-2
但我强烈建议你
在使用这个命令之前了解它


421
00:24:12,319 --> 00:24:14,121 line:-1
并查看Apple的隐私权政策


422
00:24:14,188 --> 00:24:16,423 line:-1
这会告诉你它将收集哪种类型的信息


423
00:24:16,723 --> 00:24:18,592 line:-1
可能包含账户名称之类的信息


424
00:24:20,794 --> 00:24:21,929 line:-1
诊断可以运行


425
00:24:21,995 --> 00:24:23,797 line:-1
它会告诉我它把文件写入到了哪里


426
00:24:24,231 --> 00:24:25,933 line:-1
如果我在工作中使用了这个诊断命令


427
00:24:25,999 --> 00:24:27,835 line:-2
我还会得到一个弹出的
Finder窗口


428
00:24:28,168 --> 00:24:30,003 line:-1
给我显示它所产生的文件


429
00:24:31,004 --> 00:24:33,307 line:-1
因此 如果你要通过新反馈助手


430
00:24:33,373 --> 00:24:34,575 line:-1
在反馈中发送


431
00:24:35,275 --> 00:24:39,079 line:-2
如果是模拟器的问题
请附加一个模拟器控制诊断


432
00:24:39,646 --> 00:24:42,916 line:-2
那使得查找具体哪里出错
变得更简单


433
00:24:43,250 --> 00:24:45,786 line:-2
我强烈推荐你在你自己的工作中
使用它


434
00:24:45,853 --> 00:24:47,254 line:-1
如果你要把错误发送到…


435
00:24:47,821 --> 00:24:48,889 line:-1
比如 如果你在做QA


436
00:24:48,956 --> 00:24:50,157 line:-1
你要把一个错误发送给软件工程师


437
00:24:50,224 --> 00:24:51,725 line:-1
嘿 app-某些地方出错了


438
00:24:52,392 --> 00:24:53,527 line:-1
附加一个诊断


439
00:24:53,927 --> 00:24:56,196 line:-2
那将包含
来自你app的全部日志输出


440
00:24:56,997 --> 00:25:00,634 line:-2
我要讲的下一个命令是
launch命令


441
00:25:02,135 --> 00:25:04,137 line:-1
Launch命令启动app


442
00:25:05,272 --> 00:25:09,076 line:-2
你可能会问“它和spawn命令
有什么区别呢？”


443
00:25:09,443 --> 00:25:12,045 line:-1
嗯 launch会礼貌地询问系统


444
00:25:12,112 --> 00:25:14,882 line:-2
“请问可以开启
带有这个捆绑ID的app吗？”


445
00:25:15,482 --> 00:25:18,619 line:-1
这等同于在主屏幕上轻触图标


446
00:25:19,486 --> 00:25:20,888 line:-2
事实上 在iOS、
watchOS或tvOS上


447
00:25:20,954 --> 00:25:23,390 line:-1
只有这样


448
00:25:23,724 --> 00:25:25,826 line:-1
进程才可以在屏幕上显示信息


449
00:25:26,994 --> 00:25:28,061 line:-1
因此它非常重要


450
00:25:28,128 --> 00:25:30,631 line:-2
如果你实际上想启动一个
已安装的app


451
00:25:30,998 --> 00:25:32,633 line:-1
你需要使用launch命令


452
00:25:34,268 --> 00:25:36,970 line:-1
我要再一次指定引导别名


453
00:25:37,037 --> 00:25:39,039 line:-1
因为我只有一个引导模拟器


454
00:25:40,507 --> 00:25:43,410 line:-2
我要启动我的
com.apple.example app


455
00:25:44,111 --> 00:25:45,679 line:-1
传递一些参数


456
00:25:46,346 --> 00:25:47,714 line:-1
如果你之前没见过的话


457
00:25:48,081 --> 00:25:51,018 line:-1
用户默认允许你从命令行


458
00:25:51,552 --> 00:25:53,020 line:-1
覆盖你作为参数设置的默认


459
00:25:53,820 --> 00:25:55,756 line:-1
用一个单破折号作为键的前缀


460
00:25:56,423 --> 00:25:58,592 line:-1
接着是键名称 然后指定值


461
00:25:58,992 --> 00:26:01,261 line:-1
对于我的app的那个特定启动


462
00:26:01,895 --> 00:26:05,799 line:-2
-MyDefaultKey将被
设为是 无论磁盘上存储了什么


463
00:26:06,633 --> 00:26:09,002 line:-2
Launch命令可以为我实现一些
很有意思的功能


464
00:26:09,670 --> 00:26:12,706 line:-1
如果我给控制台传递-pty标识


465
00:26:13,841 --> 00:26:18,812 line:-2
launch命令会把我app的
标准输入、输出和标准报错


466
00:26:19,413 --> 00:26:21,415 line:-1
连接到我正在使用的终端


467
00:26:22,583 --> 00:26:24,117 line:-1
因此当我启动这个app时


468
00:26:24,551 --> 00:26:27,654 line:-2
我会直接在我的终端中
看到它的标准输出


469
00:26:28,388 --> 00:26:31,658 line:-1
不仅如此 我还可以获得调试功能


470
00:26:32,192 --> 00:26:34,494 line:-1
在这个例子中 我按下回车键


471
00:26:34,862 --> 00:26:36,563 line:-1
它会dump一些调试状态


472
00:26:36,930 --> 00:26:39,566 line:-1
因此在终端中 我可以按回车键


473
00:26:40,200 --> 00:26:42,669 line:-1
从app中打印调试状态


474
00:26:43,270 --> 00:26:46,073 line:-2
当你调试时
这是个非常有用的工具


475
00:26:47,374 --> 00:26:49,710 line:-2
你可能会注意到的另一件事就是
按Control-C


476
00:26:49,910 --> 00:26:51,645 line:-1
会发送一个中断信号


477
00:26:52,346 --> 00:26:53,814 line:-1
模拟器控件发现信号


478
00:26:54,515 --> 00:26:56,984 line:-1
获取信号并把它传给app


479
00:26:57,551 --> 00:27:00,921 line:-1
那不仅适用于类似中断信号的信号


480
00:27:00,988 --> 00:27:03,357 line:-2
还适用于用户信号：
user1、user2


481
00:27:03,991 --> 00:27:06,159 line:-1
还有方式可以设置你的app


482
00:27:06,226 --> 00:27:08,795 line:-1
使其包含调试信息


483
00:27:10,931 --> 00:27:12,900 line:-1
那么还有更多的命令…


484
00:27:14,268 --> 00:27:16,003 line:-1
我没有时间一一讲到


485
00:27:16,069 --> 00:27:18,639 line:-1
我只想简略地做一个概述


486
00:27:19,740 --> 00:27:22,442 line:-2
Boot命令 正如
你可能期待的那样 引导一个设备


487
00:27:23,710 --> 00:27:27,381 line:-2
Shutdown命令也非常明显
它关闭设备


488
00:27:28,081 --> 00:27:30,017 line:-1
但关机接受特殊别名


489
00:27:30,717 --> 00:27:33,554 line:-2
如果是全部别名
那将关闭所有运行中的模拟器


490
00:27:35,055 --> 00:27:38,058 line:-2
Delete 正如你所期待的那样
它可以删除设备


491
00:27:38,825 --> 00:27:42,996 line:-2
但它还接受另一个便利的别名-
不可用


492
00:27:43,797 --> 00:27:46,233 line:-1
那将查找全部使用了运行时间


493
00:27:46,700 --> 00:27:49,703 line:-1
但却对你不再可用的模拟器


494
00:27:50,003 --> 00:27:52,172 line:-2
也许是老版的Xcode
而你把它升级了


495
00:27:52,606 --> 00:27:54,308 line:-1
或一个下载的模拟器运行时间


496
00:27:54,374 --> 00:27:56,210 line:-2
就像Tracy给你们展示的
那个一样 而你把它删除了


497
00:27:56,543 --> 00:27:58,312 line:-1
那将清除全部这些模拟器


498
00:27:58,378 --> 00:27:59,780 line:-1
并恢复相应的磁盘空间


499
00:28:02,182 --> 00:28:03,517 line:-1
接下来是pair命令


500
00:28:03,817 --> 00:28:07,588 line:-2
有pair命令 也有相关联的
Unpair和pair activate命令


501
00:28:07,654 --> 00:28:10,057 line:-2
你可以从命令行设置
手表-手机配对


502
00:28:11,425 --> 00:28:14,561 line:-2
Addmedia命令类似于
Tracy刚才给你展示的


503
00:28:14,962 --> 00:28:17,698 line:-1
把照片和媒体拖放到模拟器中


504
00:28:17,764 --> 00:28:18,899 line:-1
你也可以用脚本实现


505
00:28:20,667 --> 00:28:22,870 line:-2
Get app container
是个非常有意思的命令


506
00:28:23,737 --> 00:28:25,105 line:-1
如果你的app出问题了


507
00:28:25,172 --> 00:28:27,441 line:-1
也许是正在写一个被损坏的文件


508
00:28:27,508 --> 00:28:29,243 line:-1
或它尝试加载某些东西


509
00:28:29,309 --> 00:28:31,044 line:-2
你知道的 它应该在那儿
但它却不在那儿


510
00:28:31,578 --> 00:28:33,780 line:-2
Get app container
可以为你提供磁盘上的路径


511
00:28:34,314 --> 00:28:38,051 line:-2
让你找到app的数据容器
或甚至是找到共享容器


512
00:28:38,452 --> 00:28:40,787 line:-2
也许是你的app和你app的扩展
正在使用的共享容器


513
00:28:41,221 --> 00:28:43,657 line:-1
然后你就可以检验实际内容


514
00:28:43,724 --> 00:28:47,127 line:-2
检验来自Finder或
终端的文件系统看看哪里出错了


515
00:28:48,128 --> 00:28:50,163 line:-1
Install命令 非常类似于


516
00:28:50,230 --> 00:28:52,299 line:-2
Tracy刚给你展示的
拖放app捆绑包


517
00:28:52,366 --> 00:28:54,201 line:-1
你可以从命令行安装一个app


518
00:28:55,969 --> 00:28:58,705 line:-1
然后我要提到的最后一个是io命令


519
00:28:59,039 --> 00:29:01,074 line:-1
Io自身有许多子命令


520
00:29:01,642 --> 00:29:04,344 line:-1
很可能最重要的一个是屏幕截图


521
00:29:04,745 --> 00:29:08,048 line:-2
它可以让你在模拟器中
自动获取截图


522
00:29:09,683 --> 00:29:13,053 line:-2
然后我要讲的最后一个命令是
clone命令


523
00:29:15,122 --> 00:29:19,193 line:-1
Clone是一个非常强大的命令


524
00:29:19,560 --> 00:29:22,229 line:-1
用于自动化 用于测试 用于做实验


525
00:29:23,197 --> 00:29:26,066 line:-2
Clone允许你按照你想要的方式
设置单一模拟器


526
00:29:26,300 --> 00:29:28,702 line:-2
安装app
设置用户默认 加载数据


527
00:29:29,369 --> 00:29:30,904 line:-1
然后你可以关闭那个模拟器


528
00:29:31,004 --> 00:29:33,140 line:-2
并复制多个一模一样的模拟器
如果需要的话


529
00:29:34,007 --> 00:29:35,542 line:-1
然后你可以运行那些复制的模拟器


530
00:29:36,276 --> 00:29:38,979 line:-1
实施你的实验 完成后就丢弃它们


531
00:29:39,980 --> 00:29:41,415 line:-1
这可以节省很多时间


532
00:29:41,882 --> 00:29:43,584 line:-1
并节省大量磁盘空间


533
00:29:43,650 --> 00:29:47,387 line:-2
因为clone
利用了底层的APSF文件克隆


534
00:29:48,188 --> 00:29:50,657 line:-1
如果你的游戏有价值1GB的资产


535
00:29:50,924 --> 00:29:53,327 line:-1
并且你想并行运行多个测试


536
00:29:53,660 --> 00:29:56,396 line:-2
你可以继续去做
而不需要占用太多磁盘空间


537
00:29:56,930 --> 00:30:00,667 line:-2
那么说得多不如做的多
我要给你们做一个演示


538
00:30:02,736 --> 00:30:03,604 line:-1
好的


539
00:30:05,372 --> 00:30:07,241 line:-1
我要做的第一件事


540
00:30:07,307 --> 00:30:11,211 line:-1
就是打开模拟器


541
00:30:11,445 --> 00:30:14,381 line:-1
我将作为基准使用 用作对比


542
00:30:16,216 --> 00:30:17,518 line:-1
我要打开那个模拟器


543
00:30:18,352 --> 00:30:20,254 line:-1
你可以看到打开了模拟器app


544
00:30:20,554 --> 00:30:21,955 line:-1
因此它是自动附加到模拟器上的


545
00:30:24,892 --> 00:30:28,362 line:-1
我要做的第二件事就是安装app


546
00:30:28,729 --> 00:30:30,931 line:-1
这里是我的app捆绑包 整装待发


547
00:30:31,298 --> 00:30:32,633 line:-1
正如我之前告诉过你的那样


548
00:30:32,733 --> 00:30:34,434 line:-1
我要在那个app中


549
00:30:36,837 --> 00:30:37,738 line:-2
运行install、
booted命令


550
00:30:38,172 --> 00:30:41,441 line:-2
我们会看到它出现在主屏幕上了
它现在已经安装好了


551
00:30:43,610 --> 00:30:46,280 line:-1
接下来我要做的是关闭这个模拟器


552
00:30:46,346 --> 00:30:48,182 line:-2
在我们克隆它之前
我们确实需要关闭它


553
00:30:54,121 --> 00:30:56,490 line:-1
一旦我关掉它之后


554
00:30:57,824 --> 00:31:00,327 line:-2
我就可以创建一个克隆
叫做clone-1


555
00:31:04,665 --> 00:31:06,633 line:-1
现在我要再次运行这个命令


556
00:31:06,700 --> 00:31:08,602 line:-1
创建另一个克隆 clone-2


557
00:31:13,740 --> 00:31:15,876 line:-1
现在我有两个克隆模拟器


558
00:31:16,043 --> 00:31:17,644 line:-1
我要继续并要求它们boot


559
00:31:22,049 --> 00:31:24,618 line:-2
在这里我们可以看到
它们两个都已经启动了


560
00:31:25,319 --> 00:31:26,587 line:-1
它们的启动启动速度快多了


561
00:31:26,653 --> 00:31:30,490 line:-2
因为我不需要支付
首次boot的费用


562
00:31:30,824 --> 00:31:33,560 line:-2
我已经在设置基础模拟器时
支付了那个费用


563
00:31:34,061 --> 00:31:35,462 line:-1
因此那会非常节省时间


564
00:31:36,763 --> 00:31:39,967 line:-1
然后这里是我可以进行哪些设置


565
00:31:40,801 --> 00:31:44,238 line:-2
为演示准备的东西已经就位
或者我想要运行的实验


566
00:31:44,738 --> 00:31:48,442 line:-2
然后我可以在这两个模拟器中
同时启动app


567
00:31:50,577 --> 00:31:53,013 line:-1
现在有人可能认出这段代码了


568
00:31:53,080 --> 00:31:54,715 line:-1
这是Metal DeferredLighting的演示


569
00:31:55,215 --> 00:31:57,951 line:-1
这是我们以前不能运行的东西


570
00:31:58,018 --> 00:32:02,122 line:-2
它是Xcode 11中的新功能
当在macOS Catalina上运行时


571
00:32:02,556 --> 00:32:05,592 line:-2
为了让你们了解模拟器中的
Metal的相关信息


572
00:32:06,960 --> 00:32:08,095 line:-1
我要邀请Katelyn上台


573
00:32:08,729 --> 00:32:09,563 line:-1
Katelyn？


574
00:32:15,369 --> 00:32:16,236 line:-1
谢谢


575
00:32:17,237 --> 00:32:18,705 line:-1
谢谢Russ 早上好


576
00:32:18,772 --> 00:32:22,209 line:-2
我是Katelyn Hicks
GPU软件团队中的软件工程师


577
00:32:22,743 --> 00:32:26,580 line:-2
今天 我感到非常激动 我要分享
模拟器中新增加对Metal的支持


578
00:32:27,147 --> 00:32:31,084 line:-2
让我们具体看看如何在模拟器中
最大限度地利用Metal


579
00:32:33,620 --> 00:32:36,590 line:-2
因为运行在macOS Catalina
和Xcode 11上


580
00:32:36,924 --> 00:32:38,725 line:-1
模拟器现在支持Metal了


581
00:32:39,293 --> 00:32:41,328 line:-2
但那对于你的app来说
意味着什么？


582
00:32:41,962 --> 00:32:43,764 line:-1
嗯 两件事


583
00:32:44,431 --> 00:32:47,100 line:-1
对于所有app来说


584
00:32:48,001 --> 00:32:49,469 line:-1
模拟器完全是GPU加速的


585
00:32:49,970 --> 00:32:54,141 line:-2
第二 Metal API现在可以
在模拟器中使用了


586
00:32:56,176 --> 00:32:59,246 line:-2
让我们看看当运行在
macOS Catalina


587
00:32:59,313 --> 00:33:02,216 line:-2
和Xcode 11上时
模拟器有多快


588
00:33:02,783 --> 00:33:05,085 line:-1
我们会快速浏览一些app


589
00:33:05,686 --> 00:33:07,521 line:-1
来了解那个信息


590
00:33:07,721 --> 00:33:12,459 line:-2
跨系统动画更加流畅
用户体验更加有响应性


591
00:33:15,362 --> 00:33:17,364 line:-1
这是由于Apple框架


592
00:33:17,431 --> 00:33:19,233 line:-1
迁移到了Metal渲染器中


593
00:33:19,700 --> 00:33:21,869 line:-1
现在可以充分利用GPU了


594
00:33:24,738 --> 00:33:27,274 line:-2
因此如果你的app
没有使用Metal


595
00:33:27,641 --> 00:33:30,210 line:-1
而是使用了Apple框架


596
00:33:30,277 --> 00:33:33,347 line:-1
来处理UI 2D或3D图形


597
00:33:33,780 --> 00:33:37,651 line:-1
你仍然可以得到GPU加速性能改善


598
00:33:39,286 --> 00:33:40,954 line:-1
你的app不需要做任何必要的修改


599
00:33:41,021 --> 00:33:45,325 line:-1
以通过Metal实现GPU加速


600
00:33:45,526 --> 00:33:46,894 line:-1
加速是免费的


601
00:33:47,494 --> 00:33:49,296 line:-1
现在我要给你演示一些例子


602
00:33:51,098 --> 00:33:55,135 line:-2
左侧是运行在软件渲染器上的
一个设备


603
00:33:56,036 --> 00:33:59,506 line:-1
右侧是新的GPU加速的模拟器


604
00:34:00,374 --> 00:34:02,075 line:-1
在这个简单的图形项目中


605
00:34:02,576 --> 00:34:04,444 line:-1
我们可以了解改善的性能


606
00:34:04,511 --> 00:34:08,081 line:-2
通过滚动那个使用了
UIKit的表视图


607
00:34:11,652 --> 00:34:13,152 line:-1
自最初的模拟器起


608
00:34:13,453 --> 00:34:17,925 line:-1
iOS设备的分辨率提高了17倍


609
00:34:17,991 --> 00:34:21,428 line:-2
这给底层的软件渲染器
施加了额外的压力


610
00:34:22,429 --> 00:34:24,331 line:-2
在这个
SpriteKit Xcode模板中


611
00:34:24,598 --> 00:34:28,569 line:-1
我们看到软件渲染器的性能


612
00:34:28,835 --> 00:34:29,902 line:-1
降到了每秒15帧


613
00:34:30,603 --> 00:34:34,141 line:-2
而我们在Xcode 11
和macOS Catalina中


614
00:34:34,408 --> 00:34:36,577 line:-1
渲染了同一个app


615
00:34:36,643 --> 00:34:39,246 line:-1
我们看到的是稳定的每秒60帧


616
00:34:39,513 --> 00:34:41,782 line:-2
在场景中渲染了
更多的SpriteKit节点


617
00:34:44,784 --> 00:34:46,719 line:-1
对于更复杂的3D场景


618
00:34:47,087 --> 00:34:49,389 line:-2
比如这个使用了
SceneKit的Fox演示


619
00:34:49,989 --> 00:34:51,891 line:-1
我们看到戏剧性的性能改善


620
00:34:52,226 --> 00:34:55,295 line:-2
而不需要修改
Fox app的源代码


621
00:34:57,097 --> 00:35:01,835 line:-2
现在已经可以并行运行
多个模拟器设备了


622
00:35:02,302 --> 00:35:03,704 line:-1
并拥有实时性能


623
00:35:04,404 --> 00:35:07,040 line:-2
在这同样使用了SceneKit的
Badger演示中


624
00:35:07,374 --> 00:35:10,777 line:-1
以前的几何图形和动画


625
00:35:11,078 --> 00:35:14,348 line:-2
对于渲染单一软件的GL模拟器设备
来说已经是太费劲了


626
00:35:14,882 --> 00:35:16,650 line:-1
更不必说并行运行两个模拟器了


627
00:35:19,820 --> 00:35:21,989 line:-2
对于直接使用Metal的
开发者来说


628
00:35:22,389 --> 00:35:24,324 line:-1
现在已经可以实现Metal开发了


629
00:35:24,491 --> 00:35:26,527 line:-1
并且工作负荷被完全加速了


630
00:35:26,827 --> 00:35:28,929 line:-2
让我们看看
当在模拟器中运行你的app时


631
00:35:29,129 --> 00:35:31,331 line:-1
你的体验发生了哪些变化


632
00:35:31,765 --> 00:35:34,334 line:-1
那么以前你可能会看到一个黑色屏幕


633
00:35:34,735 --> 00:35:37,404 line:-2
但现在
当你在模拟器中运行你的app时


634
00:35:37,671 --> 00:35:41,508 line:-2
你可以在所模拟的全部设备上
运行你的app


635
00:35:45,445 --> 00:35:48,649 line:-2
现在你已经在操作中了解了
让我们具体来看更多的细节


636
00:35:50,417 --> 00:35:52,219 line:-2
如果你看到了我们的
其它Metal会话


637
00:35:52,452 --> 00:35:55,822 line:-2
你就知道今年我们翻新了
我们的查询API功能


638
00:35:56,190 --> 00:35:58,825 line:-2
并引入了
Metal GPU Family API


639
00:35:59,593 --> 00:36:01,295 line:-1
Metal GPU Family API


640
00:36:01,595 --> 00:36:04,064 line:-1
使编写跨平台代码变得更简单了


641
00:36:04,398 --> 00:36:08,468 line:-2
通过把GPU功能
提取到一些不同的层中实现


642
00:36:09,369 --> 00:36:12,472 line:-1
与模拟器相关的三个家族分别是


643
00:36:12,573 --> 00:36:16,443 line:-1
第一个是common


644
00:36:16,677 --> 00:36:18,478 line:-1
包含跨平台可用的全部GPU功能


645
00:36:19,479 --> 00:36:21,081 line:-1
第二个是macOS


646
00:36:21,281 --> 00:36:25,085 line:-2
包含macOS GPU
硬件的特有功能


647
00:36:26,320 --> 00:36:30,090 line:-1
第三个是Apple


648
00:36:30,357 --> 00:36:32,993 line:-2
包含iOS和tvOS GPU硬件
特有的功能


649
00:36:33,293 --> 00:36:35,429 line:-1
因此当在模拟器中运行你的app时


650
00:36:35,562 --> 00:36:39,132 line:-2
你的app可以使用来自
MTLGPUFamilyApple2的功能


651
00:36:39,633 --> 00:36:43,637 line:-2
也包括来自
MTLGPUFamilyCommon1的功能


652
00:36:44,938 --> 00:36:47,908 line:-1
这个支持在全部模拟器设备上通用


653
00:36:49,443 --> 00:36:53,514 line:-2
因此让我们了解一下在模拟器中
是否真的可运行你的iOS app


654
00:36:54,281 --> 00:36:59,186 line:-2
以前 你的app在一个OpenGL ES
软件渲染器上进行渲染


655
00:36:59,386 --> 00:37:03,624 line:-1
并且它没有任何GPU硬件加速


656
00:37:04,157 --> 00:37:06,994 line:-2
但现在在Xcode 11
和macOS Catalina中


657
00:37:07,361 --> 00:37:11,632 line:-2
好消息是可以在模拟器中
使用Metal API了


658
00:37:12,299 --> 00:37:15,969 line:-2
并且也能使用所有使用了
Metal的Apple框架


659
00:37:17,137 --> 00:37:20,707 line:-2
但它不仅仅是能用了
还有GPU加速


660
00:37:21,475 --> 00:37:25,279 line:-2
这意味着你的iOS app
针对UI 2D或3D图形


661
00:37:25,546 --> 00:37:28,015 line:-1
所创建的全部命令


662
00:37:28,515 --> 00:37:32,352 line:-2
都从iOS Metal迁移到了
macOS Metal中


663
00:37:33,120 --> 00:37:35,355 line:-1
并且这种翻译允许你


664
00:37:35,622 --> 00:37:38,292 line:-2
在你的系统上充分利用
底层的Mac GPU


665
00:37:39,259 --> 00:37:41,361 line:-1
但这确实伴随着一些警告


666
00:37:41,895 --> 00:37:44,264 line:-1
其中一个就是你看到的性能


667
00:37:44,331 --> 00:37:46,200 line:-1
可能与实际设备的性能不一样


668
00:37:47,234 --> 00:37:48,769 line:-1
因此你所看到的图形


669
00:37:48,836 --> 00:37:51,705 line:-1
将是底层Mac GPU的性能


670
00:37:52,439 --> 00:37:56,376 line:-2
并且模拟器设备
并不是真正的iOS GPU仿真器


671
00:37:57,311 --> 00:38:00,214 line:-2
因此如果你在速度非常快的
Mac Pro上


672
00:38:00,547 --> 00:38:02,516 line:-1
运行一个iPhone 6s模拟器


673
00:38:03,016 --> 00:38:06,620 line:-2
你所看到的性能
与你在实际设备上


674
00:38:06,820 --> 00:38:08,922 line:-1
成功运行app的性能不一样


675
00:38:09,489 --> 00:38:11,091 line:-1
那么一如既往 请确保直接在设备上


676
00:38:11,458 --> 00:38:13,827 line:-1
配置并优化你的app


677
00:38:14,061 --> 00:38:16,964 line:-1
在你发布app之前


678
00:38:18,398 --> 00:38:20,033 line:-1
还有一件事要考虑


679
00:38:20,133 --> 00:38:23,971 line:-2
就是macOS和iOS
拥有不同的存储模式


680
00:38:24,972 --> 00:38:29,476 line:-2
iOS支持私有、共享
和不耗内存纹理


681
00:38:30,110 --> 00:38:33,080 line:-1
而Mac支持私有和托管纹理


682
00:38:34,014 --> 00:38:38,919 line:-2
然而原生macOS设备不支持
共享和不耗内存纹理


683
00:38:39,286 --> 00:38:41,188 line:-1
但在模拟器中却支持它们


684
00:38:42,222 --> 00:38:45,259 line:-1
关于共享存储还有一些其它特殊情况


685
00:38:45,659 --> 00:38:48,829 line:-2
但首先让我们回顾一下
共享存储是如何运作的


686
00:38:50,497 --> 00:38:54,968 line:-2
当你用共享存储模式
创建一个iOS纹理时


687
00:38:55,435 --> 00:38:57,604 line:-1
这意味着你的纹理


688
00:38:57,905 --> 00:39:00,140 line:-2
既可以在CPU又可以在GPU上
进行修改


689
00:39:01,108 --> 00:39:05,045 line:-2
因此如果你的app想在CPU上
初始化这个纹理


690
00:39:05,812 --> 00:39:10,350 line:-2
然后把纹理绑定到一个渲染器上
或计算在GPU上读取的编码器


691
00:39:11,118 --> 00:39:13,887 line:-1
你可以在命令缓冲器完成后


692
00:39:14,821 --> 00:39:17,591 line:-1
直接在GPU上修改同样的纹理


693
00:39:18,091 --> 00:39:20,027 line:-1
然后在CPU上重复那些修改


694
00:39:20,327 --> 00:39:23,197 line:-2
并且你的app不需要担心
任何内存同步化


695
00:39:23,664 --> 00:39:26,800 line:-2
因为在iOS上
它是一个统一的内存模型


696
00:39:28,969 --> 00:39:30,437 line:-1
因此在模拟器中


697
00:39:30,904 --> 00:39:34,708 line:-2
对于多样本、
深度模板和线性纹理来说


698
00:39:35,409 --> 00:39:39,413 line:-1
这些纹理类型必须在私有存储中创建


699
00:39:40,147 --> 00:39:44,251 line:-2
然而在实际的iOS设备上
这些类型必须在共享存储中


700
00:39:45,185 --> 00:39:47,521 line:-2
因此你的app可能需要一个
仅模拟器使用的路径


701
00:39:48,155 --> 00:39:50,824 line:-1
如果这些纹理需要CPU权限


702
00:39:51,558 --> 00:39:52,526 line:-1
对于绝大多数人来说


703
00:39:53,060 --> 00:39:55,963 line:-2
你可以直接在你的GPU命令中
初始化这些纹理类型并使用它们


704
00:39:56,163 --> 00:40:00,634 line:-1
因此这不会影响你的app


705
00:40:00,701 --> 00:40:03,036 line:-1
它们应该已经是私有纹理了


706
00:40:03,637 --> 00:40:07,574 line:-2
但如果其中一个纹理
确实需要CPU权限


707
00:40:07,741 --> 00:40:09,843 line:-1
让我们了解一下需要进行哪些修改


708
00:40:10,777 --> 00:40:13,947 line:-2
那么作为一个提醒
如果你在私有内存中创建了一个纹理


709
00:40:14,381 --> 00:40:17,150 line:-1
那个纹理将没有CPU权限


710
00:40:17,751 --> 00:40:20,921 line:-1
它只能由GPU修改并由GPU读取


711
00:40:21,755 --> 00:40:24,858 line:-2
因此如果你的app
在CPU上读写纹理


712
00:40:25,158 --> 00:40:28,161 line:-1
你需要一个中间共享资源来实现


713
00:40:29,196 --> 00:40:32,933 line:-2
因此首先我们要创建一个共享缓冲器
或一个共享纹理


714
00:40:33,800 --> 00:40:37,905 line:-2
然后为了复制这个纹理创建一个
BlitCommandEncoder


715
00:40:38,372 --> 00:40:42,776 line:-2
在这种情况下你可以
从共享缓冲器复制到私有纹理


716
00:40:43,243 --> 00:40:46,747 line:-1
或从私有纹理复制到共享缓冲器


717
00:40:47,614 --> 00:40:50,317 line:-1
让我们看一下源代码


718
00:40:51,585 --> 00:40:56,290 line:-2
在这段代码示例中
我们看到已经创建了深度模板纹理


719
00:40:56,456 --> 00:40:58,425 line:-2
并且我们想在CPU上
对它进行初始化


720
00:41:00,894 --> 00:41:04,731 line:-2
因此首先 我们要在模拟器中
把存储模式修改为仅私有


721
00:41:05,365 --> 00:41:07,334 line:-1
然而我们并没有处于模拟环境


722
00:41:07,401 --> 00:41:10,070 line:-1
我们希望仍使用共享存储模式


723
00:41:11,905 --> 00:41:14,708 line:-2
然后我们用修改了的
textureDescriptor创建纹理


724
00:41:17,244 --> 00:41:19,513 line:-1
然后在模拟环境中


725
00:41:19,913 --> 00:41:22,349 line:-1
为了初始化这个私有纹理


726
00:41:22,716 --> 00:41:24,251 line:-1
我们首先要创建一个共享缓冲器


727
00:41:24,985 --> 00:41:28,522 line:-2
对于这个共享缓冲器
我们将在CPU上对它进行初始化


728
00:41:28,589 --> 00:41:30,757 line:-2
使用你想在你的私有纹理中
看到的数据


729
00:41:31,225 --> 00:41:34,027 line:-1
最后我们把共享资源


730
00:41:34,494 --> 00:41:35,729 line:-1
传输到私有纹理中


731
00:41:37,030 --> 00:41:39,032 line:-1
然后如果你仍在


732
00:41:39,399 --> 00:41:41,034 line:-1
实际的iOS设备上运行


733
00:41:41,268 --> 00:41:43,470 line:-2
我们想做与你之前所做的操作
一模一样的操作


734
00:41:43,670 --> 00:41:47,474 line:-2
在CPU上初始化那个纹理
并避免这种不必要的传输


735
00:41:49,042 --> 00:41:52,646 line:-2
从这一点来看
这个纹理的使用完全一样


736
00:41:52,846 --> 00:41:55,349 line:-1
无论你是在实际的iOS设备上运行


737
00:41:55,682 --> 00:41:56,650 line:-1
或是在模拟器中运行


738
00:41:56,884 --> 00:41:59,453 line:-1
你所有的GPU命令必须完全相同


739
00:42:00,654 --> 00:42:03,757 line:-2
那么在模拟器中
可能还需要对你的app


740
00:42:04,057 --> 00:42:05,993 line:-1
做一些其它修改


741
00:42:06,093 --> 00:42:07,761 line:-1
我们有完整文档


742
00:42:07,995 --> 00:42:09,229 line:-1
描述了那些小修改


743
00:42:09,696 --> 00:42:12,566 line:-1
并且我们还有示例代码 你可以下载


744
00:42:12,799 --> 00:42:16,703 line:-1
来了解如何把app搬运到模拟器中


745
00:42:18,572 --> 00:42:21,041 line:-2
我希望你今天学到了
关于模拟器的新知识


746
00:42:21,508 --> 00:42:25,879 line:-2
我们首先回顾了iOS、
watchOS和tvOS用户空间


747
00:42:25,946 --> 00:42:27,414 line:-1
在macOS Kernel上运行


748
00:42:28,182 --> 00:42:31,151 line:-1
并且模拟器对于跨设备和跨运行时间


749
00:42:31,485 --> 00:42:33,453 line:-1
测试app来说至关重要


750
00:42:34,288 --> 00:42:36,557 line:-2
我们了解了
xcrun simctl强大功能


751
00:42:36,857 --> 00:42:40,360 line:-2
以及如何通过模拟器
给全部测试编写脚本


752
00:42:41,161 --> 00:42:43,730 line:-1
最后我们了解了GPU加速


753
00:42:44,031 --> 00:42:46,400 line:-2
通过模拟器中的Metal
每个人都能用


754
00:42:46,600 --> 00:42:49,503 line:-2
并且还可以在模拟器中
进行Metal开发


755
00:42:50,838 --> 00:42:54,341 line:-2
如果你有其它疑问
请访问演讲网站


756
00:42:54,641 --> 00:42:56,777 line:-2
谢谢 希望你在本周余下的
时间里过得愉快

