1
00:00:06,640 --> 00:00:10,544 line:0
（现代macOS网络扩展
将内核从网络内核扩展中移除）


2
00:00:13,981 --> 00:00:14,815 line:-1
大家好


3
00:00:14,882 --> 00:00:18,018 line:-2
欢迎参加
现代macOS网络扩展演讲


4
00:00:18,385 --> 00:00:19,553 line:-1
我是Jamie Wood


5
00:00:19,620 --> 00:00:20,654 line:-1
我是Apple的一名软件工程师


6
00:00:21,221 --> 00:00:23,524 line:-1
致力于因特网技术


7
00:00:24,191 --> 00:00:25,626 line:-1
今天能来到这里我感到非常激动


8
00:00:25,692 --> 00:00:29,162 line:-2
我要与大家分享一些非常棒、
非常强大的新API


9
00:00:29,396 --> 00:00:31,665 line:-2
我们已经添加到
macOS Catalina中


10
00:00:31,932 --> 00:00:35,802 line:-1
可以让你创建扩展并自定义


11
00:00:35,869 --> 00:00:38,105 line:-1
macOS网络功能的app


12
00:00:38,172 --> 00:00:40,807 line:-1
而不需要使用网络内核扩展


13
00:00:42,476 --> 00:00:43,544 line:-1
开始


14
00:00:43,610 --> 00:00:46,046 line:-1
我想感谢你们所提供的反馈


15
00:00:46,780 --> 00:00:49,583 line:-1
在过去几年的WWDC


16
00:00:49,950 --> 00:00:52,886 line:-1
我们要求你们指出错误


17
00:00:52,953 --> 00:00:56,523 line:-2
并给我们提供
关于你如何在你的app中


18
00:00:56,590 --> 00:00:58,058 line:-1
使用网络内核扩展的反馈


19
00:00:59,059 --> 00:01:00,827 line:-1
我们收到了大量很棒的反馈


20
00:01:00,994 --> 00:01:02,062 line:-1
我们接受了你们的反馈


21
00:01:02,129 --> 00:01:06,667 line:-1
我们提出了一组app类别


22
00:01:07,601 --> 00:01:10,137 line:-2
在macOS Mojave
以及更早的版本上


23
00:01:10,204 --> 00:01:12,873 line:-1
你确实需要使用网络内核扩展


24
00:01:12,940 --> 00:01:15,776 line:-1
来完全实施这些类别内的app


25
00:01:17,077 --> 00:01:20,013 line:-1
今天我想带你们一起


26
00:01:20,080 --> 00:01:21,815 line:-1
了解每一个app类别


27
00:01:21,882 --> 00:01:26,587 line:-2
并讲一下我们在macOS Catalina中
所添加的新API


28
00:01:26,653 --> 00:01:29,456 line:-2
那些新API会帮助你创建
属于这些类别内的app


29
00:01:29,523 --> 00:01:32,092 line:-1
而不需要使用网络内核扩展


30
00:01:33,093 --> 00:01:34,695 line:-1
让我们开始讲吧


31
00:01:35,562 --> 00:01:38,098 line:-1
首先我要讲内容过滤器app


32
00:01:39,299 --> 00:01:43,470 line:-2
内容过滤器app的一个例子就是
个人防火墙app


33
00:01:43,904 --> 00:01:45,939 line:-1
这些app在系统中流动


34
00:01:46,006 --> 00:01:48,475 line:-1
检查网络流量


35
00:01:48,542 --> 00:01:52,112 line:-2
并阻塞流量 这在某种程度上
被视为是一种恶意行为


36
00:01:53,046 --> 00:01:58,118 line:-2
内容过滤器app的另一个例子是
家长控制app


37
00:01:58,919 --> 00:02:03,524 line:-1
这种app主要关注网络浏览行为


38
00:02:03,590 --> 00:02:05,459 line:-1
并阻止访问


39
00:02:05,526 --> 00:02:08,161 line:-1
被视为不适合儿童看的网站


40
00:02:09,162 --> 00:02:12,132 line:-1
内容筛选器app的另一个例子是


41
00:02:12,666 --> 00:02:15,802 line:-1
一种不会主动阻止任何网络流量


42
00:02:15,869 --> 00:02:20,140 line:-2
而是只记录Mac上的
网络行为的app


43
00:02:20,607 --> 00:02:25,145 line:-1
从而稍后对那种无行为日志进行分析


44
00:02:25,379 --> 00:02:29,149 line:-1
比如决定何时传输一些敏感数据


45
00:02:30,684 --> 00:02:33,220 line:-1
在我们讲我们新添加的


46
00:02:33,287 --> 00:02:35,656 line:-2
能帮助你创建内容过滤器app的
API之前


47
00:02:36,657 --> 00:02:39,560 line:-1
我要先讲内容过滤器app的


48
00:02:39,626 --> 00:02:41,862 line:-1
一些特别的运行时要求


49
00:02:42,563 --> 00:02:46,934 line:-2
内容过滤器app中的
过滤网络流量的代码


50
00:02:47,234 --> 00:02:49,870 line:-1
有一些特定的运行时要求


51
00:02:50,504 --> 00:02:53,106 line:-1
代码需要无时无刻运行


52
00:02:53,173 --> 00:02:54,007 line:-1
并且甚至


53
00:02:54,074 --> 00:02:57,177 line:-1
当没有用户登录系统时也要运行


54
00:02:57,711 --> 00:03:00,614 line:-1
比如在家长控制app中


55
00:03:00,948 --> 00:03:02,482 line:-1
app需要发挥


56
00:03:02,549 --> 00:03:06,019 line:-1
阻止访问不合适的网站的功能


57
00:03:06,086 --> 00:03:09,189 line:-1
即使你的app实际上并没有在运行


58
00:03:10,390 --> 00:03:12,059 line:-1
在个人防火墙app中


59
00:03:12,125 --> 00:03:14,061 line:-1
app需要发挥


60
00:03:14,127 --> 00:03:17,497 line:-1
防止Mac遭受


61
00:03:17,564 --> 00:03:19,166 line:-1
来自网络的攻击的作用


62
00:03:19,233 --> 00:03:21,602 line:-1
即使没有用户登录到系统中


63
00:03:22,569 --> 00:03:26,240 line:-1
当你在内核扩展内


64
00:03:26,306 --> 00:03:28,642 line:-1
实施内容过滤器代码时


65
00:03:28,709 --> 00:03:30,544 line:-1
很明显满足运行时要求


66
00:03:30,611 --> 00:03:32,513 line:-1
因为你的代码是在内核中运行


67
00:03:32,579 --> 00:03:34,481 line:-1
因此它是一直在运行


68
00:03:34,548 --> 00:03:37,751 line:-2
并且甚至当没有用户登录到系统时
也在运行


69
00:03:39,186 --> 00:03:42,890 line:-2
因此 为了在用户空间中
满足这些运行时要求


70
00:03:42,956 --> 00:03:46,326 line:-2
我们在macOS Catalina中
引入了一种新技术


71
00:03:46,393 --> 00:03:47,961 line:-1
叫做系统扩展


72
00:03:49,663 --> 00:03:53,133 line:-2
现在你很可能对app扩展
非常熟悉了


73
00:03:53,200 --> 00:03:57,404 line:-2
app扩展是一堆你能
在macOS上使用的可执行代码


74
00:03:57,471 --> 00:04:02,643 line:-2
用于扩展和自定义macOS
用户体验的方方面面


75
00:04:03,477 --> 00:04:04,711 line:-1
那么系统扩展


76
00:04:04,778 --> 00:04:07,247 line:-1
与app扩展有许多相似之处


77
00:04:07,581 --> 00:04:09,049 line:-1
跟app扩展一样


78
00:04:09,116 --> 00:04:11,919 line:-1
系统扩展被打包到你的app内


79
00:04:12,486 --> 00:04:15,722 line:-1
它们完全由操作系统进行管理


80
00:04:16,055 --> 00:04:17,024 line:-1
这很棒


81
00:04:17,089 --> 00:04:20,726 line:-2
因为这意味着你不需要写任何
自定义安装器数据包


82
00:04:20,793 --> 00:04:24,198 line:-2
从而把系统扩展放到文件系统中的
某个位置


83
00:04:24,831 --> 00:04:26,333 line:-1
并且你不需要写卸载程序


84
00:04:26,400 --> 00:04:28,402 line:-1
从而当用户卸载你的app时


85
00:04:28,468 --> 00:04:30,270 line:-1
移除系统扩展


86
00:04:31,605 --> 00:04:33,407 line:-1
同时你不需要担心


87
00:04:33,473 --> 00:04:36,677 line:-1
何时开始和停止系统扩展


88
00:04:36,743 --> 00:04:40,747 line:-1
操作系统会根据需要运行系统扩展


89
00:04:43,717 --> 00:04:46,720 line:-2
app扩展与系统扩展的另一个
相似之处是


90
00:04:46,787 --> 00:04:51,158 line:-1
系统扩展的开发和调试非常简单


91
00:04:51,225 --> 00:04:55,529 line:-2
你可以使用用于开发
其它任何常规app的常规工具…


92
00:04:55,596 --> 00:04:58,298 line:-2
Xcode、LLDB、
Instruments


93
00:05:01,768 --> 00:05:03,937 line:-1
这与内核扩展不同


94
00:05:04,004 --> 00:05:08,108 line:-2
众所周知 内核扩展的开发和调试
都非常困难


95
00:05:08,509 --> 00:05:12,880 line:-2
在你开发扩展时
你必须频繁地进行重启


96
00:05:12,946 --> 00:05:14,348 line:-1
要调试内核扩展


97
00:05:14,414 --> 00:05:16,483 line:-1
你必须有两台独立的机器


98
00:05:16,550 --> 00:05:19,520 line:-2
并且如果你设法把这两台机器
连接到一起


99
00:05:19,586 --> 00:05:23,123 line:-2
并将它们放到内核扩展代码中的
调试器中


100
00:05:23,190 --> 00:05:25,192 line:-1
单步执行你的源代码


101
00:05:25,259 --> 00:05:28,328 line:-2
是个非常冒险的提议
如果它能起作用的话


102
00:05:30,664 --> 00:05:32,132 line:-1
与app扩展不同


103
00:05:32,199 --> 00:05:35,068 line:-1
系统扩展的运行


104
00:05:35,135 --> 00:05:36,336 line:-1
与任何用户登录到系统中无关


105
00:05:36,904 --> 00:05:39,439 line:-1
因此系统扩展确实是


106
00:05:39,506 --> 00:05:41,808 line:-1
运行网络处理代码的理想场所


107
00:05:41,875 --> 00:05:43,343 line:-1
比如内容过滤器代码


108
00:05:46,513 --> 00:05:49,316 line:-1
要了解关于系统扩展


109
00:05:49,383 --> 00:05:52,386 line:-2
以及系统扩展的其它用例的
信息和详情


110
00:05:52,452 --> 00:05:54,821 line:-1
请参看本周稍早时候的一场演讲


111
00:05:54,888 --> 00:05:57,357 line:-1
系统扩展和DriverKit


112
00:05:59,860 --> 00:06:00,794 line:-1
好的


113
00:06:00,861 --> 00:06:03,163 line:-1
你可以使用系统扩展


114
00:06:03,230 --> 00:06:06,800 line:-1
实施属于这些类别的不同app


115
00:06:06,867 --> 00:06:09,002 line:-2
我在这里列出了这些类别…
内容过滤器app


116
00:06:09,069 --> 00:06:10,737 line:-1
透明代理app


117
00:06:10,804 --> 00:06:13,373 line:-1
DNS代理app和VPN app


118
00:06:14,141 --> 00:06:17,611 line:-2
现在我想具体讲一下
我们所添加的API


119
00:06:17,678 --> 00:06:20,380 line:-2
这些API可以帮助你们实施
内容过滤器app


120
00:06:24,885 --> 00:06:28,989 line:-2
内容过滤器API
是在网络扩展框架中


121
00:06:29,556 --> 00:06:35,395 line:-2
我们在iOS 9中
首次引入了这些API


122
00:06:35,829 --> 00:06:37,764 line:-2
我们在
macOS Catalina中


123
00:06:37,831 --> 00:06:41,034 line:-2
把这些API带过来
并使它们在Mac上可用


124
00:06:41,101 --> 00:06:42,836 line:-1
并添加了一堆很棒的新改进


125
00:06:42,903 --> 00:06:45,405 line:-1
使这些API变得更强大


126
00:06:47,040 --> 00:06:49,076 line:-1
让我们看一下内容过滤器API


127
00:06:49,142 --> 00:06:50,944 line:-1
以及如何在app中使用它们


128
00:06:52,513 --> 00:06:54,147 line:-1
在你的主UI app中


129
00:06:54,214 --> 00:06:58,952 line:-2
你使用NEFilterManager
来创建内容过滤器配置


130
00:06:59,453 --> 00:07:00,687 line:-1
内容过滤器配置


131
00:07:00,754 --> 00:07:02,890 line:-1
在系统中注册你的内容过滤器


132
00:07:02,956 --> 00:07:05,425 line:-1
从而系统了解如何运行你的过滤器


133
00:07:07,928 --> 00:07:09,563 line:-1
你还创建一个系统扩展


134
00:07:09,630 --> 00:07:12,132 line:-1
实际过滤网络内容的代码


135
00:07:12,199 --> 00:07:13,433 line:-1
就要在系统扩展中运行


136
00:07:14,201 --> 00:07:15,469 line:-1
内容过滤器API


137
00:07:15,536 --> 00:07:20,073 line:-1
允许你在两个不同的层过滤网络内容


138
00:07:20,140 --> 00:07:22,276 line:-1
你可以在数据流层过滤内容


139
00:07:22,342 --> 00:07:24,444 line:-1
或在数据包层过滤内容


140
00:07:25,445 --> 00:07:27,347 line:-1
对于数据流层过滤


141
00:07:27,414 --> 00:07:31,885 line:-1
你创建任意数据过滤提供器的子类


142
00:07:33,687 --> 00:07:37,558 line:-2
一旦你的内容过滤器配置在系统中
进行了注册


143
00:07:37,624 --> 00:07:39,459 line:-1
并且过滤器已经启动并运行


144
00:07:39,927 --> 00:07:45,966 line:-1
系统将在系统上创建


145
00:07:46,033 --> 00:07:47,467 line:-1
网络数据的新TCP和UDP数据流


146
00:07:48,635 --> 00:07:53,173 line:-2
传给NEFilterDataProvider子类的
那些数据流


147
00:07:53,240 --> 00:07:56,476 line:-2
被表达为单独的
NEFilterFlowObjects


148
00:07:58,378 --> 00:08:01,448 line:-1
然后子类负责


149
00:08:01,515 --> 00:08:06,486 line:-2
对每个单独的数据流
做出允许或放弃的决定


150
00:08:07,721 --> 00:08:10,023 line:-2
你可以在数据流的生命周期中的
任意时间点上


151
00:08:10,090 --> 00:08:11,959 line:-1
对每个数据流做出这种决定


152
00:08:12,025 --> 00:08:14,828 line:-2
你可以在数据流首次打开时
就做出决定


153
00:08:15,229 --> 00:08:18,932 line:-2
或你可以等看到数据流中一定量的
数据之后再做决定


154
00:08:22,035 --> 00:08:25,572 line:-2
请注意
NEFilterDataProvider类


155
00:08:25,639 --> 00:08:27,975 line:-1
提供数据流的只读权限


156
00:08:29,276 --> 00:08:33,514 line:-2
你不能修改数据流
包括数据流中的任意数据


157
00:08:34,681 --> 00:08:39,953 line:-2
默认情况下
系统将把所有TCP和UDP数据


158
00:08:40,020 --> 00:08:42,523 line:-2
传到
NEFilterDataProvider子类中


159
00:08:43,590 --> 00:08:45,459 line:-1
如果这并不是你想要的…


160
00:08:45,526 --> 00:08:48,495 line:-1
比如 如果你正在写家长控制app


161
00:08:48,562 --> 00:08:51,064 line:-1
那么你只对Web流量感兴趣


162
00:08:51,131 --> 00:08:52,699 line:-1
你使用NEFilter设置


163
00:08:52,766 --> 00:08:55,202 line:-1
创建一组规则


164
00:08:55,269 --> 00:08:59,273 line:-2
告知系统你想要在过滤器中看到的
数据流


165
00:09:01,842 --> 00:09:05,546 line:-1
那么数据流层过滤就是这样运作的


166
00:09:07,714 --> 00:09:10,551 line:-1
如果你想在数据包层过滤流量


167
00:09:11,618 --> 00:09:14,555 line:-1
你要在系统扩展中


168
00:09:15,189 --> 00:09:16,557 line:-2
创建NEFilterPacketProvider的
一个子类


169
00:09:17,891 --> 00:09:20,561 line:-1
因为网络数据包会流过系统


170
00:09:20,928 --> 00:09:27,100 line:-2
系统将把那些数据包作为
独立数据包对象


171
00:09:27,167 --> 00:09:29,570 line:-2
传到你的
FilterPacketProvider子类中


172
00:09:30,871 --> 00:09:35,576 line:-2
你可以对每个独立数据包
做出允许或放弃的决定


173
00:09:36,510 --> 00:09:40,581 line:-1
好的 这是关于内容过滤器API


174
00:09:40,781 --> 00:09:42,583 line:-2
以及如何在你的app中使用它们的
简要概览


175
00:09:44,017 --> 00:09:46,353 line:-1
接下来我会给你简单演示一个app


176
00:09:46,420 --> 00:09:49,256 line:-1
它使用了系统扩展


177
00:09:49,323 --> 00:09:53,594 line:-2
和内容过滤器API
来实施一个防火墙


178
00:10:00,133 --> 00:10:02,603 line:-1
我的这个app功能很简单


179
00:10:03,804 --> 00:10:05,539 line:-1
我会提示用户


180
00:10:05,606 --> 00:10:12,613 line:-2
允许或拒绝8888端口上的
TCP连接


181
00:10:13,146 --> 00:10:16,617 line:-2
让我继续并运行app
让你看看它是如何运作的


182
00:10:18,252 --> 00:10:21,622 line:0
这个app叫做Simple Firewall
继续并运行app


183
00:10:22,523 --> 00:10:25,659 line:0
你可以看到这是我的UI指示器


184
00:10:25,726 --> 00:10:27,694 line:0
红点表示内容过滤器


185
00:10:27,761 --> 00:10:29,029 line:0
现在并没有在运行中


186
00:10:29,096 --> 00:10:31,164 line:-1
因此我要继续并点击开始


187
00:10:33,000 --> 00:10:34,835 line:0
好的 我得到了来自系统的对话框


188
00:10:34,902 --> 00:10:38,138 line:0
表明我的系统扩展


189
00:10:38,205 --> 00:10:39,106 line:0
被阻止运行


190
00:10:39,573 --> 00:10:42,009 line:0
现在系统扩展非常强大


191
00:10:42,075 --> 00:10:46,246 line:0
它们可以让你在系统上做许多事


192
00:10:46,313 --> 00:10:49,950 line:0
包括查看系统中流过的网络流量


193
00:10:50,017 --> 00:10:54,188 line:0
那么…我们想确保
在允许系统扩展运行之前


194
00:10:54,254 --> 00:10:56,657 line:0
我们得到了用户的允许


195
00:10:57,291 --> 00:10:59,793 line:0
因此我要继续并打开安全性首选项


196
00:11:00,894 --> 00:11:04,665 line:0
这将把我带到
安全性和隐私性首选项面板中


197
00:11:04,865 --> 00:11:07,201 line:0
我要提供我的管理员认证信息


198
00:11:07,968 --> 00:11:11,672 line:0
继续并点击允许
从而允许运行我的系统扩展


199
00:11:14,241 --> 00:11:16,543 line:0
网络扩展框架还会提示用户


200
00:11:16,610 --> 00:11:19,479 line:0
确认他们希望允许系统扩展


201
00:11:19,546 --> 00:11:21,682 line:0
在Mac上过滤网络流量


202
00:11:22,616 --> 00:11:24,117 line:0
那么继续并点击允许


203
00:11:24,718 --> 00:11:26,720 line:0
好的 现在返回到
Simple Firewall中


204
00:11:26,787 --> 00:11:31,258 line:0
我们可以看到内容过滤器正在运行


205
00:11:31,325 --> 00:11:36,563 line:0
让我们继续并在我的本地Mac上
连接8888端口


206
00:11:36,630 --> 00:11:37,698 line:-1
看看会发生什么


207
00:11:38,365 --> 00:11:40,701 line:-2
我正在端口8888上
运行Web服务器


208
00:11:41,401 --> 00:11:45,239 line:-1
因此我要继续打开Safari


209
00:11:45,305 --> 00:11:47,975 line:-2
我已经把它添加到
我的本地Web服务器上


210
00:11:48,041 --> 00:11:49,243 line:-1
我点击它


211
00:11:49,776 --> 00:11:53,113 line:-2
网页开始加载
但你可以看到它停在这了


212
00:11:53,180 --> 00:11:56,683 line:-2
我非常确定
在Simple Firewall app中


213
00:11:56,750 --> 00:12:00,120 line:-2
有一个对话框告知我
在8888端口上有个新连接


214
00:12:00,187 --> 00:12:04,358 line:-1
并请求我允许或拒绝


215
00:12:04,725 --> 00:12:07,728 line:-2
那么我要点击允许
然后网页就加载出来了


216
00:12:09,530 --> 00:12:11,732 line:-1
很酷 我的app正在工作中


217
00:12:12,633 --> 00:12:15,869 line:-2
现在让我们继续并看一下
Simple Firewall中的一些代码


218
00:12:15,936 --> 00:12:18,739 line:-1
看看它是如何利用系统扩展


219
00:12:19,139 --> 00:12:21,742 line:-1
和内容过滤器API的


220
00:12:22,342 --> 00:12:26,480 line:-2
在这里你可以看到我的项目
我有两个不同的Targets


221
00:12:26,547 --> 00:12:30,551 line:-2
我有SimpleFirewall Target
这是我的主UI app


222
00:12:31,118 --> 00:12:34,354 line:-1
我有SimpleFirewallExtension Target


223
00:12:34,421 --> 00:12:36,757 line:-1
这是我的系统扩展


224
00:12:40,260 --> 00:12:43,363 line:-1
让我们先看一下app中的一些代码


225
00:12:44,765 --> 00:12:49,570 line:-2
我们要看一下
我的主视图控制器类的实施


226
00:12:50,037 --> 00:12:54,408 line:-2
我想先从
startFilter函数看起


227
00:12:54,975 --> 00:12:57,110 line:-2
当我在SimpleFirewall UI中
点击开始按钮时


228
00:12:57,177 --> 00:13:00,781 line:-1
调用这个函数


229
00:13:01,882 --> 00:13:03,684 line:-1
先获取系统扩展的


230
00:13:03,750 --> 00:13:05,452 line:-1
捆绑标识符


231
00:13:05,986 --> 00:13:10,791 line:-2
并使用那个标识符创建一个系统扩展
activationRequest


232
00:13:14,194 --> 00:13:18,198 line:-2
我把视图控制器对象设为
activationRequest的委托


233
00:13:18,265 --> 00:13:21,335 line:-2
从而当请求完成后
系统会通知视图控制器对象


234
00:13:24,304 --> 00:13:26,707 line:-2
一旦创建好
activationRequest


235
00:13:26,773 --> 00:13:30,444 line:-2
我就把它提交给
OSSystemExtensionManager


236
00:13:30,777 --> 00:13:33,714 line:-1
这就开始激活系统扩展


237
00:13:33,780 --> 00:13:35,516 line:-1
包括提示用户


238
00:13:35,582 --> 00:13:38,819 line:-2
允许SystemExtension
运行 如果必要的话


239
00:13:40,654 --> 00:13:45,459 line:-2
好的 一旦用户允许
SystemExtension运行


240
00:13:46,827 --> 00:13:51,832 line:-2
就会调用视图控制器的请求
didFinishWithResult函数


241
00:13:52,232 --> 00:13:55,369 line:-1
我要确保激活请求已经完成


242
00:13:56,203 --> 00:14:00,807 line:-1
我要继续并创建内容过滤器配置


243
00:14:02,876 --> 00:14:05,312 line:-2
我就是要在这里使用
AnyFilterManager


244
00:14:05,379 --> 00:14:08,849 line:-1
创建过滤器配置并在系统中进行注册


245
00:14:10,250 --> 00:14:11,552 line:-1
在这里你可以看到


246
00:14:11,618 --> 00:14:15,856 line:-1
我正在我的配置上设置一些细节


247
00:14:17,457 --> 00:14:20,961 line:-1
我把过滤器插座设为真


248
00:14:21,028 --> 00:14:23,931 line:-1
这表示我会在数据流层


249
00:14:23,997 --> 00:14:25,532 line:-1
过滤网络流量


250
00:14:26,466 --> 00:14:28,101 line:-1
我把过滤器数据包设为假


251
00:14:28,168 --> 00:14:31,138 line:-1
表明我不会在数据包层


252
00:14:31,205 --> 00:14:32,873 line:-1
过滤网络流量


253
00:14:34,675 --> 00:14:38,178 line:-1
我要继续并启动我的内容过滤器配置


254
00:14:38,245 --> 00:14:40,781 line:-1
然后在系统中注册配置


255
00:14:40,848 --> 00:14:42,883 line:-1
通过调用保存到首选项实现


256
00:14:45,352 --> 00:14:48,188 line:-1
因为启动了内容过滤器配置


257
00:14:48,522 --> 00:14:52,125 line:-2
这将导致系统开启
SystemExtension


258
00:14:52,392 --> 00:14:54,895 line:-1
并开启我的内容过滤器


259
00:14:55,696 --> 00:14:58,432 line:-1
让我们继续并看一下


260
00:14:58,498 --> 00:15:01,902 line:-1
在系统扩展内运行的


261
00:15:01,969 --> 00:15:05,038 line:-2
NEFilterDataProvider
子类的实施


262
00:15:07,474 --> 00:15:10,043 line:-2
这是子类
它叫做FilterDataProvider


263
00:15:10,110 --> 00:15:14,481 line:-2
我已经在这个类中重写了
三个不同的方法…


264
00:15:15,282 --> 00:15:18,919 line:-2
StartFilter、StopFilter
和HandleNewFlow


265
00:15:20,120 --> 00:15:22,923 line:-2
首先让我们看一下
StartFilter


266
00:15:23,991 --> 00:15:28,929 line:-2
当系统开启内容过滤器时
调用这个函数


267
00:15:30,531 --> 00:15:32,833 line:-1
默认情况下


268
00:15:32,900 --> 00:15:37,070 line:-2
系统将把每一个TCP和UDP
数据流都传到我的内容过滤器中


269
00:15:37,137 --> 00:15:39,173 line:-1
我其实并不想这样


270
00:15:39,239 --> 00:15:42,643 line:-1
我只对流入的在我的Mac上


271
00:15:42,709 --> 00:15:45,946 line:-2
连接8888端口的
TCP连接感兴趣


272
00:15:47,347 --> 00:15:50,284 line:-2
因此我要创建一个
NEFilterSettingsObject


273
00:15:50,350 --> 00:15:53,954 line:-1
告知系统我想要看到哪些流量


274
00:15:56,223 --> 00:16:01,595 line:-1
现在我不关心TCP连接来自哪里


275
00:16:01,962 --> 00:16:04,865 line:-1
我也不关心


276
00:16:04,932 --> 00:16:07,301 line:-1
TCP连接要连接到我Mac上的


277
00:16:07,367 --> 00:16:08,535 line:-1
哪个地址


278
00:16:08,836 --> 00:16:11,972 line:-1
我要创建两个NEFilter规则


279
00:16:12,573 --> 00:16:16,710 line:-1
一个有通配符IPv4地址


280
00:16:16,777 --> 00:16:19,980 line:-1
另一个有通配符IPv6地址


281
00:16:21,982 --> 00:16:24,184 line:-1
对于我所创建的每一个过滤器规则


282
00:16:24,251 --> 00:16:26,987 line:-2
我都创建一个
NENetworkRuleObject


283
00:16:27,054 --> 00:16:29,189 line:-1
用于指定我想要查看的数据流的特征


284
00:16:29,256 --> 00:16:32,659 line:-1
我想让过滤器规则与之匹配


285
00:16:34,995 --> 00:16:38,999 line:-2
对于远程网络和远程前缀
我会传递无和零


286
00:16:39,533 --> 00:16:41,668 line:-1
这意味着我的过滤器规则


287
00:16:41,735 --> 00:16:44,872 line:-1
将匹配来自任何地方的流量


288
00:16:44,938 --> 00:16:46,740 line:-1
我不关心它来自哪里


289
00:16:47,207 --> 00:16:48,609 line:-1
对于本地网络


290
00:16:48,675 --> 00:16:51,612 line:-2
我传递一个我使用通配符地址创建的
NWHostEndPoint


291
00:16:51,678 --> 00:16:57,017 line:-1
和一个本地的8888端口


292
00:16:58,852 --> 00:17:03,390 line:-1
好的 那么这意味着我的过滤器规则


293
00:17:03,457 --> 00:17:05,726 line:-1
将匹配所有进来的数据流


294
00:17:05,791 --> 00:17:07,027 line:-1
并在任意地址上连接端口8888


295
00:17:09,997 --> 00:17:15,035 line:-2
我指定一个TCP协议
和一个流入方向


296
00:17:15,536 --> 00:17:18,038 line:-1
我继续并在过滤器数据的动作中


297
00:17:18,105 --> 00:17:20,273 line:-2
创建
NEFilterRuleObject


298
00:17:20,339 --> 00:17:22,409 line:-1
传入NENetworkRule


299
00:17:23,310 --> 00:17:29,550 line:-1
当有新的网络数据流入时


300
00:17:30,651 --> 00:17:32,419 line:-2
如果匹配我在系统上创建的
NENetworkRule


301
00:17:33,554 --> 00:17:37,057 line:-1
系统将根据过滤器数据动作


302
00:17:37,691 --> 00:17:40,060 line:-1
把那个数据流传到我的内容过滤器中


303
00:17:42,129 --> 00:17:44,865 line:-2
好的 一旦我创建好这些
NEFilterRules


304
00:17:44,932 --> 00:17:48,068 line:-2
我会继续并创建我的
NEFilterSettingsObject


305
00:17:48,669 --> 00:17:53,207 line:-1
传入规则并制定允许的默认动作


306
00:17:53,273 --> 00:17:56,443 line:-2
这意味着如果系统上创建了
新的数据流


307
00:17:56,510 --> 00:17:59,012 line:-1
并且它不匹配任何过滤器规则


308
00:17:59,079 --> 00:18:01,682 line:-1
我希望系统允许那个它流过


309
00:18:01,748 --> 00:18:03,784 line:-1
不要把它传给我的内容过滤器


310
00:18:05,419 --> 00:18:06,520 line:-1
我要继续并调用应用


311
00:18:06,587 --> 00:18:09,089 line:-1
从把我的过滤器设置应用到系统中


312
00:18:09,456 --> 00:18:13,160 line:-2
然后 当完成后 我就调用
StartFilterCompletionHandler


313
00:18:13,227 --> 00:18:16,230 line:-2
示意系统我的过滤器现在已经启动
并运行


314
00:18:16,296 --> 00:18:20,100 line:-1
并且已经准备好处理网络数据流了


315
00:18:21,835 --> 00:18:24,304 line:-2
现在让我们看一下
HandleNewFlow函数


316
00:18:24,371 --> 00:18:26,173 line:-2
当有新数据流创建
并匹配我的过滤器规则时


317
00:18:26,240 --> 00:18:30,577 line:-1
将调用这个函数


318
00:18:32,379 --> 00:18:34,448 line:-1
这个函数接受一个参数


319
00:18:34,515 --> 00:18:37,117 line:-2
即表示数据流的
NEFilterFlowObject


320
00:18:38,051 --> 00:18:40,120 line:-1
并返回一个新的数据流裁决


321
00:18:40,187 --> 00:18:42,556 line:-1
示意系统如何处理数据流


322
00:18:43,790 --> 00:18:44,691 line:-1
那么在这里我要做的就是


323
00:18:44,758 --> 00:18:49,129 line:-2
在字典中
把有关数据流的一些细节打包


324
00:18:49,863 --> 00:18:53,734 line:-2
并把那个字典发送到
我的UI app中


325
00:18:53,800 --> 00:18:57,137 line:-1
提示用户允许或拒绝数据流


326
00:18:59,606 --> 00:19:01,575 line:-1
现在获得用户的决策


327
00:19:01,642 --> 00:19:04,011 line:-1
很明显是一个非常异步化的过程


328
00:19:04,077 --> 00:19:06,013 line:-1
当我等待用户做出决策时


329
00:19:06,079 --> 00:19:08,916 line:-2
我要继续并给系统返回一个
暂停的裁决


330
00:19:08,982 --> 00:19:12,052 line:-1
这会告诉OS对这个数据流待决


331
00:19:12,119 --> 00:19:15,155 line:-2
不要采取进一步行动
除非我恢复数据流


332
00:19:16,790 --> 00:19:18,325 line:-1
一旦用户做出决策


333
00:19:18,392 --> 00:19:21,962 line:-2
我会创建一个新的数据流裁决
允许或拒绝


334
00:19:22,029 --> 00:19:24,164 line:-1
取决于用户所做出的决策


335
00:19:24,665 --> 00:19:28,168 line:-1
然后我就通过新裁决调用恢复数据流


336
00:19:30,103 --> 00:19:33,707 line:-1
好的 这是一个使用系统扩展


337
00:19:33,774 --> 00:19:38,779 line:-1
和内容过滤器API


338
00:19:39,079 --> 00:19:41,915 line:-1
来实施简单防火墙的一个示例app


339
00:19:46,086 --> 00:19:49,189 line:-1
接下来我要讲透明代理app


340
00:19:50,224 --> 00:19:52,926 line:-1
透明代理app的其中一个例子是


341
00:19:53,260 --> 00:19:55,195 line:-1
云安全app


342
00:19:55,662 --> 00:19:59,499 line:-1
这些app把通往指定网站的流量


343
00:19:59,800 --> 00:20:01,201 line:-1
转移到云服务中


344
00:20:01,435 --> 00:20:02,302 line:-1
那个云服务


345
00:20:02,369 --> 00:20:05,038 line:-1
对流量应用一些额外的安全性检查


346
00:20:05,105 --> 00:20:08,375 line:-1
比如额外的用户认证或授权


347
00:20:10,344 --> 00:20:13,680 line:-1
透明代理app的另一个例子是


348
00:20:13,747 --> 00:20:16,817 line:-1
对流量应用一些特殊转换的app


349
00:20:16,884 --> 00:20:21,154 line:-1
比如对网络流量


350
00:20:21,221 --> 00:20:24,024 line:-1
或对以某种特殊方式


351
00:20:24,091 --> 00:20:26,226 line:-2
从Web上下载的缓存资源
应用加密算法


352
00:20:27,461 --> 00:20:31,265 line:-1
透明代理app还可以在单一连接上


353
00:20:31,331 --> 00:20:33,934 line:-1
多路传输多个网络流量数据流


354
00:20:34,635 --> 00:20:38,138 line:-2
或它们可以使用一些
自定义的特殊协议


355
00:20:38,205 --> 00:20:39,907 line:-1
那会减少网络延迟


356
00:20:40,207 --> 00:20:44,111 line:-2
有许多关于透明代理app的
非常有意思的用例


357
00:20:44,178 --> 00:20:47,214 line:-2
因此我要很激动地告诉你们
在macOS Catalina中


358
00:20:47,281 --> 00:20:50,784 line:-2
我们已经在网络扩展框架中
引入了一些新API


359
00:20:50,851 --> 00:20:53,720 line:-1
允许你创建透明代理app


360
00:20:53,787 --> 00:20:55,989 line:-1
而不需要使用内核扩展


361
00:20:57,991 --> 00:21:00,294 line:-1
让我们继续并看一下这些API


362
00:21:00,360 --> 00:21:02,763 line:-2
它们在
NetworkExtensionFramework中


363
00:21:02,829 --> 00:21:05,265 line:-2
让我们看一下如何在你的app中
使用它们


364
00:21:08,769 --> 00:21:10,671 line:-1
在你的主UI app中


365
00:21:11,271 --> 00:21:16,977 line:-2
你使用任意透明代理管理器
来创建透明代理配置


366
00:21:17,044 --> 00:21:19,179 line:-1
并在系统中注册你的透明代理


367
00:21:19,246 --> 00:21:23,283 line:-2
因此你的系统知道如何运行
你的透明代理


368
00:21:25,986 --> 00:21:29,723 line:-2
你还要创建一个系统扩展
你的代理要在系统扩展中运行


369
00:21:30,924 --> 00:21:35,395 line:-1
这些API允许你在数据流层


370
00:21:35,462 --> 00:21:36,763 line:-1
代理网络数据的流动


371
00:21:37,497 --> 00:21:42,002 line:-2
为此 你要创建
NEAppProxyProvider的一个子类


372
00:21:42,336 --> 00:21:44,071 line:-1
与内容过滤器不同


373
00:21:44,137 --> 00:21:48,308 line:-2
默认情况下 系统不会给你的代理
转移任何数据流


374
00:21:49,309 --> 00:21:52,379 line:-2
因此你必须创建一组
NENetworkRules


375
00:21:52,446 --> 00:21:56,316 line:-1
指定你想要代理哪些数据流


376
00:21:58,051 --> 00:22:00,153 line:-1
一旦你的透明代理启动并运行


377
00:22:00,220 --> 00:22:04,324 line:-2
并且你已经安装了
NENetworkRules


378
00:22:05,726 --> 00:22:12,232 line:-2
随着匹配你规则的新的
TCP和UDP数据流的打开


379
00:22:12,299 --> 00:22:16,336 line:-2
这些数据流会被转移到你的
NEAppProxyProvider子类中


380
00:22:16,904 --> 00:22:21,341 line:-2
然后完全由你来处理
每个独立的数据流


381
00:22:22,376 --> 00:22:25,746 line:-2
你可以在另一个链接上
多路传输数据流


382
00:22:25,812 --> 00:22:27,814 line:-1
应用你的特殊转换


383
00:22:27,881 --> 00:22:30,350 line:-2
或任何其它你想要执行的操作
完全由你决定


384
00:22:31,852 --> 00:22:33,086 line:-1
那么这是如何在你的app中


385
00:22:33,153 --> 00:22:37,424 line:-1
使用透明代理API的一个简单概览


386
00:22:41,495 --> 00:22:44,364 line:-2
接下来让我们看一下
DNS代理app


387
00:22:45,065 --> 00:22:49,002 line:-2
现在DNS协议是一个强大的协议
非常强大而且非常有用


388
00:22:49,303 --> 00:22:51,371 line:-1
但它不是特别安全


389
00:22:52,206 --> 00:22:56,210 line:-1
因此欺骗DNS响应


390
00:22:56,276 --> 00:22:59,613 line:-1
和导致浏览器打开恶意网站非常简单


391
00:23:00,013 --> 00:23:04,351 line:-1
或通过查看某人发送的DNS查询


392
00:23:04,418 --> 00:23:07,387 line:-1
监视他们的因特网浏览活动也很简单


393
00:23:08,822 --> 00:23:10,624 line:-1
为了弥补这些不足


394
00:23:10,691 --> 00:23:12,292 line:-1
DNS代理


395
00:23:12,359 --> 00:23:15,395 line:-1
向DNS协议中应用额外的安全性


396
00:23:17,431 --> 00:23:18,498 line:-1
比如


397
00:23:18,565 --> 00:23:22,402 line:-2
app可能对DNS流量
应用一些加密


398
00:23:22,469 --> 00:23:26,406 line:-2
或在某种安全通道上应用
代理DNS流量


399
00:23:27,007 --> 00:23:29,543 line:-2
那么我很高兴地告诉你
在macOS Catalina中


400
00:23:29,610 --> 00:23:33,881 line:-2
我们引入了一些很棒的新API
允许你实施


401
00:23:33,947 --> 00:23:37,818 line:-2
DNS代理app
而不需要使用网络内核扩展


402
00:23:42,356 --> 00:23:46,059 line:-2
这些API在
NetworkExtension框架中


403
00:23:46,126 --> 00:23:49,062 line:-2
它们实际上是
在iOS 11中引入的


404
00:23:49,129 --> 00:23:51,565 line:-2
我们把它们带到
macOS Catalina中来


405
00:23:51,632 --> 00:23:53,433 line:-1
并让它们在Mac上可用


406
00:23:53,967 --> 00:23:56,937 line:-2
让我们看一下这些API
以及如何在你的app中使用它们


407
00:23:58,038 --> 00:23:59,239 line:-1
在你的主UI app中


408
00:23:59,306 --> 00:24:01,408 line:-2
你将使用
NEDNSProxyManager


409
00:24:01,475 --> 00:24:03,944 line:-1
创建你的DNS代理配置


410
00:24:04,011 --> 00:24:06,847 line:-1
并在系统中注册你的配置


411
00:24:06,914 --> 00:24:09,449 line:-2
从而系统知道如何运行
你的DNS代理


412
00:24:11,818 --> 00:24:13,453 line:-1
你创建一个系统扩展


413
00:24:13,520 --> 00:24:16,456 line:-1
DNS代理将在系统扩展中运行


414
00:24:16,990 --> 00:24:18,825 line:-1
并且你要把你的代理


415
00:24:18,892 --> 00:24:23,463 line:-2
作为NEDNSProxyProvider类
的子类进行实施


416
00:24:25,165 --> 00:24:28,535 line:-2
一旦你的DNS代理配置在系统中
进行了注册


417
00:24:28,602 --> 00:24:30,470 line:-1
你的系统扩展也正在运行


418
00:24:31,004 --> 00:24:34,374 line:-1
那系统将开始转移


419
00:24:34,441 --> 00:24:37,477 line:-2
对你的NEDNSProxyProvider
子类的所有DNS查询


420
00:24:39,179 --> 00:24:43,350 line:-2
然后完全由你来决定
如何处理每个DNS查询


421
00:24:43,417 --> 00:24:44,785 line:-1
你可以对它进行加密


422
00:24:44,852 --> 00:24:47,487 line:-1
你可以通过某种安全通道发送它


423
00:24:47,554 --> 00:24:49,489 line:-1
完全由你决定


424
00:24:51,158 --> 00:24:52,226 line:-1
好的


425
00:24:52,292 --> 00:24:55,495 line:-2
那么这是DNS代理API的
一个概览


426
00:24:55,896 --> 00:24:58,498 line:-1
接下来我要讲VPN app


427
00:24:59,333 --> 00:25:02,503 line:-1
VPN app的一个经典用例是


428
00:25:03,036 --> 00:25:06,673 line:-1
允许公司为员工提供


429
00:25:06,740 --> 00:25:11,512 line:-1
安全地远程访问公司内网的方式


430
00:25:12,880 --> 00:25:13,747 line:-1
另一个用例


431
00:25:13,814 --> 00:25:17,050 line:-1
最近几年越来越流行了


432
00:25:17,117 --> 00:25:18,886 line:-1
即个人VPN app


433
00:25:19,353 --> 00:25:20,754 line:-1
这些app用于


434
00:25:20,821 --> 00:25:24,525 line:-1
安全地和异步地浏览因特网


435
00:25:26,226 --> 00:25:32,533 line:-2
我们实际上在macOS 10.10中
就在macOS上引入了VPN API


436
00:25:33,667 --> 00:25:35,102 line:-1
在这次发布中


437
00:25:35,169 --> 00:25:38,205 line:-2
我们改善了这些API
让它们更好用


438
00:25:38,805 --> 00:25:41,041 line:-1
让我们看一下VPN API


439
00:25:41,108 --> 00:25:42,709 line:-1
以及如何在你的app中使用它们


440
00:25:45,179 --> 00:25:46,413 line:-1
在你的主UI app中


441
00:25:46,480 --> 00:25:51,051 line:-1
你使用NETunnelProviderManager


442
00:25:51,118 --> 00:25:53,587 line:-1
创建VPN配置


443
00:25:53,654 --> 00:25:56,557 line:-1
并在系统中注册VPN客户端


444
00:25:57,991 --> 00:25:59,526 line:-1
你还创建一个系统扩展


445
00:25:59,593 --> 00:26:02,563 line:-2
你的VPN客户端代码
将在系统扩展中运行


446
00:26:06,033 --> 00:26:08,502 line:-1
你把VPN客户端


447
00:26:08,569 --> 00:26:11,338 line:-2
作为NEPacketTunnelProvider类的
一个子类进行实施


448
00:26:12,105 --> 00:26:14,541 line:-1
系统创建一个utun界面


449
00:26:14,608 --> 00:26:18,579 line:-2
响应你的
NEPacketTunnelProvider


450
00:26:19,780 --> 00:26:22,850 line:-2
NEPacketTunnelProvider
负责告诉系统


451
00:26:22,916 --> 00:26:28,589 line:-1
你想通过你的VPN路由哪些网络


452
00:26:30,524 --> 00:26:33,594 line:-1
一旦你指定了VPN的路由规则


453
00:26:33,660 --> 00:26:35,596 line:-1
并在系统中安装了路由规则


454
00:26:35,996 --> 00:26:40,601 line:-2
当IP数据包按照那些规则
被路由到你的utun界面时


455
00:26:41,235 --> 00:26:45,372 line:-2
那些数据包将被转到你的
NEPacketTunnelProvider中


456
00:26:45,439 --> 00:26:50,577 line:-1
你可以通过隧道连接


457
00:26:50,644 --> 00:26:54,248 line:-1
使用自定义隧道协议发送那些数据包


458
00:26:55,349 --> 00:26:59,186 line:-2
好的 这是VPN API
如何运作的简单概览


459
00:26:59,453 --> 00:27:02,155 line:-2
接下来我想讲一下
我们对VPN API


460
00:27:02,222 --> 00:27:03,624 line:-1
所做的一些改进


461
00:27:04,491 --> 00:27:06,460 line:-2
首先是
IncludeAllNetworks


462
00:27:06,527 --> 00:27:10,330 line:-2
这是一个可以设置在VPN配置上的
新标志


463
00:27:10,664 --> 00:27:13,634 line:-1
这在个人VPN app中尤其有用


464
00:27:14,001 --> 00:27:15,035 line:-1
在这些app中


465
00:27:15,102 --> 00:27:19,773 line:-2
在VPN隧道之外没有流量泄漏
非常重要


466
00:27:19,840 --> 00:27:23,043 line:-1
你希望你的全部流量都能通过VPN


467
00:27:23,677 --> 00:27:24,511 line:-1
是的


468
00:27:27,114 --> 00:27:31,318 line:-2
通过在配置上启动
IncludeAllNetworks


469
00:27:31,385 --> 00:27:32,252 line:-1
你可以实现这个功能


470
00:27:32,319 --> 00:27:35,689 line:-1
系统将通过VPN路由所有流量


471
00:27:35,756 --> 00:27:37,157 line:-1
并且如果VPN


472
00:27:37,224 --> 00:27:40,160 line:-1
由于某种原因暂时不可用…


473
00:27:40,227 --> 00:27:43,530 line:-1
比如 如果Mac正在切换


474
00:27:43,597 --> 00:27:45,799 line:-1
它所连接的WiFi网络


475
00:27:45,866 --> 00:27:50,070 line:-2
或如果你的VPN不管由于什么原因
暂时当掉了


476
00:27:51,371 --> 00:27:54,107 line:-1
在这些情境中 流量实际上会被释放


477
00:27:54,174 --> 00:27:56,710 line:-1
而不是被路由到VPN之外


478
00:27:58,645 --> 00:28:01,215 line:-2
现在如果你已经启动
IncludeAllNetworks


479
00:28:01,949 --> 00:28:04,852 line:-1
但你仍然想访问本地网络资源


480
00:28:04,918 --> 00:28:06,320 line:-1
比如打印机


481
00:28:06,820 --> 00:28:10,023 line:-2
你可以启动
ExcludeLocalNetworks


482
00:28:10,090 --> 00:28:12,326 line:-1
从而仍然允许访问本地网络资源


483
00:28:15,596 --> 00:28:19,299 line:-2
我们还对Per-App VPN
做了一些改进


484
00:28:19,800 --> 00:28:24,671 line:-2
我们添加了三个新的域名列表
你可以用于把流量


485
00:28:24,738 --> 00:28:26,707 line:-1
路由到Per-App VPN


486
00:28:28,141 --> 00:28:32,713 line:-1
它的运作方式是对于每一个列表


487
00:28:33,347 --> 00:28:39,620 line:-2
如果相应的app
创建了对主机的连接


488
00:28:39,686 --> 00:28:43,724 line:-2
并且那个主机域名
与列表中的一个域名相匹配


489
00:28:44,491 --> 00:28:48,395 line:-2
该连接的流量将通过
Per-App VPN进行路由


490
00:28:48,962 --> 00:28:49,930 line:-1
让我们看一个例子


491
00:28:49,997 --> 00:28:51,598 line:-1
如果你正在使用Mail app


492
00:28:51,665 --> 00:28:54,735 line:-2
并且你给Mail app
设置了两个账户…


493
00:28:54,801 --> 00:28:57,738 line:-1
你有私人邮箱账户


494
00:28:57,804 --> 00:29:00,240 line:-1
和公司邮箱账户


495
00:29:01,742 --> 00:29:03,644 line:-1
通过在邮箱域名数组中


496
00:29:03,710 --> 00:29:09,049 line:-1
指定公司邮件服务器的域名


497
00:29:11,418 --> 00:29:15,856 line:-2
当Mail打开对公司邮件服务器的
新连接时


498
00:29:15,923 --> 00:29:18,892 line:-2
将通过Per-App VPN
路由该连接


499
00:29:19,893 --> 00:29:22,763 line:-1
而对你私人邮件服务器的连接


500
00:29:23,630 --> 00:29:25,766 line:-2
将不通过
Per-App VPN进行路由


501
00:29:28,335 --> 00:29:32,172 line:-2
CalendarDomains和
ContactsDomains列表


502
00:29:32,239 --> 00:29:33,073 line:-1
使用方式相同


503
00:29:33,140 --> 00:29:36,777 line:-2
但它们是Calendar app
和Contacts app


504
00:29:39,379 --> 00:29:43,016 line:-1
好的 那么这是macOS上可用的


505
00:29:43,083 --> 00:29:44,484 line:-1
VPN API的简单概览


506
00:29:44,551 --> 00:29:48,789 line:-2
以及我们所做的一些改进
从而使你可以创建VPN app


507
00:29:49,056 --> 00:29:51,792 line:-1
而不需要使用网络内核扩展


508
00:29:54,194 --> 00:29:56,230 line:-1
接下来我想讲一下虚拟机app


509
00:29:56,296 --> 00:29:59,800 line:-1
这些app用于创建和管理虚拟机


510
00:30:00,467 --> 00:30:02,703 line:-1
实话实说 如果虚拟机不联网的话


511
00:30:02,769 --> 00:30:05,906 line:-1
它很可能不是特别有用


512
00:30:07,107 --> 00:30:09,843 line:-2
在macOS上 我们有
vmnet.framework


513
00:30:09,910 --> 00:30:13,814 line:-2
正好能实现这个功能
把虚拟机连接到互联网


514
00:30:14,581 --> 00:30:19,820 line:-2
在macOS 10.10中vmnet.framework
就引入到macOS上了


515
00:30:20,721 --> 00:30:22,556 line:-1
但我们在本次发布中做了一些改进


516
00:30:22,623 --> 00:30:23,991 line:-1
为你提供更多


517
00:30:24,057 --> 00:30:26,593 line:-1
把虚拟机连接到网络的方式


518
00:30:27,628 --> 00:30:28,595 line:-1
框架的运作方式是


519
00:30:28,662 --> 00:30:31,999 line:-1
给你提供一些


520
00:30:32,065 --> 00:30:33,200 line:-1
把虚拟机连接到网络的不同模式


521
00:30:33,734 --> 00:30:36,637 line:-1
我们对共享模式做了一些改进


522
00:30:36,703 --> 00:30:39,506 line:-2
你现在可以在共享模式中
使用IPv6了


523
00:30:39,573 --> 00:30:41,542 line:-1
你可以指定


524
00:30:41,608 --> 00:30:43,844 line:-1
你想要分配给虚拟机的IP范围


525
00:30:44,044 --> 00:30:46,480 line:-1
并且你可以在虚拟机和网络之间设置


526
00:30:46,547 --> 00:30:48,849 line:-1
端口转发规则


527
00:30:50,450 --> 00:30:53,387 line:-2
我们还添加了一个全新的模式
叫做桥接模式


528
00:30:53,453 --> 00:30:56,523 line:-2
在这个模式中
你的虚拟机会出现在本地网络中


529
00:30:56,590 --> 00:30:59,860 line:-1
就好像它们实际连接到本地网络一样


530
00:31:01,461 --> 00:31:06,099 line:-2
好的 这是用于把虚拟机
连接到网络的


531
00:31:06,166 --> 00:31:08,869 line:-1
虚拟机API的简单概览


532
00:31:11,438 --> 00:31:17,511 line:-2
接下来我想简单讲一下
使用自定义低层协议的app


533
00:31:18,212 --> 00:31:20,180 line:-1
其中一个例子是


534
00:31:20,247 --> 00:31:23,383 line:-1
需要与硬件通讯的app


535
00:31:23,450 --> 00:31:26,820 line:-1
比如摄像头或音频设备


536
00:31:26,887 --> 00:31:33,227 line:-1
该设备仅能接受某些低层协议


537
00:31:33,293 --> 00:31:36,830 line:-2
比如自定义链接层协议
或自定义IP协议


538
00:31:38,031 --> 00:31:41,935 line:-2
另一个使用自定IP协议的
app例子是


539
00:31:42,002 --> 00:31:42,903 line:-1
比如


540
00:31:42,970 --> 00:31:45,939 line:-1
需要使用某些高度优化了的协议


541
00:31:46,006 --> 00:31:50,611 line:-2
与本地网络上的其它机器
进行通讯的app


542
00:31:53,380 --> 00:31:56,917 line:-2
我很高兴地宣布
在macOS Catalina中


543
00:31:56,984 --> 00:31:58,585 line:-1
我们引入了一些新API


544
00:31:58,652 --> 00:32:01,088 line:-2
允许你使用自定义低层协议
在网络上进行通讯


545
00:32:01,154 --> 00:32:05,926 line:-1
而不需要使用内核扩展


546
00:32:08,095 --> 00:32:11,932 line:-2
首先让我们看一下
自定义IP协议的API


547
00:32:13,934 --> 00:32:16,937 line:-1
这是网络框架中的一个新API


548
00:32:18,672 --> 00:32:20,007 line:-1
它的运作方式是


549
00:32:20,073 --> 00:32:25,145 line:-2
在你的app中 你创建一种新的
NWParameters对象


550
00:32:25,212 --> 00:32:29,950 line:-2
给你的自定义IP协议
指定标识符编号


551
00:32:30,184 --> 00:32:34,388 line:-2
然后使用那个NWParameters对象
创建一个NWConnection


552
00:32:34,855 --> 00:32:37,491 line:-2
然后那个NWConnection
的使用方法


553
00:32:37,558 --> 00:32:41,161 line:-1
与你使用自定义IP协议


554
00:32:41,228 --> 00:32:44,965 line:-2
在网络上进行TCP或UDP
NWConnection通讯一样


555
00:32:46,867 --> 00:32:48,902 line:-2
要了解更多关于
NWConnection的信息


556
00:32:48,969 --> 00:32:51,972 line:-2
请参看我们去年的演讲
关于网络框架的介绍


557
00:32:54,241 --> 00:32:56,910 line:-1
现在让我们看一个简短的代码示例


558
00:32:56,977 --> 00:33:00,981 line:-2
演示如何使用这个
自定义PI协议API


559
00:33:01,648 --> 00:33:05,185 line:-1
首先我要做的是用这个新构造函数


560
00:33:05,252 --> 00:33:06,987 line:-2
创建一个
NWParameters对象


561
00:33:07,988 --> 00:33:12,993 line:-1
它接受自定义IP协议的标识符编号


562
00:33:13,794 --> 00:33:14,828 line:-1
重点是


563
00:33:14,895 --> 00:33:18,298 line:-2
你必须在这里传递
自定义协议的标识符编号


564
00:33:18,365 --> 00:33:22,970 line:-2
你不能传递
系统已经能处理的协议的编号


565
00:33:23,036 --> 00:33:26,373 line:-1
比如TCP、UDP或ICMP


566
00:33:30,110 --> 00:33:34,014 line:-1
接下来我要创建通讯的目的地


567
00:33:34,381 --> 00:33:35,983 line:-1
并且创建NWConnection


568
00:33:36,049 --> 00:33:39,019 line:-1
传入目的地和我的参数


569
00:33:40,854 --> 00:33:43,156 line:-2
然后我就像使用其它
NWConnection一样


570
00:33:43,223 --> 00:33:46,426 line:-1
使用连接


571
00:33:46,493 --> 00:33:47,327 line:-1
开启连接


572
00:33:47,394 --> 00:33:52,666 line:-2
并开始使用我的自定义IP协议
发送/接收数据包


573
00:33:56,003 --> 00:34:00,040 line:-2
接下来让我们看一下
自定义链接层协议API


574
00:34:00,340 --> 00:34:03,043 line:-1
我们也把它们添加到了网络框架中


575
00:34:04,244 --> 00:34:05,112 line:-1
它们的运作方式是


576
00:34:05,179 --> 00:34:10,050 line:-2
在你的app中你创建一个
NWEthernetChannelObject


577
00:34:10,951 --> 00:34:15,054 line:-2
指定你想要使用的
自定义etherType


578
00:34:15,922 --> 00:34:17,456 line:-1
然后使用你的通道对象


579
00:34:17,524 --> 00:34:19,960 line:-1
通过以太网接口通讯


580
00:34:20,027 --> 00:34:22,062 line:-2
使用了你的自定义
etherType的数据包


581
00:34:23,163 --> 00:34:25,632 line:-2
让我们看一些代码
了解它的运作方式


582
00:34:27,100 --> 00:34:32,072 line:-1
首先我引用当前有线以太网接口


583
00:34:32,906 --> 00:34:35,641 line:-2
然后创建我的
NWEthernetChannel对象


584
00:34:35,708 --> 00:34:39,079 line:-2
传入接口和我的自定义
etherType


585
00:34:40,414 --> 00:34:44,251 line:-1
现在与自定义IP协议API一样


586
00:34:44,318 --> 00:34:46,853 line:-2
你必须在这里传递一个
自定义etherType


587
00:34:46,920 --> 00:34:49,556 line:-2
你不能传递一个系统已经能处理的
etherType


588
00:34:49,623 --> 00:34:52,092 line:-1
比如IP或IPv6


589
00:34:55,329 --> 00:34:56,763 line:-1
创建好通道之后


590
00:34:56,830 --> 00:35:00,734 line:-1
我在通道上设置一些回调代码块


591
00:35:01,768 --> 00:35:05,205 line:-1
当通道状态发生变更时


592
00:35:05,272 --> 00:35:08,108 line:-2
调用
stateUpdateHandler代码块


593
00:35:08,642 --> 00:35:10,043 line:-1
当通道准备好之后


594
00:35:10,110 --> 00:35:12,980 line:-1
我可以继续并开始发送和接收


595
00:35:13,046 --> 00:35:15,115 line:-2
使用了我自定义etherType
的数据包


596
00:35:16,183 --> 00:35:17,584 line:-1
当从网络中收到


597
00:35:17,651 --> 00:35:20,954 line:-2
使用了我自定义etherType
的新数据包时


598
00:35:21,021 --> 00:35:22,756 line:-2
将调用
receiveHandler代码块


599
00:35:24,024 --> 00:35:25,826 line:-1
当完全设置好我的通道之后


600
00:35:25,893 --> 00:35:27,427 line:-1
我就继续并启动它


601
00:35:27,494 --> 00:35:31,131 line:-2
从而我可以开始使用我的自定义
etherType进行通讯


602
00:35:35,102 --> 00:35:38,338 line:-2
很好 那么这是我们所添加的
新API的简单预览


603
00:35:38,405 --> 00:35:40,741 line:-2
这些新API可以让你使用自定义
低层协议在网络上进行通讯


604
00:35:40,807 --> 00:35:45,145 line:-1
而不需要使用内核扩展


605
00:35:46,713 --> 00:35:48,715 line:-1
好的 我们今天讲了很多内容


606
00:35:48,782 --> 00:35:53,487 line:-2
我们在macOS Catalina中
添加了许多很棒的新API


607
00:35:53,554 --> 00:35:56,857 line:-1
可以让你创建属于这些类别的app


608
00:35:56,924 --> 00:36:00,160 line:-1
而不需要使用网络内核扩展


609
00:36:01,195 --> 00:36:05,165 line:-2
现在我想简单讲一下
网络内核扩展的未来发展情况


610
00:36:06,366 --> 00:36:10,170 line:-1
网络内核扩展存在许多问题


611
00:36:11,805 --> 00:36:13,574 line:-1
首先是难于开发


612
00:36:13,640 --> 00:36:15,943 line:-1
我之前提到过


613
00:36:16,510 --> 00:36:18,212 line:-1
如果你测试一些新功能


614
00:36:18,278 --> 00:36:19,880 line:-1
你很可能需要反复重启很多次


615
00:36:19,947 --> 00:36:23,617 line:-1
同时如果你使用网络内核扩展


616
00:36:23,684 --> 00:36:26,320 line:-2
你需要频繁地使用一些
非常低级的概念


617
00:36:26,386 --> 00:36:30,157 line:-1
比如执行手动M-缓冲链操作


618
00:36:30,224 --> 00:36:33,227 line:-1
这个代码非常棘手 非常容易出错


619
00:36:34,628 --> 00:36:38,065 line:-1
同时内核扩展难于调试


620
00:36:38,131 --> 00:36:40,067 line:-1
你必须有两台独立的机器


621
00:36:40,133 --> 00:36:42,069 line:-1
正如我之前所提到过的那样


622
00:36:42,135 --> 00:36:46,206 line:-2
单步执行代码非常棘手
如果行得通的话


623
00:36:48,208 --> 00:36:53,380 line:-1
同时内核扩展中的稳定性问题


624
00:36:53,447 --> 00:36:55,782 line:-1
可能会给系统带来灾难性后果


625
00:36:56,250 --> 00:36:58,218 line:-1
如果你的内核扩展崩溃了


626
00:36:58,785 --> 00:37:00,721 line:-1
它不会仅仅当掉你的app


627
00:37:00,787 --> 00:37:02,689 line:-1
还会重启整个系统


628
00:37:02,756 --> 00:37:07,394 line:-2
这对于用户来说非常糟糕
而且会导致严重的数据丢失


629
00:37:09,229 --> 00:37:13,100 line:-1
因为内核扩展存在这么多问题


630
00:37:13,166 --> 00:37:15,802 line:-2
而且也因为我们已经在macOS上
实现了这个重要的里程碑


631
00:37:15,869 --> 00:37:18,539 line:-1
就是我们现在有这些API


632
00:37:18,605 --> 00:37:21,508 line:-2
你可以用于在macOS Catalina中
创建app


633
00:37:21,575 --> 00:37:24,244 line:-1
而不需要使用网络内核扩展了


634
00:37:25,012 --> 00:37:27,814 line:-1
我们现在不推荐你使用


635
00:37:27,881 --> 00:37:29,883 line:-1
网络内核扩展


636
00:37:31,285 --> 00:37:35,055 line:-1
你现有的网络内核扩展


637
00:37:35,122 --> 00:37:39,259 line:-2
可以继续在
macOS Catalina上运行


638
00:37:39,593 --> 00:37:41,295 line:-1
然而我们强烈鼓励你们


639
00:37:41,361 --> 00:37:45,265 line:-2
查看一下我们所添加的这些
很棒的新API


640
00:37:45,933 --> 00:37:48,669 line:-1
并开始在你们的app中采用它们


641
00:37:48,735 --> 00:37:51,271 line:-1
替换网络内核扩展的使用


642
00:37:51,839 --> 00:37:54,808 line:-1
尽快做到这一点很重要


643
00:37:54,875 --> 00:37:57,811 line:-1
因为不久之后


644
00:37:57,878 --> 00:38:01,415 line:-1
我们将从macOS中彻底移除


645
00:38:01,481 --> 00:38:03,283 line:-1
对网络内核扩展的支持


646
00:38:06,787 --> 00:38:12,292 line:-2
好的 今天我们讲了
许多强大的新API


647
00:38:12,860 --> 00:38:15,495 line:-2
我们把它们引入
macOS Catalina中


648
00:38:15,562 --> 00:38:17,598 line:-1
帮助你创建


649
00:38:17,664 --> 00:38:19,666 line:-1
能过滤网络内容的app


650
00:38:19,733 --> 00:38:21,668 line:-1
代理网络内容


651
00:38:21,735 --> 00:38:23,570 line:-1
隧道网络内容


652
00:38:23,637 --> 00:38:26,106 line:-1
给虚拟机联网


653
00:38:26,173 --> 00:38:30,310 line:-2
并使用自定义低层协议
在网络上进行通讯


654
00:38:30,377 --> 00:38:33,313 line:-1
而不需要使用网络内核扩展


655
00:38:35,682 --> 00:38:38,952 line:-2
这是个好消息
因为我们强烈鼓励你


656
00:38:39,019 --> 00:38:42,856 line:-1
在你的app中采用这些新API


657
00:38:42,923 --> 00:38:45,926 line:-2
因为现在已经不推荐使用
网络内核扩展了


658
00:38:45,993 --> 00:38:49,329 line:-2
并且不久的将来
我们将移除对它的支持


659
00:38:51,932 --> 00:38:55,502 line:-2
要获取更多信息
请查看本场演讲的网页


660
00:38:55,569 --> 00:38:58,505 line:-1
你可以找到我今天在这里所演示的


661
00:38:58,572 --> 00:39:00,741 line:-1
示例代码的链接


662
00:39:02,009 --> 00:39:04,878 line:-2
我们还有一场网络演讲
实际上马上就会开始


663
00:39:04,945 --> 00:39:09,116 line:-2
并且我们希望能在演讲上看到你们
我们可以回答你所有的疑问


664
00:39:09,183 --> 00:39:11,785 line:-2
感谢大家参加这场演讲
祝你度过愉快的一天

