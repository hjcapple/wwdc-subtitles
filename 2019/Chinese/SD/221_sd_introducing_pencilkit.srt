1
00:00:06,039 --> 00:00:09,843 line:0
介绍PencilKit


2
00:00:13,881 --> 00:00:14,748 line:-1
下午好


3
00:00:14,815 --> 00:00:16,783 line:-2
欢迎来到
PencilKit的介绍演讲


4
00:00:17,351 --> 00:00:18,919 line:-1
我是Will Thimbleby


5
00:00:20,120 --> 00:00:23,490 line:-1
我想来聊一聊这个美妙的小物件


6
00:00:24,091 --> 00:00:25,492 line:-1
这是Apple Pencil


7
00:00:25,859 --> 00:00:30,464 line:-2
它能完全转变你在iPad上的
用户体验


8
00:00:33,367 --> 00:00:37,871 line:-2
事实上
它是iPad上最独特的一部分


9
00:00:39,106 --> 00:00:43,210 line:-2
从学龄前儿童
到Isaac Newton


10
00:00:43,277 --> 00:00:45,979 line:-1
从你的待办清单到美术


11
00:00:46,847 --> 00:00:48,815 line:-1
Pencil是一切的开始


12
00:00:51,084 --> 00:00:54,288 line:-2
它可在美妙的
iPad Pro上使用


13
00:00:55,756 --> 00:01:00,861 line:-2
以及iPad产品线下的所有设备
从最小的Mini到最大的Pro


14
00:01:02,930 --> 00:01:06,266 line:-1
它很适合用来修正图片


15
00:01:06,667 --> 00:01:11,805 line:-2
标注 涂鸦 事实上
它适用于做任何精确的操作


16
00:01:15,542 --> 00:01:20,180 line:-2
在iOS 13
我们对延时做了很大的优化


17
00:01:21,114 --> 00:01:23,951 line:-1
我们加入了一个漂亮的新工具调色板


18
00:01:25,419 --> 00:01:28,622 line:-2
我们向你介绍
PencilKit来让你


19
00:01:29,256 --> 00:01:31,525 line:-2
为你的app
添加Pencil更容易


20
00:01:32,926 --> 00:01:35,162 line:-1
我们也会介绍随处标记


21
00:01:35,229 --> 00:01:37,397 line:-1
来让用户能为你的app内容


22
00:01:37,464 --> 00:01:39,633 line:-1
做注释和标记


23
00:01:40,167 --> 00:01:42,603 line:-2
甚至如果你的app
并不需要Pencil来操作


24
00:01:43,337 --> 00:01:46,173 line:-2
我们来了解一下Pencil
很棒的用户体验


25
00:01:46,874 --> 00:01:49,910 line:-2
PencilKit如何协助你
创造良好的Pencil体验


26
00:01:50,143 --> 00:01:52,246 line:-1
最后 随处标记中会介绍


27
00:01:52,312 --> 00:01:56,583 line:-2
你应该如何为用户提供内容
来让他们做标记


28
00:01:58,385 --> 00:02:00,554 line:-2
一个好的Pencil体验
是怎样的？


29
00:02:02,022 --> 00:02:05,526 line:-2
一个好的Pencil体验
会全面利用


30
00:02:05,592 --> 00:02:07,528 line:-2
Apple Pencil
提供的功能


31
00:02:09,896 --> 00:02:11,732 line:-1
那意味着全面利用


32
00:02:12,032 --> 00:02:14,401 line:-2
Apple Pencil
提供的精度


33
00:02:15,269 --> 00:02:16,803 line:-1
它让你触碰到一个像素


34
00:02:17,137 --> 00:02:20,607 line:-1
它每秒能为你提供240次信息


35
00:02:21,608 --> 00:02:26,446 line:-2
它是独特地表达 为你提供了力度
坐标和高度


36
00:02:26,613 --> 00:02:30,017 line:-2
让你为你的app创建真正
富有表现力的标注


37
00:02:30,384 --> 00:02:31,785 line:-1
让你的app更有活力


38
00:02:33,120 --> 00:02:37,424 line:-2
最后 第二代Apple Pencil
有Pencil轻触功能


39
00:02:37,925 --> 00:02:40,527 line:-1
用户可以在你的app中


40
00:02:40,994 --> 00:02:42,729 line:-1
不用放下Pencil就能切换模式


41
00:02:44,965 --> 00:02:47,434 line:-1
现在有三种不同类型的Pencil


42
00:02:47,901 --> 00:02:49,503 line:-1
第一代Apple Pencil


43
00:02:49,770 --> 00:02:52,239 line:-2
第二代
和Logitech Crayon


44
00:02:53,440 --> 00:02:55,576 line:-1
它们有略微不同的功能


45
00:02:55,642 --> 00:02:58,512 line:-1
它们都具备很棒的精准度


46
00:02:59,646 --> 00:03:02,549 line:-1
它们都有相同水平的坐标和高度定位


47
00:03:02,616 --> 00:03:04,384 line:-1
允许你创建富有表现力的标记


48
00:03:05,752 --> 00:03:09,556 line:-1
第一代Pencil具有压力感应


49
00:03:10,324 --> 00:03:13,760 line:-1
第二代Pencil加入了手势识别


50
00:03:16,597 --> 00:03:19,733 line:-2
我会深入的介绍一些
Apple Pencil


51
00:03:19,800 --> 00:03:21,602 line:-1
所支持的更复杂的细节


52
00:03:22,936 --> 00:03:24,204 line:-1
如果你刚开始


53
00:03:24,271 --> 00:03:26,373 line:-1
你想要创建一个自定义的绘画体验


54
00:03:26,740 --> 00:03:30,410 line:-2
我会非常建议你查看
WWDC 2016


55
00:03:30,477 --> 00:03:32,279 line:-1
使用iOS的触控输入


56
00:03:35,148 --> 00:03:37,851 line:-1
了解一支Pencil如何工作


57
00:03:39,720 --> 00:03:41,822 line:-1
的关键是清楚它是什么


58
00:03:43,123 --> 00:03:45,492 line:-1
因此 我会给你介绍一下


59
00:03:45,659 --> 00:03:47,461 line:-1
Pencil背后的功能


60
00:03:49,429 --> 00:03:52,900 line:-2
Pencil在屏幕上创建了
一个独一无二的精准坐标


61
00:03:53,367 --> 00:03:55,602 line:-1
它是240赫兹


62
00:03:56,703 --> 00:03:58,305 line:-1
你知道的 它的水平坐标


63
00:03:58,372 --> 00:04:01,975 line:-1
就是它和iPad的垂直角度坐标


64
00:04:06,313 --> 00:04:08,482 line:-1
它的高度坐标或倾斜度


65
00:04:09,183 --> 00:04:11,785 line:-1
是你握着Pencil时的梯度


66
00:04:12,653 --> 00:04:14,821 line:-1
你可能不知道它是如何做到的


67
00:04:15,656 --> 00:04:18,225 line:-1
Pencil在iPad的表面


68
00:04:18,291 --> 00:04:19,593 line:-1
产生了第二个隐藏的触点


69
00:04:20,127 --> 00:04:25,065 line:-1
使用三角学来计算水平和垂直坐标


70
00:04:27,968 --> 00:04:31,705 line:-2
最后 Pencil
有一个轴向力传感器


71
00:04:32,005 --> 00:04:35,442 line:-2
来探测压力和通过
Bluetooth来传送数据


72
00:04:37,978 --> 00:04:39,813 line:-1
这样会导致几个后果


73
00:04:40,881 --> 00:04:44,985 line:-1
首先 如果一只手指或屏幕边缘


74
00:04:45,319 --> 00:04:47,254 line:-1
的第二个触点被检测到时


75
00:04:47,821 --> 00:04:50,457 line:-1
水平和垂直的值将会被估量


76
00:04:52,659 --> 00:04:56,964 line:-2
Pencil和iPad似成直角时
水平测量是不精准的


77
00:04:58,098 --> 00:05:02,402 line:-2
最后 通过一个不同的机制
检测到的压力值


78
00:05:02,769 --> 00:05:04,938 line:-1
会在触碰位置信息产生延时


79
00:05:06,139 --> 00:05:10,077 line:-1
处理Pencil的这些复杂的方面


80
00:05:10,143 --> 00:05:12,779 line:-2
是创建一个良好的Pencil
用户体验的关键


81
00:05:15,949 --> 00:05:18,018 line:-1
当我从屏幕的边缘描画时


82
00:05:19,152 --> 00:05:21,588 line:-1
我会获取到估量的水平和垂直的坐标


83
00:05:24,258 --> 00:05:26,493 line:-1
当我继续向屏幕中央画画时


84
00:05:27,094 --> 00:05:29,630 line:-1
第二个触点在屏幕的表面产生了


85
00:05:30,697 --> 00:05:32,032 line:-1
你获取了正确的值


86
00:05:32,599 --> 00:05:34,902 line:-1
现在 你应该返回重新修正这些值


87
00:05:35,736 --> 00:05:37,704 line:-1
修正之前估计的值


88
00:05:37,771 --> 00:05:39,306 line:-1
而不是让它像这样留在这


89
00:05:45,145 --> 00:05:46,680 line:-1
第二 当你画画时


90
00:05:48,115 --> 00:05:52,386 line:-2
Pencil后面的一个被
用来估量压力值的区域


91
00:05:55,088 --> 00:05:58,125 line:-1
你应该不断监听压力的更新


92
00:05:58,492 --> 00:06:00,227 line:-1
这样你就能绘制正确的值


93
00:06:01,895 --> 00:06:06,366 line:-2
当Pencil在iPad表面
离开时也能保持正确


94
00:06:07,501 --> 00:06:09,303 line:-1
笔画的一个区域


95
00:06:09,937 --> 00:06:12,306 line:-1
还在等待最后的压力值


96
00:06:12,739 --> 00:06:16,043 line:-2
甚至在触碰结束后
你还是需要一直保持监听它们


97
00:06:19,746 --> 00:06:21,148 line:-1
现在 其中的一个方面


98
00:06:22,316 --> 00:06:26,520 line:-1
意味着在最后笔画获取到最后值之前


99
00:06:27,354 --> 00:06:30,924 line:-1
用户就能开始画下一条线


100
00:06:33,327 --> 00:06:37,998 line:-2
我推荐一次只使用一个串行队列
来描绘一条线


101
00:06:38,932 --> 00:06:42,870 line:-1
时间很短 用户不会察觉到


102
00:06:43,403 --> 00:06:45,138 line:-1
但你想要正确地处理数据


103
00:06:48,175 --> 00:06:51,912 line:-2
另一个让Pencil
良好工作的部分是延时


104
00:06:53,614 --> 00:06:54,915 line:-1
使用实体的笔时


105
00:06:54,982 --> 00:06:58,552 line:-1
笔会和描绘的部分产生实际的接触


106
00:07:00,254 --> 00:07:01,922 line:-1
在一个电子设备上时


107
00:07:02,523 --> 00:07:06,260 line:-1
操作时通常


108
00:07:06,326 --> 00:07:07,895 line:-1
和屏幕上的线会有一个间隙


109
00:07:09,296 --> 00:07:12,733 line:-2
保持间隙尽可能的小
来模拟在纸上画画


110
00:07:13,033 --> 00:07:15,936 line:-1
的感觉是一个重要的点


111
00:07:21,542 --> 00:07:24,545 line:-2
在Apple
我们大家都很关注延时


112
00:07:24,745 --> 00:07:27,481 line:-1
我们有机器人在不断的测试


113
00:07:28,715 --> 00:07:31,285 line:-1
这是我们的一个测试


114
00:07:31,818 --> 00:07:33,687 line:-1
每秒800帧率的高速截图


115
00:07:34,087 --> 00:07:35,856 line:-1
你能看到笔和线之间的距离


116
00:07:35,923 --> 00:07:38,225 line:-1
非常的小


117
00:07:40,394 --> 00:07:42,062 line:-1
我来实时向你展示


118
00:07:44,264 --> 00:07:45,132 line:-1
看到了吗？


119
00:07:45,265 --> 00:07:46,266 line:-1
再来一次


120
00:07:50,237 --> 00:07:53,607 line:-1
那么 一些减少延时的几个小窍门


121
00:07:54,641 --> 00:07:56,677 line:-1
首先 你需要在Metal中渲染


122
00:07:57,778 --> 00:08:00,214 line:-1
你的每帧只有几毫秒


123
00:08:00,280 --> 00:08:03,417 line:-1
以及 你需要逐帧不断地重复


124
00:08:03,884 --> 00:08:05,152 line:-1
来减少延时


125
00:08:06,887 --> 00:08:10,257 line:-2
在iOS 13 我们很大幅度
的改进了预测功能


126
00:08:10,624 --> 00:08:14,661 line:-2
你应该使用预测触碰来
进一步减少你的延迟


127
00:08:17,598 --> 00:08:20,200 line:-2
最后 如果你在创建
一个绘图的app


128
00:08:20,767 --> 00:08:22,769 line:-1
为了实现最低的延时


129
00:08:23,303 --> 00:08:26,507 line:-2
你应该避免使用
透明的Metal图层


130
00:08:26,840 --> 00:08:29,276 line:-1
也要避免使用比如模糊效果的


131
00:08:29,676 --> 00:08:33,212 line:-2
UI特效视图
覆盖在你的Metal图层上


132
00:08:34,581 --> 00:08:37,451 line:-1
以及常常被忽视的一点是


133
00:08:37,518 --> 00:08:39,886 line:-1
默认的导航栏


134
00:08:40,287 --> 00:08:45,058 line:-2
事实上 主界面可视性会为渲染
增加额外的成本


135
00:08:46,059 --> 00:08:49,730 line:-2
Pencil轻触手势
是支持Pencil的最后一个部分


136
00:08:50,397 --> 00:08:53,600 line:-1
这是让用户不用放下Pencil


137
00:08:54,434 --> 00:08:56,537 line:-1
就能切换模式最好的方式


138
00:09:00,107 --> 00:09:03,143 line:-2
为了实现 你需要使用
UIPencilInteraction


139
00:09:04,711 --> 00:09:06,113 line:-1
将你自己设置委托


140
00:09:06,747 --> 00:09:08,982 line:-2
当用户轻触时
你会获得回调


141
00:09:10,350 --> 00:09:14,755 line:-2
当你这么做时 你应该尊重
用户偏爱的触碰行为方式


142
00:09:15,389 --> 00:09:18,091 line:-1
这是用户能在设置中选择的


143
00:09:18,926 --> 00:09:22,262 line:-1
如果可以 你应该要遵循它


144
00:09:23,430 --> 00:09:25,365 line:-1
如果你的app无法遵循


145
00:09:26,633 --> 00:09:29,870 line:-2
Pencil轻触应该被用来切换
无害模式


146
00:09:33,440 --> 00:09:35,042 line:-1
那么 到目前为止


147
00:09:35,409 --> 00:09:39,079 line:-2
创建一个好的Pencil体验
需要做很多工作


148
00:09:39,746 --> 00:09:43,450 line:-1
我们提供了一些很棒的API和硬件


149
00:09:44,751 --> 00:09:47,821 line:-2
你在世界上创建了
一些很棒的绘制体验


150
00:09:48,655 --> 00:09:51,325 line:-2
我高亮了一些更好的支持
Apple Pencil


151
00:09:51,391 --> 00:09:52,860 line:-1
的更复杂的部分


152
00:09:53,560 --> 00:09:57,064 line:-1
如果你还没有认为这些是改进部分


153
00:09:57,831 --> 00:10:00,501 line:-1
但对你们中刚刚开始的人


154
00:10:03,070 --> 00:10:05,639 line:-1
我们想要为你分担一部分工作


155
00:10:06,807 --> 00:10:11,111 line:-2
所以 我很高兴来为大家
介绍PencilKit


156
00:10:19,887 --> 00:10:23,857 line:-2
PencilKit是我们在
整个操作系统使用的一个框架


157
00:10:24,758 --> 00:10:28,729 line:-2
我们在Notes使用它来提供
低延时的绘画和记笔记


158
00:10:29,363 --> 00:10:32,633 line:-2
我们在Pages使用它来
标记文档


159
00:10:33,100 --> 00:10:36,270 line:-2
我们在随处标记中使用它来
为截屏做注释


160
00:10:36,336 --> 00:10:38,205 line:-1
以及你app内容的PDF


161
00:10:39,139 --> 00:10:42,376 line:-2
我们有几次为一些开发者
Pinterest和Canvas


162
00:10:42,643 --> 00:10:46,480 line:-1
在他们的app增加了功能


163
00:10:48,682 --> 00:10:52,019 line:-1
在你的app中添加它只需三行代码


164
00:10:55,455 --> 00:10:57,291 line:-1
这里 我们创建了一个画布


165
00:10:57,824 --> 00:11:00,194 line:-2
在你的视图层级中添加它
选择一个墨水


166
00:11:01,962 --> 00:11:06,900 line:-1
就这样 你就获得了整个操作系统


167
00:11:07,234 --> 00:11:09,136 line:-1
相同的业内领先的低延时


168
00:11:09,536 --> 00:11:13,707 line:-2
我们用几个小时完善的
完全相同的富有表现力的墨水字


169
00:11:14,708 --> 00:11:17,978 line:-1
以及一样美妙的UI和调色板工具


170
00:11:19,713 --> 00:11:21,348 line:-1
只需更多的几行代码


171
00:11:21,415 --> 00:11:24,818 line:-2
你就能创建更全面的功能 比如
我们的示例app


172
00:11:25,819 --> 00:11:27,154 line:-1
我现在来向你展示


173
00:11:30,524 --> 00:11:32,693 line:-1
这是我们的示例app


174
00:11:32,960 --> 00:11:36,129 line:-1
它是一个小小的画图app


175
00:11:36,196 --> 00:11:38,732 line:-1
它里面有一些我之前画的缩略图


176
00:11:39,433 --> 00:11:43,070 line:-2
为了给你一个PencilKit
能实现的宽广度


177
00:11:44,204 --> 00:11:45,339 line:-1
我想你展示其中的一些


178
00:11:45,405 --> 00:11:46,807 line:-1
这是我之前做的一些笔记


179
00:11:46,874 --> 00:11:49,743 line:-1
我们来滚动浏览这些美丽的笔记


180
00:11:52,412 --> 00:11:55,382 line:-2
这里有一张我朋友Andy画的
美丽的花


181
00:11:56,950 --> 00:12:01,321 line:-2
让我有机会介绍PencilKit
是如何适配深色模式的


182
00:12:02,122 --> 00:12:03,690 line:-1
如果我拉下控制中心


183
00:12:04,958 --> 00:12:06,493 line:-1
我能切换至深色


184
00:12:07,494 --> 00:12:12,332 line:-2
这朵花在深色模式中和在
浅色模式中一样好看


185
00:12:15,135 --> 00:12:17,571 line:-2
当我返回
这些缩略图都被重新渲染了


186
00:12:18,005 --> 00:12:20,274 line:-1
你能看到笔记非常清晰


187
00:12:22,376 --> 00:12:23,577 line:-1
但我很幸运


188
00:12:23,877 --> 00:12:25,779 line:-1
我做到了每个工程师都想要实现的


189
00:12:25,846 --> 00:12:28,348 line:-1
梦想 就是在舞台上画画


190
00:12:31,385 --> 00:12:34,454 line:-1
那么 我切回至浅色模式


191
00:12:35,989 --> 00:12:39,226 line:-1
我来继续完成我之前画的一个图标


192
00:12:41,762 --> 00:12:44,631 line:-2
在底部 你能看到我们新设计
的调色板工具界面


193
00:12:45,599 --> 00:12:46,600 line:-1
用一只手指


194
00:12:46,667 --> 00:12:49,269 line:-2
我就能在屏幕中拖动它至
我想的位置


195
00:12:51,939 --> 00:12:53,874 line:-1
现在 我将它留在屏幕底部


196
00:12:54,374 --> 00:12:57,544 line:-2
为了完成它 我来使用尺子和记号笔
来添加一些颜色


197
00:12:58,946 --> 00:13:00,781 line:-1
这样 我能轻点这个尺子来使用它


198
00:13:01,181 --> 00:13:03,717 line:-1
使用两只手指来为尺子确定位置


199
00:13:04,985 --> 00:13:09,456 line:-2
我能使用尺子来画一条直线
我也可以使用它来遮盖


200
00:13:10,557 --> 00:13:11,792 line:-1
我来这么做


201
00:13:15,295 --> 00:13:17,331 line:-1
我再来添加一些颜色


202
00:13:26,373 --> 00:13:28,108 line:-1
轻点尺子来让它消失


203
00:13:28,909 --> 00:13:30,677 line:-1
我在底部添加一些颜色


204
00:13:32,746 --> 00:13:35,582 line:-2
现在 PencilKit能做的
最酷的事情之一是


205
00:13:36,283 --> 00:13:39,520 line:-1
它开始将位图和矢量


206
00:13:40,187 --> 00:13:41,355 line:-1
物件和像素整合在一起


207
00:13:42,489 --> 00:13:44,525 line:-1
你能再这里看到橡皮擦


208
00:13:45,192 --> 00:13:47,427 line:-2
我将在Apple Pencil
使用


209
00:13:47,494 --> 00:13:49,396 line:-1
双击手势来改变橡皮擦


210
00:13:51,865 --> 00:13:53,600 line:-1
就像这样 我切换了模式


211
00:13:54,368 --> 00:13:57,604 line:-2
这是一个像素橡皮擦
它让我围绕它画画


212
00:13:58,372 --> 00:14:00,440 line:-1
裁剪了这个图标的其他部分


213
00:14:12,219 --> 00:14:15,455 line:-2
现在 如果我点击橡皮擦
我切换至物件橡皮擦


214
00:14:15,889 --> 00:14:18,559 line:-2
使用物件橡皮擦
我能这样围绕它画画


215
00:14:19,259 --> 00:14:22,062 line:-1
我也能删除我裁剪的位


216
00:14:26,133 --> 00:14:29,336 line:-2
像这样
我使用了矢量和位图操作


217
00:14:30,737 --> 00:14:31,638 line:-1
来画图


218
00:14:31,972 --> 00:14:32,906 line:-1
我再向你展示一遍


219
00:14:33,173 --> 00:14:35,042 line:-1
我轻点 我得到了像素橡皮擦


220
00:14:38,278 --> 00:14:39,413 line:-1
我将它切断


221
00:14:39,580 --> 00:14:43,483 line:-2
这一次 我会使用套索工具
它在橡皮擦旁边


222
00:14:48,088 --> 00:14:52,993 line:-2
我能将它移动到我想的地方
或着我能点击它然后删除它


223
00:14:54,595 --> 00:14:58,699 line:-2
现在 我完成了我的创作
我想应该为它签名


224
00:14:58,765 --> 00:15:01,902 line:-2
幸运的是 我们示例app
有签名的功能


225
00:15:02,703 --> 00:15:05,272 line:-1
在右上方 我点击签名


226
00:15:06,106 --> 00:15:08,809 line:-2
你会注意到 当我这么做的时候
调色板工具消失了


227
00:15:09,376 --> 00:15:11,445 line:-1
我们这里有一个自定义的选择器


228
00:15:11,512 --> 00:15:13,580 line:-1
它让我选择一个黑色或蓝色的墨水


229
00:15:14,681 --> 00:15:16,884 line:-1
现在 我选择黑色


230
00:15:18,585 --> 00:15:20,320 line:-1
来加上我的签名


231
00:15:22,122 --> 00:15:25,792 line:-2
现在完成了
我点击为我的画加上签名


232
00:15:28,095 --> 00:15:30,464 line:-1
看吧 这是一个放置它的好地方


233
00:15:30,564 --> 00:15:31,765 line:-1
我认为我可以为它装框了


234
00:15:33,767 --> 00:15:34,635 line:-1
非常酷


235
00:15:36,503 --> 00:15:37,337 line:-1
好的


236
00:15:43,710 --> 00:15:46,446 line:-2
我们来讲一下
PencilKit的架构


237
00:15:48,048 --> 00:15:50,350 line:-2
你会用到的最主要的物件是
PKCanvasView


238
00:15:50,684 --> 00:15:52,953 line:-2
它为你的app提供了
可绘制的区域


239
00:15:55,622 --> 00:15:58,392 line:-1
PKDrawing是数据模型


240
00:15:59,259 --> 00:16:01,361 line:-1
它捕获了所有的这些美丽的线条


241
00:16:03,230 --> 00:16:07,868 line:-2
PKToolPicker提供了
浮动在屏幕上UI


242
00:16:09,803 --> 00:16:13,540 line:-1
PKTools是提供这些墨水


243
00:16:14,007 --> 00:16:16,743 line:-1
和你画布上的交互的工具集


244
00:16:21,215 --> 00:16:25,586 line:-2
PKCanvasView是一个
UI滚动视图 允许你平移和缩放


245
00:16:26,453 --> 00:16:28,188 line:-1
它让你选择用户


246
00:16:28,455 --> 00:16:31,358 line:-2
通过设置工具 用户交互行为
会向它做出什么


247
00:16:31,859 --> 00:16:33,961 line:-1
它允许你通过它获取数据模型


248
00:16:35,128 --> 00:16:38,031 line:-1
使用绘图属性来为它设置数据模型


249
00:16:40,834 --> 00:16:43,270 line:-2
PKDrawing是
PencilKit的一个数据模型


250
00:16:43,737 --> 00:16:46,940 line:-2
它是macOS上的
PencilKit的一部分


251
00:16:48,876 --> 00:16:53,547 line:-2
它有一个数据形式 它允许你
在数据中加载和存储绘图


252
00:16:55,082 --> 00:16:57,184 line:-1
你能使用这些绘图数据来制作图片


253
00:16:57,384 --> 00:16:59,152 line:-1
用于分享或缩略图


254
00:17:01,688 --> 00:17:04,724 line:-2
我们来看看示例app是如何制作
缩略图的


255
00:17:07,461 --> 00:17:10,631 line:-1
因为这些值都有类型


256
00:17:10,897 --> 00:17:13,367 line:-2
我们在一个后台的队列中安全的
完成工作


257
00:17:15,836 --> 00:17:19,839 line:-2
因为我们想要在app的浅色
和深色模式中


258
00:17:19,906 --> 00:17:21,441 line:-1
都能制作这些缩略图


259
00:17:22,309 --> 00:17:25,378 line:-2
我们可以使用UITraitCollections的
performAsCurrent


260
00:17:29,249 --> 00:17:31,718 line:-1
我们使用图画来制作这张图片


261
00:17:32,719 --> 00:17:36,657 line:-2
接下来 最后 我们在主线程中设置
这张图片


262
00:17:39,893 --> 00:17:42,362 line:-1
现在我想邀请Jenny


263
00:17:43,130 --> 00:17:45,332 line:-2
她将会为大家介绍关于工具
和工具选择器使用


264
00:17:46,200 --> 00:17:49,403 line:-2
以及PencilKit能实现的
功能的更多内容


265
00:17:58,278 --> 00:18:01,248 line:-2
谢谢Will
大家好 我是Jenny 我将要…


266
00:18:01,315 --> 00:18:03,584 line:-2
我们来通过
PencilKit提供的


267
00:18:03,917 --> 00:18:07,154 line:-2
一些很棒的工具来继续介绍
PencilKit


268
00:18:08,322 --> 00:18:11,558 line:-2
这些工具在全新的
工具选择器中


269
00:18:11,792 --> 00:18:12,759 line:-1
它是动态的


270
00:18:13,026 --> 00:18:14,228 line:-1
它悬浮在所有物件的上方


271
00:18:14,294 --> 00:18:16,530 line:-1
我能将它从一边拖到另一边


272
00:18:16,597 --> 00:18:20,501 line:-2
或甚至让它在底部成为
一个程序坞 不让它干扰我的视线


273
00:18:22,736 --> 00:18:25,839 line:-2
Will之前提到过
这些工具是PKTool类型


274
00:18:26,273 --> 00:18:29,843 line:-2
为了创建这些工具 它们是
PKInkingTool类型


275
00:18:30,177 --> 00:18:32,346 line:-1
你可以从这三种类型中制定一个


276
00:18:32,479 --> 00:18:36,783 line:-1
笔 记号笔或铅笔


277
00:18:40,087 --> 00:18:43,790 line:-2
这些工具都是超级动态
以及富有生动的表现


278
00:18:43,991 --> 00:18:47,094 line:-1
你甚至可以通过一条单独的线


279
00:18:47,528 --> 00:18:51,832 line:-2
基于不同Pencil属性 如压力
水平位置 高度位置


280
00:18:52,366 --> 00:18:56,270 line:-2
或速度来让宽度
和不透明度产生了变化


281
00:18:58,805 --> 00:19:04,344 line:-2
你可以在canvasView
设置这个工具来在画布中设置墨水


282
00:19:04,745 --> 00:19:07,881 line:-2
如果你设置canvasView为
选择器工具的一个观察者


283
00:19:08,448 --> 00:19:11,818 line:-2
底层会在canvasView上
设置墨水


284
00:19:12,419 --> 00:19:16,823 line:-2
不过 如果你有签名面板
而不想要选择器工具


285
00:19:17,457 --> 00:19:19,726 line:-1
你可以自己在你的app设置


286
00:19:20,694 --> 00:19:23,564 line:-2
至于PKInkingTool
你会指定其中之一的类型


287
00:19:23,997 --> 00:19:28,802 line:-1
笔 记号笔 铅笔 颜色或宽度


288
00:19:31,038 --> 00:19:35,309 line:-2
对于宽度的值
每个墨水类型都有一个默认的宽度


289
00:19:35,876 --> 00:19:39,513 line:-2
不过 就像我们之前看到的
这个宽度不是一个固定的值


290
00:19:39,580 --> 00:19:42,149 line:-1
它基于不同的笔的属性会改变


291
00:19:42,683 --> 00:19:45,719 line:-1
因此 还不如让这个宽度基于一个


292
00:19:46,019 --> 00:19:49,456 line:-1
平均用户笔的特征来表示一个基准值


293
00:19:50,490 --> 00:19:54,761 line:-2
你也可以查询每个墨水类型
的有效宽度范围


294
00:19:57,197 --> 00:19:59,666 line:-1
你可以看到我在这里使用了笔的工具


295
00:20:00,234 --> 00:20:04,638 line:-2
当我越垂直地握着这支笔
笔触的线条越细


296
00:20:04,938 --> 00:20:08,709 line:-2
但当我越水平地握着这支笔
笔触的线条实际上越粗了


297
00:20:09,643 --> 00:20:12,012 line:-1
当我在选择器工具中改变粗细


298
00:20:12,546 --> 00:20:14,481 line:-1
粗细的程度相应的变化了


299
00:20:18,185 --> 00:20:20,454 line:-1
我们也有一个PKEraser工具


300
00:20:20,521 --> 00:20:23,957 line:-1
你可以用它来指定一个矢量或位图


301
00:20:24,992 --> 00:20:28,996 line:-2
矢量会与物件对应
位图与像素对应


302
00:20:29,830 --> 00:20:31,331 line:-1
我们已经很努力地


303
00:20:31,431 --> 00:20:34,568 line:-1
统一矢量和位图的两个世界


304
00:20:35,068 --> 00:20:37,838 line:-1
矢量是物件 位图是像素


305
00:20:38,472 --> 00:20:41,708 line:-2
我们也切断这些线条
这样你就能分开它们


306
00:20:41,775 --> 00:20:43,777 line:-1
或之后再移除这些物件


307
00:20:44,077 --> 00:20:47,347 line:-1
而不只是消除屏幕上的像素


308
00:20:50,918 --> 00:20:54,121 line:-2
我们也有负责
选择的PKLasso工具


309
00:20:55,389 --> 00:20:59,126 line:-2
使用套索工具 你就能选择你需要
的所有线条


310
00:20:59,626 --> 00:21:03,230 line:-2
接下来 你能四处拖动它们
裁剪 复制 粘贴它


311
00:21:03,497 --> 00:21:06,400 line:-1
或甚至拖拽它们到不同的app中


312
00:21:08,635 --> 00:21:12,472 line:-2
iOS 13的新功能
我们也引入了尺子工具


313
00:21:13,941 --> 00:21:18,478 line:-2
值得注意的是尺子不是一个工具
PKTool


314
00:21:18,545 --> 00:21:21,481 line:-1
而是一个你在画布中切换的属性


315
00:21:21,849 --> 00:21:23,984 line:-1
展示或隐藏尺子


316
00:21:25,519 --> 00:21:29,790 line:-2
你能拖动它来以它为基准
画一条直线


317
00:21:30,057 --> 00:21:32,226 line:-2
或以它为蒙版
就像Will之前做的苹果那样


318
00:21:32,292 --> 00:21:35,896 line:-1
这里是水和草


319
00:21:38,398 --> 00:21:40,834 line:-2
现在 我们浏览了解了一些
很赞的工具


320
00:21:40,968 --> 00:21:45,172 line:-2
我们看看PKToolPicker
以及我们如何在屏幕获取它


321
00:21:47,441 --> 00:21:51,578 line:-2
一个需要注意的重要事情是
选择器工具并不是一个视图


322
00:21:52,112 --> 00:21:54,781 line:-2
取而代之 它是一个展示或
隐藏视图的物件


323
00:21:54,848 --> 00:21:56,783 line:-1
它从画布视图分离出来


324
00:21:57,684 --> 00:22:01,054 line:-2
它漂浮在任何物件之上
也是需要注意的一点


325
00:22:01,288 --> 00:22:03,056 line:-1
它和键盘非常类似


326
00:22:03,123 --> 00:22:06,293 line:-1
它的可见性基于第一个响应器


327
00:22:06,860 --> 00:22:09,897 line:-2
所以 我们来通过一些代码了解
我们怎么做


328
00:22:10,931 --> 00:22:14,234 line:-2
首先 我们为窗口请求共享
的选择器工具


329
00:22:16,069 --> 00:22:18,372 line:-2
我们添加一个画布视图
作为一个观察者


330
00:22:18,672 --> 00:22:21,642 line:-2
这样 无论你怎样在选择器工具
中改变工具


331
00:22:22,176 --> 00:22:24,878 line:-1
你也会在画布视图中改变工具


332
00:22:28,015 --> 00:22:31,018 line:-1
选择器工具也有一个响应器列表


333
00:22:31,485 --> 00:22:33,387 line:-1
如果你的物件成为了第一个响应器


334
00:22:33,554 --> 00:22:35,923 line:-1
以及它在列表中的可见性为真


335
00:22:36,390 --> 00:22:37,724 line:-1
调色板就会出现


336
00:22:38,325 --> 00:22:39,726 line:-1
如果setVisible为假


337
00:22:39,927 --> 00:22:42,796 line:-2
它会从列表中移除它
接着调色盘就会被隐藏


338
00:22:44,198 --> 00:22:47,401 line:-2
接下来 当画布视图成
为了第一个响应器


339
00:22:47,467 --> 00:22:48,602 line:-1
我们想要调色盘出现


340
00:22:48,669 --> 00:22:50,170 line:-1
我们将setVisible设为真


341
00:22:52,206 --> 00:22:53,807 line:-2
最后
我们调用canvasView的


342
00:22:53,874 --> 00:22:56,510 line:-2
becomeFirstResponder
这样调色盘就会出现


343
00:22:58,011 --> 00:22:59,880 line:-1
你可以在我们的示例app中看到


344
00:22:59,980 --> 00:23:02,716 line:-2
只要我们将画布视图设为
becomeFirstResponder


345
00:23:03,016 --> 00:23:04,418 line:-1
调色盘就为可见


346
00:23:05,619 --> 00:23:07,020 line:-1
然而 在我们的示例app中


347
00:23:07,087 --> 00:23:09,489 line:-1
我们也有一个签名面板


348
00:23:09,556 --> 00:23:13,360 line:-1
我们只想为你提供蓝色或黑色的墨水


349
00:23:13,794 --> 00:23:15,596 line:-1
我们不想让调色板出现


350
00:23:16,396 --> 00:23:19,833 line:-2
为了处理这件事
我们实际上要将画布


351
00:23:19,900 --> 00:23:23,070 line:-2
这个签名的画布视图设为
becomeFirstResponder


352
00:23:23,437 --> 00:23:25,973 line:-1
接下来 它会让选择器工具消失


353
00:23:28,375 --> 00:23:30,511 line:-1
当你让签名视图控制器消失时


354
00:23:30,577 --> 00:23:33,647 line:-2
在底层 你会自动地不再是
第一响应器


355
00:23:34,081 --> 00:23:36,617 line:-1
接下来 调色板工具就会再次出现


356
00:23:38,385 --> 00:23:40,454 line:-1
另一件你要留意的事情是


357
00:23:40,521 --> 00:23:42,422 line:-1
这个由基于响应器的可见性


358
00:23:42,589 --> 00:23:45,292 line:-1
是你的app可能已经存在的物件


359
00:23:45,359 --> 00:23:46,760 line:-1
它是第一响应器


360
00:23:47,127 --> 00:23:49,596 line:-2
看吧 比如
这个编辑菜单控制器


361
00:23:49,997 --> 00:23:53,867 line:-2
甚至当你的编辑菜单出现时
你大概会想要保持调色盘不消失


362
00:23:54,468 --> 00:23:58,138 line:-2
为了做到 你会简单地为
你的物件设置可见性为真


363
00:23:58,705 --> 00:24:00,307 line:-1
这样调色盘就会保持可见


364
00:24:02,209 --> 00:24:05,312 line:-1
另一件你想要考虑的是选择器工具


365
00:24:05,512 --> 00:24:08,982 line:-1
是常规或小尺寸的类


366
00:24:09,783 --> 00:24:13,887 line:-2
你会发现在常规尺寸类型中
它浮动在所有物件之上


367
00:24:13,954 --> 00:24:15,355 line:-1
你可以四处移动它


368
00:24:16,089 --> 00:24:17,958 line:-1
然而 在小尺寸的类型中


369
00:24:18,025 --> 00:24:20,527 line:-1
它是固定的和底部的程序坞


370
00:24:21,161 --> 00:24:23,964 line:-1
所以 在你的app中代表着什么呢


371
00:24:25,732 --> 00:24:28,368 line:-1
假使你有一个全尺寸的app


372
00:24:28,702 --> 00:24:30,704 line:-1
无边框 边到边设计的图片


373
00:24:31,205 --> 00:24:34,341 line:-2
它在常规尺寸类型中遮挡了
一些图片


374
00:24:34,608 --> 00:24:37,744 line:-2
但你可以移动选择器工具
到其他地方 这样就可以了


375
00:24:39,112 --> 00:24:41,481 line:-1
然而 在小尺寸类型中


376
00:24:42,182 --> 00:24:45,786 line:-2
实际上遮挡了这张图片
最精彩的部分


377
00:24:46,620 --> 00:24:49,456 line:-1
你会需要在小尺寸类型中


378
00:24:49,523 --> 00:24:53,594 line:-2
确保调整你的视图框架或滚动视图
的嵌入物


379
00:24:53,961 --> 00:24:56,663 line:-1
来解决选择器工具的遮挡问题


380
00:24:58,432 --> 00:25:02,202 line:-2
你可以通过监听选择器工具的
边框大小的改变来解决这个问题


381
00:25:02,269 --> 00:25:06,540 line:-2
使用观测器方法
toolPickerFramesObscured DidChange


382
00:25:06,807 --> 00:25:10,477 line:-2
无论你从移动它从浮动到进坞
你都会获取它


383
00:25:10,878 --> 00:25:13,447 line:-2
这样 你就能在你的视图
调整你的内容


384
00:25:13,514 --> 00:25:16,250 line:-1
通过观测边框尺寸


385
00:25:19,419 --> 00:25:21,555 line:-2
另一件需要为
选择器工具考虑的事情是


386
00:25:21,622 --> 00:25:23,991 line:-1
你的重做和撤销按钮


387
00:25:25,592 --> 00:25:28,028 line:-1
你在常规类型的类中会注意到


388
00:25:28,929 --> 00:25:32,132 line:-1
重做或撤销按钮处于调色盘的内部t


389
00:25:32,199 --> 00:25:33,500 line:-1
提供给你


390
00:25:34,101 --> 00:25:37,437 line:-2
然而 在这个小型类中
它们不在调色盘里


391
00:25:37,738 --> 00:25:40,073 line:-1
那么 你需要保证为这些小型类


392
00:25:40,140 --> 00:25:42,809 line:-1
展示你自己重做和撤销按钮


393
00:25:45,612 --> 00:25:47,147 line:-1
现在 我们了解了


394
00:25:47,214 --> 00:25:50,350 line:-2
你如何在屏幕上获取了一个基本的
画布视图和选择器工具


395
00:25:50,817 --> 00:25:53,954 line:-1
我们来了解更多的一些


396
00:25:54,021 --> 00:25:56,056 line:-1
PencilKit的高级行为


397
00:25:56,356 --> 00:25:58,859 line:-1
从一些画布视图的代理开始


398
00:26:00,360 --> 00:26:03,797 line:-2
你可能想要基于用户是否在画图
来更新你的app


399
00:26:04,364 --> 00:26:07,467 line:-1
你可以通过监听笔或触碰事件


400
00:26:07,734 --> 00:26:11,939 line:-2
这样你就能获取
canvasViewDidBeginUsingTool的回调


401
00:26:13,240 --> 00:26:18,178 line:-2
当笔或手离开屏幕或 你会得到一个
canvasViewDidEndUsingTool的回调


402
00:26:18,579 --> 00:26:22,182 line:-2
然而 在这个时机
你的画画还没有完全地被更新


403
00:26:22,616 --> 00:26:26,453 line:-2
因为就像Will提到过它不会更新
在最后的压力值传入之前


404
00:26:26,887 --> 00:26:30,624 line:-2
你会获得最后的
canvasViewDrawingDidChange


405
00:26:31,124 --> 00:26:35,229 line:-2
只有在这个时机 你才会
真正的完成绘制


406
00:26:35,662 --> 00:26:38,732 line:-1
此刻 你能在画布中查询到绘制


407
00:26:39,233 --> 00:26:43,704 line:-2
更新你的模型物件 制作缩略图
或进行必要的保持


408
00:26:45,239 --> 00:26:49,042 line:-2
你也想要加载在你的画布视图中
加载一个绘制


409
00:26:49,843 --> 00:26:52,112 line:-2
你可以通过调用
set drawing来实现


410
00:26:52,379 --> 00:26:56,083 line:-2
在这个时机 你会开始
在砖块中加载


411
00:26:57,351 --> 00:27:00,287 line:-1
不过 在这些砖块加载完成之后


412
00:27:00,354 --> 00:27:03,790 line:-2
你才会获取到一个
canvasViewDidFinishRendering的回调


413
00:27:04,424 --> 00:27:09,062 line:-1
你也会在滚动或缩放之后获得回调


414
00:27:10,464 --> 00:27:15,469 line:-2
说到滚动 你不
仅仅只能使用Pencil画画


415
00:27:15,936 --> 00:27:17,738 line:-1
你也可以用你的手指画画


416
00:27:18,205 --> 00:27:21,008 line:-2
因为PKCanvasView
是一个滚动视图


417
00:27:21,408 --> 00:27:24,511 line:-1
那意味着一只手指也能画图


418
00:27:31,418 --> 00:27:32,886 line:-1
两只手指滚动操作


419
00:27:35,522 --> 00:27:38,559 line:-2
它通过allowsFingerDrawing
属性


420
00:27:38,625 --> 00:27:39,793 line:-1
在画布视图触发


421
00:27:40,627 --> 00:27:45,265 line:-2
当它被设为真 一只手指和笔画画
两只手指进行滚动操作


422
00:27:45,666 --> 00:27:48,702 line:-1
现在 这是在画布视图的默认行为


423
00:27:48,769 --> 00:27:50,204 line:-1
如果这不是你想要的


424
00:27:50,671 --> 00:27:52,940 line:-1
你可以将这个属性设为假


425
00:27:53,273 --> 00:27:58,245 line:-2
不管哪种方式 只有笔会画画
和一只手指滚动


426
00:27:58,712 --> 00:28:03,183 line:-2
但你应该记住iPhone的上下文
环境中是不支持Pencil使用的


427
00:28:05,419 --> 00:28:07,988 line:-2
如果你的app中有一些更复杂的
交互行为


428
00:28:08,055 --> 00:28:11,358 line:-2
我们也为你暴露了
drawingGestureRecognizer接口


429
00:28:11,859 --> 00:28:14,862 line:-2
你能通过使用它来设置手势识别
的其他情况


430
00:28:14,928 --> 00:28:16,797 line:-1
或失败的请求


431
00:28:17,364 --> 00:28:20,834 line:-2
WWDC 2017中
有一个很棒的演讲


432
00:28:21,134 --> 00:28:24,371 line:-1
iOS上现代用户交互


433
00:28:26,740 --> 00:28:30,911 line:-2
就像Will提到的
我们也在所有的创作部分


434
00:28:30,978 --> 00:28:33,280 line:-2
比如截屏和标注中
使用PencilKit


435
00:28:33,747 --> 00:28:36,817 line:-2
在这些上下文中
你能在所有内容上绘画


436
00:28:37,284 --> 00:28:39,553 line:-1
你能通过设置不透明度为false


437
00:28:39,853 --> 00:28:42,356 line:-1
和设置背景颜色为透明


438
00:28:42,823 --> 00:28:44,825 line:-1
轻易地在你的app中实现


439
00:28:47,895 --> 00:28:50,597 line:-2
在iOS 13
我们也引入了深色模式


440
00:28:50,664 --> 00:28:53,500 line:-1
它是用一种完全不同的途径


441
00:28:53,767 --> 00:28:55,502 line:-1
查看你内容很美妙的方式


442
00:28:55,936 --> 00:28:58,639 line:-2
你的PencilKit的画布
看上去也很酷


443
00:28:58,872 --> 00:29:03,043 line:-1
它的颜色会动态调整保持清晰


444
00:29:03,477 --> 00:29:05,612 line:-1
你可以看到我最初用黑色的墨水


445
00:29:05,679 --> 00:29:07,915 line:-1
在一个白色的背景上写的笔记


446
00:29:08,215 --> 00:29:12,586 line:-2
但在深色模式中 它在一个黑色
背景中改变为了白色墨水


447
00:29:13,053 --> 00:29:15,822 line:-1
我的笔记不仅依然保持清晰


448
00:29:15,889 --> 00:29:17,958 line:-1
它们看上去也很酷


449
00:29:18,859 --> 00:29:20,994 line:-1
默认情况下 你的画布在深色模式下


450
00:29:21,328 --> 00:29:24,765 line:-1
也会动态调整它们的颜色


451
00:29:25,933 --> 00:29:27,868 line:-1
不过 如果这不是你想要的


452
00:29:29,736 --> 00:29:33,640 line:-2
你可以设置overrideUserInterfaceStyle
一直是浅色


453
00:29:34,141 --> 00:29:35,843 line:-1
你会特别地想要这么做


454
00:29:36,143 --> 00:29:38,612 line:-1
如果你标记的内容不改变


455
00:29:38,679 --> 00:29:41,849 line:-2
比如你在一张图片或一个PDF
文件中标记


456
00:29:44,685 --> 00:29:46,987 line:-2
现在 我们了解了
PencilKit


457
00:29:47,054 --> 00:29:51,158 line:-2
你也看到了如何在你的app
中创建酷炫的体验


458
00:29:51,725 --> 00:29:53,327 line:-1
我们来看一下随处标记


459
00:29:53,594 --> 00:29:56,196 line:-1
这是一个新的功能 它让你的app


460
00:29:56,597 --> 00:29:58,866 line:-1
传递被标记的内容


461
00:29:59,600 --> 00:30:02,736 line:-1
它通过截屏的一个新的API


462
00:30:03,036 --> 00:30:06,940 line:-1
为你提供了完整的内容


463
00:30:07,241 --> 00:30:09,610 line:-1
无论你为你的app截了一张图


464
00:30:11,912 --> 00:30:13,947 line:-1
你能在Safari中发现这个功能


465
00:30:14,314 --> 00:30:16,183 line:-1
现在 我打开apple.com


466
00:30:16,717 --> 00:30:18,118 line:-2
我使用Pencil的手势
来截一下屏幕


467
00:30:18,185 --> 00:30:21,154 line:-1
从角落拖过来


468
00:30:21,622 --> 00:30:23,624 line:-1
接着 我又了我喜欢的这个截屏


469
00:30:23,690 --> 00:30:25,692 line:-1
但是我不能看见页面的其他部分


470
00:30:26,026 --> 00:30:28,428 line:-1
所以 我点击上面的全页面部分


471
00:30:28,962 --> 00:30:33,700 line:-2
现在我有了可滚动的完整的网页
可以做标记和分享


472
00:30:35,669 --> 00:30:36,503 line:-1
好的


473
00:30:41,575 --> 00:30:45,245 line:-2
你也能看到我们的示例app中
也实现了这个功能


474
00:30:45,712 --> 00:30:47,748 line:-1
再一次 使用新的截屏手势


475
00:30:48,515 --> 00:30:53,220 line:-2
我会点击全页面部分
现在我有了可以发送的完整笔记


476
00:30:56,223 --> 00:30:59,393 line:-2
你也能在Maps中发现它有趣
的使用场景


477
00:31:00,160 --> 00:31:03,697 line:-2
使用新的截屏手势
我来截一张图


478
00:31:03,997 --> 00:31:07,067 line:-2
但你看到我的截图被铬合金
挡住了


479
00:31:07,701 --> 00:31:10,337 line:-1
当我点击上面的全页面部分


480
00:31:10,871 --> 00:31:13,807 line:-2
我能看到我的地图没有
任何的铬合金


481
00:31:13,874 --> 00:31:16,310 line:-1
我能看到道路和下面的餐厅


482
00:31:18,545 --> 00:31:21,381 line:-1
你只用在你的app中加入几行代码


483
00:31:21,448 --> 00:31:23,617 line:-1
就能实现这个功能


484
00:31:24,251 --> 00:31:26,486 line:-1
你开始会为自己在UIWindowScene


485
00:31:26,553 --> 00:31:30,123 line:-2
设置UIScreenshotService
代理


486
00:31:30,824 --> 00:31:33,660 line:-2
UIWindowScene是今年UIKit
的一个新的API


487
00:31:33,727 --> 00:31:35,329 line:-1
你可以在


488
00:31:35,395 --> 00:31:38,198 line:-2
介绍iPad的多窗口演讲中
了解更多信息


489
00:31:39,299 --> 00:31:41,001 line:-1
在你会为自己设置代理后


490
00:31:41,068 --> 00:31:45,105 line:-2
你会传递全部的内容
它是PDF格式的数据


491
00:31:45,772 --> 00:31:48,108 line:-2
你可能已经为一些行为比如分享
或打印


492
00:31:48,175 --> 00:31:50,410 line:-1
生成过这些信息


493
00:31:50,811 --> 00:31:55,048 line:-2
但若你没有 WWDC 2017
有一个很棒的演讲


494
00:31:55,382 --> 00:31:58,018 line:-1
iOS上的PDFKit的介绍


495
00:31:58,685 --> 00:32:00,521 line:-1
那么 当你拿到了PDF数据


496
00:32:00,854 --> 00:32:03,524 line:-2
你会实现代理方法
screenshotService


497
00:32:03,590 --> 00:32:06,026 line:-2
generatePDFRepresentation
WithCompletion


498
00:32:06,627 --> 00:32:09,796 line:-1
你会传递PDF数据和


499
00:32:10,097 --> 00:32:12,399 line:-1
其他两个元数据到完成处理程序


500
00:32:13,000 --> 00:32:16,537 line:-2
它会帮组我们保证当你从屏幕
到全页面时


501
00:32:16,870 --> 00:32:19,106 line:-1
我们有一个平滑的过渡


502
00:32:20,741 --> 00:32:23,911 line:-2
元数据的第一个数据是
indexOfCurrentPage


503
00:32:24,211 --> 00:32:26,713 line:-2
它在一些使用场景
比如Keynote讲演


504
00:32:26,947 --> 00:32:30,317 line:-1
比如我在第七张幻灯片截了一张图


505
00:32:30,484 --> 00:32:34,922 line:-2
当我切回全页面部分时
它会自动跳转到第七页


506
00:32:37,925 --> 00:32:41,762 line:-2
元数据的第二个数据是
rectInCurrentPage


507
00:32:42,162 --> 00:32:44,464 line:-2
它在一些使用场景
比如Safari中


508
00:32:44,831 --> 00:32:47,201 line:-1
这里 我有这个长的滚动页面


509
00:32:48,001 --> 00:32:49,303 line:-1
我将要滚动到底部


510
00:32:49,369 --> 00:32:52,639 line:-2
因为我对新的iPad Pro非常
感兴趣


511
00:32:53,073 --> 00:32:55,209 line:-1
我在底部这里截一张图


512
00:32:57,544 --> 00:33:00,647 line:-1
现在 当我点击上面的全面屏部分


513
00:33:01,081 --> 00:33:03,483 line:-1
它实际上带我进入了截屏时


514
00:33:03,884 --> 00:33:08,088 line:-2
一样大小的相同的页面
而没有奇怪地跳转到了上方


515
00:33:10,224 --> 00:33:12,426 line:-1
值得注意的是这个RECT


516
00:33:12,826 --> 00:33:15,329 line:-1
是我们在PDF中期待的坐标


517
00:33:15,729 --> 00:33:17,064 line:-1
那么 这意味着什么


518
00:33:17,731 --> 00:33:21,134 line:-2
视图坐标的原始点实际上
是左上角的点


519
00:33:21,602 --> 00:33:24,938 line:-2
然而 在PDF坐标系中
它实际上在左下角


520
00:33:25,239 --> 00:33:28,809 line:-2
所以 你会需要保证
合理的坐标转换


521
00:33:28,876 --> 00:33:31,678 line:-2
将RECT以合理的坐标空间
发送给我们


522
00:33:34,214 --> 00:33:38,352 line:-2
那么 我们向你展示了这些
Pencil的API


523
00:33:38,652 --> 00:33:42,556 line:-2
你可以创建你自己强大的自定义
的绘图引擎


524
00:33:42,923 --> 00:33:45,826 line:-1
但它可能需要一些体力活


525
00:33:45,893 --> 00:33:49,630 line:-1
在快速异步渲染的同时


526
00:33:49,763 --> 00:33:53,300 line:-2
你会需要监听估量的接触点
压力延时


527
00:33:54,201 --> 00:33:57,070 line:-2
但使用新的PencilKit
的API


528
00:33:57,371 --> 00:33:59,373 line:-1
我们为你提供了极其简单的方法


529
00:33:59,439 --> 00:34:01,475 line:-1
来将绘图功能集成至你的app中


530
00:34:01,842 --> 00:34:05,312 line:-2
你会在所有的iOS上获得
同样高表现力


531
00:34:05,379 --> 00:34:07,548 line:-1
低延时的体验


532
00:34:08,649 --> 00:34:13,020 line:-2
最后 你也可以使用UIKit的
其他很棒的Pencil API


533
00:34:13,487 --> 00:34:17,424 line:-2
比如UIPencil交互来处理
Apple Pencil上双击事件


534
00:34:17,791 --> 00:34:20,226 line:-1
或新的UIScreenshotService API


535
00:34:20,293 --> 00:34:23,463 line:-2
这样你就可以发送完整的内容
来随处标记


536
00:34:24,864 --> 00:34:27,967 line:-2
了解更多内容
你可以查看本次演讲的链接


537
00:34:29,335 --> 00:34:33,507 line:-2
现在 开始创建一些酷炫的
Pencil app吧


538
00:34:33,706 --> 00:34:36,677 line:-2
我们祝你有个愉快的
WWDC 2019

