1
00:00:06,640 --> 00:00:10,511 line:-2
（用REALITY COMPOSER
创建AR体验）


2
00:00:20,120 --> 00:00:22,222 line:-1
早上好 很高兴看到你们


3
00:00:22,856 --> 00:00:25,158 line:-2
我希望你们都能度过一个
很棒的WWDC


4
00:00:26,159 --> 00:00:29,196 line:-2
今天能来这里与大家分享
我们感到超级激动


5
00:00:29,263 --> 00:00:31,632 line:-2
用Reality Composer
创建AR体验


6
00:00:32,566 --> 00:00:36,336 line:-2
我是Michelle 稍后同事
Pau和Abhi会加入我


7
00:00:36,870 --> 00:00:39,173 line:-2
今天我们讲什么是
Reality Composer


8
00:00:39,573 --> 00:00:41,408 line:-1
以及它如何帮助你创建AR app


9
00:00:42,476 --> 00:00:43,577 line:-1
在这场演讲之后


10
00:00:43,644 --> 00:00:46,046 line:-2
你将了解Reality Composer
提供哪些功能


11
00:00:46,813 --> 00:00:48,215 line:-2
以及如何在Reality Composer中
设置你的体验


12
00:00:48,815 --> 00:00:51,818 line:-2
然后如何接受…如何把你在
Composer中创建的内容


13
00:00:52,419 --> 00:00:53,787 line:-1
迁移到Xcode中的app中


14
00:00:56,190 --> 00:00:58,592 line:-2
那么首先什么是
Reality Composer？


15
00:00:59,459 --> 00:01:01,195 line:-1
你在本周稍早些时候可能听说了


16
00:01:01,995 --> 00:01:04,263 line:-2
Reality Composer
是一个工具、一个app


17
00:01:04,331 --> 00:01:07,067 line:-1
用于帮助iOS开发人员


18
00:01:07,501 --> 00:01:09,536 line:-1
开始使用3D和AR


19
00:01:10,704 --> 00:01:12,806 line:-2
你们中有些人已经开始使用
3D和AR了


20
00:01:13,140 --> 00:01:15,609 line:-2
在Reality Composer中
查看


21
00:01:16,043 --> 00:01:18,912 line:-1
你所创建、发布和标记的一切内容


22
00:01:18,979 --> 00:01:20,781 line:-1
是一件非常、非常神奇的事


23
00:01:21,315 --> 00:01:23,016 line:-1
因此请继续这样做


24
00:01:24,585 --> 00:01:26,320 line:-1
如果你不熟悉3D


25
00:01:26,587 --> 00:01:30,891 line:-2
你第一次打开3D app时
可能觉得它挺吓人的


26
00:01:31,391 --> 00:01:35,262 line:-1
是时候花时间来使用AR了


27
00:01:36,196 --> 00:01:37,698 line:-2
但通过
Reality Composer


28
00:01:38,232 --> 00:01:43,437 line:-2
视觉化并展示你的体验是一件
非常简单的事


29
00:01:43,504 --> 00:01:45,305 line:-1
可以使用内置内容库实现


30
00:01:45,873 --> 00:01:49,843 line:-2
或者如果你愿意
你可以使用你自己的USDZ


31
00:01:50,444 --> 00:01:54,248 line:-2
如果你不熟悉的话
USDZ只是个3D文件格式


32
00:01:54,314 --> 00:01:56,149 line:-2
Reality Composer
支持它


33
00:01:57,751 --> 00:01:59,553 line:-1
一旦你展示出了体验


34
00:01:59,620 --> 00:02:02,122 line:-2
你可以通过行为系统
添加简单的交互和动画


35
00:02:02,422 --> 00:02:06,059 line:-2
甚至可以在你编写任何代码之前
就实现


36
00:02:06,527 --> 00:02:09,696 line:-2
因此 它确实加速了体验自身的
迭代时间


37
00:02:10,697 --> 00:02:13,700 line:-2
然后最后你在Reality Composer中
所做的一切


38
00:02:13,767 --> 00:02:15,969 line:-2
你都可以直接迁移到
Xcode中的app中


39
00:02:18,238 --> 00:02:21,708 line:-1
关于增强现实的创建


40
00:02:22,509 --> 00:02:26,213 line:-1
就是看到体验在物理空间中的感受


41
00:02:26,513 --> 00:02:28,315 line:-1
在预期的设备上看它


42
00:02:28,382 --> 00:02:31,385 line:-2
并了解你的观众可能会如何看到
那个体验


43
00:02:32,686 --> 00:02:36,089 line:-2
Reality Composer
在macOS上可用


44
00:02:36,690 --> 00:02:38,091 line:-1
在iPhone和iPad上都可用


45
00:02:38,358 --> 00:02:43,297 line:-2
你可在iOS上编辑它 从而你可以
在你常用的开发机器上进行开发


46
00:02:43,797 --> 00:02:48,602 line:-1
然后在iOS上进行编辑


47
00:02:48,969 --> 00:02:50,504 line:-2
从而继续在iPad或
iPhone上处理同一个项目


48
00:02:52,506 --> 00:02:56,176 line:-2
或者你还可以在iOS设备上
开始项目


49
00:02:56,910 --> 00:02:58,078 line:-1
并以另一种方式进行编辑


50
00:03:03,116 --> 00:03:05,419 line:-1
今天我要给你们介绍创建场景


51
00:03:05,953 --> 00:03:08,589 line:-1
Pau会讲添加行为和使用物理世界


52
00:03:09,156 --> 00:03:11,592 line:-1
然后Abhi会讲创建app


53
00:03:11,658 --> 00:03:13,060 line:-1
（创建场景）


54
00:03:13,627 --> 00:03:15,863 line:-1
对于创建场景


55
00:03:17,197 --> 00:03:18,532 line:-1
首先场景是什么？


56
00:03:18,599 --> 00:03:23,036 line:-1
你可能在RealityKit入门


57
00:03:23,103 --> 00:03:24,505 line:-2
和Reality Composer
演讲中听到过


58
00:03:24,872 --> 00:03:28,242 line:-2
Reality Composer
场景从本质上来说是实体的集合


59
00:03:28,709 --> 00:03:31,245 line:-1
包含锚点、对象、


60
00:03:32,045 --> 00:03:33,881 line:-1
行为和物理世界


61
00:03:36,183 --> 00:03:38,252 line:-1
每个场景都恰好只有一个锚点


62
00:03:38,585 --> 00:03:42,089 line:-2
当你开始一个项目或当你开始一个
场景时 任何场景


63
00:03:42,756 --> 00:03:46,393 line:-2
你都会被问到你在营造什么样的场景
什么样的体验


64
00:03:47,461 --> 00:03:51,965 line:-2
如果你要创建房间里、舞台上
或桌面上的东西


65
00:03:52,533 --> 00:03:53,767 line:-1
你要选择水平锚点


66
00:03:54,801 --> 00:03:57,204 line:-2
如果你希望它在墙面上
请选择垂直锚点


67
00:03:58,405 --> 00:04:00,174 line:-1
如果你正在增强一本书


68
00:04:00,440 --> 00:04:04,244 line:-2
或一些包装、一本手册
或一张电影海报


69
00:04:05,078 --> 00:04:06,079 line:-1
请选择图像锚点


70
00:04:06,747 --> 00:04:10,150 line:-1
对于自拍效果 比如眼镜或帽子


71
00:04:10,884 --> 00:04:11,785 line:-1
请选择面部锚点


72
00:04:12,786 --> 00:04:15,222 line:-1
项目可以有多个场景


73
00:04:15,556 --> 00:04:17,858 line:-1
但我认为你会发现当你第一次尝试时


74
00:04:17,925 --> 00:04:19,726 line:-1
一个或两个场景通常就足够了


75
00:04:21,827 --> 00:04:22,930 line:-1
好的 在这个例子中


76
00:04:22,996 --> 00:04:25,265 line:-1
让我们假设你已经选择了水平锚点


77
00:04:25,866 --> 00:04:27,601 line:-1
我们在这里


78
00:04:28,435 --> 00:04:30,637 line:-2
在Reality Composer中
内容是我们的主要关注点


79
00:04:31,238 --> 00:04:34,374 line:-2
它的布局和你在AR中看到的
一模一样


80
00:04:34,942 --> 00:04:37,477 line:-1
布局位于主视图端口或工作空间中


81
00:04:38,312 --> 00:04:39,780 line:-1
右侧的面板…


82
00:04:41,014 --> 00:04:43,383 line:-1
显示了你所选择的所有属性


83
00:04:44,051 --> 00:04:46,653 line:-1
并显示配置该实体的各种选项


84
00:04:47,154 --> 00:04:50,858 line:-2
可以是对象自身
就像这里所选择的这个文本一样


85
00:04:50,924 --> 00:04:53,527 line:-1
你可以看到它因为圆环而被选中


86
00:04:54,895 --> 00:04:56,597 line:-1
你可以选择对象


87
00:04:56,997 --> 00:04:57,831 line:-1
或一个场景


88
00:04:59,166 --> 00:05:00,367 line:-1
我可以给你展示更多的幻灯片


89
00:05:00,634 --> 00:05:04,404 line:-2
但我们为什么不一起在iPad上
了解一下Composer呢？


90
00:05:05,272 --> 00:05:07,641 line:-1
哦 不过我希望你们记住这个场景


91
00:05:07,708 --> 00:05:10,310 line:-1
因为我们要在本场演讲过程中


92
00:05:10,711 --> 00:05:12,179 line:-1
一起创建这个小教程


93
00:05:12,546 --> 00:05:15,649 line:-1
它是季节和太阳系课程


94
00:05:16,183 --> 00:05:17,217 line:-1
我们要在AR中创建它


95
00:05:21,221 --> 00:05:22,756 line:-1
好的 为了我们的演示


96
00:05:23,524 --> 00:05:27,928 line:-1
我要给你讲三个完全不同的RC项目


97
00:05:28,529 --> 00:05:30,030 line:-1
第一个有点像是初级版


98
00:05:32,399 --> 00:05:36,403 line:-1
它会给你展示五个


99
00:05:36,703 --> 00:05:38,672 line:-2
你可以在Reality Composer中
创建的非常基本的例子


100
00:05:38,739 --> 00:05:40,307 line:-1
很可能几分钟后你就会看到它


101
00:05:41,175 --> 00:05:46,613 line:-2
第二个是一个丰富得多
也复杂得多的体验


102
00:05:46,680 --> 00:05:50,150 line:-2
一个完整体验 关于你可以在
Reality Composer上独立地创建什么


103
00:05:50,951 --> 00:05:52,686 line:-1
如果你不想写任何代码的话


104
00:05:52,753 --> 00:05:54,488 line:-1
这非常棒 如果你不是个开发人员


105
00:05:54,755 --> 00:05:55,956 line:-1
或你只是刚开始尝试


106
00:05:56,023 --> 00:05:58,192 line:-1
并且你希望在开发app时


107
00:05:58,492 --> 00:05:59,960 line:-1
在完全投入使用它之前


108
00:06:00,894 --> 00:06:02,196 line:-1
先尝试一下体验的话


109
00:06:02,930 --> 00:06:07,501 line:-2
最后我们要一起创建我们看到的那个
季节场景


110
00:06:08,135 --> 00:06:09,837 line:-1
好的 那么这里是初级版…


111
00:06:10,938 --> 00:06:11,905 line:-1
在Reality Composer中


112
00:06:13,307 --> 00:06:14,842 line:-1
我要把我们带到AR中


113
00:06:15,442 --> 00:06:18,045 line:-1
因为我们打算在AR中看它


114
00:06:19,012 --> 00:06:21,081 line:-1
好的 这是我提到过的五个例子


115
00:06:21,148 --> 00:06:22,549 line:-1
让我们按播放…


116
00:06:23,217 --> 00:06:25,786 line:-1
以便我们可以看到交互


117
00:06:26,253 --> 00:06:27,454 line:-1
当我们开始之后


118
00:06:28,121 --> 00:06:29,323 line:-1
我们就 哦 大家好


119
00:06:30,390 --> 00:06:32,960 line:-1
当我们开始之后 螺旋开始旋转


120
00:06:33,594 --> 00:06:36,129 line:-2
在这里 如果我在第二个例子中
靠近一些


121
00:06:36,630 --> 00:06:37,965 line:-1
我可以让这个棋子抖动


122
00:06:39,666 --> 00:06:41,368 line:-1
我可以轻触这个棋子 获得物理移动


123
00:06:42,436 --> 00:06:43,470 line:-1
并得到一个声音


124
00:06:44,037 --> 00:06:45,038 line:-1
这是一种很有意思的声音


125
00:06:46,406 --> 00:06:48,742 line:-1
然后有人问我 如果我是个动画师


126
00:06:48,809 --> 00:06:51,345 line:-1
并且我有自己的模型


127
00:06:51,712 --> 00:06:53,080 line:-1
我有自己的动画


128
00:06:53,580 --> 00:06:55,516 line:-2
我是否可以把它们放到
Reality Composer中？


129
00:06:55,582 --> 00:06:57,017 line:-1
是的 你可以


130
00:06:57,851 --> 00:07:00,754 line:-2
你可以在用户交互上触发它们
比如轻触


131
00:07:01,288 --> 00:07:02,489 line:-1
如果你不是动画师


132
00:07:02,890 --> 00:07:04,491 line:-1
你可以在场景中的任意对象上


133
00:07:04,558 --> 00:07:06,860 line:-1
使用预制的强调动画


134
00:07:07,127 --> 00:07:09,563 line:-2
在这里我们已经把它们应用到了
一些非常基本的图形上


135
00:07:09,630 --> 00:07:12,533 line:-2
但你可以把它们应用到 你知道的
应用到这个舞者身上


136
00:07:15,135 --> 00:07:16,403 line:-1
这就是AR中的场景


137
00:07:21,642 --> 00:07:23,010 line:-1
接下来我给你展示…


138
00:07:23,544 --> 00:07:27,047 line:-1
这个更复杂的体验 更丰富的体验


139
00:07:28,448 --> 00:07:31,485 line:-2
哦 你很可能在想
我如何在场景中移动内容


140
00:07:31,752 --> 00:07:32,653 line:-1
移动摄像头


141
00:07:32,920 --> 00:07:36,657 line:-1
对于平移 我所做的就是用两根手指


142
00:07:37,090 --> 00:07:38,992 line:-1
像这样移动它们


143
00:07:39,326 --> 00:07:41,762 line:-1
从而我可以看到我想要看的内容


144
00:07:42,863 --> 00:07:45,566 line:-1
如果你观看了周二的极限特工


145
00:07:45,632 --> 00:07:47,334 line:-1
你可能会觉得这个小岛很眼熟


146
00:07:47,935 --> 00:07:49,937 line:-1
我们希望能再增加一些体验


147
00:07:50,003 --> 00:07:53,473 line:-2
因此如果你想象你正在开发
比如博物馆


148
00:07:53,540 --> 00:07:56,743 line:-1
或旅游中心体验


149
00:07:57,110 --> 00:07:59,513 line:-1
这是我们在这里所设想的东西


150
00:08:00,314 --> 00:08:02,349 line:-1
让我们在AR中看一下这个


151
00:08:03,650 --> 00:08:06,887 line:-1
我要按播放从而开始播放


152
00:08:11,158 --> 00:08:12,826 line:-1
你可以听到一些波浪声


153
00:08:15,195 --> 00:08:18,732 line:-2
现在提示我们轻触直升飞机
让我们这样做吧


154
00:08:22,769 --> 00:08:25,939 line:-2
你可以看到还要求我们轻触位置
以了解更多


155
00:08:26,773 --> 00:08:29,109 line:-1
因此我要轻触这些标记


156
00:08:29,176 --> 00:08:33,614 line:-2
你可以看到我得到了关于我所轻触的
每个位置的更多信息


157
00:08:34,881 --> 00:08:35,948 line:-1
其它位置都消退了


158
00:08:44,024 --> 00:08:47,394 line:-2
我还要拆开来讲
我们如何创建了这个场景


159
00:08:49,162 --> 00:08:52,332 line:-1
那么…实际上在这个场景中


160
00:08:52,399 --> 00:08:55,602 line:-1
并没有太多自定义内容


161
00:08:55,936 --> 00:08:58,772 line:-2
只有设计师创建的两个
自定义USDZ


162
00:08:58,839 --> 00:09:00,774 line:-1
小岛和直升机


163
00:09:00,841 --> 00:09:02,376 line:-1
你可以看到在这里我们导入了它们


164
00:09:02,442 --> 00:09:03,777 line:-1
如果你想的话 你可以导入更多


165
00:09:04,311 --> 00:09:08,081 line:-1
其余的都是从内容库中创建的


166
00:09:08,382 --> 00:09:09,383 line:-2
内容库是与
Reality Composer配套的


167
00:09:09,449 --> 00:09:10,817 line:-1
你可以看到我们在这里有许多东西


168
00:09:12,386 --> 00:09:13,687 line:-1
文本、基本形状


169
00:09:13,987 --> 00:09:16,423 line:-1
这就是你在这个场景中所看到的东西


170
00:09:16,490 --> 00:09:19,159 line:-1
这些标记只是基本形状


171
00:09:19,760 --> 00:09:23,363 line:-2
我们把它们合在一起
两个图形创建一个标记


172
00:09:24,298 --> 00:09:25,599 line:-1
在这里添加文本


173
00:09:26,900 --> 00:09:28,402 line:-1
我们还经常被问到另一个问题


174
00:09:28,836 --> 00:09:33,574 line:-2
我主要在2D中工作
因此我有许多图片


175
00:09:34,875 --> 00:09:36,109 line:-1
你知道的 公司的图像


176
00:09:36,176 --> 00:09:37,878 line:-2
我可以在Reality Composer中
使用它们吗？


177
00:09:38,412 --> 00:09:39,479 line:-1
答案为是的


178
00:09:39,546 --> 00:09:40,480 line:-1
你当然可以了！


179
00:09:40,948 --> 00:09:42,449 line:-1
你可以把它们带到体验中来…


180
00:09:44,518 --> 00:09:47,554 line:-1
因为照片使用图片框架


181
00:09:47,621 --> 00:09:49,990 line:-2
图片框架就包含在
我们刚看到的内容库中


182
00:09:51,859 --> 00:09:52,860 line:-1
就在Finally中


183
00:09:54,194 --> 00:09:57,331 line:-2
你很可能在想我们要如何创建
那些小型交互？


184
00:09:57,731 --> 00:09:59,366 line:0
如果我们进入行为


185
00:09:59,433 --> 00:10:03,003 line:0
通过点击右上方的行为按钮


186
00:10:04,238 --> 00:10:07,808 line:0
你可以看到我们用于创建
那一系列流程


187
00:10:08,742 --> 00:10:09,676 line:0
和那些交互的行为


188
00:10:09,743 --> 00:10:12,546 line:0
我们在宣传要看的东西


189
00:10:12,613 --> 00:10:14,515 line:0
你可能已经注意到随着我移动场景


190
00:10:14,982 --> 00:10:16,416 line:-1
场景中的那些对象都盯着我看


191
00:10:17,651 --> 00:10:20,254 line:0
我们在这里使用了
Look At动作


192
00:10:20,687 --> 00:10:22,222 line:-1
从而让一切东西都盯着摄像头看


193
00:10:23,190 --> 00:10:25,292 line:0
开始你只看到了小岛


194
00:10:27,094 --> 00:10:28,562 line:-1
其它一切都是隐藏的


195
00:10:28,629 --> 00:10:30,297 line:0
你可以看到我们隐藏了其它东西


196
00:10:30,797 --> 00:10:32,766 line:0
然后我们依次把它们展示给你


197
00:10:33,033 --> 00:10:34,935 line:0
我们等0.2秒


198
00:10:35,402 --> 00:10:38,305 line:0
然后我们首先显示了直升机文本


199
00:10:39,173 --> 00:10:41,875 line:0
然后我们显示了直升机
以及直升机的轻触以开始


200
00:10:42,643 --> 00:10:45,546 line:0
然后我们淡入了下边的标记


201
00:10:45,612 --> 00:10:47,247 line:0
这就是下边的动作


202
00:10:47,314 --> 00:10:50,284 line:0
我现在就可以给你预览一下
我只需要按卡片上的播放即可


203
00:10:53,153 --> 00:10:56,223 line:0
我还要给你展示一个小秘密


204
00:10:57,591 --> 00:10:58,825 line:0
这些鸟…


205
00:10:59,326 --> 00:11:00,294 line:0
你可能已经注意到了…


206
00:11:06,033 --> 00:11:07,601 line:0
我要从这里看它们


207
00:11:08,068 --> 00:11:11,371 line:0
我们要求它们以群组为单位
绕着小岛飞行


208
00:11:12,339 --> 00:11:14,942 line:0
它们根本不是真实的鸟


209
00:11:15,475 --> 00:11:18,679 line:0
它们只是我们所使用的基本体


210
00:11:18,745 --> 00:11:19,947 line:-1
或只是基础形状


211
00:11:20,214 --> 00:11:24,985 line:0
我们放了两张移动卡片
用作翅膀拍打效果


212
00:11:25,052 --> 00:11:27,187 line:0
我们不再花时间创建小鸟了


213
00:11:27,454 --> 00:11:31,558 line:0
我们所做的就是获取一对形状
并在这对形状上施加两个行动卡片


214
00:11:32,125 --> 00:11:33,126 line:-1
从而形成动画


215
00:11:33,927 --> 00:11:36,296 line:0
如果你之前尝试过制作动画


216
00:11:36,363 --> 00:11:39,433 line:0
你就知道创建一个这么简单的东西
是多么费时间


217
00:11:39,733 --> 00:11:41,235 line:0
而这样只需要几秒钟


218
00:11:43,537 --> 00:11:47,508 line:-2
那么这是一个你可以
在Reality Composer中


219
00:11:48,141 --> 00:11:51,545 line:-2
完全不需要代码就能实现的
完整体验的一个例子


220
00:11:52,079 --> 00:11:53,947 line:-1
最棒的是


221
00:11:54,014 --> 00:11:56,083 line:-1
一旦你拥有这个Reality文件


222
00:11:56,550 --> 00:12:00,554 line:-2
你就可以把它分享给任何人并可以在
AR QuickLook中预览它


223
00:12:01,054 --> 00:12:03,624 line:-2
而你得到的体验与你在
Composer中实现的一模一样


224
00:12:04,758 --> 00:12:05,893 line:-1
那么这是第二个项目


225
00:12:12,533 --> 00:12:13,834 line:-1
最后让我们一起创建…


226
00:12:14,334 --> 00:12:16,870 line:-1
那个季节课程的体验


227
00:12:17,504 --> 00:12:20,340 line:-1
我要添加三个天体


228
00:12:21,341 --> 00:12:22,876 line:-1
太阳、月球和地球


229
00:12:23,544 --> 00:12:25,879 line:-1
为此我只需要用一些占位符对象


230
00:12:26,380 --> 00:12:29,583 line:-1
画出场景的草图就可以开始了


231
00:12:30,350 --> 00:12:31,652 line:-1
这是太阳 我已经把它引入进来了


232
00:12:33,453 --> 00:12:34,588 line:-1
现在我要…


233
00:12:36,223 --> 00:12:37,324 line:-1
复制它…


234
00:12:39,359 --> 00:12:42,029 line:-1
来创建…地球


235
00:12:43,664 --> 00:12:46,600 line:-2
我只需要在这里使用捏合
把它缩小一点


236
00:12:47,201 --> 00:12:48,235 line:-1
移动摄像头


237
00:12:48,302 --> 00:12:50,971 line:-1
让我们…抓住这个箭头


238
00:12:51,438 --> 00:12:52,372 line:-1
把地球移过去


239
00:12:53,707 --> 00:12:54,942 line:-1
然后接下来…


240
00:12:55,576 --> 00:12:57,277 line:-1
我还需要一个月球


241
00:12:58,011 --> 00:12:59,746 line:-1
让我们再次复制它


242
00:13:00,681 --> 00:13:01,915 line:-1
把它带到这里


243
00:13:03,917 --> 00:13:06,453 line:-2
然后我可以抓住这个圆环上的
任意位置


244
00:13:06,520 --> 00:13:07,454 line:-1
从而把它移到这个平面上来


245
00:13:08,355 --> 00:13:09,289 line:-1
让我们把它移过来


246
00:13:09,590 --> 00:13:10,624 line:-1
好的 很棒


247
00:13:11,291 --> 00:13:13,627 line:-1
现在我想稍微把月球缩小点


248
00:13:14,394 --> 00:13:17,397 line:-2
我只需要抓住圆环并向内移动
即可缩小它


249
00:13:20,267 --> 00:13:21,168 line:-1
好了


250
00:13:21,702 --> 00:13:22,870 line:-1
把它移近一些


251
00:13:24,071 --> 00:13:25,539 line:-1
好的 我们有这三个天体


252
00:13:25,906 --> 00:13:27,374 line:-1
让我们把太阳放大一些


253
00:13:27,441 --> 00:13:28,408 line:-1
我再次抓住这个圆环


254
00:13:29,009 --> 00:13:30,177 line:-1
只需要抓住它就能调整尺寸


255
00:13:31,578 --> 00:13:32,479 line:-1
调整太阳的尺寸


256
00:13:34,448 --> 00:13:36,116 line:-1
我们已经有了三个主体


257
00:13:37,885 --> 00:13:40,254 line:-1
接下来我要添加一些文本


258
00:13:40,687 --> 00:13:42,022 line:-1
我要再次进入内容库


259
00:13:42,689 --> 00:13:43,524 line:-1
让我们获取文本


260
00:13:44,224 --> 00:13:47,528 line:-1
看起来比我预期的位置要低一些


261
00:13:47,594 --> 00:13:50,564 line:-2
我只需要抓住这个绿色箭头
并把它拽上去即可


262
00:13:51,365 --> 00:13:53,667 line:-1
你可以看到它弹出显示在地平面上


263
00:13:54,101 --> 00:13:57,538 line:-1
那是因为我打开了吸附功能


264
00:13:57,604 --> 00:13:59,973 line:-2
如果你看一下左边的角落
我们有这个小磁体


265
00:14:00,040 --> 00:14:02,676 line:-2
如果我想自由移动物体
我可以把吸附关掉


266
00:14:02,743 --> 00:14:05,345 line:-2
但实际上我只想拉动这个蓝色箭头
让它靠前一些


267
00:14:06,813 --> 00:14:10,250 line:-1
我希望它距离太阳


268
00:14:12,853 --> 00:14:13,887 line:-1
大概半米左右…


269
00:14:14,821 --> 00:14:17,324 line:-1
我要打开我们在右侧看到的面板


270
00:14:17,858 --> 00:14:19,026 line:-1
用来修改文本


271
00:14:19,693 --> 00:14:21,762 line:-1
让我们把它修改为秋季


272
00:14:25,332 --> 00:14:28,635 line:-2
在Composer中添加这些元素
非常简单


273
00:14:32,005 --> 00:14:34,441 line:-1
最后我认为这就是我想要得到的效果


274
00:14:34,508 --> 00:14:37,044 line:-1
因此我只需要使用手指触摸屏幕


275
00:14:37,110 --> 00:14:37,945 line:-1
就可以四处移动摄像头


276
00:14:41,281 --> 00:14:44,084 line:-1
接下来我要添加…一个箭头


277
00:14:46,954 --> 00:14:49,056 line:-1
它并没有指向我希望它指向的方向


278
00:14:49,556 --> 00:14:50,390 line:-1
旋转一下


279
00:14:50,457 --> 00:14:54,928 line:-2
我要移动摄像头
这样我就可以看到绿色圆环


280
00:14:55,362 --> 00:14:57,497 line:-1
它位于地平面上


281
00:14:57,831 --> 00:15:01,101 line:-1
这个圆圈随着摄像头的移动而旋转


282
00:15:01,168 --> 00:15:04,538 line:-1
我总是可以处于我想处于的平面上


283
00:15:05,072 --> 00:15:08,175 line:-1
如果我不想通过移动摄像头来实现


284
00:15:08,242 --> 00:15:12,079 line:-2
我只需要轻触箭头即可
那会锁定到相应的区域


285
00:15:12,145 --> 00:15:13,647 line:-1
你可以看到圆环变得有点扁了


286
00:15:14,281 --> 00:15:16,083 line:-1
我只需要旋转…


287
00:15:16,583 --> 00:15:19,052 line:-2
这个区域 它正以15度角增量
进行吸附


288
00:15:19,119 --> 00:15:20,954 line:-1
再一次 因为我打开了吸附功能


289
00:15:21,522 --> 00:15:24,424 line:-2
但如果我不想让它吸附的话
我可以自由移动


290
00:15:24,491 --> 00:15:25,559 line:-1
在这里我拖动它


291
00:15:25,626 --> 00:15:29,162 line:-1
它总是在水平面上移动


292
00:15:29,229 --> 00:15:30,264 line:-1
在这个绿色圆环上移动


293
00:15:30,797 --> 00:15:34,001 line:-1
但我实际上希望它吸附在


294
00:15:34,067 --> 00:15:35,602 line:-1
太阳球体和秋季文本之间


295
00:15:35,669 --> 00:15:36,770 line:-1
因此我要打开吸附功能


296
00:15:38,272 --> 00:15:39,306 line:-1
你可以看到它吸附到那个位置了


297
00:15:39,673 --> 00:15:42,176 line:-1
这超级有用 超级简单


298
00:15:42,943 --> 00:15:43,777 line:-1
然后…


299
00:15:44,711 --> 00:15:46,647 line:-1
我想稍微修改一下这个箭头


300
00:15:47,114 --> 00:15:52,419 line:-2
我可以继续并点击
吸附旁边的图标文本来修改它


301
00:15:53,187 --> 00:15:55,989 line:-2
我要把它稍微放大点
这样我们能看得更清楚


302
00:15:56,990 --> 00:15:58,392 line:-1
我可以抓住这个手柄


303
00:15:58,792 --> 00:15:59,626 line:-1
拖动它


304
00:16:00,827 --> 00:16:03,997 line:-1
我还要把这个稍微变小点


305
00:16:04,665 --> 00:16:05,532 line:-1
稍微变平点


306
00:16:07,034 --> 00:16:10,804 line:-1
好的 然后我要把它移远一些


307
00:16:12,506 --> 00:16:14,341 line:-1
好的 现在一切都好像被挡住了


308
00:16:14,675 --> 00:16:15,943 line:-1
我们只花了几分钟就实现了


309
00:16:17,444 --> 00:16:20,180 line:-1
我实际上想替换这些天体


310
00:16:20,247 --> 00:16:22,549 line:-1
因为它们现在看起来都非常模糊


311
00:16:22,616 --> 00:16:24,952 line:-1
我想导入一些自定义USDZ


312
00:16:25,752 --> 00:16:28,722 line:-2
因为我已经把它们放在我想要放的
位置上了


313
00:16:29,256 --> 00:16:30,257 line:-1
我要做一次替换


314
00:16:30,324 --> 00:16:32,192 line:-1
因此我只需要轻触这个对象


315
00:16:32,492 --> 00:16:33,727 line:-1
我得到了这个编辑菜单


316
00:16:34,094 --> 00:16:35,095 line:-1
点击替换


317
00:16:35,162 --> 00:16:36,296 line:-1
我要导入…


318
00:16:38,632 --> 00:16:39,600 line:-1
太阳…


319
00:16:42,069 --> 00:16:44,037 line:-1
这将替换太阳


320
00:16:44,104 --> 00:16:45,939 line:-1
你可以看到尺寸一样


321
00:16:46,206 --> 00:16:48,308 line:-2
并且它正好是在
我所期待的正确位置上


322
00:16:50,744 --> 00:16:52,012 line:-1
我可以采用同样的方式…


323
00:16:52,713 --> 00:16:53,614 line:-1
替换地球


324
00:16:54,948 --> 00:16:56,216 line:-1
让我们快速实现一下


325
00:16:58,218 --> 00:16:59,186 line:-1
好了


326
00:16:59,653 --> 00:17:01,822 line:-1
还有月球 我要…


327
00:17:03,357 --> 00:17:05,459 line:-1
对它进行一些自定义 通过一些


328
00:17:05,925 --> 00:17:07,861 line:-1
让我们看一下 我想要地图材料


329
00:17:08,395 --> 00:17:10,631 line:-1
我可以让月球显示我想要显示的颜色


330
00:17:10,696 --> 00:17:12,665 line:-1
但我认为


331
00:17:12,733 --> 00:17:14,902 line:-1
为了安全起见我要选择灰色


332
00:17:17,538 --> 00:17:19,839 line:-1
如果我想更好地查看任何一项


333
00:17:20,440 --> 00:17:22,742 line:-1
我只需要双击来框住对象


334
00:17:23,176 --> 00:17:24,778 line:-2
这是在场景中四处游逛的一种
非常简单的方式


335
00:17:25,779 --> 00:17:27,848 line:-1
或如果我想查看场景 向后拉


336
00:17:28,515 --> 00:17:30,884 line:-1
我可以双击网格中的任意位置


337
00:17:31,218 --> 00:17:32,085 line:-1
来查看场景


338
00:17:32,419 --> 00:17:33,487 line:-1
这里还可以使用那些快捷方式


339
00:17:33,554 --> 00:17:36,823 line:-1
框住场景或框住所选定的东西


340
00:17:39,860 --> 00:17:43,730 line:-2
好的 我想我们已经准备好
添加行为了


341
00:17:44,064 --> 00:17:45,999 line:-1
我可以添加所有其它元素


342
00:17:46,066 --> 00:17:48,468 line:-2
但由于时间关系
我们现在不添加全部元素


343
00:17:49,503 --> 00:17:51,305 line:-1
在我们完成这部分演示之前


344
00:17:52,039 --> 00:17:54,641 line:-1
我想与你们分享一些小窍门


345
00:17:55,742 --> 00:17:57,144 line:-1
你看到那个替换了吗？


346
00:17:57,945 --> 00:17:59,913 line:-1
如果我们已经应用了行为


347
00:17:59,980 --> 00:18:02,916 line:-1
就像我们做其它动画一样 比如


348
00:18:02,983 --> 00:18:05,385 line:-1
假如是太阳 如果我替换它


349
00:18:05,986 --> 00:18:07,154 line:-1
那些行为将会保留下来


350
00:18:07,221 --> 00:18:08,522 line:-1
这会节约很多时间


351
00:18:08,589 --> 00:18:11,291 line:-1
如果你只想替换新内容的话


352
00:18:12,159 --> 00:18:13,193 line:-1
这个技巧很强大


353
00:18:14,161 --> 00:18:16,463 line:-1
然后同时我们提到了拥有多个场景


354
00:18:16,530 --> 00:18:19,700 line:-2
你可以在左上方的场景选择器中
访问它们


355
00:18:20,334 --> 00:18:22,336 line:-1
因此如果你想添加更多场景


356
00:18:22,402 --> 00:18:23,403 line:-1
你只需要在这里添加即可


357
00:18:27,708 --> 00:18:30,944 line:-2
如果你正在Xcode中
处理这些实体


358
00:18:31,011 --> 00:18:32,145 line:-1
你一定想给它们命名


359
00:18:32,412 --> 00:18:34,681 line:-2
你将在演讲的后半部分了解
与此相关的更多信息


360
00:18:35,282 --> 00:18:37,017 line:-1
你可以在打开面板时就开始命名


361
00:18:37,084 --> 00:18:39,686 line:-2
有一个配置面板
你可以在这里给实体命名


362
00:18:40,053 --> 00:18:41,221 line:-1
我要把它命名为太阳


363
00:18:43,757 --> 00:18:46,193 line:-1
最后如果有一些你不想做的操作


364
00:18:46,260 --> 00:18:48,362 line:-1
比如假如我移动了地球


365
00:18:49,196 --> 00:18:50,464 line:-1
但我却不想这样做


366
00:18:50,531 --> 00:18:51,965 line:-1
我可以撤销那个动作


367
00:18:52,466 --> 00:18:55,302 line:-1
我还可以长按


368
00:18:57,004 --> 00:19:00,307 line:-2
并重做 它会告诉我说
比如会做什么


369
00:19:00,607 --> 00:19:05,546 line:-1
我即将调用的撤销会做什么


370
00:19:07,147 --> 00:19:08,081 line:-1
好的


371
00:19:09,683 --> 00:19:11,718 line:-1
最后有些人问我


372
00:19:11,785 --> 00:19:13,387 line:-1
共享RC项目的最简单的方式是什么


373
00:19:13,754 --> 00:19:16,490 line:-1
你可以在设备间进行隔空投送


374
00:19:16,890 --> 00:19:19,826 line:-2
或像我们之前讲过的那样
你可以在iOS上使用编辑


375
00:19:20,260 --> 00:19:23,997 line:-2
轻松地在开发机器和iOS设备之间
进行共享


376
00:19:25,799 --> 00:19:26,733 line:-1
好的


377
00:19:28,268 --> 00:19:32,005 line:-2
我们现在得到了这个场景
已经准备好添加行为了


378
00:19:33,173 --> 00:19:37,211 line:-2
你刚了解了如何
在Reality Composer中创建场景


379
00:19:37,945 --> 00:19:40,714 line:-1
我要带你们了解如何使用内容库


380
00:19:41,114 --> 00:19:42,482 line:-1
进行快速布局


381
00:19:42,816 --> 00:19:45,686 line:-2
我们刚才还讲了
如何引入你的自定义USDZ


382
00:19:47,821 --> 00:19:52,459 line:-1
现在我们将转到添加交互和行为上


383
00:19:52,526 --> 00:19:54,161 line:-1
为了让你们了解这些内容


384
00:19:54,461 --> 00:19:55,863 line:-1
让我们欢迎我的同事Pau上台来


385
00:19:59,933 --> 00:20:01,101 line:-1
谢谢Michelle


386
00:20:02,202 --> 00:20:03,270 line:-1
好的


387
00:20:03,337 --> 00:20:04,404 line:-1
（添加行为）


388
00:20:05,138 --> 00:20:08,976 line:-2
现在我们了解了如何向场景中
引入内容


389
00:20:09,443 --> 00:20:11,912 line:-1
现在是时候让全部这些内容动起来了


390
00:20:12,913 --> 00:20:17,217 line:-2
当用户轻触某个对象时
你可能想播放一些音乐


391
00:20:17,584 --> 00:20:20,687 line:-2
或当用户靠近某个对象时
显示一些文本


392
00:20:21,622 --> 00:20:24,024 line:-1
或也许你只想播放一些USD动画


393
00:20:25,158 --> 00:20:26,660 line:-1
为了实现这些功能以及更多功能


394
00:20:27,094 --> 00:20:29,463 line:-2
我们需要利用
Reality Composer中的行为


395
00:20:30,464 --> 00:20:31,431 line:-1
让我们开始吧


396
00:20:32,866 --> 00:20:33,967 line:-1
正如我们之前所看到的


397
00:20:34,034 --> 00:20:36,103 line:-2
Reality Composer
中的场景包含一个锚点、


398
00:20:36,470 --> 00:20:38,939 line:-1
对象、行为和物理世界


399
00:20:39,973 --> 00:20:41,808 line:-1
行为总是发生在场景范围内


400
00:20:41,875 --> 00:20:44,945 line:-2
意思是你只能在同一个场景内
定位对象


401
00:20:47,614 --> 00:20:49,483 line:-1
让我们具体看一下什么是行为


402
00:20:50,751 --> 00:20:52,719 line:-1
行为由两种东西组成


403
00:20:53,120 --> 00:20:54,855 line:-1
触发器和动作序列


404
00:20:55,622 --> 00:20:57,090 line:-1
触发器 正如它的名字所暗示的那样


405
00:20:57,157 --> 00:20:59,893 line:-1
其实就是动作序列开始的条件


406
00:21:01,028 --> 00:21:03,797 line:-2
假如我们有一个场景是
一台电唱机的模型


407
00:21:04,431 --> 00:21:05,566 line:-1
当用户轻触它时


408
00:21:05,632 --> 00:21:08,402 line:-1
我们想播放一些音乐同时进行旋转


409
00:21:09,536 --> 00:21:12,339 line:-2
嗯 为了实现这个功能
我们只需要创建新行为即可


410
00:21:13,307 --> 00:21:14,575 line:-1
使用轻触触发器


411
00:21:14,641 --> 00:21:17,711 line:-1
然后创建一个动作序列


412
00:21:17,778 --> 00:21:18,846 line:-1
由音乐动作和旋转动作组成


413
00:21:20,814 --> 00:21:23,083 line:-1
当创建新行为时 第一件事是


414
00:21:23,150 --> 00:21:26,820 line:-1
选择要开始动作序列的触发器


415
00:21:28,021 --> 00:21:30,591 line:-2
Reality Composer
有五个不同的触发器可以使用


416
00:21:33,193 --> 00:21:34,261 line:-1
使用开始触发器


417
00:21:34,328 --> 00:21:37,231 line:-2
将在场景加载完成后尽快开始
动作序列


418
00:21:39,366 --> 00:21:42,202 line:-1
使用轻触触发器


419
00:21:42,269 --> 00:21:44,972 line:-2
将在用户轻触你所定义的对象时
开始动作序列


420
00:21:46,807 --> 00:21:48,041 line:-1
使用接近触发器


421
00:21:48,108 --> 00:21:50,844 line:-1
你要定义对象到摄像头的临界距离


422
00:21:51,778 --> 00:21:53,981 line:-1
一旦摄像头距离对象足够近


423
00:21:54,047 --> 00:21:55,382 line:-1
就开始动作序列


424
00:21:57,684 --> 00:21:59,953 line:-1
使用碰撞触发器 你要定义两个对象


425
00:22:00,287 --> 00:22:01,989 line:-1
一旦这两个对象发生碰撞


426
00:22:02,823 --> 00:22:04,258 line:-1
就开始动作序列


427
00:22:05,192 --> 00:22:07,127 line:-1
最后一个触发器是通知触发器


428
00:22:07,761 --> 00:22:10,864 line:-1
这个触发器可以让你


429
00:22:10,931 --> 00:22:12,232 line:-1
以编程方式从app中开始动作序列


430
00:22:12,499 --> 00:22:15,636 line:-2
我们将在本场演讲的最后一部分
了解一下这个触发器


431
00:22:17,704 --> 00:22:19,907 line:-1
现在让我们谈一下动作序列


432
00:22:21,742 --> 00:22:22,910 line:-1
你有三种主要方式


433
00:22:22,976 --> 00:22:25,579 line:-1
修改动作序列的执行


434
00:22:25,646 --> 00:22:26,480 line:-1
（动作序列）


435
00:22:26,547 --> 00:22:29,816 line:-1
分别是群组、循环和独有动作序列


436
00:22:31,218 --> 00:22:32,085 line:-1
让我们从群组开始讲


437
00:22:33,754 --> 00:22:36,723 line:-2
默认情况下在Reality Composer中
群组是按顺序起作用的


438
00:22:36,790 --> 00:22:38,559 line:-1
因此动作一个接一个地播放


439
00:22:39,159 --> 00:22:41,295 line:-1
但你可以合并多个动作


440
00:22:41,361 --> 00:22:42,696 line:-1
如果你想让动作并行播放的话


441
00:22:43,163 --> 00:22:45,933 line:-1
在这个例子中 在动作一完成之后


442
00:22:46,266 --> 00:22:47,901 line:-1
动作二和动作三可以立即同时播放


443
00:22:48,402 --> 00:22:52,806 line:-2
动作四只能在群组中所有动作
都完成后才能开始


444
00:22:52,873 --> 00:22:54,107 line:-1
（群组）


445
00:22:55,742 --> 00:22:57,211 line:-1
动作序列还可以进行循环


446
00:22:58,078 --> 00:23:00,647 line:-1
假如你想在场景中播放一些音乐


447
00:23:00,914 --> 00:23:02,583 line:-1
并且你想永久循环那首音乐


448
00:23:03,083 --> 00:23:06,453 line:-1
嗯 你只需要创建一个行为


449
00:23:06,520 --> 00:23:07,588 line:-1
把音乐动作放在动作序列中


450
00:23:07,654 --> 00:23:09,623 line:-1
并把动作序列标记为循环即可


451
00:23:12,226 --> 00:23:14,695 line:-1
最后一部分是独有动作序列


452
00:23:15,462 --> 00:23:18,732 line:-2
在Reality Composer中
你可以把动作序列标记为独有


453
00:23:20,300 --> 00:23:23,504 line:-1
每次只能播放一个独有动作序列


454
00:23:24,204 --> 00:23:27,541 line:-1
那意味着一旦开始独有动作序列


455
00:23:28,175 --> 00:23:30,777 line:-2
或将会停止其它正在运行的
独有动作序列


456
00:23:31,712 --> 00:23:35,048 line:-1
非独有的动作序列也会播放


457
00:23:35,516 --> 00:23:38,585 line:-2
比如与其它独有
和非独有动作序列一起


458
00:23:40,220 --> 00:23:43,457 line:-1
关于动作序列 你了解这么多就够了


459
00:23:43,757 --> 00:23:46,260 line:-1
现在让我们看一下


460
00:23:46,727 --> 00:23:47,828 line:-2
在Reality Composer
中的一些可用动作


461
00:23:50,631 --> 00:23:51,932 line:-1
使用可见度动作


462
00:23:52,199 --> 00:23:55,903 line:-2
你可以使用动作在场景中
把对象移入和移出


463
00:23:56,837 --> 00:23:59,773 line:-1
我们支持多种类型的动画


464
00:23:59,840 --> 00:24:02,643 line:-2
并且你可以使用一些基础功能
比如淡入淡出


465
00:24:03,610 --> 00:24:06,280 line:-1
但你还可以使用更好玩的动画比如


466
00:24:06,613 --> 00:24:09,850 line:-1
放大然后缩小


467
00:24:13,187 --> 00:24:16,823 line:-2
Reality Composer
还支持对把对象放到固定位置时设置动画


468
00:24:18,091 --> 00:24:20,160 line:-1
重点是与所显示的高度相似


469
00:24:20,227 --> 00:24:24,198 line:-2
你可以给对象施加不同的动作类型
和动画样式


470
00:24:25,132 --> 00:24:27,067 line:-1
你可以使用BasicPop


471
00:24:27,801 --> 00:24:31,305 line:-1
但你还可以使用更好玩的弹出动画


472
00:24:33,106 --> 00:24:35,475 line:-1
你还可以旋转对象或


473
00:24:36,610 --> 00:24:37,911 line:-1
让对象围绕其它对象环绕运动


474
00:24:37,978 --> 00:24:40,380 line:-1
如果你在文件中使用了USD资产


475
00:24:40,747 --> 00:24:42,983 line:-1
你可以使用它们的转换和骨骼动画


476
00:24:46,320 --> 00:24:48,021 line:-1
对于移动动作


477
00:24:48,088 --> 00:24:51,525 line:-1
你可以同时平移、缩放和旋转对象


478
00:24:52,626 --> 00:24:53,627 line:-1
使用移动由


479
00:24:53,694 --> 00:24:56,363 line:-1
将相对于对象目前所在位置移动


480
00:24:57,030 --> 00:24:58,031 line:-1
比如在这个例子中


481
00:24:58,098 --> 00:25:01,935 line:-2
对象总是会向前移动两格
并向左移动一格


482
00:25:03,303 --> 00:25:06,073 line:-1
使用移动到 你总是可以把对象


483
00:25:06,139 --> 00:25:07,875 line:-1
移动到场景中的指定位置


484
00:25:08,609 --> 00:25:11,945 line:-2
就像这里 对象将返回场景中的
原始位置


485
00:25:15,749 --> 00:25:18,719 line:-2
使用Look At
你可以让对象总是面向摄像头


486
00:25:19,953 --> 00:25:23,423 line:-2
就像在这个例子中
马脸总是朝着用户的设备


487
00:25:23,490 --> 00:25:24,791 line:-1
（看动作）


488
00:25:25,759 --> 00:25:26,960 line:-1
（音频动作）


489
00:25:27,861 --> 00:25:30,197 line:-1
现在我们已经有了所有的动画动作


490
00:25:30,864 --> 00:25:33,500 line:-1
是时候给你的体验添加一些声音了


491
00:25:34,101 --> 00:25:36,537 line:-2
在Reality Composer中
有三个动作


492
00:25:36,603 --> 00:25:38,172 line:-1
可以给你的场景中添加音频


493
00:25:39,573 --> 00:25:42,409 line:-1
使用播放声音将从对象自身播放音频


494
00:25:42,976 --> 00:25:46,046 line:-1
就像这里 马正在发出嘶鸣声


495
00:25:47,047 --> 00:25:49,750 line:-1
使用环绕播放将面向场景发出声音


496
00:25:50,551 --> 00:25:51,952 line:-1
使用播放音乐


497
00:25:52,452 --> 00:25:55,422 line:-1
不需要任何转换即可播放音频


498
00:25:57,291 --> 00:25:59,126 line:-1
现在让我们做一个快速演示


499
00:25:59,193 --> 00:26:02,396 line:-1
让我们迅速看一下如何把一些行为


500
00:26:02,663 --> 00:26:04,498 line:-2
引入到Michelle
之前创建的场景中去


501
00:26:05,199 --> 00:26:07,835 line:-1
在这里我们有一个


502
00:26:08,635 --> 00:26:10,504 line:-2
比Michelle所创建的场景
更完整的场景


503
00:26:10,571 --> 00:26:13,407 line:-1
这里我们有月球、地球和太阳


504
00:26:13,473 --> 00:26:17,277 line:-2
我们有一些文本和太阳光线
显示不同的季节


505
00:26:18,745 --> 00:26:20,647 line:-1
让我们打开行为面板


506
00:26:20,714 --> 00:26:23,483 line:-1
点击右上角的行为按钮即可打开它


507
00:26:26,019 --> 00:26:28,288 line:0
你可以在这里看到已经有一些行为了


508
00:26:28,789 --> 00:26:32,926 line:0
让我们点击播放
并查看场景中会发生什么


509
00:26:34,995 --> 00:26:38,265 line:-2
在这里你可以看到月球、地球
或太阳没有移动


510
00:26:38,999 --> 00:26:43,170 line:-2
但以相继次序出现不同的光线、
季节和文本


511
00:26:44,404 --> 00:26:47,808 line:0
让我们继续并创建一个新行为


512
00:26:47,875 --> 00:26:50,310 line:0
以制作不同的动态月球、
地球和太阳对象


513
00:26:51,111 --> 00:26:53,814 line:0
为此 让我们从引入新行为开始


514
00:26:55,249 --> 00:26:58,852 line:0
我们点击加 然后在这里
我们可以看到所有可用的预设


515
00:26:59,286 --> 00:27:01,021 line:0
我们可以从中选择


516
00:27:01,088 --> 00:27:03,457 line:0
但对这个演示来说
我们要从自定义触发器开始


517
00:27:06,059 --> 00:27:09,997 line:0
第一件事就是选择我们想要用于


518
00:27:10,063 --> 00:27:11,298 line:-1
开始动作序列的触发器


519
00:27:11,665 --> 00:27:15,135 line:-2
因为我们想当场景加载完成后
就开始让这些对象动起来


520
00:27:15,469 --> 00:27:19,506 line:0
我们可以打开库并选择场景开始


521
00:27:21,208 --> 00:27:23,510 line:0
太棒了 现在是时候开始动作序列了


522
00:27:24,811 --> 00:27:26,180 line:0
对于这个动作序列


523
00:27:26,246 --> 00:27:28,849 line:0
我们希望地球围绕太阳转


524
00:27:29,249 --> 00:27:30,884 line:0
然后月球围绕地球转


525
00:27:31,251 --> 00:27:33,987 line:0
同时我们想让地球和太阳旋转


526
00:27:34,655 --> 00:27:35,956 line:0
让我们从环绕开始做


527
00:27:37,958 --> 00:27:40,394 line:0
我们可以打开动作库 然后…


528
00:27:40,961 --> 00:27:42,529 line:0
选择环绕作为第一个动作


529
00:27:43,463 --> 00:27:45,699 line:0
当创建一个新动作时
第一件事就是要定义


530
00:27:45,766 --> 00:27:48,869 line:0
动作的目标是谁


531
00:27:49,469 --> 00:27:52,339 line:0
在这个例子中
动作所影响的对象是地球


532
00:27:53,106 --> 00:27:55,609 line:0
并且中心是太阳


533
00:27:57,211 --> 00:28:00,747 line:0
太棒了 我们有了所有的属性
比如持续时间、转速、


534
00:28:01,048 --> 00:28:03,150 line:0
对齐到路径和环绕方向


535
00:28:03,684 --> 00:28:06,220 line:0
对于方向 我们希望使用逆时针方向


536
00:28:08,155 --> 00:28:11,091 line:0
现在我们可以轻松地预览动作了


537
00:28:11,558 --> 00:28:13,794 line:0
只需要点击动作卡片中的播放按钮
即可开始播放


538
00:28:15,762 --> 00:28:16,697 line:0
速度有点快


539
00:28:16,997 --> 00:28:21,702 line:0
让我们把持续时间修改为一个
更适合这个场景的持续时间


540
00:28:22,169 --> 00:28:23,537 line:0
让我们把它设为20秒


541
00:28:25,305 --> 00:28:27,174 line:0
你可以修改持续时间并再次播放


542
00:28:27,808 --> 00:28:30,177 line:0
耶 我认为持续时间看起来正合适


543
00:28:30,777 --> 00:28:32,980 line:0
现在让我们引入第二个环绕


544
00:28:33,914 --> 00:28:38,352 line:0
我们要再次打开库并选择环绕


545
00:28:39,520 --> 00:28:44,825 line:0
现在所影响的对象是月球
而中心是地球


546
00:28:46,460 --> 00:28:48,662 line:0
持续时间 我们希望跟以前一样


547
00:28:49,463 --> 00:28:51,064 line:0
对于转速


548
00:28:51,131 --> 00:28:53,000 line:-1
因为我们不是在尝试做到实际准确度


549
00:28:53,066 --> 00:28:55,969 line:0
我们只想让它在这个场景中看起来
相适宜


550
00:28:56,236 --> 00:28:58,305 line:0
我们把它设为四


551
00:28:58,372 --> 00:28:59,339 line:0
我认为设为四挺好的


552
00:29:00,107 --> 00:29:02,476 line:0
现在因为月球被地球潮汐锁定了


553
00:29:03,377 --> 00:29:05,312 line:0
我们希望月球能与轨道对齐


554
00:29:05,712 --> 00:29:07,948 line:0
因此我们选择对齐到路径


555
00:29:08,882 --> 00:29:11,418 line:0
现在方向仍然是逆时针方向


556
00:29:12,419 --> 00:29:15,189 line:0
让我们试一下 耶


557
00:29:15,656 --> 00:29:16,823 line:0
动画看起来不错


558
00:29:18,525 --> 00:29:20,627 line:0
现在环绕已经按我们的要求实现了


559
00:29:21,028 --> 00:29:22,796 line:0
让我们开始旋转动作


560
00:29:23,797 --> 00:29:26,233 line:0
为此我们要打开另一个旋转动作


561
00:29:26,800 --> 00:29:28,902 line:0
让我们从太阳开始


562
00:29:30,337 --> 00:29:32,573 line:0
方向跟以前一样 那么20秒


563
00:29:33,140 --> 00:29:36,076 line:0
对于迭代次数 我觉得四次不错


564
00:29:38,212 --> 00:29:40,347 line:0
方向相同 因此是逆时针方向


565
00:29:41,782 --> 00:29:45,319 line:0
如果我们点击播放
我们可以看到旋转的速度不错


566
00:29:46,420 --> 00:29:51,091 line:0
好的 现在让我们引入序列中的
最后一个动作


567
00:29:51,158 --> 00:29:52,559 line:0
即地球的旋转


568
00:29:54,061 --> 00:29:55,395 line:0
我们要创建另一个旋转


569
00:29:55,729 --> 00:29:58,298 line:0
我们选择地球 相同的持续时间


570
00:29:59,700 --> 00:30:02,536 line:0
因为我们想让地球比太阳的
迭代次数多


571
00:30:02,603 --> 00:30:07,274 line:0
在这个例子中让我们把它设为十


572
00:30:08,008 --> 00:30:09,877 line:0
对于方向 再一次 逆时针方向


573
00:30:10,878 --> 00:30:13,447 line:0
让我们试一下 耶 看起来很好


574
00:30:14,248 --> 00:30:17,251 line:0
现在我们的动作序列完全展示出来了


575
00:30:17,784 --> 00:30:20,554 line:0
让我们尝试播放整个动作序列


576
00:30:20,621 --> 00:30:23,757 line:0
我们可以按动作序列页眉中的


577
00:30:23,824 --> 00:30:25,158 line:0
播放按钮上的播放


578
00:30:27,194 --> 00:30:29,696 line:-1
我们可以在这里看到只有地球在移动


579
00:30:30,230 --> 00:30:32,399 line:0
那是因为动作序列的播放是


580
00:30:32,466 --> 00:30:34,535 line:0
按次序播放所有动作 一个接一个


581
00:30:35,369 --> 00:30:39,039 line:0
然而我们想在这里


582
00:30:39,106 --> 00:30:40,073 line:0
并行运行所有这些动作


583
00:30:40,140 --> 00:30:41,975 line:0
为此我们可以使用拖放


584
00:30:42,376 --> 00:30:44,311 line:0
拖动不同的卡把它们叠起来


585
00:30:46,079 --> 00:30:47,281 line:0
这样做


586
00:30:47,347 --> 00:30:49,416 line:0
我们就能创建有四个动作的一个群组


587
00:30:50,417 --> 00:30:52,586 line:0
现在让我们继续并尝试…


588
00:30:53,353 --> 00:30:54,421 line:0
谢谢


589
00:30:57,524 --> 00:30:59,092 line:0
现在让我们继续并点击播放


590
00:30:59,159 --> 00:31:02,296 line:0
看看所有行为同时播放时怎么样


591
00:31:03,463 --> 00:31:06,466 line:-2
我们可以看到
现在所有环绕和旋转动作


592
00:31:06,533 --> 00:31:09,570 line:-2
正在同时播放
并且地球环绕太阳移动时


593
00:31:09,636 --> 00:31:12,406 line:-1
场景中还出现文本和光线


594
00:31:20,214 --> 00:31:22,182 line:0
好的 让我们返回到演讲中


595
00:31:23,483 --> 00:31:26,386 line:-2
在Reality Composer中
把一些交互和行为


596
00:31:26,453 --> 00:31:28,822 line:-1
引入到你的场景中就是如此简单


597
00:31:29,690 --> 00:31:31,491 line:-1
现在让我们讲物理


598
00:31:33,093 --> 00:31:36,697 line:-1
为了创建优秀的沉浸式AR体验


599
00:31:37,364 --> 00:31:40,367 line:-2
你需要让你的对象
跟在现实世界中一样


600
00:31:40,968 --> 00:31:43,003 line:-2
你需要让你的对象跟实际的对象
一样移动


601
00:31:43,704 --> 00:31:47,474 line:-2
为此我们需要利用
Reality Composer中


602
00:31:47,541 --> 00:31:49,109 line:-1
这个强大的物理引擎


603
00:31:50,477 --> 00:31:51,545 line:-1
让我们看一下


604
00:31:52,946 --> 00:31:55,816 line:-2
这是一个你可以
在Reality Composer中


605
00:31:55,883 --> 00:31:56,917 line:-1
使用物理引擎创建的一个场景的示例


606
00:31:57,384 --> 00:31:58,318 line:-1
我在这里使用了物理引擎


607
00:31:58,385 --> 00:32:01,688 line:-2
球体因为重力作用正在下落
然后它碰撞拦截棒


608
00:32:02,155 --> 00:32:05,792 line:-1
最后一旦它弹到绿色方框


609
00:32:06,360 --> 00:32:08,795 line:-1
我们就显示这个赢家文本


610
00:32:09,863 --> 00:32:11,965 line:-1
让我们看一下该如何创建这种场景


611
00:32:13,834 --> 00:32:15,969 line:-1
有三种方式可以影响


612
00:32:16,036 --> 00:32:17,838 line:-1
你场景中的物理模拟


613
00:32:19,206 --> 00:32:22,242 line:-1
各种不同的材料将定义


614
00:32:22,309 --> 00:32:23,944 line:-1
对象与场景及其它对象之间的交互


615
00:32:25,345 --> 00:32:26,880 line:-1
通过力量动作和重力


616
00:32:27,314 --> 00:32:30,384 line:-2
我们可以定义如何在你的世界中
播放力


617
00:32:31,685 --> 00:32:34,488 line:-1
通过碰撞触发器和碰撞形状


618
00:32:34,788 --> 00:32:36,790 line:-1
你可以定义碰撞力学


619
00:32:37,090 --> 00:32:38,959 line:-1
如何在物理模拟中发生


620
00:32:40,460 --> 00:32:41,562 line:-1
让我们从材料开始看


621
00:32:42,663 --> 00:32:43,564 line:-1
在Reality Composer中


622
00:32:43,630 --> 00:32:45,432 line:-1
你可以使用六种不同的材料


623
00:32:46,667 --> 00:32:49,970 line:-1
你需要定义场景材料和对象材料


624
00:32:51,205 --> 00:32:53,574 line:-1
假如你使用了对象材料


625
00:32:53,640 --> 00:32:55,475 line:-1
使用冰作为对象材料


626
00:32:55,976 --> 00:32:58,045 line:-1
这将使你的对象滑过场景


627
00:32:58,879 --> 00:33:00,747 line:-1
如果你使用橡胶


628
00:33:00,814 --> 00:33:03,350 line:-1
对象将变得更有弹性


629
00:33:07,321 --> 00:33:08,755 line:0
现在让我们讲一下力


630
00:33:08,822 --> 00:33:10,157 line:0
（力）


631
00:33:10,224 --> 00:33:12,593 line:0
默认情况下你所有的场景
都启用了重力


632
00:33:13,760 --> 00:33:15,729 line:0
并且重力值将为设为地球的重力值


633
00:33:15,996 --> 00:33:17,931 line:0
但你可以把那个值修改为
任何你想要的值


634
00:33:20,734 --> 00:33:21,668 line:0
使用力动作


635
00:33:21,735 --> 00:33:23,637 line:0
你可以赋予你的对象一个初始刺激


636
00:33:24,271 --> 00:33:25,706 line:0
你要定义一个方向


637
00:33:25,772 --> 00:33:27,908 line:0
要给对象施加多少速度


638
00:33:28,509 --> 00:33:30,143 line:0
你可以创建这种行为


639
00:33:30,210 --> 00:33:33,146 line:0
你可以在用户轻触对象时
给对象添加力


640
00:33:34,248 --> 00:33:35,582 line:0
（碰撞）


641
00:33:35,983 --> 00:33:40,053 line:0
现在你的对象有了材料 可以受力了


642
00:33:40,687 --> 00:33:42,789 line:0
是时候让它们相互碰撞了


643
00:33:44,057 --> 00:33:46,226 line:0
默认情况下
在Reality Composer中


644
00:33:46,293 --> 00:33:49,496 line:0
所有对象都不参与物理模拟


645
00:33:50,464 --> 00:33:52,633 line:0
如果你想让对象与其它对象发生碰撞


646
00:33:52,933 --> 00:33:55,202 line:0
你需要设置碰撞动作


647
00:33:56,103 --> 00:33:59,473 line:0
如果你想让对象按物理模拟进行移动


648
00:33:59,840 --> 00:34:01,942 line:0
你需要设置模拟动作


649
00:34:02,843 --> 00:34:05,412 line:0
在这里你可以看到在默认情况下


650
00:34:05,679 --> 00:34:08,248 line:0
碰撞和模拟选项是如何影响
场景中的对象的


651
00:34:15,856 --> 00:34:18,559 line:-1
碰撞力由场景中的


652
00:34:18,625 --> 00:34:19,726 line:-1
对象的形状决定


653
00:34:20,393 --> 00:34:23,530 line:-2
在Reality Composer中
你可以使用三种不同的形状


654
00:34:24,231 --> 00:34:26,333 line:-1
分别是方框、球体和胶囊


655
00:34:27,534 --> 00:34:30,737 line:-2
这些形状将决定你的对象
如何在场景中移动


656
00:34:30,804 --> 00:34:34,341 line:-1
以及如何与其它对象及锚点相碰撞


657
00:34:37,643 --> 00:34:40,781 line:-2
使用碰撞触发器
你可以创建这些行为


658
00:34:41,380 --> 00:34:43,516 line:-1
在这里我们有一个


659
00:34:43,784 --> 00:34:45,284 line:-1
球体和方框的碰撞触发器


660
00:34:45,953 --> 00:34:49,255 line:-2
那样我们可以检测到用户
是否赢了游戏


661
00:34:49,322 --> 00:34:50,524 line:-1
并显示赢家文本


662
00:34:55,062 --> 00:34:57,531 line:-1
关于Reality Composer中的物理


663
00:34:57,598 --> 00:34:58,732 line:-1
我们就讲这么多了


664
00:34:59,433 --> 00:35:01,869 line:-2
现在我想把舞台交给
我的同事Abhi


665
00:35:02,269 --> 00:35:05,072 line:-2
他会讲如何使用
Reality Composer创建app


666
00:35:06,173 --> 00:35:07,307 line:-1
Abhi？


667
00:35:08,342 --> 00:35:09,810 line:-1
（创建app）


668
00:35:11,411 --> 00:35:12,513 line:-1
大家好 我是Abhi


669
00:35:12,579 --> 00:35:14,081 line:-1
今天来到这里我感到非常激动


670
00:35:14,348 --> 00:35:16,884 line:-2
在演讲的上半场我们了解了如何用
Reality Composer


671
00:35:17,317 --> 00:35:19,486 line:-1
创建优秀的3D体验


672
00:35:19,920 --> 00:35:21,555 line:-1
然后通过行为让体验鲜活起来


673
00:35:22,089 --> 00:35:24,358 line:-2
现在让我们了解一下如何
把那些AR体验


674
00:35:24,625 --> 00:35:26,326 line:-1
集成到我们的app中


675
00:35:27,761 --> 00:35:29,630 line:-1
我们提供三种不同的方式


676
00:35:30,430 --> 00:35:33,433 line:-2
第一种是直接在Xcode中创建
一个新RealityKit AR


677
00:35:33,500 --> 00:35:35,035 line:-1
或游戏模板


678
00:35:36,069 --> 00:35:39,173 line:-2
第二种是从Reality Composer中
创建一个新项目


679
00:35:39,806 --> 00:35:41,875 line:-2
第三种是从Reality Composer中
导出一个Reality文件


680
00:35:42,342 --> 00:35:45,012 line:-1
然后把它包含到你的app内


681
00:35:46,980 --> 00:35:49,483 line:0
让我们先讲一下两个必需文件


682
00:35:49,550 --> 00:35:52,019 line:0
Reality Composer
项目和Reality文件


683
00:35:52,719 --> 00:35:55,022 line:0
我们要从Reality Composer项目
开始讲


684
00:35:55,756 --> 00:35:59,059 line:-1
这是Reality Composer的项目文件


685
00:35:59,726 --> 00:36:04,097 line:-2
它自动包含RealityKit AR
和游戏模板


686
00:36:04,765 --> 00:36:08,168 line:-2
你可以直接在Xcode内预览它
我们集成了Xcode


687
00:36:08,902 --> 00:36:11,972 line:-1
并且在Xcode的创建过程中


688
00:36:12,306 --> 00:36:15,008 line:-2
Xcode自动把你的Reality Composer
项目导出为Reality文件


689
00:36:16,643 --> 00:36:18,812 line:-2
在这里我们可以看到我们的
Reality Composer项目


690
00:36:19,179 --> 00:36:21,348 line:-2
在Xcode 11中
我们可以预览它


691
00:36:21,415 --> 00:36:23,483 line:-1
我们还可以预览每一个场景


692
00:36:24,418 --> 00:36:25,619 line:-1
在右上角


693
00:36:25,686 --> 00:36:27,654 line:-2
我们可以看到一个
“在Reality Composer中打开”按钮


694
00:36:27,721 --> 00:36:30,123 line:-2
这将直接从Xcode中启动
Reality Composer


695
00:36:32,125 --> 00:36:33,427 line:-1
正如我刚才提到过的


696
00:36:33,493 --> 00:36:36,630 line:-2
如果你在创建
Xcode app的过程中


697
00:36:37,064 --> 00:36:38,232 line:-1
有Reality Composer项目


698
00:36:38,298 --> 00:36:40,701 line:-2
我们将自动为你生成
Reality文件


699
00:36:41,301 --> 00:36:43,103 line:-1
它包含在你的app中


700
00:36:43,437 --> 00:36:44,471 line:-1
跟其它资源一样


701
00:36:44,538 --> 00:36:46,507 line:-1
你可以用同样的方式访问它


702
00:36:47,441 --> 00:36:48,542 line:-1
那么什么是Reality文件？


703
00:36:49,009 --> 00:36:52,679 line:-2
这是一个中心对象
关于你将如何使用你的app


704
00:36:52,746 --> 00:36:53,981 line:-1
以及你将如何运用你的AR体验


705
00:36:54,648 --> 00:36:56,283 line:-1
它包含渲染和模拟所需要的全部数据


706
00:36:56,817 --> 00:37:00,287 line:-2
并且它对
RealityKit进行了优化


707
00:37:01,221 --> 00:37:03,590 line:-2
正如我刚才所说过的那样它是
从Reality Composer中导出的文件


708
00:37:04,124 --> 00:37:06,560 line:-1
并且在项目创建过程中


709
00:37:06,627 --> 00:37:08,028 line:-1
Xcode会自动导出它


710
00:37:09,796 --> 00:37:11,064 line:-1
你使用Reality文件的方式是


711
00:37:11,365 --> 00:37:13,367 line:-1
要么直接在app中引用


712
00:37:13,934 --> 00:37:15,702 line:-2
要么在AR
Quick Look中预览它


713
00:37:16,403 --> 00:37:17,771 line:-1
我们推荐你们参加


714
00:37:17,838 --> 00:37:19,740 line:-2
明天举办的AR
Quick Look改进演讲


715
00:37:20,240 --> 00:37:21,575 line:-1
以了解更多信息


716
00:37:23,377 --> 00:37:25,779 line:-2
让我们再深入一些
什么是Reality文件？


717
00:37:26,446 --> 00:37:29,016 line:-2
因为这是由Reality Composer
导出的文件


718
00:37:29,616 --> 00:37:31,652 line:-2
它将包含你在
Reality Composer中


719
00:37:32,052 --> 00:37:33,153 line:-1
所创建的每一个场景


720
00:37:33,220 --> 00:37:34,521 line:-1
比如这里有两个场景


721
00:37:35,055 --> 00:37:38,959 line:0
它还包含你在app中所创建的
每个对象


722
00:37:39,960 --> 00:37:42,429 line:0
当我们在Reality文件中
思考场景时


723
00:37:42,763 --> 00:37:44,531 line:0
我们把场景看作一个锚点


724
00:37:44,598 --> 00:37:46,033 line:0
具体的说是一个锚点实体


725
00:37:46,533 --> 00:37:49,336 line:0
因此这包含比如


726
00:37:49,636 --> 00:37:51,104 line:0
你在Reality Composer中
设置的水平锚点信息


727
00:37:56,343 --> 00:37:58,946 line:-2
因此我们认为使用
Reality文件的


728
00:37:59,446 --> 00:38:00,514 line:-1
一个最大的困难是


729
00:38:01,148 --> 00:38:03,483 line:-1
能用字符串进行访问


730
00:38:03,550 --> 00:38:07,287 line:-2
我们既有Reality Composer项目
又有Xcode项目


731
00:38:07,821 --> 00:38:11,325 line:-2
我们想引入一种方式
可以轻松地处理它们


732
00:38:11,391 --> 00:38:12,726 line:-1
几乎就像是一个对象一样


733
00:38:13,126 --> 00:38:15,729 line:-2
因此我们决定通过Xcode中的
代码生成实现


734
00:38:16,763 --> 00:38:17,965 line:-1
代码生成将


735
00:38:18,232 --> 00:38:20,734 line:-2
分析Reality Composer
项目的结构


736
00:38:21,335 --> 00:38:22,669 line:-1
并生成一个对象


737
00:38:22,736 --> 00:38:24,972 line:-2
一个实际对象
你可以在你的app中使用


738
00:38:25,339 --> 00:38:26,540 line:-1
比如说


739
00:38:26,607 --> 00:38:29,309 line:-2
这里是我们的太阳系
Reality Composer项目


740
00:38:29,843 --> 00:38:32,279 line:-1
我们自动生成了一个太阳系对象


741
00:38:32,646 --> 00:38:34,014 line:-1
你可以在你的app中使用


742
00:38:40,354 --> 00:38:43,690 line:-2
为你生成的代码是一个
app API


743
00:38:44,525 --> 00:38:45,626 line:-1
用于你的场景


744
00:38:45,692 --> 00:38:48,028 line:-2
用于Michelle
刚提到过的命名实体


745
00:38:49,096 --> 00:38:51,832 line:-1
用于通知动作和通知触发器


746
00:38:52,099 --> 00:38:55,269 line:-1
稍后我们再讲最后两个用法


747
00:38:57,237 --> 00:38:59,373 line:-1
代码生成


748
00:38:59,439 --> 00:39:00,774 line:-1
和使用AR体验的第一步是


749
00:39:01,074 --> 00:39:04,211 line:-1
为你所关心的一切命名


750
00:39:04,645 --> 00:39:05,746 line:-2
重点是直接在Reality Composer中
进行命名


751
00:39:06,079 --> 00:39:08,882 line:-1
你可以在配置下的设置面板中实现


752
00:39:08,949 --> 00:39:12,085 line:-1
比如我们给太阳


753
00:39:12,152 --> 00:39:14,755 line:-2
我们所导入的太阳
USDZ命名为太阳


754
00:39:14,821 --> 00:39:17,024 line:-1
我们将使用这个名称在代码中访问它


755
00:39:19,359 --> 00:39:21,528 line:-2
如何把我们的Reality Composer
项目转换为


756
00:39:21,962 --> 00:39:23,997 line:-1
我们可以使用的一个对象呢？


757
00:39:24,798 --> 00:39:25,899 line:-1
在顶层


758
00:39:25,966 --> 00:39:30,037 line:-2
我们的Reality Composer项目成为
比如说solarsystem.swift


759
00:39:30,971 --> 00:39:33,674 line:-1
我们的场景成为有锚点的一个实体


760
00:39:34,107 --> 00:39:36,243 line:-2
这非常重要
因为这意味着当你加载它时


761
00:39:36,310 --> 00:39:38,312 line:-1
你可以直接把它添加到场景的锚点中


762
00:39:39,479 --> 00:39:42,850 line:-2
此外 你所设置的任何对象
都将转化为实体


763
00:39:43,116 --> 00:39:45,252 line:-2
这些是你可以使用的真正的
RealityKit实体


764
00:39:45,319 --> 00:39:46,887 line:-1
你可以用完全相同的方式使用它们


765
00:39:48,188 --> 00:39:51,592 line:-2
此外 我们还提供两种不同的
场景加载方式


766
00:39:52,025 --> 00:39:54,528 line:-1
一种是同步加载 一种是异步加载


767
00:39:57,397 --> 00:40:00,100 line:-2
让我们看一下同步加载
Reality文件


768
00:40:00,734 --> 00:40:03,504 line:-1
我们还以太阳系作为我们的例子


769
00:40:03,837 --> 00:40:05,506 line:-2
我们要加载
seasonsChapter


770
00:40:06,039 --> 00:40:08,108 line:-1
我们只需要一行代码就能实现


771
00:40:08,575 --> 00:40:11,578 line:-2
我们可以说
solarsystem.load seasonsChapter


772
00:40:11,879 --> 00:40:14,648 line:-2
这将会给我们返回一个锚点
然后我们把它添加到我们的视图中


773
00:40:14,715 --> 00:40:15,682 line:-1
超级简单


774
00:40:17,284 --> 00:40:20,654 line:-2
接下来如果我们想异步加载
seasonsChapter


775
00:40:20,721 --> 00:40:21,622 line:-1
或任意场景


776
00:40:21,889 --> 00:40:23,156 line:-1
我们可以使用比如


777
00:40:23,223 --> 00:40:26,026 line:-2
solarsystem.load
seasonsChapterAsync


778
00:40:26,560 --> 00:40:27,928 line:-1
我们将得到一个结果对象


779
00:40:27,995 --> 00:40:29,396 line:-1
我们可以处理成功的情况


780
00:40:29,963 --> 00:40:31,131 line:-1
我们得到了锚点


781
00:40:31,765 --> 00:40:34,535 line:-2
或我们可以处理失败的情况
并给用户显示错误


782
00:40:36,570 --> 00:40:39,306 line:-2
此外 如果我们想访问场景中的
命名实体


783
00:40:39,673 --> 00:40:43,443 line:-2
我们可以很简单地调用比如
seasons.sun


784
00:40:43,844 --> 00:40:45,145 line:-1
.earth和.moon


785
00:40:45,445 --> 00:40:48,582 line:-2
这将使我们可以访问我们在
Reality Composer中所命名的实体


786
00:40:48,949 --> 00:40:50,551 line:-1
这跟其它对象一样


787
00:40:51,852 --> 00:40:54,788 line:-1
把Xcode中的代码生成


788
00:40:55,155 --> 00:40:56,256 line:-2
和Reality Composer
结合在一起


789
00:40:56,857 --> 00:40:59,193 line:-2
我们可以在我们的app中
加载我们的AR体验


790
00:40:59,259 --> 00:41:00,627 line:-1
只需要两行代码就能实现


791
00:41:01,428 --> 00:41:04,131 line:-2
第一行代码是加载Chapter
或加载我们的场景


792
00:41:04,865 --> 00:41:07,534 line:-2
第二行代码是把它添加到
我们的视图中


793
00:41:07,601 --> 00:41:08,702 line:-1
超级简单


794
00:41:08,769 --> 00:41:10,037 line:-1
（Xcode中的代码生成）


795
00:41:16,310 --> 00:41:18,212 line:-1
这是Xcode中的代码生成


796
00:41:18,779 --> 00:41:20,981 line:-2
我们还提供一种
访问Reality文件的方式


797
00:41:21,415 --> 00:41:24,484 line:-1
比如如果你正在从服务器上下载内容


798
00:41:24,551 --> 00:41:26,420 line:-1
并且你想在app中显示内容


799
00:41:27,187 --> 00:41:29,256 line:-2
为此 我们有
RealityKit API


800
00:41:29,990 --> 00:41:32,059 line:-1
要同步加载Reality文件


801
00:41:32,593 --> 00:41:33,994 line:-1
你首先需要获取URL


802
00:41:34,394 --> 00:41:36,430 line:-2
就像你app捆绑包中的
其它资源一样


803
00:41:37,197 --> 00:41:38,265 line:-1
接下来


804
00:41:39,299 --> 00:41:41,535 line:-2
使用
entity.load锚点方法


805
00:41:41,835 --> 00:41:43,270 line:-1
传递资源的URL


806
00:41:43,570 --> 00:41:45,506 line:-1
以及你要加载内容的场景名称


807
00:41:46,039 --> 00:41:47,841 line:-1
这将给你返回一个你可以使用的锚点


808
00:41:48,375 --> 00:41:50,577 line:-2
或者你还可以使用
entity.load


809
00:41:50,911 --> 00:41:53,714 line:-1
加载实体树 不需要锚点信息


810
00:41:55,249 --> 00:41:57,484 line:-1
要异步加载Reality文件


811
00:41:57,551 --> 00:41:58,619 line:-1
也有一种方式可以实现


812
00:41:58,986 --> 00:42:00,287 line:-1
第一步完全相同


813
00:42:00,687 --> 00:42:03,156 line:-1
获取资源的URL资源


814
00:42:04,291 --> 00:42:06,426 line:-2
使用
entity.load锚点异步


815
00:42:06,493 --> 00:42:09,029 line:-2
传入URL
和你要加载内容的场景名称


816
00:42:09,596 --> 00:42:10,998 line:-1
这将给你提供一个加载请求


817
00:42:11,798 --> 00:42:13,400 line:-1
使用新的合并框架


818
00:42:13,901 --> 00:42:16,904 line:-1
我们可以收到一个完成 然后收到值


819
00:42:16,970 --> 00:42:19,239 line:-1
值包含我们要加载的锚点


820
00:42:19,306 --> 00:42:21,141 line:-2
从而你可以把这个
放到你的AR视图场景中


821
00:42:22,943 --> 00:42:23,977 line:-1
访问实体


822
00:42:24,044 --> 00:42:27,047 line:-2
你可以通过
anchor.find实体实现


823
00:42:27,447 --> 00:42:29,917 line:-1
然后传入你要加载的对象的名称


824
00:42:30,217 --> 00:42:32,252 line:-1
比如太阳、地球和月球


825
00:42:33,053 --> 00:42:35,689 line:-1
使用Xcode中的代码生成


826
00:42:35,756 --> 00:42:39,026 line:-2
和RealityKit把AR体验
引入到你的app中就是如此简单


827
00:42:41,495 --> 00:42:43,630 line:-1
接下来我们讲我们的app


828
00:42:43,897 --> 00:42:45,699 line:-1
如何与我们的AR内容进行交互


829
00:42:46,099 --> 00:42:47,868 line:-2
我们可以直接在
Reality Composer内


830
00:42:48,135 --> 00:42:49,670 line:-1
创建优秀的体验


831
00:42:49,736 --> 00:42:50,838 line:-1
但我们该如何使用它呢？


832
00:42:51,205 --> 00:42:52,773 line:-1
正如Pau刚才提到的那样


833
00:42:52,840 --> 00:42:55,576 line:-1
我们给你们准备了很棒的内置动作集


834
00:42:55,943 --> 00:42:58,111 line:-1
但你可能想定义自己的动作


835
00:42:58,745 --> 00:43:01,114 line:-1
为此我们创建了通知动作


836
00:43:01,748 --> 00:43:04,484 line:-2
你可以在Reality Composer中
设置这个动作


837
00:43:06,587 --> 00:43:09,423 line:-1
它与你的其它动作序列一起被调用


838
00:43:09,790 --> 00:43:10,991 line:-1
次序完全相同


839
00:43:11,058 --> 00:43:13,961 line:-2
比如如果它属于某个动作序列
那么将在那个序列中调用它


840
00:43:15,362 --> 00:43:17,564 line:-2
你的app代码中有一个
可设置的闭包


841
00:43:17,631 --> 00:43:20,334 line:-1
你可以定义这个动作的实施


842
00:43:21,602 --> 00:43:23,971 line:-1
就像通过代码生成访问一个实体一样


843
00:43:24,805 --> 00:43:28,509 line:-1
通知动作也可以通过对象进行访问


844
00:43:30,244 --> 00:43:33,080 line:-2
在Reality Composer中
我们在这里设置了一个通知动作


845
00:43:34,781 --> 00:43:35,983 line:-1
我们赋予它一个标识符


846
00:43:36,049 --> 00:43:38,185 line:-1
这是我们要在代码中使用的标识符


847
00:43:38,519 --> 00:43:41,355 line:-2
用于引用我们的通知动作
并提供一个自定义实施


848
00:43:43,690 --> 00:43:46,927 line:0
在我们所生成的对象的结构中


849
00:43:47,661 --> 00:43:50,931 line:0
动作位于场景对象内的能源旁边


850
00:43:51,798 --> 00:43:54,234 line:0
在这里我们有动作和属性动作


851
00:43:55,402 --> 00:43:56,803 line:0
在动作类内


852
00:43:57,137 --> 00:43:58,739 line:0
你可以看到多个通知动作


853
00:43:59,139 --> 00:44:01,642 line:0
动作名称是你赋予通知动作的标识符


854
00:44:02,176 --> 00:44:06,246 line:0
你可对这些进行访问就像访问所加载
的anchor.actions


855
00:44:06,680 --> 00:44:08,115 line:0
和你所关心的动作名称那样简单


856
00:44:08,582 --> 00:44:10,951 line:0
此外 我们还生成一个全部动作数组


857
00:44:11,318 --> 00:44:13,787 line:0
你可以实现很棒的功能
就像Swift中的其它集合一样


858
00:44:14,188 --> 00:44:15,789 line:0
你可以对它进行筛选、迭代


859
00:44:16,056 --> 00:44:17,991 line:0
只要你能对Swift中的
数组做的操作


860
00:44:18,058 --> 00:44:19,626 line:0
都可以在这个全部动作属性上实施


861
00:44:21,628 --> 00:44:24,064 line:-1
要设置通知动作的实施


862
00:44:24,665 --> 00:44:26,967 line:-1
你首先需要通过警告锚点获取它


863
00:44:27,434 --> 00:44:28,302 line:-1
比如


864
00:44:28,702 --> 00:44:32,472 line:-2
seasonschapter.actions.display
地球详情


865
00:44:32,940 --> 00:44:34,808 line:-1
然后提供自定义闭包


866
00:44:34,875 --> 00:44:35,876 line:-1
因此.onaction


867
00:44:36,510 --> 00:44:38,879 line:-1
你将在这个闭包内得到的返回是


868
00:44:39,279 --> 00:44:41,481 line:-2
你在Reality Composer中
所设置的目标实体


869
00:44:44,618 --> 00:44:47,354 line:-1
另一方面 要启动动作序列


870
00:44:47,721 --> 00:44:49,089 line:-1
并提供一种实现方式


871
00:44:49,489 --> 00:44:51,592 line:-1
我们有一些很棒的内置触发器


872
00:44:51,658 --> 00:44:53,293 line:-1
比如场景开始和接近


873
00:44:53,694 --> 00:44:56,630 line:-1
但有时候你可能想提供自定义触发器


874
00:44:56,697 --> 00:44:59,700 line:-1
比如选择一个控制片段或轻触按钮


875
00:45:00,133 --> 00:45:02,870 line:-1
为此 我们提供通知触发器


876
00:45:03,904 --> 00:45:06,440 line:-2
你可以在Reality Composer中
设置通知触发器


877
00:45:07,374 --> 00:45:10,043 line:-1
它会开始一个动作序列


878
00:45:10,110 --> 00:45:11,211 line:-1
或拥有同一个标识符的多个动作序列


879
00:45:12,679 --> 00:45:14,515 line:-1
它要在app运行时发布


880
00:45:15,282 --> 00:45:17,384 line:-1
与通知动作一样 它是可访问的


881
00:45:17,718 --> 00:45:20,654 line:-1
在代码中按名称充当你的实体


882
00:45:22,222 --> 00:45:25,325 line:0
你可以直接在你的行为内
设置一个通知触发器


883
00:45:26,226 --> 00:45:28,795 line:0
在这里我们赋予它一个
标识符“显示金星”


884
00:45:29,329 --> 00:45:30,697 line:0
我们将在代码中使用这个名称


885
00:45:32,432 --> 00:45:35,402 line:0
跟动作一样 在所生成的代码中


886
00:45:35,469 --> 00:45:36,770 line:0
通知触发器位于实体旁边


887
00:45:38,572 --> 00:45:41,542 line:0
在一个新的通知对象类内


888
00:45:43,043 --> 00:45:45,379 line:-1
在通知内 跟通知动作一样


889
00:45:45,445 --> 00:45:46,880 line:-1
你将有与名称对应的


890
00:45:47,281 --> 00:45:48,549 line:-1
通知触发器


891
00:45:48,615 --> 00:45:51,018 line:-2
名称是你在
Reality Composer中


892
00:45:51,318 --> 00:45:52,553 line:-1
赋予那些通知触发器的标识符


893
00:45:52,619 --> 00:45:54,021 line:-1
与通知动作一样


894
00:45:54,087 --> 00:45:56,623 line:-2
你也有一个数组
你可以对它进行筛选或迭代


895
00:45:57,758 --> 00:45:59,059 line:-2
这叫做
allNotifications


896
00:46:01,261 --> 00:46:05,432 line:-2
你可以通过调用发布方法
发布一个通知触发器


897
00:46:05,499 --> 00:46:08,335 line:-2
这将启动一个动作序列
或拥有相同名称的多个序列


898
00:46:09,336 --> 00:46:11,705 line:-1
你还可以传入一个可选的重写集


899
00:46:12,105 --> 00:46:14,641 line:-1
如果你想复制一个实体


900
00:46:14,908 --> 00:46:18,478 line:-2
并仅动态地调用新实体的动作序列
这个办法非常好用


901
00:46:19,146 --> 00:46:20,681 line:-1
重写将把


902
00:46:20,747 --> 00:46:24,084 line:-2
Reality Composer
中动作的初始目标的名称作为一个键


903
00:46:24,484 --> 00:46:25,686 line:-1
然后你传入新目标


904
00:46:25,953 --> 00:46:27,321 line:-1
当动作序列运行时


905
00:46:27,387 --> 00:46:29,356 line:-1
它只把新实体作为目标


906
00:46:30,891 --> 00:46:33,460 line:-2
让我们这些总结在一起
然后在Xcode中查看一下


907
00:46:34,161 --> 00:46:35,429 line:-1
（演示）


908
00:46:47,574 --> 00:46:49,042 line:-1
这是我的app


909
00:46:49,109 --> 00:46:52,045 line:-2
这是在演讲进行过程中
Pau和Michelle


910
00:46:52,412 --> 00:46:54,915 line:-1
所创建的太阳系课程的季节篇章


911
00:46:55,415 --> 00:46:57,384 line:-1
在这里我想实施第二个篇章


912
00:46:57,651 --> 00:46:59,553 line:-1
根据不同天体的尺寸


913
00:47:00,020 --> 00:47:03,090 line:-2
这是我们的Xcode 11
有我们的基础app


914
00:47:03,624 --> 00:47:05,993 line:-2
我们已经包含了我们的
Reality Composer项目


915
00:47:06,059 --> 00:47:08,662 line:-2
再一次 你可以创建一个新AR
或游戏模板


916
00:47:08,729 --> 00:47:11,632 line:-2
或你可以把Reality Composer项目
直接拖到Xcode中


917
00:47:14,668 --> 00:47:15,702 line:-1
我们可以直接在Xcode中…


918
00:47:16,570 --> 00:47:17,571 line:-1
预览项目…


919
00:47:18,472 --> 00:47:20,274 line:-2
并继续在
Reality Composer中打开它


920
00:47:24,278 --> 00:47:26,313 line:-1
在我们写任何代码之前


921
00:47:26,380 --> 00:47:27,514 line:-1
让我们先快速操作一下这个过程


922
00:47:28,382 --> 00:47:30,717 line:-2
在我们的篇章中
我们设置了一些实体


923
00:47:31,185 --> 00:47:33,053 line:-1
我们给场景赋予了一个名称


924
00:47:33,120 --> 00:47:35,489 line:-2
我们给我们所关心的不同实体
都赋予了名称


925
00:47:35,556 --> 00:47:37,591 line:-2
比如这个金星叫做
Sepcial Star


926
00:47:38,058 --> 00:47:39,960 line:-2
这个名称是我们要在代码中
使用的名称


927
00:47:41,428 --> 00:47:43,096 line:0
此外我们还设置了一些行为


928
00:47:44,164 --> 00:47:45,432 line:0
比如对于月球


929
00:47:45,832 --> 00:47:48,902 line:0
我们想了解月球何时被轻触了
因此我们可以存储一些app状态


930
00:47:49,903 --> 00:47:52,806 line:0
同时隐藏所有其他文本标签


931
00:47:53,173 --> 00:47:55,175 line:0
并仅显示月球的标签


932
00:47:55,242 --> 00:47:57,678 line:0
这些动作都是同时发生的
因为它们属于一个群组


933
00:47:59,112 --> 00:48:00,914 line:0
此外我们还有一个通知动作


934
00:48:00,981 --> 00:48:02,916 line:0
我们将在我们的app内
用通知动作来了解


935
00:48:02,983 --> 00:48:03,884 line:0
月球何时被轻触了


936
00:48:04,751 --> 00:48:08,322 line:0
我们也对地球和太阳实施了
同样的动作序列


937
00:48:09,456 --> 00:48:11,425 line:0
我们还设置了一个
Look At摄像头动作


938
00:48:11,491 --> 00:48:12,559 line:0
当场景开始时


939
00:48:12,893 --> 00:48:15,762 line:0
每个文本标签都将面向摄像头


940
00:48:15,829 --> 00:48:16,964 line:0
无论我们在看哪儿


941
00:48:18,765 --> 00:48:21,134 line:0
并且我们有一个
“开始时隐藏”动作序列


942
00:48:21,535 --> 00:48:24,705 line:0
那将隐藏我们只想在特定时间
看到的所有实体


943
00:48:24,972 --> 00:48:28,008 line:0
比如Chapter Completed
文本和文本标签


944
00:48:29,943 --> 00:48:31,945 line:0
此外我们有一些动作序列


945
00:48:32,012 --> 00:48:33,213 line:-1
将在代码中被触发


946
00:48:33,280 --> 00:48:35,315 line:0
我们稍后会在这个演示中看到


947
00:48:36,016 --> 00:48:38,685 line:0
那会把天体的尺寸调整为
它们的相对尺寸


948
00:48:39,786 --> 00:48:41,321 line:0
把它们的尺寸调整到同一个尺寸…


949
00:48:42,723 --> 00:48:45,626 line:0
显示
Chapter Completed文本


950
00:48:46,093 --> 00:48:47,160 line:0
开始地球环绕


951
00:48:47,427 --> 00:48:49,496 line:0
并隐藏全部其它天体


952
00:48:50,430 --> 00:48:51,832 line:0
我们有一个很酷的小动画…


953
00:48:52,699 --> 00:48:54,168 line:0
是从通知触发器中触发的


954
00:48:55,836 --> 00:48:58,605 line:0
那将显示金星 旋转它
并给它一个弹跳动作


955
00:49:00,140 --> 00:49:02,075 line:0
现在让我们返回到
Xcode app


956
00:49:03,210 --> 00:49:04,111 line:-1
快速地操作一下


957
00:49:04,178 --> 00:49:05,979 line:-1
这个app非常简单明了


958
00:49:06,313 --> 00:49:07,514 line:-1
它是个单一视图的app


959
00:49:08,582 --> 00:49:10,817 line:-1
在顶层我们有一个AR视图


960
00:49:11,985 --> 00:49:15,789 line:-2
一个分段的控制
用于切换尺寸和详情视图


961
00:49:17,224 --> 00:49:18,525 line:-1
一个课程完成按钮


962
00:49:18,592 --> 00:49:20,194 line:-1
从而学生可以说我已经完成课程了


963
00:49:20,260 --> 00:49:22,963 line:-1
并在最后浏览篇章


964
00:49:24,097 --> 00:49:26,800 line:-2
在详情视图中 当我们轻触月球、
地球和太阳时


965
00:49:26,867 --> 00:49:27,901 line:-1
会显示更多的详情


966
00:49:29,503 --> 00:49:32,506 line:-2
此外我们有一些视图模型
那将驱动详情视图


967
00:49:32,573 --> 00:49:33,740 line:-1
因此它只显示一些文本…


968
00:49:34,608 --> 00:49:37,077 line:-2
然后有一些基本的app逻辑
用于开始加载


969
00:49:37,611 --> 00:49:38,745 line:-1
让我们首先看一下加载


970
00:49:40,581 --> 00:49:42,182 line:-1
在这里你注意到的第一件事是…


971
00:49:42,549 --> 00:49:44,051 line:-1
我们在这个项目中使用了代码生成


972
00:49:44,785 --> 00:49:46,820 line:-2
因此我们的
Reality Composer项目


973
00:49:46,887 --> 00:49:49,056 line:-2
将被自动转化为
我们可以使用的一个对象


974
00:49:49,122 --> 00:49:50,023 line:-1
它是个真正的类型


975
00:49:50,090 --> 00:49:53,527 line:-2
我们可以直接在这里把它用作
尺寸篇章的属性


976
00:49:54,528 --> 00:49:57,364 line:-2
比如太阳系
lesson.size篇章


977
00:49:57,431 --> 00:49:58,498 line:-1
就是我们可以使用的一个真正的类型


978
00:49:59,466 --> 00:50:00,434 line:-1
我们可以继续…


979
00:50:00,868 --> 00:50:02,436 line:-1
并加载我们的场景…


980
00:50:02,503 --> 00:50:04,872 line:-1
让我们一起来看一下这段代码


981
00:50:05,339 --> 00:50:08,408 line:-1
我们正在做的是异步加载尺寸篇章


982
00:50:10,077 --> 00:50:13,213 line:-2
然后进行处理
并提供所加载锚点的碰撞形状


983
00:50:13,614 --> 00:50:15,115 line:-1
从而可以让轻触触发器发挥作用


984
00:50:16,016 --> 00:50:17,384 line:-1
然后我们把它添加到我们的场景中


985
00:50:18,118 --> 00:50:19,686 line:-1
因为我们稍后才使用尺寸篇章


986
00:50:19,753 --> 00:50:21,855 line:-1
我们要把它存在尺寸篇章属性中


987
00:50:22,356 --> 00:50:24,658 line:-1
我们要设置通知动作 我们稍后再用


988
00:50:24,725 --> 00:50:25,859 line:-1
目前并没有挂钩起来


989
00:50:26,660 --> 00:50:27,861 line:-1
让我们继续并运行一下


990
00:50:28,161 --> 00:50:29,496 line:-1
我们可以看到仅通过几行代码


991
00:50:29,963 --> 00:50:32,399 line:-1
我们就引入了我们的实体AR体验


992
00:50:32,466 --> 00:50:35,269 line:-2
并且它应该与Reality Composer中的
运作方式一模一样


993
00:50:37,571 --> 00:50:38,605 line:-1
好了 我们有场景了


994
00:50:38,672 --> 00:50:39,673 line:-1
我们看到内容


995
00:50:39,740 --> 00:50:41,275 line:-2
比如Chapter Completed
隐藏起来了


996
00:50:41,742 --> 00:50:43,777 line:-1
当我们轻触每个天体时


997
00:50:44,278 --> 00:50:46,180 line:-1
我们看到文本自动显示出来


998
00:50:46,613 --> 00:50:49,383 line:-2
并且它面向摄像头
无论我们正在看向哪里


999
00:50:51,018 --> 00:50:52,085 line:-1
跟太阳一样


1000
00:50:52,152 --> 00:50:53,754 line:-1
看起来很不错 只需要几行代码


1001
00:50:53,820 --> 00:50:56,723 line:-2
我们就把整个Reality Composer项目
引入了Xcode中


1002
00:50:56,790 --> 00:50:57,891 line:-1
超级简单


1003
00:50:57,958 --> 00:51:00,894 line:-2
接下来我要做的其实是
填充这个详情视图


1004
00:51:00,961 --> 00:51:02,763 line:-2
你可以注意到当我轻触太阳时
比如说


1005
00:51:03,163 --> 00:51:05,232 line:-1
其实并没有填充详情视图


1006
00:51:05,299 --> 00:51:06,567 line:-1
让我们返回到Xcode中…


1007
00:51:07,534 --> 00:51:09,002 line:-1
并填充通知动作


1008
00:51:15,209 --> 00:51:18,712 line:-1
因为我们的通知动作是自动生成的


1009
00:51:18,979 --> 00:51:21,915 line:-2
我们还得到一个可以进行筛选的
全部动作数组


1010
00:51:22,182 --> 00:51:24,918 line:-1
我们将对这些动作进行筛选


1011
00:51:24,985 --> 00:51:27,154 line:-2
只获得我们所关注的动作
即以display开始的动作


1012
00:51:30,858 --> 00:51:31,992 line:-1
让我们看一下这段代码


1013
00:51:33,660 --> 00:51:36,063 line:-1
因为我们在尺寸篇章设置了通知动作


1014
00:51:36,630 --> 00:51:38,866 line:0
我们可以返回到Reality Composer
去看一下


1015
00:51:40,601 --> 00:51:43,971 line:0
对于这里的每一个天体
月球、地球和太阳


1016
00:51:44,037 --> 00:51:45,038 line:0
显示月球详情、


1017
00:51:45,105 --> 00:51:47,107 line:0
显示地球详情和显示太阳详情


1018
00:51:47,608 --> 00:51:48,575 line:0
我们可以在代码中访问这些


1019
00:51:48,976 --> 00:51:52,012 line:0
我们实际上想筛选通知动作


1020
00:51:52,079 --> 00:51:53,714 line:0
只筛选以display开始的动作


1021
00:51:53,780 --> 00:51:56,517 line:0
因为我们想给每一个display动作
都设置同一个闭包


1022
00:51:57,951 --> 00:52:00,654 line:0
因此返回到Xcode中
这是我们目前正在做的


1023
00:52:00,721 --> 00:52:03,223 line:-2
我们正在执行size chapter.actions
.all actions


1024
00:52:03,624 --> 00:52:04,791 line:-1
我们对它进行筛选


1025
00:52:05,125 --> 00:52:07,661 line:-1
从通知动作对象中获得标识符


1026
00:52:08,195 --> 00:52:09,763 line:-2
并检查标识符是否以
display开始


1027
00:52:10,864 --> 00:52:13,233 line:-2
接下来我们迭代所有
display动作


1028
00:52:13,700 --> 00:52:17,237 line:-2
并给每一个使用on-action
属性的动作设置同一个闭包


1029
00:52:18,672 --> 00:52:20,908 line:-1
我们要获取通知动作的目标


1030
00:52:20,974 --> 00:52:23,577 line:-2
在这个例子中 对于月球来说是月球
对于太阳来说是太阳


1031
00:52:23,911 --> 00:52:25,078 line:-1
对于地球来说是地球


1032
00:52:26,346 --> 00:52:28,515 line:-2
并使用那个实体来显示
不同的视图模型


1033
00:52:29,816 --> 00:52:31,084 line:-1
让我们现在运行一下app


1034
00:52:32,152 --> 00:52:34,087 line:-1
当我们轻触每个天体时


1035
00:52:34,588 --> 00:52:36,423 line:-1
我们希望看到不同的视图模型


1036
00:52:38,225 --> 00:52:39,092 line:-1
好了


1037
00:52:39,626 --> 00:52:40,460 line:-1
我们有内容了


1038
00:52:40,928 --> 00:52:42,296 line:-1
现在当我们轻触月球时


1039
00:52:42,563 --> 00:52:47,067 line:-2
因为我们已经设置了通知动作
并且我们观察那些通知


1040
00:52:47,467 --> 00:52:50,170 line:-2
我们现在可以在底部这里看到
月球详情


1041
00:52:50,637 --> 00:52:52,873 line:-1
当我们轻触地球时可以看到地球详情


1042
00:52:53,340 --> 00:52:55,909 line:-1
当我们轻触太阳时可以看到太阳详情


1043
00:52:56,243 --> 00:52:57,144 line:-1
看起来非常棒


1044
00:52:58,612 --> 00:53:00,013 line:-1
我们还保持着某种状态


1045
00:53:00,080 --> 00:53:03,650 line:-2
当我们轻触全部三个天体地球、
太阳和月球动作时


1046
00:53:04,318 --> 00:53:06,587 line:-2
我们只是要确保
调用了三个不同的动作


1047
00:53:07,054 --> 00:53:09,823 line:-1
并在右上角显示一个课程完成按钮


1048
00:53:11,091 --> 00:53:13,794 line:-1
现在我们要做的是使用通知触发器


1049
00:53:14,595 --> 00:53:16,630 line:-2
启动我们在Reality Composer中
设置的


1050
00:53:16,697 --> 00:53:19,066 line:-1
调整为相对尺寸


1051
00:53:19,132 --> 00:53:20,400 line:-1
以及调整为动作序列的同一尺寸


1052
00:53:20,834 --> 00:53:22,202 line:-1
通过使用顶部的分段控制


1053
00:53:22,703 --> 00:53:24,404 line:-1
和右上角的按钮实现


1054
00:53:30,777 --> 00:53:33,714 line:-2
我们可以使用segmentedControl
ValueChanged方法实现


1055
00:53:33,780 --> 00:53:36,216 line:-1
这是一个界面创建器方法


1056
00:53:36,283 --> 00:53:38,185 line:-2
我们就在界面创建器中
设置和挂钩了这个方法


1057
00:53:42,456 --> 00:53:45,225 line:-1
使用我们的通知动作触发器


1058
00:53:45,559 --> 00:53:48,195 line:-2
我们可以启动我们在
Reality Composer中设置的


1059
00:53:48,262 --> 00:53:49,830 line:0
调整为同一尺寸动作序列


1060
00:53:51,832 --> 00:53:54,501 line:0
那将把每个天体尺寸重新调整到


1061
00:53:54,768 --> 00:53:56,670 line:0
100%初始尺寸


1062
00:53:57,838 --> 00:54:00,207 line:0
当选中尺寸分段控制之后


1063
00:54:00,274 --> 00:54:03,310 line:0
我们可以把太阳的尺寸调整为
对地球的相对尺寸


1064
00:54:04,411 --> 00:54:06,547 line:-1
为此我们可以启动…


1065
00:54:08,315 --> 00:54:10,117 line:-1
调整为相对尺寸动作序列


1066
00:54:11,618 --> 00:54:14,421 line:-1
最后当轻触课程结束按钮时


1067
00:54:14,488 --> 00:54:16,857 line:-2
这是我们所设置和挂钩的
界面创建器动作


1068
00:54:19,593 --> 00:54:22,129 line:-2
我们将启动Chapter Completed
通知触发器


1069
00:54:23,030 --> 00:54:24,097 line:-1
它所执行的操作是


1070
00:54:24,164 --> 00:54:27,201 line:0
因为Reality Composer中


1071
00:54:27,267 --> 00:54:28,602 line:0
有三个不同的通知触发器


1072
00:54:28,969 --> 00:54:31,038 line:0
我们将触发全部三个动作序列


1073
00:54:31,538 --> 00:54:33,207 line:0
我们将淡出现有内容


1074
00:54:34,741 --> 00:54:37,411 line:0
然后开始小地球和小月球的环绕


1075
00:54:39,680 --> 00:54:41,715 line:0
我们将显示
Chapter Completed


1076
00:54:44,818 --> 00:54:47,087 line:-2
让我们现在运行一下
看看我们的app


1077
00:54:51,258 --> 00:54:52,359 line:-1
好的 在这里我们有内容


1078
00:54:53,527 --> 00:54:55,162 line:-1
我们可以轻触月球 一切都…


1079
00:54:55,229 --> 00:54:57,331 line:-2
跟我们在Reality Composer中
所设置的完全一样


1080
00:54:57,731 --> 00:55:00,067 line:-1
现在当我们轻触尺寸分段控制时


1081
00:55:00,133 --> 00:55:01,468 line:-1
当我们看地球和月球时


1082
00:55:01,869 --> 00:55:04,738 line:-2
我们就可以很好地了解
相对于地球来说太阳到底有多大


1083
00:55:05,305 --> 00:55:06,907 line:-1
地球非常小


1084
00:55:08,809 --> 00:55:09,710 line:-1
看起来很不错


1085
00:55:09,776 --> 00:55:10,844 line:-1
让我们把它的尺寸调回去


1086
00:55:11,411 --> 00:55:12,279 line:-1
让我们结束课程


1087
00:55:12,713 --> 00:55:14,081 line:-1
我要轻触课程完成


1088
00:55:14,147 --> 00:55:16,016 line:-1
位于右上角的完成课程按钮


1089
00:55:17,284 --> 00:55:18,719 line:-1
我们可以看到内容淡出了


1090
00:55:19,119 --> 00:55:20,420 line:-2
并且我们看到
Chapter Completed


1091
00:55:21,388 --> 00:55:23,190 line:-1
并且地球和月球开始环绕小太阳移动


1092
00:55:23,690 --> 00:55:24,758 line:-1
看起来很不错


1093
00:55:24,825 --> 00:55:28,161 line:-2
我们可以看到如何在app中使用
通知触发器和通知动作


1094
00:55:28,562 --> 00:55:30,931 line:-1
来处理我们的AR内容


1095
00:55:31,231 --> 00:55:32,499 line:-1
我们还有最后一件事要做


1096
00:55:32,566 --> 00:55:34,134 line:-1
我们提到过用重写进行发布


1097
00:55:34,635 --> 00:55:35,969 line:-1
我想告诉你如何使用重写


1098
00:55:36,036 --> 00:55:38,338 line:-1
来显示使用了app状态的动态内容


1099
00:55:39,173 --> 00:55:40,807 line:-1
因为这是一个课程app


1100
00:55:41,074 --> 00:55:43,777 line:0
我们想根据学生的表现显示金星


1101
00:55:47,347 --> 00:55:49,116 line:-2
对于这场演讲来说
我觉得我们做的非常不错


1102
00:55:49,183 --> 00:55:50,284 line:-1
因此我要给我们三颗星


1103
00:55:50,651 --> 00:55:51,952 line:-1
我们可以看一下如何进行设置


1104
00:55:52,653 --> 00:55:56,590 line:-2
这个方法是我们要在上边的
显示详情视图内调用的方法


1105
00:55:56,924 --> 00:55:59,293 line:-1
我们要在这个方法中保持状态


1106
00:56:01,995 --> 00:56:04,498 line:-2
看起来我刚传入了许多代码
但让我们来看一下吧


1107
00:56:05,432 --> 00:56:08,936 line:-1
我们要做的第一件事就是访问


1108
00:56:09,002 --> 00:56:10,437 line:-2
我们在Reality Composer中
所设置的Special Star实体


1109
00:56:12,272 --> 00:56:13,173 line:-1
就在这里


1110
00:56:15,108 --> 00:56:18,245 line:-2
我们赋予它一个名称是Special Star
我们现在要直接在Xcode中访问它


1111
00:56:19,513 --> 00:56:23,150 line:-1
接下来我们直接在代码中


1112
00:56:23,650 --> 00:56:24,685 line:-1
触发显示金星动作序列


1113
00:56:24,751 --> 00:56:26,220 line:-1
从而可以显示第一颗金星


1114
00:56:26,486 --> 00:56:27,554 line:-1
但我们想显示三颗


1115
00:56:28,288 --> 00:56:31,091 line:-1
因此我们可以分派实现


1116
00:56:31,158 --> 00:56:33,293 line:-2
对于这个演示来说
也许可以在两秒半之后显示


1117
00:56:33,760 --> 00:56:35,395 line:-1
我们要克隆星星


1118
00:56:36,463 --> 00:56:40,234 line:-1
我们要把它放在右侧稍微靠上一些


1119
00:56:41,001 --> 00:56:42,302 line:-1
我们要把它添加到我们的场景中


1120
00:56:43,437 --> 00:56:45,072 line:-1
然后使用发布重写


1121
00:56:45,138 --> 00:56:47,674 line:-1
我们传入动作序列的初始目标


1122
00:56:48,041 --> 00:56:51,912 line:-1
然后传入新动作以及动作的新目标


1123
00:56:51,979 --> 00:56:53,213 line:-1
在这个例子中是右侧的星星


1124
00:56:54,114 --> 00:56:56,016 line:-1
我们想对左边的星星做同样的操作


1125
00:56:56,083 --> 00:56:58,252 line:-1
我们再次复制它 复制星星


1126
00:56:59,086 --> 00:57:01,421 line:-1
把它放在左边稍微靠下一点的位置


1127
00:57:02,289 --> 00:57:05,092 line:-2
把它添加到我们的场景中 再一次
发布重写


1128
00:57:05,425 --> 00:57:08,328 line:-2
获取初始名称
并且这一次传入左侧的星星


1129
00:57:08,662 --> 00:57:10,464 line:-1
作为动作序列的目标


1130
00:57:11,899 --> 00:57:13,166 line:-1
让我们现在创建并运行这个app


1131
00:57:13,233 --> 00:57:15,435 line:-1
我们希望能看到三颗金星


1132
00:57:15,502 --> 00:57:17,738 line:-1
即使我们只在app中设置了一颗


1133
00:57:17,804 --> 00:57:19,606 line:-1
这完全是由app逻辑驱动的


1134
00:57:25,445 --> 00:57:26,780 line:-1
又是我们的场景


1135
00:57:27,347 --> 00:57:28,515 line:-1
我们可以完成课程


1136
00:57:30,083 --> 00:57:31,552 line:-2
我觉得我现在已经完成了
因此我要点击…


1137
00:57:33,120 --> 00:57:34,254 line:-1
完成课程


1138
00:57:34,321 --> 00:57:35,889 line:-1
我们看到出现了一颗金星


1139
00:57:36,890 --> 00:57:38,325 line:-1
然后出现第二颗金星


1140
00:57:38,992 --> 00:57:40,093 line:-1
然后是第三颗金星


1141
00:57:40,160 --> 00:57:41,828 line:-2
我们做的很棒
因此我们得到了三颗金星


1142
00:57:51,839 --> 00:57:54,374 line:-1
因此把AR内容


1143
00:57:54,441 --> 00:57:55,442 line:-1
加载到app中非常简单


1144
00:57:56,143 --> 00:57:59,913 line:-1
先使用通知动作来提供自定义实施


1145
00:58:00,347 --> 00:58:03,450 line:-2
然后使用你在
Reality Composer中


1146
00:58:03,884 --> 00:58:05,219 line:-2
使用通知触发器设置的
触发器动作序列


1147
00:58:07,354 --> 00:58:09,022 line:-1
让我们总结一下我们今天讲过的内容


1148
00:58:09,089 --> 00:58:12,593 line:-2
我们了解了
Reality Composer


1149
00:58:12,993 --> 00:58:15,295 line:-2
我们可以使用内置的模块化资产
创建优秀的AR体验


1150
00:58:15,362 --> 00:58:17,164 line:-1
比如球体或立方体


1151
00:58:18,065 --> 00:58:20,701 line:-1
然后我们使用行为和简单的交互


1152
00:58:22,536 --> 00:58:23,670 line:-1
把那些资产变得鲜活起来


1153
00:58:24,638 --> 00:58:27,140 line:-2
最后我们通过代码生成
和深度集成Xcode


1154
00:58:27,207 --> 00:58:29,710 line:-1
把那些优秀的AR体验


1155
00:58:29,776 --> 00:58:31,078 line:-1
引入到我们的app中


1156
00:58:31,945 --> 00:58:33,614 line:-2
我们已经看到你们使用
Reality Composer


1157
00:58:33,680 --> 00:58:36,149 line:-1
所创建的一些很棒的东西了


1158
00:58:36,517 --> 00:58:38,385 line:-1
我们鼓励你们继续创建


1159
00:58:38,652 --> 00:58:41,255 line:-2
能看到你们即将要创建的
很棒的AR app


1160
00:58:41,555 --> 00:58:42,489 line:-1
我们感到非常激动


1161
00:58:43,524 --> 00:58:46,226 line:0
今天和明天


1162
00:58:46,593 --> 00:58:47,427 line:-1
还有一些演讲和演讲


1163
00:58:48,095 --> 00:58:50,430 line:0
我们鼓励你们带上你们的问题
带上你们的项目


1164
00:58:50,497 --> 00:58:52,132 line:0
带上你们需要带的一切来参加
我们非常乐意帮助你们


1165
00:58:53,000 --> 00:58:54,668 line:-1
祝你们度过一个愉快的WWDC


1166
00:58:54,735 --> 00:58:55,769 line:-1
谢谢大家

