1
00:00:00,506 --> 00:00:05,500
[音乐]


2
00:00:11,076 --> 00:00:14,866
>> 大家好 [掌声]


3
00:00:14,866 --> 00:00:16,376
欢迎来到 What's New in Core Location


4
00:00:16,826 --> 00:00:18,366
我叫 Adam Driscoll


5
00:00:18,366 --> 00:00:20,106
我是 Core Location 团队的一名工程师


6
00:00:20,966 --> 00:00:22,526
很高兴为大家介绍


7
00:00:22,526 --> 00:00:23,416
我们在 iOS 13 里


8
00:00:23,416 --> 00:00:25,986
对 Core Location 作出的一些改进


9
00:00:27,276 --> 00:00:28,836
所以 我想这可能是我们所有


10
00:00:28,836 --> 00:00:30,066
开发者的初衷


11
00:00:30,176 --> 00:00:31,396
我们希望让我们的用户高兴


12
00:00:32,165 --> 00:00:35,586
现在我们通过 App 来实现


13
00:00:35,586 --> 00:00:36,706
然后 既然你们今天在这里


14
00:00:36,706 --> 00:00:37,976
听我的演讲


15
00:00:37,976 --> 00:00:39,726
我认为用户的位置


16
00:00:39,726 --> 00:00:40,926
是你的 App 中能让用户高兴的


17
00:00:40,926 --> 00:00:42,936
重要因素 所以 你将会想要


18
00:00:43,466 --> 00:00:45,506
使用 Core Location


19
00:00:47,676 --> 00:00:48,966
可能你已经知道


20
00:00:48,966 --> 00:00:50,426
你的 App 将需要


21
00:00:50,466 --> 00:00:51,476
得到用户的授权


22
00:00:51,476 --> 00:00:53,846
以通过 Core Location 访问他们的位置


23
00:00:53,846 --> 00:00:54,896
所以更细节一些来看


24
00:00:56,036 --> 00:00:57,836
你将需要通过我们的授权弹出系统


25
00:00:57,896 --> 00:01:00,166
发出请求


26
00:01:00,166 --> 00:01:01,526
以及响应用户的选择


27
00:01:01,526 --> 00:01:03,836
然后用我们其余的 API


28
00:01:03,836 --> 00:01:05,306
来完成这项工作


29
00:01:05,986 --> 00:01:08,026
好了 这是我们今天在这里


30
00:01:08,026 --> 00:01:09,966
要讨论的内容 因为在 iOS 13 里


31
00:01:10,016 --> 00:01:12,266
我们的授权系统和


32
00:01:12,266 --> 00:01:13,486
它呈现的选项有所变化


33
00:01:13,486 --> 00:01:16,736
我们在地理区域部分的 API


34
00:01:16,816 --> 00:01:18,146
也是如此


35
00:01:20,106 --> 00:01:22,576
我们将具体谈到始终授权


36
00:01:23,046 --> 00:01:26,066
现在它的工作方式有所不同


37
00:01:26,066 --> 00:01:27,396
使用期间授权


38
00:01:27,396 --> 00:01:29,736
现在可以做到更多


39
00:01:29,956 --> 00:01:31,976
暂时授权是全新的功能


40
00:01:31,976 --> 00:01:33,936
我们希望你和你的用户会喜欢它


41
00:01:35,126 --> 00:01:36,196
然后 我会请我的同事


42
00:01:36,196 --> 00:01:38,356
Andrea 上台向你们介绍


43
00:01:38,356 --> 00:01:39,736
这些功能的 App


44
00:01:39,806 --> 00:01:42,216
具体来说 是在地理测距的情景下


45
00:01:43,406 --> 00:01:45,466
好了 让我们从看看我刚才


46
00:01:45,466 --> 00:01:47,336
使用的弹窗开始


47
00:01:49,536 --> 00:01:51,156
你可能在 Platforms State of the Union 演讲里


48
00:01:51,156 --> 00:01:52,196
听到过它


49
00:01:53,886 --> 00:01:56,456
在 iOS 13 中 每一个新用户的


50
00:01:56,586 --> 00:01:58,736
授权交互都会从这个弹窗开始


51
00:01:59,366 --> 00:02:01,986
我想调出一个


52
00:02:01,986 --> 00:02:03,006
我们今天不会过多讨论的选项


53
00:02:03,006 --> 00:02:04,006
它在底部


54
00:02:04,006 --> 00:02:05,116
不允许


55
00:02:06,096 --> 00:02:07,556
如果用户选择了不允许


56
00:02:07,556 --> 00:02:08,425
那么你的 App 将不能


57
00:02:08,425 --> 00:02:09,716
访问他们的位置


58
00:02:09,716 --> 00:02:11,116
这个弹窗将不再出现


59
00:02:11,856 --> 00:02:13,436
所以 你可能已经


60
00:02:13,436 --> 00:02:14,816
在思考这个问题


61
00:02:14,816 --> 00:02:15,946
但当你显示这个弹窗的时候 


62
00:02:16,046 --> 00:02:17,626
当你发出请求将这个


63
00:02:17,626 --> 00:02:19,336
弹窗呈现给你的用户的时候 要保持谨慎 


64
00:02:20,026 --> 00:02:21,356
要在用户非常了解


65
00:02:21,356 --> 00:02:22,706
为什么你需要


66
00:02:22,706 --> 00:02:24,496
访问他们的位置的时候 以及最可能倾向于


67
00:02:24,496 --> 00:02:26,586
同意授权的时候 再这样做


68
00:02:27,966 --> 00:02:29,126
好了 我们现在的安排


69
00:02:29,126 --> 00:02:30,276
是要讨论始终授权


70
00:02:30,276 --> 00:02:31,986
这个弹窗里没有


71
00:02:31,986 --> 00:02:34,546
允许始终授权的选项


72
00:02:35,006 --> 00:02:36,006
所以 这是个迷吗


73
00:02:37,056 --> 00:02:38,556
如果我们看看你的 App


74
00:02:38,556 --> 00:02:40,516
是如何要求显示这个弹窗的


75
00:02:40,516 --> 00:02:42,506
我想这个迷将被解开


76
00:02:43,386 --> 00:02:45,026
所以 首先 你将需要


77
00:02:45,026 --> 00:02:46,536
一个 CLLocationManager()


78
00:02:46,536 --> 00:02:47,816
它需要一点时间


79
00:02:47,966 --> 00:02:50,056
所以 如果你的 App 比较简单


80
00:02:50,096 --> 00:02:51,096
在 App Delegate 中


81
00:02:51,096 --> 00:02:52,296
将它设置为实例变量


82
00:02:52,296 --> 00:02:55,426
是处理它的好方法


83
00:02:55,696 --> 00:02:57,006
然后 你的 App 可以调用


84
00:02:57,006 --> 00:02:57,926
这两种方法中的一种


85
00:02:57,926 --> 00:02:58,796
要么发出在使用期间授权请求


86
00:02:58,796 --> 00:03:01,086
要么发出始终授权请求


87
00:03:01,866 --> 00:03:03,966
在这个介绍里 我们假设


88
00:03:04,266 --> 00:03:05,766
它发出了始终授权请求


89
00:03:07,116 --> 00:03:08,836
在 iOS 12 里 这将导致


90
00:03:08,836 --> 00:03:10,026
在弹窗中


91
00:03:10,026 --> 00:03:11,476
将使用期间授权以及


92
00:03:11,476 --> 00:03:13,086
始终授权这两个选项都提供给用户


93
00:03:13,086 --> 00:03:14,666
但是现在 在 iOS 13 里


94
00:03:14,716 --> 00:03:16,736
它只提供一个选项


95
00:03:16,736 --> 00:03:18,206
没有始终授权的选项


96
00:03:19,466 --> 00:03:21,866
但是 Core Location 记得


97
00:03:21,866 --> 00:03:24,536
你的 App 的请求 所以


98
00:03:24,536 --> 00:03:25,386
如果你需要始终授权


99
00:03:25,386 --> 00:03:26,646
而你的用户同意的


100
00:03:26,646 --> 00:03:27,876
是这里提供的


101
00:03:28,186 --> 00:03:29,426
最长久正面的选项


102
00:03:29,426 --> 00:03:30,726
使用期间授权


103
00:03:32,216 --> 00:03:33,626
那么这就是你将得到的


104
00:03:33,626 --> 00:03:34,786
Apple 将接收在使用期间授权


105
00:03:34,786 --> 00:03:36,176
但它也会进入


106
00:03:36,176 --> 00:03:38,816
我们所说的 临时始终授权


107
00:03:39,426 --> 00:03:42,000
好了 让我们看看它将如何展开


108
00:03:45,156 --> 00:03:46,836
所以 在这条时间线顶部


109
00:03:46,836 --> 00:03:48,056
蓝色部分是用户将会看到的


110
00:03:48,056 --> 00:03:51,346
下方绿色部分


111
00:03:51,346 --> 00:03:52,636
是你的 App 将会看到的


112
00:03:52,896 --> 00:03:53,786
因为在临时授权下


113
00:03:53,786 --> 00:03:56,716
这两者事实上是不同的


114
00:03:57,616 --> 00:03:59,466
所以 你的 App 请求始终授权


115
00:03:59,466 --> 00:04:03,126
接着用户进行了


116
00:04:03,126 --> 00:04:04,266
使用期间授权


117
00:04:04,866 --> 00:04:07,636
现在 如果用户打开设置


118
00:04:07,636 --> 00:04:09,176
他们将看到


119
00:04:09,176 --> 00:04:10,916
你的 App 拥有使用期间授权


120
00:04:12,196 --> 00:04:13,876
但是 Core Location 回调了


121
00:04:13,876 --> 00:04:15,166
你的 Delegate 然后告知它


122
00:04:15,166 --> 00:04:16,616
接收到了始终授权


123
00:04:17,716 --> 00:04:18,935
所以 我们希望这能


124
00:04:18,935 --> 00:04:20,076
将你的 App 需要在这个情景中做什么


125
00:04:20,076 --> 00:04:21,576
变得非常简单和明确


126
00:04:22,416 --> 00:04:23,936
这需要用到它的始终授权的支持


127
00:04:24,156 --> 00:04:25,796
它需要做


128
00:04:25,796 --> 00:04:28,356
那些需要始终授权来做到的事


129
00:04:28,586 --> 00:04:29,616
在我们在后面讲到


130
00:04:29,616 --> 00:04:31,536
在使用期间授权的时候


131
00:04:31,536 --> 00:04:33,056
我们会对它有更多了解


132
00:04:33,176 --> 00:04:35,746
例如 它可能会


133
00:04:35,746 --> 00:04:38,136
设置一些地理围栏


134
00:04:38,386 --> 00:04:41,046
然后开始基于用户的位置


135
00:04:41,046 --> 00:04:42,286
在后台为用户


136
00:04:42,286 --> 00:04:43,226
执行自动化行为


137
00:04:45,216 --> 00:04:47,376
好了 如果它这样做了 那么


138
00:04:47,376 --> 00:04:48,666
Core Location 将为那些


139
00:04:48,666 --> 00:04:52,186
地理围栏进行监测 


140
00:04:52,186 --> 00:04:53,586
在某个时候用户将进入或者


141
00:04:53,586 --> 00:04:55,896
退出某个地理围栏 然后一个事件将被生成


142
00:04:57,526 --> 00:04:58,766
一般来说 这个事件将被


143
00:04:58,766 --> 00:05:00,416
传递给你的 


144
00:05:00,416 --> 00:05:02,316
位置管理 Delegate 但是


145
00:05:02,316 --> 00:05:03,786
因为你的授权是临时的


146
00:05:03,846 --> 00:05:06,346
所以 Core Location 


147
00:05:06,346 --> 00:05:08,016
将保持一段时间


148
00:05:08,016 --> 00:05:09,436
等到一个合适的时候询问你的用户


149
00:05:09,726 --> 00:05:10,966
他们是否想要将你的 App


150
00:05:11,006 --> 00:05:12,086
升级成为始终授权


151
00:05:12,626 --> 00:05:17,946
那个弹窗看起来像这样


152
00:05:17,996 --> 00:05:19,036
我们终于在底部


153
00:05:19,036 --> 00:05:21,276
看到一个允许始终授权的按钮


154
00:05:21,976 --> 00:05:23,756
所以你的 App 会认为它在这段时间里


155
00:05:23,756 --> 00:05:24,976
一直拥有始终授权


156
00:05:24,976 --> 00:05:27,126
用户则认为


157
00:05:27,126 --> 00:05:28,996
它一直拥有使用期间授权


158
00:05:29,846 --> 00:05:30,716
这个弹窗代表着


159
00:05:30,716 --> 00:05:32,416
我们如何让大家回到一起


160
00:05:32,416 --> 00:05:33,726
统一观点


161
00:05:34,246 --> 00:05:38,596
现在 如果这个弹窗


162
00:05:38,596 --> 00:05:39,616
在你的用户不理解为什么


163
00:05:39,616 --> 00:05:41,106
你的 App 需要


164
00:05:41,226 --> 00:05:42,616
访问他们的位置时出现


165
00:05:43,366 --> 00:05:44,456
或者 他们不希望你的 App


166
00:05:44,456 --> 00:05:45,786
可以在后台访问他们的位置


167
00:05:45,786 --> 00:05:47,566
那么这个时候 


168
00:05:47,566 --> 00:05:48,636
他们可以回复 希望继续给你的 App


169
00:05:48,636 --> 00:05:50,736
在使用期间的授权


170
00:05:53,126 --> 00:05:54,646
但是 如果你和你的用户


171
00:05:54,646 --> 00:05:55,756
想法一致 他们喜欢


172
00:05:55,756 --> 00:05:57,606
他们看到的 他们也可以


173
00:05:58,026 --> 00:06:01,486
在这里给你的 App 始终授权


174
00:06:01,696 --> 00:06:04,296
无论如何 这个临时授权阶段结束了


175
00:06:05,326 --> 00:06:06,646
如果你的 App 最终获得了始终授权


176
00:06:06,646 --> 00:06:08,026
那么它也将


177
00:06:08,026 --> 00:06:10,626
接收到开始这项进程的事件


178
00:06:11,746 --> 00:06:12,866
如果以在使用期间授权结束


179
00:06:12,866 --> 00:06:16,526
那么它将不会接收到事件


180
00:06:16,526 --> 00:06:19,186
好了 我们来讨论一下细节


181
00:06:19,296 --> 00:06:20,476
首先记住 当你的 App 


182
00:06:20,476 --> 00:06:22,216
在临时始终授权期间


183
00:06:22,216 --> 00:06:24,396
Core Location 将


184
00:06:24,396 --> 00:06:26,036
保持监测并生成一些


185
00:06:26,036 --> 00:06:26,826
你的 App 会有兴趣的事件


186
00:06:26,826 --> 00:06:28,366
但不会将它们传递给


187
00:06:28,366 --> 00:06:30,096
你的 App 除非


188
00:06:30,186 --> 00:06:31,976
这与它实际所有的


189
00:06:31,976 --> 00:06:34,696
在使用期间授权是相一致的


190
00:06:36,456 --> 00:06:38,736
第二 这个能让用户


191
00:06:38,736 --> 00:06:40,006
对你的 App 进行始终授权的


192
00:06:40,006 --> 00:06:42,006
弹窗会在晚些时候弹出


193
00:06:42,636 --> 00:06:47,886
第三 你只能启动这个过程一次


194
00:06:50,536 --> 00:06:52,216
但是 你能 像这个例子一样


195
00:06:52,216 --> 00:06:56,326
在一开始就请求始终授权


196
00:06:56,326 --> 00:06:59,046
或者 你可以先请求


197
00:06:59,046 --> 00:07:00,866
在使用过程中授权


198
00:07:00,866 --> 00:07:02,136
然后在之后的某个时间


199
00:07:02,176 --> 00:07:03,666
可能是当用户与


200
00:07:03,666 --> 00:07:04,946
你的 App 的一种特性进行交互


201
00:07:04,946 --> 00:07:06,416
而这种特性需要支持的时候 


202
00:07:06,416 --> 00:07:09,586
将请求始终授权当做一个升级


203
00:07:10,116 --> 00:07:13,376
所以 Core Location 是用来


204
00:07:13,376 --> 00:07:14,906
监测和接收


205
00:07:14,956 --> 00:07:16,056
你的 App 感兴趣的事件


206
00:07:16,566 --> 00:07:17,706
我们来谈谈他们什么时候


207
00:07:17,706 --> 00:07:18,706
将被传递到你的 App 


208
00:07:18,706 --> 00:07:19,346
以及在什么时候会被删除


209
00:07:20,006 --> 00:07:22,576
首先 就像我们看到的 


210
00:07:22,576 --> 00:07:24,096
如果你的 App 最终获得了始终授权


211
00:07:24,096 --> 00:07:25,596
而不是在使用期间授权


212
00:07:26,106 --> 00:07:28,416
那么它将会被传递


213
00:07:28,926 --> 00:07:31,446
但是如果用户还尚未作出选择


214
00:07:31,446 --> 00:07:32,986
它们也不会被传递


215
00:07:34,366 --> 00:07:36,036
现在 Core Location 要等待一个时机


216
00:07:36,086 --> 00:07:37,506
当我们认为用户


217
00:07:37,506 --> 00:07:39,426
不是很忙 可以最大程度的


218
00:07:39,466 --> 00:07:40,466
理解正在发生什么


219
00:07:40,466 --> 00:07:41,916
而不是给出


220
00:07:41,916 --> 00:07:44,326
不要烦我的类似回复时


221
00:07:45,676 --> 00:07:47,736
所以 在这段时间 如果


222
00:07:47,736 --> 00:07:48,726
在这个基础上生成了更多事件


223
00:07:48,726 --> 00:07:49,786
如果你在监测请求


224
00:07:49,786 --> 00:07:51,546
那么这些事件将


225
00:07:51,546 --> 00:07:53,766
取代前一个出现的事件


226
00:07:53,766 --> 00:07:55,656
这个前序事件将被删除


227
00:07:56,866 --> 00:08:00,466
然后最终 Core Location 将删除


228
00:08:00,466 --> 00:08:02,536
太过老旧的事件


229
00:08:03,246 --> 00:08:05,316
这是因为 它可能和你的用例不再相关


230
00:08:05,316 --> 00:08:06,646
它也肯定不在


231
00:08:06,646 --> 00:08:07,996
用户的思维里


232
00:08:07,996 --> 00:08:09,336
不在用户的脑子里了


233
00:08:09,336 --> 00:08:10,766
所以它们对于帮助用户


234
00:08:10,766 --> 00:08:12,106
了解发生了什么没有帮助


235
00:08:12,886 --> 00:08:16,226
最后 要明确的是 这个过程


236
00:08:16,226 --> 00:08:18,146
会导致很多用例在开始的时候


237
00:08:18,146 --> 00:08:19,476
就被删除事件


238
00:08:19,476 --> 00:08:24,856
但我们认为这非常重要


239
00:08:24,896 --> 00:08:26,296
请为此做准备


240
00:08:26,356 --> 00:08:30,016
因为你才刚刚了解用户


241
00:08:30,156 --> 00:08:31,436
请求始终授权


242
00:08:31,436 --> 00:08:33,000
是需要很多信任的


243
00:08:35,666 --> 00:08:37,106
好了 现在我想


244
00:08:37,206 --> 00:08:38,356
在不同的平台上


245
00:08:38,356 --> 00:08:39,466
讨论始终授权的


246
00:08:39,466 --> 00:08:41,106
实用性和处理方法


247
00:08:42,876 --> 00:08:44,906
所以 tvOS 仅支持使用期间授权


248
00:08:44,906 --> 00:08:48,586
watchOS 真的只需要


249
00:08:48,586 --> 00:08:50,766
使用期间授权


250
00:08:52,106 --> 00:08:53,586
这是因为在 watchOS 里


251
00:08:53,586 --> 00:08:54,816
接入后台运行时间


252
00:08:54,816 --> 00:08:56,256
是受到严格约束的


253
00:08:56,316 --> 00:08:58,016
我们大部分的 API 都


254
00:08:58,016 --> 00:08:59,176
不提供启动行为


255
00:09:01,006 --> 00:09:02,486
此外 类似表盘的上下文


256
00:09:02,486 --> 00:09:03,816
一直处于有效使用中


257
00:09:03,816 --> 00:09:06,256
所以 如果你在致力于做


258
00:09:06,256 --> 00:09:07,406
一个复杂功能 你的 App


259
00:09:07,406 --> 00:09:11,566
可能不需要始终授权


260
00:09:12,306 --> 00:09:14,146
不需要始终授权


261
00:09:15,026 --> 00:09:17,376
类似的 macOS 本身


262
00:09:17,376 --> 00:09:18,736
不支持始终授权


263
00:09:18,736 --> 00:09:21,386
但会自动弹出弹窗


264
00:09:21,386 --> 00:09:23,476
所以你将不需要请求授权


265
00:09:26,066 --> 00:09:27,946
这意味着对于


266
00:09:27,946 --> 00:09:29,926
在 Mac 上的 iPad App


267
00:09:29,926 --> 00:09:30,996
在使用期间授权


268
00:09:30,996 --> 00:09:32,586
和始终授权的作用是相同的


269
00:09:33,876 --> 00:09:35,766
你的 UIKit 代码可以也需要


270
00:09:35,766 --> 00:09:37,296
从它在 iOS 上的使用角度


271
00:09:37,296 --> 00:09:38,326
使用合理的请求


272
00:09:38,326 --> 00:09:44,106
当它在 Mac 上运行的时候


273
00:09:44,316 --> 00:09:46,056
好了 所以 这是始终授权


274
00:09:46,666 --> 00:09:47,886
现在 我们已经


275
00:09:47,886 --> 00:09:49,706
提及了几次关于


276
00:09:49,706 --> 00:09:51,306
什么时候你的 App 


277
00:09:51,306 --> 00:09:53,006
需要用到始终授权


278
00:09:53,616 --> 00:09:55,686
让我们来看看在使用期间授权


279
00:09:55,686 --> 00:09:56,976
然后我想我们将会明白


280
00:10:00,716 --> 00:10:02,186
我想我已经暗示过了


281
00:10:02,246 --> 00:10:05,746
但你可能已经在猜测 如果你的 App


282
00:10:05,936 --> 00:10:07,506
请求在使用期间授权


283
00:10:07,506 --> 00:10:08,846
预先请求


284
00:10:08,846 --> 00:10:10,166
在使用期间授权


285
00:10:10,306 --> 00:10:11,426
用户在这个弹窗里进行授权


286
00:10:11,426 --> 00:10:12,756
然后你的 App 将接收


287
00:10:12,756 --> 00:10:13,446
使用期间授权


288
00:10:13,446 --> 00:10:14,476
没有临时时间


289
00:10:14,476 --> 00:10:19,606
也没有后续弹窗的


290
00:10:19,606 --> 00:10:20,736
它保留了在以后


291
00:10:20,736 --> 00:10:21,766
可能在你引入了一个


292
00:10:21,766 --> 00:10:22,896
确实需要始终授权的新功能时


293
00:10:22,896 --> 00:10:25,506
你请求始终授权的机会


294
00:10:26,256 --> 00:10:29,156
那么在你推出一个厉害的新功能


295
00:10:29,156 --> 00:10:30,846
请求始终授权来支持之前


296
00:10:30,846 --> 00:10:33,046
你能做到什么


297
00:10:35,316 --> 00:10:38,326
在 iOS 12 或者更早的版本里


298
00:10:38,376 --> 00:10:40,426
这张表格可以提供答案


299
00:10:41,756 --> 00:10:43,316
就像你看到的 一个获得


300
00:10:43,316 --> 00:10:45,196
在使用期间授权的 App 可以获得


301
00:10:45,196 --> 00:10:47,536
位置更新 它能地理测距


302
00:10:47,586 --> 00:10:51,546
它甚至能在前台启动位置更新后


303
00:10:51,546 --> 00:10:53,046
通过使用蓝色的


304
00:10:53,046 --> 00:10:55,426
后台使用指示器


305
00:10:55,426 --> 00:10:57,726
在后台的持续获得


306
00:10:58,196 --> 00:10:59,536
位置更新


307
00:11:00,146 --> 00:11:03,926
它不能在后台直接开始位置更新


308
00:11:03,926 --> 00:11:07,276
它也不能使用任何一个


309
00:11:07,276 --> 00:11:08,376
有可能在后台启动的时候


310
00:11:08,376 --> 00:11:10,536
携带位置相关的信息的


311
00:11:10,536 --> 00:11:11,736
监测 API


312
00:11:12,526 --> 00:11:14,586
所以 在这里 什么是持续性的功能


313
00:11:15,836 --> 00:11:16,696
你将注意到


314
00:11:17,386 --> 00:11:18,666
在表格的顶端处的服务


315
00:11:18,666 --> 00:11:21,636
仅仅在使用期间授权下工作


316
00:11:24,156 --> 00:11:25,416
而底端的服务


317
00:11:26,736 --> 00:11:28,106
能够在你的 App 


318
00:11:28,136 --> 00:11:29,166
不在使用期间


319
00:11:29,166 --> 00:11:32,046
仍能传递位置相关的信息


320
00:11:34,576 --> 00:11:35,866
所以 在 iOS 12 里 


321
00:11:35,866 --> 00:11:37,246
只拥有在使用期间授权的 App


322
00:11:37,246 --> 00:11:38,506
无法使用它们


323
00:11:38,506 --> 00:11:41,146
但是 如果底部的这些服务


324
00:11:41,146 --> 00:11:42,326
可以在


325
00:11:42,326 --> 00:11:43,216
一个除非在使用期间


326
00:11:43,216 --> 00:11:44,486
否则不会传递相关信息


327
00:11:44,486 --> 00:11:45,956
的模式里使用呢


328
00:11:46,936 --> 00:11:47,756
在这个例子中


329
00:11:47,756 --> 00:11:48,986
他们是和在使用期间授权相配的


330
00:11:48,986 --> 00:11:50,816
我们可以不用


331
00:11:50,816 --> 00:11:52,536
想太多关于


332
00:11:52,536 --> 00:11:55,426
你的 App 被允许使用什么服务


333
00:11:55,426 --> 00:11:56,656
而开始更多的思考


334
00:11:56,656 --> 00:11:58,896
它是否在使用期间


335
00:11:59,506 --> 00:12:02,716
这是我们在 iOS 13 里做的事


336
00:12:03,606 --> 00:12:04,866
现在这里每一个绿色的对勾


337
00:12:04,866 --> 00:12:07,556
都代表着对


338
00:12:07,626 --> 00:12:09,236
我们所有 API 的完全访问权限


339
00:12:09,236 --> 00:12:10,446
包括重要位置变更监测


340
00:12:10,446 --> 00:12:12,696
区域监测


341
00:12:13,266 --> 00:12:14,636
访问监测


342
00:12:15,946 --> 00:12:17,486
如果你的 App 在使用中


343
00:12:17,486 --> 00:12:18,466
它将接收到重要位置变更


344
00:12:18,466 --> 00:12:20,296
进入区域


345
00:12:20,296 --> 00:12:23,196
离开访问事件


346
00:12:23,196 --> 00:12:25,286
如果它不在使用中 它将不会收到


347
00:12:27,136 --> 00:12:29,646
所以 在 iOS 12 系统下 如果你知道


348
00:12:30,026 --> 00:12:31,466
你的 App 需要进行区域监测


349
00:12:31,466 --> 00:12:33,376
你可能会停下来思考


350
00:12:33,376 --> 00:12:35,066
你需要什么样的授权


351
00:12:36,476 --> 00:12:38,766
但是现在 在 iOS 13 里 你需要想得更深一些


352
00:12:40,356 --> 00:12:41,416
无论你需要做什么


353
00:12:41,416 --> 00:12:42,906
你的用户会知道你在做什么吗


354
00:12:43,826 --> 00:12:45,966
用户是否会直接参与进来


355
00:12:47,456 --> 00:12:49,286
简单来说 如果它将或可以


356
00:12:49,286 --> 00:12:50,676
在那个时候处在使用期间


357
00:12:50,676 --> 00:12:53,016
那么使用期间授权就


358
00:12:53,056 --> 00:12:58,756
能够满足你的 App 的需求


359
00:12:58,756 --> 00:13:00,796
所以 你的 App 什么时候会在使用期间呢


360
00:13:01,106 --> 00:13:04,256
好了 在这条时间线上的某个点


361
00:13:04,256 --> 00:13:05,186
你的 App 将进入前台


362
00:13:05,186 --> 00:13:07,756
从那儿开始


363
00:13:07,826 --> 00:13:09,006
直到它进入后台


364
00:13:09,006 --> 00:13:12,516
它将被认为是处在使用期间


365
00:13:12,516 --> 00:13:14,046
事实上这里有几秒钟的时间


366
00:13:14,436 --> 00:13:15,726
所以 这是一个宽限期


367
00:13:15,776 --> 00:13:16,986
这是为了能够 


368
00:13:16,986 --> 00:13:19,316
正好在用户退出 App 之前 


369
00:13:19,316 --> 00:13:21,606
发生需要地理位置的事件时


370
00:13:21,606 --> 00:13:22,926
能够支持你的 App 


371
00:13:22,926 --> 00:13:24,776
但这个时间非常短


372
00:13:24,776 --> 00:13:29,106
所以请不要过于的依赖它


373
00:13:29,446 --> 00:13:30,926
然后你的 App 将会保持


374
00:13:30,956 --> 00:13:32,296
不在使用期间 直到下一次


375
00:13:32,376 --> 00:13:33,506
进入前台 然后


376
00:13:33,506 --> 00:13:34,006
重复这个过程


377
00:13:39,176 --> 00:13:42,656
好的 所以 如果你想要在 Xcode 里


378
00:13:42,706 --> 00:13:44,956
你的 App 支持的后台模式


379
00:13:44,956 --> 00:13:46,976
列表中添加位置更新


380
00:13:47,766 --> 00:13:49,026
那么你同样可以进入这个场景


381
00:13:49,026 --> 00:13:51,236
当你的 App 


382
00:13:51,236 --> 00:13:52,786
进入前台然后


383
00:13:53,996 --> 00:13:55,646
处在使用中


384
00:13:55,646 --> 00:13:57,166
你开始更新你的位置


385
00:13:57,166 --> 00:13:58,566
然后 你在位置管理中


386
00:13:58,566 --> 00:14:00,316
将 allowBackgroundLocationUpdates 


387
00:14:00,316 --> 00:14:01,726
的属性设为真


388
00:14:02,886 --> 00:14:03,956
然后当你的 App 进入


389
00:14:03,956 --> 00:14:05,886
后台 那个蓝色的 


390
00:14:05,886 --> 00:14:08,386
后台指示器将显示


391
00:14:08,386 --> 00:14:10,256
然后你的 App 在这段时间内


392
00:14:10,256 --> 00:14:11,396
将在后台继续


393
00:14:11,396 --> 00:14:12,986
保持处在使用中 直到它


394
00:14:12,986 --> 00:14:14,336
再一次进入前台


395
00:14:16,636 --> 00:14:17,856
然后 在某个时刻你将


396
00:14:17,856 --> 00:14:18,976
allowBackgroudLocationUpdates 属性


397
00:14:18,976 --> 00:14:20,196
设为假


398
00:14:20,196 --> 00:14:21,326
这就能回到


399
00:14:21,326 --> 00:14:22,776
常规行为 当下次你的 App 


400
00:14:22,776 --> 00:14:24,566
离开前台时


401
00:14:24,656 --> 00:14:27,000
它将不再在使用状态


402
00:14:31,516 --> 00:14:32,966
好了 那么复杂功能呢


403
00:14:33,576 --> 00:14:36,106
在现有表盘上的复杂功能


404
00:14:36,106 --> 00:14:37,336
事实上一直在使用中


405
00:14:37,886 --> 00:14:42,176
注意 就像是


406
00:14:42,176 --> 00:14:43,676
后台使用指示器的


407
00:14:43,676 --> 00:14:46,036
宽限时间一样 这是深绿色


408
00:14:46,036 --> 00:14:48,826
你的 App 被认为


409
00:14:48,826 --> 00:14:51,756
不足以在这个状态下请求授权


410
00:14:51,956 --> 00:14:55,766
或者做除了接收位置信息之外的任何事


411
00:14:56,666 --> 00:14:58,066
所以 如果你在做一个


412
00:14:58,066 --> 00:14:59,326
复杂功能 你的 App 可能


413
00:14:59,326 --> 00:15:00,516
不需要始终授权


414
00:15:00,516 --> 00:15:02,266
但是你将需要


415
00:15:02,266 --> 00:15:03,466
向你的 App 上下文


416
00:15:03,466 --> 00:15:05,000
寻求授权


417
00:15:07,076 --> 00:15:08,896
还有一个例子 我想要


418
00:15:08,896 --> 00:15:10,116
提醒大家注意


419
00:15:10,116 --> 00:15:11,896
因为这种方式可以


420
00:15:12,026 --> 00:15:13,246
提供很多附加功能


421
00:15:13,246 --> 00:15:15,036
给使用期间授权


422
00:15:15,036 --> 00:15:17,336
你可以直接让用户参与进来


423
00:15:17,676 --> 00:15:19,636
所以 如果你可以这样做 那么


424
00:15:19,636 --> 00:15:21,206
你可以通过 UNLocationNotificationTrigger
 
00:15:21,256 --> 00:15:23,256
创建一个本地通知


425
00:15:23,256 --> 00:15:27,000
标记一个兴趣区域


426
00:15:28,346 --> 00:15:30,216
然后 当用户进入那个区域


427
00:15:30,216 --> 00:15:32,496
那个通知将会成为相关内容


428
00:15:32,496 --> 00:15:34,246
然后向他们显示出来


429
00:15:35,786 --> 00:15:37,066
注意 在这个时候


430
00:15:37,066 --> 00:15:38,106
到了这个时候 你的 App


431
00:15:38,106 --> 00:15:39,396
还没有接收到任何


432
00:15:39,396 --> 00:15:40,556
关于位置 用户地点的信息


433
00:15:40,556 --> 00:15:43,086
这个通知显示或不显示


434
00:15:43,086 --> 00:15:46,346
你都不会被告知


435
00:15:47,626 --> 00:15:49,146
但是 在这个时候 如果


436
00:15:49,146 --> 00:15:51,006
点击了那个通知


437
00:15:51,006 --> 00:15:52,656
然后启动了你的 App


438
00:15:52,656 --> 00:15:54,896
那么你的 App 会在前台


439
00:15:55,026 --> 00:15:56,376
这是在使用中的一般情况


440
00:15:56,616 --> 00:15:57,776
就在使用场景里


441
00:15:57,776 --> 00:16:01,446
在你需要的地方


442
00:16:02,026 --> 00:16:03,416
好了 所以记住 所有的


443
00:16:03,416 --> 00:16:05,246
Core Location API 服务 现在都


444
00:16:05,246 --> 00:16:07,076
对所有客户开放


445
00:16:07,076 --> 00:16:09,086
至少在一些情境下开放


446
00:16:09,086 --> 00:16:10,606
你可以通过使用本地通知


447
00:16:10,676 --> 00:16:12,366
或者蓝色的后台使用指示器 


448
00:16:12,366 --> 00:16:14,416
视情况而定 去获得


449
00:16:14,416 --> 00:16:15,596
或者停留在这些情境下


450
00:16:15,596 --> 00:16:19,226
这意味着
                
00:16:19,226 --> 00:16:20,076
现在 你需要


451
00:16:20,076 --> 00:16:21,546
始终授权的情况仅限于


452
00:16:21,546 --> 00:16:23,236
那些用户不能或不想


453
00:16:23,236 --> 00:16:24,966
在你的 App 之前


454
00:16:25,036 --> 00:16:27,000
参与自动化功能


455
00:16:29,526 --> 00:16:30,556
我们希望这会帮助你


456
00:16:30,556 --> 00:16:31,916
将授权故事变得


457
00:16:31,916 --> 00:16:35,206
对其他情况下的用户更友好


458
00:16:39,126 --> 00:16:41,186
好了 还有另一种方式


459
00:16:41,386 --> 00:16:42,436
可以做暂时授权


460
00:16:42,436 --> 00:16:43,786
在使用期间授权


461
00:16:43,786 --> 00:16:45,506
冷却的时候


462
00:16:45,646 --> 00:16:47,086
这时我们允许暂时授权


463
00:16:48,026 --> 00:16:49,456
所以 这就是这个弹窗里的


464
00:16:49,456 --> 00:16:50,606
中间按钮的功能


465
00:16:55,456 --> 00:16:56,746
让我们来看看


466
00:16:56,746 --> 00:16:59,026
你的 App 可以处于的


467
00:16:59,026 --> 00:17:00,056
所有授权情况


468
00:17:00,056 --> 00:17:01,226
以及一些你能


469
00:17:01,356 --> 00:17:02,626
在 VR 弹窗系统之间做的转换


470
00:17:02,626 --> 00:17:04,616
然后我们能够发现


471
00:17:04,616 --> 00:17:06,406
这个暂时的授权会适用在


472
00:17:06,406 --> 00:17:07,836
哪些情况


473
00:17:08,506 --> 00:17:11,996
从它在 iOS 12 里的


474
00:17:11,996 --> 00:17:13,455
运行的方法开始 当你的 App


475
00:17:13,715 --> 00:17:15,486
第一次进入前台


476
00:17:15,486 --> 00:17:17,965
它的状态是 .notDetermined


477
00:17:17,965 --> 00:17:18,705
这意味着它不能进行访问


478
00:17:18,705 --> 00:17:20,455
顺便说一句


479
00:17:20,455 --> 00:17:21,806
状态越长久将越靠近两侧


480
00:17:21,806 --> 00:17:24,086
授权越高级将


481
00:17:24,165 --> 00:17:25,465
越靠近顶部


482
00:17:25,465 --> 00:17:27,306
所以 .notDetermined 在底部


483
00:17:27,526 --> 00:17:29,216
你的 App 不能访问位置


484
00:17:29,446 --> 00:17:32,446
用户的位置 但是它不是被拒绝的


485
00:17:33,246 --> 00:17:34,206
它是没有被决定的


486
00:17:35,796 --> 00:17:36,836
所以 事实上 在一个


487
00:17:36,836 --> 00:17:38,066
没有被决定的状态下 你的 App 可以


488
00:17:38,066 --> 00:17:39,566
请求一个授权弹窗


489
00:17:40,276 --> 00:17:41,366
当它这样做


490
00:17:41,366 --> 00:17:42,806
它可能会被拒绝 然后它将


491
00:17:42,806 --> 00:17:44,206
不能再次弹出


492
00:17:44,516 --> 00:17:45,926
但是用户也可以


493
00:17:45,926 --> 00:17:49,596
进行使用期间授权


494
00:17:50,086 --> 00:17:52,136
如果你这时


495
00:17:52,136 --> 00:17:53,226
请求一个始终授权


496
00:17:53,226 --> 00:17:56,096
你可以获得一个始终授权 或者你可以


497
00:17:56,096 --> 00:17:57,076
直接在最开始的时候


498
00:17:57,076 --> 00:17:58,166
请求始终授权


499
00:17:59,316 --> 00:18:00,776
所以 那是 iOS 12


500
00:18:01,886 --> 00:18:06,746
现在 在 iOS 13 中 我们已经看到


501
00:18:07,686 --> 00:18:09,336
在通往始终授权的路上


502
00:18:09,336 --> 00:18:11,306
多了一个暂时的状态


503
00:18:11,506 --> 00:18:12,726
叫做临时始终授权


504
00:18:12,726 --> 00:18:14,356
它的功能和


505
00:18:14,356 --> 00:18:15,826
始终授权很类似


506
00:18:16,526 --> 00:18:17,956
但是通过它 过渡回到


507
00:18:18,136 --> 00:18:19,396
在使用期间授权


508
00:18:19,396 --> 00:18:20,126
也是可能的


509
00:18:20,126 --> 00:18:23,916
暂时授权的


510
00:18:23,916 --> 00:18:24,926
工作原理非常相似


511
00:18:25,736 --> 00:18:27,586
这是一个表现得很像


512
00:18:27,856 --> 00:18:29,166
在使用期间授权的临时状态


513
00:18:29,166 --> 00:18:30,866
但会回到


514
00:18:30,866 --> 00:18:32,576
尚未决定的状态


515
00:18:33,186 --> 00:18:35,536
只要你的 App 


516
00:18:35,536 --> 00:18:37,000
退出使用


517
00:18:42,336 --> 00:18:43,886
好了 所以暂时的 这个在使用期间授权


518
00:18:43,886 --> 00:18:45,906
是暂时的


519
00:18:46,666 --> 00:18:50,726
然而在其他方面 它和在使用期间授权的


520
00:18:50,726 --> 00:18:51,916
作用类似


521
00:18:52,056 --> 00:18:54,126
所以 你的位置管理 Delegate


522
00:18:54,126 --> 00:18:55,096
在将授权修改为


523
00:18:55,096 --> 00:18:56,626
在使用期间授权时


524
00:18:56,626 --> 00:18:58,996
将会接收一个回调函数


525
00:18:58,996 --> 00:19:01,986
然后 在之后又会收到回到此前状态


526
00:19:02,506 --> 00:19:05,226
但重点是 这发生之后


527
00:19:05,376 --> 00:19:07,036
你的 App 可以也应该


528
00:19:07,036 --> 00:19:08,416
在它下一次需要的时候


529
00:19:08,416 --> 00:19:09,416
再次请求授权


530
00:19:14,936 --> 00:19:18,036
要记住的主要事情是暂时的


531
00:19:18,036 --> 00:19:18,776
使用期间授权


532
00:19:18,776 --> 00:19:20,566
是和你的 App 在什么时候使用


533
00:19:20,566 --> 00:19:22,586
联系紧密的


534
00:19:23,236 --> 00:19:24,836
同时 因为你可以再次请求它


535
00:19:24,836 --> 00:19:26,376
它将与你的 App 流中


536
00:19:26,416 --> 00:19:27,766
确实需要访问位置的部分


537
00:19:27,766 --> 00:19:29,596
紧密相连


538
00:19:31,066 --> 00:19:32,986
所以 让我们从这个角度


539
00:19:33,186 --> 00:19:35,426
看看这个绿色使用图表


540
00:19:36,006 --> 00:19:38,916
所以 这里是最基本的例子


541
00:19:39,076 --> 00:19:40,006
但是我们将让它更基础


542
00:19:40,006 --> 00:19:41,446
通过将第二个使用区域


543
00:19:41,446 --> 00:19:43,686
拖到与第一个相连


544
00:19:45,316 --> 00:19:46,356
现在 当你的 App 


545
00:19:46,436 --> 00:19:48,546
在前台处于使用中 


546
00:19:48,546 --> 00:19:50,966
我们假设用户以某种交互方式


547
00:19:51,326 --> 00:19:52,426
让你知道你的 App


548
00:19:52,426 --> 00:19:52,976
将需要获得授权


549
00:19:53,446 --> 00:19:55,576
所以你在那个时间点


550
00:19:55,606 --> 00:19:56,086
请求授权


551
00:19:56,576 --> 00:19:58,986
用户进行了授权 


552
00:19:58,986 --> 00:20:00,406
仅允许一次


553
00:20:00,406 --> 00:20:01,996
用户进行了一个暂时的在使用期间授权


554
00:20:03,326 --> 00:20:04,516
这种情况下 你的 App 将


555
00:20:04,516 --> 00:20:05,776
获得在使用期间授权


556
00:20:06,296 --> 00:20:07,296
在剩余的所有前台时间内持续


557
00:20:07,296 --> 00:20:09,226
穿过那段


558
00:20:09,226 --> 00:20:10,506
短暂的进入后台的时间


559
00:20:10,906 --> 00:20:11,776
然后通过下一个


560
00:20:11,776 --> 00:20:13,436
前台时段直到


561
00:20:13,436 --> 00:20:14,756
它在最后完全的


562
00:20:14,756 --> 00:20:16,500
进入后台运行


563
00:20:21,486 --> 00:20:22,306
好了 那么如果


564
00:20:22,306 --> 00:20:23,976
中间的间隔再大一些


565
00:20:23,976 --> 00:20:24,996
你的 App 不在使用状态了


566
00:20:25,026 --> 00:20:26,846
会发生什么呢


567
00:20:28,186 --> 00:20:30,456
用户进行交互


568
00:20:31,236 --> 00:20:32,816
你请求授权


569
00:20:32,816 --> 00:20:34,986
你收到了暂时的


570
00:20:34,986 --> 00:20:36,656
使用期间授权 但是当你


571
00:20:36,656 --> 00:20:38,616
进入后台时 它将失效


572
00:20:39,146 --> 00:20:42,006
所以 你可能在想


573
00:20:42,006 --> 00:20:44,116
好了 我该在


574
00:20:44,316 --> 00:20:45,836
第二个使用阶段的什么时候


575
00:20:45,886 --> 00:20:47,556
申请授权呢


576
00:20:47,776 --> 00:20:48,606
我应该在进入前台时


577
00:20:48,606 --> 00:20:49,396
立刻申请吗


578
00:20:50,916 --> 00:20:51,696
不 你不需要


579
00:20:51,696 --> 00:20:53,586
你需要记住


580
00:20:53,746 --> 00:20:54,946
是什么在一开始


581
00:20:54,946 --> 00:20:56,546
促使你请求授权的


582
00:20:57,586 --> 00:20:58,836
例如 可能用户希望


583
00:20:58,836 --> 00:21:00,456
你能按他们的实时位置


584
00:21:00,456 --> 00:21:01,366
更新视图


585
00:21:01,366 --> 00:21:02,946
或者为他们发送的消息


586
00:21:02,946 --> 00:21:03,886
添加地理位置


587
00:21:04,476 --> 00:21:08,146
如果他们在第二个使用阶段


588
00:21:08,216 --> 00:21:09,576
再一次这样做 然后 


589
00:21:09,576 --> 00:21:11,176
你应该为了支持这些要求


590
00:21:11,176 --> 00:21:12,726
而请求授权


591
00:21:12,896 --> 00:21:14,446
如果他们不需要 就不要请求授权


592
00:21:15,306 --> 00:21:17,196
关键在于 如果用户


593
00:21:17,196 --> 00:21:18,866
不希望你在上一次后继续


594
00:21:18,866 --> 00:21:20,106
使用他们的位置


595
00:21:20,106 --> 00:21:21,926
那么不要在你进入前台的时候


596
00:21:21,926 --> 00:21:22,706
就立刻请求授权


597
00:21:24,956 --> 00:21:28,716
好了 但是有时候 可能你在


598
00:21:28,716 --> 00:21:31,366
追踪用户的跑步情况 或者 


599
00:21:31,366 --> 00:21:32,716
帮助他们导航 那么用户将


600
00:21:32,716 --> 00:21:34,456
希望你继续访问


601
00:21:34,456 --> 00:21:37,646
他们的位置


602
00:21:37,756 --> 00:21:40,556
即便在后台运行期间


603
00:21:41,176 --> 00:21:41,766
好了 在那个例子中


604
00:21:41,766 --> 00:21:43,106
我们可能处在这种情况下


605
00:21:43,106 --> 00:21:46,086
在开始运行之后


606
00:21:46,136 --> 00:21:48,126
你请求授权以记录它


607
00:21:48,126 --> 00:21:49,816
然后你接收到


608
00:21:49,816 --> 00:21:50,816
暂时的使用期间授权


609
00:21:50,816 --> 00:21:53,616
你将开始更新位置


610
00:21:53,616 --> 00:21:54,406
你将 allowBackgroundLocationUpdates


611
00:21:54,406 --> 00:21:56,126
设置为真


612
00:21:56,696 --> 00:21:57,956
所以 当你的 App 进入后台


613
00:21:57,956 --> 00:22:01,446
那个蓝色的后台使用指示器会出现


614
00:22:01,446 --> 00:22:03,116
你的 App 将持续保持使用


615
00:22:03,116 --> 00:22:04,576
因此将继续


616
00:22:04,576 --> 00:22:06,816
不被打扰的在后台期间


617
00:22:06,866 --> 00:22:08,246
拥有在使用期间授权


618
00:22:09,876 --> 00:22:11,166
然后 当再次回到


619
00:22:11,216 --> 00:22:13,146
前台使用期间 


620
00:22:13,146 --> 00:22:14,666
结束跑步或者导航


621
00:22:14,736 --> 00:22:16,206
再一次设置 


622
00:22:16,206 --> 00:22:17,886
allowBackgroundLocationUpdates 为假


623
00:22:17,886 --> 00:22:19,276
我们就能回到一般情况


624
00:22:19,876 --> 00:22:22,846
好了 我想提出一个


625
00:22:22,846 --> 00:22:24,376
在你进入前台时立刻


626
00:22:24,376 --> 00:22:26,486
请求授权的一个有效用例


627
00:22:26,486 --> 00:22:28,326
那就是 如果用户


628
00:22:28,326 --> 00:22:29,806
希望你的 App 永久拥有授权


629
00:22:29,806 --> 00:22:31,306
永久的跟随他们的位置一起


630
00:22:31,396 --> 00:22:32,506
更新地图


631
00:22:32,506 --> 00:22:34,096
但是只能在


632
00:22:34,096 --> 00:22:35,296
他们直接要求的情况下


633
00:22:36,256 --> 00:22:37,276
在那些例子中


634
00:22:37,276 --> 00:22:38,376
当你进入前台 请求授权


635
00:22:38,376 --> 00:22:40,046
但是你不对


636
00:22:40,046 --> 00:22:41,126
allowBackgroundLcoationUpdates 进行设置


637
00:22:41,126 --> 00:22:42,876
那么你不会得到


638
00:22:42,876 --> 00:22:44,256
后台使用指示器


639
00:22:44,256 --> 00:22:45,276
你的授权


640
00:22:45,276 --> 00:22:46,686
将在你进入后台的时候失效


641
00:22:47,206 --> 00:22:49,766
然后你再次


642
00:22:49,816 --> 00:22:51,336
到达前台 重复


643
00:22:52,966 --> 00:22:55,596
现在 认真的问你自己


644
00:22:55,596 --> 00:22:56,726
用户是不是真的


645
00:22:56,726 --> 00:22:57,266
希望你这样做


646
00:22:57,336 --> 00:22:58,006
有可能会希望


647
00:22:58,536 --> 00:22:59,986
在这种情况下 你可能


648
00:22:59,986 --> 00:23:02,156
早晚会获得永久的


649
00:23:02,156 --> 00:23:03,936
使用期间授权


650
00:23:03,936 --> 00:23:05,496
但也可以


651
00:23:05,496 --> 00:23:07,276
在一段时间内继续这样询问


652
00:23:07,276 --> 00:23:08,436
在用户确认


653
00:23:08,436 --> 00:23:10,586
他们是否希望授权之前


654
00:23:15,136 --> 00:23:16,686
好了 所以我们已经看到了


655
00:23:16,686 --> 00:23:18,106
使用期间授权现在可以处理


656
00:23:18,106 --> 00:23:19,576
一些类似区域监测的功能


657
00:23:19,576 --> 00:23:23,356
这个暂时的授权


658
00:23:23,356 --> 00:23:25,836
甚至可以根据具体情况


659
00:23:25,836 --> 00:23:27,686
来提供支持


660
00:23:27,686 --> 00:23:28,866
我答应过向你们介绍一些


661
00:23:28,896 --> 00:23:29,766
修改过的地理测距 API


662
00:23:30,546 --> 00:23:31,656
所以现在我想有请我的同事


663
00:23:31,656 --> 00:23:33,086
Andre Guzzo 上台来


664
00:23:33,086 --> 00:23:34,976
向你们介绍它 Andre


665
00:23:35,516 --> 00:23:41,176
[掌声]


666
00:23:41,676 --> 00:23:42,426
>> 大家好


667
00:23:42,726 --> 00:23:44,406
我叫 Andre Guzzo


668
00:23:44,596 --> 00:23:46,376
我是 Core Location 团队里的


669
00:23:46,376 --> 00:23:49,286
一名工程师


670
00:23:49,286 --> 00:23:50,706
今天在这里我要向你们


671
00:23:50,706 --> 00:23:51,496
介绍地理测距


672
00:23:52,396 --> 00:23:54,886
我们将看到在 iOS 13 里


673
00:23:54,886 --> 00:23:57,776
API 发生了什么变化
 
00:23:57,776 --> 00:24:01,466
我将向你介绍一个简单的


674
00:24:01,516 --> 00:24:03,256
关于如何使用地理测距以及


675
00:24:03,256 --> 00:24:04,786
在不需要始终授权的情况下


676
00:24:04,786 --> 00:24:08,796
向你的用户提供极佳的位置体验的例子


677
00:24:10,576 --> 00:24:12,796
让我们从回顾


678
00:24:12,796 --> 00:24:13,746
什么是地理测距开始


679
00:24:13,746 --> 00:24:14,896
什么是地理测距


680
00:24:15,596 --> 00:24:18,456
我们在 iOS 7 里介绍它为


681
00:24:18,456 --> 00:24:19,626
区域监测 API 的扩展


682
00:24:19,626 --> 00:24:23,476
一种向你的用户


683
00:24:23,476 --> 00:24:25,476
提供的新维度下的


684
00:24:25,476 --> 00:24:28,016
位置感知的体验


685
00:24:30,146 --> 00:24:31,056
这是区域监测 API 的一部分


686
00:24:31,056 --> 00:24:33,626
因为你希望通过


687
00:24:34,656 --> 00:24:37,596
使用区域监测来启动测距


688
00:24:37,756 --> 00:24:40,066
由于地理测距的简介中要求 


689
00:24:40,066 --> 00:24:41,376
拥有始终授权
 
00:24:41,376 --> 00:24:43,276
你希望确定 


690
00:24:43,276 --> 00:24:45,886
在你开始测距之前 你所在的位置


691
00:24:47,156 --> 00:24:48,976
是可见的


692
00:24:48,976 --> 00:24:52,746
这样不浪费资源


693
00:24:52,746 --> 00:24:55,226
现在在 iOS 13 里  


694
00:24:55,226 --> 00:24:57,186
在使用期间授权可以作为替代


695
00:24:57,736 --> 00:25:02,046
所以 就像我说的 我们将


696
00:25:02,046 --> 00:25:03,706
地理测距作为区域监测的


697
00:25:03,706 --> 00:25:04,666
扩展进行的介绍


698
00:25:04,786 --> 00:25:06,566
所以 为了展示


699
00:25:06,566 --> 00:25:08,776
一个被信标


700
00:25:08,776 --> 00:25:11,336
定义的区域 我们


701
00:25:11,336 --> 00:25:14,616
将 CLRegion 对象扩展成为


702
00:25:14,616 --> 00:25:16,486
CLBeaconRegion


703
00:25:16,486 --> 00:25:17,866
在其他所有属性中


704
00:25:17,866 --> 00:25:19,646
我们包括了


705
00:25:19,646 --> 00:25:22,586
真正定义信标的属性 


706
00:25:22,586 --> 00:25:23,836
他们是 uuid major 和 minor


707
00:25:25,786 --> 00:25:28,246
你可以在 iOS 12 以及之前发布的版本中


708
00:25:28,246 --> 00:25:30,616
将这个数据的类型传递给


709
00:25:30,616 --> 00:25:35,346
地理测距 API


710
00:25:35,346 --> 00:25:36,836
但是 让我们关注这个


711
00:25:36,836 --> 00:25:39,216
它准确的定义了一个信标


712
00:25:39,466 --> 00:25:42,476
你可能在多个信标上发现了相同的配置


713
00:25:42,476 --> 00:25:43,706
但是它会看起来像


714
00:25:43,706 --> 00:25:44,686
一个更大的信标


715
00:25:45,456 --> 00:25:47,866
所以 当我通过所有的元素


716
00:25:47,866 --> 00:25:49,756
来定义一个区域时


717
00:25:49,756 --> 00:25:50,356
事实上我在用


718
00:25:50,356 --> 00:25:51,956
符合条件的信标


719
00:25:51,956 --> 00:25:54,686
来定义一个区域


720
00:25:54,686 --> 00:25:56,346
但是在地理测距的例子中


721
00:25:56,346 --> 00:25:58,836
我们可以忽略 minor 和 major 的数值


722
00:25:58,836 --> 00:26:01,616
这等同于使用一个通配符


723
00:26:01,746 --> 00:26:03,996
所以 我可以忽略 minor 数值


724
00:26:03,996 --> 00:26:05,976
现在我的区域被


725
00:26:05,976 --> 00:26:09,786
拥有同样的 uuid 和 major 数值的信标所定义


726
00:26:09,786 --> 00:26:12,246
同样的 我也可以忽略 major


727
00:26:12,246 --> 00:26:14,326
现在我将我的区域扩展到


728
00:26:14,326 --> 00:26:15,616
包括所有


729
00:26:15,616 --> 00:26:17,876
拥有同样的 uuid 的信标


730
00:26:17,876 --> 00:26:20,706
但是不同的 major 和 minor 数值


731
00:26:21,736 --> 00:26:24,076
这是为什么在 iOS 13 中


732
00:26:24,076 --> 00:26:29,776
我们为了呈现筛选条件


733
00:26:29,776 --> 00:26:32,596
而引入了 IdentityConstraint


734
00:26:32,596 --> 00:26:35,806
它告诉我什么是


735
00:26:35,806 --> 00:26:37,266
我感兴趣的信标


736
00:26:37,266 --> 00:26:38,436
定义我的区域


737
00:26:39,626 --> 00:26:42,506
现在 当你创建你的地理区域时


738
00:26:42,506 --> 00:26:44,536
你将使用这个


739
00:26:44,536 --> 00:26:46,556
IdentityConstraint 这个数据类型


740
00:26:47,106 --> 00:26:49,056
你之后将


741
00:26:49,056 --> 00:26:51,876
创建这个数据类型的实例


742
00:26:51,876 --> 00:26:57,116
因为访问新的区域监测 API 时


743
00:26:57,116 --> 00:26:58,556
需要这个数据类型


744
00:27:02,176 --> 00:27:04,386
我们现在通过


745
00:27:04,386 --> 00:27:07,186
举简单的例子来看看这是如何运行的


746
00:27:09,796 --> 00:27:10,876
想象我们需要


747
00:27:10,876 --> 00:27:13,946
创建一个在参观博物馆时


748
00:27:13,946 --> 00:27:15,186
可以使用的 App


749
00:27:16,246 --> 00:27:18,616
我们希望向参观者


750
00:27:18,616 --> 00:27:20,206
提供他们面前的


751
00:27:20,206 --> 00:27:21,556
作品的细节


752
00:27:22,746 --> 00:27:24,966
无需让用户


753
00:27:24,966 --> 00:27:26,756
打出一些长串的名字


754
00:27:26,756 --> 00:27:28,156
或者浏览目录


755
00:27:29,336 --> 00:27:30,956
为了达到这一点 我们将


756
00:27:30,956 --> 00:27:32,806
在展厅里


757
00:27:32,806 --> 00:27:34,756
设置我们的信标


758
00:27:35,846 --> 00:27:37,646
我们将在所有


759
00:27:37,646 --> 00:27:38,956
在博物馆里部署的信标中


760
00:27:38,956 --> 00:27:40,886
使用相同的 UUID 值


761
00:27:42,106 --> 00:27:45,516
我们将为每一个展厅


762
00:27:45,516 --> 00:27:48,366
设置一个特定的 major 值


763
00:27:48,366 --> 00:27:50,106
为每一个在展厅内特定的作品


764
00:27:50,186 --> 00:27:51,106
设置一个 minor 值


765
00:27:51,986 --> 00:27:53,986
然后 我们将需要能够


766
00:27:53,986 --> 00:27:56,176
判断参观者是否


767
00:27:56,176 --> 00:27:57,756
在其中一个展厅


768
00:27:57,756 --> 00:27:59,066
我们不希望在参观者


769
00:27:59,066 --> 00:28:00,076
在咖啡厅做其他事情的时候


770
00:28:00,076 --> 00:28:02,726
进行测距


771
00:28:02,896 --> 00:28:03,956
我们希望在我们知道


772
00:28:03,956 --> 00:28:06,556
他在某一个展厅 


773
00:28:06,556 --> 00:28:07,726
参与参观时


774
00:28:07,726 --> 00:28:08,816
再对信标进行测距


775
00:28:08,816 --> 00:28:11,176
在那个时候 我们需要决定


776
00:28:11,176 --> 00:28:12,566
什么是距离参观者


777
00:28:12,566 --> 00:28:15,336
最近的作品


778
00:28:15,336 --> 00:28:17,026
然后提供它的详细信息


779
00:28:19,276 --> 00:28:22,506
最终 所有这些都需要


780
00:28:22,506 --> 00:28:25,176
我们的 App 在使用期间


781
00:28:25,736 --> 00:28:28,626
我们能有把握的假设


782
00:28:28,626 --> 00:28:30,416
因为这是参观者在博物馆里的向导


783
00:28:30,416 --> 00:28:31,496
参观者将已经


784
00:28:31,496 --> 00:28:33,396
在使用我们的 App 了


785
00:28:33,396 --> 00:28:35,476
但是如果我们想要


786
00:28:35,476 --> 00:28:37,616
提醒参观者注意我们的 App


787
00:28:37,616 --> 00:28:39,266
我们可以使用一个本地通知


788
00:28:39,626 --> 00:28:44,076
当参观者亲身到达了博物馆时


789
00:28:44,076 --> 00:28:45,366
进行触发


790
00:28:45,366 --> 00:28:47,156
这样他可以选择


791
00:28:47,426 --> 00:28:50,436
点击 启动我们的 App


792
00:28:52,526 --> 00:28:54,676
所以 让我们看看我们的 App 会是什么样子


793
00:28:55,016 --> 00:28:56,826
这张图呈现了


794
00:28:56,826 --> 00:28:59,466
我们的 App 在使用期间的状态


795
00:29:00,486 --> 00:29:01,876
我们将监控


796
00:29:01,876 --> 00:29:03,626
被信标定义的区域 然后


797
00:29:03,786 --> 00:29:06,126
做出进入和退出事件的反应


798
00:29:06,126 --> 00:29:07,906
当我们在测距时


799
00:29:07,906 --> 00:29:09,766
我们将接收到


800
00:29:09,766 --> 00:29:11,546
临近的信标的更新


801
00:29:12,006 --> 00:29:17,026
让我们关注第一阶段


802
00:29:17,026 --> 00:29:19,116
我们如何定义


803
00:29:19,116 --> 00:29:20,386
信标定义的区域


804
00:29:20,996 --> 00:29:22,196
就像我说的 我们将


805
00:29:22,196 --> 00:29:23,906
在所有的展厅布置信标


806
00:29:23,906 --> 00:29:25,806
我们将在所有的信标上


807
00:29:25,806 --> 00:29:27,256
使用相同的 UUID值


808
00:29:27,256 --> 00:29:29,316
对于所有的展厅使用相同的 Major 值


809
00:29:29,716 --> 00:29:31,626
对特定的对象使用


810
00:29:31,626 --> 00:29:32,636
相同的 Minor 值


811
00:29:33,656 --> 00:29:35,356
由于我们对


812
00:29:35,356 --> 00:29:36,756
参观者什么时候进入


813
00:29:36,756 --> 00:29:38,956
任何一间展厅有兴趣


814
00:29:38,956 --> 00:29:40,936
我们将不考虑 Major 和 Minor


815
00:29:40,936 --> 00:29:42,866
在创建区域时


816
00:29:42,866 --> 00:29:46,816
仅考虑 UUID


817
00:29:47,026 --> 00:29:49,426
我们来看看这在程序里是什么样子


818
00:29:49,426 --> 00:29:52,506
首先 我们需要保证


819
00:29:52,506 --> 00:29:54,566
我们有使用期间授权


820
00:29:56,006 --> 00:29:58,546
然后我们将通过仅提供 UUID


821
00:29:58,546 --> 00:30:02,106
来建立我们的信标约束


822
00:30:03,586 --> 00:30:05,656
我们可以将约束作为参数


823
00:30:05,736 --> 00:30:07,616
来给我们的地理测距


824
00:30:07,616 --> 00:30:09,596
创建一个新 API


825
00:30:09,596 --> 00:30:11,000
我们可以开始监测


826
00:30:14,106 --> 00:30:15,636
在这个时候 我们可以明确


827
00:30:15,636 --> 00:30:17,276
什么时候参观者是在展厅内


828
00:30:17,276 --> 00:30:20,476
什么时候在展厅外


829
00:30:20,896 --> 00:30:22,946
所以我们只需要


830
00:30:22,946 --> 00:30:25,176
响应状态变化


831
00:30:25,306 --> 00:30:27,536
当参观者进入其中一个展厅时


832
00:30:27,536 --> 00:30:29,126
我们开始测距


833
00:30:29,126 --> 00:30:32,406
当他离开其中一个展厅时


834
00:30:32,406 --> 00:30:34,796
要停止测距


835
00:30:35,296 --> 00:30:39,176
我们可以通过定义代理的方法


836
00:30:39,176 --> 00:30:42,796
达到这个效果


837
00:30:42,796 --> 00:30:44,746
在代理方法中 我们将依据状态


838
00:30:44,746 --> 00:30:46,166
做出反应


839
00:30:46,166 --> 00:30:48,416
如果我们在里面 我们将开始测距


840
00:30:48,416 --> 00:30:50,576
如果我们在外面 我们将停止测距


841
00:30:51,076 --> 00:30:52,936
就像你看到的 我们可以提供


842
00:30:52,936 --> 00:30:55,066
我们刚才介绍的信标约束


843
00:30:55,156 --> 00:30:57,066
使你能在区域内


844
00:30:57,066 --> 00:30:59,000
进行查找


845
00:31:00,046 --> 00:31:01,016
注意在你第一次启动监测的时候


846
00:31:01,016 --> 00:31:02,846
这个代理方法将被调用


847
00:31:02,846 --> 00:31:04,876
为了了解你的


848
00:31:04,876 --> 00:31:06,146
初始状态 


849
00:31:06,146 --> 00:31:10,186
所以如果参观者已经在


850
00:31:10,186 --> 00:31:11,246
其中一个展厅里


851
00:31:11,246 --> 00:31:13,876
启动你的 App 


852
00:31:13,876 --> 00:31:15,836
你的代理将被调用


853
00:31:15,836 --> 00:31:16,606
状态是在展厅内


854
00:31:16,606 --> 00:31:18,606
所以你将获得信息


855
00:31:21,656 --> 00:31:23,406
好了 现在我们知道


856
00:31:23,406 --> 00:31:25,636
如何对进入和退出展厅


857
00:31:25,636 --> 00:31:27,386
进行响应


858
00:31:27,386 --> 00:31:28,806
我们来看看当我们


859
00:31:28,806 --> 00:31:30,396
在里面 要去弄清


860
00:31:30,396 --> 00:31:32,736
究竟哪一个作品离参观者最近


861
00:31:34,846 --> 00:31:36,416
我们希望提供


862
00:31:36,416 --> 00:31:38,156
参观者面前的


863
00:31:38,156 --> 00:31:39,426
作品的信息


864
00:31:40,056 --> 00:31:41,526
我们想知道


865
00:31:41,526 --> 00:31:44,076
如果参观者进入了展厅


866
00:31:44,076 --> 00:31:47,666
什么是离他最近的作品


867
00:31:47,666 --> 00:31:49,796
我们只需要定义我们的代理方法


868
00:31:49,796 --> 00:31:51,276
它将临时的调用


869
00:31:51,686 --> 00:31:53,506
你临近的信标的


870
00:31:53,506 --> 00:31:56,316
更新状态


871
00:31:56,316 --> 00:31:57,466
你将接收到一个


872
00:31:57,466 --> 00:32:00,256
按照接近程度排列的清单


873
00:32:00,256 --> 00:32:03,256
所以 这样能非常简单的


874
00:32:03,256 --> 00:32:05,146
知道哪一个信标最近


875
00:32:05,146 --> 00:32:06,026
然后进行响应


876
00:32:08,776 --> 00:32:11,006
所以 我们看到了当我们的 App 在运行中时


877
00:32:11,006 --> 00:32:13,196
我们需要做什么


878
00:32:13,196 --> 00:32:16,506
但就像我说的


879
00:32:16,506 --> 00:32:17,976
我们可能希望在参观者一到博物馆时


880
00:32:17,976 --> 00:32:18,946
就吸引到他


881
00:32:18,946 --> 00:32:20,386
最可能的情况是 他们在一天前


882
00:32:20,386 --> 00:32:22,746
或者几天前就下载了我们的 App


883
00:32:23,796 --> 00:32:25,516
所以我们可能想要在


884
00:32:25,606 --> 00:32:27,196
当他到达博物馆内部时 提醒他


885
00:32:27,196 --> 00:32:28,396
启动我们的 App


886
00:32:28,926 --> 00:32:30,646
我们将为了这个用到 


887
00:32:30,646 --> 00:32:33,056
用户的本地通知


888
00:32:33,156 --> 00:32:34,856
它将被位置触发


889
00:32:38,176 --> 00:32:39,586
所以 我们将需要


890
00:32:39,586 --> 00:32:41,366
通过提供我们的博物馆的


891
00:32:41,366 --> 00:32:42,856
地理坐标来创建一个


892
00:32:42,856 --> 00:32:44,316
真正的地理区域


893
00:32:46,646 --> 00:32:49,316
然后 事实上我声明了


894
00:32:49,316 --> 00:32:51,066
我只对到达感兴趣


895
00:32:51,066 --> 00:32:53,506
你可能希望


896
00:32:53,506 --> 00:32:55,076
也为离开的情况


897
00:32:55,076 --> 00:32:58,016
做出反应 你也可以创建通知


898
00:32:58,346 --> 00:32:59,936
然后我们使用 


899
00:32:59,936 --> 00:33:04,066
用户通知 API 来注册我们的本地通知


900
00:33:08,286 --> 00:33:09,386
好了 所以这就是全部


901
00:33:10,696 --> 00:33:13,036
我们对什么是区域测距


902
00:33:13,036 --> 00:33:14,206
进行了简单回顾


903
00:33:14,206 --> 00:33:16,196
我们看到了在 iOS 13 里


904
00:33:16,246 --> 00:33:19,156
地理测距 API 进行了何种改变


905
00:33:19,156 --> 00:33:21,306
以及一个关于


906
00:33:21,306 --> 00:33:23,106
如何在仅有在使用期间授权的情况下


907
00:33:23,106 --> 00:33:25,066
通过使用地理测距来


908
00:33:25,066 --> 00:33:27,756
提供一个极佳的位置感知体验


909
00:33:28,266 --> 00:33:29,936
现在 交还给我的同事 Adam


910
00:33:29,936 --> 00:33:31,626
做最后的总结


911
00:33:32,516 --> 00:33:39,256
[掌声]


912
00:33:39,756 --> 00:33:40,566
>> 谢谢 Andre


913
00:33:41,026 --> 00:33:44,776
所以 什么是我们需要思考的三件事


914
00:33:45,596 --> 00:33:49,946
第一件事是 位置授权已经发生了变化


915
00:33:50,296 --> 00:33:51,466
它在以一些新的方式工作


916
00:33:51,586 --> 00:33:52,696
我们希望它能真正的 


917
00:33:52,696 --> 00:33:54,136
适用你的 App 


918
00:33:54,136 --> 00:33:55,156
以及通过


919
00:33:55,156 --> 00:33:58,986
让用户知道他们的隐私


920
00:33:58,986 --> 00:33:59,966
是被小心保护的


921
00:34:00,116 --> 00:34:02,476
来提高用户与你的 App 进行交互的信心


922
00:34:04,126 --> 00:34:05,056
这意味着我们希望你能够


923
00:34:05,056 --> 00:34:07,356
测试你的 App


924
00:34:08,065 --> 00:34:09,545
尝试仅依靠进行


925
00:34:09,545 --> 00:34:11,206
暂时授权


926
00:34:11,286 --> 00:34:12,835
暂时的使用期间授权


927
00:34:12,976 --> 00:34:15,326
它管用吗 它令人气恼吗


928
00:34:16,005 --> 00:34:17,295
你能为提高你的


929
00:34:17,576 --> 00:34:19,376
用户体验做什么


930
00:34:19,376 --> 00:34:20,306
让他们不需要在


931
00:34:20,306 --> 00:34:22,606
做好准备之前


932
00:34:22,916 --> 00:34:24,126
决定授权或者拒绝始终授权


933
00:34:24,126 --> 00:34:25,976
对他们位置的访问


934
00:34:26,516 --> 00:34:29,446
然后 本着测试的精神


935
00:34:29,485 --> 00:34:32,116
测距有了一个新的


936
00:34:32,116 --> 00:34:33,896
能帮助你使


937
00:34:34,206 --> 00:34:35,795
位置相关的体验


938
00:34:35,795 --> 00:34:37,516
变得非常好的方法


939
00:34:37,516 --> 00:34:40,496
我们今天提到了


940
00:34:40,596 --> 00:34:42,456
一个例子 它非常有助于


941
00:34:42,456 --> 00:34:45,396
研究新的测距 API


942
00:34:45,716 --> 00:34:48,000
例子很简单 正好是你需要知道的


943
00:34:51,106 --> 00:34:52,946
好了 如果你有任何问题


944
00:34:52,946 --> 00:34:54,186
我们在这周会有两个实验室


945
00:34:54,255 --> 00:34:57,466
其中一个在一个小时左右之后


946
00:34:57,466 --> 00:34:58,426
我不知道具体的时间


947
00:34:58,426 --> 00:35:01,076
有一个是今天上午 11 点到 1 点


948
00:35:01,076 --> 00:35:03,000
另一个是明天下午的 1 点到 3 点


949
00:35:04,476 --> 00:35:05,666
你已经在主题演讲


950
00:35:05,666 --> 00:35:06,816
以及 Platforms State of Union 演讲中


951
00:35:06,816 --> 00:35:08,686
听过了暂时授权


952
00:35:08,686 --> 00:35:10,326
这是第三次


953
00:35:10,376 --> 00:35:11,356
所以 如果你想听


954
00:35:11,356 --> 00:35:12,326
第四次 他们将


955
00:35:12,326 --> 00:35:13,716
在下午两点


956
00:35:13,716 --> 00:35:16,166
Designing for Privacy 中讲到


957
00:35:16,316 --> 00:35:17,606
在本周剩下的时间里


958
00:35:17,606 --> 00:35:19,186
几个有关地图的分享


959
00:35:19,186 --> 00:35:21,906
室内和室外都有


960
00:35:21,906 --> 00:35:23,106
和 Core Location 很搭配


961
00:35:23,106 --> 00:35:25,926
本场会议就不再赘述了


962
00:35:26,306 --> 00:35:27,846
最重要的事是


963
00:35:27,876 --> 00:35:29,156
在 WWDC19 享受


964
00:35:29,156 --> 00:35:32,176
本周剩下的时间


965
00:35:32,176 --> 00:35:33,976
我们期待在实验室见到你


966
00:35:34,516 --> 00:35:39,500
[掌声]

