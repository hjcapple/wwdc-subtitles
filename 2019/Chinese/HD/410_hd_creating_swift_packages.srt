1
00:00:00,516 --> 00:00:04,500
[音乐]


2
00:00:12,516 --> 00:00:17,006
[掌声]


3
00:00:17,506 --> 00:00:19,196
>> 大家好 我叫 Boris 


4
00:00:19,196 --> 00:00:20,536
是 Xcode 团队的一名成员


5
00:00:20,826 --> 00:00:22,946
欢迎来到创建 Swift 包的会议


6
00:00:23,656 --> 00:00:25,096
你们可能已经听说过 Xcode 


7
00:00:25,416 --> 00:00:27,036
对包的支持


8
00:00:27,036 --> 00:00:29,506
但今天你们将学习


9
00:00:29,576 --> 00:00:31,096
如何创建自己的包


10
00:00:35,316 --> 00:00:37,576
我们今天将主要讨论


11
00:00:37,576 --> 00:00:38,206
五件事情


12
00:00:38,906 --> 00:00:40,386
我们会了解


13
00:00:40,386 --> 00:00:41,516
如何创建自己的本地包


14
00:00:42,576 --> 00:00:44,826
然后了解如何发布它


15
00:00:46,306 --> 00:00:47,476
我们也要告诉你们一些


16
00:00:47,476 --> 00:00:49,356
关于包 Manifest API 的更多信息


17
00:00:49,356 --> 00:00:52,056
以及如何编辑包


18
00:00:52,856 --> 00:00:54,966
最后


19
00:00:54,966 --> 00:00:56,766
我将告诉你们


20
00:00:56,766 --> 00:00:57,496
有关 Swift 包管理器开源项目的信息


21
00:00:57,996 --> 00:01:02,286
我们已经举办过另一场关于包的会议


22
00:01:03,766 --> 00:01:05,796
那次会议叫做 Adopting Swift Packages


23
00:01:06,886 --> 00:01:08,896
你们也应该看看那次会议


24
00:01:09,076 --> 00:01:11,186
因为那里有相关信息


25
00:01:11,186 --> 00:01:15,036
例如如何解决包解析冲突


26
00:01:15,036 --> 00:01:18,686
会议内容还包括


27
00:01:19,016 --> 00:01:20,686
包基础知识介绍


28
00:01:20,686 --> 00:01:23,746
提供给初次接触的人


29
00:01:27,236 --> 00:01:29,036
包是与你的团队


30
00:01:29,036 --> 00:01:31,576
一起在工作区


31
00:01:31,576 --> 00:01:33,876
或与更大的开源社区


32
00:01:33,936 --> 00:01:35,746
共享代码的好方法


33
00:01:39,256 --> 00:01:42,976
我们先来看看如何创建自己的本地包


34
00:01:43,636 --> 00:01:46,896
你可以将本地包看作


35
00:01:46,896 --> 00:01:49,366
工作空间中的子项目


36
00:01:49,616 --> 00:01:53,236
它们本质上与平台无关


37
00:01:53,236 --> 00:01:55,496
因此你可以直接


38
00:01:55,496 --> 00:01:57,056
在 Apple 的所有平台上


39
00:01:57,056 --> 00:01:59,000
使用你的代码


40
00:02:00,316 --> 00:02:03,606
它们非常适合重构出可重复使用的代码


41
00:02:04,536 --> 00:02:07,636
它们没有版本化


42
00:02:07,636 --> 00:02:10,406
但是一旦你准备好了


43
00:02:09,006 --> 00:02:10,406
只需几步即可发布它们


44
00:02:10,916 --> 00:02:14,086
我们来演示一下


45
00:02:14,086 --> 00:02:16,926
如何创建自己的本地包


46
00:02:17,166 --> 00:02:18,436
在这个演示中


47
00:02:18,436 --> 00:02:19,776
我们将使用一个 App


48
00:02:19,776 --> 00:02:22,186
显示我工作地点附近几家咖啡馆的午餐菜单


49
00:02:22,526 --> 00:02:26,166
我们有 iOS 和 WatchOS 两种版本的 App


50
00:02:26,366 --> 00:02:30,016
现在这里有这个数据模型


51
00:02:30,086 --> 00:02:32,856
通过 Target Membership 在两个平台之间共享


52
00:02:33,686 --> 00:02:36,266
随着我们不断开发我们的 App


53
00:02:36,416 --> 00:02:38,746
这种方式变得有些麻烦


54
00:02:38,846 --> 00:02:41,516
所以我想把它重构成一个本地包


55
00:02:42,106 --> 00:02:44,696
第一步就是


56
00:02:44,696 --> 00:02:47,136
我们转到 File->New->Swift Package


57
00:02:47,646 --> 00:02:52,206
把这个包命名为 FoodNStuff


58
00:02:52,206 --> 00:02:57,966
我们将它添加到现有项目并添加到根管理组中


59
00:02:58,396 --> 00:03:00,436
然后单击 Create


60
00:03:01,236 --> 00:03:04,776
现在 Xcode 为我们创建了包的基本结构


61
00:03:04,926 --> 00:03:06,666
包括 Readme


62
00:03:06,666 --> 00:03:10,366
Package.swift Manifest 文件以及
Sources 和 Tests 文件夹


63
00:03:12,656 --> 00:03:15,646
我们从 App 中


64
00:03:15,646 --> 00:03:17,476
找到数据模型代码


65
00:03:17,996 --> 00:03:19,386
然后将其拖入包中


66
00:03:19,546 --> 00:03:21,016
现在我们要将此代码关联到


67
00:03:21,016 --> 00:03:21,786
我们的 App


68
00:03:22,296 --> 00:03:25,886
让我们快速浏览 Manifest 文件


69
00:03:26,366 --> 00:03:27,646
它描述了如何构建包


70
00:03:27,826 --> 00:03:30,606
还有一个名为 Products 的部分


71
00:03:30,606 --> 00:03:31,116
在这儿我们定义了一个库


72
00:03:31,846 --> 00:03:33,736
我们可以把这个库和 App 关联起来


73
00:03:33,966 --> 00:03:36,186
我们将在之后的演讲中


74
00:03:36,186 --> 00:03:37,346
详细介绍


75
00:03:37,346 --> 00:03:38,466
Manifest 文件和 Products 部分


76
00:03:38,816 --> 00:03:43,056
但是现在 我们打开项目编辑器


77
00:03:43,056 --> 00:03:45,996
打开 Targets 中的 iOS App


78
00:03:45,996 --> 00:03:48,626
然后进入 Frameworks, Libraries and Embedded Content 部分


79
00:03:48,946 --> 00:03:51,236
我们点击这里的 + 号


80
00:03:51,236 --> 00:03:53,756
然后从列表中选择 FoodNStuff


81
00:03:54,886 --> 00:03:57,976
我们希望为 watchOS App 执行相同的步骤


82
00:03:58,566 --> 00:03:59,736
所以我们找到对应的 Target


83
00:04:00,396 --> 00:04:01,476
转入同一部分


84
00:04:01,696 --> 00:04:03,766
再次点击 + 号


85
00:04:03,766 --> 00:04:05,736
并将其与我们的 App 相关联


86
00:04:07,276 --> 00:04:11,216
包中还含有一个或多个模块


87
00:04:11,366 --> 00:04:15,186
所以 我们必须将这些模块导入我们的 App


88
00:04:15,186 --> 00:04:16,406
这个例子中 我们只有一个模块


89
00:04:17,136 --> 00:04:19,666
我们进入 iOS App 的代码


90
00:04:20,896 --> 00:04:22,186
在此处导入模块


91
00:04:23,396 --> 00:04:26,066
我们也会为我们的 watchOS App 做同样的事情


92
00:04:29,726 --> 00:04:32,076
现在 由于我们对工作区


93
00:04:32,156 --> 00:04:33,496
进行了一些较大的更改


94
00:04:33,496 --> 00:04:34,586
因此预览暂停了


95
00:04:34,946 --> 00:04:37,686
那么让我们按下
command + option + P 来恢复它


96
00:04:38,306 --> 00:04:43,496
现在我们的 App 就可以正常运行了


97
00:04:44,206 --> 00:04:45,726
因此 只需几步


98
00:04:45,726 --> 00:04:48,086
我们就可以将可重用的代码


99
00:04:48,086 --> 00:04:49,476
在自己的本地包中完成重构


100
00:04:50,386 --> 00:04:51,676
你可能还注意到


101
00:04:51,896 --> 00:04:55,036
我们没有必要明确配置任何有关平台的内容


102
00:04:55,636 --> 00:04:58,566
这是因为包本质上是平台无关的


103
00:04:59,176 --> 00:05:01,386
因此 它们可以依客户的需求而建立


104
00:05:01,566 --> 00:05:03,526
在这种情况下


105
00:05:03,526 --> 00:05:05,276
我们计划同时构建 iOS 和 watchOS App


106
00:05:05,846 --> 00:05:09,316
因此 包被构建了两次


107
00:05:09,316 --> 00:05:10,166
一次用于 iOS 一次用于 watchOS


108
00:05:10,546 --> 00:05:12,826
并且这一切都由 Xcode 自动处理


109
00:05:13,286 --> 00:05:17,666
最后 这为包的发布打好了基础


110
00:05:17,846 --> 00:05:18,936
但在发布包之前


111
00:05:18,936 --> 00:05:20,426
让我们回到幻灯片


112
00:05:20,426 --> 00:05:22,000
了解更多相关信息


113
00:05:28,556 --> 00:05:30,186
你们刚刚了解了本地包


114
00:05:30,536 --> 00:05:33,796
现在让我们来看看如何发布一个包


115
00:05:33,796 --> 00:05:35,446
以便与广大受众分享


116
00:05:36,116 --> 00:05:38,766
在我们看发布包的具体步骤之前


117
00:05:38,976 --> 00:05:40,456
我们必须了解版本控制


118
00:05:41,956 --> 00:05:43,126
更具体地说


119
00:05:43,126 --> 00:05:45,456
是管理 Swift 包的语义化版本控制


120
00:05:46,806 --> 00:05:48,996
它为了确保你可以在


121
00:05:49,346 --> 00:05:50,696
不影响其他内容的情况下


122
00:05:50,696 --> 00:05:52,256
修复依赖项的漏洞


123
00:05:52,866 --> 00:05:55,286
Swift 包遵循语义化版本控制


124
00:05:56,166 --> 00:05:57,546
这是一种广泛的标准


125
00:05:57,616 --> 00:05:58,976
它为版本号


126
00:05:58,976 --> 00:06:00,306
每个部分


127
00:06:00,306 --> 00:06:01,756
赋予特定的语义含义


128
00:06:02,296 --> 00:06:06,456
主版本号象征着对 API 的突破性更改


129
00:06:07,106 --> 00:06:09,526
它需要更新现有客户端


130
00:06:09,916 --> 00:06:11,716
例如 


131
00:06:11,816 --> 00:06:13,146
重命名现有类型


132
00:06:13,756 --> 00:06:16,436
移除一个方法或更改方法签名


133
00:06:16,976 --> 00:06:18,406
但这也可能包括


134
00:06:18,406 --> 00:06:20,196
任何不向后兼容的漏洞修复


135
00:06:20,246 --> 00:06:23,316
或对现有 API 主要行为的更改


136
00:06:24,476 --> 00:06:26,096
更新次版本号


137
00:06:26,096 --> 00:06:28,706
是以向后兼容的方式添加功能


138
00:06:28,876 --> 00:06:33,186
例如 添加一个新的方法或类型


139
00:06:33,636 --> 00:06:35,076
在你进行


140
00:06:35,076 --> 00:06:36,036
向后兼容的漏洞修复时


141
00:06:36,036 --> 00:06:37,146
请递增修订号


142
00:06:37,886 --> 00:06:40,836
这使客户在对包进行漏洞修复时


143
00:06:40,836 --> 00:06:45,256
不会产生任何维护负担


144
00:06:45,396 --> 00:06:48,696
主要版本号 0 是一个特殊情况


145
00:06:48,696 --> 00:06:49,596
你可以在开发初期使用


146
00:06:50,486 --> 00:06:53,636
此时对次版本和修订版本的更改也可能会破坏API


147
00:06:54,456 --> 00:06:56,926
这简化了初始的开发过程


148
00:06:56,926 --> 00:07:00,416
但在人们开始使用你的包时
你应该发布 1.0 版本


149
00:07:00,896 --> 00:07:03,826
在发布包一段时间后


150
00:07:03,826 --> 00:07:07,076
你的客户将期望有稳定的 API 


151
00:07:07,076 --> 00:07:11,696
因此在发布最终版之前


152
00:07:12,186 --> 00:07:13,896
你可以使用预发行版本


153
00:07:13,896 --> 00:07:14,936
请求客户测试 API


154
00:07:18,616 --> 00:07:21,846
你可以通过在版本规则中添加预发布标识符


155
00:07:21,846 --> 00:07:23,686
来选择预发布版本


156
00:07:24,176 --> 00:07:26,436
在这个例子中


157
00:07:26,766 --> 00:07:28,326
我使用的标识符为 beta.1


158
00:07:31,276 --> 00:07:34,516
请注意 这种情况下你可以解析预发布版本


159
00:07:34,726 --> 00:07:36,056
但你仍然会得到更新


160
00:07:36,256 --> 00:07:38,366
例如 这里的版本是 beta.6


161
00:07:39,036 --> 00:07:42,166
一旦稳定版本 5 发布


162
00:07:42,166 --> 00:07:43,356
包解析将自动选择稳定版


163
00:07:43,936 --> 00:07:44,736
但是你应该


164
00:07:44,736 --> 00:07:46,236
在完成测试后


165
00:07:46,236 --> 00:07:47,096
删除预发布标识符


166
00:07:47,626 --> 00:07:50,606
我们来看看


167
00:07:50,656 --> 00:07:51,956
下一个演示中


168
00:07:51,956 --> 00:07:53,000
发布包的具体步骤


169
00:07:59,416 --> 00:08:02,416
让我们回到第一个演示结束地方


170
00:08:02,986 --> 00:08:10,856
首先 我将把包拖出项目


171
00:08:11,346 --> 00:08:14,146
在拖动时按住 option 键


172
00:08:14,146 --> 00:08:14,556
就会创建一份拷贝


173
00:08:15,386 --> 00:08:17,866
关闭项目


174
00:08:17,866 --> 00:08:19,546
在 Finder 中打开它 


175
00:08:19,546 --> 00:08:20,606
然后连按 Package.swift 文件


176
00:08:21,646 --> 00:08:25,086
这样就可以独立打开包


177
00:08:25,086 --> 00:08:25,706
和打开项目的方式一样


178
00:08:26,766 --> 00:08:30,016
如果我们查看运行目标


179
00:08:30,016 --> 00:08:32,086
可以看到菜单中也有 macOS 和 tvOS


180
00:08:32,086 --> 00:08:35,436
虽然我们之前的开发仅针对 iOS 和 watchOS


181
00:08:36,535 --> 00:08:39,686
这再次强调了包本质上是与平台无关的


182
00:08:40,006 --> 00:08:41,296
无需特殊配置


183
00:08:41,296 --> 00:08:45,106
即可在 Xcode 中为
所有 Apple 平台构建包


184
00:08:46,116 --> 00:08:47,436
现在 既然你正在发布这个包


185
00:08:47,436 --> 00:08:49,426
那么让我们补充一下 Readme 文件


186
00:08:49,926 --> 00:08:54,226
假设这个包提供了


187
00:08:55,036 --> 00:08:59,726
用于表示食物菜单


188
00:08:59,726 --> 00:09:08,316
并从 JSON 中加载的


189
00:09:08,316 --> 00:09:08,856
数据模型


190
00:09:08,976 --> 00:09:11,786
现在 对于真正的包


191
00:09:11,786 --> 00:09:15,526
你希望在 Readme 文件中包含更多信息


192
00:09:15,936 --> 00:09:17,676
例如使用方法 平台限制等


193
00:09:17,716 --> 00:09:22,166
如果你使用了特定平台的 API（如 UIKit）


194
00:09:22,166 --> 00:09:23,446
还需要包含许可协议的信息


195
00:09:23,806 --> 00:09:26,236
但由于这只是一个演示 现在就足够了


196
00:09:27,556 --> 00:09:31,136
你要做的另一件事是添加测试用例


197
00:09:31,136 --> 00:09:32,546
Xcode 已经为我们


198
00:09:32,546 --> 00:09:35,526
创建了一个示例测试用例


199
00:09:35,526 --> 00:09:36,746
但我们想在这里实际测试


200
00:09:36,746 --> 00:09:36,956
我们的数据模型


201
00:09:37,476 --> 00:09:44,086
让我们创建一个 FoodItem


202
00:09:44,326 --> 00:09:48,096
名称为 chick'n


203
00:09:48,096 --> 00:09:49,006
价格为 42 美元


204
00:09:49,676 --> 00:09:52,896
我们设置条件


205
00:09:52,896 --> 00:09:55,816
物品的价格就是 42 美元


206
00:09:56,476 --> 00:09:57,736
现在 如果我们按下 Command + U


207
00:09:58,826 --> 00:10:00,976
我们的包就会构建并进行测试


208
00:10:00,976 --> 00:10:02,986
就像在项目中运行一样


209
00:10:03,286 --> 00:10:05,396
测试已经通过


210
00:10:05,396 --> 00:10:05,706
因此我们可以继续


211
00:10:06,506 --> 00:10:09,016
我们首先为我们的包创建一个仓库


212
00:10:09,176 --> 00:10:10,636
为此 我们可以打开


213
00:10:10,636 --> 00:10:12,396
Source Control 菜单


214
00:10:12,396 --> 00:10:14,776
并选择 Create Repositories 选项


215
00:10:15,576 --> 00:10:17,456
Xcode 已经为我们选中了包


216
00:10:17,456 --> 00:10:19,346
所以我们只需点按 Create 即可


217
00:10:20,056 --> 00:10:21,806
这将在本地创建一个仓库


218
00:10:21,806 --> 00:10:24,286
并提交我们当前的状态


219
00:10:25,266 --> 00:10:27,446
但我们还需要 GitHub 中的仓库


220
00:10:27,716 --> 00:10:30,406
我们也可以在 Xcode 中创建它


221
00:10:31,186 --> 00:10:32,646
切换到源码管理导航栏


222
00:10:33,346 --> 00:10:34,646
在仓库中打开上下文菜单


223
00:10:34,646 --> 00:10:37,116
然后选择 Create Remote 选项


224
00:10:37,576 --> 00:10:42,026
由于我已经在 Xcode 偏好设置中
配置了我的 GitHub 帐户


225
00:10:42,026 --> 00:10:44,936
因此会在此处自动预选


226
00:10:45,116 --> 00:10:46,786
仓库名称可以更改


227
00:10:46,786 --> 00:10:48,116
但我们保持默认


228
00:10:48,376 --> 00:10:50,556
同时也暂时略去可选描述


229
00:10:50,836 --> 00:10:53,876
我们将可见性设置为私密


230
00:10:53,876 --> 00:10:56,716
因为我想暂时与我的团队分享这个包


231
00:10:56,716 --> 00:10:57,086
而不是面向大众


232
00:10:57,626 --> 00:10:59,626
我们点按 Create


233
00:11:01,216 --> 00:11:03,076
Xcode 一步完成了


234
00:11:03,226 --> 00:11:06,076
在 GitHub 上创建仓库


235
00:11:06,286 --> 00:11:10,106
并当前状态推送到 Github 上的任务


236
00:11:10,326 --> 00:11:11,446
现在我们已经发布了我们的包


237
00:11:11,446 --> 00:11:14,516
但我们还想发布我们的第一个版本


238
00:11:14,896 --> 00:11:16,436
为此 返回上下文菜单


239
00:11:16,436 --> 00:11:19,406
并选择 Tag Master 选项


240
00:11:19,956 --> 00:11:23,326
我们想要发布 1.0.0 版本


241
00:11:23,326 --> 00:11:25,936
暂时不填消息文本框


242
00:11:26,486 --> 00:11:29,466
这会在本地创建一个标记


243
00:11:29,466 --> 00:11:30,886
所以我们仍然需要将它推送到 GitHub


244
00:11:31,256 --> 00:11:32,566
我们要返回


245
00:11:32,566 --> 00:11:34,276
Source Control 菜单


246
00:11:34,276 --> 00:11:35,016
选择 Push 选项


247
00:11:35,606 --> 00:11:38,636
要选中 include tags 复选框


248
00:11:38,636 --> 00:11:39,976
以便它们被推送


249
00:11:39,976 --> 00:11:41,946
然后点按 Push


250
00:11:47,636 --> 00:11:49,026
现在我们已经在 GitHub 上


251
00:11:49,026 --> 00:11:50,626
发布了我们的包


252
00:11:50,626 --> 00:11:52,516
让我们来看看


253
00:11:52,516 --> 00:11:55,906
从上下文菜单中选择 View in GitHub 选项


254
00:11:57,276 --> 00:11:59,356
仓库会在此处打开


255
00:12:00,696 --> 00:12:02,046
演示到这可以结束了


256
00:12:02,626 --> 00:12:04,016
但作为最后一步


257
00:12:04,016 --> 00:12:05,216
我想将包的远程版本


258
00:12:05,216 --> 00:12:06,646
重新集成到我们的


259
00:12:06,646 --> 00:12:07,366
之前的午餐 App 中


260
00:12:07,786 --> 00:12:08,656
因此 我点按 Clone or download 按钮


261
00:12:08,686 --> 00:12:11,416
并从此处复制网址


262
00:12:11,846 --> 00:12:15,916
关闭 Safari Xcode 以及 Finder


263
00:12:16,946 --> 00:12:20,556
然后我们回到 Xcode 的欢迎窗口


264
00:12:20,556 --> 00:12:22,136
再次打开 Lunch 项目


265
00:12:24,196 --> 00:12:26,726
在这里 我们打开 File 菜单和


266
00:12:26,726 --> 00:12:28,756
这个新的 Swift Packages 子菜单


267
00:12:30,316 --> 00:12:34,186
此菜单包含几个用于处理包的选项


268
00:12:35,916 --> 00:12:38,266
但我想添加一个包依赖项


269
00:12:38,826 --> 00:12:42,396
我们在这里粘贴网址


270
00:12:47,216 --> 00:12:49,946
Xcode 为我们推荐的


271
00:12:49,946 --> 00:12:51,836
默认版本规则


272
00:12:51,836 --> 00:12:53,496
包括我们刚刚发布的


273
00:12:53,496 --> 00:12:53,996
1.0.0 版本


274
00:12:54,226 --> 00:12:55,236
所以 我们可以点击这里的 Next


275
00:12:55,796 --> 00:13:02,776
包解析完成 现在我们看到了产品的选择


276
00:13:02,776 --> 00:13:05,596
我们希望将库产品与我们的 iOS App 相关联


277
00:13:06,436 --> 00:13:07,656
所以 我们在这里点按 Finish


278
00:13:08,266 --> 00:13:13,426
现在我实际上忘了做一件事


279
00:13:13,476 --> 00:13:16,406
就是删除我们之前的本地包


280
00:13:16,726 --> 00:13:19,176
所以 我现在把它移到废纸篓里


281
00:13:20,136 --> 00:13:22,466
那么此时就正在获取远程版本


282
00:13:23,006 --> 00:13:28,696
我们来看看项目导航栏中的


283
00:13:28,696 --> 00:13:29,746
Swift Package Dependencies 部分


284
00:13:30,256 --> 00:13:32,276
这显示了所有的包依赖项


285
00:13:38,776 --> 00:13:40,676
好了 因为我们


286
00:13:40,676 --> 00:13:42,506
在之前的流程中


287
00:13:42,506 --> 00:13:44,226
关联了产品


288
00:13:44,306 --> 00:13:45,366
所以它已经与我们的 iOS App 相关联


289
00:13:45,846 --> 00:13:48,516
但我们还必须


290
00:13:49,086 --> 00:13:50,076
将它添加到 watchOS App 中


291
00:13:50,516 --> 00:13:51,746
我们需要回到


292
00:13:51,746 --> 00:13:53,736
Frameworks, Libraries and Embedded Content 部分


293
00:13:54,756 --> 00:13:57,236
点按此处的 + 号


294
00:13:57,236 --> 00:13:58,016
然后选择包产品


295
00:13:58,456 --> 00:14:02,726
现在可以回到预览了


296
00:14:04,086 --> 00:14:04,656
恢复预览


297
00:14:05,296 --> 00:14:09,126
我们可以看到它


298
00:14:09,126 --> 00:14:09,646
像之前一样正常运行


299
00:14:10,596 --> 00:14:12,036
因此 只需几步


300
00:14:12,036 --> 00:14:13,956
我们就可以发布一个包


301
00:14:14,566 --> 00:14:15,756
我们回到幻灯片


302
00:14:21,386 --> 00:14:23,846
接下来 


303
00:14:23,846 --> 00:14:25,066
我想邀请我的同事 Ankit 上台


304
00:14:25,066 --> 00:14:26,686
向你们介绍一下


305
00:14:26,686 --> 00:14:29,000
包 Manifest API 的更多信息


306
00:14:32,366 --> 00:14:33,116
>> 多谢 Boris


307
00:14:33,626 --> 00:14:35,346
Boris 向你们展示了


308
00:14:35,346 --> 00:14:36,916
如何在 Xcode 项目中


309
00:14:36,916 --> 00:14:38,656
使用本地包


310
00:14:38,656 --> 00:14:40,306
以及如何发布它


311
00:14:40,306 --> 00:14:41,376
以与更广泛的受众分享


312
00:14:41,996 --> 00:14:43,476
在本节中


313
00:14:43,476 --> 00:14:44,866
我们将更多的了解


314
00:14:44,866 --> 00:14:46,856
包的 Manifest API


315
00:14:46,856 --> 00:14:47,406
用它来对包进行配置


316
00:14:48,026 --> 00:14:51,516
Swift 包目录中


317
00:14:51,516 --> 00:14:52,766
包含 Package.swift


318
00:14:52,816 --> 00:14:53,796
Manifest 文件


319
00:14:54,946 --> 00:14:56,296
Manifest 的第一行


320
00:14:56,566 --> 00:14:58,356
始终是 Swift Tools 的版本


321
00:14:59,236 --> 00:15:00,436
这是构建包


322
00:15:00,436 --> 00:15:02,366
所需 Swift 编译器的


323
00:15:02,366 --> 00:15:03,346
最低版本


324
00:15:04,066 --> 00:15:05,556
我们将在后面的演讲中


325
00:15:05,556 --> 00:15:07,586
详细说明


326
00:15:07,796 --> 00:15:08,616
之后是导入


327
00:15:08,616 --> 00:15:10,256
PacakageDescription 的语句


328
00:15:10,886 --> 00:15:12,326
这是 Xcode 提供的库


329
00:15:12,326 --> 00:15:14,526
其中包含


330
00:15:14,526 --> 00:15:16,296
使用 Manifest 文件的 API


331
00:15:17,916 --> 00:15:19,766
在这之后是


332
00:15:19,766 --> 00:15:20,926
包的初始化语句


333
00:15:21,566 --> 00:15:23,216
一条包初始化语句


334
00:15:23,216 --> 00:15:25,396
可以配置整个包


335
00:15:26,206 --> 00:15:27,546
在本例中


336
00:15:27,546 --> 00:15:29,296
现在只有包的名称


337
00:15:29,296 --> 00:15:29,806
所以我需要添加 Target


338
00:15:30,326 --> 00:15:33,306
Swift 包具有


339
00:15:33,306 --> 00:15:34,136
关于 Target 的标准布局


340
00:15:35,146 --> 00:15:36,766
库 Target 位于


341
00:15:36,766 --> 00:15:38,666
名为 Sources 的目录下


342
00:15:38,766 --> 00:15:41,256
每个 Target 应具有自己的子目录


343
00:15:41,836 --> 00:15:43,966
它们需要在


344
00:15:43,966 --> 00:15:45,316
包初始化语句的 Target 部分


345
00:15:45,316 --> 00:15:45,986
进行声明


346
00:15:47,006 --> 00:15:48,306
标准布局非常强大


347
00:15:48,306 --> 00:15:49,926
因为你无需


348
00:15:49,926 --> 00:15:51,416
在 Manifest 中


349
00:15:51,416 --> 00:15:52,696
单独列出源文件
 
00:15:53,426 --> 00:15:54,446
你只需将它们放在正确的目录中


350
00:15:54,446 --> 00:15:56,036
Xcode 就会


351
00:15:56,036 --> 00:15:57,126
自动添加它们
 
00:15:58,566 --> 00:15:59,636
如果我想添加另一个 Target


352
00:15:59,636 --> 00:16:01,466
我可以创建一个


353
00:16:01,466 --> 00:16:03,476
新的子目录


354
00:16:03,476 --> 00:16:04,876
然后在 Manifest 中声明 Target


355
00:16:05,416 --> 00:16:08,806
测试 Target 位于


356
00:16:08,806 --> 00:16:10,806
名为 Tests 的目录下


357
00:16:10,806 --> 00:16:12,366
它们也有自己的子目录


358
00:16:12,926 --> 00:16:15,496
它们在声明时使用的是


359
00:16:15,496 --> 00:16:18,116
testTarget API


360
00:16:18,116 --> 00:16:19,516
并且由于测试 Target


361
00:16:19,516 --> 00:16:20,916
通常是测试另一个 Target


362
00:16:20,916 --> 00:16:22,316
因此你需要声明


363
00:16:22,316 --> 00:16:23,686
对被测 Target 的依赖


364
00:16:24,866 --> 00:16:25,756
这是使用


365
00:16:25,756 --> 00:16:27,616
testTarget API 的 dependencies 参数


366
00:16:27,616 --> 00:16:28,456
来完成的


367
00:16:29,176 --> 00:16:32,936
作为最后一步


368
00:16:32,936 --> 00:16:34,506
我们需要为包


369
00:16:34,506 --> 00:16:34,926
声明产品


370
00:16:35,576 --> 00:16:36,696
产品用于


371
00:16:36,786 --> 00:16:38,616
从包中导出 Target


372
00:16:38,616 --> 00:16:39,656
以便其他包可以使用它们


373
00:16:40,486 --> 00:16:42,066
在本例中


374
00:16:42,066 --> 00:16:43,716
有一个库产品


375
00:16:43,796 --> 00:16:44,786
导出的是一个库 Target


376
00:16:45,376 --> 00:16:49,386
我们刚刚看到了


377
00:16:49,386 --> 00:16:50,366
一个基本的 Swift 包是如何配置的


378
00:16:50,996 --> 00:16:52,236
现在让我们看看


379
00:16:52,286 --> 00:16:53,586
如何在现有的 Xcode 项目中


380
00:16:53,946 --> 00:16:55,326
添加对 Swift 包的支持


381
00:16:55,326 --> 00:16:59,416
我有一个


382
00:16:59,416 --> 00:17:01,016
名为 Menu Downloader 的项目


383
00:17:01,016 --> 00:17:02,516
我一直把它与其他包管理器一起使用


384
00:17:02,546 --> 00:17:04,016
如 CocoPods 和 Carthage


385
00:17:04,636 --> 00:17:08,705
这个项目有一个 Swift Target


386
00:17:08,705 --> 00:17:11,786
一些遗留 C 代码


387
00:17:11,786 --> 00:17:13,856
Xcode 项目文件和一个


388
00:17:13,856 --> 00:17:16,386
CoCoPods 包管理器使用的
podspec 文件


389
00:17:17,175 --> 00:17:19,616
首先需要做的是


390
00:17:19,715 --> 00:17:21,286
添加 package.swift


391
00:17:21,286 --> 00:17:23,536
Manifest 文件


392
00:17:23,665 --> 00:17:25,996
为配置 Target 做准备


393
00:17:26,056 --> 00:17:27,586
从遗留的 C 代码开始


394
00:17:27,986 --> 00:17:30,656
我们首先给它一个名称


395
00:17:30,656 --> 00:17:31,336
然后给它一个自定义路径


396
00:17:31,336 --> 00:17:33,906
这么做的原因是


397
00:17:33,946 --> 00:17:35,536
这个 Target 没有放在


398
00:17:35,536 --> 00:17:36,456
标准的 Sources 目录下


399
00:17:37,796 --> 00:17:39,636
我还发现


400
00:17:39,636 --> 00:17:41,276
C 代码中有一个宏


401
00:17:41,276 --> 00:17:43,366
如果被定义


402
00:17:43,366 --> 00:17:43,906
就会下载一个秘密午餐菜单


403
00:17:44,716 --> 00:17:46,856
所以我使用了


404
00:17:47,426 --> 00:17:49,726
cSettings API 定义它


405
00:17:49,976 --> 00:17:51,836
我们可以以用类似的方式


406
00:17:51,906 --> 00:17:53,326
配置 Swift Target


407
00:17:53,326 --> 00:17:55,636
先自定义路径


408
00:17:55,636 --> 00:18:00,796
然后声明对遗留 C Target 的依赖


409
00:18:00,906 --> 00:18:02,236
这个包有两个产品


410
00:18:03,026 --> 00:18:04,986
第一个产品导出 Swift Target


411
00:18:04,986 --> 00:18:07,946
第二个产品导出 C Target


412
00:18:07,946 --> 00:18:10,266
我们需要单独导出 C Target


413
00:18:10,266 --> 00:18:12,446
因为我们的一些用户


414
00:18:12,446 --> 00:18:14,856
可能直接使用 C Target


415
00:18:14,856 --> 00:18:16,736
在这种情况下


416
00:18:16,736 --> 00:18:19,000
他们不需要 Swift 桥接


417
00:18:20,286 --> 00:18:23,146
它还被标记为 dynamic


418
00:18:23,146 --> 00:18:25,036
因为我知道一些用户


419
00:18:25,066 --> 00:18:28,986
有时会加载这个库


420
00:18:29,196 --> 00:18:30,266
现在 让我们看看


421
00:18:30,266 --> 00:18:33,000
如何在包中配置包依赖关系


422
00:18:34,496 --> 00:18:36,576
包依赖关系在一个


423
00:18:36,576 --> 00:18:39,176
名为 dependencies 的部分中配置


424
00:18:39,176 --> 00:18:42,386
它有两个参数


425
00:18:42,386 --> 00:18:44,446
源 URL 和版本要求


426
00:18:45,366 --> 00:18:47,466
在本例中


427
00:18:47,466 --> 00:18:48,576
我使用的是 upToNextMajor 版本要求


428
00:18:49,296 --> 00:18:51,126
根据语义化版本控制


429
00:18:51,126 --> 00:18:52,886
这意味着我的包


430
00:18:52,886 --> 00:18:54,946
需要的 Yams


431
00:18:54,946 --> 00:18:56,376
是从主要版本 2 开始


432
00:18:56,376 --> 00:18:58,456
然后直到下一个主要版本 3


433
00:18:59,676 --> 00:19:00,816
upToNextMajor


434
00:19:00,816 --> 00:19:02,096
是一种比较推荐的


435
00:19:02,226 --> 00:19:03,216
版本要求声明方式


436
00:19:04,206 --> 00:19:06,226
这是因为它


437
00:19:06,226 --> 00:19:08,366
允许你为下一个主要版本


438
00:19:08,366 --> 00:19:10,346
指定最低版本


439
00:19:10,896 --> 00:19:12,236
它足够灵活


440
00:19:12,236 --> 00:19:14,226
可以避免解析时的


441
00:19:14,226 --> 00:19:15,466
潜在冲突


442
00:19:16,276 --> 00:19:19,926
这个参数也可以直接写作 from


443
00:19:21,036 --> 00:19:24,106
还有一些其他类型的版本要求


444
00:19:24,856 --> 00:19:27,516
我们已经看到了 from 和 upToNextMajor


445
00:19:28,786 --> 00:19:30,446
还有 upToNextMinor


446
00:19:30,446 --> 00:19:33,876
它允许你基于次版本号


447
00:19:33,876 --> 00:19:35,016
声明版本要求


448
00:19:36,006 --> 00:19:37,656
如果你想对所采取的更改保守一些


449
00:19:37,656 --> 00:19:40,126
这种版本声明十分有用


450
00:19:41,416 --> 00:19:43,466
其次我们有 exact 的版本要求


451
00:19:43,986 --> 00:19:45,276
这允许我们


452
00:19:45,276 --> 00:19:47,246
将依赖固定到特定版本上


453
00:19:48,086 --> 00:19:49,606
我们不建议使用这种方式


454
00:19:49,606 --> 00:19:50,846
除非你真的需要使用


455
00:19:51,456 --> 00:19:55,016
因为它很可能会导致


456
00:19:55,016 --> 00:19:55,083
包中发生冲突


457
00:19:56,636 --> 00:19:57,756
还有一些


458
00:19:57,756 --> 00:19:59,236
非基于版本的要求


459
00:19:59,776 --> 00:20:02,276
有基于分支的依赖关系


460
00:20:02,416 --> 00:20:03,756
如果你想要开发多个包


461
00:20:03,756 --> 00:20:05,546
并且希望保持它们同步


462
00:20:05,546 --> 00:20:08,326
这将非常有用


463
00:20:08,506 --> 00:20:09,596
并且有基于修订的要求


464
00:20:09,596 --> 00:20:11,306
这有助于


465
00:20:11,406 --> 00:20:12,546
将我们的依赖固定到


466
00:20:12,656 --> 00:20:13,816
特定的修订版


467
00:20:14,976 --> 00:20:18,176
请注意 已发布的包中不允许


468
00:20:18,176 --> 00:20:19,276
使用基于分支


469
00:20:19,276 --> 00:20:19,746
和基于修订的要求


470
00:20:20,696 --> 00:20:22,126
在发布包之前


471
00:20:22,126 --> 00:20:23,306
必须删除所有基于分支


472
00:20:23,726 --> 00:20:25,136
和修订的要求


473
00:20:25,626 --> 00:20:28,376
现在 在选择我们的包依赖之后


474
00:20:28,376 --> 00:20:30,776
我们需要声明


475
00:20:30,776 --> 00:20:33,536
其中一个或多个产品的依赖


476
00:20:34,266 --> 00:20:36,026
在本例里


477
00:20:36,026 --> 00:20:39,616
我在 Swift Target 中


478
00:20:39,616 --> 00:20:42,566
声明对 Yams 产品的依赖


479
00:20:42,696 --> 00:20:44,406
现在让我们回到 Swift Tools 版本


480
00:20:45,436 --> 00:20:46,976
正如我之前提到的


481
00:20:46,976 --> 00:20:48,556
Swift Tools 版本


482
00:20:48,556 --> 00:20:50,046
始终是 Manifest 的第一行


483
00:20:51,106 --> 00:20:52,936
与所有其他 API 一样


484
00:20:52,936 --> 00:20:54,866
PackageDescription API 也


485
00:20:54,866 --> 00:20:56,566
随着时间的推移而发展


486
00:20:56,566 --> 00:20:58,216
你得到的库版本


487
00:20:58,426 --> 00:21:00,136
取决于 Tools 版本


488
00:21:01,376 --> 00:21:03,176
它还参与了


489
00:21:03,176 --> 00:21:04,576
依赖关系解析过程


490
00:21:05,336 --> 00:21:07,416
Xcode 确保所有


491
00:21:07,416 --> 00:21:09,306
包依赖项的 Tools 版本


492
00:21:09,306 --> 00:21:15,556
始终与包的 Tools 版本兼容


493
00:21:15,676 --> 00:21:17,776
最后 它声明了


494
00:21:17,776 --> 00:21:20,896
构建包所需的


495
00:21:20,896 --> 00:21:21,166
最低版本 Swift 编译器


496
00:21:22,386 --> 00:21:25,896
这对于生成良好的诊断非常有用


497
00:21:25,896 --> 00:21:27,126
以防有人试图将你的包


498
00:21:27,126 --> 00:21:30,246
与较旧的不兼容版本的 Xcode 一起使用


499
00:21:30,766 --> 00:21:34,706
正如 Boris 之前提到的


500
00:21:35,646 --> 00:21:38,086
Swift 包总是与平台无关


501
00:21:39,126 --> 00:21:40,196
如果你的包


502
00:21:40,196 --> 00:21:42,016
支持多个平台


503
00:21:42,016 --> 00:21:43,976
并且你有一些特定于平台的代码


504
00:21:43,976 --> 00:21:45,206
我们可以使用


505
00:21:45,206 --> 00:21:46,106
Swift 的条件组合功能


506
00:21:46,726 --> 00:21:48,696
对于支持平台的可用性


507
00:21:48,696 --> 00:21:50,936
Xcode 为每个平台


508
00:21:50,936 --> 00:21:53,526
都分配了默认的部署 Target


509
00:21:54,046 --> 00:21:56,336
你可以在包初始化的


510
00:21:56,336 --> 00:21:58,726
platform 部分中


511
00:21:58,726 --> 00:21:59,956
自定义部署 Target


512
00:22:01,216 --> 00:22:04,276
请注意这不会限制


513
00:22:04,276 --> 00:22:05,116
此程序包可以构建的平台


514
00:22:05,576 --> 00:22:07,286
它只为你列出的平台


515
00:22:07,286 --> 00:22:08,026
进行自定义设置


516
00:22:08,696 --> 00:22:11,876
在本例中


517
00:22:11,876 --> 00:22:15,256
我将 macOS 自定义为 10.15
将 iOS 自定义为 13


518
00:22:16,306 --> 00:22:17,566
如果你当前的 Tools 版本


519
00:22:17,846 --> 00:22:19,336
没有所需的


520
00:22:19,336 --> 00:22:21,626
部署 Target API


521
00:22:21,626 --> 00:22:22,606
你则可以使用基于字符串的形式


522
00:22:23,266 --> 00:22:26,926
我们刚刚提到了很多关于 API 的东西


523
00:22:27,766 --> 00:22:29,786
所有包 Manifest API


524
00:22:29,786 --> 00:22:31,976
都有对应的文档


525
00:22:31,976 --> 00:22:34,446
你可以在模块界面中查看


526
00:22:35,776 --> 00:22:36,796
按住 Command 键


527
00:22:36,796 --> 00:22:38,686
在任何 Manifest 文件中


528
00:22:38,686 --> 00:22:40,056
点按导入 PackageDescription 的语句


529
00:22:40,056 --> 00:22:42,376
来访问模块界面


530
00:22:43,706 --> 00:22:45,896
知道了这些


531
00:22:45,896 --> 00:22:47,316
让我们再次欢迎 Boris


532
00:22:47,316 --> 00:22:47,756
讨论如何编辑 Swift 包


533
00:22:48,236 --> 00:22:48,536
谢谢大家


534
00:22:49,516 --> 00:22:55,266
[掌声]


535
00:22:55,766 --> 00:22:56,386
>> 多谢 Ankit


536
00:22:56,796 --> 00:23:00,036
在你发布包后


537
00:23:00,036 --> 00:23:02,656
过一段时间


538
00:23:02,656 --> 00:23:06,146
为了与你的团队或开源社区共享


539
00:23:06,146 --> 00:23:09,046
你可能需要在 App 的上下文中修改它


540
00:23:09,046 --> 00:23:10,706
那么 我们来谈谈编辑包


541
00:23:11,636 --> 00:23:13,576
在前面的演示中


542
00:23:13,576 --> 00:23:14,536
我在编辑了一些包


543
00:23:15,036 --> 00:23:16,806
其中一个是本地包


544
00:23:17,116 --> 00:23:19,526
它是作为工作空间的一部分构建的


545
00:23:19,876 --> 00:23:22,516
另一个是双击 package.swift 


546
00:23:22,516 --> 00:23:23,476
独立打开的


547
00:23:23,816 --> 00:23:25,146
两者都是一直可编辑的


548
00:23:25,746 --> 00:23:27,286
但是其中的包依赖项


549
00:23:27,286 --> 00:23:29,466
被锁定无法编辑


550
00:23:29,466 --> 00:23:31,446
因为它们由 Xcode 自动管理


551
00:23:31,976 --> 00:23:34,626
如果你看看之前的 App


552
00:23:34,626 --> 00:23:38,476
我们依赖 GitHub 上的 FoodNStuff 包


553
00:23:38,886 --> 00:23:41,066
如果我们现在将独立的包


554
00:23:41,066 --> 00:23:43,646
作为本地包


555
00:23:43,646 --> 00:23:45,566
添加到我们的项目中


556
00:23:45,566 --> 00:23:46,926
它将覆盖现有依赖项


557
00:23:46,926 --> 00:23:49,246
而无需进行删除


558
00:23:50,496 --> 00:23:53,486
它的覆盖基于路径的最后一部分


559
00:23:53,846 --> 00:23:55,116
因此 由于这两者都具有相同的最后一部分


560
00:23:55,116 --> 00:23:57,086
因此本地包


561
00:23:57,086 --> 00:23:58,506
将覆盖远程依赖


562
00:23:58,936 --> 00:24:02,056
由于本地包始终可编辑


563
00:24:02,056 --> 00:24:04,916
因此你可以以这种方式


564
00:24:04,916 --> 00:24:06,666
同时编辑 App 和包


565
00:24:07,246 --> 00:24:13,816
我们来演示如何编辑包


566
00:24:14,236 --> 00:24:15,886
再次 我们回到


567
00:24:15,886 --> 00:24:17,266
我们之前的演示中停下的地方


568
00:24:18,606 --> 00:24:22,196
如果你还记得


569
00:24:22,196 --> 00:24:23,406
Swift Package Dependencies 部分


570
00:24:23,406 --> 00:24:26,886
显示了我们添加的包依赖


571
00:24:27,836 --> 00:24:30,796
由于之前我们已经对独立包完成了检查


572
00:24:30,796 --> 00:24:32,306
我们可以将它


573
00:24:32,306 --> 00:24:33,766
拖到我们的项目中


574
00:24:37,356 --> 00:24:38,806
现在 Swift Package Dependencies 部分消失了


575
00:24:39,286 --> 00:24:41,586
因为我们不再使用远程依赖项


576
00:24:41,586 --> 00:24:43,316
我们正在使用本地包


577
00:24:47,876 --> 00:24:50,356
我们的用户要求


578
00:24:50,356 --> 00:24:51,666
我们为午餐 App 提供新功能


579
00:24:52,326 --> 00:24:53,866
他们想看看


580
00:24:53,926 --> 00:24:54,456
他们能吃哪些菜


581
00:24:54,636 --> 00:24:56,346
所以 我们要明确标记


582
00:24:56,696 --> 00:24:58,536
哪种菜是素食者能吃的 哪种不是


583
00:24:59,136 --> 00:25:00,756
值得庆幸的是


584
00:25:00,756 --> 00:25:02,296
我们的数据模型已包含该信息


585
00:25:04,676 --> 00:25:06,646
不是我们的数据模型


586
00:25:06,786 --> 00:25:07,636
而是我们的潜在数据


587
00:25:07,856 --> 00:25:09,256
我们必须更改数据模型


588
00:25:09,256 --> 00:25:10,426
来真正显示信息


589
00:25:11,066 --> 00:25:12,576
进入包目录


590
00:25:13,976 --> 00:25:15,476
打开 FoodItem 类型


591
00:25:16,806 --> 00:25:18,056
我将在这里添加一个新属性


592
00:25:22,956 --> 00:25:25,786
名为 vegetarian


593
00:25:25,786 --> 00:25:27,336
类型是 Bool


594
00:25:27,336 --> 00:25:28,436
拷贝这部分


595
00:25:28,436 --> 00:25:30,826
将它作为参数


596
00:25:30,826 --> 00:25:31,606
添加到初始化中


597
00:25:31,936 --> 00:25:34,666
最后我们在初始化中


598
00:25:34,666 --> 00:25:39,526
设置属性参数


599
00:25:40,136 --> 00:25:41,376
所以现在我们在数据模型中


600
00:25:41,376 --> 00:25:43,666
有关于是否是素食的信息


601
00:25:44,366 --> 00:25:46,576
让我们在 UI 中添加一些内容


602
00:25:46,576 --> 00:25:48,116
以便向用户显示信息


603
00:25:49,286 --> 00:25:51,216
转到我们的 iOS App 的代码


604
00:25:51,216 --> 00:25:54,046
让我们隐藏项目导航栏


605
00:25:54,166 --> 00:25:55,166
获得更多的空间


606
00:25:55,166 --> 00:25:57,886
并恢复预览


607
00:25:57,886 --> 00:25:58,946
以便我们看到


608
00:25:58,946 --> 00:25:59,076
正在处理的内容


609
00:25:59,666 --> 00:26:02,086
我们可以使用跳转栏


610
00:26:02,086 --> 00:26:03,566
来转到 FoodItemRowView 类型


611
00:26:04,086 --> 00:26:09,586
如果我们在编辑器中转到我们的 UI 代码


612
00:26:09,586 --> 00:26:11,386
我们会看到高亮显示的


613
00:26:11,386 --> 00:26:14,676
表示每个表视图单元格


614
00:26:15,366 --> 00:26:20,736
所以 我已经准备了一个片段


615
00:26:20,866 --> 00:26:23,716
可以为食物添加标签


616
00:26:23,716 --> 00:26:26,146
包含食物名称


617
00:26:26,146 --> 00:26:28,536
并添加是否是素食的表情符号


618
00:26:29,016 --> 00:26:31,626
在文本字段中


619
00:26:31,836 --> 00:26:33,036
使用该标签


620
00:26:33,476 --> 00:26:37,996
让我们恢复预览


621
00:26:38,486 --> 00:26:42,066
然后可以看到


622
00:26:42,066 --> 00:26:44,176
现在每道菜都清楚标明


623
00:26:44,176 --> 00:26:45,276
它是不是素食


624
00:26:45,956 --> 00:26:47,526
因此 通过这些步骤


625
00:26:47,526 --> 00:26:49,636
你可以同时编辑你的 App 和包


626
00:26:50,146 --> 00:26:52,416
我们回到幻灯片


627
00:26:58,396 --> 00:27:00,466
这种覆盖机制


628
00:27:00,526 --> 00:27:01,836
也可用于修改他人的包


629
00:27:01,836 --> 00:27:03,986
如果你需要修复漏洞


630
00:27:03,986 --> 00:27:05,646
或者修改


631
00:27:05,646 --> 00:27:07,146
包中的漏洞


632
00:27:08,976 --> 00:27:10,696
总结一下


633
00:27:10,696 --> 00:27:12,106
我们来看看


634
00:27:12,156 --> 00:27:13,766
Swift 包管理器的开源项目


635
00:27:13,766 --> 00:27:15,136
我们将其简称为 Swift PM


636
00:27:15,796 --> 00:27:18,896
Swift PM 已经推出了几年


637
00:27:18,896 --> 00:27:20,576
Xcode 对 Swift 包的支持


638
00:27:20,576 --> 00:27:23,006
也建立在它之上


639
00:27:23,276 --> 00:27:24,676
Swift 是一种跨平台语言


640
00:27:24,676 --> 00:27:26,496
Swift PM 则是


641
00:27:26,496 --> 00:27:28,186
是一个用于 Swift 包的


642
00:27:28,186 --> 00:27:28,956
跨平台构建系统
 
00:27:29,526 --> 00:27:31,476
你可以使用它


643
00:27:31,626 --> 00:27:35,436
在客户端和服务器端 App 之间共享代码


644
00:27:35,686 --> 00:27:37,226
Swift PM 由


645
00:27:37,226 --> 00:27:38,736
Swift 命令下的


646
00:27:38,736 --> 00:27:39,606
四个命令行工具组成


647
00:27:39,886 --> 00:27:41,596
有 swift build


648
00:27:41,596 --> 00:27:42,116
用于构建一个包


649
00:27:42,556 --> 00:27:44,256
有 swift run


650
00:27:44,256 --> 00:27:44,776
用于运行可执行结果


651
00:27:45,036 --> 00:27:46,496
有 swift test 用于运行测试


652
00:27:47,146 --> 00:27:48,846
以及最后的 swift package


653
00:27:48,846 --> 00:27:50,196
用于在包上执行各种


654
00:27:50,196 --> 00:27:51,686
非构建操作


655
00:27:52,546 --> 00:27:54,166
这些命令行工具


656
00:27:54,166 --> 00:27:57,326
可用于为 macOS 和 Linux 构建包


657
00:27:58,836 --> 00:28:03,156
要了解有关 Swift PM 命令行工具的更多信息


658
00:28:03,156 --> 00:28:05,446
及其未来发展的想法


659
00:28:05,446 --> 00:28:06,646
你可以查看 WWDC 2018 中的


660
00:28:06,646 --> 00:28:09,896
Getting to Know Swift Package Manager 会议


661
00:28:10,906 --> 00:28:14,726
当然 你也可以使用 xcodebuild


662
00:28:14,726 --> 00:28:16,196
在命令行或者 CI 上构建包


663
00:28:16,966 --> 00:28:18,476
这也是一种在命令行上


664
00:28:18,476 --> 00:28:20,706
为 iOS watchOS 和 tvOS


665
00:28:20,706 --> 00:28:21,956
构建包的方法


666
00:28:22,426 --> 00:28:25,216
Xcode 中的 Swift 包支持构建在


667
00:28:25,216 --> 00:28:26,436
libSwiftPM 库之上


668
00:28:26,436 --> 00:28:29,996
libSwiftPM 库是开源项目的一部分


669
00:28:30,946 --> 00:28:32,416
libSwiftPM 可用于


670
00:28:32,416 --> 00:28:33,856
支持 Swift 包和


671
00:28:33,856 --> 00:28:35,366
其他 ID 开发人员工具


672
00:28:36,166 --> 00:28:37,406
我们很高兴与社区合作 


673
00:28:37,406 --> 00:28:39,116
建立稳定的 API


674
00:28:39,856 --> 00:28:42,946
一个例子是 SourceKit-LSP


675
00:28:42,946 --> 00:28:44,856
它是为


676
00:28:44,856 --> 00:28:46,266
Swift 和 C 语言


677
00:28:46,266 --> 00:28:48,336
实现语言服务器协议


678
00:28:48,336 --> 00:28:50,616
简称 LSP


679
00:28:51,466 --> 00:28:53,886
LSP 定义了


680
00:28:53,886 --> 00:28:55,926
编辑器或 IDE 与


681
00:28:59,286 --> 00:29:01,026
例如自动补全 跳转到定义


682
00:29:01,026 --> 00:29:02,846
或查找引用等语言功能


683
00:29:03,416 --> 00:29:05,666
使用 SourceKit-LSP


684
00:29:05,666 --> 00:29:08,616
支持语言服务器协议的编辑器 IDE


685
00:29:08,616 --> 00:29:10,186
就可以为 Swift 包提供这些功能


686
00:29:10,396 --> 00:29:11,776
这是建立在


687
00:29:11,776 --> 00:29:13,206
开源 libSwiftPM 之上的


688
00:29:13,686 --> 00:29:16,986
Swift 包管理器是


689
00:29:16,986 --> 00:29:18,966
更大的 Swift 开源项目的一部分


690
00:29:19,316 --> 00:29:20,946
Swift.org 网站是一个


691
00:29:20,946 --> 00:29:23,696
了解社区和发展过程的好地方


692
00:29:24,896 --> 00:29:26,416
包管理器遵循


693
00:29:26,416 --> 00:29:28,486
Swift 发展过程


694
00:29:28,486 --> 00:29:30,146
就像 Swift 项目的其余部分一样


695
00:29:30,436 --> 00:29:31,706
任何人都可以开发


696
00:29:31,706 --> 00:29:33,646
并最终提交功能


697
00:29:33,646 --> 00:29:34,446
或重大更改


698
00:29:35,846 --> 00:29:37,356
在花时间提交修改之前


699
00:29:37,356 --> 00:29:39,086
请先查看


700
00:29:39,086 --> 00:29:40,466
论坛的包管理器部分


701
00:29:40,466 --> 00:29:42,226
和其他开发者进行交流


702
00:29:42,426 --> 00:29:44,836
并找到提供可行意见或反馈的人


703
00:29:45,256 --> 00:29:49,046
Swift 包目前仅支持


704
00:29:49,046 --> 00:29:50,566
源代码和单元测试


705
00:29:51,596 --> 00:29:53,986
我们期待与社区合作


706
00:29:53,986 --> 00:29:55,686
增加对图像 文本文件


707
00:29:55,686 --> 00:30:00,216
或其他数据文件等资源的支持


708
00:30:00,396 --> 00:30:01,736
我们已经有了


709
00:30:01,736 --> 00:30:02,836
对包资源的提案


710
00:30:02,976 --> 00:30:04,336
你可以关注这个功能的发展


711
00:30:04,336 --> 00:30:06,766
并参与功能改进


712
00:30:09,936 --> 00:30:11,526
同样在 Swift.org 上


713
00:30:11,526 --> 00:30:13,636
我们会定期更新工具


714
00:30:13,636 --> 00:30:14,986
以便你自己


715
00:30:14,986 --> 00:30:15,836
尝试最新的更新


716
00:30:16,836 --> 00:30:18,016
对开源项目的更改


717
00:30:18,016 --> 00:30:19,886
也将成为 Xcode 


718
00:30:19,886 --> 00:30:21,326
未来版本的一部分


719
00:30:21,936 --> 00:30:25,886
最后


720
00:30:25,936 --> 00:30:28,076
Apple 平台和 Xcode 


721
00:30:28,076 --> 00:30:28,736
现在已提供对包的支持


722
00:30:29,776 --> 00:30:31,196
你可以在项目中查找


723
00:30:31,196 --> 00:30:33,536
可重用的代码


724
00:30:33,536 --> 00:30:34,346
并将其重构到 Swift 包中


725
00:30:35,216 --> 00:30:36,426
我们对 Swift 包


726
00:30:36,426 --> 00:30:38,436
生态系统不断扩大感到兴奋


727
00:30:39,016 --> 00:30:41,536
如果你对


728
00:30:41,536 --> 00:30:43,736
使用或创建包有任何疑问


729
00:30:43,736 --> 00:30:46,326
我们即将推出两个实验室


730
00:30:46,636 --> 00:30:48,436
一个是在今天 12 点


731
00:30:48,436 --> 00:30:50,346
另一个是明天同一时间


732
00:30:50,856 --> 00:30:53,256
非常感谢你们的到来


733
00:30:53,306 --> 00:30:54,416
享受这周剩下的美好时光吧


734
00:30:55,516 --> 00:30:59,506
[掌声]

