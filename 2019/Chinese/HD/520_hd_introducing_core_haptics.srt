1
00:00:06,173 --> 00:00:07,207 line:0
（Core Haptics介绍）


2
00:00:07,274 --> 00:00:09,776 line:0
我是Michael Diu
来自触觉交互团队


3
00:00:10,043 --> 00:00:11,512 line:-2
我将和你一起来
探讨iOS 13上的


4
00:00:11,578 --> 00:00:15,015 line:-1
关于触觉的一些进阶功能


5
00:00:15,682 --> 00:00:17,084 line:-1
我们来看下议程


6
00:00:19,052 --> 00:00:22,256 line:-2
首先 我们来讲一下
Core Haptics使用场景


7
00:00:22,322 --> 00:00:26,059 line:-2
它是如何与其他音频和触觉
API工作的


8
00:00:26,126 --> 00:00:27,427 line:-2
（使用Core Haptics
的场景）


9
00:00:27,494 --> 00:00:28,328 line:-1
（展示内容）


10
00:00:28,395 --> 00:00:31,932 line:-1
我们来看一下API里面的两组类


11
00:00:31,999 --> 00:00:35,936 line:-1
我们为描述触觉和音频内容


12
00:00:36,003 --> 00:00:39,072 line:-1
使用的基本范围和描述符


13
00:00:40,674 --> 00:00:42,643 line:-1
我们以基本的方法来


14
00:00:42,709 --> 00:00:44,611 line:-1
说明其内容


15
00:00:44,678 --> 00:00:45,779 line:-1
（触觉初体验）


16
00:00:46,413 --> 00:00:50,184 line:-1
接下来 我们来介绍动态参数


17
00:00:50,250 --> 00:00:52,386 line:-2
你可以在你的app中
自定义动态参数


18
00:00:52,452 --> 00:00:56,456 line:-1
触觉反馈形式来给予用户使用


19
00:00:56,523 --> 00:01:00,427 line:-1
你app时的反馈


20
00:01:00,494 --> 00:01:01,695 line:-1
（动态参数）


21
00:01:01,762 --> 00:01:06,533 line:-1
以及 我们会探讨一种表现 存储


22
00:01:06,600 --> 00:01:09,036 line:-1
和分享你的音频触觉内容的新方式


23
00:01:09,102 --> 00:01:14,041 line:-2
我们称之为Apple触觉音频样式
或AHAP的一种新文件格式


24
00:01:14,107 --> 00:01:15,475 line:-2
（Apple触觉
音频样式(AHAP)）


25
00:01:15,542 --> 00:01:16,443 line:-1
所以我们开始吧


26
00:01:21,014 --> 00:01:21,849 line:-2
（使用Core Haptics
的场景）


27
00:01:21,915 --> 00:01:23,917 line:-2
首先 什么是
Core Haptics？


28
00:01:23,984 --> 00:01:25,085 line:-2
（什么是
Core Haptics？）


29
00:01:25,152 --> 00:01:30,057 line:-2
我们认为它是iPhone上的
一种事件驱动的


30
00:01:30,123 --> 00:01:31,158 line:-1
音频和触觉渲染API


31
00:01:31,825 --> 00:01:33,026 line:-1
或音响合成器


32
00:01:34,828 --> 00:01:38,832 line:-2
我们和Core Haptics
一起继续使用其他


33
00:01:38,899 --> 00:01:43,237 line:-1
音频、触觉和反馈的API


34
00:01:43,303 --> 00:01:45,506 line:-2
比如AVAudioPlayer、
UIKit的UIFeedbackGenerator


35
00:01:46,974 --> 00:01:47,875 line:-1
你可能在想


36
00:01:48,775 --> 00:01:50,344 line:-2
“哪种型号的iPhone
支持使用呢？”


37
00:01:50,944 --> 00:01:52,479 line:-1
（设备支持）


38
00:01:52,546 --> 00:01:55,782 line:-1
从iPhone 8开始


39
00:01:56,083 --> 00:01:59,219 line:-1
所有的设备都支持触觉驱动


40
00:01:59,520 --> 00:02:03,991 line:-1
只需一个API和一种文件格式


41
00:02:04,758 --> 00:02:05,792 line:-1
同其他产品一样


42
00:02:06,660 --> 00:02:07,828 line:-1
我们将你的触觉模式


43
00:02:07,895 --> 00:02:11,131 line:-1
都统一了


44
00:02:11,198 --> 00:02:15,402 line:-1
这样 你只需创作原型和发布了


45
00:02:15,469 --> 00:02:17,271 line:-1
一个产品


46
00:02:19,806 --> 00:02:20,641 line:-1
以及


47
00:02:21,475 --> 00:02:25,946 line:-2
这些iPhone不仅适配了旧的
型号驱动器


48
00:02:26,213 --> 00:02:28,882 line:-2
它们都具备Apple设计的
触感引擎


49
00:02:28,949 --> 00:02:35,222 line:-2
它能给你带来结合了多种特质
功率 宽泛 富有表现力


50
00:02:35,289 --> 00:02:39,760 line:-2
以及细节设计
和无与伦比的用户操作体验


51
00:02:41,461 --> 00:02:43,830 line:-1
接下来 我们来聊聊


52
00:02:43,897 --> 00:02:47,234 line:-2
你们中已经在iPhone
使用UIKit的反馈API


53
00:02:47,534 --> 00:02:50,370 line:-1
来集成了触觉功能的人


54
00:02:51,638 --> 00:02:52,706 line:-2
（上下文中的
Core Haptics）


55
00:02:52,773 --> 00:02:56,844 line:-2
现在 Core Haptics
并不是这个API的替代


56
00:02:57,377 --> 00:02:58,378 line:-2
（选择正确的
Haptics API）


57
00:02:58,445 --> 00:02:59,413 line:-1
在多数情况


58
00:02:59,479 --> 00:03:01,949 line:-2
你想要继续使用
FeedbackGenerator


59
00:03:02,015 --> 00:03:06,587 line:-1
特别是添加触觉来控制UIKit


60
00:03:07,187 --> 00:03:08,422 line:-1
使用这个API


61
00:03:08,689 --> 00:03:11,625 line:-1
你为你的事件指派了设计意图


62
00:03:11,692 --> 00:03:15,562 line:-1
无论是一个选择 撞击或一则通知


63
00:03:15,629 --> 00:03:17,931 line:-1
你让别人 Apple


64
00:03:18,198 --> 00:03:21,268 line:-1
担心开发一个词汇来表达


65
00:03:21,335 --> 00:03:25,939 line:-2
和混合正确的形式
比如音效触碰动画


66
00:03:26,006 --> 00:03:27,574 line:-1
来传达消息


67
00:03:28,609 --> 00:03:31,612 line:-2
现在 iOS 13上
已经优化了这个API


68
00:03:31,678 --> 00:03:34,681 line:-1
你可以查看文档来了解更多信息


69
00:03:36,550 --> 00:03:39,820 line:-2
相比之下
Core Haptics适用于


70
00:03:39,887 --> 00:03:43,757 line:-2
当你向要自己设计
声音和触觉的开发者


71
00:03:44,391 --> 00:03:46,760 line:-1
使用它 你就能自己设计样式


72
00:03:47,027 --> 00:03:51,498 line:-1
你能自己控制很多使用时候的细节


73
00:03:51,565 --> 00:03:56,937 line:-2
你可以与其他API一同使用
比如Core Animation里的动画


74
00:03:57,004 --> 00:03:59,840 line:-2
或AVAudioEngine
的音效事件


75
00:04:00,741 --> 00:04:04,311 line:-1
你有非常丰富的播放和控制设置


76
00:04:05,145 --> 00:04:08,649 line:-2
现在 UIKit的底层包括
Core Haptics


77
00:04:08,715 --> 00:04:14,054 line:-2
所以 API之间的使用性能是
低延迟的


78
00:04:14,621 --> 00:04:15,455 line:-1
现在...


79
00:04:16,990 --> 00:04:20,928 line:-2
设计你自己的
触觉模式需要更多的时间


80
00:04:20,994 --> 00:04:24,598 line:-1
但是 当考虑到它允许你实现的效果


81
00:04:24,665 --> 00:04:28,969 line:-1
以及让你的app变得与众不同


82
00:04:29,303 --> 00:04:30,671 line:-1
这是值得去做的


83
00:04:31,305 --> 00:04:35,042 line:-1
接下来 我来讲一下音效的性能


84
00:04:35,409 --> 00:04:36,743 line:-1
（触觉和音效之间的关系）


85
00:04:36,810 --> 00:04:40,180 line:-2
Core Haptics
同样也是一个音效的API


86
00:04:40,247 --> 00:04:43,183 line:-1
它和触碰行为结合一起


87
00:04:43,250 --> 00:04:48,589 line:-1
允许你同步播放短的


88
00:04:48,655 --> 00:04:50,490 line:-1
合成的或客制化波形音效


89
00:04:51,658 --> 00:04:54,561 line:-2
这类音效触觉结合
对Apple自己的


90
00:04:54,628 --> 00:04:57,164 line:-1
触觉体验是至关重要的


91
00:04:57,231 --> 00:04:59,800 line:-2
比如iPhone 7的
触觉主界面按钮


92
00:05:01,101 --> 00:05:03,270 line:-2
Series 4 Watch的
触觉表冠


93
00:05:04,204 --> 00:05:05,439 line:-1
和UIDatePicker


94
00:05:05,506 --> 00:05:08,775 line:-1
当你选择日期、时间和闹钟时


95
00:05:08,842 --> 00:05:10,744 line:-1
滚动的轮子


96
00:05:11,445 --> 00:05:13,280 line:-1
你可能并没有意识到


97
00:05:13,847 --> 00:05:17,017 line:-2
你可能甚至没有注意到
使用时的提示音


98
00:05:17,084 --> 00:05:20,521 line:-1
不过 如果你关闭了音效


99
00:05:20,587 --> 00:05:24,591 line:-2
你会意识到使用过程中
音效反馈是不可分割的一部分


100
00:05:24,858 --> 00:05:25,692 line:-1
所以现在...


101
00:05:26,126 --> 00:05:29,263 line:-2
你可以在自己的app中使用
Core Haptics来达到同样的效果


102
00:05:29,329 --> 00:05:32,199 line:-1
我想来聊一下某些类型的app


103
00:05:32,266 --> 00:05:34,434 line:-1
一类会大量使用到


104
00:05:34,501 --> 00:05:36,570 line:-1
Core Haptics的app


105
00:05:36,937 --> 00:05:38,005 line:-1
那就是游戏了


106
00:05:38,639 --> 00:05:39,840 line:-1
（游戏app）


107
00:05:39,907 --> 00:05:43,577 line:-2
想象我们在赛跑
我们想要进入快速模式


108
00:05:43,844 --> 00:05:44,678 line:-1
我们来想象一下


109
00:05:49,416 --> 00:05:52,386 line:-1
当你在app中想要表现


110
00:05:52,452 --> 00:05:56,089 line:-1
爆炸和隆隆响的效果时


111
00:05:56,156 --> 00:05:59,326 line:-1
可以同时使用触觉和音效来传达


112
00:06:00,594 --> 00:06:01,428 line:-1
另一个非常好的app


113
00:06:02,196 --> 00:06:06,700 line:-1
是模仿我们身体接触


114
00:06:06,767 --> 00:06:09,503 line:-1
来让你的app更具真实感


115
00:06:10,204 --> 00:06:11,405 line:-1
思考一个网球游戏


116
00:06:12,139 --> 00:06:15,275 line:-1
你可以用到声音和触觉组件


117
00:06:15,876 --> 00:06:18,512 line:-1
声音的大小 触摸的强度


118
00:06:18,579 --> 00:06:21,081 line:-1
和你的摆幅的速度成正比


119
00:06:21,148 --> 00:06:24,051 line:-1
或是球在球拍中的位置


120
00:06:24,117 --> 00:06:28,622 line:-1
你甚至可以控制撞击后


121
00:06:28,689 --> 00:06:29,923 line:-1
球拍的弦共振声的长度


122
00:06:31,892 --> 00:06:34,695 line:-2
另一种使用
Core Haptics的好例子


123
00:06:34,761 --> 00:06:36,730 line:-1
是增强现实类的app


124
00:06:37,664 --> 00:06:38,699 line:-2
（Core Haptics
和AR）


125
00:06:38,765 --> 00:06:40,701 line:-1
如果你在这个领域从事工作


126
00:06:40,767 --> 00:06:45,205 line:-1
你应该清楚高视觉保真


127
00:06:45,272 --> 00:06:46,106 line:-1
和


128
00:06:47,241 --> 00:06:49,676 line:-1
3D音效一起带来的身临其境的好处


129
00:06:49,743 --> 00:06:53,380 line:-2
现在 我们能更一步实现
这种沉浸式体检


130
00:06:53,780 --> 00:06:59,887 line:-2
依据用户的肢体动作来自定义
触觉感官回馈


131
00:07:01,722 --> 00:07:06,760 line:-2
或是对app的反应 设备
AR物件事件


132
00:07:06,827 --> 00:07:10,030 line:-1
比如 移动你的设备或四处移动


133
00:07:11,398 --> 00:07:13,367 line:-1
你的所有用户


134
00:07:15,903 --> 00:07:17,004 line:-1
作为一个灵感


135
00:07:17,070 --> 00:07:20,207 line:-2
今年 我们增强了
Swift Shot示例代码


136
00:07:20,541 --> 00:07:27,181 line:-1
通过使用触觉来调节拉弹弓的速度


137
00:07:28,282 --> 00:07:30,450 line:-1
你拉回手机的速度


138
00:07:30,951 --> 00:07:34,555 line:-1
拉回时你会感受到紧张感


139
00:07:34,621 --> 00:07:37,658 line:-1
当你释放时会感受到满意的转换


140
00:07:38,725 --> 00:07:40,460 line:-1
我想给你们展示一段视频


141
00:07:40,994 --> 00:07:44,131 line:-1
我将会使用音效来体现触觉感受


142
00:07:44,198 --> 00:07:45,265 line:-1
那就是你将会感受到的


143
00:07:45,599 --> 00:07:47,367 line:-1
它们听起来是这样的


144
00:07:51,104 --> 00:07:53,640 line:-1
现在 我们来看整个过程


145
00:07:53,941 --> 00:07:55,576 line:-1
视觉和触觉...


146
00:07:56,543 --> 00:07:57,678 line:-1
不是一般的音效


147
00:08:02,683 --> 00:08:07,154 line:-1
这就是我们同时使用触觉


148
00:08:08,021 --> 00:08:09,022 line:-1
声音和视觉


149
00:08:09,089 --> 00:08:12,793 line:-1
来增强AR体验的一个例子


150
00:08:12,860 --> 00:08:15,195 line:-1
还有更多的一些app


151
00:08:15,262 --> 00:08:19,032 line:-1
游戏和AR通过使用触觉感官


152
00:08:19,099 --> 00:08:21,168 line:-1
和音效做出有创意的探索


153
00:08:21,635 --> 00:08:24,271 line:-1
我知道你也能想到很多


154
00:08:27,574 --> 00:08:32,212 line:-2
现在 我们来看
如何使用Core Haptics


155
00:08:32,479 --> 00:08:33,447 line:-1
来表达我们的内容


156
00:08:36,416 --> 00:08:38,986 line:-2
Core Haptics
只有两种类


157
00:08:39,052 --> 00:08:44,191 line:-2
它们中一种用来展现你的内容
另一种来播放那个内容


158
00:08:44,258 --> 00:08:45,893 line:-1
（内容类 播放类）


159
00:08:45,959 --> 00:08:48,862 line:-1
我们先来看一下内容类


160
00:08:49,463 --> 00:08:50,731 line:-1
（事件、参数和模式）


161
00:08:50,797 --> 00:08:55,435 line:-2
Core Haptics中
基本的不可分割的内容元素


162
00:08:55,502 --> 00:08:57,204 line:-1
被称为CHHapticEvent


163
00:08:57,771 --> 00:09:01,775 line:-2
现在 每个事件都有
一个类型和一个时间


164
00:09:01,842 --> 00:09:05,879 line:-2
根据不同的需要
不同参数可以定义不同的感觉


165
00:09:07,281 --> 00:09:11,351 line:-2
这些事件可以部分重叠
重叠时 它们混合在一起


166
00:09:12,452 --> 00:09:16,156 line:-1
所有的事件都归为一类模式


167
00:09:17,224 --> 00:09:21,195 line:-2
接下来 我想要谈谈我们的
这些不同类别的事件


168
00:09:23,163 --> 00:09:26,099 line:-2
第一类称为
HapticTransient


169
00:09:26,533 --> 00:09:29,903 line:-2
我觉得
HapticTransient是槌子


170
00:09:29,970 --> 00:09:33,674 line:-2
它是一个击打动作
它是短暂和瞬间发生的


171
00:09:34,074 --> 00:09:36,777 line:-1
我们还有两种连续的类型


172
00:09:36,844 --> 00:09:37,678 line:-1
（事件类型）


173
00:09:37,744 --> 00:09:40,747 line:-2
是HapticContinuous类
和AudioContinuous类


174
00:09:41,048 --> 00:09:45,118 line:-1
这个 我觉得 像是拉动弦乐器的弓


175
00:09:45,385 --> 00:09:48,355 line:-1
它不是短暂的


176
00:09:48,422 --> 00:09:50,991 line:-1
它能被用作 比如 背景纹理


177
00:09:51,058 --> 00:09:53,861 line:-1
它有你能操作的更多控件


178
00:09:53,927 --> 00:09:56,496 line:-1
比如 控制它的共振声


179
00:09:57,497 --> 00:10:00,767 line:-2
最后
是AudioCustom类型


180
00:10:00,834 --> 00:10:03,871 line:-2
我之前提到过
AudioCustom


181
00:10:03,937 --> 00:10:06,673 line:-1
你能和触觉感知


182
00:10:07,007 --> 00:10:09,176 line:-1
一起同步回放


183
00:10:10,077 --> 00:10:11,378 line:-1
你自己的音效


184
00:10:12,613 --> 00:10:16,683 line:-2
接下来 我们来讲一下它们的
一些可选参数


185
00:10:18,151 --> 00:10:20,020 line:-1
（我们的第一个事件参数）


186
00:10:20,087 --> 00:10:23,590 line:-2
我们的第一个事件参数叫做
HapticIntesnity


187
00:10:24,157 --> 00:10:27,528 line:-1
它有一个模拟音频和音频音量


188
00:10:27,594 --> 00:10:29,363 line:-1
你可能已经非常熟悉了


189
00:10:30,430 --> 00:10:34,601 line:-1
现在 你从没有输出


190
00:10:34,668 --> 00:10:37,838 line:-1
当你把滑块从0调到1


191
00:10:37,905 --> 00:10:40,174 line:-1
变成了系统输出最大值


192
00:10:41,475 --> 00:10:44,745 line:-2
我们下一个参数是
HapticSharpness


193
00:10:44,811 --> 00:10:47,848 line:-2
HapticSharpness
是一个新的概念


194
00:10:47,915 --> 00:10:52,252 line:-2
它既没有实体的类比物
也没有音频的类比物


195
00:10:52,319 --> 00:10:54,421 line:-1
（HapticsSHARPNESS）


196
00:10:54,488 --> 00:10:55,322 line:-1
在这个...


197
00:10:55,956 --> 00:10:57,858 line:-1
世界 我希望你不要


198
00:10:57,925 --> 00:11:00,794 line:-1
向知觉空间前进


199
00:11:01,128 --> 00:11:01,962 line:-1
从一开始...


200
00:11:02,229 --> 00:11:05,699 line:-1
一个非常圆和自然的0


201
00:11:06,767 --> 00:11:10,170 line:-1
到最后更加简洁和清晰的1


202
00:11:10,637 --> 00:11:13,207 line:-1
为了解释得更加清楚


203
00:11:13,907 --> 00:11:16,677 line:-1
我要使用iOS 12上的一些例子


204
00:11:18,178 --> 00:11:20,447 line:-1
锁屏上的闪光灯


205
00:11:20,514 --> 00:11:24,351 line:-2
是一个非常高级别的触觉感受
的例子


206
00:11:26,353 --> 00:11:27,254 line:-1
以及...


207
00:11:27,321 --> 00:11:32,793 line:-2
App Switcher
向上滑动 这是一个更加圆滑


208
00:11:32,860 --> 00:11:34,261 line:-1
低级别的触觉感知


209
00:11:36,330 --> 00:11:37,497 line:-1
为什么如此设计呢


210
00:11:37,564 --> 00:11:42,870 line:-2
为什么会有两种类型的体验
强烈和不强烈呢？


211
00:11:42,936 --> 00:11:47,474 line:-1
我会在音频触觉设计的演讲上告诉你


212
00:11:48,909 --> 00:11:52,980 line:-2
现在 我们有几个多类型的事件参数
比如


213
00:11:53,046 --> 00:11:56,517 line:-1
音效的pitch和pan


214
00:11:56,583 --> 00:11:57,784 line:-1
对于触觉来说


215
00:11:57,851 --> 00:12:01,088 line:-1
我们能让你改变这些共振等等


216
00:12:01,154 --> 00:12:02,055 line:-1
是这两个...


217
00:12:02,923 --> 00:12:06,426 line:-1
就足够我们使用了


218
00:12:08,395 --> 00:12:13,000 line:-2
现在 为了研究如何控制
强度和清晰度


219
00:12:13,066 --> 00:12:15,135 line:-1
的动态范围和精度


220
00:12:15,869 --> 00:12:17,404 line:-1
我们有一段示例代码


221
00:12:18,172 --> 00:12:20,774 line:-1
调色板 它能允许你


222
00:12:21,942 --> 00:12:23,577 line:-1
自己尝试体验这种感觉


223
00:12:23,644 --> 00:12:27,147 line:-1
当你移动 点击或是拖动手指


224
00:12:27,681 --> 00:12:32,486 line:-1
你会接触到强度的轴和清晰度的轴


225
00:12:32,553 --> 00:12:34,454 line:-1
当你操作时 它会提供相应的


226
00:12:34,521 --> 00:12:37,991 line:-1
持续或短暂的触碰体验


227
00:12:38,659 --> 00:12:41,828 line:-1
这会帮你找到直觉


228
00:12:44,298 --> 00:12:45,933 line:-1
（触觉初体验）


229
00:12:45,999 --> 00:12:51,104 line:-2
以上是Core Haptics
使用场景的介绍


230
00:12:51,171 --> 00:12:53,740 line:-1
以及如何展示我们的内容


231
00:12:54,041 --> 00:12:57,711 line:-2
有请我们Core Haptics
架构师Doug Scott


232
00:12:57,778 --> 00:12:59,379 line:-1
来为我们介绍


233
00:13:00,047 --> 00:13:01,815 line:-1
播放Core Haptics


234
00:13:02,249 --> 00:13:03,550 line:-1
播放相应的模式


235
00:13:03,617 --> 00:13:06,453 line:-2
和将Core Haptics
集成至我们的app


236
00:13:06,520 --> 00:13:07,588 line:-1
请欢迎Doug


237
00:13:10,891 --> 00:13:11,859 line:-1
谢谢Michael


238
00:13:12,693 --> 00:13:13,660 line:-1
大家晚上好


239
00:13:13,727 --> 00:13:18,599 line:-2
我非常高兴能在这里和大家交流集成
Core Haptics API


240
00:13:18,665 --> 00:13:20,200 line:-1
到你的app中


241
00:13:22,202 --> 00:13:24,972 line:-1
在我展示演示和示例代码之前


242
00:13:25,038 --> 00:13:28,242 line:-2
我们来回顾一下
当你想要在app中


243
00:13:28,308 --> 00:13:30,210 line:-1
使用触觉感知模式的几个步骤


244
00:13:32,946 --> 00:13:35,716 line:-1
第一步是创建内容


245
00:13:35,782 --> 00:13:37,718 line:-1
因为它能在任何节点创建


246
00:13:37,784 --> 00:13:39,953 line:-1
在你需要使用它之前创建


247
00:13:40,354 --> 00:13:45,058 line:-2
在这个例子中 我们在触觉模式中
加载了NSDictionary


248
00:13:45,125 --> 00:13:46,426 line:-1
这个词典是我们


249
00:13:46,493 --> 00:13:49,429 line:-1
在app里存储的资源的一部分


250
00:13:50,197 --> 00:13:51,665 line:-1
我们之后会看到


251
00:13:51,732 --> 00:13:55,169 line:-1
模式也能在它们播放之前被创建


252
00:13:55,235 --> 00:13:58,572 line:-1
如果在你的app中它们需要


253
00:13:58,639 --> 00:13:59,806 line:-1
非常多的互动来回应改变


254
00:13:59,873 --> 00:14:01,875 line:-1
（播放一个触觉模式：推荐的模式）


255
00:14:01,942 --> 00:14:05,245 line:-1
下一步就是创建一个触觉引擎的实例


256
00:14:05,846 --> 00:14:06,680 line:-1
这需要在你的app知道


257
00:14:06,747 --> 00:14:10,617 line:-1
它会使用触觉功能之前完成


258
00:14:12,553 --> 00:14:15,656 line:-2
接下来 你为你的触觉模式
创建了一个触觉播放器


259
00:14:15,989 --> 00:14:18,992 line:-1
每个播放器都与一个模式关联在一起


260
00:14:19,059 --> 00:14:20,928 line:-1
和一个特别的触觉引擎


261
00:14:23,697 --> 00:14:24,865 line:-1
启动触觉引擎


262
00:14:24,932 --> 00:14:28,302 line:-1
告知系统来初始化音效和触觉硬件


263
00:14:28,368 --> 00:14:31,605 line:-1
做好播放模式的准备


264
00:14:33,774 --> 00:14:36,543 line:-1
在你app要开始播放模式的瞬间


265
00:14:36,610 --> 00:14:37,911 line:-1
你启动了播放器


266
00:14:38,345 --> 00:14:40,280 line:-1
这可以用两种模式完成


267
00:14:40,347 --> 00:14:43,750 line:-1
第一种 是快速模式


268
00:14:43,817 --> 00:14:46,420 line:-1
告诉系统我想要这个模式在


269
00:14:46,486 --> 00:14:49,823 line:-1
最短延时内立刻播放


270
00:14:50,524 --> 00:14:54,995 line:-2
第二种 是预定模式
你给它一个固定的时间戳


271
00:14:55,062 --> 00:14:57,731 line:-1
告诉系统你想要


272
00:14:57,798 --> 00:15:00,667 line:-2
和一些其他的系统 比如
另一个音效播放器


273
00:15:00,734 --> 00:15:04,471 line:-2
或是游戏事件和图形事件一起
同步这个事件


274
00:15:08,275 --> 00:15:10,944 line:-2
如果你想要知道你的模式
何时完成播放


275
00:15:11,011 --> 00:15:13,881 line:-1
你能让触觉引擎通过回调函数通知你


276
00:15:13,947 --> 00:15:16,149 line:-1
当你的播放器都播放完成时


277
00:15:17,885 --> 00:15:20,587 line:-1
这里 引擎向app发送请求


278
00:15:21,588 --> 00:15:24,458 line:-1
app现在选择停止触觉引擎


279
00:15:24,525 --> 00:15:27,361 line:-1
或继续使用下一个触觉引擎


280
00:15:28,929 --> 00:15:30,397 line:-1
这些是基本的步骤


281
00:15:30,464 --> 00:15:34,334 line:-2
现在 我们来看一个
使用了这个系统的app


282
00:15:36,370 --> 00:15:39,806 line:-1
在这之前 我来向你们秘密展示


283
00:15:40,474 --> 00:15:44,478 line:-1
一个使用了集成触觉反馈的API的


284
00:15:44,545 --> 00:15:46,880 line:-1
一个特殊的问题


285
00:15:47,381 --> 00:15:48,982 line:-1
观众们可能感受不到


286
00:15:49,750 --> 00:15:52,553 line:-1
我们处理它的方式是为每一个


287
00:15:52,619 --> 00:15:54,588 line:-1
触觉事件的输出添加一个音效同等物


288
00:15:54,655 --> 00:15:57,491 line:-1
这样你就会听到触碰后的音效了


289
00:15:57,558 --> 00:15:58,392 line:-1
（演示）


290
00:16:00,827 --> 00:16:03,564 line:-2
这个app使用了一个
简单的物理引擎


291
00:16:03,630 --> 00:16:07,067 line:-1
通过加速传感器在屏幕中移动球


292
00:16:09,002 --> 00:16:11,305 line:-1
它集成了触感和音效反馈


293
00:16:11,371 --> 00:16:13,740 line:-1
当球触碰到屏幕边缘时


294
00:16:14,141 --> 00:16:16,476 line:-1
用户会有撞击


295
00:16:16,543 --> 00:16:18,979 line:-2
到游戏墙的边缘的感觉
也能听到声音


296
00:16:19,046 --> 00:16:20,914 line:-1
球撞击边缘越重


297
00:16:20,981 --> 00:16:23,984 line:-2
触觉的强度则更大
声音音量也会加大


298
00:16:26,253 --> 00:16:27,354 line:-1
好的


299
00:16:27,421 --> 00:16:30,224 line:-2
我们来看一下这个示例代码如何将
Core Haptics API


300
00:16:30,290 --> 00:16:32,593 line:-1
集成至app的


301
00:16:32,893 --> 00:16:35,529 line:-1
我们来看事件参数是如何被用来


302
00:16:35,596 --> 00:16:38,131 line:-1
改变触觉和音效的


303
00:16:38,932 --> 00:16:40,667 line:-1
这个例子 所有的代码


304
00:16:40,734 --> 00:16:42,936 line:-1
是从网上下载的示例代码


305
00:16:43,003 --> 00:16:46,173 line:-1
但它已被编辑过 只展示重要的部分


306
00:16:46,240 --> 00:16:47,241 line:-1
（使用Core Haptics API）


307
00:16:48,242 --> 00:16:50,911 line:-2
首先 我们导入
Core Haptics模块


308
00:16:50,978 --> 00:16:53,914 line:-1
和其他我们app需要的模块


309
00:16:57,384 --> 00:17:01,121 line:-2
CHHapticEngine被声明为
ViewController的一个成员变量


310
00:17:01,188 --> 00:17:03,223 line:-1
因为我们想要控制它的生命周期


311
00:17:03,290 --> 00:17:05,992 line:-1
让它在app的整个生命周期都存在


312
00:17:08,127 --> 00:17:10,263 line:-1
就像我们之前在流程图讨论过的


313
00:17:10,329 --> 00:17:13,767 line:-1
我们在使用触觉引擎之前就设置好它


314
00:17:13,834 --> 00:17:17,704 line:-2
这里 我们调用一个视图
加载后的协助方法


315
00:17:20,174 --> 00:17:21,942 line:-1
在这个协助方法里 我们开始


316
00:17:22,009 --> 00:17:24,678 line:-1
通过创建一个触觉引擎的实例


317
00:17:24,744 --> 00:17:26,413 line:-1
来检查可能存在的错误


318
00:17:26,914 --> 00:17:29,016 line:-1
这个引擎被分配到我们的成员变量


319
00:17:29,082 --> 00:17:30,517 line:-1
所以我们能一直保留它


320
00:17:32,419 --> 00:17:36,523 line:-1
它是可选的 但是分配一个闭包


321
00:17:36,590 --> 00:17:39,159 line:-2
给引擎的stoppedHandler属性
非常有用


322
00:17:39,426 --> 00:17:42,196 line:-1
如果引擎因为app本身之外的


323
00:17:42,262 --> 00:17:45,699 line:-1
行为停止运作了


324
00:17:45,766 --> 00:17:47,601 line:-1
可能的原因有


325
00:17:47,668 --> 00:17:51,839 line:-1
音效会话中断或app被终止运行了


326
00:17:54,074 --> 00:17:56,810 line:-1
我们启用触觉引擎来完成这个方法


327
00:17:56,877 --> 00:17:58,679 line:-1
以及检查可能存在的错误


328
00:17:59,346 --> 00:18:00,848 line:-1
这个引擎会持续运作


329
00:18:00,914 --> 00:18:04,751 line:-1
直到app或外部行为让它停止


330
00:18:05,819 --> 00:18:07,721 line:-1
请留意app会持续关注


331
00:18:07,788 --> 00:18:10,457 line:-1
引擎是否需要重启


332
00:18:11,225 --> 00:18:14,628 line:-1
通常 只要屏幕有可见的视图


333
00:18:14,695 --> 00:18:17,531 line:-1
就会有触觉交互行为


334
00:18:17,598 --> 00:18:19,666 line:-1
你可能会让引擎一直保持运行


335
00:18:24,404 --> 00:18:26,073 line:-1
这里是简单的物理引擎


336
00:18:26,139 --> 00:18:27,608 line:-1
在app中的位置


337
00:18:27,674 --> 00:18:30,477 line:-1
它让我们知道球碰到了墙


338
00:18:30,811 --> 00:18:34,214 line:-2
在这个例子中 我们想要
集成触觉和音效模式


339
00:18:34,548 --> 00:18:37,251 line:-1
来和球的速度产生交互行为


340
00:18:37,317 --> 00:18:41,355 line:-2
所以模式播放器和它的模式
在它们被需要的时候创建


341
00:18:43,924 --> 00:18:46,393 line:-1
这个方法负责创建


342
00:18:46,460 --> 00:18:48,996 line:-1
响应播放球的碰撞模式


343
00:18:49,563 --> 00:18:52,332 line:-2
在这里 我们会创建一个
有两个事件的模式


344
00:18:52,399 --> 00:18:54,568 line:-1
一个触觉和一个音效


345
00:18:56,203 --> 00:18:59,406 line:-2
我们创建一个hapticTransient
类型的触觉事件


346
00:18:59,473 --> 00:19:01,842 line:-1
来处理有效的感觉


347
00:19:04,344 --> 00:19:05,913 line:-1
我们给它两个事件色参数


348
00:19:05,979 --> 00:19:08,482 line:-1
来配置事件的强度和清晰度


349
00:19:08,549 --> 00:19:12,753 line:-1
你已经知道的 基于球的速度


350
00:19:15,222 --> 00:19:19,159 line:-2
接下来 我们创建
audioContinuous类型的音效事件


351
00:19:20,561 --> 00:19:23,030 line:-1
和一系列音量的事件参数


352
00:19:23,096 --> 00:19:27,000 line:-1
包络衰减也被用来计算球的速度


353
00:19:27,367 --> 00:19:29,670 line:-1
持续参数让我们


354
00:19:29,736 --> 00:19:33,707 line:-1
不用持续关注事件的长度


355
00:19:33,974 --> 00:19:37,144 line:-1
就知道这个事件的强度将会衰减为0


356
00:19:39,680 --> 00:19:42,282 line:-1
我们创建了一个包括了两个


357
00:19:42,349 --> 00:19:43,851 line:-1
实时同步的事件


358
00:19:45,886 --> 00:19:48,822 line:-1
最后 我们为模式创建了模式播放器


359
00:19:48,889 --> 00:19:49,723 line:-1
然后返回它


360
00:19:50,991 --> 00:19:51,992 line:-1
给这一层


361
00:19:52,059 --> 00:19:54,428 line:-1
回到响应碰撞的方法


362
00:19:55,362 --> 00:19:56,530 line:-1
最后一步是


363
00:19:56,597 --> 00:20:01,268 line:-2
在atTime CHHapticTimeImmediate
启动模式播放器


364
00:20:01,335 --> 00:20:05,405 line:-1
它表示以最小延时立刻播放


365
00:20:06,907 --> 00:20:10,511 line:-2
请注意 这个app并不拥有这个
播放器的实例


366
00:20:11,211 --> 00:20:15,249 line:-1
它的模式会被一直播放直到结束


367
00:20:15,315 --> 00:20:18,385 line:-1
所以app能简单地关掉并忘记它


368
00:20:20,888 --> 00:20:24,024 line:-2
这就是使用模式播放内容
最简单的方法


369
00:20:24,091 --> 00:20:26,894 line:-2
它在你app的代码中
由代码自动创建


370
00:20:27,761 --> 00:20:30,664 line:-1
因为这个app是不间断交互的


371
00:20:30,731 --> 00:20:32,432 line:-1
直到游戏屏幕不再可见之前


372
00:20:32,499 --> 00:20:35,169 line:-1
我们不会停止触觉引擎


373
00:20:38,105 --> 00:20:41,642 line:-2
现在 我们来讲一下Core Haptics
最强大的功能之一的


374
00:20:41,708 --> 00:20:44,311 line:-1
动态参数


375
00:20:46,480 --> 00:20:50,083 line:-1
在模式播放时 动态参数


376
00:20:50,150 --> 00:20:54,788 line:-1
能让你增加或减少已有事件


377
00:20:54,855 --> 00:20:56,723 line:-1
活跃的和将要到来的事件的参数的值


378
00:20:56,790 --> 00:20:58,458 line:-1
（动态参数）


379
00:20:58,525 --> 00:21:02,062 line:-1
动态参数在你提供的时间戳生效


380
00:21:02,663 --> 00:21:06,166 line:-1
你能在任意时间点


381
00:21:06,233 --> 00:21:09,169 line:-1
同时调整多个不同的参数


382
00:21:11,171 --> 00:21:14,374 line:-2
在你创建模式时
你能加入动态参数


383
00:21:14,441 --> 00:21:18,445 line:-1
或在播放时实时将它们传给播放器


384
00:21:20,080 --> 00:21:22,583 line:-1
通过动态修改模式


385
00:21:22,649 --> 00:21:27,254 line:-1
你可以使用一个模式就能


386
00:21:27,321 --> 00:21:29,723 line:-1
创建出无数个触觉和音效变量


387
00:21:31,925 --> 00:21:33,694 line:-1
我们来看一个例子


388
00:21:34,094 --> 00:21:36,763 line:-2
在这张示意图底部
我们有一个触觉模式


389
00:21:36,830 --> 00:21:40,367 line:-1
所有的触觉事件强度都被


390
00:21:40,434 --> 00:21:42,069 line:-1
设置为它们的最大值


391
00:21:42,436 --> 00:21:46,940 line:-2
前一半是HapticTransients
后一半是HapticContinuous


392
00:21:47,941 --> 00:21:51,778 line:-2
我们想要暂时减小游戏中所有的
触觉强度


393
00:21:51,845 --> 00:21:55,449 line:-1
比如 游戏中的角色在讲话


394
00:21:55,516 --> 00:21:58,085 line:-1
（动态参数和事件参数交互）


395
00:21:58,151 --> 00:22:02,556 line:-1
我传给强度一个值为0.3动态参数


396
00:22:02,623 --> 00:22:05,359 line:-1
需要0.5秒生效


397
00:22:05,759 --> 00:22:09,863 line:-2
你能看到它在那个
时间点明显的降低了强度


398
00:22:09,930 --> 00:22:12,599 line:-1
至原来的1/3


399
00:22:14,568 --> 00:22:16,403 line:-2
（Apple触觉音效模式(AHAP)
在文件中播放模式）


400
00:22:16,470 --> 00:22:20,307 line:-2
最后 我们来了解一下
创建模式的另一种方法


401
00:22:22,509 --> 00:22:25,412 line:-1
所以 到底什么是AHAP？


402
00:22:25,479 --> 00:22:27,714 line:-1
（什么是AHAP？）


403
00:22:27,781 --> 00:22:31,752 line:-1
Apple 触觉音效模式是一个


404
00:22:31,818 --> 00:22:35,956 line:-2
基于文字样式的描述
Core Haptics模式说明


405
00:22:36,290 --> 00:22:41,295 line:-1
它创建于嵌套的键值对


406
00:22:41,562 --> 00:22:44,064 line:-2
当你开始使用
Core Haptics API的类时


407
00:22:44,131 --> 00:22:46,466 line:-1
你会非常容易上手


408
00:22:48,402 --> 00:22:49,269 line:-1
它是广泛使用的JSON文件格式


409
00:22:49,336 --> 00:22:52,406 line:-1
的一个模式


410
00:22:52,472 --> 00:22:53,340 line:-1
意味着


411
00:22:54,007 --> 00:22:56,577 line:-2
你已经有很多不同的
读、写和编辑它们


412
00:22:56,643 --> 00:22:58,612 line:-1
的框架


413
00:22:58,679 --> 00:23:01,882 line:-1
包括比如Swift可编辑的框架


414
00:23:04,384 --> 00:23:07,855 line:-2
AHAP让分享和编辑触觉模式
变得简单


415
00:23:07,921 --> 00:23:11,225 line:-1
因为它是所有开发者都认可的格式


416
00:23:13,927 --> 00:23:16,630 line:-2
从外部的AHAP文件加载
你的触觉模式


417
00:23:16,697 --> 00:23:21,001 line:-2
允许你从app的代码中分离
你的内容


418
00:23:22,469 --> 00:23:24,037 line:-1
（创建一个AHAP文件）


419
00:23:24,104 --> 00:23:25,939 line:-1
通过使用幻灯片组的魔力


420
00:23:26,006 --> 00:23:28,876 line:-2
我们在这里创建一个
简单的AHAP文件


421
00:23:30,744 --> 00:23:33,013 line:-1
我们从一个版本字符串开始


422
00:23:33,080 --> 00:23:35,415 line:-1
它包含了这个模式设计的


423
00:23:35,482 --> 00:23:37,184 line:-1
系统的版本


424
00:23:39,219 --> 00:23:43,924 line:-2
接下来 我们需要为我们的模式
加入键 它是一个字典的数组


425
00:23:46,493 --> 00:23:49,263 line:-2
我们为模式数组加入我们第一个
事件字典


426
00:23:49,630 --> 00:23:53,066 line:-1
这个事件需要两个键值对


427
00:23:53,133 --> 00:23:55,602 line:-2
模式启动
事件发生时的精确到秒的时间


428
00:23:56,670 --> 00:23:59,840 line:-1
和事件类型


429
00:24:00,340 --> 00:24:04,211 line:-2
这是一个短暂的触觉事件
在模式开始时开始


430
00:24:06,413 --> 00:24:07,347 line:-1
对于这个事件


431
00:24:07,414 --> 00:24:10,751 line:-2
我们加入了能影响这个事件的
事件参数


432
00:24:11,151 --> 00:24:14,154 line:-1
它们被存在了它们自己的字典数组中


433
00:24:15,222 --> 00:24:18,692 line:-2
我们添加了一个事件参数来控制
事件的强度


434
00:24:18,759 --> 00:24:20,894 line:-1
另一个参数来控制它的清晰度


435
00:24:24,097 --> 00:24:26,466 line:-1
我们能按上述方法创建第二个事件


436
00:24:26,867 --> 00:24:30,003 line:-2
这一个在第一个事件启动后0.5
秒后启动


437
00:24:30,070 --> 00:24:32,239 line:-2
它的类型是
HapticContinuous


438
00:24:32,773 --> 00:24:34,007 line:-1
至于事件类型


439
00:24:34,074 --> 00:24:36,810 line:-1
我们使用和第一个事件相同的参数


440
00:24:38,979 --> 00:24:42,416 line:-2
HapticContinuous和
AudioContinuous类型的事件


441
00:24:42,482 --> 00:24:46,854 line:-2
除了时间和事件类型
它还需要一个事件持续时间


442
00:24:46,920 --> 00:24:49,957 line:-1
事件持续时间的值需要精确到秒


443
00:24:52,426 --> 00:24:56,063 line:-1
这里 是一个我们创建的模式的视图


444
00:24:56,496 --> 00:25:01,935 line:-2
可以看到两种不同类型的事件最开始
的HapticTransient


445
00:25:02,002 --> 00:25:05,305 line:-1
和之后相关的时机和时长


446
00:25:05,372 --> 00:25:08,442 line:-1
以及它们的强度和清晰度参数值


447
00:25:08,509 --> 00:25:09,676 line:-1
（创建一个AHAP文件）


448
00:25:09,743 --> 00:25:11,278 line:-1
（AHAP结构概括）


449
00:25:11,345 --> 00:25:13,380 line:-1
这是一个AHAP快速的讲解


450
00:25:13,447 --> 00:25:16,884 line:-1
这是一个AHAP文件结构的示意图


451
00:25:17,150 --> 00:25:20,787 line:-2
一个单一的模式
包括了事件字典的数组


452
00:25:21,822 --> 00:25:26,693 line:-2
可选的动态参数和
可选择使用的动态曲线


453
00:25:26,760 --> 00:25:29,630 line:-1
是动态参数的一个扩展


454
00:25:29,696 --> 00:25:31,231 line:-1
你可以从我们的网站上阅读


455
00:25:31,698 --> 00:25:34,201 line:-1
它的更多信息


456
00:25:35,169 --> 00:25:38,172 line:-1
你能在我们演讲页面


457
00:25:38,238 --> 00:25:39,740 line:-1
找到AHAP说明的连接


458
00:25:41,909 --> 00:25:42,809 line:-2
（Haptics示例
示例代码）


459
00:25:42,876 --> 00:25:45,612 line:-2
同时 在我们的演讲页面
你会发现我们的示例代码


460
00:25:45,679 --> 00:25:47,381 line:-1
它展示了如何创建 加载和


461
00:25:47,447 --> 00:25:50,184 line:-1
播放被AHAP文件描述的模式


462
00:25:50,250 --> 00:25:53,520 line:-1
这个触觉示例app包含了


463
00:25:53,587 --> 00:25:57,758 line:-2
一系列使用
Core Haptics API的模式


464
00:25:57,824 --> 00:26:00,360 line:-2
它的精巧 动态范围和音效触觉同步
特质都是值得关注的


465
00:26:01,662 --> 00:26:03,830 line:-1
非常感谢 现在我们将舞台交给


466
00:26:03,897 --> 00:26:05,299 line:-1
我的同事Michael


467
00:26:12,940 --> 00:26:13,841 line:-1
谢谢Doug


468
00:26:14,308 --> 00:26:16,977 line:-1
那么 虽然我们今天讲了很多


469
00:26:17,244 --> 00:26:21,014 line:-2
但Core Haptics
还有很多未被提及到的特征


470
00:26:22,049 --> 00:26:24,685 line:-1
你可以通过在线文档查阅更多细节


471
00:26:24,751 --> 00:26:26,153 line:-2
（Core Haptics：
了解更多）


472
00:26:26,220 --> 00:26:29,823 line:-1
当你构建允许基本的说明内容


473
00:26:29,890 --> 00:26:31,058 line:-1
以及播放内容


474
00:26:31,124 --> 00:26:34,261 line:-1
你可能会思考这些连接触觉和


475
00:26:34,328 --> 00:26:36,496 line:-1
音频模式的设计原则


476
00:26:38,131 --> 00:26:42,169 line:-1
你也会思考触觉设计中


477
00:26:42,236 --> 00:26:44,004 line:-1
的声音设计的规则和指导


478
00:26:44,071 --> 00:26:46,540 line:-1
有哪些坑是我需要留意避开的？


479
00:26:47,274 --> 00:26:50,177 line:-1
有个好消息是我们的音效


480
00:26:50,644 --> 00:26:53,313 line:-2
和触觉设计团队已经为此工作
很多年了


481
00:26:53,614 --> 00:26:56,483 line:-2
它们在更新的
Human Interface Guidelines


482
00:26:56,550 --> 00:27:00,187 line:-2
为触觉设计方案
提供了很多建议和指导


483
00:27:00,254 --> 00:27:05,058 line:-2
在今年的WWDC上
也有很多相关的演讲


484
00:27:05,626 --> 00:27:06,460 line:-1
你可以来看看


485
00:27:06,527 --> 00:27:08,228 line:-1
（利用更新的触觉HIG）


486
00:27:08,529 --> 00:27:09,463 line:-1
所以 我们来总结一下


487
00:27:10,030 --> 00:27:11,131 line:-1
今天 我们谈到了


488
00:27:11,198 --> 00:27:14,968 line:-1
触觉提升了你的app的沉浸式体验


489
00:27:15,335 --> 00:27:18,205 line:-1
让交互变得更加便捷


490
00:27:18,272 --> 00:27:19,106 line:-1
（总结）


491
00:27:19,173 --> 00:27:22,276 line:-1
同步问候音频


492
00:27:22,576 --> 00:27:24,011 line:-1
和触觉感受


493
00:27:24,611 --> 00:27:27,080 line:-1
是一个非常有效的结合


494
00:27:27,681 --> 00:27:31,385 line:-2
不过 现在还没有
API支持你这样做


495
00:27:32,019 --> 00:27:36,089 line:-2
在iOS 13上
你现在有了可用的资源


496
00:27:36,156 --> 00:27:39,426 line:-1
来创建丰富多彩的多媒体体验


497
00:27:39,826 --> 00:27:44,131 line:-1
我们有了词汇来描述触觉和音效事件


498
00:27:45,132 --> 00:27:47,067 line:-1
和文件格式AHAP


499
00:27:47,968 --> 00:27:51,738 line:-2
我们有了新的高性能API
Core Haptics


500
00:27:51,805 --> 00:27:55,342 line:-1
它为低延时和实时调制而设计


501
00:27:56,944 --> 00:28:00,747 line:-1
我们将示例代码 示例模式


502
00:28:01,381 --> 00:28:03,817 line:-2
设计指导和Apple的
支持整合在了一起


503
00:28:04,585 --> 00:28:07,721 line:-1
最后 你有了很棒的观众


504
00:28:07,788 --> 00:28:09,089 line:-1
优质的硬件


505
00:28:09,156 --> 00:28:11,725 line:-1
你能感受到和你预期一样的触觉感受


506
00:28:11,992 --> 00:28:17,364 line:-2
一个功能强大的触觉引擎能
给你提供强大的


507
00:28:17,664 --> 00:28:21,335 line:-1
生动的和精准可用的硬件


508
00:28:22,536 --> 00:28:26,373 line:-2
所以 请来参加周四和周五的
实验室活动吧


509
00:28:26,440 --> 00:28:30,110 line:-1
你可以查看我们今天展示过的


510
00:28:30,177 --> 00:28:31,211 line:-1
触觉示例代码


511
00:28:32,112 --> 00:28:34,781 line:-1
来聊一下你app的想法


512
00:28:34,848 --> 00:28:36,650 line:-1
你也能在我们演讲的页面找到


513
00:28:37,618 --> 00:28:40,721 line:-1
指导和说明意见


514
00:28:42,523 --> 00:28:44,458 line:-2
我知道你将使用
触觉模式在你的app中


515
00:28:44,525 --> 00:28:48,061 line:-1
创建有趣好玩的内容


516
00:28:48,128 --> 00:28:50,731 line:-1
我们期待着你的作品


517
00:28:51,431 --> 00:28:52,566 line:-1
谢谢大家 晚安

